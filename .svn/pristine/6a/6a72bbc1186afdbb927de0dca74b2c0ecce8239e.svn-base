%?version 00082
%?class llspepar

%?library llcrasym
(llcrasym.ps) run
%?library llgenpar
(llgenpar.ps) run
%?library llgensym
(llgensym.ps) run
%?library llbasic
(llbasic.ps) run
%?library llspesym
(llspesym.ps) run

%?partdef spLT001
%?fn	spLT001
%?brief	lower than function
%?bbox	0 0 79 79
/spLT001 {
	/irValue2 exch def	%?brief input value 2 %?use INP %?type REAL %?dflt    0.00
	/irValue1 exch def	%?brief input value 1 %?use INP %?type REAL %?dflt    0.00
	/ixEnableCalc exch def	%?brief enable calculation %?use INP %?type BOOL %?dflt    false
	/qrValue2 false def	%?brief output (value1 value 2 lt) %?use OUT %?type BOOL %?dflt false
%?manual_beg
ixEnableCalc true eq {
	/qrValue2 irValue1 irValue2 lt def
}	{
	/qrValue2 false def
}	ifelse
%?manual_end 
	
	qrValue2 
} def
%?partend

%?partdef spGT001
%?fn	spGT001
%?brief	lower than function
%?bbox	0 0 79 79
/spGT001 {
	/irValue2 exch def	%?brief input value 2 %?use INP %?type REAL %?dflt    0.00
	/irValue1 exch def	%?brief input value 1 %?use INP %?type REAL %?dflt    0.00
	/ixEnableCalc exch def	%?brief enable calculation %?use INP %?type BOOL %?dflt    false
	/qrValue2 false def	%?brief output (value1 value 2 gt) %?use OUT %?type BOOL %?dflt false
%?manual_beg
ixEnableCalc true eq {
	/qrValue2 irValue1 irValue2 gt def
}	{
	/qrValue2 false def
}	ifelse
%?manual_end 
	
	qrValue2 
} def
%?partend





%?partdef spRelais001
%?fn	spRelais001
%?brief	Diesel Niveau leer Warnung
%?bbox	0 0 79 79
/spRelais001 {
	/ixRelaisActive exch def	%?brief relais active %?use INP %?type BOOL %?dflt false
	/irNumber exch def	%?brief number %?use INP %?type REAL %?dflt    0.00
	ixRelaisActive false eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		ssRelais001 
		setcolor 
		setmatrix_nlw 
	} if 
	ixRelaisActive true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 0 0 translate 
		0 rotate 
		1 1 scale 
		ssRelais002 
		setcolor 
		setmatrix_nlw 
	} if 
	matrix currentmatrix_nlw 
	currentcolor 
	23 62 translate 
	0 rotate 
	1 1 scale 
	(K) 
	FSstdFont 1 
	baText001 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	56 62 translate 
	0 rotate 
	1 1 scale 
	irNumber 3 () false false 
	FSstdFont 1 
	baValue002 
	setcolor 
	setmatrix_nlw 
} def
%?partend


%?partdef spRelais002
%?fn	spRelais002
%?brief	Diesel Niveau leer Warnung
%?bbox	0 0 79 79
/spRelais002 {
	/ixRelaisActive exch def	%?brief relais active %?use INP %?type BOOL %?dflt false
	/irNumber exch def	%?brief number %?use INP %?type REAL %?dflt    0.00
	matrix currentmatrix_nlw 
	currentcolor 
	7 26 translate 
	0 rotate 
	1 1 scale 
	(Q) 
	FSstdFont 1 
	baText001 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	36 26 translate 
	0 rotate 
	1 1 scale 
	irNumber 3 () false false 
	FSstdFont 1 
	baValue002 
	setcolor 
	setmatrix_nlw 
	ixRelaisActive false eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		Red 0 0 translate 
		0 rotate 
		1 1 scale 
		ssRelais003 
		setcolor 
		setmatrix_nlw 
	} if 
	ixRelaisActive true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		ssRelais004 
		setcolor 
		setmatrix_nlw 
	} if 
} def
%?partend


%?partdef spRelais003
%?fn	spRelais003
%?brief	Diesel Niveau leer Warnung
%?bbox	0 0 79 79
/spRelais003 {
	/ixRelaisActive exch def	%?brief relais active %?use INP %?type BOOL %?dflt false
	/irNumber exch def	%?brief number %?use INP %?type REAL %?dflt    0.00
	matrix currentmatrix_nlw 
	currentcolor 
	7 26 translate 
	0 rotate 
	1 1 scale 
	(Q) 
	FSstdFont 1 
	baText001 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	36 26 translate 
	0 rotate 
	1 1 scale 
	irNumber 3 () false false 
	FSstdFont 1 
	baValue002 
	setcolor 
	setmatrix_nlw 
	ixRelaisActive true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		ssRelais006 
		setcolor 
		setmatrix_nlw 
	} if 
	ixRelaisActive false eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		Red 0 0 translate 
		0 rotate 
		1 1 scale 
		ssRelais005 
		setcolor 
		setmatrix_nlw 
	} if 
} def
%?partend


%?partdef spDrive001
%?fn	spDrive001
%?brief	drive system
%?bbox	0 0 319 559
/spDrive001 {
	/ixMotorNotOk3 exch def	%?brief motor 3 not ok %?use INP %?type BOOL %?dflt false
	/ixMotorNotOk2 exch def	%?brief motor 2 not ok %?use INP %?type BOOL %?dflt false
	/ixMotorNotOk1 exch def	%?brief motor 1 not ok %?use INP %?type BOOL %?dflt false
	/ixMotorOk3 exch def	%?brief motor 3 ok %?use INP %?type BOOL %?dflt false
	/ixMotorOk2 exch def	%?brief motor 2 ok %?use INP %?type BOOL %?dflt false
	/ixMotorOk1 exch def	%?brief motor 1 ok %?use INP %?type BOOL %?dflt false
	/ixMainSupplyL3 exch def	%?brief main supply line 3 %?use INP %?type BOOL %?dflt false
	/ixMainSupplyL2 exch def	%?brief main supply line 2 %?use INP %?type BOOL %?dflt false
	/ixMainSupplyL1 exch def	%?brief main supply line 1 %?use INP %?type BOOL %?dflt false
	/ixMainSwitchM3 exch def	%?brief main switch motor 3 %?use INP %?type BOOL %?dflt false
	/ixMainSwitchM2 exch def	%?brief main switch motor 2 %?use INP %?type BOOL %?dflt false
	/ixMainSwitchM1 exch def	%?brief main switch motor 1 %?use INP %?type BOOL %?dflt false
	/ixStartM3 exch def	%?brief start motor 3 %?use INP %?type BOOL %?dflt false
	/ixStartM2 exch def	%?brief start motor 2 %?use INP %?type BOOL %?dflt false
	/ixStartM1 exch def	%?brief start motor 1 %?use INP %?type BOOL %?dflt false
	/irNumberM3 exch def	%?brief number motor 3 %?use INP %?type REAL %?dflt    0.00
	/irNumberM2 exch def	%?brief number motor 2 %?use INP %?type REAL %?dflt    0.00
	/irNumberM1 exch def	%?brief number motor 1 %?use INP %?type REAL %?dflt    0.00
	matrix currentmatrix_nlw 
	currentcolor 
	10 450 translate 
	0 rotate 
	1 1 scale 
	(M) 
	FSstdFont 1 
	baText001 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	44 450 translate 
	0 rotate 
	1 1 scale 
	irNumberM1 3 () false false 
	FSstdFont 1 
	baValue002 
	setcolor 
	setmatrix_nlw 
	%?term_beg
	
	ixMotorNotOk1 false eq 
	ixMotorOk1 false eq and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		20 400 translate 
		0 rotate 
		1 1 scale 
		ssMotor001 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	ixMotorNotOk1 false eq 
	ixMotorOk1 true eq and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 20 400 translate 
		0 rotate 
		1 1 scale 
		ssMotor001 
		setcolor 
		setmatrix_nlw 
	} if 
	ixMotorNotOk1 true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		Red 20 400 translate 
		0 rotate 
		1 1 scale 
		ssMotor001 
		setcolor 
		setmatrix_nlw 
	} if 
	matrix currentmatrix_nlw 
	currentcolor 
	90 450 translate 
	0 rotate 
	1 1 scale 
	(M) 
	FSstdFont 1 
	baText001 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	124 450 translate 
	0 rotate 
	1 1 scale 
	irNumberM2 3 () false false 
	FSstdFont 1 
	baValue002 
	setcolor 
	setmatrix_nlw 
	%?term_beg
	
	ixMotorNotOk2 false eq 
	ixMotorOk2 false eq and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		100 400 translate 
		0 rotate 
		1 1 scale 
		ssMotor001 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	ixMotorNotOk2 false eq 
	ixMotorOk2 true eq and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 100 400 translate 
		0 rotate 
		1 1 scale 
		ssMotor001 
		setcolor 
		setmatrix_nlw 
	} if 
	ixMotorNotOk2 true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		Red 100 400 translate 
		0 rotate 
		1 1 scale 
		ssMotor001 
		setcolor 
		setmatrix_nlw 
	} if 
	matrix currentmatrix_nlw 
	currentcolor 
	170 450 translate 
	0 rotate 
	1 1 scale 
	(M) 
	FSstdFont 1 
	baText001 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	204 450 translate 
	0 rotate 
	1 1 scale 
	irNumberM3 3 () false false 
	FSstdFont 1 
	baValue002 
	setcolor 
	setmatrix_nlw 
	%?term_beg
	
	ixMotorNotOk3 false eq 
	ixMotorOk3 false eq and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		180 400 translate 
		0 rotate 
		1 1 scale 
		ssMotor001 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	ixMotorNotOk3 false eq 
	ixMotorOk3 true eq and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 180 400 translate 
		0 rotate 
		1 1 scale 
		ssMotor001 
		setcolor 
		setmatrix_nlw 
	} if 
	ixMotorNotOk3 true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		Red 180 400 translate 
		0 rotate 
		1 1 scale 
		ssMotor001 
		setcolor 
		setmatrix_nlw 
	} if 
	matrix currentmatrix_nlw 
	currentcolor 
	10 380 translate 
	0 rotate 
	1 1 scale 
	(K) 
	FSstdFont 1 
	baText001 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	44 380 translate 
	0 rotate 
	1 1 scale 
	irNumberM1 3 () false false 
	FSstdFont 1 
	baValue002 
	setcolor 
	setmatrix_nlw 
	ixStartM1 false eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 320 translate 
		0 rotate 
		1 1 scale 
		ssRelais001 
		setcolor 
		setmatrix_nlw 
	} if 
	ixStartM1 true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 0 320 translate 
		0 rotate 
		1 1 scale 
		ssRelais002 
		setcolor 
		setmatrix_nlw 
	} if 
	ixStartM1 false eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		60 380 translate 
		0 rotate 
		1 1 scale 
		1 0 42 0 0 
		baPageLine003 
		setcolor 
		setmatrix_nlw 
	} if 
	ixStartM1 true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 60 380 translate 
		0 rotate 
		1 1 scale 
		1 0 42 0 0 
		baPageLine003 
		setcolor 
		setmatrix_nlw 
	} if 
	matrix currentmatrix_nlw 
	currentcolor 
	90 380 translate 
	0 rotate 
	1 1 scale 
	(K) 
	FSstdFont 1 
	baText001 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	124 380 translate 
	0 rotate 
	1 1 scale 
	irNumberM2 3 () false false 
	FSstdFont 1 
	baValue002 
	setcolor 
	setmatrix_nlw 
	ixStartM2 false eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		80 320 translate 
		0 rotate 
		1 1 scale 
		ssRelais001 
		setcolor 
		setmatrix_nlw 
	} if 
	ixStartM2 true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 80 320 translate 
		0 rotate 
		1 1 scale 
		ssRelais002 
		setcolor 
		setmatrix_nlw 
	} if 
	ixStartM2 false eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		140 380 translate 
		0 rotate 
		1 1 scale 
		1 0 42 0 0 
		baPageLine003 
		setcolor 
		setmatrix_nlw 
	} if 
	ixStartM2 true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 140 380 translate 
		0 rotate 
		1 1 scale 
		1 0 42 0 0 
		baPageLine003 
		setcolor 
		setmatrix_nlw 
	} if 
	matrix currentmatrix_nlw 
	currentcolor 
	170 380 translate 
	0 rotate 
	1 1 scale 
	(K) 
	FSstdFont 1 
	baText001 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	204 380 translate 
	0 rotate 
	1 1 scale 
	irNumberM3 3 () false false 
	FSstdFont 1 
	baValue002 
	setcolor 
	setmatrix_nlw 
	ixStartM3 false eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		160 320 translate 
		0 rotate 
		1 1 scale 
		ssRelais001 
		setcolor 
		setmatrix_nlw 
	} if 
	ixStartM3 true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 160 320 translate 
		0 rotate 
		1 1 scale 
		ssRelais002 
		setcolor 
		setmatrix_nlw 
	} if 
	ixStartM3 false eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		220 380 translate 
		0 rotate 
		1 1 scale 
		1 0 42 0 0 
		baPageLine003 
		setcolor 
		setmatrix_nlw 
	} if 
	ixStartM3 true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 220 380 translate 
		0 rotate 
		1 1 scale 
		1 0 42 0 0 
		baPageLine003 
		setcolor 
		setmatrix_nlw 
	} if 
	matrix currentmatrix_nlw 
	currentcolor 
	10 284 translate 
	0 rotate 
	1 1 scale 
	(Q) 
	FSstdFont 1 
	baText001 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	44 284 translate 
	0 rotate 
	1 1 scale 
	irNumberM1 3 () false false 
	FSstdFont 1 
	baValue002 
	setcolor 
	setmatrix_nlw 
	%?term_beg
	
	ixMainSwitchM1 false eq 
	ixMainSupplyL1 false eq or 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		60 290 translate 
		0 rotate 
		1 1 scale 
		1 0 50 0 0 
		baPageLine003 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	ixMainSwitchM1 true eq 
	ixMainSupplyL1 true eq and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 60 290 translate 
		0 rotate 
		1 1 scale 
		1 0 50 0 0 
		baPageLine003 
		setcolor 
		setmatrix_nlw 
	} if 
	ixMainSwitchM1 false eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		Red 0 220 translate 
		0 rotate 
		1 1 scale 
		ssRelais003 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	ixMainSwitchM1 true eq 
	ixMainSupplyL1 false eq and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		0 220 translate 
		0 rotate 
		1 1 scale 
		ssRelais004 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	ixMainSwitchM1 true eq 
	ixMainSupplyL1 true eq and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 0 220 translate 
		0 rotate 
		1 1 scale 
		ssRelais004 
		setcolor 
		setmatrix_nlw 
	} if 
	matrix currentmatrix_nlw 
	currentcolor 
	90 284 translate 
	0 rotate 
	1 1 scale 
	(Q) 
	FSstdFont 1 
	baText001 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	124 284 translate 
	0 rotate 
	1 1 scale 
	irNumberM2 3 () false false 
	FSstdFont 1 
	baValue002 
	setcolor 
	setmatrix_nlw 
	%?term_beg
	
	ixMainSwitchM2 false eq 
	ixMainSupplyL2 false eq or 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		140 290 translate 
		0 rotate 
		1 1 scale 
		1 0 50 0 0 
		baPageLine003 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	ixMainSwitchM2 true eq 
	ixMainSupplyL2 true eq and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 140 290 translate 
		0 rotate 
		1 1 scale 
		1 0 50 0 0 
		baPageLine003 
		setcolor 
		setmatrix_nlw 
	} if 
	ixMainSwitchM2 false eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		Red 80 220 translate 
		0 rotate 
		1 1 scale 
		ssRelais003 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	ixMainSwitchM2 true eq 
	ixMainSupplyL2 false eq and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		80 220 translate 
		0 rotate 
		1 1 scale 
		ssRelais004 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	ixMainSwitchM2 true eq 
	ixMainSupplyL2 true eq and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 80 220 translate 
		0 rotate 
		1 1 scale 
		ssRelais004 
		setcolor 
		setmatrix_nlw 
	} if 
	matrix currentmatrix_nlw 
	currentcolor 
	170 284 translate 
	0 rotate 
	1 1 scale 
	(Q) 
	FSstdFont 1 
	baText001 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	204 284 translate 
	0 rotate 
	1 1 scale 
	irNumberM3 3 () false false 
	FSstdFont 1 
	baValue002 
	setcolor 
	setmatrix_nlw 
	%?term_beg
	
	ixMainSwitchM3 false eq 
	ixMainSupplyL3 false eq or 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		220 290 translate 
		0 rotate 
		1 1 scale 
		1 0 50 0 0 
		baPageLine003 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	ixMainSwitchM3 true eq 
	ixMainSupplyL3 true eq and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 220 290 translate 
		0 rotate 
		1 1 scale 
		1 0 50 0 0 
		baPageLine003 
		setcolor 
		setmatrix_nlw 
	} if 
	ixMainSwitchM3 false eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		Red 160 220 translate 
		0 rotate 
		1 1 scale 
		ssRelais003 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	ixMainSwitchM3 true eq 
	ixMainSupplyL3 false eq and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		160 220 translate 
		0 rotate 
		1 1 scale 
		ssRelais004 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	ixMainSwitchM3 true eq 
	ixMainSupplyL3 true eq and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 160 220 translate 
		0 rotate 
		1 1 scale 
		ssRelais004 
		setcolor 
		setmatrix_nlw 
	} if 
	ixMainSupplyL1 false eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		60 130 translate 
		0 rotate 
		1 1 scale 
		1 0 100 0 0 
		baPageLine003 
		setcolor 
		setmatrix_nlw 
	} if 
	ixMainSupplyL1 true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 60 130 translate 
		0 rotate 
		1 1 scale 
		1 0 100 0 0 
		baPageLine003 
		setcolor 
		setmatrix_nlw 
	} if 
	matrix currentmatrix_nlw 
	currentcolor 
	10 130 translate 
	0 rotate 
	1 1 scale 
	(Q) 
	FSstdFont 1 
	baText001 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	44 130 translate 
	0 rotate 
	1 1 scale 
	1 1 () false false 
	FSstdFont 1 
	baValue002 
	setcolor 
	setmatrix_nlw 
	ixMainSupplyL1 false eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		Red 0 60 translate 
		0 rotate 
		1 1 scale 
		ssRelais005 
		setcolor 
		setmatrix_nlw 
	} if 
	ixMainSupplyL1 true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 0 60 translate 
		0 rotate 
		1 1 scale 
		ssRelais006 
		setcolor 
		setmatrix_nlw 
	} if 
	ixMainSupplyL2 false eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		140 130 translate 
		0 rotate 
		1 1 scale 
		1 0 100 0 0 
		baPageLine003 
		setcolor 
		setmatrix_nlw 
	} if 
	ixMainSupplyL2 true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 140 130 translate 
		0 rotate 
		1 1 scale 
		1 0 100 0 0 
		baPageLine003 
		setcolor 
		setmatrix_nlw 
	} if 
	matrix currentmatrix_nlw 
	currentcolor 
	90 130 translate 
	0 rotate 
	1 1 scale 
	(Q) 
	FSstdFont 1 
	baText001 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	124 130 translate 
	0 rotate 
	1 1 scale 
	2 1 () false false 
	FSstdFont 1 
	baValue002 
	setcolor 
	setmatrix_nlw 
	ixMainSupplyL2 false eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		Red 80 60 translate 
		0 rotate 
		1 1 scale 
		ssRelais005 
		setcolor 
		setmatrix_nlw 
	} if 
	ixMainSupplyL2 true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 80 60 translate 
		0 rotate 
		1 1 scale 
		ssRelais006 
		setcolor 
		setmatrix_nlw 
	} if 
	ixMainSupplyL3 false eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		220 130 translate 
		0 rotate 
		1 1 scale 
		1 0 100 0 0 
		baPageLine003 
		setcolor 
		setmatrix_nlw 
	} if 
	ixMainSupplyL3 true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 220 130 translate 
		0 rotate 
		1 1 scale 
		1 0 100 0 0 
		baPageLine003 
		setcolor 
		setmatrix_nlw 
	} if 
	matrix currentmatrix_nlw 
	currentcolor 
	170 130 translate 
	0 rotate 
	1 1 scale 
	(Q) 
	FSstdFont 1 
	baText001 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	204 130 translate 
	0 rotate 
	1 1 scale 
	3 1 () false false 
	FSstdFont 1 
	baValue002 
	setcolor 
	setmatrix_nlw 
	ixMainSupplyL3 false eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		Red 160 60 translate 
		0 rotate 
		1 1 scale 
		ssRelais005 
		setcolor 
		setmatrix_nlw 
	} if 
	ixMainSupplyL3 true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 160 60 translate 
		0 rotate 
		1 1 scale 
		ssRelais006 
		setcolor 
		setmatrix_nlw 
	} if 
} def
%?partend


%?partdef spDrive002
%?fn	spDrive002
%?brief	drive system
%?bbox	0 0 319 559
/spDrive002 {
	/ixMainSupplyL3 exch def	%?brief main supply line 3 %?use INP %?type BOOL %?dflt false
	/ixMainSupplyL2 exch def	%?brief main supply line 2 %?use INP %?type BOOL %?dflt false
	/ixMainSupplyL1 exch def	%?brief main supply line 1 %?use INP %?type BOOL %?dflt false
	/ixMotorNotOk3 exch def	%?brief motor 3 not ok %?use INP %?type BOOL %?dflt false
	/ixMotorNotOk2 exch def	%?brief motor 2 not ok %?use INP %?type BOOL %?dflt false
	/ixMotorNotOk1 exch def	%?brief motor 1 not ok %?use INP %?type BOOL %?dflt false
	/ixMotorOk3 exch def	%?brief motor 3 ok %?use INP %?type BOOL %?dflt false
	/ixMotorOk2 exch def	%?brief motor 2 ok %?use INP %?type BOOL %?dflt false
	/ixMotorOk1 exch def	%?brief motor 1 ok %?use INP %?type BOOL %?dflt false
	/ixMainSwitchM3 exch def	%?brief main switch motor 3 %?use INP %?type BOOL %?dflt false
	/ixMainSwitchM2 exch def	%?brief main switch motor 2 %?use INP %?type BOOL %?dflt false
	/ixMainSwitchM1 exch def	%?brief main switch motor 1 %?use INP %?type BOOL %?dflt false
	/ixStartM3 exch def	%?brief start motor 3 %?use INP %?type BOOL %?dflt false
	/ixStartM2 exch def	%?brief start motor 2 %?use INP %?type BOOL %?dflt false
	/ixStartM1 exch def	%?brief start motor 1 %?use INP %?type BOOL %?dflt false
	/irNumberM3 exch def	%?brief number motor 3 %?use INP %?type REAL %?dflt    0.00
	/irNumberM2 exch def	%?brief number motor 2 %?use INP %?type REAL %?dflt    0.00
	/irNumberM1 exch def	%?brief number motor 1 %?use INP %?type REAL %?dflt    0.00
	matrix currentmatrix_nlw 
	currentcolor 
	10 450 translate 
	0 rotate 
	1 1 scale 
	(M) 
	FSstdFont 1 
	baText001 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	42 450 translate 
	0 rotate 
	1 1 scale 
	irNumberM1 3 () false false 
	FSstdFont 1 
	baValue002 
	setcolor 
	setmatrix_nlw 
	%?term_beg
	
	ixMotorOk1 false eq 
	ixMotorNotOk1 false eq and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		20 400 translate 
		0 rotate 
		1 1 scale 
		ssMotor001 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	ixMotorOk1 true eq 
	ixMotorNotOk1 false eq and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 20 400 translate 
		0 rotate 
		1 1 scale 
		ssMotor001 
		setcolor 
		setmatrix_nlw 
	} if 
	ixMotorNotOk1 true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		Red 20 400 translate 
		0 rotate 
		1 1 scale 
		ssMotor001 
		setcolor 
		setmatrix_nlw 
	} if 
	matrix currentmatrix_nlw 
	currentcolor 
	90 450 translate 
	0 rotate 
	1 1 scale 
	(M) 
	FSstdFont 1 
	baText001 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	122 450 translate 
	0 rotate 
	1 1 scale 
	irNumberM2 3 () false false 
	FSstdFont 1 
	baValue002 
	setcolor 
	setmatrix_nlw 
	%?term_beg
	
	ixMotorOk2 false eq 
	ixMotorNotOk2 false eq and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		100 400 translate 
		0 rotate 
		1 1 scale 
		ssMotor001 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	ixMotorOk2 true eq 
	ixMotorNotOk2 false eq and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 100 400 translate 
		0 rotate 
		1 1 scale 
		ssMotor001 
		setcolor 
		setmatrix_nlw 
	} if 
	ixMotorNotOk2 true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		Red 100 400 translate 
		0 rotate 
		1 1 scale 
		ssMotor001 
		setcolor 
		setmatrix_nlw 
	} if 
	matrix currentmatrix_nlw 
	currentcolor 
	170 450 translate 
	0 rotate 
	1 1 scale 
	(M) 
	FSstdFont 1 
	baText001 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	202 450 translate 
	0 rotate 
	1 1 scale 
	irNumberM3 3 () false false 
	FSstdFont 1 
	baValue002 
	setcolor 
	setmatrix_nlw 
	%?term_beg
	
	ixMotorOk3 false eq 
	ixMotorNotOk3 false eq and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		180 400 translate 
		0 rotate 
		1 1 scale 
		ssMotor001 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	ixMotorOk3 true eq 
	ixMotorNotOk3 false eq and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 180 400 translate 
		0 rotate 
		1 1 scale 
		ssMotor001 
		setcolor 
		setmatrix_nlw 
	} if 
	ixMotorNotOk3 true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		Red 180 400 translate 
		0 rotate 
		1 1 scale 
		ssMotor001 
		setcolor 
		setmatrix_nlw 
	} if 
	matrix currentmatrix_nlw 
	currentcolor 
	10 380 translate 
	0 rotate 
	1 1 scale 
	(K) 
	FSstdFont 1 
	baText001 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	42 380 translate 
	0 rotate 
	1 1 scale 
	irNumberM1 3 () false false 
	FSstdFont 1 
	baValue002 
	setcolor 
	setmatrix_nlw 
	ixStartM1 false eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 320 translate 
		0 rotate 
		1 1 scale 
		ssRelais001 
		setcolor 
		setmatrix_nlw 
	} if 
	ixStartM1 true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 0 320 translate 
		0 rotate 
		1 1 scale 
		ssRelais002 
		setcolor 
		setmatrix_nlw 
	} if 
	ixStartM1 false eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		60 380 translate 
		0 rotate 
		1 1 scale 
		1 0 42 0 0 
		baPageLine003 
		setcolor 
		setmatrix_nlw 
	} if 
	ixStartM1 true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 60 380 translate 
		0 rotate 
		1 1 scale 
		1 0 42 0 0 
		baPageLine003 
		setcolor 
		setmatrix_nlw 
	} if 
	matrix currentmatrix_nlw 
	currentcolor 
	90 380 translate 
	0 rotate 
	1 1 scale 
	(K) 
	FSstdFont 1 
	baText001 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	122 380 translate 
	0 rotate 
	1 1 scale 
	irNumberM2 3 () false false 
	FSstdFont 1 
	baValue002 
	setcolor 
	setmatrix_nlw 
	ixStartM2 false eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		80 320 translate 
		0 rotate 
		1 1 scale 
		ssRelais001 
		setcolor 
		setmatrix_nlw 
	} if 
	ixStartM2 true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 80 320 translate 
		0 rotate 
		1 1 scale 
		ssRelais002 
		setcolor 
		setmatrix_nlw 
	} if 
	ixStartM2 false eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		140 380 translate 
		0 rotate 
		1 1 scale 
		1 0 42 0 0 
		baPageLine003 
		setcolor 
		setmatrix_nlw 
	} if 
	ixStartM2 true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 140 380 translate 
		0 rotate 
		1 1 scale 
		1 0 42 0 0 
		baPageLine003 
		setcolor 
		setmatrix_nlw 
	} if 
	matrix currentmatrix_nlw 
	currentcolor 
	170 380 translate 
	0 rotate 
	1 1 scale 
	(K) 
	FSstdFont 1 
	baText001 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	202 380 translate 
	0 rotate 
	1 1 scale 
	irNumberM3 3 () false false 
	FSstdFont 1 
	baValue002 
	setcolor 
	setmatrix_nlw 
	ixStartM3 false eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		160 320 translate 
		0 rotate 
		1 1 scale 
		ssRelais001 
		setcolor 
		setmatrix_nlw 
	} if 
	ixStartM3 true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 160 320 translate 
		0 rotate 
		1 1 scale 
		ssRelais002 
		setcolor 
		setmatrix_nlw 
	} if 
	ixStartM3 false eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		220 380 translate 
		0 rotate 
		1 1 scale 
		1 0 42 0 0 
		baPageLine003 
		setcolor 
		setmatrix_nlw 
	} if 
	ixStartM3 true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 220 380 translate 
		0 rotate 
		1 1 scale 
		1 0 42 0 0 
		baPageLine003 
		setcolor 
		setmatrix_nlw 
	} if 
	matrix currentmatrix_nlw 
	currentcolor 
	10 284 translate 
	0 rotate 
	1 1 scale 
	(Q) 
	FSstdFont 1 
	baText001 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	42 284 translate 
	0 rotate 
	1 1 scale 
	irNumberM1 3 () false false 
	FSstdFont 1 
	baValue002 
	setcolor 
	setmatrix_nlw 
	%?term_beg
	
	ixMainSupplyL1 false eq 
	ixMainSwitchM1 false eq or 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		60 290 translate 
		0 rotate 
		1 1 scale 
		1 0 50 0 0 
		baPageLine003 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	ixMainSupplyL1 true eq 
	ixMainSwitchM1 true eq and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 60 290 translate 
		0 rotate 
		1 1 scale 
		1 0 50 0 0 
		baPageLine003 
		setcolor 
		setmatrix_nlw 
	} if 
	ixMainSwitchM1 false eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		Red 0 220 translate 
		0 rotate 
		1 1 scale 
		ssRelais003 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	ixMainSwitchM1 true eq 
	ixMainSupplyL1 false eq and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		0 220 translate 
		0 rotate 
		1 1 scale 
		ssRelais004 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	ixMainSwitchM1 true eq 
	ixMainSupplyL1 true eq and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 0 220 translate 
		0 rotate 
		1 1 scale 
		ssRelais004 
		setcolor 
		setmatrix_nlw 
	} if 
	matrix currentmatrix_nlw 
	currentcolor 
	90 284 translate 
	0 rotate 
	1 1 scale 
	(Q) 
	FSstdFont 1 
	baText001 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	122 284 translate 
	0 rotate 
	1 1 scale 
	irNumberM2 3 () false false 
	FSstdFont 1 
	baValue002 
	setcolor 
	setmatrix_nlw 
	%?term_beg
	
	ixMainSupplyL2 false eq 
	ixMainSwitchM2 false eq or 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		140 290 translate 
		0 rotate 
		1 1 scale 
		1 0 50 0 0 
		baPageLine003 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	ixMainSupplyL2 true eq 
	ixMainSwitchM2 true eq and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 140 290 translate 
		0 rotate 
		1 1 scale 
		1 0 50 0 0 
		baPageLine003 
		setcolor 
		setmatrix_nlw 
	} if 
	ixMainSwitchM2 false eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		Red 80 220 translate 
		0 rotate 
		1 1 scale 
		ssRelais003 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	ixMainSwitchM2 true eq 
	ixMainSupplyL2 false eq and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		80 220 translate 
		0 rotate 
		1 1 scale 
		ssRelais004 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	ixMainSwitchM2 true eq 
	ixMainSupplyL2 true eq and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 80 220 translate 
		0 rotate 
		1 1 scale 
		ssRelais004 
		setcolor 
		setmatrix_nlw 
	} if 
	matrix currentmatrix_nlw 
	currentcolor 
	170 284 translate 
	0 rotate 
	1 1 scale 
	(Q) 
	FSstdFont 1 
	baText001 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	202 284 translate 
	0 rotate 
	1 1 scale 
	irNumberM3 3 () false false 
	FSstdFont 1 
	baValue002 
	setcolor 
	setmatrix_nlw 
	%?term_beg
	
	ixMainSupplyL3 false eq 
	ixMainSwitchM3 false eq or 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		220 290 translate 
		0 rotate 
		1 1 scale 
		1 0 50 0 0 
		baPageLine003 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	ixMainSupplyL3 true eq 
	ixMainSwitchM3 true eq and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 220 290 translate 
		0 rotate 
		1 1 scale 
		1 0 50 0 0 
		baPageLine003 
		setcolor 
		setmatrix_nlw 
	} if 
	ixMainSwitchM3 false eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		Red 160 220 translate 
		0 rotate 
		1 1 scale 
		ssRelais003 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	ixMainSwitchM3 true eq 
	ixMainSupplyL3 false eq and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		160 220 translate 
		0 rotate 
		1 1 scale 
		ssRelais004 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	ixMainSwitchM3 true eq 
	ixMainSupplyL3 true eq and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 160 220 translate 
		0 rotate 
		1 1 scale 
		ssRelais004 
		setcolor 
		setmatrix_nlw 
	} if 
	ixMainSupplyL1 false eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		60 210 translate 
		0 rotate 
		1 1 scale 
		1 0 20 0 0 
		baPageLine003 
		setcolor 
		setmatrix_nlw 
	} if 
	ixMainSupplyL1 true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 60 210 translate 
		0 rotate 
		1 1 scale 
		1 0 20 0 0 
		baPageLine003 
		setcolor 
		setmatrix_nlw 
	} if 
	ixMainSupplyL2 false eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		140 190 translate 
		0 rotate 
		1 1 scale 
		1 0 40 0 0 
		baPageLine003 
		setcolor 
		setmatrix_nlw 
	} if 
	ixMainSupplyL2 true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 140 190 translate 
		0 rotate 
		1 1 scale 
		1 0 40 0 0 
		baPageLine003 
		setcolor 
		setmatrix_nlw 
	} if 
	ixMainSupplyL3 false eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		220 170 translate 
		0 rotate 
		1 1 scale 
		1 0 60 0 0 
		baPageLine003 
		setcolor 
		setmatrix_nlw 
	} if 
	ixMainSupplyL3 true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 220 170 translate 
		0 rotate 
		1 1 scale 
		1 0 60 0 0 
		baPageLine003 
		setcolor 
		setmatrix_nlw 
	} if 
} def
%?partend


%?partdef spDrive003
%?fn	spDrive003
%?brief	drive system
%?bbox	0 0 399 559
/spDrive003 {
	/ixMainSupplyL2 exch def	%?brief main supply line 2 %?use INP %?type BOOL %?dflt false
	/ixMainSupplyL1 exch def	%?brief main supply line 1 %?use INP %?type BOOL %?dflt false
	/ixMotorNotOk3 exch def	%?brief motor 3 not ok %?use INP %?type BOOL %?dflt false
	/ixMotorNotOk2 exch def	%?brief motor 2 not ok %?use INP %?type BOOL %?dflt false
	/ixMotorNotOk1 exch def	%?brief motor 1 not ok %?use INP %?type BOOL %?dflt false
	/ixMotorOk3 exch def	%?brief motor 3 ok %?use INP %?type BOOL %?dflt false
	/ixMotorOk2 exch def	%?brief motor 2 ok %?use INP %?type BOOL %?dflt false
	/ixMotorOk1 exch def	%?brief motor 1 ok %?use INP %?type BOOL %?dflt false
	/ixMainSwitchM2 exch def	%?brief main switch motor 2 %?use INP %?type BOOL %?dflt false
	/ixMainSwitchM1 exch def	%?brief main switch motor 1 %?use INP %?type BOOL %?dflt false
	/ixStartM4 exch def	%?brief start motor 4 %?use INP %?type BOOL %?dflt false
	/ixStartM3 exch def	%?brief start motor 3 %?use INP %?type BOOL %?dflt false
	/ixStartM2 exch def	%?brief start motor 2 %?use INP %?type BOOL %?dflt false
	/ixStartM1 exch def	%?brief start motor 1 %?use INP %?type BOOL %?dflt false
	/irNumberM4 exch def	%?brief number motor 2 %?use INP %?type REAL %?dflt    0.00
	/irNumberM3 exch def	%?brief number motor 3 %?use INP %?type REAL %?dflt    0.00
	/irNumberM2 exch def	%?brief number motor 2 %?use INP %?type REAL %?dflt    0.00
	/irNumberM1 exch def	%?brief number motor 1 %?use INP %?type REAL %?dflt    0.00
	matrix currentmatrix_nlw 
	currentcolor 
	10 450 translate 
	0 rotate 
	1 1 scale 
	(M) 
	FSstdFont 1 
	baText001 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	42 450 translate 
	0 rotate 
	1 1 scale 
	irNumberM1 3 () false false 
	FSstdFont 1 
	baValue002 
	setcolor 
	setmatrix_nlw 
	%?term_beg
	
	ixMotorOk1 false eq 
	ixMotorNotOk1 false eq and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		20 400 translate 
		0 rotate 
		1 1 scale 
		ssMotor001 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	ixMotorOk1 true eq 
	ixMotorNotOk1 false eq and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 20 400 translate 
		0 rotate 
		1 1 scale 
		ssMotor001 
		setcolor 
		setmatrix_nlw 
	} if 
	ixMotorNotOk1 true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		Red 20 400 translate 
		0 rotate 
		1 1 scale 
		ssMotor001 
		setcolor 
		setmatrix_nlw 
	} if 
	matrix currentmatrix_nlw 
	currentcolor 
	90 450 translate 
	0 rotate 
	1 1 scale 
	(M) 
	FSstdFont 1 
	baText001 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	122 450 translate 
	0 rotate 
	1 1 scale 
	irNumberM2 3 () false false 
	FSstdFont 1 
	baValue002 
	setcolor 
	setmatrix_nlw 
	%?term_beg
	
	ixMotorOk2 false eq 
	ixMotorNotOk2 false eq and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		100 400 translate 
		0 rotate 
		1 1 scale 
		ssMotor001 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	ixMotorOk2 true eq 
	ixMotorNotOk2 false eq and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 100 400 translate 
		0 rotate 
		1 1 scale 
		ssMotor001 
		setcolor 
		setmatrix_nlw 
	} if 
	ixMotorNotOk2 true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		Red 100 400 translate 
		0 rotate 
		1 1 scale 
		ssMotor001 
		setcolor 
		setmatrix_nlw 
	} if 
	matrix currentmatrix_nlw 
	currentcolor 
	10 380 translate 
	0 rotate 
	1 1 scale 
	(K) 
	FSstdFont 1 
	baText001 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	42 380 translate 
	0 rotate 
	1 1 scale 
	irNumberM1 3 () false false 
	FSstdFont 1 
	baValue002 
	setcolor 
	setmatrix_nlw 
	ixStartM1 false eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 320 translate 
		0 rotate 
		1 1 scale 
		ssRelais001 
		setcolor 
		setmatrix_nlw 
	} if 
	ixStartM1 true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 0 320 translate 
		0 rotate 
		1 1 scale 
		ssRelais002 
		setcolor 
		setmatrix_nlw 
	} if 
	ixStartM1 false eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		60 380 translate 
		0 rotate 
		1 1 scale 
		1 0 42 0 0 
		baPageLine003 
		setcolor 
		setmatrix_nlw 
	} if 
	ixStartM1 true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 60 380 translate 
		0 rotate 
		1 1 scale 
		1 0 42 0 0 
		baPageLine003 
		setcolor 
		setmatrix_nlw 
	} if 
	matrix currentmatrix_nlw 
	currentcolor 
	90 380 translate 
	0 rotate 
	1 1 scale 
	(K) 
	FSstdFont 1 
	baText001 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	122 380 translate 
	0 rotate 
	1 1 scale 
	irNumberM2 3 () false false 
	FSstdFont 1 
	baValue002 
	setcolor 
	setmatrix_nlw 
	ixStartM2 false eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		80 320 translate 
		0 rotate 
		1 1 scale 
		ssRelais001 
		setcolor 
		setmatrix_nlw 
	} if 
	ixStartM2 true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 80 320 translate 
		0 rotate 
		1 1 scale 
		ssRelais002 
		setcolor 
		setmatrix_nlw 
	} if 
	ixStartM2 false eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		140 380 translate 
		0 rotate 
		1 1 scale 
		1 0 42 0 0 
		baPageLine003 
		setcolor 
		setmatrix_nlw 
	} if 
	ixStartM2 true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 140 380 translate 
		0 rotate 
		1 1 scale 
		1 0 42 0 0 
		baPageLine003 
		setcolor 
		setmatrix_nlw 
	} if 
	matrix currentmatrix_nlw 
	currentcolor 
	10 284 translate 
	0 rotate 
	1 1 scale 
	(Q) 
	FSstdFont 1 
	baText001 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	42 284 translate 
	0 rotate 
	1 1 scale 
	irNumberM1 3 () false false 
	FSstdFont 1 
	baValue002 
	setcolor 
	setmatrix_nlw 
	ixMainSwitchM1 false eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		Red 0 220 translate 
		0 rotate 
		1 1 scale 
		ssRelais003 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	ixMainSwitchM1 true eq 
	ixMainSupplyL1 false eq and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		0 220 translate 
		0 rotate 
		1 1 scale 
		ssRelais004 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	ixMainSwitchM1 true eq 
	ixMainSupplyL1 true eq and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 0 220 translate 
		0 rotate 
		1 1 scale 
		ssRelais004 
		setcolor 
		setmatrix_nlw 
	} if 
	matrix currentmatrix_nlw 
	currentcolor 
	90 284 translate 
	0 rotate 
	1 1 scale 
	(Q) 
	FSstdFont 1 
	baText001 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	122 284 translate 
	0 rotate 
	1 1 scale 
	irNumberM2 3 () false false 
	FSstdFont 1 
	baValue002 
	setcolor 
	setmatrix_nlw 
	ixMainSwitchM2 false eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		Red 80 220 translate 
		0 rotate 
		1 1 scale 
		ssRelais003 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	ixMainSwitchM2 true eq 
	ixMainSupplyL2 false eq and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		80 220 translate 
		0 rotate 
		1 1 scale 
		ssRelais004 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	ixMainSwitchM2 true eq 
	ixMainSupplyL2 true eq and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 80 220 translate 
		0 rotate 
		1 1 scale 
		ssRelais004 
		setcolor 
		setmatrix_nlw 
	} if 
	ixMainSupplyL1 false eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		60 210 translate 
		0 rotate 
		1 1 scale 
		1 0 20 0 0 
		baPageLine003 
		setcolor 
		setmatrix_nlw 
	} if 
	ixMainSupplyL1 true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 60 210 translate 
		0 rotate 
		1 1 scale 
		1 0 20 0 0 
		baPageLine003 
		setcolor 
		setmatrix_nlw 
	} if 
	ixMainSupplyL2 false eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		140 190 translate 
		0 rotate 
		1 1 scale 
		1 0 40 0 0 
		baPageLine003 
		setcolor 
		setmatrix_nlw 
	} if 
	ixMainSupplyL2 true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 140 190 translate 
		0 rotate 
		1 1 scale 
		1 0 40 0 0 
		baPageLine003 
		setcolor 
		setmatrix_nlw 
	} if 
	matrix currentmatrix_nlw 
	currentcolor 
	220 450 translate 
	0 rotate 
	1 1 scale 
	(M) 
	FSstdFont 1 
	baText001 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	252 450 translate 
	0 rotate 
	1 1 scale 
	irNumberM3 3 () false false 
	FSstdFont 1 
	baValue002 
	setcolor 
	setmatrix_nlw 
	%?term_beg
	
	ixMotorOk3 false eq 
	ixMotorNotOk3 false eq and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		230 400 translate 
		0 rotate 
		1 1 scale 
		ssMotor001 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	ixMotorOk3 true eq 
	ixMotorNotOk3 false eq and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 230 400 translate 
		0 rotate 
		1 1 scale 
		ssMotor001 
		setcolor 
		setmatrix_nlw 
	} if 
	ixMotorNotOk3 true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		Red 230 400 translate 
		0 rotate 
		1 1 scale 
		ssMotor001 
		setcolor 
		setmatrix_nlw 
	} if 
	matrix currentmatrix_nlw 
	currentcolor 
	220 380 translate 
	0 rotate 
	1 1 scale 
	(K) 
	FSstdFont 1 
	baText001 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	252 380 translate 
	0 rotate 
	1 1 scale 
	irNumberM3 3 () false false 
	FSstdFont 1 
	baValue002 
	setcolor 
	setmatrix_nlw 
	ixStartM3 false eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		210 320 translate 
		0 rotate 
		1 1 scale 
		ssRelais001 
		setcolor 
		setmatrix_nlw 
	} if 
	ixStartM3 true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 210 320 translate 
		0 rotate 
		1 1 scale 
		ssRelais002 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	ixStartM3 false eq 
	ixStartM4 false eq and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		270 380 translate 
		0 rotate 
		1 1 scale 
		1 0 42 0 0 
		baPageLine003 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	ixStartM3 true eq 
	ixStartM4 true eq or 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 270 380 translate 
		0 rotate 
		1 1 scale 
		1 0 42 0 0 
		baPageLine003 
		setcolor 
		setmatrix_nlw 
	} if 
	matrix currentmatrix_nlw 
	currentcolor 
	300 380 translate 
	0 rotate 
	1 1 scale 
	(K) 
	FSstdFont 1 
	baText001 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	332 380 translate 
	0 rotate 
	1 1 scale 
	irNumberM4 3 () false false 
	FSstdFont 1 
	baValue002 
	setcolor 
	setmatrix_nlw 
	ixStartM4 false eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		290 320 translate 
		0 rotate 
		1 1 scale 
		ssRelais001 
		setcolor 
		setmatrix_nlw 
	} if 
	ixStartM4 true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 290 320 translate 
		0 rotate 
		1 1 scale 
		ssRelais002 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	ixStartM3 false eq 
	ixStartM4 false eq and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		350 380 translate 
		0 rotate 
		1 1 scale 
		1 0 22 0 0 
		baPageLine003 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	ixStartM3 true eq 
	ixStartM4 true eq or 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 350 380 translate 
		0 rotate 
		1 1 scale 
		1 0 22 0 0 
		baPageLine003 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	ixMainSwitchM1 false eq 
	ixMainSupplyL1 false eq or 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		270 330 translate 
		0 rotate 
		1 1 scale 
		1 0 10 0 0 
		baPageLine003 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	ixMainSwitchM1 true eq 
	ixMainSupplyL1 true eq and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 270 330 translate 
		0 rotate 
		1 1 scale 
		1 0 10 0 0 
		baPageLine003 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	ixMainSwitchM2 false eq 
	ixMainSupplyL2 false eq or 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		350 310 translate 
		0 rotate 
		1 1 scale 
		1 0 30 0 0 
		baPageLine003 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	ixMainSwitchM2 true eq 
	ixMainSupplyL2 true eq and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 350 310 translate 
		0 rotate 
		1 1 scale 
		1 0 30 0 0 
		baPageLine003 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	ixMainSwitchM1 false eq 
	ixMainSupplyL1 false eq or 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		60 290 translate 
		0 rotate 
		1 1 scale 
		1 0 50 0 0 
		baPageLine003 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	ixMainSwitchM1 true eq 
	ixMainSupplyL1 true eq and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 60 290 translate 
		0 rotate 
		1 1 scale 
		1 0 50 0 0 
		baPageLine003 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	ixMainSwitchM2 false eq 
	ixMainSupplyL2 false eq or 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		140 290 translate 
		0 rotate 
		1 1 scale 
		1 0 50 0 0 
		baPageLine003 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	ixMainSwitchM2 true eq 
	ixMainSupplyL2 true eq and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 140 290 translate 
		0 rotate 
		1 1 scale 
		1 0 50 0 0 
		baPageLine003 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	ixMainSwitchM1 false eq 
	ixMainSupplyL1 false eq or 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		60 330 translate 
		0 rotate 
		1 1 scale 
		1 210 0 0 0 
		baPageLine003 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	ixMainSwitchM1 true eq 
	ixMainSupplyL1 true eq and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 60 330 translate 
		0 rotate 
		1 1 scale 
		1 210 0 0 0 
		baPageLine003 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	ixMainSwitchM2 false eq 
	ixMainSupplyL2 false eq or 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		140 310 translate 
		0 rotate 
		1 1 scale 
		1 210 0 0 0 
		baPageLine003 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	ixMainSwitchM2 true eq 
	ixMainSupplyL2 true eq and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 140 310 translate 
		0 rotate 
		1 1 scale 
		1 210 0 0 0 
		baPageLine003 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	ixMainSwitchM1 false eq 
	ixMainSupplyL1 false eq or 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		20 290 translate 
		0 rotate 
		1 1 scale 
		ssPoint001 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	ixMainSwitchM1 true eq 
	ixMainSupplyL1 true eq and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 20 290 translate 
		0 rotate 
		1 1 scale 
		ssPoint001 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	ixMainSwitchM2 false eq 
	ixMainSupplyL2 false eq or 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		100 270 translate 
		0 rotate 
		1 1 scale 
		ssPoint001 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	ixMainSwitchM2 true eq 
	ixMainSupplyL2 true eq and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 100 270 translate 
		0 rotate 
		1 1 scale 
		ssPoint001 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	ixStartM3 false eq 
	ixStartM4 false eq and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		270 402 translate 
		0 rotate 
		1 1 scale 
		1 80 0 0 0 
		baPageLine003 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	ixStartM3 true eq 
	ixStartM4 true eq or 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 270 402 translate 
		0 rotate 
		1 1 scale 
		1 80 0 0 0 
		baPageLine003 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	ixStartM3 false eq 
	ixStartM4 false eq and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		230 362 translate 
		0 rotate 
		1 1 scale 
		ssPoint001 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	ixStartM3 true eq 
	ixStartM4 true eq or 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 230 362 translate 
		0 rotate 
		1 1 scale 
		ssPoint001 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	ixStartM3 false eq 
	ixStartM4 false eq and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		268 360 translate 
		0 rotate 
		1 1 scale 
		1 10 0 0 0 
		baPageLine003 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	ixStartM3 false eq 
	ixStartM4 false eq and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		284 360 translate 
		0 rotate 
		1 1 scale 
		1 4 0 0 0 
		baPageLine003 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	ixStartM3 false eq 
	ixStartM4 false eq and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		288 356 translate 
		0 rotate 
		1 1 scale 
		1 4 0 0 4 
		baPageLine003 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	ixStartM3 false eq 
	ixStartM4 false eq and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		292 356 translate 
		0 rotate 
		1 1 scale 
		1 4 4 0 0 
		baPageLine003 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	ixStartM3 false eq 
	ixStartM4 false eq and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		296 360 translate 
		0 rotate 
		1 1 scale 
		1 4 0 0 0 
		baPageLine003 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	ixStartM3 false eq 
	ixStartM4 false eq and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		306 360 translate 
		0 rotate 
		1 1 scale 
		1 8 0 0 0 
		baPageLine003 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	ixStartM3 true eq 
	ixStartM4 true eq or 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 270 360 translate 
		0 rotate 
		1 1 scale 
		1 8 0 0 0 
		baPageLine003 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	ixStartM3 true eq 
	ixStartM4 true eq or 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 284 360 translate 
		0 rotate 
		1 1 scale 
		1 4 0 0 0 
		baPageLine003 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	ixStartM3 true eq 
	ixStartM4 true eq or 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 288 356 translate 
		0 rotate 
		1 1 scale 
		1 4 0 0 4 
		baPageLine003 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	ixStartM3 true eq 
	ixStartM4 true eq or 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 292 356 translate 
		0 rotate 
		1 1 scale 
		1 4 4 0 0 
		baPageLine003 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	ixStartM3 true eq 
	ixStartM4 true eq or 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 296 360 translate 
		0 rotate 
		1 1 scale 
		1 4 0 0 0 
		baPageLine003 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	ixStartM3 true eq 
	ixStartM4 true eq or 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 306 360 translate 
		0 rotate 
		1 1 scale 
		1 8 0 0 0 
		baPageLine003 
		setcolor 
		setmatrix_nlw 
	} if 
} def
%?partend


%?partdef spCranePage001
%?fn	spCranePage001
%?brief	crane main page
%?bbox	0 0 959 559
/spCranePage001 {
	/ixMaxLoadErr exch def	%?brief maximum load error %?use INP %?type BOOL %?dflt false
	/idChangeUnit exch def	%?brief change unit %?use INP %?type DINT %?dflt 0
	/ixUtilizationErr exch def	%?brief utilization error %?use INP %?type BOOL %?dflt false
	/irMaxOutreach exch def	%?brief maximum outreach [m] %?use INP %?type REAL %?dflt    0.00
	/ixResetRope exch def	%?brief reset rope %?use INP %?type BOOL %?dflt false
	/ixResetLoad exch def	%?brief reset load %?use INP %?type BOOL %?dflt false
	/ixHgDown exch def	%?brief hoisting gear down %?use INP %?type BOOL %?dflt false
	/ixHgUp exch def	%?brief hoisting gear up %?use INP %?type BOOL %?dflt false
	/ixLgDown exch def	%?brief luffing gear down %?use INP %?type BOOL %?dflt false
	/ixLgUp exch def	%?brief luffing gear up %?use INP %?type BOOL %?dflt false
	/ixWindSpeedHigh exch def	%?brief wind speed high %?use INP %?type BOOL %?dflt false
	/isRule exch def	%?brief rule %?use INP %?type STRI %?dflt 
	/irSeaState exch def	%?brief sea state %?use INP %?type REAL %?dflt    0.00
	/irWindSpeed exch def	%?brief wind speed [m/s] %?use INP %?type REAL %?dflt    0.00
	/irSpeedWinch2 exch def	%?brief speed winch 2 [m/min] %?use INP %?type REAL %?dflt    0.00
	/irSpeedWinch1 exch def	%?brief speed winch 1 [m/min] %?use INP %?type REAL %?dflt    0.00
	/irRopeWinch2 exch def	%?brief rope winch 2 [m] %?use INP %?type REAL %?dflt    0.00
	/irRopeWinch1 exch def	%?brief rope winch 1 [m] %?use INP %?type REAL %?dflt    0.00
	/irResetLoad exch def	%?brief reset load [t] %?use INP %?type REAL %?dflt    0.00
	/irTaraLoad exch def	%?brief tara load [t] %?use INP %?type REAL %?dflt    0.00
	/irMaxLoad exch def	%?brief maximum load [t] %?use INP %?type REAL %?dflt    0.00
	/irActualLoad exch def	%?brief actual load [t] %?use INP %?type REAL %?dflt    0.00
	/irUtilisation exch def	%?brief utilisation %?use INP %?type REAL %?dflt    0.00
	/irOutreach exch def	%?brief outreach [m] %?use INP %?type REAL %?dflt    0.00
	/irSgPosition exch def	%?brief slewing gear position [°] %?use INP %?type REAL %?dflt    0.00
	/irJibAngle exch def	%?brief jib angle [°] %?use INP %?type REAL %?dflt    0.00
	/irCraneType exch def	%?brief crane type (MTC=1; BOS=2; CBO=3; CBG=4; RL=5) %?use INP %?type REAL %?dflt    0.00
	/ixResetLoadAct exch def	%?brief reset load active %?use INP %?type BOOL %?dflt false
	/ixRopeSpeed exch def	%?brief enable rope speed %?use INP %?type BOOL %?dflt false
	/ixTwoWinch exch def	%?brief two winches selected %?use INP %?type BOOL %?dflt false
	/ixLmlWarning exch def	%?brief lml warning %?use INP %?type BOOL %?dflt false
	/ixLmlAlarm exch def	%?brief lml alarm %?use INP %?type BOOL %?dflt false
	/LXresetLoad false def	%?brief reset load %?use LOC %?type BOOL %?dflt false
	/LXsgPosSetZero false def	%?brief sg positon set to zero %?use LOC %?type BOOL %?dflt false
	/LDsgPosition 0 def	%?brief slewing ger position modified %?use LOC %?type REAL %?dflt    0.00
	/qxResetRope false def	%?brief reset rope %?use OUT %?type BOOL %?dflt false
	/qxResetLoad false def	%?brief reset load %?use OUT %?type BOOL %?dflt false
	/LXseaStateAct false def	%?brief sea state activ %?use LOC %?type BOOL %?dflt false
	matrix currentmatrix_nlw 
	currentcolor 
	390 120 translate 
	0 rotate 
	0.75 0.75 scale 
	baTouchButton001 {	
		/LXresetLoad true store 
	} if 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	390 50 translate 
	0 rotate 
	0.75 0.75 scale 
	baTouchButton001 {	
		/qxResetRope true store 
	} if 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	380 60 translate 
	0 rotate 
	1 1 scale 
	qxResetRope ixResetRope 
	FUN_OR_2 
	/qxResetRope exch store 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	380 130 translate 
	0 rotate 
	1 1 scale 
	LXresetLoad ixResetLoad 
	FUN_OR_2 
	/qxResetLoad exch store 
	setcolor 
	setmatrix_nlw 
	irCraneType 1 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		140 50 translate 
		0 rotate 
		2 2 scale_nlw 
		ssCrane001 
		setcolor 
		setmatrix_nlw 
	} if 
	irCraneType 2 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		140 50 translate 
		0 rotate 
		2 2 scale_nlw 
		ssCrane002 
		setcolor 
		setmatrix_nlw 
	} if 
	irCraneType 3 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		140 50 translate 
		0 rotate 
		2 2 scale_nlw 
		ssCrane003 
		setcolor 
		setmatrix_nlw 
	} if 
	irCraneType 4 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		140 50 translate 
		0 rotate 
		2 2 scale_nlw 
		ssCrane004 
		setcolor 
		setmatrix_nlw 
	} if 
	irCraneType 5 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		140 50 translate 
		0 rotate 
		2 2 scale_nlw 
		ssCrane005 
		setcolor 
		setmatrix_nlw 
	} if 
	irCraneType 6 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		140 50 translate 
		0 rotate 
		2 2 scale_nlw 
		ssCrane006 
		setcolor 
		setmatrix_nlw 
	} if 
	irCraneType 1 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		263 520 translate 
		0 rotate 
		1 1 scale 
		irWindSpeed 3 false 
		ixWindSpeedHigh FSfatFont 0.75 
		baValueSpeed002 
		setcolor 
		setmatrix_nlw 
	} if 
	irCraneType 2 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		233 520 translate 
		0 rotate 
		1 1 scale 
		irWindSpeed 3 false 
		ixWindSpeedHigh FSfatFont 0.75 
		baValueSpeed002 
		setcolor 
		setmatrix_nlw 
	} if 
	irCraneType 3 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		279 520 translate 
		0 rotate 
		1 1 scale 
		irWindSpeed 3 false 
		ixWindSpeedHigh FSfatFont 0.75 
		baValueSpeed002 
		setcolor 
		setmatrix_nlw 
	} if 
	irCraneType 6 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		303 520 translate 
		0 rotate 
		1 1 scale 
		irWindSpeed 3 false 
		ixWindSpeedHigh FSfatFont 0.75 
		baValueSpeed002 
		setcolor 
		setmatrix_nlw 
	} if 
	irCraneType 4 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		281 480 translate 
		0 rotate 
		1 1 scale 
		irWindSpeed 3 false 
		ixWindSpeedHigh FSfatFont 0.75 
		baValueSpeed002 
		setcolor 
		setmatrix_nlw 
	} if 
	irCraneType 5 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		281 390 translate 
		0 rotate 
		1 1 scale 
		irWindSpeed 3 false 
		ixWindSpeedHigh FSfatFont 0.75 
		baValueSpeed002 
		setcolor 
		setmatrix_nlw 
	} if 
	irCraneType 1 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		330 290 translate 
		0 rotate 
		1 1 scale 
		irJibAngle 3 (°) false false 
		FSfatFont 1 
		baValue001 
		setcolor 
		setmatrix_nlw 
	} if 
	irCraneType 2 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		325 290 translate 
		0 rotate 
		1 1 scale 
		irJibAngle 3 (°) false false 
		FSfatFont 1 
		baValue001 
		setcolor 
		setmatrix_nlw 
	} if 
	irCraneType 3 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		340 290 translate 
		0 rotate 
		1 1 scale 
		irJibAngle 3 (°) false false 
		FSfatFont 1 
		baValue001 
		setcolor 
		setmatrix_nlw 
	} if 
	irCraneType 4 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		355 290 translate 
		0 rotate 
		1 1 scale 
		irJibAngle 3 (°) false false 
		FSfatFont 1 
		baValue001 
		setcolor 
		setmatrix_nlw 
	} if 
	irCraneType 6 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		335 290 translate 
		0 rotate 
		1 1 scale 
		irJibAngle 3 (°) false false 
		FSfatFont 1 
		baValue001 
		setcolor 
		setmatrix_nlw 
	} if 
	irCraneType 5 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		410 290 translate 
		0 rotate 
		1 1 scale 
		irJibAngle 3 (°) false false 
		FSfatFont 1 
		baValue001 
		setcolor 
		setmatrix_nlw 
	} if 
	matrix currentmatrix_nlw 
	currentcolor 
	210 120 translate 
	0 rotate 
	1 1 scale 
	true 
	irSgPosition 359.49 
	spGT001 
	/LXsgPosSetZero exch store 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	210 130 translate 
	0 rotate 
	1 1 scale 
	LXsgPosSetZero irSgPosition 0 
	FUN_SEL 
	/LDsgPosition exch store 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	270 155 translate 
	0 rotate 
	1 1 scale 
	LDsgPosition 3 (°) false false 
	FSfatFont 1 
	baValue001 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	390 50 translate 
	0 rotate 
	0.75 0.75 scale 
	ssWinch001 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	545 70 translate 
	0 rotate 
	1 1 scale 
	irRopeWinch1 3.10 false false 
	FSfatFont 0.75 
	baValueDist001 
	setcolor 
	setmatrix_nlw 
	ixTwoWinch true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		695 70 translate 
		0 rotate 
		1 1 scale 
		irRopeWinch2 3.10 false false 
		FSfatFont 0.75 
		baValueDist001 
		setcolor 
		setmatrix_nlw 
	} if 
	matrix currentmatrix_nlw 
	currentcolor 
	595 255 translate 
	0 rotate 
	1 1 scale 
	irOutreach 3.10 false 
	ixMaxLoadErr FSbigFatFont 0.75 
	baValueDist001 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	745 170 translate 
	0 rotate 
	2 2 scale 
	irTaraLoad 3 
	ixLmlWarning ixLmlAlarm FSfatFont 
	idChangeUnit 0.75 
	baValueLoad001 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	545 190 translate 
	0 rotate 
	1 1 scale 
	irMaxLoad 3.10 false 
	ixMaxLoadErr FSfatFont idChangeUnit 0.75 
	baValueLoad001 
	setcolor 
	setmatrix_nlw 
	ixMaxLoadErr true eq {	
		ixMaxLoadErr true eq {	
			true setflash 
		} if 
		matrix currentmatrix_nlw 
		currentcolor 
		Red 415 190 translate 
		0 rotate 
		1 1 scale 
		(SWL) 
		FSfatFont 8 
		baText001 
		setcolor 
		setmatrix_nlw 
		false setflash 
	} if 
	ixMaxLoadErr false eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		415 190 translate 
		0 rotate 
		1 1 scale 
		(SWL) 
		FSfatFont 8 
		baText001 
		setcolor 
		setmatrix_nlw 
	} if 
	matrix currentmatrix_nlw 
	currentcolor 
	545 140 translate 
	0 rotate 
	1 1 scale 
	irActualLoad 3.10 false false 
	FSfatFont idChangeUnit 0.75 
	baValueLoad001 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	379 120 translate 
	0 rotate 
	0.75 0.75 scale 
	false false false 
	ixResetLoadAct (gsHook001) 
	baSwitchSymbolColor004 
	setcolor 
	setmatrix_nlw 
	ixRopeSpeed true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		545 20 translate 
		0 rotate 
		1 1 scale 
		irSpeedWinch1 3.10 false false 
		FSfatFont 0.75 
		baValueSpeed003 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	ixRopeSpeed true eq 
	ixTwoWinch true eq and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		695 20 translate 
		0 rotate 
		1 1 scale 
		irSpeedWinch2 3.10 false false 
		FSfatFont 0.75 
		baValueSpeed003 
		setcolor 
		setmatrix_nlw 
	} if 
	ixResetLoadAct true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 725 140 translate 
		0 rotate 
		1 1 scale 
		irResetLoad 3.10 false false 
		FSfatFont idChangeUnit 0.75 
		baValueLoad001 
		setcolor 
		setmatrix_nlw 
	} if 
	ixUtilizationErr true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		Red 40 180 translate 
		0 rotate 
		1 1 scale 
		irUtilisation () 0 150 true true true false 
		ixLmlWarning ixLmlAlarm 1000 1000 0 0 5 30 270 true false 0 true 0 
		FSstdFont true 1 
		baBar006 
		setcolor 
		setmatrix_nlw 
	} if 
	ixUtilizationErr false eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		40 180 translate 
		0 rotate 
		1 1 scale 
		irUtilisation () 0 150 true true true false 
		ixLmlWarning ixLmlAlarm 1000 1000 0 0 5 30 270 true false 0 true 0 
		FSstdFont true 1 
		baBar006 
		setcolor 
		setmatrix_nlw 
	} if 
	matrix currentmatrix_nlw 
	currentcolor 
	80 530 translate 
	0 rotate 
	1 1 scale 
	isRule FSfatFont 0 
	baText001 
	setcolor 
	setmatrix_nlw 
	ixHgDown true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 310 40 translate 
		0 rotate 
		1 1 scale 
		gsGeneral001 
		setcolor 
		setmatrix_nlw 
	} if 
	ixHgUp true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 390 120 translate 
		180 rotate 
		1 1 scale 
		gsGeneral001 
		setcolor 
		setmatrix_nlw 
	} if 
	ixLgDown true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 675 320 translate 
		90 rotate 
		1 1 scale 
		gsGeneral001 
		setcolor 
		setmatrix_nlw 
	} if 
	ixLgUp true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 595 400 translate 
		270 rotate 
		1 1 scale 
		gsGeneral001 
		setcolor 
		setmatrix_nlw 
	} if 
	ixMaxLoadErr true eq {	
		true setflash 
	} if 
	matrix currentmatrix_nlw 
	currentcolor 
	460 190 translate 
	0 rotate 
	0.75 0.75 scale 
	irSeaState 3 () false 
	ixMaxLoadErr FSfatFont 1 
	baValue001 
	setcolor 
	setmatrix_nlw 
	false setflash 
	ixUtilizationErr true eq {	
		ixUtilizationErr true eq {	
			true setflash 
		} if 
		matrix currentmatrix_nlw 
		currentcolor 
		Red 80 485 translate 
		0 rotate 
		0.75 0.75 scale 
		(%) 
		FSfatFont 0 
		baText001 
		setcolor 
		setmatrix_nlw 
		false setflash 
	} if 
	ixUtilizationErr false eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		80 485 translate 
		0 rotate 
		0.75 0.75 scale 
		(%) 
		FSfatFont 0 
		baText001 
		setcolor 
		setmatrix_nlw 
	} if 
	irCraneType 1 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		163 500 translate 
		0 rotate 
		0.75 0.75 scale 
		ixWindSpeedHigh false false false (ssWind001) 
		baSwitchSymbolColor004 
		setcolor 
		setmatrix_nlw 
	} if 
	irCraneType 2 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		133 500 translate 
		0 rotate 
		0.75 0.75 scale 
		ixWindSpeedHigh false false false (ssWind001) 
		baSwitchSymbolColor004 
		setcolor 
		setmatrix_nlw 
	} if 
	irCraneType 3 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		179 500 translate 
		0 rotate 
		0.75 0.75 scale 
		ixWindSpeedHigh false false false (ssWind001) 
		baSwitchSymbolColor004 
		setcolor 
		setmatrix_nlw 
	} if 
	irCraneType 6 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		203 500 translate 
		0 rotate 
		0.75 0.75 scale 
		ixWindSpeedHigh false false false (ssWind001) 
		baSwitchSymbolColor004 
		setcolor 
		setmatrix_nlw 
	} if 
	irCraneType 4 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		181 460 translate 
		0 rotate 
		0.75 0.75 scale 
		ixWindSpeedHigh false false false (ssWind001) 
		baSwitchSymbolColor004 
		setcolor 
		setmatrix_nlw 
	} if 
	irCraneType 5 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		181 370 translate 
		0 rotate 
		0.75 0.75 scale 
		ixWindSpeedHigh false false false (ssWind001) 
		baSwitchSymbolColor004 
		setcolor 
		setmatrix_nlw 
	} if 
	matrix currentmatrix_nlw 
	currentcolor 
	621 295 translate 
	0 rotate 
	0.75 0.75 scale 
	irMaxOutreach 3.10 false false 
	FSfatFont 0.75 
	baValueDist001 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	524 295 translate 
	0 rotate 
	0.60 0.60 scale 
	(max) 
	FSmsgBigFont 1 
	baText001 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	420 140 translate 
	0 rotate 
	0.60 0.60 scale 
	(act) 
	FSmsgBigFont 1 
	baText001 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	658 230 translate 
	0 rotate 
	1 1 scale 
	ixMaxLoadErr false false false (gsLimit019) 
	baSwitchSymbolColor004 
	setcolor 
	setmatrix_nlw 
	idChangeUnit 4 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		428 224 translate 
		0 rotate 
		0.60 0.60 scale 
		(lb*1000) 
		FSmsgBigFont 0 
		baText001 
		setcolor 
		setmatrix_nlw 
	} if 
	qxResetRope qxResetLoad 
} def
%?partend

%?partdef spRecorder001
%?fn	spRecorder001
%?brief	Data recorder start
%?bbox	0 0 79 79
/spRecorder001 {
	/ixRecordPause exch def	%?brief record pause %?use INP %?type BOOL %?dflt false
	/ixRecordStop exch def	%?brief record stop %?use INP %?type BOOL %?dflt true
	/ixRecordOn exch def	%?brief record on %?use INP %?type BOOL %?dflt false
	%?term_beg
	
	ixRecordOn true eq 
	ixRecordPause false eq and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		Red 0 0 translate 
		0 rotate 
		1 1 scale 
		ssRecorder001 
		setcolor 
		setmatrix_nlw 
	} if 
	ixRecordStop true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		ssRecorder002 
		setcolor 
		setmatrix_nlw 
	} if 
	ixRecordPause true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		Yellow 0 0 translate 
		0 rotate 
		1 1 scale 
		ssRecorder003 
		setcolor 
		setmatrix_nlw 
	} if 
	matrix currentmatrix_nlw 
	currentcolor 
	0 0 translate 
	0 rotate 
	1 1 scale 
	ssRecorder004 
	setcolor 
	setmatrix_nlw 
} def
%?partend

%?partdef spRecorder002
%?fn	spRecorder002
%?brief	memory card
%?bbox	0 0 239 159
/spRecorder002 {
	/ixError exch def	%?brief error %?use INP %?type BOOL %?dflt false
	/idMemory exch def	%?brief occupied memory %?use INP %?type REAL %?dflt   20.00
	3 setlinewidth_nlw 
	10 105 135 -95 rectstroke 
	1 setlinewidth_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	20 90 translate 
	270 rotate 
	1 1 scale 
	idMemory () 0 100 0 
	idMemory 6 2 1 3 true 1 0 0 0 15 100 90 false true 
	baBar008 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	80 85 translate 
	0 rotate 
	0.75 0.75 scale 
	(MB) 
	FSfatFont 0 
	baText001 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	80 60 translate 
	0 rotate 
	0.75 0.75 scale 
	(%) 
	FSfatFont 0 
	ixError false false false 
	baText002 
	setcolor 
	setmatrix_nlw 
} def
%?partend

%?partdef spHourMeter001
%?fn	spHourMeter001
%?brief	hour meter e-motor
%?bbox	0 0 319 79
/spHourMeter001 {
	/isString exch def	%?brief string %?use INP %?type STRI %?dflt 
	/irSymbol exch def	%?brief symbol 1=sg; 2=e-motor; 3=LG 4=MH; 5=AH ; 6=TW; 7=diesel %?use INP %?type REAL %?dflt    0.00
	/irHourMeterTime exch def	%?brief hour meter time %?use INP %?type REAL %?dflt    0.00
	/ixHourMeterAct exch def	%?brief hour meter activ %?use INP %?type BOOL %?dflt false
	matrix currentmatrix_nlw 
	currentcolor 
	200 25 translate 
	0 rotate 
	1 1 scale 
	irHourMeterTime 3.10 (h) false false 
	FSbigFatFont 0.75 
	baValue001 
	setcolor 
	setmatrix_nlw 
	irSymbol 1 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 10 translate 
		0 rotate 
		0.75 0.75 scale 
		false false false 
		ixHourMeterAct (gsLimit016) 
		baSwitchSymbolColor004 
		setcolor 
		setmatrix_nlw 
	} if 
	irSymbol 2 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 20 translate 
		0 rotate 
		0.75 0.75 scale 
		false false false 
		ixHourMeterAct (gsEmotor002) 
		baSwitchSymbolColor004 
		setcolor 
		setmatrix_nlw 
	} if 
	irSymbol 3 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 20 translate 
		0 rotate 
		0.75 0.75 scale 
		false false false 
		ixHourMeterAct (gsLimit012) 
		baSwitchSymbolColor004 
		setcolor 
		setmatrix_nlw 
	} if 
	irSymbol 4 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 20 translate 
		0 rotate 
		0.75 0.75 scale 
		false false false 
		ixHourMeterAct (ssHook001) 
		baSwitchSymbolColor004 
		setcolor 
		setmatrix_nlw 
	} if 
	irSymbol 5 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 20 translate 
		0 rotate 
		0.75 0.75 scale 
		false false false 
		ixHourMeterAct (gsHook001) 
		baSwitchSymbolColor004 
		setcolor 
		setmatrix_nlw 
	} if 
	irSymbol 6 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 20 translate 
		0 rotate 
		0.75 0.75 scale 
		false false false 
		ixHourMeterAct (ssWinch001) 
		baSwitchSymbolColor004 
		setcolor 
		setmatrix_nlw 
	} if 
	irSymbol 7 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 20 translate 
		0 rotate 
		0.75 0.75 scale 
		false false false 
		ixHourMeterAct (gsEngine001) 
		baSwitchSymbolColor004 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	irSymbol 1 gt 
	ixHourMeterAct true eq and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 30 10 translate 
		0 rotate 
		0.60 0.60 scale 
		isString FSfatFont 8 
		baText001 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	irSymbol 1 gt 
	ixHourMeterAct false eq and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		30 10 translate 
		0 rotate 
		0.60 0.60 scale 
		isString FSfatFont 8 
		baText001 
		setcolor 
		setmatrix_nlw 
	} if 
	irSymbol 8 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		false false false 
		ixHourMeterAct (ssTelescope003) 
		baSwitchSymbolColor004 
		setcolor 
		setmatrix_nlw 
	} if 
} def
%?partend


%?partdef spLml001
%?fn	spLml001
%?brief	LML stop, warning and bypass symbol
%?bbox	0 0 79 79
/spLml001 {
	/ixLmlBypass exch def	%?brief lml bypass %?use INP %?type BOOL %?dflt false
	/ixLmlStop exch def	%?brief lml  stop %?use INP %?type BOOL %?dflt true
	/ixLmlAlarm exch def	%?brief lml alarm %?use INP %?type BOOL %?dflt false
	/ixLmlWarn exch def	%?brief lml warning %?use INP %?type BOOL %?dflt false
	%?term_beg
	
	ixLmlStop true eq 
	ixLmlBypass false eq and 
	%?term_end
	{	
		ixLmlStop true eq {	
			true setflash 
		} if 
		matrix currentmatrix_nlw 
		currentcolor 
		Red 0 0 translate 
		0 rotate 
		1 1 scale 
		gsGeneral004 
		setcolor 
		setmatrix_nlw 
		false setflash 
	} if 
	%?term_beg
	
	ixLmlWarn true eq 
	ixLmlAlarm false eq 
	ixLmlStop false eq 
	ixLmlBypass false eq and and and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		Yellow 0 0 translate 
		0 rotate 
		1 1 scale 
		gsGeneral003 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	ixLmlAlarm true eq 
	ixLmlStop false eq 
	ixLmlBypass false eq and and 
	%?term_end
	{	
		ixLmlAlarm true eq {	
			true setflash 
		} if 
		matrix currentmatrix_nlw 
		currentcolor 
		Red 0 0 translate 
		0 rotate 
		1 1 scale 
		gsGeneral003 
		setcolor 
		setmatrix_nlw 
		false setflash 
	} if 
	ixLmlBypass true eq {	
		ixLmlBypass true eq {	
			true setflash 
		} if 
		matrix currentmatrix_nlw 
		currentcolor 
		Red 0 0 translate 
		0 rotate 
		1 1 scale 
		gsGeneral007 
		setcolor 
		setmatrix_nlw 
		false setflash 
	} if 
} def
%?partend

%?partdef spAntiCollision001
%?fn	spAntiCollision001
%?brief	anticollision luffing gear value
%?bbox	0 0 239 79
/spAntiCollision001 {
	/irValueArea5 exch def	%?brief value area 5 %?use INP %?type REAL %?dflt    1.00
	/irValueArea4 exch def	%?brief value area 4 %?use INP %?type REAL %?dflt    1.00
	/irValueArea3 exch def	%?brief value area 3 %?use INP %?type REAL %?dflt    1.00
	/irValueArea2 exch def	%?brief value area 2 %?use INP %?type REAL %?dflt    1.00
	/irValueArea1 exch def	%?brief value area 1 %?use INP %?type REAL %?dflt    1.00
	/ixValueArea5Ok exch def	%?brief value area 5 ok %?use INP %?type BOOL %?dflt false
	/ixValueArea4Ok exch def	%?brief value area 4 ok %?use INP %?type BOOL %?dflt false
	/ixValueArea3Ok exch def	%?brief value area 3 ok %?use INP %?type BOOL %?dflt false
	/ixValueArea2Ok exch def	%?brief value area 2 ok %?use INP %?type BOOL %?dflt false
	/ixValueArea1Ok exch def	%?brief value area 1 ok %?use INP %?type BOOL %?dflt false
	/irActiveArea exch def	%?brief activ area %?use INP %?type REAL %?dflt    1.00
	/LRoutreach 0 def	%?brief outreach [m] %?use LOC %?type REAL %?dflt    0.00
	matrix currentmatrix_nlw 
	currentcolor 
	0 0 translate 
	0 rotate 
	1 1 scale 
	irActiveArea irValueArea1 irValueArea2 
	irValueArea3 irValueArea4 irValueArea5 
	FUN_MUX5 
	/LRoutreach exch store 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	0 0 translate 
	0 rotate 
	1 1 scale 
	gsLimit009 
	setcolor 
	setmatrix_nlw 
	irActiveArea 1 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		180 20 translate 
		0 rotate 
		1 1 scale 
		LRoutreach 3.10 false 
		ixValueArea1Ok not 
		FSbigFatFont 0.75 
		baValueDist001 
		setcolor 
		setmatrix_nlw 
	} if 
	irActiveArea 2 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		180 20 translate 
		0 rotate 
		1 1 scale 
		LRoutreach 3.10 false 
		ixValueArea2Ok not 
		FSbigFatFont 0.75 
		baValueDist001 
		setcolor 
		setmatrix_nlw 
	} if 
	irActiveArea 3 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		180 20 translate 
		0 rotate 
		1 1 scale 
		LRoutreach 3.10 false 
		ixValueArea3Ok not 
		FSbigFatFont 0.75 
		baValueDist001 
		setcolor 
		setmatrix_nlw 
	} if 
	irActiveArea 4 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		180 20 translate 
		0 rotate 
		1 1 scale 
		LRoutreach 3.10 false 
		ixValueArea4Ok not 
		FSbigFatFont 0.75 
		baValueDist001 
		setcolor 
		setmatrix_nlw 
	} if 
	irActiveArea 5 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		180 20 translate 
		0 rotate 
		1 1 scale 
		LRoutreach 3.10 false 
		ixValueArea5Ok not 
		FSbigFatFont 0.75 
		baValueDist001 
		setcolor 
		setmatrix_nlw 
	} if 
} def
%?partend


%?partdef spAntiCollision002
%?fn	spAntiCollision002
%?brief	anticollision slewing gear value
%?bbox	0 0 239 79
/spAntiCollision002 {
	/irValueArea5 exch def	%?brief value area 5 %?use INP %?type REAL %?dflt    1.00
	/irValueArea4 exch def	%?brief value area 4 %?use INP %?type REAL %?dflt    1.00
	/irValueArea3 exch def	%?brief value area 3 %?use INP %?type REAL %?dflt    1.00
	/irValueArea2 exch def	%?brief value area 2 %?use INP %?type REAL %?dflt    1.00
	/irValueArea1 exch def	%?brief value area 1 %?use INP %?type REAL %?dflt    1.00
	/ixValueArea5Ok exch def	%?brief value area 5 ok %?use INP %?type BOOL %?dflt false
	/ixValueArea4Ok exch def	%?brief value area 4 ok %?use INP %?type BOOL %?dflt false
	/ixValueArea3Ok exch def	%?brief value area 3 ok %?use INP %?type BOOL %?dflt false
	/ixValueArea2Ok exch def	%?brief value area 2 ok %?use INP %?type BOOL %?dflt false
	/ixValueArea1Ok exch def	%?brief value area 1 ok %?use INP %?type BOOL %?dflt false
	/ixSgStopLeft exch def	%?brief slewing stop left %?use INP %?type BOOL %?dflt false
	/irActiveArea exch def	%?brief activ area %?use INP %?type REAL %?dflt    1.00
	/LRangle 0 def	%?brief angle [°] %?use LOC %?type REAL %?dflt    0.00
	matrix currentmatrix_nlw 
	currentcolor 
	0 0 translate 
	0 rotate 
	1 1 scale 
	irActiveArea irValueArea1 irValueArea2 
	irValueArea3 irValueArea4 irValueArea5 
	FUN_MUX5 
	/LRangle exch store 
	setcolor 
	setmatrix_nlw 
	irActiveArea 1 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		176 20 translate 
		0 rotate 
		1 1 scale 
		LRangle 3.10 (°) false 
		ixValueArea1Ok not 
		FSbigFatFont 1 
		baValue001 
		setcolor 
		setmatrix_nlw 
	} if 
	irActiveArea 2 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		176 20 translate 
		0 rotate 
		1 1 scale 
		LRangle 3.10 (°) false 
		ixValueArea2Ok not 
		FSbigFatFont 1 
		baValue001 
		setcolor 
		setmatrix_nlw 
	} if 
	irActiveArea 3 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		176 20 translate 
		0 rotate 
		1 1 scale 
		LRangle 3.10 (°) false 
		ixValueArea3Ok not 
		FSbigFatFont 1 
		baValue001 
		setcolor 
		setmatrix_nlw 
	} if 
	irActiveArea 4 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		176 20 translate 
		0 rotate 
		1 1 scale 
		LRangle 3.10 (°) false 
		ixValueArea4Ok not 
		FSbigFatFont 1 
		baValue001 
		setcolor 
		setmatrix_nlw 
	} if 
	irActiveArea 5 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		176 20 translate 
		0 rotate 
		1 1 scale 
		LRangle 3.10 (°) false 
		ixValueArea5Ok not 
		FSbigFatFont 1 
		baValue001 
		setcolor 
		setmatrix_nlw 
	} if 
	ixSgStopLeft false eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		gsLimit018 
		setcolor 
		setmatrix_nlw 
	} if 
	ixSgStopLeft true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		gsLimit017 
		setcolor 
		setmatrix_nlw 
	} if 
} def
%?partend


%?partdef spAntiCollision003
%?fn	spAntiCollision003
%?brief	Bereichsbegrenzung Kreissektor
%?bbox	0 0 319 319
/spAntiCollision003 {
	
%?manual_beg
	/ixBypassSwitch exch def	%?brief bypass switch %?use INP %?type BOOL %?dflt false
	/ixValueOkArea5 exch def	%?brief value ok area 5 %?use INP %?type BOOL %?dflt true
	/ixValueOkArea4 exch def	%?brief value ok area 4 %?use INP %?type BOOL %?dflt true
	/ixValueOkArea3 exch def	%?brief value ok area 3 %?use INP %?type BOOL %?dflt true
	/ixValueOkArea2 exch def	%?brief value ok area 2 %?use INP %?type BOOL %?dflt true
	/ixValueOkArea1 exch def	%?brief value ok area 1 %?use INP %?type BOOL %?dflt true
	/irMinRadius exch def	%?brief minimum radius [m] %?use INP %?type REAL %?dflt   10.00
	/irMaxRadius exch def	%?brief maximum radius [m] %?use INP %?type REAL %?dflt  100.00
	/irRadiusLeArea1 exch def	%?brief radius left area 1 [m] %?use INP %?type REAL %?dflt   60.00
	/irRadiusRiArea1 exch def	%?brief radius right area 1 [m] %?use INP %?type REAL %?dflt   60.00
	/irAngleLeArea1 exch def	%?brief angle left area 1 %?use INP %?type REAL %?dflt   30.00
	/irAngleRiArea1 exch def	%?brief angle right area 1 %?use INP %?type REAL %?dflt   40.00
	/irRadiusLeArea2 exch def	%?brief radius left area 2 [m] %?use INP %?type REAL %?dflt   40.00
	/irRadiusRiArea2 exch def	%?brief radius right area 2 [m] %?use INP %?type REAL %?dflt   20.00
	/irAngleLeArea2 exch def	%?brief angle left area 2 %?use INP %?type REAL %?dflt   60.00
	/irAngleRiArea2 exch def	%?brief angle right area 2 %?use INP %?type REAL %?dflt   80.00
	/irRadiusLeArea3 exch def	%?brief radius left area 3 [m] %?use INP %?type REAL %?dflt   50.00
	/irRadiusRiArea3 exch def	%?brief radius right area 3 [m] %?use INP %?type REAL %?dflt   60.00
	/irAngleLeArea3 exch def	%?brief angle left area 3 %?use INP %?type REAL %?dflt  100.00
	/irAngleRiArea3 exch def	%?brief angle right area 3 %?use INP %?type REAL %?dflt  120.00
	/irRadiusLeArea4 exch def	%?brief radius left area 4 [m] %?use INP %?type REAL %?dflt   90.00
	/irRadiusRiArea4 exch def	%?brief radius right area 4 [m] %?use INP %?type REAL %?dflt   80.00
	/irAngleLeArea4 exch def	%?brief angle left area 4 %?use INP %?type REAL %?dflt  140.00
	/irAngleRiArea4 exch def	%?brief angle right area 4 %?use INP %?type REAL %?dflt  200.00
	/irRadiusLeArea5 exch def	%?brief radius left area 5 [m] %?use INP %?type REAL %?dflt   20.00
	/irRadiusRiArea5 exch def	%?brief radius right area 5 [m] %?use INP %?type REAL %?dflt   30.00
	/irAngleLeArea5 exch def	%?brief angle left area 5 %?use INP %?type REAL %?dflt  210.00
	/irAngleRiArea5 exch def	%?brief angle right area 5 %?use INP %?type REAL %?dflt  270.00
	/irLoadRadius exch def	%?brief radius of load [m] %?use INP %?type REAL %?dflt   50.00
	/irLoadAngle exch def	%?brief angle of load %?use INP %?type REAL %?dflt  0.00
	/irMaxSector exch def	%?brief maximum number sectors %?use INP %?type REAL %?dflt    5.00
	/irSector exch def	%?brief sector %?use INP %?type REAL %?dflt    1.00
	/irRadius exch def	%?brief radius of circle %?use INP %?type REAL %?dflt  240.00
	/qrSector 0 def	%?brief sector %?use OUT %?type REAL %?dflt    0.00
	irMaxRadius 0 eq {
		/LRmaxRadius 100 def
		} {
		/LRmaxRadius irMaxRadius def
 	} ifelse 	
 	/LRradiusFactor irRadius LRmaxRadius div def	
 	/LRradiusMin irMinRadius LRradiusFactor mul def	
 	/LRradiusLeArea1 irRadiusLeArea1 LRradiusFactor mul def	
 	/LRradiusLeArea2 irRadiusLeArea2 LRradiusFactor mul def	
 	/LRradiusLeArea3 irRadiusLeArea3 LRradiusFactor mul def	
 	/LRradiusLeArea4 irRadiusLeArea4 LRradiusFactor mul def	
 	/LRradiusLeArea5 irRadiusLeArea5 LRradiusFactor mul def	
 	/LRradiusRiArea1 irRadiusRiArea1 LRradiusFactor mul def	
 	/LRradiusRiArea2 irRadiusRiArea2 LRradiusFactor mul def	
 	/LRradiusRiArea3 irRadiusRiArea3 LRradiusFactor mul def	
 	/LRradiusRiArea4 irRadiusRiArea4 LRradiusFactor mul def	
 	/LRradiusRiArea5 irRadiusRiArea5 LRradiusFactor mul def	
 	/LRradiusMax irMaxRadius LRradiusFactor mul def	
 	/LRradiusLoad irLoadRadius LRradiusFactor mul def	
 	/LRangleLeArea1 0 irAngleLeArea1 sub def	
 	/LRangleRiArea1 0 irAngleRiArea1 sub def	
 	/LRangleLeArea2 0 irAngleLeArea2 sub def	
 	/LRangleRiArea2 0 irAngleRiArea2 sub def	
 	/LRangleLeArea3 0 irAngleLeArea3 sub def	
 	/LRangleRiArea3 0 irAngleRiArea3 sub def	
 	/LRangleLeArea4 0 irAngleLeArea4 sub def	
 	/LRangleRiArea4 0 irAngleRiArea4 sub def	
 	/LRangleLeArea5 0 irAngleLeArea5 sub def	
 	/LRangleRiArea5 0 irAngleRiArea5 sub def	
 	/LRangleLoad irLoadAngle 90 add def	

	% ۢerpr�welche Ausladung kleiner ist und Zuweisung auf den Radius
 	LRradiusLeArea1 LRradiusRiArea1 le {	
 		/LRradiusArea1 LRradiusLeArea1 def	
 		} { 
 		/LRradiusArea1 LRradiusRiArea1 def	
 	} ifelse 
 	LRradiusLeArea2 LRradiusRiArea2 le {	
 		/LRradiusArea2 LRradiusLeArea2 def	
 		} { 
 		/LRradiusArea2 LRradiusRiArea2 def	
 	} ifelse 
 	LRradiusLeArea3 LRradiusRiArea3 le {	
 		/LRradiusArea3 LRradiusLeArea3 def	
 		} { 
 		/LRradiusArea3 LRradiusRiArea3 def	
 	} ifelse 
 	LRradiusLeArea4 LRradiusRiArea4 le {	
 		/LRradiusArea4 LRradiusLeArea4 def	
 		} { 
 		/LRradiusArea4 LRradiusRiArea4 def	
 	} ifelse 
 	LRradiusLeArea5 LRradiusRiArea5 le {	
 		/LRradiusArea5 LRradiusLeArea5 def	
 		} { 
 		/LRradiusArea5 LRradiusRiArea5 def	
 	} ifelse 

	/qrSector irSector def

	% Sector 1
	irMaxSector 1 ge {	
 		matrix currentmatrix_nlw 
 		LRangleLoad 
 		rotate 
		% Fl㢨e zeichnen wenn Winkel nicht identisch
 		irAngleLeArea1 irAngleRiArea1 ne { 
 			matrix currentmatrix_nlw
			currentcolor 
 			0 0 translate 
			LRangleLeArea1 
			rotate
			_mstatus {	
				_mxposd _myposd itransform 
	 			newpath 
				LRradiusMax 0 moveto
				0 0 
				LRradiusMax 0 LRangleRiArea1 LRangleLeArea1 sub
				arcn 
				0 0 
				LRradiusArea1 LRangleRiArea1 LRangleLeArea1 sub 0
				arc 
				ineofill {
					 LightGrey
				} {
		 			ixValueOkArea1 true eq {
						Grey
					} {
						Red
					} ifelse
				} ifelse
			} { 
	 			ixValueOkArea1 true eq {
					Grey
				} {
					Red
				} ifelse
			} ifelse
			LRangleRiArea1	LRangleLeArea1 sub abs 0.3 gt {
	 			newpath 
				LRradiusMax 0 moveto
				0 0 
				LRradiusMax 0 LRangleRiArea1 LRangleLeArea1 sub
				arcn 
				0 0 
				LRradiusArea1 LRangleRiArea1 LRangleLeArea1 sub 0
				arc 
 				eofill 
			} if
			_mdown {	
				_mxposd _myposd itransform 
 				newpath 
				LRradiusMax 0 moveto
				0 0 
				LRradiusMax 0 LRangleRiArea1 LRangleLeArea1 sub
				arcn 
				0 0 
				LRradiusArea1 LRangleRiArea1 LRangleLeArea1 sub 0
				arc 
				ineofill {
					/qrSector 1 def
				} if
			} if
			false setflash 
			setcolor 
			setmatrix_nlw
		} if
		setmatrix_nlw 

		matrix currentmatrix_nlw 
 		LRangleLoad 
 		rotate 
		irSector 1 eq {	
 			currentcolor 
 			ixBypassSwitch true eq {
 			Green 
 			} if
 			ixValueOkArea1 false eq {
				Red
 			} if
 			3 setlinewidth_nlw 

			% Kreispunkte zeichnen
			matrix currentmatrix_nlw
 			LRangleLeArea1 
 			rotate 
 			LRradiusLeArea1 5 add 
 			0 moveto 
 			LRradiusLeArea1 0 5 0 360 arc 
 			stroke 
 			LRangleRiArea1 LRangleLeArea1 sub 
 			rotate 
 			LRradiusRiArea1 5 add 
 			0 moveto 
 			LRradiusRiArea1 0 5 0 360 arc 
 			stroke 
 			setmatrix_nlw 

			% Umrandung zeichnen wenn Winkel nicht identisch
 			LRangleRiArea1	LRangleLeArea1 sub abs 0.3 gt { 
				matrix currentmatrix_nlw
				LRangleLeArea1 
				rotate
				LRradiusMax 0 moveto
				0 0 
 				LRradiusMax 0 LRangleRiArea1 LRangleLeArea1 sub
 				arcn 
 				0 0 
 				LRradiusArea1 LRangleRiArea1 LRangleLeArea1 sub 0
 				arc 
				LRradiusMax 0 lineto
 				stroke 
 				setmatrix_nlw 
			} if

			1 setlinewidth_nlw 
			setcolor 
			} { 
  			currentcolor 
			ixValueOkArea1 false eq {
 			Red 
 			} if
 			irAngleLeArea1 irAngleRiArea1 sub abs 0.3 gt { 
				matrix currentmatrix_nlw
 				LRangleLeArea1 
				rotate
				newpath
				LRradiusMax 0 moveto
				0 0 
				LRradiusMax 0 LRangleRiArea1 LRangleLeArea1 sub
				arcn 
				0 0 
				LRradiusArea1 LRangleRiArea1 LRangleLeArea1 sub 0
				arc 
				LRradiusMax 0 lineto
 				stroke 
 				setmatrix_nlw
 			} if	
		setcolor 
 		} ifelse 
 		setmatrix_nlw 
 	} if 

	% Sector 2
	irMaxSector 2 ge {	
 		matrix currentmatrix_nlw 
 		LRangleLoad 
 		rotate 
		% Fl㢨e zeichnen wenn Winkel nicht identisch
 		irAngleLeArea2 irAngleRiArea2 ne { 
 			matrix currentmatrix_nlw
			currentcolor 
 			0 0 translate 
			LRangleLeArea2 
			rotate
			_mstatus {	
				_mxposd _myposd itransform 
	 			newpath 
				LRradiusMax 0 moveto
				0 0 
				LRradiusMax 0 LRangleRiArea2 LRangleLeArea2 sub
				arcn 
				0 0 
				LRradiusArea2 LRangleRiArea2 LRangleLeArea2 sub 0
				arc 
				ineofill {
					 LightGrey
				} {
		 			ixValueOkArea2 true eq {
						Grey
					} {
						Red
					} ifelse
				} ifelse
			} { 
	 			ixValueOkArea2 true eq {
					Grey
				} {
					Red
				} ifelse
			} ifelse
			LRangleRiArea2	LRangleLeArea2 sub abs 0.3 gt {
 				newpath 
				LRradiusMax 0 moveto
				0 0 
				LRradiusMax 0 LRangleRiArea2 LRangleLeArea2 sub
				arcn 
				0 0 
				LRradiusArea2 LRangleRiArea2 LRangleLeArea2 sub 0
				arc 
	 			eofill 
			} if
			_mdown {	
				_mxposd _myposd itransform 
 				newpath 
				LRradiusMax 0 moveto
				0 0 
				LRradiusMax 0 LRangleRiArea2 LRangleLeArea2 sub
				arcn 
				0 0 
				LRradiusArea2 LRangleRiArea2 LRangleLeArea2 sub 0
				arc 
				ineofill {
					/qrSector 2 def
				} if
			} if
			false setflash 
			setcolor 
			setmatrix_nlw
		} if
		setmatrix_nlw 

 		matrix currentmatrix_nlw 
 		LRangleLoad 
 		rotate 
 		irSector 2 eq {	
 			currentcolor 
 			ixBypassSwitch true eq {
 			Green 
 			} if
 			ixValueOkArea2 false eq {
 			Red 
 			} if
 			3 setlinewidth_nlw 

			% Kreispunkte zeichnen
			matrix currentmatrix_nlw
 			LRangleLeArea2 
 			rotate 
 			LRradiusLeArea2 5 add 
 			0 moveto 
 			LRradiusLeArea2 0 5 0 360 arc 
 			stroke 
 			LRangleRiArea2 LRangleLeArea2 sub 
 			rotate 
 			LRradiusRiArea2 5 add 
 			0 moveto 
 			LRradiusRiArea2 0 5 0 360 arc 
			stroke
			setmatrix_nlw 

			% Umrandung zeichnen wenn Winkel nicht identisch
 			irAngleLeArea2 irAngleRiArea2 sub abs 0.3 gt { 
				matrix currentmatrix_nlw
				LRangleLeArea2 
				rotate
				LRradiusMax 0 moveto
				0 0 
				LRradiusMax 0 LRangleRiArea2 LRangleLeArea2 sub
				arcn 
				0 0 
				LRradiusArea2 LRangleRiArea2 LRangleLeArea2 sub 0
				arc 
				LRradiusMax 0 lineto
 				stroke 
				setmatrix_nlw 
			} if
  
 			1 setlinewidth_nlw 
	  		setcolor 
			} { 
 			currentcolor 
			ixValueOkArea2 false eq {
 			Red 
 			} if
 			irAngleLeArea2 irAngleRiArea2 sub abs 0.3 gt { 
				matrix currentmatrix_nlw
				LRangleLeArea2 
				rotate
				newpath
				LRradiusMax 0 moveto
				0 0 
				LRradiusMax 0 LRangleRiArea2 LRangleLeArea2 sub
				arcn 
				0 0 
				LRradiusArea2 LRangleRiArea2 LRangleLeArea2 sub 0
				arc 
				LRradiusMax 0 lineto
 				stroke 
				setmatrix_nlw 
			} if
 	  		setcolor 
		} ifelse 
		setmatrix_nlw 
 	} if 

	% Sector 3
	irMaxSector 3 ge {	
 		matrix currentmatrix_nlw 
 		LRangleLoad 
 		rotate 
		% Fl㢨e zeichnen wenn Winkel nicht identisch
 		irAngleLeArea3 irAngleRiArea3 ne { 
 			matrix currentmatrix_nlw
			currentcolor 
 			0 0 translate 
			LRangleLeArea3 
			rotate
			_mstatus {	
				_mxposd _myposd itransform 
	 			newpath 
				LRradiusMax 0 moveto
				0 0 
				LRradiusMax 0 LRangleRiArea3 LRangleLeArea3 sub
				arcn 
				0 0 
				LRradiusArea3 LRangleRiArea3 LRangleLeArea3 sub 0
				arc 
				ineofill {
					 LightGrey
				} {
		 			ixValueOkArea3 true eq {
						Grey
					} {
						Red
					} ifelse
				} ifelse
			} { 
	 			ixValueOkArea3 true eq {
					Grey
				} {
					Red
				} ifelse
			} ifelse
			LRangleRiArea3	LRangleLeArea3 sub abs 0.3 gt {
	 			newpath 
				LRradiusMax 0 moveto
				0 0 
				LRradiusMax 0 LRangleRiArea3 LRangleLeArea3 sub
				arcn 
				0 0 
				LRradiusArea3 LRangleRiArea3 LRangleLeArea3 sub 0
				arc 
 				eofill 
			} if
			_mdown {	
				_mxposd _myposd itransform 
 				newpath 
				LRradiusMax 0 moveto
				0 0 
				LRradiusMax 0 LRangleRiArea3 LRangleLeArea3 sub
				arcn 
				0 0 
				LRradiusArea3 LRangleRiArea3 LRangleLeArea3 sub 0
				arc 
				ineofill {
					/qrSector 3 def
				} if
			} if
			false setflash 
			setcolor 
			setmatrix_nlw
		} if
		setmatrix_nlw 

 		matrix currentmatrix_nlw 
 		LRangleLoad 
 		rotate 
 		irSector 3 eq {	
 			currentcolor 
 			ixBypassSwitch true eq { 
 			Green 
 			} if
 			ixValueOkArea3 false eq {
 			Red 
 			} if
 			3 setlinewidth_nlw 

			% Kreispunkte zeichnen
			matrix currentmatrix_nlw
			LRangleLeArea3 
 			rotate 
 			LRradiusLeArea3 5 add 
 			0 moveto 
 			LRradiusLeArea3 0 5 0 360 arc 
 			stroke 
 			LRangleRiArea3 LRangleLeArea3 sub 
 			rotate 
 			LRradiusRiArea3 5 add 
 			0 moveto 
 			LRradiusRiArea3 0 5 0 360 arc 
 			stroke 
	 		setmatrix_nlw 

			% Umrandung zeichnen wenn Winkel nicht identisch
 			irAngleLeArea3 irAngleRiArea3 sub abs 0.3 gt { 
				matrix currentmatrix_nlw
				LRangleLeArea3 
				rotate
				LRradiusMax 0 moveto
				0 0 
				LRradiusMax 0 LRangleRiArea3 LRangleLeArea3 sub
				arcn 
				0 0 
				LRradiusArea3 LRangleRiArea3 LRangleLeArea3 sub 0
				arc 
				LRradiusMax 0 lineto
 				stroke 
		 		setmatrix_nlw 
 			} if
 
			1 setlinewidth_nlw 
  			setcolor
 			} { 
			currentcolor 
			ixValueOkArea3 false eq {
 			Red 
 			} if
			irAngleLeArea3 irAngleRiArea3 sub abs 0.3 gt { 
				matrix currentmatrix_nlw
				LRangleLeArea3 
				rotate
				newpath
				LRradiusMax 0 moveto
				0 0 
				LRradiusMax 0 LRangleRiArea3 LRangleLeArea3 sub
				arcn 
				0 0 
				LRradiusArea3 LRangleRiArea3 LRangleLeArea3 sub 0
				arc 
				LRradiusMax 0 lineto
 				stroke 
		 		setmatrix_nlw 
			} if
			setcolor
 		} ifelse 

 		setmatrix_nlw 
 	} if 

	% Sector 4
	irMaxSector 4 ge {	
 		matrix currentmatrix_nlw 
 		LRangleLoad 
 		rotate 
		% Fl㢨e zeichnen wenn Winkel nicht identisch
 		irAngleLeArea4 irAngleRiArea4 ne { 
 			matrix currentmatrix_nlw
			currentcolor 
 			0 0 translate 
			LRangleLeArea4 
			rotate
			_mstatus {	
				_mxposd _myposd itransform 
	 			newpath 
				LRradiusMax 0 moveto
				0 0 
				LRradiusMax 0 LRangleRiArea4 LRangleLeArea4 sub
				arcn 
				0 0 
				LRradiusArea4 LRangleRiArea4 LRangleLeArea4 sub 0
				arc 
				ineofill {
					 LightGrey
				} {
		 			ixValueOkArea4 true eq {
						Grey
					} {
						Red
					} ifelse
				} ifelse
			} { 
	 			ixValueOkArea4 true eq {
					Grey
				} {
					Red
				} ifelse
			} ifelse
			LRangleRiArea4	LRangleLeArea4 sub abs 0.3 gt {
	 			newpath 
				LRradiusMax 0 moveto
				0 0 
				LRradiusMax 0 LRangleRiArea4 LRangleLeArea4 sub
				arcn 
				0 0 
				LRradiusArea4 LRangleRiArea4 LRangleLeArea4 sub 0
				arc 
 				eofill 
			} if
			_mdown {	
				_mxposd _myposd itransform 
 				newpath 
				LRradiusMax 0 moveto
				0 0 
				LRradiusMax 0 LRangleRiArea4 LRangleLeArea4 sub
				arcn 
				0 0 
				LRradiusArea4 LRangleRiArea4 LRangleLeArea4 sub 0
				arc 
				ineofill {
					/qrSector 4 def
				} if
			} if
			false setflash 
			setcolor 
			setmatrix_nlw
		} if
		setmatrix_nlw 

 		matrix currentmatrix_nlw 
 		LRangleLoad 
 		rotate 
 		irSector 4 eq {	
 			currentcolor 
 			ixBypassSwitch true eq {
 			Green
 			} if
 			ixValueOkArea4 false eq {
 			Red 
 			} if
 			3 setlinewidth_nlw 

			% Kreispunkte zeichnen
	 		matrix currentmatrix_nlw 
			LRangleLeArea4 
			rotate 
			LRradiusLeArea4 5 add 
			0 moveto 
			LRradiusLeArea4 0 5 0 360 arc 
			stroke 
			LRangleRiArea4 LRangleLeArea4 sub 
			rotate 
			LRradiusRiArea4 5 add 
			0 moveto 
			LRradiusRiArea4 0 5 0 360 arc 
			stroke 
	 		setmatrix_nlw 

			% Umrandung zeichnen wenn Winkel nicht identisch
 			irAngleLeArea4 irAngleRiArea4 sub abs 0.3 gt { 
		 		matrix currentmatrix_nlw 
				LRangleLeArea4 
				rotate
				LRradiusMax 0 moveto
				0 0 
				LRradiusMax 0 LRangleRiArea4 LRangleLeArea4 sub
				arcn 
				0 0 
				LRradiusArea4 LRangleRiArea4 LRangleLeArea4 sub 0
				arc 
				LRradiusMax 0 lineto
 				stroke 
		 		setmatrix_nlw 
			} if

 			1 setlinewidth_nlw 
  			setcolor 
			} { 
			currentcolor 
 			ixValueOkArea4 false eq {
 			Red 
 			} if
			irAngleLeArea4 irAngleRiArea4 sub abs 0.3 gt { 
		 		matrix currentmatrix_nlw 
				LRangleLeArea4 
				rotate
				newpath
				LRradiusMax 0 moveto
				0 0 
				LRradiusMax 0 LRangleRiArea4 LRangleLeArea4 sub
				arcn 
				0 0 
				LRradiusArea4 LRangleRiArea4 LRangleLeArea4 sub 0
				arc 
				LRradiusMax 0 lineto
 				stroke 
		 		setmatrix_nlw 
 			} if
			setcolor 
 		} ifelse 
 		setmatrix_nlw 
 	} if 

	% Sector 5
	irMaxSector 5 ge {	
 		matrix currentmatrix_nlw 
 		LRangleLoad 
 		rotate 
		% Fl㢨e zeichnen wenn Winkel nicht identisch
 		irAngleLeArea5 irAngleRiArea5 ne { 
 			matrix currentmatrix_nlw
			currentcolor 
 			0 0 translate 
			LRangleLeArea5 
			rotate
			_mstatus {	
				_mxposd _myposd itransform 
	 			newpath 
				LRradiusMax 0 moveto
				0 0 
				LRradiusMax 0 LRangleRiArea5 LRangleLeArea5 sub
				arcn 
				0 0 
				LRradiusArea5 LRangleRiArea5 LRangleLeArea5 sub 0
				arc 
				ineofill {
					 LightGrey
				} {
		 			ixValueOkArea5 true eq {
						Grey
					} {
						Red
					} ifelse
				} ifelse
			} { 
	 			ixValueOkArea5 true eq {
					Grey
				} {
					Red
				} ifelse
			} ifelse
			LRangleRiArea5	LRangleLeArea5 sub abs 0.3 gt {
				newpath 
				LRradiusMax 0 moveto
				0 0 
				LRradiusMax 0 LRangleRiArea5 LRangleLeArea5 sub
				arcn 
				0 0 
				LRradiusArea5 LRangleRiArea5 LRangleLeArea5 sub 0
				arc 
 				eofill 
			} if
			_mdown {	
				_mxposd _myposd itransform 
 				newpath 
				LRradiusMax 0 moveto
				0 0 
				LRradiusMax 0 LRangleRiArea5 LRangleLeArea5 sub
				arcn 
				0 0 
				LRradiusArea5 LRangleRiArea5 LRangleLeArea5 sub 0
				arc 
				ineofill {
					/qrSector 5 def
				} if
			} if
			false setflash 
			setcolor 
			setmatrix_nlw
		} if
		setmatrix_nlw 

 		matrix currentmatrix_nlw 
 		LRangleLoad 
 		rotate 
 		irSector 5 eq {	
 			currentcolor 
 			ixBypassSwitch true eq { 
 			Green 
 			} if 
 			ixValueOkArea5 false eq {
 			Red 
 			} if
 			3 setlinewidth_nlw 
	
			% Kreispunkte zeichnen
			matrix currentmatrix_nlw 
 			LRangleLeArea5 
 			rotate 
 			LRradiusLeArea5 5 add 
 			0 moveto 
 			LRradiusLeArea5 0 5 0 360 arc 
 			stroke 
 			LRangleRiArea5 LRangleLeArea5 sub 
 			rotate 
 			LRradiusRiArea5 5 add 
 			0 moveto 
 			LRradiusRiArea5 0 5 0 360 arc 
 			stroke 
 			setmatrix_nlw 

			% Umrandung zeichnen wenn Winkel nicht identisch
 			irAngleLeArea5 irAngleRiArea5 sub abs 0.3 gt { 
				matrix currentmatrix_nlw 
				LRangleLeArea5 
				rotate
				LRradiusMax 0 moveto
				0 0 
				LRradiusMax 0 LRangleRiArea5 LRangleLeArea5 sub
				arcn 
				0 0 
				LRradiusArea5 LRangleRiArea5 LRangleLeArea5 sub 0
				arc 
				LRradiusMax 0 lineto
 				stroke 
		 		setmatrix_nlw 
			} if 
 
			1 setlinewidth_nlw 
	 		setcolor 
 			} { 
			currentcolor
			ixValueOkArea5 false eq {
 			Red 
 			} if
 			irAngleLeArea5 irAngleRiArea5 sub abs 0.3 gt {
				matrix currentmatrix_nlw 
				LRangleLeArea5 
				rotate
				LRradiusMax 0 moveto
				0 0 
				LRradiusMax 0 LRangleRiArea5 LRangleLeArea5 sub
				arcn 
				0 0 
				LRradiusArea5 LRangleRiArea5 LRangleLeArea5 sub 0
				arc 
				LRradiusMax 0 lineto
 				stroke 
		 		setmatrix_nlw 
			} if
	 		setcolor 
 		} ifelse 
 		setmatrix_nlw 
 	} if 

	% minimum und maximum Kreis
	1 setlinewidth_nlw 
 	LRradiusMax 0 moveto 
 	0 0 
 	LRradiusMax 0 360 arc 
 	LRradiusMin 0 moveto 
 	0 0 
 	LRradiusMin 0 360 arc 
 	stroke 
 	1 setlinewidth_nlw 

	% Kran und Anzeigewerte
 	matrix currentmatrix_nlw 
 	90 rotate 
 	currentcolor
 	Green
 	3 setlinewidth_nlw 
 	LRradiusMin 2 div 0 LRradiusMin 4 div sub moveto 
 	LRradiusLoad 6 sub 0 LRradiusMin 6 div sub lineto 
 	LRradiusLoad 6 sub LRradiusMin 6 div lineto 
 	LRradiusMin 2 div LRradiusMin 4 div lineto 
 	LRradiusMin 2 div LRradiusMin 2 div lineto
 	0 LRradiusMin 2 div sub LRradiusMin 2 div lineto
 	0 LRradiusMin 2 div sub 0 LRradiusMin 2 div sub lineto
 	LRradiusMin 2 div 0 LRradiusMin 2 div sub lineto
 	LRradiusMin 2 div 0 LRradiusMin 4 div sub lineto
 	stroke
 	LRradiusLoad 6 add 0 moveto 
 	LRradiusLoad  0 6 0 360 arc 
 	stroke 
 	1 setlinewidth_nlw
 	setcolor 
	setmatrix_nlw
 	matrix currentmatrix_nlw 
 	60 LRradiusLoad 10.0 sub translate 
 	1 1 scale 
 	irLoadRadius 3.10 false false FSfatFont 0.75 
 	baValueDist001 
 	setmatrix_nlw 
 	matrix currentmatrix_nlw 
	20 -50.0 translate 
  	1 1 scale 
 	irLoadAngle 3.10 (°) false false FSfatFont 1 
 	baValue001 
 	setmatrix_nlw 
 
		%?manual_end 
	
	qrSector 
} def
%?partend


%?partdef spEMotor001
%?fn	spEMotor001
%?brief	E-Motor Statusanzeige (rot=aus, gelb=startet, gr�ft)
%?bbox	0 0 79 79
/spEMotor001 {
	/ixMotorRunning exch def	%?brief motor running %?use INP %?type BOOL %?dflt false
	/ixStartMotor3 exch def	%?brief start motor 3 %?use INP %?type BOOL %?dflt false
	/ixStartMotor2 exch def	%?brief start motor 2 %?use INP %?type BOOL %?dflt false
	/ixStartMotor1 exch def	%?brief start motor 1 %?use INP %?type BOOL %?dflt false
	/irMotorNumber exch def	%?brief motor number %?use INP %?type REAL %?dflt    0.00
	ixMotorRunning true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 0 0 translate 
		0 rotate 
		1 1 scale 
		gsEmotor001 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	ixMotorRunning false eq 
	ixStartMotor1 true eq 
	ixStartMotor2 true eq 
	ixStartMotor3 true eq or or and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		Yellow 0 0 translate 
		0 rotate 
		1 1 scale 
		gsEmotor001 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	ixStartMotor1 false eq 
	ixStartMotor2 false eq 
	ixStartMotor3 false eq and and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		Red 0 0 translate 
		0 rotate 
		1 1 scale 
		gsEmotor001 
		setcolor 
		setmatrix_nlw 
	} if 
	matrix currentmatrix_nlw 
	currentcolor 
	55 27 translate 
	0 rotate 
	1 1 scale 
	irMotorNumber 3 () false false 
	FSfatFont 1 
	baValue001 
	setcolor 
	setmatrix_nlw 
} def
%?partend


%?partdef spHeelTrim001
%?fn	spHeelTrim001
%?brief	heel trim indication
%?bbox	0 0 159 79
/spHeelTrim001 {
	/ixTrimSensorErr exch def	%?brief trim sensor error %?use INP %?type BOOL %?dflt false
	/ixHeelSensorErr exch def	%?brief heel sensor error %?use INP %?type BOOL %?dflt false
	/ixHeelTrimAlarm exch def	%?brief heel trim angel alarm %?use INP %?type BOOL %?dflt false
	/ixHeelTrimWarn exch def	%?brief heel trim angle warning %?use INP %?type BOOL %?dflt false
	/irTrimAngel exch def	%?brief trim angel %?use INP %?type REAL %?dflt    0.00
	/irHeelAngel exch def	%?brief heel angel %?use INP %?type REAL %?dflt    0.00
	/LXtrimError false def	%?brief trim angel error %?use LOC %?type BOOL %?dflt false
	/LXheelError false def	%?brief heel angel error %?use LOC %?type BOOL %?dflt false
	/LXheelError ixHeelTrimAlarm ixHeelSensorErr or exch store 
	/LXtrimError ixHeelTrimAlarm ixTrimSensorErr or exch store 
	ixHeelTrimAlarm true eq {	
		true setflash 
	} if 
	matrix currentmatrix_nlw 
	currentcolor 
	10 50 translate 
	0 rotate 
	1 1 scale 
	(HEEL) 
	FSfatFont 1 
	ixHeelTrimAlarm false false false 
	baText002 
	setcolor 
	setmatrix_nlw 
	false setflash 
	ixHeelTrimAlarm true eq {	
		true setflash 
	} if 
	matrix currentmatrix_nlw 
	currentcolor 
	10 10 translate 
	0 rotate 
	1 1 scale 
	(TRIM) 
	FSfatFont 1 
	ixHeelTrimAlarm false false false 
	baText002 
	setcolor 
	setmatrix_nlw 
	false setflash 
	matrix currentmatrix_nlw 
	currentcolor 
	130 50 translate 
	0 rotate 
	1 1 scale 
	irHeelAngel 3.10 (°) 
	ixHeelTrimWarn LXheelError FSfatFont 1 
	baValue001 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	130 10 translate 
	0 rotate 
	1 1 scale 
	irTrimAngel 3.10 (°) 
	ixHeelTrimWarn LXtrimError FSfatFont 1 
	baValue001 
	setcolor 
	setmatrix_nlw 
} def
%?partend


%?partdef spWinch001
%?fn	spWinch001
%?brief	rope length of winch
%?bbox	0 0 319 79
/spWinch001 {
	/ixErrorActiv exch def	%?brief error activ %?use INP %?type BOOL %?dflt false
	/ixWarnActiv exch def	%?brief warning activ %?use INP %?type BOOL %?dflt false
	/irSymbol exch def	%?brief symbol 1=MH; 2=LG %?use INP %?type REAL %?dflt    0.00
	/isString exch def	%?brief string %?use INP %?type STRI %?dflt 
	/irLength exch def	%?brief rope length [m] %?use INP %?type REAL %?dflt    0.00
	matrix currentmatrix_nlw 
	currentcolor 
	200 20 translate 
	0 rotate 
	1 1 scale 
	irLength 3.10 false false 
	FSbigFatFont 0.75 
	baValueDist001 
	setcolor 
	setmatrix_nlw 
	currentcolor 
	ixWarnActiv true eq {	
		Yellow 
	} if 
	ixErrorActiv true eq {	
		Red 
	} if 
	irSymbol 1 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 20 translate 
		0 rotate 
		0.75 0.75 scale 
		ssHook001 
		setcolor 
		setmatrix_nlw 
	} if 
	irSymbol 2 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 20 translate 
		0 rotate 
		0.75 0.75 scale 
		gsLimit012 
		setcolor 
		setmatrix_nlw 
	} if 
	matrix currentmatrix_nlw 
	currentcolor 
	30 5 translate 
	0 rotate 
	0.75 0.75 scale 
	isString FSfatFont 8 
	baText001 
	setcolor 
	setmatrix_nlw 
	setcolor 
} def
%?partend


%?partdef spAntiCollision004
%?fn	spAntiCollision004
%?brief	anticollision change sector
%?bbox	0 0 79 79
/spAntiCollision004 {
	/irSector exch def	%?brief sector %?use INP %?type REAL %?dflt    0.00
	/irMaxSector exch def	%?brief maximum sector %?use INP %?type REAL %?dflt    0.00
	/qrSectorSPS 0 def	%?brief sector sps %?use OUT %?type REAL %?dflt    0.00
	/qrSector 0 def	%?brief sector %?use OUT %?type REAL %?dflt    0.00
	/LXchangeSector false def	%?brief change sector %?use LOC %?type BOOL %?dflt false

	matrix currentmatrix_nlw 
	currentcolor 
	0 0 translate 
	0 rotate 
	1 1 scale 
	baTouchButton001 {	
		/LXchangeSector true store 
	} if 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	59 24 translate 
	0 rotate 
	1 1 scale 
	irSector 3 () false false FSbigFatFont 1 
	baValue001 
	setcolor 
	setmatrix_nlw 

%?manual_beg
	LXchangeSector true eq {
		/qrSector irSector 1 add def
	} {
	/qrSector irSector def
	} ifelse
	qrSector irMaxSector gt 
	qrSector 0 eq or {
		/qrSector 1 def
	} if
	/qrSectorSPS irSector def
%?manual_end 
	
	qrSectorSPS qrSector 
} def
%?partend


%?partdef spAntiCollision005
%?fn	spAntiCollision005
%?brief	anticollision symbol part
%?bbox	0 0 79 79
/spAntiCollision005 {
	/ixEnableCross exch def	%?brief enable cross %?use INP %?type BOOL %?dflt false
	/irSgStop exch def	%?brief sg stop (left=0, right=1 ,both =2) %?use INP %?type REAL %?dflt    0.00
	%?term_beg
	
	irSgStop 1 eq 
	irSgStop 2 eq or 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		5 30 translate 
		0 rotate 
		0.60 0.60 scale_nlw 
		gsLimit018 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	irSgStop 0 eq 
	irSgStop 2 eq or 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		5 30 translate 
		0 rotate 
		0.60 0.60 scale_nlw 
		gsLimit017 
		setcolor 
		setmatrix_nlw 
	} if 
	matrix currentmatrix_nlw 
	currentcolor 
	30 5 translate 
	0 rotate 
	0.60 0.60 scale_nlw 
	gsLimit009 
	setcolor 
	setmatrix_nlw 
	ixEnableCross true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		Red 0 0 translate 
		0 rotate 
		1 1 scale_nlw 
		gsGeneral018 
		setcolor 
		setmatrix_nlw 
	} if 
} def
%?partend

%?partdef spHydraulic001
%?fn	spHydraulic001
%?brief	hydraulic temperatur gauge
%?bbox	0 0 239 239
/spHydraulic001 {
	/ixTempLow exch def	%?brief temperatur low %?use INP %?type BOOL %?dflt false
	/ixTempError exch def	%?brief temperatur error %?use INP %?type BOOL %?dflt false
	/isString exch def	%?brief string + number %?use INP %?type STRI %?dflt 
	/irSymbol exch def	%?brief symbol: 1=MH; 2=AH; 3=LG; 4=TW; 5=sgLe; 6=sgRi %?use INP %?type REAL %?dflt    0.00
	/irTemperatur exch def	%?brief temperatur [°C] %?use INP %?type REAL %?dflt    0.00
	/LRtemperatur 0 def	%?brief temperatur [°F] %?use LOC %?type REAL %?dflt    0.00
	matrix currentmatrix_nlw 
	currentcolor 
	10 150 translate 
	0 rotate 
	1 1 scale 
	irTemperatur 
	calc_F 
	/LRtemperatur exch store 
	setcolor 
	setmatrix_nlw 
	irSymbol 1 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		90 50 translate 
		0 rotate 
		0.75 0.75 scale 
		ixTempError false 
		ixTempLow false (ssHook001) 
		baSwitchSymbolColor004 
		setcolor 
		setmatrix_nlw 
	} if 
	irSymbol 2 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		90 50 translate 
		0 rotate 
		0.75 0.75 scale 
		ixTempError false 
		ixTempLow false (gsHook001) 
		baSwitchSymbolColor004 
		setcolor 
		setmatrix_nlw 
	} if 
	irSymbol 3 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		90 50 translate 
		0 rotate 
		0.75 0.75 scale 
		ixTempError false 
		ixTempLow false (gsLimit012) 
		baSwitchSymbolColor004 
		setcolor 
		setmatrix_nlw 
	} if 
	irSymbol 4 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		90 50 translate 
		0 rotate 
		0.75 0.75 scale 
		ixTempError false 
		ixTempLow false (ssWinch001) 
		baSwitchSymbolColor004 
		setcolor 
		setmatrix_nlw 
	} if 
	irSymbol 5 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		90 50 translate 
		0 rotate 
		0.75 0.75 scale 
		ixTempError false 
		ixTempLow false (gsHydraulic005) 
		baSwitchSymbolColor004 
		setcolor 
		setmatrix_nlw 
	} if 
	matrix currentmatrix_nlw 
	currentcolor 
	45 205 translate 
	0 rotate 
	0.75 0.75 scale 
	isString 7 0 
	baText001 
	setcolor 
	setmatrix_nlw 
	MXchangeUnit false eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		120 120 translate 
		0 rotate 
		1 1 scale 
		irTemperatur false (°C) 0 100 10 85 1 2 4 1 true 4 1 7 0 225 -270 false 90 false 0 
		baRoundDisplay001 
		setcolor 
		setmatrix_nlw 
	} if 
	MXchangeUnit true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		120 120 translate 
		0 rotate 
		1 1 scale 
		LRtemperatur false (°F) 30 210 50 185 1 2 4 1 true 4 1 7 0 225 -270 false 90 false 0 
		baRoundDisplay001 
		setcolor 
		setmatrix_nlw 
	} if 
} def
%?partend


%?partdef spHydraulic002
%?fn	spHydraulic002
%?brief	hydraulic pressure gauge
%?bbox	0 0 239 239
/spHydraulic002 {
	/ixHydrPressErr exch def	%?brief hydraulic pressure error %?use INP %?type BOOL %?dflt false
	/isString exch def	%?brief string + number %?use INP %?type STRI %?dflt 
	/irSymbol exch def	%?brief symbol: winch=1 %?use INP %?type REAL %?dflt    0.00
	/irHydrPressure exch def	%?brief hydraulic pressure [bar] %?use INP %?type REAL %?dflt    0.00
	/LRhydrPressPsi 0 def	%?brief hydraulic pressure [psi] %?use LOC %?type REAL %?dflt    0.00
	matrix currentmatrix_nlw 
	currentcolor 
	10 150 translate 
	0 rotate 
	1 1 scale 
	irHydrPressure 
	calc_psi 
	/LRhydrPressPsi exch store 
	setcolor 
	setmatrix_nlw 
	irSymbol 1 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		90 50 translate 
		0 rotate 
		0.75 0.75 scale 
		ixHydrPressErr false false false (ssLimit002) 
		baSwitchSymbolColor004 
		setcolor 
		setmatrix_nlw 
	} if 
	irSymbol 2 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		90 50 translate 
		0 rotate 
		0.75 0.75 scale 
		ixHydrPressErr false false false (ssLimit003) 
		baSwitchSymbolColor004 
		setcolor 
		setmatrix_nlw 
	} if 
	irSymbol 3 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		90 50 translate 
		0 rotate 
		0.75 0.75 scale 
		ixHydrPressErr false false false (ssLimit004) 
		baSwitchSymbolColor004 
		setcolor 
		setmatrix_nlw 
	} if 
	irSymbol 4 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		90 50 translate 
		0 rotate 
		0.75 0.75 scale 
		ixHydrPressErr false false false (ssLimit005) 
		baSwitchSymbolColor004 
		setcolor 
		setmatrix_nlw 
	} if 
	irSymbol 5 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		90 50 translate 
		0 rotate 
		0.75 0.75 scale 
		ixHydrPressErr false false false (ssLimit010) 
		baSwitchSymbolColor004 
		setcolor 
		setmatrix_nlw 
	} if 
	irSymbol 6 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		90 50 translate 
		0 rotate 
		0.75 0.75 scale 
		ixHydrPressErr false false false (ssLimit011) 
		baSwitchSymbolColor004 
		setcolor 
		setmatrix_nlw 
	} if 
	irSymbol 7 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		90 50 translate 
		0 rotate 
		0.75 0.75 scale 
		ixHydrPressErr false false false (gsHydraulic009) 
		baSwitchSymbolColor004 
		setcolor 
		setmatrix_nlw 
	} if 
	irSymbol 8 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		90 50 translate 
		0 rotate 
		0.75 0.75 scale 
		ixHydrPressErr false false false (gsHydraulic010) 
		baSwitchSymbolColor004 
		setcolor 
		setmatrix_nlw 
	} if 
	irSymbol 5 lt {	
		matrix currentmatrix_nlw 
		currentcolor 
		45 205 translate 
		0 rotate 
		0.75 0.75 scale 
		isString 7 0 
		baText001 
		setcolor 
		setmatrix_nlw 
	} if 
	MXchangeUnit false eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		120 120 translate 
		0 rotate 
		1 1 scale 
		irHydrPressure false (bar) 0 600 20 450 1 3 4 1 true 4 1 7 0 225 -270 false 90 false 0 
		baRoundDisplay001 
		setcolor 
		setmatrix_nlw 
	} if 
	MXchangeUnit true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		120 120 translate 
		0 rotate 
		1 1 scale 
		LRhydrPressPsi false (psi) 0 8700 290 6225 1 3 4 1 true 4 1 7 0 225 -270 false 90 false 0 
		baRoundDisplay001 
		setcolor 
		setmatrix_nlw 
	} if 
} def
%?partend


%?partdef spHydraulic003
%?fn	spHydraulic003
%?brief	hydraulic level gauge
%?bbox	0 0 239 239
/spHydraulic003 {
	/irMinLevel exch def	%?brief minimum level [ %?use INP %?type REAL %?dflt   20.00
	/isString exch def	%?brief string + number %?use INP %?type STRI %?dflt 
	/irLevel exch def	%?brief level [ %?use INP %?type REAL %?dflt    0.00
	/LXlevelHigh false def	%?brief level high %?use LOC %?type BOOL %?dflt false
	/LXlevelLow false def	%?brief level low %?use LOC %?type BOOL %?dflt false
	matrix currentmatrix_nlw 
	currentcolor 
	80 40 translate 
	0 rotate 
	1 1 scale 
	true 
	irLevel irMinLevel 
	spLT001 
	/LXlevelLow exch store 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	75 35 translate 
	0 rotate 
	1 1 scale 
	true 
	irLevel 95 
	spGT001 
	/LXlevelHigh exch store 
	setcolor 
	setmatrix_nlw 
	LXlevelHigh false eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		90 50 translate 
		0 rotate 
		0.75 0.75 scale 
		LXlevelLow false false false (gsHydraulic004) 
		baSwitchSymbolColor004 
		setcolor 
		setmatrix_nlw 
	} if 
	LXlevelHigh true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		90 50 translate 
		0 rotate 
		0.75 0.75 scale 
		LXlevelHigh false false false (gsHydraulic004) 
		baSwitchSymbolColor004 
		setcolor 
		setmatrix_nlw 
	} if 
	matrix currentmatrix_nlw 
	currentcolor 
	45 205 translate 
	0 rotate 
	0.75 0.75 scale 
	isString 7 0 
	baText001 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	120 120 translate 
	0 rotate 
	1 1 scale 
	irLevel false (%) 0 100 
	irMinLevel 100 1 4 4 1 true 4 1 7 0 225 -270 false 90 false 0 
	baRoundDisplay001 
	setcolor 
	setmatrix_nlw 
} def
%?partend


%?partdef spWinch002
%?fn	spWinch002
%?brief	rope synchron of winch
%?bbox	0 0 319 79
/spWinch002 {
	/ixErrorActiv exch def	%?brief error actv %?use INP %?type BOOL %?dflt false
	/ixWarnActiv exch def	%?brief warning actv %?use INP %?type BOOL %?dflt false
	/isString exch def	%?brief string %?use INP %?type STRI %?dflt 
	/irSymbol exch def	%?brief symbol 1=synchron; 2=LG; 3;MH %?use INP %?type REAL %?dflt    0.00
	/irLength exch def	%?brief rope length [m] %?use INP %?type REAL %?dflt    0.00
	matrix currentmatrix_nlw 
	currentcolor 
	210 20 translate 
	0 rotate 
	1 1 scale 
	irLength 3.10 false false 
	FSbigFatFont 0.75 
	baValueDist001 
	setcolor 
	setmatrix_nlw 
	currentcolor 
	ixWarnActiv true eq {	
		Yellow 
	} if 
	ixErrorActiv true eq {	
		Red 
	} if 
	irSymbol 1 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		gsHook004 
		setcolor 
		setmatrix_nlw 
	} if 
	irSymbol 2 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		10 20 translate 
		0 rotate 
		0.75 0.75 scale 
		gsLimit012 
		setcolor 
		setmatrix_nlw 
	} if 
	irSymbol 3 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		10 20 translate 
		0 rotate 
		0.75 0.75 scale 
		ssHook001 
		setcolor 
		setmatrix_nlw 
	} if 
	irSymbol 1 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		40 5 translate 
		0 rotate 
		0.75 0.75 scale 
		isString FSfatFont 8
		baText001 
		setcolor 
		setmatrix_nlw 
	} if 
	setcolor 
	%?term_beg
	
	irSymbol 1 eq 
	ixErrorActiv true eq and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		Red 
		0 0 translate 
		0 rotate 
		1 1 scale 
		gsGeneral018
		setcolor 
		setmatrix_nlw 
	} if 
} def
%?partend


%?partdef spWinch003
%?fn	spWinch003
%?brief	rope selection winch main hoist or luffing gear
%?bbox	0 0 79 79
/spWinch003 {
	/irSymbol exch def	%?brief symbol 1=MH; 2=LG %?use INP %?type REAL %?dflt    0.00
	/isString exch def	%?brief string %?use INP %?type STRI %?dflt 
	/irLength exch def	%?brief rope length [m] %?use INP %?type REAL %?dflt    0.00
	matrix currentmatrix_nlw 
	currentcolor 
	40 5 translate 
	0 rotate 
	0.75 0.75 scale 
	isString FSfatFont 8
	baText001 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	10 20 translate 
	0 rotate 
	0.75 0.75 scale 
	gsHook004 
	setcolor 
	setmatrix_nlw 
} def
%?partend


%?partdef spGear001
%?fn	spGear001
%?brief	temperatur part
%?bbox	0 0 319 79
/spGear001 {
	/isString exch def	%?brief string + number %?use INP %?type STRI %?dflt 
	/irSymbol exch def	%?brief symbol: 1=Gear; 2=MH; 3=AH; 4=LG; 5=TW; 6=sgLe; 7=sgRi %?use INP %?type REAL %?dflt    0.00
	/irGearTempWarn exch def	%?brief hydraulic temperatur warning value %?use INP %?type REAL %?dflt 1000.00
	/irGearTempHigh exch def	%?brief hydraulic temperatur high value %?use INP %?type REAL %?dflt 1000.00
	/irGearTemp exch def	%?brief hydraulic temperatur %?use INP %?type REAL %?dflt    0.00
	matrix currentmatrix_nlw 
	currentcolor 
	170 25 translate 
	0 rotate 
	1 1 scale 
	irGearTemp 3.10 false false 
	FSbigFatFont 0.75 
	baValueTemp001 
	setcolor 
	setmatrix_nlw 
	currentcolor 
	irGearTemp irGearTempWarn ge {	
		Yellow 
	} if 
	irGearTemp irGearTempHigh ge {	
		Red 
	} if 
	irSymbol 1 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 20 translate 
		0 rotate 
		0.75 0.75 scale 
		gsEngine046 
		setcolor 
		setmatrix_nlw 
	} if 
	irSymbol 2 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 20 translate 
		0 rotate 
		0.75 0.75 scale 
		ssHook001 
		setcolor 
		setmatrix_nlw 
	} if 
	irSymbol 3 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 20 translate 
		0 rotate 
		0.75 0.75 scale 
		gsHook001 
		setcolor 
		setmatrix_nlw 
	} if 
	irSymbol 4 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 20 translate 
		0 rotate 
		0.75 0.75 scale 
		gsLimit012 
		setcolor 
		setmatrix_nlw 
	} if 
	irSymbol 5 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 20 translate 
		0 rotate 
		0.75 0.75 scale 
		ssWinch001 
		setcolor 
		setmatrix_nlw 
	} if 
	irSymbol 6 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 10 translate 
		0 rotate 
		0.75 0.75 scale 
		gsLimit017 
		setcolor 
		setmatrix_nlw 
	} if 
	irSymbol 7 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 10 translate 
		0 rotate 
		0.75 0.75 scale 
		gsLimit018 
		setcolor 
		setmatrix_nlw 
	} if 
	irSymbol 6 lt {	
		matrix currentmatrix_nlw 
		currentcolor 
		30 5 translate 
		0 rotate 
		0.75 0.75 scale 
		isString FSfatFont 8 
		baText001 
		setcolor 
		setmatrix_nlw 
	} if 
	setcolor 
} def
%?partend


%?partdef spTemperatur001
%?fn	spTemperatur001
%?brief	gear temperatur gauge
%?bbox	0 0 239 239
/spTemperatur001 {
	/ixTempError exch def	%?brief temperatur error %?use INP %?type BOOL %?dflt false
	/isString exch def	%?brief string + number %?use INP %?type STRI %?dflt 
	/irSymbol exch def	%?brief symbol: 1=MH; 2=AH; 3=LG; 4=TW; 5=Gear %?use INP %?type REAL %?dflt    0.00
	/irTemperatur exch def	%?brief temperatur [°C] %?use INP %?type REAL %?dflt    0.00
	/LXtempError false def	%?brief temperatur error %?use LOC %?type BOOL %?dflt false
	/LXtempHigh false def	%?brief temperatur high %?use LOC %?type BOOL %?dflt false
	/LXtempWarn false def	%?brief temperatur warning %?use LOC %?type BOOL %?dflt false
	/LRtemperatur 0 def	%?brief temperatur [°F] %?use LOC %?type REAL %?dflt    0.00
	matrix currentmatrix_nlw 
	currentcolor 
	80 40 translate 
	0 rotate 
	1 1 scale 
	true 
	irTemperatur 95 
	spGT001 
	/LXtempWarn exch store 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	80 40 translate 
	0 rotate 
	1 1 scale 
	true 
	irTemperatur 110 
	spGT001 
	/LXtempHigh exch store 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	80 40 translate 
	0 rotate 
	1 1 scale 
	ixTempError LXtempHigh 
	FUN_OR_2 
	/LXtempError exch store 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	10 150 translate 
	0 rotate 
	1 1 scale 
	irTemperatur 
	calc_F 
	/LRtemperatur exch store 
	setcolor 
	setmatrix_nlw 
	irSymbol 1 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		90 50 translate 
		0 rotate 
		0.75 0.75 scale 
		LXtempError LXtempWarn false false (ssHook001) 
		baSwitchSymbolColor004 
		setcolor 
		setmatrix_nlw 
	} if 
	irSymbol 2 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		90 50 translate 
		0 rotate 
		0.75 0.75 scale 
		LXtempError LXtempWarn false false (gsHook001) 
		baSwitchSymbolColor004 
		setcolor 
		setmatrix_nlw 
	} if 
	irSymbol 3 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		90 50 translate 
		0 rotate 
		0.75 0.75 scale 
		LXtempError LXtempWarn false false (gsLimit012) 
		baSwitchSymbolColor004 
		setcolor 
		setmatrix_nlw 
	} if 
	irSymbol 4 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		90 50 translate 
		0 rotate 
		0.75 0.75 scale 
		LXtempError LXtempWarn false false (ssWinch001) 
		baSwitchSymbolColor004 
		setcolor 
		setmatrix_nlw 
	} if 
	irSymbol 5 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		95 50 translate 
		0 rotate 
		0.75 0.75 scale 
		LXtempError LXtempWarn false false (gsGear001) 
		baSwitchSymbolColor004 
		setcolor 
		setmatrix_nlw 
	} if 
	matrix currentmatrix_nlw 
	currentcolor 
	45 205 translate 
	0 rotate 
	0.75 0.75 scale 
	isString FSfatFont 0 
	baText001 
	setcolor 
	setmatrix_nlw 
	MXchangeUnit false eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		120 120 translate 
		0 rotate 
		1 1 scale 
		irTemperatur false (°C) 20 120 95 110 3 1 4 1 true 4 
		FSstdFont FSfatFont 0 225 -270 false 95 false 0 
		baRoundDisplay001 
		setcolor 
		setmatrix_nlw 
	} if 
	MXchangeUnit true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		120 120 translate 
		0 rotate 
		1 1 scale 
		LRtemperatur false (°F) 50 250 203 230 3 1 4 1 true 4 
		FSstdFont FSfatFont 0 225 -270 false 95 false 0 
		baRoundDisplay001 
		setcolor 
		setmatrix_nlw 
	} if 
} def
%?partend


%?partdef spEngine001
%?fn	spEngine001
%?brief	Motor Statusanzeige (rot=aus, gelb=startet, gr�ft)
%?bbox	0 0 79 79
/spEngine001 {
	/ixMotorErr exch def	%?brief motor error %?use INP %?type BOOL %?dflt false
	/irRevolution exch def	%?brief revolution %?use INP %?type REAL %?dflt    0.00
	/ixMotorRunning exch def	%?brief motor running %?use INP %?type BOOL %?dflt false
	/LXmotorTurning false def	%?brief motor turning %?use LOC %?type BOOL %?dflt false
	/LXmotorRunning false def	%?brief motor running %?use LOC %?type BOOL %?dflt false
	matrix currentmatrix_nlw 
	currentcolor 
	0 0 translate 
	0 rotate 
	1 1 scale 
	true 
	irRevolution 10 
	spGT001 
	/LXmotorRunning exch store 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	0 0 translate 
	0 rotate 
	1 1 scale 
	LXmotorRunning ixMotorRunning not 
	FUN_AND_2 
	/LXmotorTurning exch store 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	0 0 translate 
	0 rotate 
	1 1 scale 
	ixMotorErr LXmotorTurning false 
	ixMotorRunning (gsEngine001) 
	baSwitchSymbolColor001 
	setcolor 
	setmatrix_nlw 
} def
%?partend


%?partdef spAntiCollision006
%?fn	spAntiCollision006
%?brief	Bereichsbegrenzung Kreissektor
%?bbox	0 0 319 319
/spAntiCollision006 {
	
%?manual_beg
	/ixBypassSwitch exch def	%?brief bypass switch %?use INP %?type BOOL %?dflt false
	/ixValueOkArea5 exch def	%?brief value ok area 5 %?use INP %?type BOOL %?dflt true
	/ixValueOkArea4 exch def	%?brief value ok area 4 %?use INP %?type BOOL %?dflt true
	/ixValueOkArea3 exch def	%?brief value ok area 3 %?use INP %?type BOOL %?dflt true
	/ixValueOkArea2 exch def	%?brief value ok area 2 %?use INP %?type BOOL %?dflt true
	/ixValueOkArea1 exch def	%?brief value ok area 1 %?use INP %?type BOOL %?dflt true
	/irMinRadius exch def	%?brief minimum radius [m] %?use INP %?type REAL %?dflt   10.00
	/irMaxRadius exch def	%?brief maximum radius [m] %?use INP %?type REAL %?dflt  100.00
	/irRadiusLeArea1 exch def	%?brief radius left area 1 [m] %?use INP %?type REAL %?dflt   60.00
	/irRadiusRiArea1 exch def	%?brief radius right area 1 [m] %?use INP %?type REAL %?dflt   60.00
	/irAngleLeArea1 exch def	%?brief angle left area 1 %?use INP %?type REAL %?dflt   30.00
	/irAngleRiArea1 exch def	%?brief angle right area 1 %?use INP %?type REAL %?dflt   40.00
	/irRadiusLeArea2 exch def	%?brief radius left area 2 [m] %?use INP %?type REAL %?dflt   40.00
	/irRadiusRiArea2 exch def	%?brief radius right area 2 [m] %?use INP %?type REAL %?dflt   20.00
	/irAngleLeArea2 exch def	%?brief angle left area 2 %?use INP %?type REAL %?dflt   60.00
	/irAngleRiArea2 exch def	%?brief angle right area 2 %?use INP %?type REAL %?dflt   80.00
	/irRadiusLeArea3 exch def	%?brief radius left area 3 [m] %?use INP %?type REAL %?dflt   50.00
	/irRadiusRiArea3 exch def	%?brief radius right area 3 [m] %?use INP %?type REAL %?dflt   60.00
	/irAngleLeArea3 exch def	%?brief angle left area 3 %?use INP %?type REAL %?dflt  100.00
	/irAngleRiArea3 exch def	%?brief angle right area 3 %?use INP %?type REAL %?dflt  120.00
	/irRadiusLeArea4 exch def	%?brief radius left area 4 [m] %?use INP %?type REAL %?dflt   90.00
	/irRadiusRiArea4 exch def	%?brief radius right area 4 [m] %?use INP %?type REAL %?dflt   80.00
	/irAngleLeArea4 exch def	%?brief angle left area 4 %?use INP %?type REAL %?dflt  140.00
	/irAngleRiArea4 exch def	%?brief angle right area 4 %?use INP %?type REAL %?dflt  200.00
	/irRadiusLeArea5 exch def	%?brief radius left area 5 [m] %?use INP %?type REAL %?dflt   20.00
	/irRadiusRiArea5 exch def	%?brief radius right area 5 [m] %?use INP %?type REAL %?dflt   30.00
	/irAngleLeArea5 exch def	%?brief angle left area 5 %?use INP %?type REAL %?dflt  210.00
	/irAngleRiArea5 exch def	%?brief angle right area 5 %?use INP %?type REAL %?dflt  270.00
	/irLoadRadius exch def	%?brief radius of load [m] %?use INP %?type REAL %?dflt   50.00
	/irLoadAngle exch def	%?brief angle of load %?use INP %?type REAL %?dflt  0.00
	/irMaxSector exch def	%?brief maximum number sectors %?use INP %?type REAL %?dflt    5.00
	/irSector exch def	%?brief sector %?use INP %?type REAL %?dflt    1.00
	/irRadius exch def	%?brief radius of circle %?use INP %?type REAL %?dflt  240.00

	irMaxRadius 0 eq {
		/LRmaxRadius 100 def
		} {
		/LRmaxRadius irMaxRadius def
 	} ifelse 	
 	/LRradiusFactor irRadius LRmaxRadius div def	
 	/LRradiusMin irMinRadius LRradiusFactor mul def	
 	/LRradiusLeArea1 irRadiusLeArea1 LRradiusFactor mul def	
 	/LRradiusLeArea2 irRadiusLeArea2 LRradiusFactor mul def	
 	/LRradiusLeArea3 irRadiusLeArea3 LRradiusFactor mul def	
 	/LRradiusLeArea4 irRadiusLeArea4 LRradiusFactor mul def	
 	/LRradiusLeArea5 irRadiusLeArea5 LRradiusFactor mul def	
 	/LRradiusRiArea1 irRadiusRiArea1 LRradiusFactor mul def	
 	/LRradiusRiArea2 irRadiusRiArea2 LRradiusFactor mul def	
 	/LRradiusRiArea3 irRadiusRiArea3 LRradiusFactor mul def	
 	/LRradiusRiArea4 irRadiusRiArea4 LRradiusFactor mul def	
 	/LRradiusRiArea5 irRadiusRiArea5 LRradiusFactor mul def	
 	/LRradiusMax irMaxRadius LRradiusFactor mul def	
 	/LRradiusLoad irLoadRadius LRradiusFactor mul def	
 	/LRangleLeArea1 0 irAngleLeArea1 sub def	
 	/LRangleRiArea1 0 irAngleRiArea1 sub def	
 	/LRangleLeArea2 0 irAngleLeArea2 sub def	
 	/LRangleRiArea2 0 irAngleRiArea2 sub def	
 	/LRangleLeArea3 0 irAngleLeArea3 sub def	
 	/LRangleRiArea3 0 irAngleRiArea3 sub def	
 	/LRangleLeArea4 0 irAngleLeArea4 sub def	
 	/LRangleRiArea4 0 irAngleRiArea4 sub def	
 	/LRangleLeArea5 0 irAngleLeArea5 sub def	
 	/LRangleRiArea5 0 irAngleRiArea5 sub def	
 	/LRangleLoad irLoadAngle 90 add def	

	% ۢerpr�welche Ausladung kleiner ist und Zuweisung auf den Radius
 	LRradiusLeArea1 LRradiusRiArea1 le {	
 		/LRradiusArea1 LRradiusLeArea1 def	
 		} { 
 		/LRradiusArea1 LRradiusRiArea1 def	
 	} ifelse 
 	LRradiusLeArea2 LRradiusRiArea2 le {	
 		/LRradiusArea2 LRradiusLeArea2 def	
 		} { 
 		/LRradiusArea2 LRradiusRiArea2 def	
 	} ifelse 
 	LRradiusLeArea3 LRradiusRiArea3 le {	
 		/LRradiusArea3 LRradiusLeArea3 def	
 		} { 
 		/LRradiusArea3 LRradiusRiArea3 def	
 	} ifelse 
 	LRradiusLeArea4 LRradiusRiArea4 le {	
 		/LRradiusArea4 LRradiusLeArea4 def	
 		} { 
 		/LRradiusArea4 LRradiusRiArea4 def	
 	} ifelse 
 	LRradiusLeArea5 LRradiusRiArea5 le {	
 		/LRradiusArea5 LRradiusLeArea5 def	
 		} { 
 		/LRradiusArea5 LRradiusRiArea5 def	
 	} ifelse 


	% Sector 1
	irMaxSector 1 ge {	
 		matrix currentmatrix_nlw 
 		LRangleLoad 
 		rotate 
		% Fl㢨e zeichnen wenn Winkel nicht identisch
 		irAngleLeArea1 irAngleRiArea1 ne { 
 			matrix currentmatrix_nlw
			currentcolor 
 			0 0 translate 
			LRangleLeArea1 
			rotate
 			ixValueOkArea1 true eq {
				Grey
			} {
				Red
			} ifelse
			LRangleRiArea1	LRangleLeArea1 sub abs 0.3 gt {
	 			newpath 
				LRradiusMax 0 moveto
				0 0 
				LRradiusMax 0 LRangleRiArea1 LRangleLeArea1 sub
				arcn 
				0 0 
				LRradiusArea1 LRangleRiArea1 LRangleLeArea1 sub 0
				arc 
 				eofill 
			} if
			setcolor 
			setmatrix_nlw
		} if
		setmatrix_nlw 

		matrix currentmatrix_nlw 
 		LRangleLoad 
 		rotate 
		irSector 1 eq {	
 			currentcolor 
 			ixBypassSwitch true eq {
 			Green 
 			} if
 			ixValueOkArea1 false eq {
				Red
 			} if
 			3 setlinewidth_nlw 

			% Umrandung zeichnen wenn Winkel nicht identisch
 			LRangleRiArea1	LRangleLeArea1 sub abs 0.3 gt { 
				matrix currentmatrix_nlw
				LRangleLeArea1 
				rotate
				LRradiusMax 0 moveto
				0 0 
 				LRradiusMax 0 LRangleRiArea1 LRangleLeArea1 sub
 				arcn 
 				0 0 
 				LRradiusArea1 LRangleRiArea1 LRangleLeArea1 sub 0
 				arc 
				LRradiusMax 0 lineto
 				stroke 
 				setmatrix_nlw 
			} if

			1 setlinewidth_nlw 
			setcolor 
			} { 
  			currentcolor 
			ixValueOkArea1 false eq {
 			Red 
 			} if
 			irAngleLeArea1 irAngleRiArea1 sub abs 0.3 gt { 
				matrix currentmatrix_nlw
 				LRangleLeArea1 
				rotate
				newpath
				LRradiusMax 0 moveto
				0 0 
				LRradiusMax 0 LRangleRiArea1 LRangleLeArea1 sub
				arcn 
				0 0 
				LRradiusArea1 LRangleRiArea1 LRangleLeArea1 sub 0
				arc 
				LRradiusMax 0 lineto
 				stroke 
 				setmatrix_nlw
 			} if	
		setcolor 
 		} ifelse 
 		setmatrix_nlw 
 	} if 

	% Sector 2
	irMaxSector 2 ge {	
 		matrix currentmatrix_nlw 
 		LRangleLoad 
 		rotate 
		% Fl㢨e zeichnen wenn Winkel nicht identisch
 		irAngleLeArea2 irAngleRiArea2 ne { 
 			matrix currentmatrix_nlw
			currentcolor 
 			0 0 translate 
			LRangleLeArea2 
			rotate
 			ixValueOkArea2 true eq {
				Grey
			} {
				Red
			} ifelse
			LRangleRiArea2	LRangleLeArea2 sub abs 0.3 gt {
 				newpath 
				LRradiusMax 0 moveto
				0 0 
				LRradiusMax 0 LRangleRiArea2 LRangleLeArea2 sub
				arcn 
				0 0 
				LRradiusArea2 LRangleRiArea2 LRangleLeArea2 sub 0
				arc 
	 			eofill 
			} if
			setcolor 
			setmatrix_nlw
		} if
		setmatrix_nlw 

 		matrix currentmatrix_nlw 
 		LRangleLoad 
 		rotate 
 		irSector 2 eq {	
 			currentcolor 
 			ixBypassSwitch true eq {
 			Green 
 			} if
 			ixValueOkArea2 false eq {
 			Red 
 			} if
 			3 setlinewidth_nlw 

			% Umrandung zeichnen wenn Winkel nicht identisch
 			irAngleLeArea2 irAngleRiArea2 sub abs 0.3 gt { 
				matrix currentmatrix_nlw
				LRangleLeArea2 
				rotate
				LRradiusMax 0 moveto
				0 0 
				LRradiusMax 0 LRangleRiArea2 LRangleLeArea2 sub
				arcn 
				0 0 
				LRradiusArea2 LRangleRiArea2 LRangleLeArea2 sub 0
				arc 
				LRradiusMax 0 lineto
 				stroke 
				setmatrix_nlw 
			} if
  
 			1 setlinewidth_nlw 
	  		setcolor 
			} { 
 			currentcolor 
			ixValueOkArea2 false eq {
 			Red 
 			} if
 			irAngleLeArea2 irAngleRiArea2 sub abs 0.3 gt { 
				matrix currentmatrix_nlw
				LRangleLeArea2 
				rotate
				newpath
				LRradiusMax 0 moveto
				0 0 
				LRradiusMax 0 LRangleRiArea2 LRangleLeArea2 sub
				arcn 
				0 0 
				LRradiusArea2 LRangleRiArea2 LRangleLeArea2 sub 0
				arc 
				LRradiusMax 0 lineto
 				stroke 
				setmatrix_nlw 
			} if
 	  		setcolor 
		} ifelse 
		setmatrix_nlw 
 	} if 

	% Sector 3
	irMaxSector 3 ge {	
 		matrix currentmatrix_nlw 
 		LRangleLoad 
 		rotate 
		% Fl㢨e zeichnen wenn Winkel nicht identisch
 		irAngleLeArea3 irAngleRiArea3 ne { 
 			matrix currentmatrix_nlw
			currentcolor 
 			0 0 translate 
			LRangleLeArea3 
			rotate
 			ixValueOkArea3 true eq {
				Grey
			} {
				Red
			} ifelse
			LRangleRiArea3	LRangleLeArea3 sub abs 0.3 gt {
	 			newpath 
				LRradiusMax 0 moveto
				0 0 
				LRradiusMax 0 LRangleRiArea3 LRangleLeArea3 sub
				arcn 
				0 0 
				LRradiusArea3 LRangleRiArea3 LRangleLeArea3 sub 0
				arc 
 				eofill 
			} if
			setcolor 
			setmatrix_nlw
		} if
		setmatrix_nlw 

 		matrix currentmatrix_nlw 
 		LRangleLoad 
 		rotate 
 		irSector 3 eq {	
 			currentcolor 
 			ixBypassSwitch true eq { 
 			Green 
 			} if
 			ixValueOkArea3 false eq {
 			Red 
 			} if
 			3 setlinewidth_nlw 

			% Umrandung zeichnen wenn Winkel nicht identisch
 			irAngleLeArea3 irAngleRiArea3 sub abs 0.3 gt { 
				matrix currentmatrix_nlw
				LRangleLeArea3 
				rotate
				LRradiusMax 0 moveto
				0 0 
				LRradiusMax 0 LRangleRiArea3 LRangleLeArea3 sub
				arcn 
				0 0 
				LRradiusArea3 LRangleRiArea3 LRangleLeArea3 sub 0
				arc 
				LRradiusMax 0 lineto
 				stroke 
		 		setmatrix_nlw 
 			} if
 
			1 setlinewidth_nlw 
  			setcolor
 			} { 
			currentcolor 
			ixValueOkArea3 false eq {
 			Red 
 			} if
			irAngleLeArea3 irAngleRiArea3 sub abs 0.3 gt { 
				matrix currentmatrix_nlw
				LRangleLeArea3 
				rotate
				newpath
				LRradiusMax 0 moveto
				0 0 
				LRradiusMax 0 LRangleRiArea3 LRangleLeArea3 sub
				arcn 
				0 0 
				LRradiusArea3 LRangleRiArea3 LRangleLeArea3 sub 0
				arc 
				LRradiusMax 0 lineto
 				stroke 
		 		setmatrix_nlw 
			} if
			setcolor
 		} ifelse 

 		setmatrix_nlw 
 	} if 

	% Sector 4
	irMaxSector 4 ge {	
 		matrix currentmatrix_nlw 
 		LRangleLoad 
 		rotate 
		% Fl㢨e zeichnen wenn Winkel nicht identisch
 		irAngleLeArea4 irAngleRiArea4 ne { 
 			matrix currentmatrix_nlw
			currentcolor 
 			0 0 translate 
			LRangleLeArea4 
			rotate
 			ixValueOkArea4 true eq {
				Grey
			} {
				Red
			} ifelse
			LRangleRiArea4	LRangleLeArea4 sub abs 0.3 gt {
	 			newpath 
				LRradiusMax 0 moveto
				0 0 
				LRradiusMax 0 LRangleRiArea4 LRangleLeArea4 sub
				arcn 
				0 0 
				LRradiusArea4 LRangleRiArea4 LRangleLeArea4 sub 0
				arc 
 				eofill 
			} if
			setcolor 
			setmatrix_nlw
		} if
		setmatrix_nlw 

 		matrix currentmatrix_nlw 
 		LRangleLoad 
 		rotate 
 		irSector 4 eq {	
 			currentcolor 
 			ixBypassSwitch true eq {
 			Green
 			} if
 			ixValueOkArea4 false eq {
 			Red 
 			} if
 			3 setlinewidth_nlw 

			% Umrandung zeichnen wenn Winkel nicht identisch
 			irAngleLeArea4 irAngleRiArea4 sub abs 0.3 gt { 
		 		matrix currentmatrix_nlw 
				LRangleLeArea4 
				rotate
				LRradiusMax 0 moveto
				0 0 
				LRradiusMax 0 LRangleRiArea4 LRangleLeArea4 sub
				arcn 
				0 0 
				LRradiusArea4 LRangleRiArea4 LRangleLeArea4 sub 0
				arc 
				LRradiusMax 0 lineto
 				stroke 
		 		setmatrix_nlw 
			} if

 			1 setlinewidth_nlw 
  			setcolor 
			} { 
			currentcolor 
 			ixValueOkArea4 false eq {
 			Red 
 			} if
			irAngleLeArea4 irAngleRiArea4 sub abs 0.3 gt { 
		 		matrix currentmatrix_nlw 
				LRangleLeArea4 
				rotate
				newpath
				LRradiusMax 0 moveto
				0 0 
				LRradiusMax 0 LRangleRiArea4 LRangleLeArea4 sub
				arcn 
				0 0 
				LRradiusArea4 LRangleRiArea4 LRangleLeArea4 sub 0
				arc 
				LRradiusMax 0 lineto
 				stroke 
		 		setmatrix_nlw 
 			} if
			setcolor 
 		} ifelse 
 		setmatrix_nlw 
 	} if 

	% Sector 5
	irMaxSector 5 ge {	
 		matrix currentmatrix_nlw 
 		LRangleLoad 
 		rotate 
		% Fl⢨e zeichnen wenn Winkel nicht identisch
 		irAngleLeArea5 irAngleRiArea5 ne { 
 			matrix currentmatrix_nlw
			currentcolor 
 			0 0 translate 
			LRangleLeArea5 
			rotate
 			ixValueOkArea5 true eq {
				Grey
			} {
				Red
			} ifelse
			LRangleRiArea5	LRangleLeArea5 sub abs 0.3 gt {
				newpath 
				LRradiusMax 0 moveto
				0 0 
				LRradiusMax 0 LRangleRiArea5 LRangleLeArea5 sub
				arcn 
				0 0 
				LRradiusArea5 LRangleRiArea5 LRangleLeArea5 sub 0
				arc 
 				eofill 
			} if
			setcolor 
			setmatrix_nlw
		} if
		setmatrix_nlw 

 		matrix currentmatrix_nlw 
 		LRangleLoad 
 		rotate 
 		irSector 5 eq {	
 			currentcolor 
 			ixBypassSwitch true eq { 
 			Green 
 			} if 
 			ixValueOkArea5 false eq {
 			Red 
 			} if
 			3 setlinewidth_nlw 
	
			% Umrandung zeichnen wenn Winkel nicht identisch
 			irAngleLeArea5 irAngleRiArea5 sub abs 0.3 gt { 
				matrix currentmatrix_nlw 
				LRangleLeArea5 
				rotate
				LRradiusMax 0 moveto
				0 0 
				LRradiusMax 0 LRangleRiArea5 LRangleLeArea5 sub
				arcn 
				0 0 
				LRradiusArea5 LRangleRiArea5 LRangleLeArea5 sub 0
				arc 
				LRradiusMax 0 lineto
 				stroke 
		 		setmatrix_nlw 
			} if 
 
			1 setlinewidth_nlw 
	 		setcolor 
 			} { 
			currentcolor
			ixValueOkArea5 false eq {
 			Red 
 			} if
 			irAngleLeArea5 irAngleRiArea5 sub abs 0.3 gt {
				matrix currentmatrix_nlw 
				LRangleLeArea5 
				rotate
				LRradiusMax 0 moveto
				0 0 
				LRradiusMax 0 LRangleRiArea5 LRangleLeArea5 sub
				arcn 
				0 0 
				LRradiusArea5 LRangleRiArea5 LRangleLeArea5 sub 0
				arc 
				LRradiusMax 0 lineto
 				stroke 
		 		setmatrix_nlw 
			} if
	 		setcolor 
 		} ifelse 
 		setmatrix_nlw 
 	} if 

	% minimum und maximum Kreis
	1 setlinewidth_nlw 
 	LRradiusMax 0 moveto 
 	0 0 
 	LRradiusMax 0 360 arc 
 	LRradiusMin 0 moveto 
 	0 0 
 	LRradiusMin 0 360 arc 
 	stroke 
 	1 setlinewidth_nlw 

	% Kran und Anzeigewerte
 	matrix currentmatrix_nlw 
 	90 rotate 
 	currentcolor
 	Green
 	3 setlinewidth_nlw 
 	LRradiusMin 2 div 0 LRradiusMin 4 div sub moveto 
 	LRradiusLoad 0 LRradiusMin 6 div sub lineto 
 	LRradiusLoad LRradiusMin 6 div lineto 
 	LRradiusMin 2 div LRradiusMin 4 div lineto 
 	LRradiusMin 2 div LRradiusMin 2 div lineto
 	0 LRradiusMin 2 div sub LRradiusMin 2 div lineto
 	0 LRradiusMin 2 div sub 0 LRradiusMin 2 div sub lineto
 	LRradiusMin 2 div 0 LRradiusMin 2 div sub lineto
 	LRradiusMin 2 div 0 LRradiusMin 4 div sub lineto
 	stroke
 	1 setlinewidth_nlw
 	setcolor 
	setmatrix_nlw

 
		%?manual_end 
	
} def
%?partend


%?partdef spDrive004
%?fn	spDrive004
%?brief	drive system
%?bbox	0 0 159 319
/spDrive004 {
	/ixMotorNotOk1 exch def	%?brief motor 1 not ok %?use INP %?type BOOL %?dflt false
	/ixMotorOk1 exch def	%?brief motor 1 ok %?use INP %?type BOOL %?dflt false
	/ixMainSwitchM1 exch def	%?brief main switch motor 1 %?use INP %?type BOOL %?dflt false
	/ixStartM1 exch def	%?brief start motor 1 %?use INP %?type BOOL %?dflt false
	/irNumberM1 exch def	%?brief number motor 1 %?use INP %?type REAL %?dflt    0.00
	matrix currentmatrix_nlw 
	currentcolor 
	30 270 translate 
	0 rotate 
	1 1 scale 
	(M) 
	FSstdFont 1 
	baText001 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	62 270 translate 
	0 rotate 
	1 1 scale 
	irNumberM1 3 () false false 
	FSstdFont 1 
	baValue002 
	setcolor 
	setmatrix_nlw 
	%?term_beg
	
	ixStartM1 false eq 
	ixMotorOk1 false eq 
	ixMotorNotOk1 false eq and and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		40 220 translate 
		0 rotate 
		1 1 scale 
		ssMotor001 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	ixStartM1 true eq 
	ixMotorOk1 true eq 
	ixMotorNotOk1 false eq and and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 40 220 translate 
		0 rotate 
		1 1 scale 
		ssMotor001 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	ixStartM1 true eq 
	ixMotorOk1 false eq 
	ixMotorNotOk1 false eq and and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		Yellow 40 220 translate 
		0 rotate 
		1 1 scale 
		ssMotor001 
		setcolor 
		setmatrix_nlw 
	} if 
	ixMotorNotOk1 true eq {	
		ixMotorNotOk1 true eq {	
			true setflash 
		} if 
		matrix currentmatrix_nlw 
		currentcolor 
		Red 40 220 translate 
		0 rotate 
		1 1 scale 
		ssMotor001 
		setcolor 
		setmatrix_nlw 
		false setflash 
	} if 
	matrix currentmatrix_nlw 
	currentcolor 
	30 200 translate 
	0 rotate 
	1 1 scale 
	(K) 
	FSstdFont 1 
	baText001 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	62 200 translate 
	0 rotate 
	1 1 scale 
	irNumberM1 3 () false false 
	FSstdFont 1 
	baValue002 
	setcolor 
	setmatrix_nlw 
	ixStartM1 false eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		20 140 translate 
		0 rotate 
		1 1 scale 
		ssRelais001 
		setcolor 
		setmatrix_nlw 
	} if 
	ixStartM1 true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 20 140 translate 
		0 rotate 
		1 1 scale 
		ssRelais002 
		setcolor 
		setmatrix_nlw 
	} if 
	ixStartM1 false eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		80 200 translate 
		0 rotate 
		1 1 scale 
		1 0 42 0 0 
		baPageLine003 
		setcolor 
		setmatrix_nlw 
	} if 
	ixStartM1 true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 80 200 translate 
		0 rotate 
		1 1 scale 
		1 0 42 0 0 
		baPageLine003 
		setcolor 
		setmatrix_nlw 
	} if 
	matrix currentmatrix_nlw 
	currentcolor 
	30 110 translate 
	0 rotate 
	1 1 scale 
	(Q) 
	FSstdFont 1 
	baText001 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	62 110 translate 
	0 rotate 
	1 1 scale 
	irNumberM1 3 () false false 
	FSstdFont 1 
	baValue002 
	setcolor 
	setmatrix_nlw 
	ixMainSwitchM1 false eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		Red 20 40 translate 
		0 rotate 
		1 1 scale 
		ssRelais005 
		setcolor 
		setmatrix_nlw 
	} if 
	ixMainSwitchM1 true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 20 40 translate 
		0 rotate 
		1 1 scale 
		ssRelais006 
		setcolor 
		setmatrix_nlw 
	} if 
	ixMainSwitchM1 false eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		80 110 translate 
		0 rotate 
		1 1 scale 
		1 0 50 0 0 
		baPageLine003 
		setcolor 
		setmatrix_nlw 
	} if 
	ixMainSwitchM1 true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 80 110 translate 
		0 rotate 
		1 1 scale 
		1 0 50 0 0 
		baPageLine003 
		setcolor 
		setmatrix_nlw 
	} if 
} def
%?partend


%?partdef spBrake001
%?fn	spBrake001
%?brief	winch brake test
%?bbox	0 0 79 79
/spBrake001 {
	matrix currentmatrix_nlw 
	currentcolor 
	0 0 translate 
	0 rotate 
	1 1 scale 
	ssBrake001 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	20 20 translate 
	0 rotate 
	0.50 0.50 scale 
	ssWinch001 
	setcolor 
	setmatrix_nlw 
} def
%?partend


%?partdef spAOPS_MOPS001
%?fn	spAOPS_MOPS001
%?brief	aops part
%?bbox	0 0 79 79
/spAOPS_MOPS001 {
	/isStingShown exch def	%?brief string shown %?use INP %?type STRI %?dflt 
	/ixMotorType exch def	%?brief motor type (0=e-motor; 1=diesel) %?use INP %?type BOOL %?dflt false
	/ixMotorRpmOk exch def	%?brief motor rpm ok %?use INP %?type BOOL %?dflt false
	/ixActivated exch def	%?brief activated %?use INP %?type BOOL %?dflt false
	/ixReady exch def	%?brief ready %?use INP %?type BOOL %?dflt false
	/ixSectorOk exch def	%?brief sector ok %?use INP %?type BOOL %?dflt false
	/ixLocked exch def	%?brief locked %?use INP %?type BOOL %?dflt false
	%?term_beg
	
	ixActivated false eq 
	ixLocked false eq and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		40 56 translate 
		0 rotate 
		0.75 0.75 scale 
		isStingShown FSfatFont 0 
		baText001 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	ixActivated false eq 
	ixLocked true eq and 
	%?term_end
	{	
		%?term_beg
		
		ixActivated false eq 
		ixLocked true eq and 
		%?term_end
		{	
			true setflash 
		} if 
		matrix currentmatrix_nlw 
		currentcolor 
		Red 40 56 translate 
		0 rotate 
		0.75 0.75 scale 
		isStingShown FSfatFont 0 
		baText001 
		setcolor 
		setmatrix_nlw 
		false setflash 
	} if 
	%?term_beg
	
	ixActivated false eq 
	ixLocked true eq and 
	%?term_end
	{	
		%?term_beg
		
		ixActivated false eq 
		ixLocked true eq and 
		%?term_end
		{	
			true setflash 
		} if 
		matrix currentmatrix_nlw 
		currentcolor 
		Red 20 8 translate 
		0 rotate 
		0.50 0.50 scale 
		ssLock001 
		setcolor 
		setmatrix_nlw 
		false setflash 
	} if 
	%?term_beg
	
	ixMotorRpmOk true eq 
	ixReady true eq 
	ixLocked false eq 
	ixActivated false eq 
	ixSectorOk true eq and and and and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 20 8 translate 
		0 rotate 
		0.50 0.50 scale 
		gsGeneral002 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	ixMotorRpmOk true eq 
	ixSectorOk false eq 
	ixLocked false eq 
	ixActivated false eq and and and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		Yellow 2 8 translate 
		0 rotate 
		0.50 0.50 scale 
		ssLock001 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	ixMotorRpmOk false eq 
	ixLocked false eq 
	ixActivated false eq and and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		Yellow 2 8 translate 
		0 rotate 
		0.50 0.50 scale 
		ssLock001 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	ixMotorRpmOk true eq 
	ixSectorOk false eq 
	ixLocked false eq 
	ixActivated false eq and and and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		Yellow 38 8 translate 
		0 rotate 
		0.50 0.50 scale 
		gsLimit016 
		setcolor 
		setmatrix_nlw 
	} if 
	ixActivated true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 40 40 translate 
		0 rotate 
		1 1 scale 
		isStingShown FSfatFont 0 
		baText001 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	ixMotorType false eq 
	ixMotorRpmOk false eq 
	ixLocked false eq 
	ixActivated false eq and and and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		Yellow 38 8 translate 
		0 rotate 
		0.50 0.50 scale 
		gsEmotor001 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	ixMotorType true eq 
	ixMotorRpmOk false eq 
	ixLocked false eq 
	ixActivated false eq and and and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		Yellow 38 8 translate 
		0 rotate 
		0.50 0.50 scale 
		gsEngine001 
		setcolor 
		setmatrix_nlw 
	} if 
} def
%?partend


%?partdef spTuggWinch001
%?fn	spTuggWinch001
%?brief	tugger winch part
%?bbox	0 0 239 559
/spTuggWinch001 {
	/ixMooringOff exch def	%?brief mooring off %?use INP %?type BOOL %?dflt false
	/ixMooringActiv exch def	%?brief mooring activ %?use INP %?type BOOL %?dflt false
	/ixWinchEnabled exch def	%?brief winch enabled %?use INP %?type BOOL %?dflt false
	/irPressure exch def	%?brief pressure [bar] %?use INP %?type REAL %?dflt    0.00
	/irPumpSignal exch def	%?brief pump signal [ %?use INP %?type REAL %?dflt    0.00
	/irTension exch def	%?brief tension [ %?use INP %?type REAL %?dflt    0.00
	/isNumber exch def	%?brief number %?use INP %?type STRI %?dflt 
	matrix currentmatrix_nlw 
	currentcolor 
	0 0 translate 
	0 rotate 
	1 1 scale 
	irPressure 4 () false 
	spHydraulic002 
	setcolor 
	setmatrix_nlw 
	%?term_beg
	
	irPumpSignal 0 gt 
	irTension 0 gt 
	ixMooringActiv false eq 
	ixMooringOff true eq or and and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 30 265 translate 
		0 rotate 
		1 1 scale 
		gsGeneral001 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	irPumpSignal 0 lt 
	irTension 0 gt 
	ixMooringActiv false eq 
	ixMooringOff true eq or and and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 110 505 translate 
		180 rotate 
		1 1 scale 
		gsGeneral001 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	ixWinchEnabled true eq 
	ixMooringActiv true eq 
	ixMooringOff false eq and and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 30 360 translate 
		0 rotate 
		1 1 scale 
		ssWinch001 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	ixWinchEnabled true eq 
	ixMooringActiv true eq 
	ixMooringOff false eq and and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 70 360 translate 
		0 rotate 
		1 1 scale 
		isNumber FSfatFont 0 
		baText001 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	ixWinchEnabled true eq 
	ixMooringActiv false eq 
	ixMooringOff true eq or and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		30 360 translate 
		0 rotate 
		1 1 scale 
		ssWinch001 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	ixWinchEnabled true eq 
	ixMooringActiv false eq 
	ixMooringOff true eq or and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		70 360 translate 
		0 rotate 
		1 1 scale 
		isNumber FSfatFont 0 
		baText001 
		setcolor 
		setmatrix_nlw 
	} if 
	ixWinchEnabled false eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		Red 30 360 translate 
		0 rotate 
		1 1 scale 
		ssWinch001 
		setcolor 
		setmatrix_nlw 
	} if 
	ixWinchEnabled false eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		Red 70 360 translate 
		0 rotate 
		1 1 scale 
		isNumber FSfatFont 0 
		baText001 
		setcolor 
		setmatrix_nlw 
	} if 
	matrix currentmatrix_nlw 
	currentcolor 
	130 250 translate 
	0 rotate 
	1 1 scale 
	irTension (%) 0 100 10 80 1 1 1 1 true 4 
	FSstdFont FSfatFont 0 25 220 0 false true 
	baBar008 
	setcolor 
	setmatrix_nlw 
} def
%?partend


%?partdef spTuggWinch002
%?fn	spTuggWinch002
%?brief	tugger winch part
%?bbox	0 0 79 159
/spTuggWinch002 {
	/ixMooringOff exch def	%?brief mooring off %?use INP %?type BOOL %?dflt false
	/ixMooringActiv exch def	%?brief mooring activ %?use INP %?type BOOL %?dflt false
	/ixWinchEnabled exch def	%?brief winch enabled %?use INP %?type BOOL %?dflt false
	/irPressure exch def	%?brief pressure [bar] %?use INP %?type REAL %?dflt    0.00
	/irPumpSignal exch def	%?brief pump signal [ %?use INP %?type REAL %?dflt    0.00
	/irTension exch def	%?brief tension [ %?use INP %?type REAL %?dflt    0.00
	/isNumber exch def	%?brief number %?use INP %?type STRI %?dflt 
	%?term_beg
	
	irPumpSignal 0 gt 
	irTension 0 gt 
	ixMooringActiv false eq 
	ixMooringOff true eq or and and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		Green -10 0 translate 
		0 rotate 
		1 1 scale 
		gsGeneral001 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	irPumpSignal 0 lt 
	irTension 0 gt 
	ixMooringActiv false eq 
	ixMooringOff true eq or and and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 70 80 translate 
		180 rotate 
		1 1 scale 
		gsGeneral001 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	ixWinchEnabled true eq 
	ixMooringActiv true eq 
	ixMooringOff false eq and and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		Green -10 50 translate 
		0 rotate 
		1 1 scale 
		ssWinch001 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	ixWinchEnabled true eq 
	ixMooringActiv true eq 
	ixMooringOff false eq and and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 30 120 translate 
		0 rotate 
		0.75 0.75 scale 
		isNumber 7 0 
		baText001 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	ixWinchEnabled true eq 
	ixMooringActiv false eq 
	ixMooringOff true eq or and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		-10 50 translate 
		0 rotate 
		1 1 scale 
		ssWinch001 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	ixWinchEnabled true eq 
	ixMooringOff true eq 
	ixMooringActiv false eq or and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		30 120 translate 
		0 rotate 
		0.75 0.75 scale 
		isNumber 7 0 
		baText001 
		setcolor 
		setmatrix_nlw 
	} if 
	ixWinchEnabled false eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		Red -10 50 translate 
		0 rotate 
		1 1 scale 
		ssWinch001 
		setcolor 
		setmatrix_nlw 
	} if 
	ixWinchEnabled false eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		Red 30 120 translate 
		0 rotate 
		0.75 0.75 scale 
		isNumber 7 0 
		baText001 
		setcolor 
		setmatrix_nlw 
	} if 
	matrix currentmatrix_nlw 
	currentcolor 
	55 0 translate 
	0 rotate 
	1 1 scale 
	irTension (???) 0 100 true false true false false false 90 100 20 5 4 7 120 false false 0 false 0 0 true 1 
	baBar006 
	setcolor 
	setmatrix_nlw 
} def
%?partend


%?partdef spSeaState1
%?fn	spSeaState1
%?brief	sea state
%?bbox	0 0 79 79
/spSeaState1 {
	/irSeaState exch def	%?brief actual sea state %?use INP %?type REAL %?dflt    0.00
	matrix currentmatrix_nlw 
	currentcolor 
	53 45 translate 
	0 rotate 
	1 1 scale 
	irSeaState 3 () false false 
	FSfatFont 1 
	baValue001 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	0 0 translate 
	0 rotate 
	1 1 scale 
	ssSeaState001 
	setcolor 
	setmatrix_nlw 
} def
%?partend


%?partdef spMotor001
%?fn	spMotor001
%?brief	diesel motor information
%?bbox	0 0 479 559
/spMotor001 {
	/ixEnaCharAirTemp exch def	%?brief enable charge air temperatur symbol %?use INP %?type BOOL %?dflt false
	/ixCharAirTempHiE exch def	%?brief charge air temperatur high error %?use INP %?type BOOL %?dflt false
	/ixCharAirTempHiW exch def	%?brief charge air temperatur high warning %?use INP %?type BOOL %?dflt false
	/ixWaterTempHiE exch def	%?brief water temperatur high error %?use INP %?type BOOL %?dflt false
	/ixWaterTempHiW exch def	%?brief water temperatur high warning %?use INP %?type BOOL %?dflt false
	/ixLubOilPressE exch def	%?brief lub oil pressure low error %?use INP %?type BOOL %?dflt false
	/ixLubOilPressW exch def	%?brief lub oil pressure low warning %?use INP %?type BOOL %?dflt false
	/ixEngSpeedHiE exch def	%?brief engine speed high error %?use INP %?type BOOL %?dflt false
	/ixEngSpeedHiW exch def	%?brief engine speed high warnng %?use INP %?type BOOL %?dflt false
	/ixWaterTempLow exch def	%?brief water temperatur low %?use INP %?type BOOL %?dflt false
	/ixBattVoltageLow exch def	%?brief battery voltage low %?use INP %?type BOOL %?dflt false
	/ixBattChargeErr exch def	%?brief battery charging error %?use INP %?type BOOL %?dflt false
	/irChargeAirTemp exch def	%?brief charge air temperatur [°C] %?use INP %?type REAL %?dflt    0.00
	/irChargeAirPress exch def	%?brief charge air pressure [bar] %?use INP %?type REAL %?dflt    0.00
	/irCoolWaterTemp exch def	%?brief cool water temperatur [°C] %?use INP %?type REAL %?dflt    0.00
	/irLubOilPressure exch def	%?brief lub oil pressure [bar] %?use INP %?type REAL %?dflt    0.00
	/irBatteryVoltage exch def	%?brief battery voltage [V] %?use INP %?type REAL %?dflt    0.00
	/irEngineRev exch def	%?brief engine revolution [rpm] %?use INP %?type REAL %?dflt    0.00
	/LXbatteryError false def	%?brief battery error %?use LOC %?type BOOL %?dflt false
	/LRlubOilPressure 0 def	%?brief lub oil pressure [psi] %?use LOC %?type REAL %?dflt    0.00
	/LRcoolWaterTemp 0 def	%?brief cool water temperatur [°F] %?use LOC %?type REAL %?dflt    0.00
	/LRchargeAirPress 0 def	%?brief charge air pressure [psi] %?use LOC %?type REAL %?dflt    0.00
	/LRchargeAirTemp 0 def	%?brief charge air temperatur [°F] %?use LOC %?type REAL %?dflt    0.00
	matrix currentmatrix_nlw 
	currentcolor 
	270 205 translate 
	0 rotate 
	1 1 scale 
	ixBattChargeErr ixBattVoltageLow 
	FUN_OR_2 
	/LXbatteryError exch store 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	270 60 translate 
	0 rotate 
	1 1 scale 
	irChargeAirTemp 
	calc_F 
	/LRchargeAirTemp exch store 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	270 420 translate 
	0 rotate 
	1 1 scale 
	irCoolWaterTemp 
	calc_F 
	/LRcoolWaterTemp exch store 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	70 50 translate 
	0 rotate 
	1 1 scale 
	irChargeAirPress 
	calc_psi 
	/LRchargeAirPress exch store 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	70 230 translate 
	0 rotate 
	1 1 scale 
	irLubOilPressure 
	calc_psi 
	/LRlubOilPressure exch store 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	80 380 translate 
	0 rotate 
	0.75 0.75 scale 
	ixEngSpeedHiE ixEngSpeedHiW false false (gsEngine001) 
	baSwitchSymbolColor004 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	280 380 translate 
	0 rotate 
	0.75 0.75 scale 
	ixWaterTempHiE ixWaterTempHiW ixWaterTempLow false (ssEngine008) 
	baSwitchSymbolColor004 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	80 200 translate 
	0 rotate 
	0.75 0.75 scale 
	ixLubOilPressE ixLubOilPressW false false (ssEngine002) 
	baSwitchSymbolColor004 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	280 200 translate 
	0 rotate 
	0.75 0.75 scale 
	LXbatteryError false false false (gsEngine004) 
	baSwitchSymbolColor004 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	80 20 translate 
	0 rotate 
	0.75 0.75 scale 
	false false false false (gsEngine008) 
	baSwitchSymbolColor004 
	setcolor 
	setmatrix_nlw 
	ixEnaCharAirTemp true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		280 20 translate 
		0 rotate 
		0.75 0.75 scale 
		ixCharAirTempHiE ixCharAirTempHiW false false (gsEngine005) 
		baSwitchSymbolColor004 
		setcolor 
		setmatrix_nlw 
	} if 
	matrix currentmatrix_nlw 
	currentcolor 
	110 450 translate 
	0 rotate 
	1 1 scale 
	irEngineRev false (rpm) 0 2500 0 2200 1 3 4 1 true 5 
	FSstdFont FSfatFont 0 225 -270 false 90 false 0 
	baRoundDisplay001 
	setcolor 
	setmatrix_nlw 
	MXchangeUnit false eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		110 270 translate 
		0 rotate 
		1 1 scale 
		irLubOilPressure false (bar) 0 6 1 2 3 4 1 1 true 6 
		FSstdFont FSfatFont 0 225 -270 false 90 false 0 
		baRoundDisplay001 
		setcolor 
		setmatrix_nlw 
	} if 
	MXchangeUnit true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		110 270 translate 
		0 rotate 
		1 1 scale 
		LRlubOilPressure false (psi) 0 90 15 30 3 4 1 1 true 6 
		FSstdFont FSfatFont 0 225 -270 false 90 false 10 
		baRoundDisplay001 
		setcolor 
		setmatrix_nlw 
	} if 
	MXchangeUnit false eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		110 90 translate 
		0 rotate 
		1 1 scale 
		irChargeAirPress false (bar) 0 4 1 4 1 3 4 1 true 4 
		FSstdFont FSfatFont 0 225 -270 false 90 false 0 
		baRoundDisplay001 
		setcolor 
		setmatrix_nlw 
	} if 
	MXchangeUnit true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		110 90 translate 
		0 rotate 
		1 1 scale 
		LRchargeAirPress false (psi) 0 60 15 60 1 3 4 1 true 4 
		FSstdFont FSfatFont 0 225 -270 false 90 false 0 
		baRoundDisplay001 
		setcolor 
		setmatrix_nlw 
	} if 
	MXchangeUnit false eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		310 450 translate 
		0 rotate 
		1 1 scale 
		irCoolWaterTemp false (°C) 20 120 75 100 1 2 4 1 true 4 
		FSstdFont FSfatFont 0 225 -270 false 90 false 0 
		baRoundDisplay001 
		setcolor 
		setmatrix_nlw 
	} if 
	MXchangeUnit true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		310 450 translate 
		0 rotate 
		1 1 scale 
		LRcoolWaterTemp false (°F) 50 250 167 210 1 2 4 1 true 5 
		FSstdFont FSfatFont 0 225 -270 false 90 false 0 
		baRoundDisplay001 
		setcolor 
		setmatrix_nlw 
	} if 
	matrix currentmatrix_nlw 
	currentcolor 
	310 270 translate 
	0 rotate 
	1 1 scale 
	irBatteryVoltage false (V) 5 30 10 14 3 4 1 1 true 5 
	FSstdFont FSfatFont 0 225 -270 false 90 false 0 
	baRoundDisplay001 
	setcolor 
	setmatrix_nlw 
	%?term_beg
	
	MXchangeUnit false eq 
	ixEnaCharAirTemp true eq and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		310 90 translate 
		0 rotate 
		1 1 scale 
		irChargeAirTemp false (°C) 0 100 70 100 3 1 4 1 true 4 
		FSstdFont FSfatFont 0 225 -270 false 90 false 0 
		baRoundDisplay001 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	MXchangeUnit true eq 
	ixEnaCharAirTemp true eq and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		310 90 translate 
		0 rotate 
		1 1 scale 
		LRchargeAirTemp false (°F) 35 210 160 210 3 1 4 1 true 5 
		FSstdFont FSfatFont 0 225 -270 false 90 false 0 
		baRoundDisplay001 
		setcolor 
		setmatrix_nlw 
	} if 
} def
%?partend




%?partdef spHook001
%?fn	spHook001
%?brief	auxiliary hoist winch 1 or 2
%?bbox	0 0 79 79
/spHook001 {
	/ixAhOperW2 exch def	%?brief auxiliary operation winch 2 %?use INP %?type BOOL %?dflt false
	/ixAhOperW1 exch def	%?brief auxiliary operation winch 1 %?use INP %?type BOOL %?dflt false
	matrix currentmatrix_nlw 
	currentcolor 
	-10 0 translate 
	0 rotate 
	1 1 scale 
	gsHook001 
	setcolor 
	setmatrix_nlw 
	ixAhOperW1 true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		60 40 translate 
		0 rotate 
		1 1 scale 
		(1) 8 0 
		baText001 
		setcolor 
		setmatrix_nlw 
	} if 
	ixAhOperW2 true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		60 40 translate 
		0 rotate 
		1 1 scale 
		(2) 8 0 
		baText001 
		setcolor 
		setmatrix_nlw 
	} if 
} def
%?partend

%?partdef spCT001
%?fn	spCT001
%?brief	ct part
%?bbox	0 0 79 79
/spCT001 {
	/isStingShown exch def	%?brief string shown %?use INP %?type STRI %?dflt CT
	/ixActivated exch def	%?brief activated %?use INP %?type BOOL %?dflt false
	/ixLocked exch def	%?brief locked %?use INP %?type BOOL %?dflt false
	ixLocked true eq {	
		ixLocked true eq {	
			true setflash 
		} if 
		matrix currentmatrix_nlw 
		currentcolor 
		Red 42 56 translate 
		0 rotate 
		0.87 0.87 scale 
		isStingShown FSfatFont 0 
		baText001 
		setcolor 
		setmatrix_nlw 
		false setflash 
	} if 
	ixLocked true eq {	
		ixLocked true eq {	
			true setflash 
		} if 
		matrix currentmatrix_nlw 
		currentcolor 
		Red 20 8 translate 
		0 rotate 
		0.50 0.50 scale 
		ssLock001 
		setcolor 
		setmatrix_nlw 
		false setflash 
	} if 
	ixActivated true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 42 40 translate 
		0 rotate 
		1 1 scale 
		isStingShown FSfatFont 0 
		baText001 
		setcolor 
		setmatrix_nlw 
	} if 
} def
%?partend


%?partdef spTankSuction001
%?fn	spTankSuction001
%?brief	tank suction
%?bbox	0 0 79 79
/spTankSuction001 {
	/ixSuctionClosed exch def	%?brief suction closed %?use INP %?type BOOL %?dflt false
	/ixSuctionOpen exch def	%?brief suction open %?use INP %?type BOOL %?dflt false
	/ixFfsActiv exch def	%?brief ffs activ %?use INP %?type BOOL %?dflt false
	matrix currentmatrix_nlw 
	currentcolor 
	0 0 translate 
	0 rotate 
	1 1 scale 
	ssTankSuction001 
	setcolor 
	setmatrix_nlw 
	%?term_beg
	
	ixSuctionOpen true eq 
	ixSuctionClosed false eq and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 0 0 translate 
		0 rotate 
		1 1 scale 
		ssTankSuction002 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	ixSuctionOpen false eq 
	ixSuctionClosed true eq and 
	ixSuctionOpen true eq 
	ixSuctionClosed true eq and or 
	%?term_end
	{	
		%?term_beg
		
		ixSuctionOpen true eq 
		ixSuctionClosed true eq and 
		%?term_end
		{	
			true setflash 
		} if 
		matrix currentmatrix_nlw 
		currentcolor 
		Red 0 0 translate 
		0 rotate 
		1 1 scale 
		ssTankSuction003 
		setcolor 
		setmatrix_nlw 
		false setflash 
	} if 
	%?term_beg
	
	ixSuctionOpen false eq 
	ixSuctionClosed false eq and 
	%?term_end
	{	
		ixFfsActiv false eq {	
			true setflash 
		} if 
		matrix currentmatrix_nlw 
		currentcolor 
		Yellow 0 0 translate 
		0 rotate 
		1 1 scale 
		ssTankSuction004 
		setcolor 
		setmatrix_nlw 
		false setflash 
	} if 
} def
%?partend

%?partdef spCT002
%?fn	spCT002
%?brief	ct part
%?bbox	0 0 79 79
/spCT002 {
	/ixPersonLift exch def	%?brief person lift %?use INP %?type BOOL %?dflt false
	/isStingShown exch def	%?brief string shown %?use INP %?type STRI %?dflt CT
	/ixActivated exch def	%?brief activated %?use INP %?type BOOL %?dflt false
	/ixLocked exch def	%?brief locked %?use INP %?type BOOL %?dflt false
	ixPersonLift true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		Yellow 42 56 translate 
		0 rotate 
		0.87 0.87 scale 
		isStingShown FSfatFont 0 
		baText001 
		setcolor 
		setmatrix_nlw 
	} if 
	ixPersonLift true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		Yellow 5 8 translate 
		0 rotate 
		0.50 0.50 scale 
		ssLock001 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	ixLocked true eq 
	ixPersonLift false eq and 
	%?term_end
	{	
		%?term_beg
		
		ixLocked true eq 
		ixPersonLift false eq and 
		%?term_end
		{	
			true setflash 
		} if 
		matrix currentmatrix_nlw 
		currentcolor 
		Red 42 56 translate 
		0 rotate 
		0.87 0.87 scale 
		isStingShown FSfatFont 0 
		baText001 
		setcolor 
		setmatrix_nlw 
		false setflash 
	} if 
	%?term_beg
	
	ixLocked true eq 
	ixPersonLift false eq and 
	%?term_end
	{	
		%?term_beg
		
		ixLocked true eq 
		ixPersonLift false eq and 
		%?term_end
		{	
			true setflash 
		} if 
		matrix currentmatrix_nlw 
		currentcolor 
		Red 20 8 translate 
		0 rotate 
		0.50 0.50 scale 
		ssLock001 
		setcolor 
		setmatrix_nlw 
		false setflash 
	} if 
	%?term_beg
	
	ixActivated true eq 
	ixLocked false eq and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 42 40 translate 
		0 rotate 
		1 1 scale 
		isStingShown FSfatFont 0 
		baText001 
		setcolor 
		setmatrix_nlw 
	} if 
	ixPersonLift true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		Yellow 35 8 translate 
		0 rotate 
		0.50 0.50 scale 
		ssManTrans001 
		setcolor 
		setmatrix_nlw 
	} if 
} def
%?partend

%?partdef spAOPS_MOPS002
%?fn	spAOPS_MOPS002
%?brief	aops and mops part
%?bbox	0 0 79 79
/spAOPS_MOPS002 {
	/ixPersonLift exch def	%?brief person lift %?use INP %?type BOOL %?dflt false
	/isStingShown exch def	%?brief string shown %?use INP %?type STRI %?dflt 
	/ixMotorType exch def	%?brief motor type (0=e-motor; 1=diesel) %?use INP %?type BOOL %?dflt false
	/ixMotorRpmOk exch def	%?brief motor rpm ok %?use INP %?type BOOL %?dflt false
	/ixActivated exch def	%?brief activated %?use INP %?type BOOL %?dflt false
	/ixReady exch def	%?brief ready %?use INP %?type BOOL %?dflt false
	/ixSectorOk exch def	%?brief sector ok %?use INP %?type BOOL %?dflt false
	/ixLocked exch def	%?brief locked %?use INP %?type BOOL %?dflt false
	%?term_beg
	
	ixPersonLift true eq 
	ixActivated false eq 
	ixLocked false eq and or 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		40 56 translate 
		0 rotate 
		0.75 0.75 scale 
		isStingShown FSfatFont 0 
		baText001 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	ixActivated false eq 
	ixLocked true eq 
	ixPersonLift false eq and and 
	%?term_end
	{	
		%?term_beg
		
		ixActivated false eq 
		ixLocked true eq 
		ixPersonLift false eq and and 
		%?term_end
		{	
			true setflash 
		} if 
		matrix currentmatrix_nlw 
		currentcolor 
		Red 40 56 translate 
		0 rotate 
		0.75 0.75 scale 
		isStingShown FSfatFont 0 
		baText001 
		setcolor 
		setmatrix_nlw 
		false setflash 
	} if 
	%?term_beg
	
	ixActivated false eq 
	ixLocked true eq 
	ixPersonLift false eq and and 
	%?term_end
	{	
		%?term_beg
		
		ixActivated false eq 
		ixLocked true eq 
		ixPersonLift false eq and and 
		%?term_end
		{	
			true setflash 
		} if 
		matrix currentmatrix_nlw 
		currentcolor 
		Red 20 8 translate 
		0 rotate 
		0.50 0.50 scale 
		ssLock001 
		setcolor 
		setmatrix_nlw 
		false setflash 
	} if 
	%?term_beg
	
	ixMotorRpmOk true eq 
	ixReady true eq 
	ixLocked false eq 
	ixActivated false eq 
	ixSectorOk true eq and and and and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 20 8 translate 
		0 rotate 
		0.50 0.50 scale 
		gsGeneral002 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	ixPersonLift true eq 
	ixMotorRpmOk true eq 
	ixSectorOk false eq 
	ixLocked false eq 
	ixActivated false eq and and and or 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		Yellow 2 8 translate 
		0 rotate 
		0.50 0.50 scale 
		ssLock001 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	ixPersonLift true eq 
	ixMotorRpmOk false eq 
	ixLocked false eq 
	ixActivated false eq and and or 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		Yellow 2 8 translate 
		0 rotate 
		0.50 0.50 scale 
		ssLock001 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	ixPersonLift false eq 
	ixMotorRpmOk true eq 
	ixSectorOk false eq 
	ixLocked false eq 
	ixActivated false eq and and and and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		Yellow 38 8 translate 
		0 rotate 
		0.50 0.50 scale 
		gsLimit016 
		setcolor 
		setmatrix_nlw 
	} if 
	ixActivated true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 40 40 translate 
		0 rotate 
		1 1 scale 
		isStingShown FSfatFont 0 
		baText001 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	ixPersonLift false eq 
	ixMotorType false eq 
	ixMotorRpmOk false eq 
	ixLocked false eq 
	ixActivated false eq and and and and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		Yellow 38 8 translate 
		0 rotate 
		0.50 0.50 scale 
		gsEmotor001 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	ixPersonLift false eq 
	ixMotorType true eq 
	ixMotorRpmOk false eq 
	ixLocked false eq 
	ixActivated false eq and and and and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		Yellow 38 8 translate 
		0 rotate 
		0.50 0.50 scale 
		gsEngine001 
		setcolor 
		setmatrix_nlw 
	} if 
	ixPersonLift true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		Yellow 
		38 8 translate 
		0 rotate 
		0.50 0.50 scale 
		ssManTrans001 
		setcolor 
		setmatrix_nlw 
	} if 
} def
%?partend


%?partdef spDeepSea001
%?fn	spDeepSea001
%?brief	deep sea operation
%?bbox	0 0 79 79
/spDeepSea001 {
	1 setlinewidth_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	0 0 translate 
	0 rotate 
	1 1 scale 
	ssHook001 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	-2 0 translate 
	0 rotate 
	1 1 scale 
	ssSeaState001 
	setcolor 
	setmatrix_nlw 
} def
%?partend


%?partdef spBrake002
%?fn	spBrake002
%?brief	winch brake test
%?bbox	0 0 79 79
/spBrake002 {
	/isBrakeType exch def	%?brief brake type %?use INP %?type STRI %?dflt 
	/irSymbol exch def	%?brief 1=winch; 2=AH; 3=MH; 4=LG %?use INP %?type REAL %?dflt    0.00
	/ixActive exch def	%?brief brake active %?use INP %?type BOOL %?dflt false
	ixActive false eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 5 translate 
		0 rotate 
		1 1 scale 
		ssBrake001 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	irSymbol 1 eq 
	ixActive false eq and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		20 25 translate 
		0 rotate 
		0.50 0.50 scale 
		ssWinch001 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	irSymbol 2 eq 
	ixActive false eq and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		20 25 translate 
		0 rotate 
		0.50 0.50 scale 
		gsHook001 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	irSymbol 3 eq 
	ixActive false eq and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		20 25 translate 
		0 rotate 
		0.50 0.50 scale 
		ssHook001 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	irSymbol 4 eq 
	ixActive false eq and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		20 25 translate 
		0 rotate 
		0.50 0.50 scale 
		gsLimit012 
		setcolor 
		setmatrix_nlw 
	} if 
	ixActive false eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		40 15 translate 
		0 rotate 
		0.50 0.50 scale 
		isBrakeType FSfatFont 4 
		baText001 
		setcolor 
		setmatrix_nlw 
	} if 
	ixActive true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 0 5 translate 
		0 rotate 
		1 1 scale 
		ssBrake001 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	irSymbol 1 eq 
	ixActive true eq and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 20 25 translate 
		0 rotate 
		0.50 0.50 scale 
		ssWinch001 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	irSymbol 2 eq 
	ixActive true eq and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 20 25 translate 
		0 rotate 
		0.50 0.50 scale 
		gsHook001 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	irSymbol 3 eq 
	ixActive true eq and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 20 25 translate 
		0 rotate 
		0.50 0.50 scale 
		ssHook001 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	irSymbol 4 eq 
	ixActive true eq and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 20 25 translate 
		0 rotate 
		0.50 0.50 scale 
		gsLimit012 
		setcolor 
		setmatrix_nlw 
	} if 
	ixActive true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 40 15 translate 
		0 rotate 
		0.50 0.50 scale 
		isBrakeType FSfatFont 4 
		baText001 
		setcolor 
		setmatrix_nlw 
	} if 
} def
%?partend

%?partdef spCranePage002
%?fn	spCranePage002
%?brief	crane main page when sensor error values red flashing
%?bbox	0 0 959 559
/spCranePage002 {
	/ixEnaButton exch def	%?brief enable button %?use INP %?type BOOL %?dflt false
	/irLiftCondition exch def	%?brief wave height %?use INP %?type REAL %?dflt    0.00
	/irWaveHeight exch def	%?brief wave height %?use INP %?type REAL %?dflt    0.00
	/ixSgAngleError exch def	%?brief sg angle error %?use INP %?type BOOL %?dflt false
	/ixLgAngleError exch def	%?brief angle error %?use INP %?type BOOL %?dflt false
	/ixLoadError exch def	%?brief load error %?use INP %?type BOOL %?dflt false
	/idChangeUnit exch def	%?brief change unit %?use INP %?type DINT %?dflt 0
	/ixUtilizationErr exch def	%?brief utilization error %?use INP %?type BOOL %?dflt false
	/irMaxOutreach exch def	%?brief maximum outreach [m] %?use INP %?type REAL %?dflt    0.00
	/ixResetRope exch def	%?brief reset rope %?use INP %?type BOOL %?dflt false
	/ixResetLoad exch def	%?brief reset load %?use INP %?type BOOL %?dflt false
	/ixHgDown exch def	%?brief hoisting gear down %?use INP %?type BOOL %?dflt false
	/ixHgUp exch def	%?brief hoisting gear up %?use INP %?type BOOL %?dflt false
	/ixLgDown exch def	%?brief luffing gear down %?use INP %?type BOOL %?dflt false
	/ixLgUp exch def	%?brief luffing gear up %?use INP %?type BOOL %?dflt false
	/ixWindSpeedHigh exch def	%?brief wind speed high %?use INP %?type BOOL %?dflt false
	/isRule exch def	%?brief rule %?use INP %?type STRI %?dflt 
	/irSeaState exch def	%?brief sea state %?use INP %?type REAL %?dflt    0.00
	/irWindSpeed exch def	%?brief wind speed [m/s] %?use INP %?type REAL %?dflt    0.00
	/irSpeedWinch2 exch def	%?brief speed winch 2 [m/min] %?use INP %?type REAL %?dflt    0.00
	/irSpeedWinch1 exch def	%?brief speed winch 1 [m/min] %?use INP %?type REAL %?dflt    0.00
	/irRopeWinch2 exch def	%?brief rope winch 2 [m] %?use INP %?type REAL %?dflt    0.00
	/irRopeWinch1 exch def	%?brief rope winch 1 [m] %?use INP %?type REAL %?dflt    0.00
	/irResetLoad exch def	%?brief reset load [t] %?use INP %?type REAL %?dflt    0.00
	/irTaraLoad exch def	%?brief tara load [t] %?use INP %?type REAL %?dflt    0.00
	/irMaxLoad exch def	%?brief maximum load [t] %?use INP %?type REAL %?dflt    0.00
	/irActualLoad exch def	%?brief actual load [t] %?use INP %?type REAL %?dflt    0.00
	/irUtilisation exch def	%?brief utilisation %?use INP %?type REAL %?dflt    0.00
	/irOutreach exch def	%?brief outreach [m] %?use INP %?type REAL %?dflt    0.00
	/irSgPosition exch def	%?brief slewing gear position [°] %?use INP %?type REAL %?dflt    0.00
	/irJibAngle exch def	%?brief jib angle [°] %?use INP %?type REAL %?dflt    0.00
	/irCraneType exch def	%?brief crane type (MTC=1; BOS=2; CBO=3; CBG=4; RL=5) %?use INP %?type REAL %?dflt    0.00
	/ixResetLoadAct exch def	%?brief reset load active %?use INP %?type BOOL %?dflt false
	/ixRopeSpeed exch def	%?brief enable rope speed %?use INP %?type BOOL %?dflt false
	/ixTwoWinch exch def	%?brief two winches selected %?use INP %?type BOOL %?dflt false
	/ixLmlWarning exch def	%?brief lml warning %?use INP %?type BOOL %?dflt false
	/ixLmlAlarm exch def	%?brief lml alarm %?use INP %?type BOOL %?dflt false
	/LXresetLoad false def	%?brief reset load %?use LOC %?type BOOL %?dflt false
	/LXsgPosSetZero false def	%?brief sg positon set to zero %?use LOC %?type BOOL %?dflt false
	/LDsgPosition 0 def	%?brief slewing ger position modified %?use LOC %?type REAL %?dflt    0.00
	/qxResetRope false def	%?brief reset rope %?use OUT %?type BOOL %?dflt false
	/qxResetLoad false def	%?brief reset load %?use OUT %?type BOOL %?dflt false
	/LXseaStateAct false def	%?brief sea state activ %?use LOC %?type BOOL %?dflt false
	ixEnaButton true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		390 120 translate 
		0 rotate 
		0.75 0.75 scale 
		baTouchButton001 {	
			/LXresetLoad true store 
		} if 
		setcolor 
		setmatrix_nlw 
	} if 
	ixEnaButton true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		390 50 translate 
		0 rotate 
		0.75 0.75 scale 
		baTouchButton001 {	
			/qxResetRope true store 
		} if 
		setcolor 
		setmatrix_nlw 
	} if 
	matrix currentmatrix_nlw 
	currentcolor 
	380 60 translate 
	0 rotate 
	1 1 scale 
	qxResetRope ixResetRope 
	FUN_OR_2 
	/qxResetRope exch store 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	380 130 translate 
	0 rotate 
	1 1 scale 
	LXresetLoad ixResetLoad 
	FUN_OR_2 
	/qxResetLoad exch store 
	setcolor 
	setmatrix_nlw 
	irCraneType 1 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		140 50 translate 
		0 rotate 
		2 2 scale_nlw 
		ssCrane001 
		setcolor 
		setmatrix_nlw 
	} if 
	irCraneType 2 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		140 50 translate 
		0 rotate 
		2 2 scale_nlw 
		ssCrane002 
		setcolor 
		setmatrix_nlw 
	} if 
	irCraneType 3 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		140 50 translate 
		0 rotate 
		2 2 scale_nlw 
		ssCrane003 
		setcolor 
		setmatrix_nlw 
	} if 
	irCraneType 4 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		140 50 translate 
		0 rotate 
		2 2 scale_nlw 
		ssCrane004 
		setcolor 
		setmatrix_nlw 
	} if 
	irCraneType 5 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		140 50 translate 
		0 rotate 
		2 2 scale_nlw 
		ssCrane005 
		setcolor 
		setmatrix_nlw 
	} if 
	irCraneType 6 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		140 50 translate 
		0 rotate 
		2 2 scale_nlw 
		ssCrane006 
		setcolor 
		setmatrix_nlw 
	} if 
	irCraneType 1 eq {	
		ixWindSpeedHigh true eq {	
			true setflash 
		} if 
		matrix currentmatrix_nlw 
		currentcolor 
		263 520 translate 
		0 rotate 
		1 1 scale 
		irWindSpeed 3 false 
		ixWindSpeedHigh FSfatFont 0.75 
		baValueSpeed002 
		setcolor 
		setmatrix_nlw 
		false setflash 
	} if 
	irCraneType 2 eq {	
		ixWindSpeedHigh true eq {	
			true setflash 
		} if 
		matrix currentmatrix_nlw 
		currentcolor 
		233 520 translate 
		0 rotate 
		1 1 scale 
		irWindSpeed 3 false 
		ixWindSpeedHigh FSfatFont 0.75 
		baValueSpeed002 
		setcolor 
		setmatrix_nlw 
		false setflash 
	} if 
	irCraneType 3 eq {	
		ixWindSpeedHigh true eq {	
			true setflash 
		} if 
		matrix currentmatrix_nlw 
		currentcolor 
		279 520 translate 
		0 rotate 
		1 1 scale 
		irWindSpeed 3 false 
		ixWindSpeedHigh FSfatFont 0.75 
		baValueSpeed002 
		setcolor 
		setmatrix_nlw 
		false setflash 
	} if 
	irCraneType 6 eq {	
		ixWindSpeedHigh true eq {	
			true setflash 
		} if 
		matrix currentmatrix_nlw 
		currentcolor 
		303 520 translate 
		0 rotate 
		1 1 scale 
		irWindSpeed 3 false 
		ixWindSpeedHigh FSfatFont 0.75 
		baValueSpeed002 
		setcolor 
		setmatrix_nlw 
		false setflash 
	} if 
	irCraneType 4 eq {	
		ixWindSpeedHigh true eq {	
			true setflash 
		} if 
		matrix currentmatrix_nlw 
		currentcolor 
		281 480 translate 
		0 rotate 
		1 1 scale 
		irWindSpeed 3 false 
		ixWindSpeedHigh FSfatFont 0.75 
		baValueSpeed002 
		setcolor 
		setmatrix_nlw 
		false setflash 
	} if 
	irCraneType 5 eq {	
		ixWindSpeedHigh true eq {	
			true setflash 
		} if 
		matrix currentmatrix_nlw 
		currentcolor 
		281 390 translate 
		0 rotate 
		1 1 scale 
		irWindSpeed 3 false 
		ixWindSpeedHigh FSfatFont 0.75 
		baValueSpeed002 
		setcolor 
		setmatrix_nlw 
		false setflash 
	} if 
	irCraneType 1 eq {	
		ixLgAngleError true eq {	
			true setflash 
		} if 
		matrix currentmatrix_nlw 
		currentcolor 
		330 290 translate 
		0 rotate 
		1 1 scale 
		irJibAngle 3 (°) false 
		ixLgAngleError FSfatFont 1 
		baValue001 
		setcolor 
		setmatrix_nlw 
		false setflash 
	} if 
	irCraneType 2 eq {	
		ixLgAngleError true eq {	
			true setflash 
		} if 
		matrix currentmatrix_nlw 
		currentcolor 
		325 290 translate 
		0 rotate 
		1 1 scale 
		irJibAngle 3 (°) false 
		ixLgAngleError FSfatFont 1 
		baValue001 
		setcolor 
		setmatrix_nlw 
		false setflash 
	} if 
	irCraneType 3 eq {	
		ixLgAngleError true eq {	
			true setflash 
		} if 
		matrix currentmatrix_nlw 
		currentcolor 
		340 290 translate 
		0 rotate 
		1 1 scale 
		irJibAngle 3 (°) false 
		ixLgAngleError FSfatFont 1 
		baValue001 
		setcolor 
		setmatrix_nlw 
		false setflash 
	} if 
	irCraneType 4 eq {	
		ixLgAngleError true eq {	
			true setflash 
		} if 
		matrix currentmatrix_nlw 
		currentcolor 
		355 290 translate 
		0 rotate 
		1 1 scale 
		irJibAngle 3 (°) false 
		ixLgAngleError FSfatFont 1 
		baValue001 
		setcolor 
		setmatrix_nlw 
		false setflash 
	} if 
	irCraneType 6 eq {	
		ixLgAngleError true eq {	
			true setflash 
		} if 
		matrix currentmatrix_nlw 
		currentcolor 
		335 290 translate 
		0 rotate 
		1 1 scale 
		irJibAngle 3 (°) false 
		ixLgAngleError FSfatFont 1 
		baValue001 
		setcolor 
		setmatrix_nlw 
		false setflash 
	} if 
	irCraneType 5 eq {	
		ixLgAngleError true eq {	
			true setflash 
		} if 
		matrix currentmatrix_nlw 
		currentcolor 
		410 290 translate 
		0 rotate 
		1 1 scale 
		irJibAngle 3 (°) false 
		ixLgAngleError FSfatFont 1 
		baValue001 
		setcolor 
		setmatrix_nlw 
		false setflash 
	} if 
	matrix currentmatrix_nlw 
	currentcolor 
	210 120 translate 
	0 rotate 
	1 1 scale 
	true 
	irSgPosition 359.49 
	spGT001 
	/LXsgPosSetZero exch store 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	210 130 translate 
	0 rotate 
	1 1 scale 
	LXsgPosSetZero irSgPosition 0 
	FUN_SEL 
	/LDsgPosition exch store 
	setcolor 
	setmatrix_nlw 
	ixSgAngleError true eq {	
		true setflash 
	} if 
	matrix currentmatrix_nlw 
	currentcolor 
	270 155 translate 
	0 rotate 
	1 1 scale 
	LDsgPosition 3 (°) false 
	ixSgAngleError FSfatFont 1 
	baValue001 
	setcolor 
	setmatrix_nlw 
	false setflash 
	matrix currentmatrix_nlw 
	currentcolor 
	390 50 translate 
	0 rotate 
	0.75 0.75 scale 
	ssWinch001 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	545 70 translate 
	0 rotate 
	1 1 scale 
	irRopeWinch1 3.10 false false 
	FSfatFont 0.75 
	baValueDist001 
	setcolor 
	setmatrix_nlw 
	ixTwoWinch true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		695 70 translate 
		0 rotate 
		1 1 scale 
		irRopeWinch2 3.10 false false 
		FSfatFont 0.75 
		baValueDist001 
		setcolor 
		setmatrix_nlw 
	} if 
	ixLgAngleError true eq {	
		true setflash 
	} if 
	matrix currentmatrix_nlw 
	currentcolor 
	595 255 translate 
	0 rotate 
	1 1 scale 
	irOutreach 3.10 false 
	ixLgAngleError FSbigFatFont 0.75 
	baValueDist001 
	setcolor 
	setmatrix_nlw 
	false setflash 
	ixLoadError true eq {	
		true setflash 
	} if 
	matrix currentmatrix_nlw 
	currentcolor 
	745 170 translate 
	0 rotate 
	2 2 scale 
	irTaraLoad 3 false 
	ixLoadError FSfatFont idChangeUnit 0.75 
	baValueLoad001 
	setcolor 
	setmatrix_nlw 
	false setflash 
	ixUtilizationErr true eq {	
		true setflash 
	} if 
	matrix currentmatrix_nlw 
	currentcolor 
	545 190 translate 
	0 rotate 
	1 1 scale 
	irMaxLoad 3.10 false 
	ixUtilizationErr FSfatFont idChangeUnit 0.75 
	baValueLoad001 
	setcolor 
	setmatrix_nlw 
	false setflash 
	ixUtilizationErr true eq {	
		true setflash 
	} if 
	matrix currentmatrix_nlw 
	currentcolor 
	415 190 translate 
	0 rotate 
	1 1 scale 
	(SWL) 
	FSfatFont 8 
	ixUtilizationErr false false false 
	baText002 
	setcolor 
	setmatrix_nlw 
	false setflash 
	ixLoadError true eq {	
		true setflash 
	} if 
	matrix currentmatrix_nlw 
	currentcolor 
	545 140 translate 
	0 rotate 
	1 1 scale 
	irActualLoad 3.10 false 
	ixLoadError FSfatFont idChangeUnit 0.75 
	baValueLoad001 
	setcolor 
	setmatrix_nlw 
	false setflash 
	matrix currentmatrix_nlw 
	currentcolor 
	379 120 translate 
	0 rotate 
	0.75 0.75 scale 
	ixLoadError false false 
	ixResetLoadAct (gsHook001) 
	baSwitchSymbolColor004 
	setcolor 
	setmatrix_nlw 
	ixRopeSpeed true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		545 20 translate 
		0 rotate 
		1 1 scale 
		irSpeedWinch1 3.10 false false 
		FSfatFont 0.75 
		baValueSpeed003 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	ixRopeSpeed true eq 
	ixTwoWinch true eq and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		695 20 translate 
		0 rotate 
		1 1 scale 
		irSpeedWinch2 3.10 false false 
		FSfatFont 0.75 
		baValueSpeed003 
		setcolor 
		setmatrix_nlw 
	} if 
	ixResetLoadAct true eq {	
		ixLoadError true eq {	
			true setflash 
		} if 
		matrix currentmatrix_nlw 
		currentcolor 
		Green 725 140 translate 
		0 rotate 
		1 1 scale 
		irResetLoad 3.10 false 
		ixLoadError FSfatFont idChangeUnit 0.75 
		baValueLoad001 
		setcolor 
		setmatrix_nlw 
		false setflash 
	} if 
	ixUtilizationErr true eq {	
		ixUtilizationErr true eq {	
			true setflash 
		} if 
		matrix currentmatrix_nlw 
		currentcolor 
		Red 40 195 translate 
		0 rotate 
		1 1 scale 
		irUtilisation () 0 150 true true true false 
		ixLmlWarning ixLmlAlarm 1000 1000 0 0 5 30 260 true false 0 true 0 
		FSstdFont true 1 
		baBar006 
		setcolor 
		setmatrix_nlw 
		false setflash 
	} if 
	ixUtilizationErr false eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		40 195 translate 
		0 rotate 
		1 1 scale 
		irUtilisation () 0 150 true true true false 
		ixLmlWarning ixLmlAlarm 1000 1000 0 0 5 30 260 true false 0 true 0 
		FSstdFont true 1 
		baBar006 
		setcolor 
		setmatrix_nlw 
	} if 
	ixUtilizationErr true eq {	
		true setflash 
	} if 
	matrix currentmatrix_nlw 
	currentcolor 
	90 530 translate 
	0 rotate 
	1 1 scale 
	isRule FSfatFont 0 
	ixUtilizationErr false false false 
	baText002 
	setcolor 
	setmatrix_nlw 
	false setflash 
	ixHgDown true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 310 40 translate 
		0 rotate 
		1 1 scale 
		gsGeneral001 
		setcolor 
		setmatrix_nlw 
	} if 
	ixHgUp true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 390 120 translate 
		180 rotate 
		1 1 scale 
		gsGeneral001 
		setcolor 
		setmatrix_nlw 
	} if 
	ixLgDown true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 675 320 translate 
		90 rotate 
		1 1 scale 
		gsGeneral001 
		setcolor 
		setmatrix_nlw 
	} if 
	ixLgUp true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 595 400 translate 
		270 rotate 
		1 1 scale 
		gsGeneral001 
		setcolor 
		setmatrix_nlw 
	} if 
	ixUtilizationErr true eq {	
		true setflash 
	} if 
	matrix currentmatrix_nlw 
	currentcolor 
	460 190 translate 
	0 rotate 
	0.75 0.75 scale 
	irSeaState 3 () false 
	ixUtilizationErr FSfatFont 1 
	baValue001 
	setcolor 
	setmatrix_nlw 
	false setflash 
	ixUtilizationErr true eq {	
		true setflash 
	} if 
	matrix currentmatrix_nlw 
	currentcolor 
	80 490 translate 
	0 rotate 
	0.75 0.75 scale 
	(%) 
	FSfatFont 0 
	ixUtilizationErr false false false 
	baText002 
	setcolor 
	setmatrix_nlw 
	false setflash 
	irCraneType 1 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		163 500 translate 
		0 rotate 
		0.75 0.75 scale 
		ixWindSpeedHigh false false false (ssWind001) 
		baSwitchSymbolColor004 
		setcolor 
		setmatrix_nlw 
	} if 
	irCraneType 2 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		133 500 translate 
		0 rotate 
		0.75 0.75 scale 
		ixWindSpeedHigh false false false (ssWind001) 
		baSwitchSymbolColor004 
		setcolor 
		setmatrix_nlw 
	} if 
	irCraneType 3 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		179 500 translate 
		0 rotate 
		0.75 0.75 scale 
		ixWindSpeedHigh false false false (ssWind001) 
		baSwitchSymbolColor004 
		setcolor 
		setmatrix_nlw 
	} if 
	irCraneType 6 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		203 500 translate 
		0 rotate 
		0.75 0.75 scale 
		ixWindSpeedHigh false false false (ssWind001) 
		baSwitchSymbolColor004 
		setcolor 
		setmatrix_nlw 
	} if 
	irCraneType 4 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		181 460 translate 
		0 rotate 
		0.75 0.75 scale 
		ixWindSpeedHigh false false false (ssWind001) 
		baSwitchSymbolColor004 
		setcolor 
		setmatrix_nlw 
	} if 
	irCraneType 5 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		181 370 translate 
		0 rotate 
		0.75 0.75 scale 
		ixWindSpeedHigh false false false (ssWind001) 
		baSwitchSymbolColor004 
		setcolor 
		setmatrix_nlw 
	} if 
	matrix currentmatrix_nlw 
	currentcolor 
	621 295 translate 
	0 rotate 
	0.75 0.75 scale 
	irMaxOutreach 3.10 false false 
	FSfatFont 0.75 
	baValueDist001 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	524 295 translate 
	0 rotate 
	0.60 0.60 scale 
	(max) 
	FSmsgBigFont 1 
	baText001 
	setcolor 
	setmatrix_nlw 
	ixLoadError true eq {	
		true setflash 
	} if 
	matrix currentmatrix_nlw 
	currentcolor 
	420 140 translate 
	0 rotate 
	0.60 0.60 scale 
	(act) 
	FSmsgBigFont 1 
	ixLoadError false false false 
	baText002 
	setcolor 
	setmatrix_nlw 
	false setflash 
	matrix currentmatrix_nlw 
	currentcolor 
	658 230 translate 
	0 rotate 
	1 1 scale 
	ixLgAngleError false false false (gsLimit019) 
	baSwitchSymbolColor004 
	setcolor 
	setmatrix_nlw 
	idChangeUnit 4 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		428 224 translate 
		0 rotate 
		0.60 0.60 scale 
		(lb*1000) 
		FSmsgBigFont 0 
		baText001 
		setcolor 
		setmatrix_nlw 
	} if 
	irLiftCondition 0 gt {	
		ixUtilizationErr true eq {	
			true setflash 
		} if 
		matrix currentmatrix_nlw 
		currentcolor 
		65 175 translate 
		0 rotate 
		0.75 0.75 scale 
		(SWH) 
		FSfatFont 8 
		ixUtilizationErr false false false 
		baText002 
		setcolor 
		setmatrix_nlw 
		false setflash 
	} if 
	irLiftCondition 0 gt {	
		ixUtilizationErr true eq {	
			true setflash 
		} if 
		matrix currentmatrix_nlw 
		currentcolor 
		115 175 translate 
		0 rotate 
		0.75 0.75 scale 
		irWaveHeight 3.10 (m) false 
		ixUtilizationErr FSfatFont 0.75 
		baValue001 
		setcolor 
		setmatrix_nlw 
		false setflash 
	} if 
	qxResetRope qxResetLoad 
} def
%?partend

%?partdef spPinCode001
%?fn	spPinCode001
%?brief	show entered digits with #
%?bbox	0 0 239 79
/spPinCode001 {
	/idPinCode exch def	%?brief pin code 1 %?use INP %?type DINT %?dflt 0
	idPinCode 0 eq {	
		idPinCode 0 eq {	
			true setflash 
		} if 
		matrix currentmatrix_nlw 
		currentcolor 
		223 30 translate 
		0 rotate 
		2 1 scale 
		(-) 
		FSbigFatFont 0 
		baText001 
		setcolor 
		setmatrix_nlw 
		false setflash 
	} if 
	idPinCode 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		210 40 translate 
		0 rotate 
		1 1 scale 
		(#) 
		FSbigFatFont 0 
		baText001 
		setcolor 
		setmatrix_nlw 
	} if 
	idPinCode 9 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		180 40 translate 
		0 rotate 
		1 1 scale 
		(#) 
		FSbigFatFont 0 
		baText001 
		setcolor 
		setmatrix_nlw 
	} if 
	idPinCode 99 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		150 40 translate 
		0 rotate 
		1 1 scale 
		(#) 
		FSbigFatFont 0 
		baText001 
		setcolor 
		setmatrix_nlw 
	} if 
	idPinCode 999 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		120 40 translate 
		0 rotate 
		1 1 scale 
		(#) 
		FSbigFatFont 0 
		baText001 
		setcolor 
		setmatrix_nlw 
	} if 
	idPinCode 9999 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		90 40 translate 
		0 rotate 
		1 1 scale 
		(#) 
		FSbigFatFont 0 
		baText001 
		setcolor 
		setmatrix_nlw 
	} if 
	idPinCode 99999 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		60 40 translate 
		0 rotate 
		1 1 scale 
		(#) 
		FSbigFatFont 0 
		baText001 
		setcolor 
		setmatrix_nlw 
	} if 
	idPinCode 999999 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		30 40 translate 
		0 rotate 
		1 1 scale 
		(#) 
		FSbigFatFont 0 
		baText001 
		setcolor 
		setmatrix_nlw 
	} if 
} def
%?partend


%?partdef spLiftCondition001
%?fn	spLiftCondition001
%?brief	lift condition
%?bbox	0 0 79 79
/spLiftCondition001 {
	/irLiftCondition exch def	%?brief lift condition number %?use INP %?type REAL %?dflt    0.00
	matrix currentmatrix_nlw 
	currentcolor 
	0 0 translate 
	0 rotate 
	1 1 scale 
	ssLiftCondition001 
	setcolor 
	setmatrix_nlw 
	%?term_beg
	
	irLiftCondition 8 gt 
	irLiftCondition 16 lt and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		ssLiftCondition002 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	irLiftCondition 0 gt 
	irLiftCondition 8 lt and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		ssLiftCondition003 
		setcolor 
		setmatrix_nlw 
	} if 
	irLiftCondition 16 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		ssLiftCondition011 
		setcolor 
		setmatrix_nlw 
	} if 
	irLiftCondition 8 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		ssLiftCondition012 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	irLiftCondition 4 eq 
	irLiftCondition 12 eq or 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		ssLiftCondition004 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	irLiftCondition 1 eq 
	irLiftCondition 9 eq or 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		ssLiftCondition005 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	irLiftCondition 2 eq 
	irLiftCondition 10 eq or 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		ssLiftCondition006 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	irLiftCondition 3 eq 
	irLiftCondition 11 eq or 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		ssLiftCondition007 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	irLiftCondition 5 eq 
	irLiftCondition 13 eq or 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		ssLiftCondition008 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	irLiftCondition 6 eq 
	irLiftCondition 14 eq or 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		ssLiftCondition009 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	irLiftCondition 7 eq 
	irLiftCondition 15 eq or 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		ssLiftCondition010 
		setcolor 
		setmatrix_nlw 
	} if 
} def
%?partend

%?partdef spHydraulic004
%?fn	spHydraulic004
%?brief	cylinder
%?bbox	0 0 79 319
/spHydraulic004 {
	/irJibAngle exch def	%?brief jib angle %?use INP %?type REAL %?dflt    0.00
	/LDcylStroke 0 def	%?brief cylinder stroke %?use LOC %?type REAL %?dflt    0.00
	/LDcylStroke irJibAngle 2 mul def	
	matrix currentmatrix_nlw 
	currentcolor 
	0 0 translate 
	0 rotate 
	1 1 scale 
	ssHydraulic005 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	0 
	LDcylStroke 
	translate 
	0 rotate 
	1 1 scale 
	ssHydraulic006 
	setcolor 
	setmatrix_nlw 
} def
%?partend

%?partdef spHydraulic005
%?fn	spHydraulic005
%?brief	way valve
%?bbox	0 0 79 159
/spHydraulic005 {
	/ixStraightPos exch def	%?brief straight position %?use INP %?type BOOL %?dflt false
	/ixCrossPos exch def	%?brief cross position %?use INP %?type BOOL %?dflt false
	1 setlinewidth_nlw 
	ixStraightPos not 
	ixCrossPos not and {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 20 translate 
		0 rotate 
		1 1 scale 
		ssHydraulic008 
		setcolor 
		setmatrix_nlw 
	} if 
	ixCrossPos true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 0 40 translate 
		0 rotate 
		1 1 scale 
		ssHydraulic008 
		setcolor 
		setmatrix_nlw 
	} if 
	ixStraightPos true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 0 0 translate 
		0 rotate 
		1 1 scale 
		ssHydraulic008 
		setcolor 
		setmatrix_nlw 
	} if 3 setlinewidth_nlw 
	10 150 55 -140 rectstroke 
	} def
%?partend




%?partdef spTravel001
%?fn	spTravel001
%?brief	wheels in air or on ground
%?bbox	0 0 79 79
/spTravel001 {
	/idOperationMode exch def	%?brief operation mode %?use INP %?type DINT %?dflt 0
	/idStrutStatus exch def	%?brief strut status %?use INP %?type DINT %?dflt 0
	/ixWheelNoPress exch def	%?brief wheel no pressure %?use INP %?type BOOL %?dflt false
	/LDcolorWheelUp 0 def	%?brief color wheel up %?use LOC %?type DINT %?dflt 0
	/LDcolorWheelDo 0 def	%?brief color wheel down %?use LOC %?type DINT %?dflt 0
	idOperationMode 2 le {	
		ixWheelNoPress true eq {	
			idStrutStatus 1 ne {	
				/LDcolorWheelUp 4 def	%?brief color wheel up %?use LOC %?type DINT %?dflt 0
				} { 
				/LDcolorWheelUp 1 def	%?brief color wheel up %?use LOC %?type DINT %?dflt 0
			} ifelse 
			} { 
			idStrutStatus 1 ne {	
				/LDcolorWheelDo 1 def	%?brief color wheel down %?use LOC %?type DINT %?dflt 0
				} { 
				/LDcolorWheelDo 3 def	%?brief color wheel down %?use LOC %?type DINT %?dflt 0
			} ifelse 
		} ifelse 
		} { 
		ixWheelNoPress true eq {	
			/LDcolorWheelUp 1 def	%?brief color wheel up %?use LOC %?type DINT %?dflt 0
			} { 
			idStrutStatus 1 ne {	
				/LDcolorWheelDo 4 def	%?brief color wheel down %?use LOC %?type DINT %?dflt 0
				} { 
				/LDcolorWheelDo 3 def	%?brief color wheel down %?use LOC %?type DINT %?dflt 0
			} ifelse 
		} ifelse 
	} ifelse 
	ixWheelNoPress true eq {	
		LDcolorWheelUp 4 eq {	
			true setflash 
		} if 
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		LDcolorWheelUp (ssTravel001) 
		baSwitchSymbolColor002 
		setcolor 
		setmatrix_nlw 
		false setflash 
	} if 
	ixWheelNoPress false eq {	
		LDcolorWheelDo 4 eq {	
			true setflash 
		} if 
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		LDcolorWheelDo (ssTravel002) 
		baSwitchSymbolColor002 
		setcolor 
		setmatrix_nlw 
		false setflash 
	} if 
} def
%?partend

%?partdef spTravel002
%?fn	spTravel002
%?brief	strut in aor or on ground
%?bbox	0 0 79 79
/spTravel002 {
	/idOperationMode exch def	%?brief operation mode %?use INP %?type DINT %?dflt 0
	/idStrutStatus exch def	%?brief strut status %?use INP %?type DINT %?dflt 0
	/ixWheelNoPress exch def	%?brief wheel no pressure %?use INP %?type BOOL %?dflt false
	/LDcolorStrutUp 0 def	%?brief color strut up %?use LOC %?type DINT %?dflt 0
	/LDcolorStrutDo 0 def	%?brief color strut down %?use LOC %?type DINT %?dflt 0
	idOperationMode 2 le {	
		idStrutStatus 0 eq {	
			ixWheelNoPress true eq {	
				/LDcolorStrutUp 4 def	%?brief color strut up %?use LOC %?type DINT %?dflt 0
				} { 
				/LDcolorStrutUp 3 def	%?brief color strut down %?use LOC %?type DINT %?dflt 0
			} ifelse 
		} if 
		idStrutStatus 1 eq {	
			ixWheelNoPress true eq {	
				/LDcolorStrutDo 1 def	%?brief color strut up %?use LOC %?type DINT %?dflt 0
				} { 
				/LDcolorStrutDo 3 def	%?brief color strut down %?use LOC %?type DINT %?dflt 0
			} ifelse 
		} if 
		idStrutStatus 2 eq {	
			ixWheelNoPress true eq {	
				/LDcolorStrutUp 4 def	%?brief color strut up %?use LOC %?type DINT %?dflt 0
				} { 
				/LDcolorStrutUp 1 def	%?brief color strut down %?use LOC %?type DINT %?dflt 0
			} ifelse 
		} if 
		} { 
		idStrutStatus 1 eq {	
			/LDcolorStrutDo 1 def	%?brief color strut up %?use LOC %?type DINT %?dflt 0
			} { 
			ixWheelNoPress true eq {	
				/LDcolorStrutUp 3 def	%?brief color wheel down %?use LOC %?type DINT %?dflt 0
				} { 
				/LDcolorStrutUp 4 def	%?brief color wheel down %?use LOC %?type DINT %?dflt 0
			} ifelse 
		} ifelse 
	} ifelse 
	idStrutStatus 1 ne {	
		LDcolorStrutUp 4 eq {	
			true setflash 
		} if 
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		LDcolorStrutUp (ssTravel003) 
		baSwitchSymbolColor002 
		setcolor 
		setmatrix_nlw 
		false setflash 
	} if 
	idStrutStatus 1 eq {	
		LDcolorStrutDo 4 eq {	
			true setflash 
		} if 
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		LDcolorStrutDo (ssTravel004) 
		baSwitchSymbolColor002 
		setcolor 
		setmatrix_nlw 
		false setflash 
	} if 
} def
%?partend

%?partdef spTravel003
%?fn	spTravel003
%?brief	wheel set position
%?bbox	-480 -160 479 159
/spTravel003 {
	/ixSgPosRear exch def	%?brief sg position rear %?use INP %?type BOOL %?dflt false
	/irWheel11Angle exch def	%?brief wheel 11 angle %?use INP %?type REAL %?dflt    0.00
	/irWheel11Deviation exch def	%?brief wheel 11 deviation %?use INP %?type REAL %?dflt    0.00
	/idWheel11Status exch def	%?brief wheel 11 status %?use INP %?type DINT %?dflt 0
	/irWheel12Angle exch def	%?brief wheel 12 angle %?use INP %?type REAL %?dflt    0.00
	/irWheel12Deviation exch def	%?brief wheel 12 deviation %?use INP %?type REAL %?dflt    0.00
	/idWheel12Status exch def	%?brief wheel 12 status %?use INP %?type DINT %?dflt 0
	/irWheel13Angle exch def	%?brief wheel 13 angle %?use INP %?type REAL %?dflt    0.00
	/irWheel13Deviation exch def	%?brief wheel 13 deviation %?use INP %?type REAL %?dflt    0.00
	/idWheel13Status exch def	%?brief wheel 13 status %?use INP %?type DINT %?dflt 0
	/irWheel14Angle exch def	%?brief wheel 14 angle %?use INP %?type REAL %?dflt    0.00
	/irWheel14Deviation exch def	%?brief wheel 14 deviation %?use INP %?type REAL %?dflt    0.00
	/idWheel14Status exch def	%?brief wheel 14 status %?use INP %?type DINT %?dflt 0
	/irWheel21Angle exch def	%?brief wheel 11 angle %?use INP %?type REAL %?dflt    0.00
	/irWheel21Deviation exch def	%?brief wheel 11 deviation %?use INP %?type REAL %?dflt    0.00
	/idWheel21Status exch def	%?brief wheel 11 status %?use INP %?type DINT %?dflt 0
	/irWheel22Angle exch def	%?brief wheel 12 angle %?use INP %?type REAL %?dflt    0.00
	/irWheel22Deviation exch def	%?brief wheel 12 deviation %?use INP %?type REAL %?dflt    0.00
	/idWheel22Status exch def	%?brief wheel 12 status %?use INP %?type DINT %?dflt 0
	/irWheel23Angle exch def	%?brief wheel 13 angle %?use INP %?type REAL %?dflt    0.00
	/irWheel23Deviation exch def	%?brief wheel 13 deviation %?use INP %?type REAL %?dflt    0.00
	/idWheel23Status exch def	%?brief wheel 13 status %?use INP %?type DINT %?dflt 0
	/irWheel24Angle exch def	%?brief wheel 14 angle %?use INP %?type REAL %?dflt    0.00
	/irWheel24Deviation exch def	%?brief wheel 14 deviation %?use INP %?type REAL %?dflt    0.00
	/idWheel24Status exch def	%?brief wheel 14 status %?use INP %?type DINT %?dflt 0
	/irWheel31Angle exch def	%?brief wheel 21 angle %?use INP %?type REAL %?dflt    0.00
	/irWheel31Deviation exch def	%?brief wheel 21 deviation %?use INP %?type REAL %?dflt    0.00
	/idWheel31Status exch def	%?brief wheel 21 status %?use INP %?type DINT %?dflt 0
	/irWheel32Angle exch def	%?brief wheel 32 angle %?use INP %?type REAL %?dflt    0.00
	/irWheel32Deviation exch def	%?brief wheel 32 deviation %?use INP %?type REAL %?dflt    0.00
	/idWheel32Status exch def	%?brief wheel 32 status %?use INP %?type DINT %?dflt 0
	/irWheel33Angle exch def	%?brief wheel 33 angle %?use INP %?type REAL %?dflt    0.00
	/irWheel33Deviation exch def	%?brief wheel 33 deviation %?use INP %?type REAL %?dflt    0.00
	/idWheel33Status exch def	%?brief wheel 33 status %?use INP %?type DINT %?dflt 0
	/irWheel34Angle exch def	%?brief wheel 34 angle %?use INP %?type REAL %?dflt    0.00
	/irWheel34Deviation exch def	%?brief wheel 34 deviation %?use INP %?type REAL %?dflt    0.00
	/idWheel34Status exch def	%?brief wheel 34 status %?use INP %?type DINT %?dflt 0
	/irWheel41Angle exch def	%?brief wheel 41 angle %?use INP %?type REAL %?dflt    0.00
	/irWheel41Deviation exch def	%?brief wheel 41 deviation %?use INP %?type REAL %?dflt    0.00
	/idWheel41Status exch def	%?brief wheel 41 status %?use INP %?type DINT %?dflt 0
	/irWheel42Angle exch def	%?brief wheel 42 angle %?use INP %?type REAL %?dflt    0.00
	/irWheel42Deviation exch def	%?brief wheel 42 deviation %?use INP %?type REAL %?dflt    0.00
	/idWheel42Status exch def	%?brief wheel 42 status %?use INP %?type DINT %?dflt 0
	/irWheel43Angle exch def	%?brief wheel 43 angle %?use INP %?type REAL %?dflt    0.00
	/irWheel43Deviation exch def	%?brief wheel 43 deviation %?use INP %?type REAL %?dflt    0.00
	/idWheel43Status exch def	%?brief wheel 43 status %?use INP %?type DINT %?dflt 0
	/irWheel44Angle exch def	%?brief wheel 44 angle %?use INP %?type REAL %?dflt    0.00
	/irWheel44Deviation exch def	%?brief wheel 44 deviation %?use INP %?type REAL %?dflt    0.00
	/idWheel44Status exch def	%?brief wheel 44 status %?use INP %?type DINT %?dflt 0
	/irWheel51Angle exch def	%?brief wheel 51 angle %?use INP %?type REAL %?dflt    0.00
	/irWheel51Deviation exch def	%?brief wheel 51 deviation %?use INP %?type REAL %?dflt    0.00
	/idWheel51Status exch def	%?brief wheel 51 status %?use INP %?type DINT %?dflt 0
	/irWheel52Angle exch def	%?brief wheel 52 angle %?use INP %?type REAL %?dflt    0.00
	/irWheel52Deviation exch def	%?brief wheel 52 deviation %?use INP %?type REAL %?dflt    0.00
	/idWheel52Status exch def	%?brief wheel 52 status %?use INP %?type DINT %?dflt 0
	/irWheel53Angle exch def	%?brief wheel 53 angle %?use INP %?type REAL %?dflt    0.00
	/irWheel53Deviation exch def	%?brief wheel 53 deviation %?use INP %?type REAL %?dflt    0.00
	/idWheel53Status exch def	%?brief wheel 53 status %?use INP %?type DINT %?dflt 0
	/irWheel54Angle exch def	%?brief wheel 54 angle %?use INP %?type REAL %?dflt    0.00
	/irWheel54Deviation exch def	%?brief wheel 54 deviation %?use INP %?type REAL %?dflt    0.00
	/idWheel54Status exch def	%?brief wheel 54 status %?use INP %?type DINT %?dflt 0
	/irWheel61Angle exch def	%?brief wheel 61 angle %?use INP %?type REAL %?dflt    0.00
	/irWheel61Deviation exch def	%?brief wheel 61 deviation %?use INP %?type REAL %?dflt    0.00
	/idWheel61Status exch def	%?brief wheel 61 status %?use INP %?type DINT %?dflt 0
	/irWheel62Angle exch def	%?brief wheel 62 angle %?use INP %?type REAL %?dflt    0.00
	/irWheel62Deviation exch def	%?brief wheel 62 deviation %?use INP %?type REAL %?dflt    0.00
	/idWheel62Status exch def	%?brief wheel 62 status %?use INP %?type DINT %?dflt 0
	/irWheel63Angle exch def	%?brief wheel 63 angle %?use INP %?type REAL %?dflt    0.00
	/irWheel63Deviation exch def	%?brief wheel 63 deviation %?use INP %?type REAL %?dflt    0.00
	/idWheel63Status exch def	%?brief wheel 63 status %?use INP %?type DINT %?dflt 0
	/irWheel64Angle exch def	%?brief wheel 64 angle %?use INP %?type REAL %?dflt    0.00
	/irWheel64Deviation exch def	%?brief wheel 64 deviation %?use INP %?type REAL %?dflt    0.00
	/idWheel64Status exch def	%?brief wheel 64 status %?use INP %?type DINT %?dflt 0
	/irWheel71Angle exch def	%?brief wheel 71 angle %?use INP %?type REAL %?dflt    0.00
	/irWheel71Deviation exch def	%?brief wheel 71 deviation %?use INP %?type REAL %?dflt    0.00
	/idWheel71Status exch def	%?brief wheel 71 status %?use INP %?type DINT %?dflt 0
	/irWheel72Angle exch def	%?brief wheel 72 angle %?use INP %?type REAL %?dflt    0.00
	/irWheel72Deviation exch def	%?brief wheel 72 deviation %?use INP %?type REAL %?dflt    0.00
	/idWheel72Status exch def	%?brief wheel 72 status %?use INP %?type DINT %?dflt 0
	/irWheel73Angle exch def	%?brief wheel 73 angle %?use INP %?type REAL %?dflt    0.00
	/irWheel73Deviation exch def	%?brief wheel 73 deviation %?use INP %?type REAL %?dflt    0.00
	/idWheel73Status exch def	%?brief wheel 73 status %?use INP %?type DINT %?dflt 0
	/irWheel74Angle exch def	%?brief wheel 74 angle %?use INP %?type REAL %?dflt    0.00
	/irWheel74Deviation exch def	%?brief wheel 74 deviation %?use INP %?type REAL %?dflt    0.00
	/idWheel74Status exch def	%?brief wheel 74 status %?use INP %?type DINT %?dflt 0
	/irWheel81Angle exch def	%?brief wheel 81 angle %?use INP %?type REAL %?dflt    0.00
	/irWheel81Deviation exch def	%?brief wheel 81 deviation %?use INP %?type REAL %?dflt    0.00
	/idWheel81Status exch def	%?brief wheel 81 status %?use INP %?type DINT %?dflt 0
	/irWheel82Angle exch def	%?brief wheel 82 angle %?use INP %?type REAL %?dflt    0.00
	/irWheel82Deviation exch def	%?brief wheel 82 deviation %?use INP %?type REAL %?dflt    0.00
	/idWheel82Status exch def	%?brief wheel 82 status %?use INP %?type DINT %?dflt 0
	/irWheel83Angle exch def	%?brief wheel 83 angle %?use INP %?type REAL %?dflt    0.00
	/irWheel83Deviation exch def	%?brief wheel 83 deviation %?use INP %?type REAL %?dflt    0.00
	/idWheel83Status exch def	%?brief wheel 83 status %?use INP %?type DINT %?dflt 0
	/irWheel84Angle exch def	%?brief wheel 84 angle %?use INP %?type REAL %?dflt    0.00
	/irWheel84Deviation exch def	%?brief wheel 84 deviation %?use INP %?type REAL %?dflt    0.00
	/idWheel84Status exch def	%?brief wheel 84 status %?use INP %?type DINT %?dflt 0
	/LXwheel11Error false def	%?brief wheel 11 error %?use LOC %?type BOOL %?dflt false
	/LXwheel12Error false def	%?brief wheel 12 error %?use LOC %?type BOOL %?dflt false
	/LXwheel13Error false def	%?brief wheel 13 error %?use LOC %?type BOOL %?dflt false
	/LXwheel14Error false def	%?brief wheel 14 error %?use LOC %?type BOOL %?dflt false
	/LXwheel21Error false def	%?brief wheel 21 error %?use LOC %?type BOOL %?dflt false
	/LXwheel22Error false def	%?brief wheel 22 error %?use LOC %?type BOOL %?dflt false
	/LXwheel23Error false def	%?brief wheel 23 error %?use LOC %?type BOOL %?dflt false
	/LXwheel24Error false def	%?brief wheel 24 error %?use LOC %?type BOOL %?dflt false
	/LXwheel31Error false def	%?brief wheel 31 error %?use LOC %?type BOOL %?dflt false
	/LXwheel32Error false def	%?brief wheel 32 error %?use LOC %?type BOOL %?dflt false
	/LXwheel33Error false def	%?brief wheel 33 error %?use LOC %?type BOOL %?dflt false
	/LXwheel34Error false def	%?brief wheel 34 error %?use LOC %?type BOOL %?dflt false
	/LXwheel41Error false def	%?brief wheel 41 error %?use LOC %?type BOOL %?dflt false
	/LXwheel42Error false def	%?brief wheel 42 error %?use LOC %?type BOOL %?dflt false
	/LXwheel43Error false def	%?brief wheel 43 error %?use LOC %?type BOOL %?dflt false
	/LXwheel44Error false def	%?brief wheel 44 error %?use LOC %?type BOOL %?dflt false
	/LXwheel51Error false def	%?brief wheel 51 error %?use LOC %?type BOOL %?dflt false
	/LXwheel52Error false def	%?brief wheel 52 error %?use LOC %?type BOOL %?dflt false
	/LXwheel53Error false def	%?brief wheel 53 error %?use LOC %?type BOOL %?dflt false
	/LXwheel54Error false def	%?brief wheel 54 error %?use LOC %?type BOOL %?dflt false
	/LXwheel61Error false def	%?brief wheel 61 error %?use LOC %?type BOOL %?dflt false
	/LXwheel62Error false def	%?brief wheel 62 error %?use LOC %?type BOOL %?dflt false
	/LXwheel63Error false def	%?brief wheel 63 error %?use LOC %?type BOOL %?dflt false
	/LXwheel64Error false def	%?brief wheel 64 error %?use LOC %?type BOOL %?dflt false
	/LXwheel71Error false def	%?brief wheel 71 error %?use LOC %?type BOOL %?dflt false
	/LXwheel72Error false def	%?brief wheel 72 error %?use LOC %?type BOOL %?dflt false
	/LXwheel73Error false def	%?brief wheel 73 error %?use LOC %?type BOOL %?dflt false
	/LXwheel74Error false def	%?brief wheel 74 error %?use LOC %?type BOOL %?dflt false
	/LXwheel81Error false def	%?brief wheel 81 error %?use LOC %?type BOOL %?dflt false
	/LXwheel82Error false def	%?brief wheel 82 error %?use LOC %?type BOOL %?dflt false
	/LXwheel83Error false def	%?brief wheel 83 error %?use LOC %?type BOOL %?dflt false
	/LXwheel84Error false def	%?brief wheel 84 error %?use LOC %?type BOOL %?dflt false
	/LDwheel11Angle 0 def	%?brief wheel 11 angle corrected %?use LOC %?type REAL %?dflt    0.00
	/LDwheel12Angle 0 def	%?brief wheel 12 angle corrected %?use LOC %?type REAL %?dflt    0.00
	/LDwheel13Angle 0 def	%?brief wheel 13 angle corrected %?use LOC %?type REAL %?dflt    0.00
	/LDwheel14Angle 0 def	%?brief wheel 14 angle corrected %?use LOC %?type REAL %?dflt    0.00
	/LDwheel21Angle 0 def	%?brief wheel 21 angle corrected %?use LOC %?type REAL %?dflt    0.00
	/LDwheel22Angle 0 def	%?brief wheel 22 angle corrected %?use LOC %?type REAL %?dflt    0.00
	/LDwheel23Angle 0 def	%?brief wheel 23 angle corrected %?use LOC %?type REAL %?dflt    0.00
	/LDwheel24Angle 0 def	%?brief wheel 24 angle corrected %?use LOC %?type REAL %?dflt    0.00
	/LDwheel31Angle 0 def	%?brief wheel 31 angle corrected %?use LOC %?type REAL %?dflt    0.00
	/LDwheel32Angle 0 def	%?brief wheel 32 angle corrected %?use LOC %?type REAL %?dflt    0.00
	/LDwheel33Angle 0 def	%?brief wheel 33 angle corrected %?use LOC %?type REAL %?dflt    0.00
	/LDwheel34Angle 0 def	%?brief wheel 34 angle corrected %?use LOC %?type REAL %?dflt    0.00
	/LDwheel41Angle 0 def	%?brief wheel 41 angle corrected %?use LOC %?type REAL %?dflt    0.00
	/LDwheel42Angle 0 def	%?brief wheel 42 angle corrected %?use LOC %?type REAL %?dflt    0.00
	/LDwheel43Angle 0 def	%?brief wheel 43 angle corrected %?use LOC %?type REAL %?dflt    0.00
	/LDwheel44Angle 0 def	%?brief wheel 44 angle corrected %?use LOC %?type REAL %?dflt    0.00
	/LDwheel51Angle 0 def	%?brief wheel 51 angle corrected %?use LOC %?type REAL %?dflt    0.00
	/LDwheel52Angle 0 def	%?brief wheel 52 angle corrected %?use LOC %?type REAL %?dflt    0.00
	/LDwheel53Angle 0 def	%?brief wheel 53 angle corrected %?use LOC %?type REAL %?dflt    0.00
	/LDwheel54Angle 0 def	%?brief wheel 54 angle corrected %?use LOC %?type REAL %?dflt    0.00
	/LDwheel61Angle 0 def	%?brief wheel 61 angle corrected %?use LOC %?type REAL %?dflt    0.00
	/LDwheel62Angle 0 def	%?brief wheel 62 angle corrected %?use LOC %?type REAL %?dflt    0.00
	/LDwheel63Angle 0 def	%?brief wheel 63 angle corrected %?use LOC %?type REAL %?dflt    0.00
	/LDwheel64Angle 0 def	%?brief wheel 64 angle corrected %?use LOC %?type REAL %?dflt    0.00
	/LDwheel71Angle 0 def	%?brief wheel 71 angle corrected %?use LOC %?type REAL %?dflt    0.00
	/LDwheel72Angle 0 def	%?brief wheel 72 angle corrected %?use LOC %?type REAL %?dflt    0.00
	/LDwheel73Angle 0 def	%?brief wheel 73 angle corrected %?use LOC %?type REAL %?dflt    0.00
	/LDwheel74Angle 0 def	%?brief wheel 74 angle corrected %?use LOC %?type REAL %?dflt    0.00
	/LDwheel81Angle 0 def	%?brief wheel 81 angle corrected %?use LOC %?type REAL %?dflt    0.00
	/LDwheel82Angle 0 def	%?brief wheel 82 angle corrected %?use LOC %?type REAL %?dflt    0.00
	/LDwheel83Angle 0 def	%?brief wheel 83 angle corrected %?use LOC %?type REAL %?dflt    0.00
	/LDwheel84Angle 0 def	%?brief wheel 84 angle corrected %?use LOC %?type REAL %?dflt    0.00
	/LDsgPosRear 0 def	%?brief sg position rear %?use LOC %?type REAL %?dflt    0.00
	idWheel11Status 2 eq {	
		/LXwheel11Error true def	%?brief wheel 11 error %?use LOC %?type BOOL %?dflt false
		} { 
		/LXwheel11Error false def	%?brief wheel 11 error %?use LOC %?type BOOL %?dflt false
	} ifelse 
	idWheel12Status 2 eq {	
		/LXwheel12Error true def	%?brief wheel 12 error %?use LOC %?type BOOL %?dflt false
		} { 
		/LXwheel12Error false def	%?brief wheel 12 error %?use LOC %?type BOOL %?dflt false
	} ifelse 
	idWheel13Status 2 eq {	
		/LXwheel13Error true def	%?brief wheel 13 error %?use LOC %?type BOOL %?dflt false
		} { 
		/LXwheel13Error false def	%?brief wheel 13 error %?use LOC %?type BOOL %?dflt false
	} ifelse 
	idWheel14Status 2 eq {	
		/LXwheel14Error true def	%?brief wheel 14 error %?use LOC %?type BOOL %?dflt false
		} { 
		/LXwheel14Error false def	%?brief wheel 14 error %?use LOC %?type BOOL %?dflt false
	} ifelse 
	idWheel21Status 2 eq {	
		/LXwheel21Error true def	%?brief wheel 21 error %?use LOC %?type BOOL %?dflt false
		} { 
		/LXwheel21Error false def	%?brief wheel 21 error %?use LOC %?type BOOL %?dflt false
	} ifelse 
	idWheel22Status 2 eq {	
		/LXwheel22Error true def	%?brief wheel 22 error %?use LOC %?type BOOL %?dflt false
		} { 
		/LXwheel22Error false def	%?brief wheel 22 error %?use LOC %?type BOOL %?dflt false
	} ifelse 
	idWheel23Status 2 eq {	
		/LXwheel23Error true def	%?brief wheel 23 error %?use LOC %?type BOOL %?dflt false
		} { 
		/LXwheel23Error false def	%?brief wheel 23 error %?use LOC %?type BOOL %?dflt false
	} ifelse 
	idWheel24Status 2 eq {	
		/LXwheel24Error true def	%?brief wheel 24 error %?use LOC %?type BOOL %?dflt false
		} { 
		/LXwheel24Error false def	%?brief wheel 24 error %?use LOC %?type BOOL %?dflt false
	} ifelse 
	idWheel31Status 2 eq {	
		/LXwheel31Error true def	%?brief wheel 31 error %?use LOC %?type BOOL %?dflt false
		} { 
		/LXwheel31Error false def	%?brief wheel 31 error %?use LOC %?type BOOL %?dflt false
	} ifelse 
	idWheel32Status 2 eq {	
		/LXwheel32Error true def	%?brief wheel 32 error %?use LOC %?type BOOL %?dflt false
		} { 
		/LXwheel32Error false def	%?brief wheel 32 error %?use LOC %?type BOOL %?dflt false
	} ifelse 
	idWheel33Status 2 eq {	
		/LXwheel33Error true def	%?brief wheel 33 error %?use LOC %?type BOOL %?dflt false
		} { 
		/LXwheel33Error false def	%?brief wheel 33 error %?use LOC %?type BOOL %?dflt false
	} ifelse 
	idWheel34Status 2 eq {	
		/LXwheel34Error true def	%?brief wheel 34 error %?use LOC %?type BOOL %?dflt false
		} { 
		/LXwheel34Error false def	%?brief wheel 34 error %?use LOC %?type BOOL %?dflt false
	} ifelse 
	idWheel41Status 2 eq {	
		/LXwheel41Error true def	%?brief wheel 41 error %?use LOC %?type BOOL %?dflt false
		} { 
		/LXwheel41Error false def	%?brief wheel 41 error %?use LOC %?type BOOL %?dflt false
	} ifelse 
	idWheel42Status 2 eq {	
		/LXwheel42Error true def	%?brief wheel 42 error %?use LOC %?type BOOL %?dflt false
		} { 
		/LXwheel42Error false def	%?brief wheel 42 error %?use LOC %?type BOOL %?dflt false
	} ifelse 
	idWheel43Status 2 eq {	
		/LXwheel43Error true def	%?brief wheel 43 error %?use LOC %?type BOOL %?dflt false
		} { 
		/LXwheel43Error false def	%?brief wheel 43 error %?use LOC %?type BOOL %?dflt false
	} ifelse 
	idWheel44Status 2 eq {	
		/LXwheel44Error true def	%?brief wheel 44 error %?use LOC %?type BOOL %?dflt false
		} { 
		/LXwheel44Error false def	%?brief wheel 44 error %?use LOC %?type BOOL %?dflt false
	} ifelse 
	idWheel51Status 2 eq {	
		/LXwheel51Error true def	%?brief wheel 51 error %?use LOC %?type BOOL %?dflt false
		} { 
		/LXwheel51Error false def	%?brief wheel 51 error %?use LOC %?type BOOL %?dflt false
	} ifelse 
	idWheel52Status 2 eq {	
		/LXwheel52Error true def	%?brief wheel 52 error %?use LOC %?type BOOL %?dflt false
		} { 
		/LXwheel52Error false def	%?brief wheel 52 error %?use LOC %?type BOOL %?dflt false
	} ifelse 
	idWheel53Status 2 eq {	
		/LXwheel53Error true def	%?brief wheel 53 error %?use LOC %?type BOOL %?dflt false
		} { 
		/LXwheel53Error false def	%?brief wheel 53 error %?use LOC %?type BOOL %?dflt false
	} ifelse 
	idWheel54Status 2 eq {	
		/LXwheel54Error true def	%?brief wheel 54 error %?use LOC %?type BOOL %?dflt false
		} { 
		/LXwheel54Error false def	%?brief wheel 54 error %?use LOC %?type BOOL %?dflt false
	} ifelse 
	idWheel61Status 2 eq {	
		/LXwheel61Error true def	%?brief wheel 61 error %?use LOC %?type BOOL %?dflt false
		} { 
		/LXwheel61Error false def	%?brief wheel 61 error %?use LOC %?type BOOL %?dflt false
	} ifelse 
	idWheel62Status 2 eq {	
		/LXwheel62Error true def	%?brief wheel 62 error %?use LOC %?type BOOL %?dflt false
		} { 
		/LXwheel62Error false def	%?brief wheel 62 error %?use LOC %?type BOOL %?dflt false
	} ifelse 
	idWheel63Status 2 eq {	
		/LXwheel63Error true def	%?brief wheel 63 error %?use LOC %?type BOOL %?dflt false
		} { 
		/LXwheel63Error false def	%?brief wheel 63 error %?use LOC %?type BOOL %?dflt false
	} ifelse 
	idWheel64Status 2 eq {	
		/LXwheel64Error true def	%?brief wheel 64 error %?use LOC %?type BOOL %?dflt false
		} { 
		/LXwheel64Error false def	%?brief wheel 64 error %?use LOC %?type BOOL %?dflt false
	} ifelse 
	idWheel71Status 2 eq {	
		/LXwheel71Error true def	%?brief wheel 71 error %?use LOC %?type BOOL %?dflt false
		} { 
		/LXwheel71Error false def	%?brief wheel 71 error %?use LOC %?type BOOL %?dflt false
	} ifelse 
	idWheel72Status 2 eq {	
		/LXwheel72Error true def	%?brief wheel 72 error %?use LOC %?type BOOL %?dflt false
		} { 
		/LXwheel72Error false def	%?brief wheel 72 error %?use LOC %?type BOOL %?dflt false
	} ifelse 
	idWheel73Status 2 eq {	
		/LXwheel73Error true def	%?brief wheel 73 error %?use LOC %?type BOOL %?dflt false
		} { 
		/LXwheel73Error false def	%?brief wheel 73 error %?use LOC %?type BOOL %?dflt false
	} ifelse 
	idWheel74Status 2 eq {	
		/LXwheel74Error true def	%?brief wheel 74 error %?use LOC %?type BOOL %?dflt false
		} { 
		/LXwheel74Error false def	%?brief wheel 74 error %?use LOC %?type BOOL %?dflt false
	} ifelse 
	idWheel81Status 2 eq {	
		/LXwheel81Error true def	%?brief wheel 81 error %?use LOC %?type BOOL %?dflt false
		} { 
		/LXwheel81Error false def	%?brief wheel 81 error %?use LOC %?type BOOL %?dflt false
	} ifelse 
	idWheel82Status 2 eq {	
		/LXwheel82Error true def	%?brief wheel 82 error %?use LOC %?type BOOL %?dflt false
		} { 
		/LXwheel82Error false def	%?brief wheel 82 error %?use LOC %?type BOOL %?dflt false
	} ifelse 
	idWheel83Status 2 eq {	
		/LXwheel83Error true def	%?brief wheel 83 error %?use LOC %?type BOOL %?dflt false
		} { 
		/LXwheel83Error false def	%?brief wheel 83 error %?use LOC %?type BOOL %?dflt false
	} ifelse 
	idWheel84Status 2 eq {	
		/LXwheel84Error true def	%?brief wheel 84 error %?use LOC %?type BOOL %?dflt false
		} { 
		/LXwheel84Error false def	%?brief wheel 84 error %?use LOC %?type BOOL %?dflt false
	} ifelse 
	/LDwheel11Angle 90 irWheel11Angle -1 mul add def	
	/LDwheel12Angle 90 irWheel12Angle -1 mul add def	
	/LDwheel13Angle 90 irWheel13Angle -1 mul add def	
	/LDwheel14Angle 90 irWheel14Angle -1 mul add def	
	/LDwheel21Angle 90 irWheel21Angle -1 mul add def	
	/LDwheel22Angle 90 irWheel22Angle -1 mul add def	
	/LDwheel23Angle 90 irWheel23Angle -1 mul add def	
	/LDwheel24Angle 90 irWheel24Angle -1 mul add def	
	/LDwheel31Angle 90 irWheel31Angle -1 mul add def	
	/LDwheel32Angle 90 irWheel32Angle -1 mul add def	
	/LDwheel33Angle 90 irWheel33Angle -1 mul add def	
	/LDwheel34Angle 90 irWheel34Angle -1 mul add def	
	/LDwheel41Angle 90 irWheel41Angle -1 mul add def	
	/LDwheel42Angle 90 irWheel42Angle -1 mul add def	
	/LDwheel43Angle 90 irWheel43Angle -1 mul add def	
	/LDwheel44Angle 90 irWheel44Angle -1 mul add def	
	/LDwheel51Angle 90 irWheel51Angle -1 mul add def	
	/LDwheel52Angle 90 irWheel52Angle -1 mul add def	
	/LDwheel53Angle 90 irWheel53Angle -1 mul add def	
	/LDwheel54Angle 90 irWheel54Angle -1 mul add def	
	/LDwheel61Angle 90 irWheel61Angle -1 mul add def	
	/LDwheel62Angle 90 irWheel62Angle -1 mul add def	
	/LDwheel63Angle 90 irWheel63Angle -1 mul add def	
	/LDwheel64Angle 90 irWheel64Angle -1 mul add def	
	/LDwheel71Angle 90 irWheel71Angle -1 mul add def	
	/LDwheel72Angle 90 irWheel72Angle -1 mul add def	
	/LDwheel73Angle 90 irWheel73Angle -1 mul add def	
	/LDwheel74Angle 90 irWheel74Angle -1 mul add def	
	/LDwheel81Angle 90 irWheel81Angle -1 mul add def	
	/LDwheel82Angle 90 irWheel82Angle -1 mul add def	
	/LDwheel83Angle 90 irWheel83Angle -1 mul add def	
	/LDwheel84Angle 90 irWheel84Angle -1 mul add def	
	ixSgPosRear true eq {	
		/LDsgPosRear 180 def	%?brief sg position rear %?use LOC %?type REAL %?dflt    0.00
		} { 
		/LDsgPosRear 0 def	%?brief sg position rear %?use LOC %?type REAL %?dflt    0.00
	} ifelse 
	idWheel14Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		30 78 translate 
		LDwheel14Angle 
		rotate 
		1 1 scale 
		LXwheel14Error false false false (ssTravel008) 
		baSwitchSymbolColor001 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel13Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		30 -78 translate 
		LDwheel13Angle 
		rotate 
		1 1 scale 
		LXwheel13Error false false false (ssTravel008) 
		baSwitchSymbolColor001 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel12Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		-30 78 translate 
		LDwheel12Angle 
		rotate 
		1 1 scale 
		LXwheel12Error false false false (ssTravel008) 
		baSwitchSymbolColor001 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel11Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		-30 -78 translate 
		LDwheel11Angle 
		rotate 
		1 1 scale 
		LXwheel11Error false false false (ssTravel008) 
		baSwitchSymbolColor001 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel24Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		90 78 translate 
		LDwheel24Angle 
		rotate 
		1 1 scale 
		LXwheel24Error false false false (ssTravel008) 
		baSwitchSymbolColor001 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel23Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		90 -78 translate 
		LDwheel23Angle 
		rotate 
		1 1 scale 
		LXwheel23Error false false false (ssTravel008) 
		baSwitchSymbolColor001 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel22Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		-90 78 translate 
		LDwheel22Angle 
		rotate 
		1 1 scale 
		LXwheel22Error false false false (ssTravel008) 
		baSwitchSymbolColor001 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel21Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		-90 -78 translate 
		LDwheel21Angle 
		rotate 
		1 1 scale 
		LXwheel21Error false false false (ssTravel008) 
		baSwitchSymbolColor001 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel34Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		150 78 translate 
		LDwheel34Angle 
		rotate 
		1 1 scale 
		LXwheel34Error false false false (ssTravel008) 
		baSwitchSymbolColor001 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel33Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		150 -78 translate 
		LDwheel33Angle 
		rotate 
		1 1 scale 
		LXwheel33Error false false false (ssTravel008) 
		baSwitchSymbolColor001 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel32Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		-150 78 translate 
		LDwheel32Angle 
		rotate 
		1 1 scale 
		LXwheel32Error false false false (ssTravel008) 
		baSwitchSymbolColor001 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel31Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		-150 -78 translate 
		LDwheel31Angle 
		rotate 
		1 1 scale 
		LXwheel31Error false false false (ssTravel008) 
		baSwitchSymbolColor001 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel44Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		210 78 translate 
		LDwheel44Angle 
		rotate 
		1 1 scale 
		LXwheel44Error false false false (ssTravel008) 
		baSwitchSymbolColor001 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel43Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		210 -78 translate 
		LDwheel43Angle 
		rotate 
		1 1 scale 
		LXwheel43Error false false false (ssTravel008) 
		baSwitchSymbolColor001 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel42Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		-210 78 translate 
		LDwheel42Angle 
		rotate 
		1 1 scale 
		LXwheel42Error false false false (ssTravel008) 
		baSwitchSymbolColor001 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel41Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		-210 -78 translate 
		LDwheel41Angle 
		rotate 
		1 1 scale 
		LXwheel41Error false false false (ssTravel008) 
		baSwitchSymbolColor001 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel54Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		270 78 translate 
		LDwheel54Angle 
		rotate 
		1 1 scale 
		LXwheel54Error false false false (ssTravel008) 
		baSwitchSymbolColor001 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel53Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		270 -78 translate 
		LDwheel53Angle 
		rotate 
		1 1 scale 
		LXwheel53Error false false false (ssTravel008) 
		baSwitchSymbolColor001 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel52Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		-270 78 translate 
		LDwheel52Angle 
		rotate 
		1 1 scale 
		LXwheel52Error false false false (ssTravel008) 
		baSwitchSymbolColor001 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel51Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		-270 -78 translate 
		LDwheel51Angle 
		rotate 
		1 1 scale 
		LXwheel51Error false false false (ssTravel008) 
		baSwitchSymbolColor001 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel64Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		330 78 translate 
		LDwheel64Angle 
		rotate 
		1 1 scale 
		LXwheel64Error false false false (ssTravel008) 
		baSwitchSymbolColor001 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel63Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		330 -78 translate 
		LDwheel63Angle 
		rotate 
		1 1 scale 
		LXwheel63Error false false false (ssTravel008) 
		baSwitchSymbolColor001 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel62Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		-330 78 translate 
		LDwheel62Angle 
		rotate 
		1 1 scale 
		LXwheel62Error false false false (ssTravel008) 
		baSwitchSymbolColor001 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel61Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		-330 -78 translate 
		LDwheel61Angle 
		rotate 
		1 1 scale 
		LXwheel61Error false false false (ssTravel008) 
		baSwitchSymbolColor001 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel74Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		390 78 translate 
		LDwheel74Angle 
		rotate 
		1 1 scale 
		LXwheel74Error false false false (ssTravel008) 
		baSwitchSymbolColor001 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel73Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		390 -78 translate 
		LDwheel73Angle 
		rotate 
		1 1 scale 
		LXwheel73Error false false false (ssTravel008) 
		baSwitchSymbolColor001 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel72Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		-390 78 translate 
		LDwheel72Angle 
		rotate 
		1 1 scale 
		LXwheel72Error false false false (ssTravel008) 
		baSwitchSymbolColor001 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel71Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		-390 -78 translate 
		LDwheel71Angle 
		rotate 
		1 1 scale 
		LXwheel71Error false false false (ssTravel008) 
		baSwitchSymbolColor001 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel84Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		450 78 translate 
		LDwheel84Angle 
		rotate 
		1 1 scale 
		LXwheel84Error false false false (ssTravel008) 
		baSwitchSymbolColor001 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel83Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		450 -78 translate 
		LDwheel83Angle 
		rotate 
		1 1 scale 
		LXwheel83Error false false false (ssTravel008) 
		baSwitchSymbolColor001 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel82Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		-450 78 translate 
		LDwheel82Angle 
		rotate 
		1 1 scale 
		LXwheel82Error false false false (ssTravel008) 
		baSwitchSymbolColor001 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel81Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		-450 -78 translate 
		LDwheel81Angle 
		rotate 
		1 1 scale 
		LXwheel81Error false false false (ssTravel008) 
		baSwitchSymbolColor001 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel14Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		30 128 translate 
		LDsgPosRear 
		rotate 
		0.67 1 scale 
		irWheel14Deviation 3.10 () 70 true false false 
		LXwheel14Error FSfatFont 0 0 
		baValueText002 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel13Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		30 -128 translate 
		LDsgPosRear 
		rotate 
		0.67 1 scale 
		irWheel13Deviation 3.10 () 70 true false false 
		LXwheel13Error FSfatFont 0 0 
		baValueText002 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel12Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		-30 128 translate 
		LDsgPosRear 
		rotate 
		0.67 1 scale 
		irWheel12Deviation 3.10 () 70 true false false 
		LXwheel12Error FSfatFont 0 0 
		baValueText002 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel11Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		-30 -128 translate 
		LDsgPosRear 
		rotate 
		0.67 1 scale 
		irWheel11Deviation 3.10 () 70 true false false 
		LXwheel11Error FSfatFont 0 0 
		baValueText002 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel24Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		90 128 translate 
		LDsgPosRear 
		rotate 
		0.67 1 scale 
		irWheel24Deviation 3.10 () 70 true false false 
		LXwheel24Error FSfatFont 0 0 
		baValueText002 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel23Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		90 -128 translate 
		LDsgPosRear 
		rotate 
		0.67 1 scale 
		irWheel23Deviation 3.10 () 70 true false false 
		LXwheel23Error FSfatFont 0 0 
		baValueText002 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel22Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		-90 128 translate 
		LDsgPosRear 
		rotate 
		0.67 1 scale 
		irWheel22Deviation 3.10 () 70 true false false 
		LXwheel22Error FSfatFont 0 0 
		baValueText002 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel21Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		-90 -128 translate 
		LDsgPosRear 
		rotate 
		0.67 1 scale 
		irWheel21Deviation 3.10 () 70 true false false 
		LXwheel21Error FSfatFont 0 0 
		baValueText002 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel34Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		150 128 translate 
		LDsgPosRear 
		rotate 
		0.67 1 scale 
		irWheel34Deviation 3.10 () 70 true false false 
		LXwheel34Error FSfatFont 0 0 
		baValueText002 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel33Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		150 -128 translate 
		LDsgPosRear 
		rotate 
		0.67 1 scale 
		irWheel33Deviation 3.10 () 70 true false false 
		LXwheel33Error FSfatFont 0 0 
		baValueText002 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel32Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		-150 128 translate 
		LDsgPosRear 
		rotate 
		0.67 1 scale 
		irWheel32Deviation 3.10 () 70 true false false 
		LXwheel32Error FSfatFont 0 0 
		baValueText002 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel31Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		-150 -128 translate 
		LDsgPosRear 
		rotate 
		0.67 1 scale 
		irWheel31Deviation 3.10 () 70 true false false 
		LXwheel31Error FSfatFont 0 0 
		baValueText002 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel44Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		210 128 translate 
		LDsgPosRear 
		rotate 
		0.67 1 scale 
		irWheel44Deviation 3.10 () 70 true false false 
		LXwheel44Error FSfatFont 0 0 
		baValueText002 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel43Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		210 -128 translate 
		LDsgPosRear 
		rotate 
		0.67 1 scale 
		irWheel43Deviation 3.10 () 70 true false false 
		LXwheel43Error FSfatFont 0 0 
		baValueText002 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel42Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		-210 128 translate 
		LDsgPosRear 
		rotate 
		0.67 1 scale 
		irWheel42Deviation 3.10 () 70 true false false 
		LXwheel42Error FSfatFont 0 0 
		baValueText002 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel41Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		-210 -128 translate 
		LDsgPosRear 
		rotate 
		0.67 1 scale 
		irWheel41Deviation 3.10 () 70 true false false 
		LXwheel41Error FSfatFont 0 0 
		baValueText002 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel54Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		270 128 translate 
		LDsgPosRear 
		rotate 
		0.67 1 scale 
		irWheel54Deviation 3.10 () 70 true false false 
		LXwheel54Error FSfatFont 0 0 
		baValueText002 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel53Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		270 -128 translate 
		LDsgPosRear 
		rotate 
		0.67 1 scale 
		irWheel53Deviation 3.10 () 70 true false false 
		LXwheel53Error FSfatFont 0 0 
		baValueText002 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel52Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		-270 128 translate 
		LDsgPosRear 
		rotate 
		0.67 1 scale 
		irWheel52Deviation 3.10 () 70 true false false 
		LXwheel52Error FSfatFont 0 0 
		baValueText002 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel51Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		-270 -128 translate 
		LDsgPosRear 
		rotate 
		0.67 1 scale 
		irWheel51Deviation 3.10 () 70 true false false 
		LXwheel51Error FSfatFont 0 0 
		baValueText002 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel64Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		330 128 translate 
		LDsgPosRear 
		rotate 
		0.67 1 scale 
		irWheel64Deviation 3.10 () 70 true false false 
		LXwheel64Error FSfatFont 0 0 
		baValueText002 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel63Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		330 -128 translate 
		LDsgPosRear 
		rotate 
		0.67 1 scale 
		irWheel63Deviation 3.10 () 70 true false false 
		LXwheel63Error FSfatFont 0 0 
		baValueText002 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel62Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		-330 128 translate 
		LDsgPosRear 
		rotate 
		0.67 1 scale 
		irWheel62Deviation 3.10 () 70 true false false 
		LXwheel62Error FSfatFont 0 0 
		baValueText002 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel61Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		-330 -128 translate 
		LDsgPosRear 
		rotate 
		0.67 1 scale 
		irWheel61Deviation 3.10 () 70 true false false 
		LXwheel61Error FSfatFont 0 0 
		baValueText002 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel74Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		390 128 translate 
		LDsgPosRear 
		rotate 
		0.67 1 scale 
		irWheel74Deviation 3.10 () 70 true false false 
		LXwheel74Error FSfatFont 0 0 
		baValueText002 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel73Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		390 -128 translate 
		LDsgPosRear 
		rotate 
		0.67 1 scale 
		irWheel73Deviation 3.10 () 70 true false false 
		LXwheel73Error FSfatFont 0 0 
		baValueText002 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel72Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		-390 128 translate 
		LDsgPosRear 
		rotate 
		0.67 1 scale 
		irWheel72Deviation 3.10 () 70 true false false 
		LXwheel72Error FSfatFont 0 0 
		baValueText002 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel71Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		-390 -128 translate 
		LDsgPosRear 
		rotate 
		0.67 1 scale 
		irWheel71Deviation 3.10 () 70 true false false 
		LXwheel71Error FSfatFont 0 0 
		baValueText002 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel84Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		450 128 translate 
		LDsgPosRear 
		rotate 
		0.67 1 scale 
		irWheel84Deviation 3.10 () 70 true false false 
		LXwheel84Error FSfatFont 0 0 
		baValueText002 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel83Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		450 -128 translate 
		LDsgPosRear 
		rotate 
		0.67 1 scale 
		irWheel83Deviation 3.10 () 70 true false false 
		LXwheel83Error FSfatFont 0 0 
		baValueText002 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel82Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		-450 128 translate 
		LDsgPosRear 
		rotate 
		0.67 1 scale 
		irWheel82Deviation 3.10 () 70 true false false 
		LXwheel82Error FSfatFont 0 0 
		baValueText002 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel81Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		-450 -128 translate 
		LDsgPosRear 
		rotate 
		0.67 1 scale 
		irWheel81Deviation 3.10 () 70 true false false 
		LXwheel81Error FSfatFont 0 0 
		baValueText002 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel14Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		30 30 translate 
		LDsgPosRear 
		rotate 
		0.67 0.80 scale 
		14 3 () () false false false false 
		FSfatFont 0 
		baValueText001 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel13Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		30 -30 translate 
		LDsgPosRear 
		rotate 
		0.67 0.80 scale 
		13 3 () () false false false false 
		FSfatFont 0 
		baValueText001 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel24Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		90 30 translate 
		LDsgPosRear 
		rotate 
		0.67 0.80 scale 
		24 3 () () false false false false 
		FSfatFont 0 
		baValueText001 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel23Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		90 -30 translate 
		LDsgPosRear 
		rotate 
		0.67 0.80 scale 
		23 3 () () false false false false 
		FSfatFont 0 
		baValueText001 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel34Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		150 30 translate 
		LDsgPosRear 
		rotate 
		0.67 0.80 scale 
		34 3 () () false false false false 
		FSfatFont 0 
		baValueText001 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel33Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		150 -30 translate 
		LDsgPosRear 
		rotate 
		0.67 0.80 scale 
		33 3 () () false false false false 
		FSfatFont 0 
		baValueText001 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel44Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		210 30 translate 
		LDsgPosRear 
		rotate 
		0.67 0.80 scale 
		44 3 () () false false false false 
		FSfatFont 0 
		baValueText001 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel43Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		210 -30 translate 
		LDsgPosRear 
		rotate 
		0.67 0.80 scale 
		43 3 () () false false false false 
		FSfatFont 0 
		baValueText001 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel54Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		270 30 translate 
		LDsgPosRear 
		rotate 
		0.67 0.80 scale 
		54 3 () () false false false false 
		FSfatFont 0 
		baValueText001 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel53Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		270 -30 translate 
		LDsgPosRear 
		rotate 
		0.67 0.80 scale 
		53 3 () () false false false false 
		FSfatFont 0 
		baValueText001 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel64Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		330 30 translate 
		LDsgPosRear 
		rotate 
		0.67 0.80 scale 
		64 3 () () false false false false 
		FSfatFont 0 
		baValueText001 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel63Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		330 -30 translate 
		LDsgPosRear 
		rotate 
		0.67 0.80 scale 
		63 3 () () false false false false 
		FSfatFont 0 
		baValueText001 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel74Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		390 30 translate 
		LDsgPosRear 
		rotate 
		0.67 0.80 scale 
		74 3 () () false false false false 
		FSfatFont 0 
		baValueText001 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel73Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		390 -30 translate 
		LDsgPosRear 
		rotate 
		0.67 0.80 scale 
		73 3 () () false false false false 
		FSfatFont 0 
		baValueText001 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel84Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		450 30 translate 
		LDsgPosRear 
		rotate 
		0.67 0.80 scale 
		84 3 () () false false false false 
		FSfatFont 0 
		baValueText001 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel83Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		450 -30 translate 
		LDsgPosRear 
		rotate 
		0.67 0.80 scale 
		83 3 () () false false false false 
		FSfatFont 0 
		baValueText001 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel12Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		-30 30 translate 
		LDsgPosRear 
		rotate 
		0.67 0.80 scale 
		12 3 () () false false false false 
		FSfatFont 0 
		baValueText001 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel11Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		-30 -30 translate 
		LDsgPosRear 
		rotate 
		0.67 0.80 scale 
		11 3 () () false false false false 
		FSfatFont 0 
		baValueText001 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel22Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		-90 30 translate 
		LDsgPosRear 
		rotate 
		0.67 0.80 scale 
		22 3 () () false false false false 
		FSfatFont 0 
		baValueText001 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel21Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		-90 -30 translate 
		LDsgPosRear 
		rotate 
		0.67 0.80 scale 
		21 3 () () false false false false 
		FSfatFont 0 
		baValueText001 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel32Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		-150 30 translate 
		LDsgPosRear 
		rotate 
		0.67 0.80 scale 
		32 3 () () false false false false 
		FSfatFont 0 
		baValueText001 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel31Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		-150 -30 translate 
		LDsgPosRear 
		rotate 
		0.67 0.80 scale 
		31 3 () () false false false false 
		FSfatFont 0 
		baValueText001 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel42Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		-210 30 translate 
		LDsgPosRear 
		rotate 
		0.67 0.80 scale 
		42 3 () () false false false false 
		FSfatFont 0 
		baValueText001 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel41Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		-210 -30 translate 
		LDsgPosRear 
		rotate 
		0.67 0.80 scale 
		41 3 () () false false false false 
		FSfatFont 0 
		baValueText001 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel52Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		-270 30 translate 
		LDsgPosRear 
		rotate 
		0.67 0.80 scale 
		52 3 () () false false false false 
		FSfatFont 0 
		baValueText001 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel51Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		-270 -30 translate 
		LDsgPosRear 
		rotate 
		0.67 0.80 scale 
		51 3 () () false false false false 
		FSfatFont 0 
		baValueText001 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel62Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		-330 30 translate 
		LDsgPosRear 
		rotate 
		0.67 0.80 scale 
		62 3 () () false false false false 
		FSfatFont 0 
		baValueText001 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel61Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		-330 -30 translate 
		LDsgPosRear 
		rotate 
		0.67 0.80 scale 
		61 3 () () false false false false 
		FSfatFont 0 
		baValueText001 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel72Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		-390 30 translate 
		LDsgPosRear 
		rotate 
		0.67 0.80 scale 
		72 3 () () false false false false 
		FSfatFont 0 
		baValueText001 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel71Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		-390 -30 translate 
		LDsgPosRear 
		rotate 
		0.67 0.80 scale 
		71 3 () () false false false false 
		FSfatFont 0 
		baValueText001 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel82Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		-450 30 translate 
		LDsgPosRear 
		rotate 
		0.67 0.80 scale 
		82 3 () () false false false false 
		FSfatFont 0 
		baValueText001 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel81Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		-450 -30 translate 
		LDsgPosRear 
		rotate 
		0.67 0.80 scale 
		81 3 () () false false false false 
		FSfatFont 0 
		baValueText001 
		setcolor 
		setmatrix_nlw 
	} if -60 98 moveto 
	-60 58 lineto 
	stroke 
	-60 -98 moveto 
	-60 -58 lineto 
	stroke 
	-60 58 moveto 
	-70 48 lineto 
	stroke 
	-60 -58 moveto 
	-70 -48 lineto 
	stroke 
	-60 98 moveto 
	-50 108 lineto 
	stroke 
	-60 -98 moveto 
	-50 -108 lineto 
	stroke 
	-50 108 moveto 
	50 108 lineto 
	stroke 
	-50 -108 moveto 
	50 -108 lineto 
	stroke 
	50 108 moveto 
	60 98 lineto 
	stroke 
	50 -108 moveto 
	60 -98 lineto 
	stroke 
	60 98 moveto 
	60 58 lineto 
	stroke 
	60 -98 moveto 
	60 -58 lineto 
	stroke 
	60 58 moveto 
	70 48 lineto 
	stroke 
	60 -58 moveto 
	70 -48 lineto 
	stroke 
	70 48 moveto 
	235 48 lineto 
	stroke 
	70 -48 moveto 
	235 -48 lineto 
	stroke 
	-235 -48 moveto 
	-70 -48 lineto 
	stroke 
	-235 48 moveto 
	-70 48 lineto 
	stroke 
	%?term_beg
	
	idWheel84Status 0 eq 
	idWheel83Status 0 eq and 
	idWheel74Status 0 eq 
	idWheel73Status 0 eq and 
	idWheel64Status 0 eq 
	idWheel63Status 0 eq and 
	idWheel54Status 0 eq 
	idWheel53Status 0 eq and and and and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		235 -48 translate 
		0 rotate 
		1 1 scale 
		1 0 0 0 96 
		baPageLine003 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	idWheel82Status 0 eq 
	idWheel81Status 0 eq and 
	idWheel72Status 0 eq 
	idWheel71Status 0 eq and 
	idWheel62Status 0 eq 
	idWheel61Status 0 eq and 
	idWheel52Status 0 eq 
	idWheel51Status 0 eq and and and and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		-235 -48 translate 
		0 rotate 
		1 1 scale 
		1 0 0 0 96 
		baPageLine003 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	idWheel84Status 0 gt 
	idWheel83Status 0 gt or 
	idWheel74Status 0 gt 
	idWheel73Status 0 gt or 
	idWheel64Status 0 gt 
	idWheel63Status 0 gt or 
	idWheel54Status 0 gt 
	idWheel53Status 0 gt or or or or 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		235 48 translate 
		0 rotate 
		1 1 scale 
		1 0 0 60 0 
		baPageLine003 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	idWheel84Status 0 eq 
	idWheel83Status 0 eq and 
	idWheel74Status 0 eq 
	idWheel73Status 0 eq and 
	idWheel64Status 0 eq 
	idWheel63Status 0 eq and 
	idWheel54Status 0 gt 
	idWheel53Status 0 gt or and and and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		295 -48 translate 
		0 rotate 
		1 1 scale 
		1 0 0 0 96 
		baPageLine003 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	idWheel84Status 0 gt 
	idWheel83Status 0 gt or 
	idWheel74Status 0 gt 
	idWheel73Status 0 gt or 
	idWheel64Status 0 gt 
	idWheel63Status 0 gt or 
	idWheel54Status 0 gt 
	idWheel53Status 0 gt or or or or 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		235 -48 translate 
		0 rotate 
		1 1 scale 
		1 0 0 60 0 
		baPageLine003 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	idWheel84Status 0 gt 
	idWheel83Status 0 gt or 
	idWheel74Status 0 gt 
	idWheel73Status 0 gt or 
	idWheel64Status 0 gt 
	idWheel63Status 0 gt or or or 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		295 48 translate 
		0 rotate 
		1 1 scale 
		1 0 0 60 0 
		baPageLine003 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	idWheel84Status 0 eq 
	idWheel83Status 0 eq and 
	idWheel74Status 0 eq 
	idWheel73Status 0 eq and 
	idWheel64Status 0 gt 
	idWheel63Status 0 gt or and and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		355 -48 translate 
		0 rotate 
		1 1 scale 
		1 0 0 0 96 
		baPageLine003 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	idWheel84Status 0 gt 
	idWheel83Status 0 gt or 
	idWheel74Status 0 gt 
	idWheel73Status 0 gt or 
	idWheel64Status 0 gt 
	idWheel63Status 0 gt or or or 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		295 -48 translate 
		0 rotate 
		1 1 scale 
		1 0 0 60 0 
		baPageLine003 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	idWheel84Status 0 gt 
	idWheel83Status 0 gt or 
	idWheel74Status 0 gt 
	idWheel73Status 0 gt or or 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		355 48 translate 
		0 rotate 
		1 1 scale 
		1 0 0 60 0 
		baPageLine003 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	idWheel84Status 0 eq 
	idWheel83Status 0 eq and 
	idWheel74Status 0 gt 
	idWheel73Status 0 gt or and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		415 -48 translate 
		0 rotate 
		1 1 scale 
		1 0 0 0 96 
		baPageLine003 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	idWheel84Status 0 gt 
	idWheel83Status 0 gt or 
	idWheel74Status 0 gt 
	idWheel73Status 0 gt or or 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		355 -48 translate 
		0 rotate 
		1 1 scale 
		1 0 0 60 0 
		baPageLine003 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	idWheel84Status 0 gt 
	idWheel83Status 0 gt or 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		415 48 translate 
		0 rotate 
		1 1 scale 
		1 0 0 60 0 
		baPageLine003 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	idWheel84Status 0 gt 
	idWheel83Status 0 gt or 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		475 -48 translate 
		0 rotate 
		1 1 scale 
		1 0 0 0 96 
		baPageLine003 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	idWheel84Status 0 gt 
	idWheel83Status 0 gt or 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		415 -48 translate 
		0 rotate 
		1 1 scale 
		1 0 0 60 0 
		baPageLine003 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	idWheel82Status 0 gt 
	idWheel81Status 0 gt or 
	idWheel72Status 0 gt 
	idWheel71Status 0 gt or 
	idWheel62Status 0 gt 
	idWheel61Status 0 gt or 
	idWheel52Status 0 gt 
	idWheel51Status 0 gt or or or or 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		-295 48 translate 
		0 rotate 
		1 1 scale 
		1 0 0 60 0 
		baPageLine003 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	idWheel82Status 0 eq 
	idWheel81Status 0 eq and 
	idWheel72Status 0 eq 
	idWheel71Status 0 eq and 
	idWheel62Status 0 eq 
	idWheel61Status 0 eq and 
	idWheel52Status 0 gt 
	idWheel51Status 0 gt or and and and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		-295 -48 translate 
		0 rotate 
		1 1 scale 
		1 0 0 0 96 
		baPageLine003 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	idWheel82Status 0 gt 
	idWheel81Status 0 gt or 
	idWheel72Status 0 gt 
	idWheel71Status 0 gt or 
	idWheel62Status 0 gt 
	idWheel61Status 0 gt or 
	idWheel52Status 0 gt 
	idWheel51Status 0 gt or or or or 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		-295 -48 translate 
		0 rotate 
		1 1 scale 
		1 0 0 60 0 
		baPageLine003 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	idWheel82Status 0 gt 
	idWheel81Status 0 gt or 
	idWheel72Status 0 gt 
	idWheel71Status 0 gt or 
	idWheel62Status 0 gt 
	idWheel61Status 0 gt or or or 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		-355 48 translate 
		0 rotate 
		1 1 scale 
		1 0 0 60 0 
		baPageLine003 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	idWheel82Status 0 eq 
	idWheel81Status 0 eq and 
	idWheel72Status 0 eq 
	idWheel71Status 0 eq and 
	idWheel62Status 0 gt 
	idWheel61Status 0 gt or and and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		-355 -48 translate 
		0 rotate 
		1 1 scale 
		1 0 0 0 96 
		baPageLine003 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	idWheel82Status 0 gt 
	idWheel81Status 0 gt or 
	idWheel72Status 0 gt 
	idWheel71Status 0 gt or 
	idWheel62Status 0 gt 
	idWheel61Status 0 gt or or or 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		-355 -48 translate 
		0 rotate 
		1 1 scale 
		1 0 0 60 0 
		baPageLine003 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	idWheel82Status 0 gt 
	idWheel81Status 0 gt or 
	idWheel72Status 0 gt 
	idWheel71Status 0 gt or or 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		-415 48 translate 
		0 rotate 
		1 1 scale 
		1 0 0 60 0 
		baPageLine003 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	idWheel82Status 0 eq 
	idWheel81Status 0 eq and 
	idWheel72Status 0 gt 
	idWheel71Status 0 gt or and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		-415 -48 translate 
		0 rotate 
		1 1 scale 
		1 0 0 0 96 
		baPageLine003 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	idWheel82Status 0 gt 
	idWheel81Status 0 gt or 
	idWheel72Status 0 gt 
	idWheel71Status 0 gt or or 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		-415 -48 translate 
		0 rotate 
		1 1 scale 
		1 0 0 60 0 
		baPageLine003 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	idWheel82Status 0 gt 
	idWheel81Status 0 gt or 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		-475 48 translate 
		0 rotate 
		1 1 scale 
		1 0 0 60 0 
		baPageLine003 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	idWheel82Status 0 gt 
	idWheel81Status 0 gt or 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		-475 -48 translate 
		0 rotate 
		1 1 scale 
		1 0 0 0 96 
		baPageLine003 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	idWheel82Status 0 gt 
	idWheel81Status 0 gt or 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		-475 -48 translate 
		0 rotate 
		1 1 scale 
		1 0 0 60 0 
		baPageLine003 
		setcolor 
		setmatrix_nlw 
	} if 
} def
%?partend

%?partdef spAcc001
%?fn	spAcc001
%?brief	Anzeige 1
%?bbox	0 0 79 79
/spAcc001 {
	/idSignalPerc exch def	%?brief siognal in %?use INP %?type REAL %?dflt    0.00
	/idColor exch def	%?brief color for the middle scale line: 0=neutral, 1=green, 2=blue, 3=yellow, 4=red %?use INP %?type DINT %?dflt 1
%?manual_beg
idSignalPerc 0 ne { 
	3 setlinewidth_nlw 
	currentcolor 

	idColor 0 eq { White } if
	idColor 1 eq { Green } if
	idColor 2 eq { Blue } if
	idColor 3 eq { Yellow } if
	idColor 4 eq { Red } if
	idColor 5 eq { Grey } if
	idColor 6 eq { LightGrey } if
	idColor 7 eq { DarkGreen } if
	idColor 8 eq { Orange } if
	idColor 9 eq { Brown } if
40 40 moveto 
newpath 
40 40 28 180
180
180 100 div
idSignalPerc mul 
sub arcn 
eofill 
setcolor 
	
} if
%?manual_end 
	
} def
%?partend

%?partdef spLine001
%?fn	spLine001
%?brief	line mit Farbe
%?bbox	0 0 79 79
/spLine001 {
	/ixEnable exch def	%?brief enable = green %?use INP %?type BOOL %?dflt false
	/idColor exch def	%?brief color for the middle scale line: 0=neutral, 1=green, 2=blue, 3=yellow, 4=red %?use INP %?type DINT %?dflt 0
	matrix currentmatrix_nlw 
	currentcolor 
	ixEnable true eq {	
		idColor 1 eq {	
			Green 
		} if 
		idColor 2 eq {	
			Blue 
		} if 
		idColor 3 eq {	
			Yellow 
		} if 
		idColor 4 eq {	
			Red 
		} if 
		idColor 5 eq {	
			Grey 
		} if 
		idColor 6 eq {	
			LightGrey 
		} if 
		idColor 7 eq {	
			DarkGreen 
		} if 
		idColor 8 eq {	
			Orange 
		} if 
		idColor 9 eq {	
			Brown 
		} if 
	} if 0 0 translate 
	0 rotate 
	1 1 scale 
	3 0 40 80 40 
	baPageLine003 
	setcolor 
	setmatrix_nlw 
} def
%?partend



%?partdef spHydraulic006
%?fn	spHydraulic006
%?brief	hydraulic pump with volume in percent
%?bbox	0 0 79 79
/spHydraulic006 {
	/irSignalPerc exch def	%?brief signal in percent %?use INP %?type REAL %?dflt    0.00
	/idSetColor exch def	%?brief color for the middle scale line: 0=neutral, 1=green, 2=blue, 3=yellow, 4=red %?use INP %?type DINT %?dflt 0
	matrix currentmatrix_nlw 
	currentcolor 
	0 0 translate 
	0 rotate 
	1 1 scale 
	idSetColor irSignalPerc 
	spAcc001 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	0 0 translate 
	0 rotate 
	1 1 scale 
	ssHydraulic001 
	setcolor 
	setmatrix_nlw 
} def
%?partend

%?partdef spHydraulic007
%?fn	spHydraulic007
%?brief	hydraulic motor with volume in precent
%?bbox	0 0 79 79
/spHydraulic007 {
	/irSignalPerc exch def	%?brief signal in percent %?use INP %?type REAL %?dflt    0.00
	/idSetColor exch def	%?brief color for the middle scale line: 0=neutral, 1=green, 2=blue, 3=yellow, 4=red %?use INP %?type DINT %?dflt 0
	matrix currentmatrix_nlw 
	currentcolor 
	0 0 translate 
	0 rotate 
	1 1 scale 
	idSetColor irSignalPerc 
	spAcc001 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	0 0 translate 
	0 rotate 
	1 1 scale 
	ssHydraulic002 
	setcolor 
	setmatrix_nlw 
} def
%?partend

%?partdef spHydraulic008
%?fn	spHydraulic008
%?brief	hydraulic pressure reservoir
%?bbox	0 0 79 79
/spHydraulic008 {
	/irBufferVolume exch def	%?brief buffer volume %?use INP %?type REAL %?dflt    0.00
	/ixLoadUnloadBuff exch def	%?brief load or unload buffer %?use INP %?type BOOL %?dflt false
	ixLoadUnloadBuff true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 20 6 translate 
		0 rotate 
		1 1 scale 
		irBufferVolume 0 100 90 100 39 67 false true false false false 0 
		baBar005 
		setcolor 
		setmatrix_nlw 
	} if 
	ixLoadUnloadBuff false eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		Grey 20 6 translate 
		0 rotate 
		1 1 scale 
		irBufferVolume 0 100 90 100 39 67 false true false false false 0 
		baBar005 
		setcolor 
		setmatrix_nlw 
	} if 
	matrix currentmatrix_nlw 
	currentcolor 
	0 0 translate 
	0 rotate 
	1 1 scale 
	false false false false (ssHydraulic010) 
	baSwitchSymbolColor001 
	setcolor 
	setmatrix_nlw 
} def
%?partend

%?partdef spArrow001
%?fn	spArrow001
%?brief	arrow
%?bbox	0 0 79 79
/spArrow001 {
	/ixRotate180 exch def	%?brief rotate 180 grad %?use INP %?type BOOL %?dflt false
	/idColor exch def	%?brief color for the middle scale line: 0=neutral, 1=green, 2=blue, 3=yellow, 4=red %?use INP %?type DINT %?dflt 0
	matrix currentmatrix_nlw 
	currentcolor 
	idColor 1 eq {	
		Green 
	} if 
	idColor 2 eq {	
		Blue 
	} if 
	idColor 3 eq {	
		Yellow 
	} if 
	idColor 4 eq {	
		Red 
	} if 
	idColor 5 eq {	
		Grey 
	} if 
	idColor 6 eq {	
		LightGrey 
	} if 
	idColor 7 eq {	
		DarkGreen 
	} if 
	idColor 8 eq {	
		Orange 
	} if 
	idColor 9 eq {	
		Brown 
	} if 40 40 translate 
	ixRotate180 true eq {	
		180 rotate 
		} { 
		0 rotate 
	} ifelse 1 1 scale 
	ssArrow001 
	setcolor 
	setmatrix_nlw 
} def
%?partend

%?partdef spHybrid001
%?fn	spHybrid001
%?brief	hybrid symbol
%?bbox	0 0 159 159
/spHybrid001 {
	matrix currentmatrix_nlw 
	currentcolor 
	21 89 translate 
	0 rotate 
	0.75 0.75 scale 
	ssHybrid001 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	121 127 translate 
	240 rotate 
	0.75 0.75 scale 
	ssHybrid001 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	102 22 translate 
	120 rotate 
	0.75 0.75 scale 
	ssHybrid001 
	setcolor 
	setmatrix_nlw 
} def
%?partend


%?partdef spHybrid002
%?fn	spHybrid002
%?brief	hybrid symbol
%?bbox	0 0 159 159
/spHybrid002 {
	matrix currentmatrix_nlw 
	currentcolor 
	Green 23 99 translate 
	0 rotate 
	0.75 0.75 scale 
	ssHybrid001 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	DarkGreen 
	131 122 translate 
	240 rotate 
	0.75 0.75 scale 
	ssHybrid001 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	Brown 
	92 22 translate 
	120 rotate 
	0.75 0.75 scale 
	ssHybrid001 
	setcolor 
	setmatrix_nlw 
	49 68 moveto 
	BigFatFont (Pac) 
	show_utf8 
} def
%?partend

%?partdef spHybrid003
%?fn	spHybrid003
%?brief	hybrid symbol
%?bbox	0 0 159 159
/spHybrid003 {
	matrix currentmatrix_nlw 
	currentcolor 
	Green 23 99 translate 
	0 rotate 
	0.75 0.75 scale 
	ssHybrid001 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	Orange 
	131 122 translate 
	240 rotate 
	0.75 0.75 scale 
	ssHybrid001 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	Brown 
	92 22 translate 
	120 rotate 
	0.75 0.75 scale 
	ssHybrid001 
	setcolor 
	setmatrix_nlw 
	49 68 moveto 
	BigFatFont (Pac) 
	show_utf8 
} def
%?partend


%?partdef spPipeFlow001
%?fn	spPipeFlow001
%?brief	green Frame for selection of Touchbutton 80 x 80
%?bbox	0 0 159 39
/spPipeFlow001 {
	/irDummy2 exch def	%?brief dummy 1	%?use INP %?type REAL %?dflt 1.0
	/irDummy1 exch def	%?brief dummy 1	%?use INP %?type REAL %?dflt 1.0
	/irScaleSize exch def	%?brief scale Y (1 = grid unit)	%?use INP %?type REAL %?dflt 1.0
	/irScaleLength exch def	%?brief scale X (1 = grid unit)	%?use INP %?type REAL %?dflt 1.0
	/idColor exch def	%?brief activate any color %?use INP %?type DINT %?dflt 0
	/ixLowSpeed exch def	%?brief speed %?use INP %?type BOOL %?dflt false

%?manual_beg
	/LDstep 20 def
	/LDline 0 def
	/LDfact irScaleSize def
	/LDpos 5 def
	/LDmax MDsymbolGrid 2 mul irScaleLength mul def
	/LDnum LDmax LDstep div cvi def

	currentcolor
	idColor 0 eq { White } if
	idColor 1 eq { Green } if
	idColor 2 eq { Blue } if
	idColor 3 eq { Yellow } if
	idColor 4 eq { Red } if
	idColor 5 eq { Grey } if
	idColor 6 eq { LightGrey } if
	idColor 7 eq { DarkGreen } if
	idColor 8 eq { Orange } if
	idColor 9 eq { Brown } if
	idColor 10 eq { LightBlue } if
	
	
	
	

	3 setlinewidth

	matrix currentmatrix
	0 0 translate
	irScaleSize irScaleSize scale				% Die wandernden Linien werden Proportional mit Y sklaiert

	matrix currentmatrix
	ixLowSpeed {
		realtime 1000 mod 10 div 5 div
		/LDpos exch store
	} {
		realtime 400 mod 4 div 5 div
		/LDpos exch store
	} ifelse
	LDpos 0 translate
	LDnum {									% Die X-Skalierung entscheidet �ie anzahl der wandernden Linien
		LDline 5 moveto
		LDline 10 add 20 lineto
		LDline 35 lineto
		stroke
		/LDline LDline 20 add store
	} repeat
	setmatrix

	Invisible
	-1 0 11 40 rectfill
	stroke
	LDmax 0 11 40 rectfill
	stroke
	1 setlinewidth
	setmatrix
	setcolor
%?manual_end
} def
%?partend





%?partdef spPipeFlow002
%?fn	spPipeFlow002
%?brief	green Frame for selection of Touchbutton 80 x 80
%?bbox	0 0 159 39
/spPipeFlow002 {
	/irScaleSize exch def	%?brief scale Y (1 = grid unit) %?use INP %?type REAL %?dflt    1.00
	/irScaleLength exch def	%?brief scale X (1 = grid unit) %?use INP %?type REAL %?dflt    1.00
	/idColor exch def	%?brief activate any color %?use INP %?type DINT %?dflt 0
	/ixLowSpeed exch def	%?brief speed %?use INP %?type BOOL %?dflt false
	/ixActiv exch def	%?brief activ %?use INP %?type BOOL %?dflt false
%?manual_beg
	/LDstep 20 def
	/LDline 0 def
	/LDfact irScaleSize def
	/LDpos 5 def
	/LDmax MDsymbolGrid 2 mul irScaleLength mul def
	/LDnum LDmax LDstep div cvi def
	/LDoffset 20 def
	
	currentcolor
	idColor 0 eq { White } if
	idColor 1 eq { Green } if
	idColor 2 eq { Blue } if
	idColor 3 eq { Yellow } if
	idColor 4 eq { Red } if
	idColor 5 eq { Grey } if
	idColor 6 eq { LightGrey } if
	idColor 7 eq { DarkGreen } if
	idColor 8 eq { Orange } if
	idColor 9 eq { Brown } if
	idColor 10 eq { LightBlue } if
	
	3 setlinewidth
	matrix currentmatrix
	0 0 translate
	irScaleSize irScaleSize scale				% Die wandernden Linien werden Proportional mit Y sklaiert
	matrix currentmatrix
	ixLowSpeed {
		realtime 1000 mod 10 div 5 div
		/LDpos exch store
	} {
		realtime 400 mod 4 div 5 div
		/LDpos exch store
	} ifelse
	
	ixActiv {	
	LDpos 0 translate	

}{
	0 0 translate	

	} ifelse
	
	LDnum {									% Die X-Skalierung entscheidet �ie anzahl der wandernden Linien
		LDline 5 moveto
		LDline 10 add 20 lineto
		LDline 35 lineto
		stroke
		/LDline LDline LDoffset add store
	} repeat
	setmatrix
	Invisible
	-5 0 20 40 rectfill
	stroke
	LDmax 15 sub 0 20 40 rectfill
	stroke

	1 setlinewidth
	setmatrix
	setcolor
%?manual_end
	
} def
%?partend

%?partdef spHybrid004
%?fn	spHybrid004
%?brief	hybrid symbol
%?bbox	0 0 159 159
/spHybrid004 {
	matrix currentmatrix_nlw 
	currentcolor 
	Green 
	30 55 translate 
	0 rotate 
	1.50 1.50 scale 
	ssHybrid005 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	Green 
	135 45 translate 
	120 rotate 
	1.50 1.50 scale 
	ssHybrid005 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	Green 
	90 140 translate 
	240 rotate 
	1.50 1.50 scale 
	ssHybrid005 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	96 87 translate 
	0 rotate 
	1.62 2 scale 
	(Pac) 9 0 
	baText001 
	setcolor 
	setmatrix_nlw 
} def
%?partend

%?partdef spHybrid005
%?fn	spHybrid005
%?brief	hybrid symbol
%?bbox	0 0 159 159
/spHybrid005 {
	matrix currentmatrix_nlw 
	currentcolor 
	43 90 translate 
	0 rotate 
	1 1 scale 
	ssHybrid006 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	110 113 translate 
	240 rotate 
	1 1 scale 
	ssHybrid006 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	94 43 translate 
	120 rotate 
	1 1 scale 
	ssHybrid006 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	85 90 translate 
	0 rotate 
	1.50 1.50 scale 
	(Pac) 
	FSfatFont 0 false false false false 
	baText002 
	setcolor 
	setmatrix_nlw 
} def
%?partend

%?partdef spHydraulic009
%?fn	spHydraulic009
%?brief	hydraulic system cylinder body
%?bbox	0 0 79 79
/spHydraulic009 {
	/irVolume exch def	%?brief volume %?use INP %?type REAL %?dflt    0.00
	/LDvolume 0 def	%?brief volume limit 0 - 100 %?use LOC %?type REAL %?dflt    0.00
	/LDvolume irVolume def	
	irVolume 0 lt {	
		/LDvolume 0 def	
	} if 
	irVolume 100 gt {	
		/LDvolume 100 def	
	} if 3 setlinewidth_nlw 
	25 7 moveto 
	53 7 lineto 
	stroke 
	53 7 moveto 
	53 60 lineto 
	stroke 
	25 7 moveto 
	25 60 lineto 
	stroke 
	26 
	LDvolume 2 div 
	8 add 
	moveto 
	52 
	LDvolume 2 div 
	8 add 
	lineto 
	stroke 
	1 setlinewidth_nlw 
} def
%?partend

%?partdef spHydraulic010
%?fn	spHydraulic010
%?brief	hydraulic pressure reservoir
%?bbox	0 0 79 79
/spHydraulic010 {
	/irBufferVolume exch def	%?brief buffer volume %?use INP %?type REAL %?dflt    0.00
	/ixLoadUnloadBuff exch def	%?brief load or unload buffer %?use INP %?type BOOL %?dflt false
	ixLoadUnloadBuff true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 20 6 translate 
		0 rotate 
		1 1 scale 
		irBufferVolume 0 100 90 100 39 67 false true false false false 0 
		baBar005 
		setcolor 
		setmatrix_nlw 
	} if 
	ixLoadUnloadBuff false eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		Grey 20 6 translate 
		0 rotate 
		1 1 scale 
		irBufferVolume 0 100 90 100 39 67 false true false false false 0 
		baBar005 
		setcolor 
		setmatrix_nlw 
	} if 
	matrix currentmatrix_nlw 
	currentcolor 
	-16 -4 translate 
	0 rotate 
	1.40 1.30 scale_nlw 
	irBufferVolume 
	spHydraulic009 
	setcolor 
	setmatrix_nlw 
} def
%?partend

%?partdef spPipeFlow003
%?fn	spPipeFlow003
%?brief	green Frame for selection of Touchbutton 80 x 80
%?bbox	0 0 159 39
/spPipeFlow003 {
	/irScaleSize exch def	%?brief scale Y (1 = grid unit) %?use INP %?type REAL %?dflt    1.00
	/irScaleLength exch def	%?brief scale X (1 = grid unit) %?use INP %?type REAL %?dflt    1.00
	/idColor exch def	%?brief activate any color %?use INP %?type DINT %?dflt 0
	/ixLowSpeed exch def	%?brief speed %?use INP %?type BOOL %?dflt false
	/ixActiv exch def	%?brief activ %?use INP %?type BOOL %?dflt false
%?manual_beg
	/LDstep 11 def
	/LDline 0 def
	/LDfact irScaleSize def
	/LDpos 5 def
	/LDmax MDsymbolGrid 2 mul irScaleLength mul def
	/LDnum LDmax LDstep div cvi def
	/LDoffset 10 def
	
	currentcolor
	idColor 0 eq { White } if
	idColor 1 eq { Green } if
	idColor 2 eq { Blue } if
	idColor 3 eq { Yellow } if
	idColor 4 eq { Red } if
	idColor 5 eq { Grey } if
	idColor 6 eq { LightGrey } if
	idColor 7 eq { DarkGreen } if
	idColor 8 eq { Orange } if
	idColor 9 eq { Brown } if
	idColor 10 eq { LightBlue } if
	
	3 setlinewidth
	matrix currentmatrix
	0 0 translate
	irScaleSize irScaleSize scale				% Die wandernden Linien werden Proportional mit Y sklaiert
	matrix currentmatrix
	ixLowSpeed {
		realtime 1000 mod 10 div 5 div
		/LDpos exch store
	} {
		realtime 400 mod 4 div 5 div
		/LDpos exch store
	} ifelse
	
	ixActiv {	
	LDpos 0 translate	

}{
	0 0 translate	

	} ifelse
	
	LDnum {									% Die X-Skalierung entscheidet �ie anzahl der wandernden Linien
		LDline 5 moveto
		LDline 5 add 35 lineto
		stroke
		/LDline LDline LDoffset add store
	} repeat
	setmatrix
	Invisible
	-5 0 5 40 rectfill
	stroke
	LDmax 5 sub 0 5 40 rectfill
	stroke

	1 setlinewidth
	setmatrix
	setcolor
%?manual_end
	
} def
%?partend

%?partdef spWinch004
%?fn	spWinch004
%?brief	Winde
%?bbox	0 0 79 79
/spWinch004 {
	matrix currentmatrix_nlw 
	currentcolor 
	20 30 translate 
	0 rotate 
	0.50 0.50 scale_nlw 
	true true 0 0.32 1.74 
	spPipeFlow003 
	setcolor 
	setmatrix_nlw 
	5 setlinewidth_nlw 
	18 65 moveto 
	18 30 lineto 
	stroke 
	62 65 moveto 
	62 30 lineto 
	stroke 
	3 setlinewidth_nlw 
	20 60 moveto 
	60 60 lineto 
	stroke 
	20 35 moveto 
	60 35 lineto 
	stroke 
	57 35 moveto 
	57 15 lineto 
	stroke 
	1 setlinewidth_nlw 
} def
%?partend

%?partdef spTravel004
%?fn	spTravel004
%?brief	wheel set position
%?bbox	0 0 79 79
/spTravel004 {
	/irWheelAngle exch def	%?brief wheel angle %?use INP %?type REAL %?dflt    0.00
	/LRwheelAngle 0 def	%?brief wheel angle %?use LOC %?type REAL %?dflt    0.00
	/LRwheelAngle irWheelAngle -1 mul def	
	matrix currentmatrix_nlw 
	currentcolor 
	40 40 translate 
	LRwheelAngle 
	rotate 
	1 1 scale 
	ssTravel007 
	setcolor 
	setmatrix_nlw 
} def
%?partend

%?partdef spTravel005
%?fn	spTravel005
%?brief	wheel or strut error
%?bbox	0 0 79 79
/spTravel005 {
	/ixWheel4NoPress exch def	%?brief wheel 4 no pressure %?use INP %?type BOOL %?dflt false
	/ixWheel3NoPress exch def	%?brief wheel 3 no pressure %?use INP %?type BOOL %?dflt false
	/ixWheel2NoPress exch def	%?brief wheel 2 no pressure %?use INP %?type BOOL %?dflt false
	/ixWheel1NoPress exch def	%?brief wheel 1 no pressure %?use INP %?type BOOL %?dflt false
	/idStrut4Status exch def	%?brief strut 4 status %?use INP %?type DINT %?dflt 0
	/idStrut3Status exch def	%?brief strut 3 status %?use INP %?type DINT %?dflt 0
	/idStrut2Status exch def	%?brief strut 2 status %?use INP %?type DINT %?dflt 0
	/idStrut1Status exch def	%?brief strut 1 status %?use INP %?type DINT %?dflt 0
	/idOperationMode exch def	%?brief operation mode %?use INP %?type DINT %?dflt 0
	/ixStrutNotOut exch def	%?brief all strut out %?use INP %?type BOOL %?dflt false
	/qxSymbolYellow false def	%?brief symbol yellow %?use OUT %?type BOOL %?dflt false
	/qxSymbolRed false def	%?brief symbol red %?use OUT %?type BOOL %?dflt false
	idOperationMode 2 le {	
		idStrut1Status 1 ne 
		ixWheel1NoPress true eq and 
		idStrut2Status 1 ne 
		ixWheel2NoPress true eq and 
		idStrut3Status 1 ne 
		ixWheel3NoPress true eq and 
		idStrut4Status 1 ne 
		ixWheel4NoPress true eq and or or or {	
			/qxSymbolRed true def	%?brief symbol red %?use OUT %?type BOOL %?dflt false
		} if 
		idStrut1Status 1 eq 
		ixWheel1NoPress false eq and 
		idStrut2Status 1 eq 
		ixWheel2NoPress false eq and 
		idStrut3Status 1 eq 
		ixWheel3NoPress false eq and 
		idStrut4Status 1 eq 
		ixWheel4NoPress false eq and or or or 
		idStrut1Status 0 eq 
		ixWheel1NoPress false eq and 
		idStrut2Status 0 eq 
		ixWheel2NoPress false eq and 
		idStrut3Status 0 eq 
		ixWheel3NoPress false eq and 
		idStrut4Status 0 eq 
		ixWheel4NoPress false eq and 
		ixStrutNotOut or or or or or {	
			/qxSymbolYellow true def	%?brief symbol yellow %?use OUT %?type BOOL %?dflt false
		} if 
		} { 
		idStrut1Status 1 ne 
		ixWheel1NoPress false eq and 
		idStrut2Status 1 ne 
		ixWheel2NoPress false eq and 
		idStrut3Status 1 ne 
		ixWheel3NoPress false eq and 
		idStrut4Status 1 ne 
		ixWheel4NoPress false eq and 
		ixStrutNotOut or or or or {	
			/qxSymbolRed true def	%?brief symbol red %?use OUT %?type BOOL %?dflt false
		} if 
		idStrut1Status 1 eq 
		ixWheel1NoPress false eq and 
		idStrut2Status 1 eq 
		ixWheel2NoPress false eq and 
		idStrut3Status 1 eq 
		ixWheel3NoPress false eq and 
		idStrut4Status 1 eq 
		ixWheel4NoPress false eq and or or or 
		idStrut1Status 1 ne 
		ixWheel1NoPress true eq and 
		idStrut2Status 1 ne 
		ixWheel2NoPress true eq and 
		idStrut3Status 1 ne 
		ixWheel3NoPress true eq and 
		idStrut4Status 1 ne 
		ixWheel4NoPress true eq and or or or or {	
			/qxSymbolYellow true def	%?brief symbol yellow %?use OUT %?type BOOL %?dflt false
		} if 
	} ifelse 
	qxSymbolRed qxSymbolYellow or {	
		matrix currentmatrix_nlw 
		currentcolor 
		-7 -5 translate 
		0 rotate 
		0.87 0.87 scale 
		qxSymbolRed qxSymbolYellow false false (ssTravel014) 
		baSwitchSymbolColor004 
		setcolor 
		setmatrix_nlw 
	} if 
	qxSymbolRed qxSymbolYellow or {	
		matrix currentmatrix_nlw 
		currentcolor 
		23 20 translate 
		0 rotate 
		0.75 0.75 scale 
		qxSymbolRed qxSymbolYellow false false (ssTravel009) 
		baSwitchSymbolColor004 
		setcolor 
		setmatrix_nlw 
	} if 
	qxSymbolYellow qxSymbolRed 
} def
%?partend
























%?partdef spTravel006
%?fn	spTravel006
%?brief	wheel set position
%?bbox	-480 -160 479 159
/spTravel006 {
	/ixSgPosRear exch def	%?brief sg position rear %?use INP %?type BOOL %?dflt false
	/irWheel11Angle exch def	%?brief wheel 11 angle %?use INP %?type REAL %?dflt    0.00
	/irWheel11Deviation exch def	%?brief wheel 11 deviation %?use INP %?type REAL %?dflt    0.00
	/idWheel11Status exch def	%?brief wheel 11 status %?use INP %?type DINT %?dflt 0
	/irWheel12Angle exch def	%?brief wheel 12 angle %?use INP %?type REAL %?dflt    0.00
	/irWheel12Deviation exch def	%?brief wheel 12 deviation %?use INP %?type REAL %?dflt    0.00
	/idWheel12Status exch def	%?brief wheel 12 status %?use INP %?type DINT %?dflt 0
	/irWheel13Angle exch def	%?brief wheel 13 angle %?use INP %?type REAL %?dflt    0.00
	/irWheel13Deviation exch def	%?brief wheel 13 deviation %?use INP %?type REAL %?dflt    0.00
	/idWheel13Status exch def	%?brief wheel 13 status %?use INP %?type DINT %?dflt 0
	/irWheel14Angle exch def	%?brief wheel 14 angle %?use INP %?type REAL %?dflt    0.00
	/irWheel14Deviation exch def	%?brief wheel 14 deviation %?use INP %?type REAL %?dflt    0.00
	/idWheel14Status exch def	%?brief wheel 14 status %?use INP %?type DINT %?dflt 0
	/irWheel21Angle exch def	%?brief wheel 11 angle %?use INP %?type REAL %?dflt    0.00
	/irWheel21Deviation exch def	%?brief wheel 11 deviation %?use INP %?type REAL %?dflt    0.00
	/idWheel21Status exch def	%?brief wheel 11 status %?use INP %?type DINT %?dflt 0
	/irWheel22Angle exch def	%?brief wheel 12 angle %?use INP %?type REAL %?dflt    0.00
	/irWheel22Deviation exch def	%?brief wheel 12 deviation %?use INP %?type REAL %?dflt    0.00
	/idWheel22Status exch def	%?brief wheel 12 status %?use INP %?type DINT %?dflt 0
	/irWheel23Angle exch def	%?brief wheel 13 angle %?use INP %?type REAL %?dflt    0.00
	/irWheel23Deviation exch def	%?brief wheel 13 deviation %?use INP %?type REAL %?dflt    0.00
	/idWheel23Status exch def	%?brief wheel 13 status %?use INP %?type DINT %?dflt 0
	/irWheel24Angle exch def	%?brief wheel 14 angle %?use INP %?type REAL %?dflt    0.00
	/irWheel24Deviation exch def	%?brief wheel 14 deviation %?use INP %?type REAL %?dflt    0.00
	/idWheel24Status exch def	%?brief wheel 14 status %?use INP %?type DINT %?dflt 0
	/irWheel31Angle exch def	%?brief wheel 21 angle %?use INP %?type REAL %?dflt    0.00
	/irWheel31Deviation exch def	%?brief wheel 21 deviation %?use INP %?type REAL %?dflt    0.00
	/idWheel31Status exch def	%?brief wheel 21 status %?use INP %?type DINT %?dflt 0
	/irWheel32Angle exch def	%?brief wheel 32 angle %?use INP %?type REAL %?dflt    0.00
	/irWheel32Deviation exch def	%?brief wheel 32 deviation %?use INP %?type REAL %?dflt    0.00
	/idWheel32Status exch def	%?brief wheel 32 status %?use INP %?type DINT %?dflt 0
	/irWheel33Angle exch def	%?brief wheel 33 angle %?use INP %?type REAL %?dflt    0.00
	/irWheel33Deviation exch def	%?brief wheel 33 deviation %?use INP %?type REAL %?dflt    0.00
	/idWheel33Status exch def	%?brief wheel 33 status %?use INP %?type DINT %?dflt 0
	/irWheel34Angle exch def	%?brief wheel 34 angle %?use INP %?type REAL %?dflt    0.00
	/irWheel34Deviation exch def	%?brief wheel 34 deviation %?use INP %?type REAL %?dflt    0.00
	/idWheel34Status exch def	%?brief wheel 34 status %?use INP %?type DINT %?dflt 0
	/irWheel41Angle exch def	%?brief wheel 41 angle %?use INP %?type REAL %?dflt    0.00
	/irWheel41Deviation exch def	%?brief wheel 41 deviation %?use INP %?type REAL %?dflt    0.00
	/idWheel41Status exch def	%?brief wheel 41 status %?use INP %?type DINT %?dflt 0
	/irWheel42Angle exch def	%?brief wheel 42 angle %?use INP %?type REAL %?dflt    0.00
	/irWheel42Deviation exch def	%?brief wheel 42 deviation %?use INP %?type REAL %?dflt    0.00
	/idWheel42Status exch def	%?brief wheel 42 status %?use INP %?type DINT %?dflt 0
	/irWheel43Angle exch def	%?brief wheel 43 angle %?use INP %?type REAL %?dflt    0.00
	/irWheel43Deviation exch def	%?brief wheel 43 deviation %?use INP %?type REAL %?dflt    0.00
	/idWheel43Status exch def	%?brief wheel 43 status %?use INP %?type DINT %?dflt 0
	/irWheel44Angle exch def	%?brief wheel 44 angle %?use INP %?type REAL %?dflt    0.00
	/irWheel44Deviation exch def	%?brief wheel 44 deviation %?use INP %?type REAL %?dflt    0.00
	/idWheel44Status exch def	%?brief wheel 44 status %?use INP %?type DINT %?dflt 0
	/irWheel51Angle exch def	%?brief wheel 51 angle %?use INP %?type REAL %?dflt    0.00
	/irWheel51Deviation exch def	%?brief wheel 51 deviation %?use INP %?type REAL %?dflt    0.00
	/idWheel51Status exch def	%?brief wheel 51 status %?use INP %?type DINT %?dflt 0
	/irWheel52Angle exch def	%?brief wheel 52 angle %?use INP %?type REAL %?dflt    0.00
	/irWheel52Deviation exch def	%?brief wheel 52 deviation %?use INP %?type REAL %?dflt    0.00
	/idWheel52Status exch def	%?brief wheel 52 status %?use INP %?type DINT %?dflt 0
	/irWheel53Angle exch def	%?brief wheel 53 angle %?use INP %?type REAL %?dflt    0.00
	/irWheel53Deviation exch def	%?brief wheel 53 deviation %?use INP %?type REAL %?dflt    0.00
	/idWheel53Status exch def	%?brief wheel 53 status %?use INP %?type DINT %?dflt 0
	/irWheel54Angle exch def	%?brief wheel 54 angle %?use INP %?type REAL %?dflt    0.00
	/irWheel54Deviation exch def	%?brief wheel 54 deviation %?use INP %?type REAL %?dflt    0.00
	/idWheel54Status exch def	%?brief wheel 54 status %?use INP %?type DINT %?dflt 0
	/irWheel61Angle exch def	%?brief wheel 61 angle %?use INP %?type REAL %?dflt    0.00
	/irWheel61Deviation exch def	%?brief wheel 61 deviation %?use INP %?type REAL %?dflt    0.00
	/idWheel61Status exch def	%?brief wheel 61 status %?use INP %?type DINT %?dflt 0
	/irWheel62Angle exch def	%?brief wheel 62 angle %?use INP %?type REAL %?dflt    0.00
	/irWheel62Deviation exch def	%?brief wheel 62 deviation %?use INP %?type REAL %?dflt    0.00
	/idWheel62Status exch def	%?brief wheel 62 status %?use INP %?type DINT %?dflt 0
	/irWheel63Angle exch def	%?brief wheel 63 angle %?use INP %?type REAL %?dflt    0.00
	/irWheel63Deviation exch def	%?brief wheel 63 deviation %?use INP %?type REAL %?dflt    0.00
	/idWheel63Status exch def	%?brief wheel 63 status %?use INP %?type DINT %?dflt 0
	/irWheel64Angle exch def	%?brief wheel 64 angle %?use INP %?type REAL %?dflt    0.00
	/irWheel64Deviation exch def	%?brief wheel 64 deviation %?use INP %?type REAL %?dflt    0.00
	/idWheel64Status exch def	%?brief wheel 64 status %?use INP %?type DINT %?dflt 0
	/irWheel71Angle exch def	%?brief wheel 71 angle %?use INP %?type REAL %?dflt    0.00
	/irWheel71Deviation exch def	%?brief wheel 71 deviation %?use INP %?type REAL %?dflt    0.00
	/idWheel71Status exch def	%?brief wheel 71 status %?use INP %?type DINT %?dflt 0
	/irWheel72Angle exch def	%?brief wheel 72 angle %?use INP %?type REAL %?dflt    0.00
	/irWheel72Deviation exch def	%?brief wheel 72 deviation %?use INP %?type REAL %?dflt    0.00
	/idWheel72Status exch def	%?brief wheel 72 status %?use INP %?type DINT %?dflt 0
	/irWheel73Angle exch def	%?brief wheel 73 angle %?use INP %?type REAL %?dflt    0.00
	/irWheel73Deviation exch def	%?brief wheel 73 deviation %?use INP %?type REAL %?dflt    0.00
	/idWheel73Status exch def	%?brief wheel 73 status %?use INP %?type DINT %?dflt 0
	/irWheel74Angle exch def	%?brief wheel 74 angle %?use INP %?type REAL %?dflt    0.00
	/irWheel74Deviation exch def	%?brief wheel 74 deviation %?use INP %?type REAL %?dflt    0.00
	/idWheel74Status exch def	%?brief wheel 74 status %?use INP %?type DINT %?dflt 0
	/irWheel81Angle exch def	%?brief wheel 81 angle %?use INP %?type REAL %?dflt    0.00
	/irWheel81Deviation exch def	%?brief wheel 81 deviation %?use INP %?type REAL %?dflt    0.00
	/idWheel81Status exch def	%?brief wheel 81 status %?use INP %?type DINT %?dflt 0
	/irWheel82Angle exch def	%?brief wheel 82 angle %?use INP %?type REAL %?dflt    0.00
	/irWheel82Deviation exch def	%?brief wheel 82 deviation %?use INP %?type REAL %?dflt    0.00
	/idWheel82Status exch def	%?brief wheel 82 status %?use INP %?type DINT %?dflt 0
	/irWheel83Angle exch def	%?brief wheel 83 angle %?use INP %?type REAL %?dflt    0.00
	/irWheel83Deviation exch def	%?brief wheel 83 deviation %?use INP %?type REAL %?dflt    0.00
	/idWheel83Status exch def	%?brief wheel 83 status %?use INP %?type DINT %?dflt 0
	/irWheel84Angle exch def	%?brief wheel 84 angle %?use INP %?type REAL %?dflt    0.00
	/irWheel84Deviation exch def	%?brief wheel 84 deviation %?use INP %?type REAL %?dflt    0.00
	/idWheel84Status exch def	%?brief wheel 84 status %?use INP %?type DINT %?dflt 0
	/LXwheel11Error false def	%?brief wheel 11 error %?use LOC %?type BOOL %?dflt false
	/LXwheel12Error false def	%?brief wheel 12 error %?use LOC %?type BOOL %?dflt false
	/LXwheel13Error false def	%?brief wheel 13 error %?use LOC %?type BOOL %?dflt false
	/LXwheel14Error false def	%?brief wheel 14 error %?use LOC %?type BOOL %?dflt false
	/LXwheel21Error false def	%?brief wheel 21 error %?use LOC %?type BOOL %?dflt false
	/LXwheel22Error false def	%?brief wheel 22 error %?use LOC %?type BOOL %?dflt false
	/LXwheel23Error false def	%?brief wheel 23 error %?use LOC %?type BOOL %?dflt false
	/LXwheel24Error false def	%?brief wheel 24 error %?use LOC %?type BOOL %?dflt false
	/LXwheel31Error false def	%?brief wheel 31 error %?use LOC %?type BOOL %?dflt false
	/LXwheel32Error false def	%?brief wheel 32 error %?use LOC %?type BOOL %?dflt false
	/LXwheel33Error false def	%?brief wheel 33 error %?use LOC %?type BOOL %?dflt false
	/LXwheel34Error false def	%?brief wheel 34 error %?use LOC %?type BOOL %?dflt false
	/LXwheel41Error false def	%?brief wheel 41 error %?use LOC %?type BOOL %?dflt false
	/LXwheel42Error false def	%?brief wheel 42 error %?use LOC %?type BOOL %?dflt false
	/LXwheel43Error false def	%?brief wheel 43 error %?use LOC %?type BOOL %?dflt false
	/LXwheel44Error false def	%?brief wheel 44 error %?use LOC %?type BOOL %?dflt false
	/LXwheel51Error false def	%?brief wheel 51 error %?use LOC %?type BOOL %?dflt false
	/LXwheel52Error false def	%?brief wheel 52 error %?use LOC %?type BOOL %?dflt false
	/LXwheel53Error false def	%?brief wheel 53 error %?use LOC %?type BOOL %?dflt false
	/LXwheel54Error false def	%?brief wheel 54 error %?use LOC %?type BOOL %?dflt false
	/LXwheel61Error false def	%?brief wheel 61 error %?use LOC %?type BOOL %?dflt false
	/LXwheel62Error false def	%?brief wheel 62 error %?use LOC %?type BOOL %?dflt false
	/LXwheel63Error false def	%?brief wheel 63 error %?use LOC %?type BOOL %?dflt false
	/LXwheel64Error false def	%?brief wheel 64 error %?use LOC %?type BOOL %?dflt false
	/LXwheel71Error false def	%?brief wheel 71 error %?use LOC %?type BOOL %?dflt false
	/LXwheel72Error false def	%?brief wheel 72 error %?use LOC %?type BOOL %?dflt false
	/LXwheel73Error false def	%?brief wheel 73 error %?use LOC %?type BOOL %?dflt false
	/LXwheel74Error false def	%?brief wheel 74 error %?use LOC %?type BOOL %?dflt false
	/LXwheel81Error false def	%?brief wheel 81 error %?use LOC %?type BOOL %?dflt false
	/LXwheel82Error false def	%?brief wheel 82 error %?use LOC %?type BOOL %?dflt false
	/LXwheel83Error false def	%?brief wheel 83 error %?use LOC %?type BOOL %?dflt false
	/LXwheel84Error false def	%?brief wheel 84 error %?use LOC %?type BOOL %?dflt false
	/LDwheel11Angle 0 def	%?brief wheel 11 angle corrected %?use LOC %?type REAL %?dflt    0.00
	/LDwheel12Angle 0 def	%?brief wheel 12 angle corrected %?use LOC %?type REAL %?dflt    0.00
	/LDwheel13Angle 0 def	%?brief wheel 13 angle corrected %?use LOC %?type REAL %?dflt    0.00
	/LDwheel14Angle 0 def	%?brief wheel 14 angle corrected %?use LOC %?type REAL %?dflt    0.00
	/LDwheel21Angle 0 def	%?brief wheel 21 angle corrected %?use LOC %?type REAL %?dflt    0.00
	/LDwheel22Angle 0 def	%?brief wheel 22 angle corrected %?use LOC %?type REAL %?dflt    0.00
	/LDwheel23Angle 0 def	%?brief wheel 23 angle corrected %?use LOC %?type REAL %?dflt    0.00
	/LDwheel24Angle 0 def	%?brief wheel 24 angle corrected %?use LOC %?type REAL %?dflt    0.00
	/LDwheel31Angle 0 def	%?brief wheel 31 angle corrected %?use LOC %?type REAL %?dflt    0.00
	/LDwheel32Angle 0 def	%?brief wheel 32 angle corrected %?use LOC %?type REAL %?dflt    0.00
	/LDwheel33Angle 0 def	%?brief wheel 33 angle corrected %?use LOC %?type REAL %?dflt    0.00
	/LDwheel34Angle 0 def	%?brief wheel 34 angle corrected %?use LOC %?type REAL %?dflt    0.00
	/LDwheel41Angle 0 def	%?brief wheel 41 angle corrected %?use LOC %?type REAL %?dflt    0.00
	/LDwheel42Angle 0 def	%?brief wheel 42 angle corrected %?use LOC %?type REAL %?dflt    0.00
	/LDwheel43Angle 0 def	%?brief wheel 43 angle corrected %?use LOC %?type REAL %?dflt    0.00
	/LDwheel44Angle 0 def	%?brief wheel 44 angle corrected %?use LOC %?type REAL %?dflt    0.00
	/LDwheel51Angle 0 def	%?brief wheel 51 angle corrected %?use LOC %?type REAL %?dflt    0.00
	/LDwheel52Angle 0 def	%?brief wheel 52 angle corrected %?use LOC %?type REAL %?dflt    0.00
	/LDwheel53Angle 0 def	%?brief wheel 53 angle corrected %?use LOC %?type REAL %?dflt    0.00
	/LDwheel54Angle 0 def	%?brief wheel 54 angle corrected %?use LOC %?type REAL %?dflt    0.00
	/LDwheel61Angle 0 def	%?brief wheel 61 angle corrected %?use LOC %?type REAL %?dflt    0.00
	/LDwheel62Angle 0 def	%?brief wheel 62 angle corrected %?use LOC %?type REAL %?dflt    0.00
	/LDwheel63Angle 0 def	%?brief wheel 63 angle corrected %?use LOC %?type REAL %?dflt    0.00
	/LDwheel64Angle 0 def	%?brief wheel 64 angle corrected %?use LOC %?type REAL %?dflt    0.00
	/LDwheel71Angle 0 def	%?brief wheel 71 angle corrected %?use LOC %?type REAL %?dflt    0.00
	/LDwheel72Angle 0 def	%?brief wheel 72 angle corrected %?use LOC %?type REAL %?dflt    0.00
	/LDwheel73Angle 0 def	%?brief wheel 73 angle corrected %?use LOC %?type REAL %?dflt    0.00
	/LDwheel74Angle 0 def	%?brief wheel 74 angle corrected %?use LOC %?type REAL %?dflt    0.00
	/LDwheel81Angle 0 def	%?brief wheel 81 angle corrected %?use LOC %?type REAL %?dflt    0.00
	/LDwheel82Angle 0 def	%?brief wheel 82 angle corrected %?use LOC %?type REAL %?dflt    0.00
	/LDwheel83Angle 0 def	%?brief wheel 83 angle corrected %?use LOC %?type REAL %?dflt    0.00
	/LDwheel84Angle 0 def	%?brief wheel 84 angle corrected %?use LOC %?type REAL %?dflt    0.00
	/LDsgPosRear 0 def	%?brief sg position rear %?use LOC %?type REAL %?dflt    0.00
	idWheel11Status 2 eq {	
		/LXwheel11Error true def	%?brief wheel 11 error %?use LOC %?type BOOL %?dflt false
		} { 
		/LXwheel11Error false def	%?brief wheel 11 error %?use LOC %?type BOOL %?dflt false
	} ifelse 
	idWheel12Status 2 eq {	
		/LXwheel12Error true def	%?brief wheel 12 error %?use LOC %?type BOOL %?dflt false
		} { 
		/LXwheel12Error false def	%?brief wheel 12 error %?use LOC %?type BOOL %?dflt false
	} ifelse 
	idWheel13Status 2 eq {	
		/LXwheel13Error true def	%?brief wheel 13 error %?use LOC %?type BOOL %?dflt false
		} { 
		/LXwheel13Error false def	%?brief wheel 13 error %?use LOC %?type BOOL %?dflt false
	} ifelse 
	idWheel14Status 2 eq {	
		/LXwheel14Error true def	%?brief wheel 14 error %?use LOC %?type BOOL %?dflt false
		} { 
		/LXwheel14Error false def	%?brief wheel 14 error %?use LOC %?type BOOL %?dflt false
	} ifelse 
	idWheel21Status 2 eq {	
		/LXwheel21Error true def	%?brief wheel 21 error %?use LOC %?type BOOL %?dflt false
		} { 
		/LXwheel21Error false def	%?brief wheel 21 error %?use LOC %?type BOOL %?dflt false
	} ifelse 
	idWheel22Status 2 eq {	
		/LXwheel22Error true def	%?brief wheel 22 error %?use LOC %?type BOOL %?dflt false
		} { 
		/LXwheel22Error false def	%?brief wheel 22 error %?use LOC %?type BOOL %?dflt false
	} ifelse 
	idWheel23Status 2 eq {	
		/LXwheel23Error true def	%?brief wheel 23 error %?use LOC %?type BOOL %?dflt false
		} { 
		/LXwheel23Error false def	%?brief wheel 23 error %?use LOC %?type BOOL %?dflt false
	} ifelse 
	idWheel24Status 2 eq {	
		/LXwheel24Error true def	%?brief wheel 24 error %?use LOC %?type BOOL %?dflt false
		} { 
		/LXwheel24Error false def	%?brief wheel 24 error %?use LOC %?type BOOL %?dflt false
	} ifelse 
	idWheel31Status 2 eq {	
		/LXwheel31Error true def	%?brief wheel 31 error %?use LOC %?type BOOL %?dflt false
		} { 
		/LXwheel31Error false def	%?brief wheel 31 error %?use LOC %?type BOOL %?dflt false
	} ifelse 
	idWheel32Status 2 eq {	
		/LXwheel32Error true def	%?brief wheel 32 error %?use LOC %?type BOOL %?dflt false
		} { 
		/LXwheel32Error false def	%?brief wheel 32 error %?use LOC %?type BOOL %?dflt false
	} ifelse 
	idWheel33Status 2 eq {	
		/LXwheel33Error true def	%?brief wheel 33 error %?use LOC %?type BOOL %?dflt false
		} { 
		/LXwheel33Error false def	%?brief wheel 33 error %?use LOC %?type BOOL %?dflt false
	} ifelse 
	idWheel34Status 2 eq {	
		/LXwheel34Error true def	%?brief wheel 34 error %?use LOC %?type BOOL %?dflt false
		} { 
		/LXwheel34Error false def	%?brief wheel 34 error %?use LOC %?type BOOL %?dflt false
	} ifelse 
	idWheel41Status 2 eq {	
		/LXwheel41Error true def	%?brief wheel 41 error %?use LOC %?type BOOL %?dflt false
		} { 
		/LXwheel41Error false def	%?brief wheel 41 error %?use LOC %?type BOOL %?dflt false
	} ifelse 
	idWheel42Status 2 eq {	
		/LXwheel42Error true def	%?brief wheel 42 error %?use LOC %?type BOOL %?dflt false
		} { 
		/LXwheel42Error false def	%?brief wheel 42 error %?use LOC %?type BOOL %?dflt false
	} ifelse 
	idWheel43Status 2 eq {	
		/LXwheel43Error true def	%?brief wheel 43 error %?use LOC %?type BOOL %?dflt false
		} { 
		/LXwheel43Error false def	%?brief wheel 43 error %?use LOC %?type BOOL %?dflt false
	} ifelse 
	idWheel44Status 2 eq {	
		/LXwheel44Error true def	%?brief wheel 44 error %?use LOC %?type BOOL %?dflt false
		} { 
		/LXwheel44Error false def	%?brief wheel 44 error %?use LOC %?type BOOL %?dflt false
	} ifelse 
	idWheel51Status 2 eq {	
		/LXwheel51Error true def	%?brief wheel 51 error %?use LOC %?type BOOL %?dflt false
		} { 
		/LXwheel51Error false def	%?brief wheel 51 error %?use LOC %?type BOOL %?dflt false
	} ifelse 
	idWheel52Status 2 eq {	
		/LXwheel52Error true def	%?brief wheel 52 error %?use LOC %?type BOOL %?dflt false
		} { 
		/LXwheel52Error false def	%?brief wheel 52 error %?use LOC %?type BOOL %?dflt false
	} ifelse 
	idWheel53Status 2 eq {	
		/LXwheel53Error true def	%?brief wheel 53 error %?use LOC %?type BOOL %?dflt false
		} { 
		/LXwheel53Error false def	%?brief wheel 53 error %?use LOC %?type BOOL %?dflt false
	} ifelse 
	idWheel54Status 2 eq {	
		/LXwheel54Error true def	%?brief wheel 54 error %?use LOC %?type BOOL %?dflt false
		} { 
		/LXwheel54Error false def	%?brief wheel 54 error %?use LOC %?type BOOL %?dflt false
	} ifelse 
	idWheel61Status 2 eq {	
		/LXwheel61Error true def	%?brief wheel 61 error %?use LOC %?type BOOL %?dflt false
		} { 
		/LXwheel61Error false def	%?brief wheel 61 error %?use LOC %?type BOOL %?dflt false
	} ifelse 
	idWheel62Status 2 eq {	
		/LXwheel62Error true def	%?brief wheel 62 error %?use LOC %?type BOOL %?dflt false
		} { 
		/LXwheel62Error false def	%?brief wheel 62 error %?use LOC %?type BOOL %?dflt false
	} ifelse 
	idWheel63Status 2 eq {	
		/LXwheel63Error true def	%?brief wheel 63 error %?use LOC %?type BOOL %?dflt false
		} { 
		/LXwheel63Error false def	%?brief wheel 63 error %?use LOC %?type BOOL %?dflt false
	} ifelse 
	idWheel64Status 2 eq {	
		/LXwheel64Error true def	%?brief wheel 64 error %?use LOC %?type BOOL %?dflt false
		} { 
		/LXwheel64Error false def	%?brief wheel 64 error %?use LOC %?type BOOL %?dflt false
	} ifelse 
	idWheel71Status 2 eq {	
		/LXwheel71Error true def	%?brief wheel 71 error %?use LOC %?type BOOL %?dflt false
		} { 
		/LXwheel71Error false def	%?brief wheel 71 error %?use LOC %?type BOOL %?dflt false
	} ifelse 
	idWheel72Status 2 eq {	
		/LXwheel72Error true def	%?brief wheel 72 error %?use LOC %?type BOOL %?dflt false
		} { 
		/LXwheel72Error false def	%?brief wheel 72 error %?use LOC %?type BOOL %?dflt false
	} ifelse 
	idWheel73Status 2 eq {	
		/LXwheel73Error true def	%?brief wheel 73 error %?use LOC %?type BOOL %?dflt false
		} { 
		/LXwheel73Error false def	%?brief wheel 73 error %?use LOC %?type BOOL %?dflt false
	} ifelse 
	idWheel74Status 2 eq {	
		/LXwheel74Error true def	%?brief wheel 74 error %?use LOC %?type BOOL %?dflt false
		} { 
		/LXwheel74Error false def	%?brief wheel 74 error %?use LOC %?type BOOL %?dflt false
	} ifelse 
	idWheel81Status 2 eq {	
		/LXwheel81Error true def	%?brief wheel 81 error %?use LOC %?type BOOL %?dflt false
		} { 
		/LXwheel81Error false def	%?brief wheel 81 error %?use LOC %?type BOOL %?dflt false
	} ifelse 
	idWheel82Status 2 eq {	
		/LXwheel82Error true def	%?brief wheel 82 error %?use LOC %?type BOOL %?dflt false
		} { 
		/LXwheel82Error false def	%?brief wheel 82 error %?use LOC %?type BOOL %?dflt false
	} ifelse 
	idWheel83Status 2 eq {	
		/LXwheel83Error true def	%?brief wheel 83 error %?use LOC %?type BOOL %?dflt false
		} { 
		/LXwheel83Error false def	%?brief wheel 83 error %?use LOC %?type BOOL %?dflt false
	} ifelse 
	idWheel84Status 2 eq {	
		/LXwheel84Error true def	%?brief wheel 84 error %?use LOC %?type BOOL %?dflt false
		} { 
		/LXwheel84Error false def	%?brief wheel 84 error %?use LOC %?type BOOL %?dflt false
	} ifelse 
	/LDwheel11Angle irWheel11Angle 90 add def	
	/LDwheel12Angle irWheel12Angle 90 add def	
	/LDwheel13Angle irWheel13Angle 90 add def	
	/LDwheel14Angle irWheel14Angle 90 add def	
	/LDwheel21Angle irWheel21Angle 90 add def	
	/LDwheel22Angle irWheel22Angle 90 add def	
	/LDwheel23Angle irWheel23Angle 90 add def	
	/LDwheel24Angle irWheel24Angle 90 add def	
	/LDwheel31Angle irWheel31Angle 90 add def	
	/LDwheel32Angle irWheel32Angle 90 add def	
	/LDwheel33Angle irWheel33Angle 90 add def	
	/LDwheel34Angle irWheel34Angle 90 add def	
	/LDwheel41Angle irWheel41Angle 90 add def	
	/LDwheel42Angle irWheel42Angle 90 add def	
	/LDwheel43Angle irWheel43Angle 90 add def	
	/LDwheel44Angle irWheel44Angle 90 add def	
	/LDwheel51Angle irWheel51Angle 90 add def	
	/LDwheel52Angle irWheel52Angle 90 add def	
	/LDwheel53Angle irWheel53Angle 90 add def	
	/LDwheel54Angle irWheel54Angle 90 add def	
	/LDwheel61Angle irWheel61Angle 90 add def	
	/LDwheel62Angle irWheel62Angle 90 add def	
	/LDwheel63Angle irWheel63Angle 90 add def	
	/LDwheel64Angle irWheel64Angle 90 add def	
	/LDwheel71Angle irWheel71Angle 90 add def	
	/LDwheel72Angle irWheel72Angle 90 add def	
	/LDwheel73Angle irWheel73Angle 90 add def	
	/LDwheel74Angle irWheel74Angle 90 add def	
	/LDwheel81Angle irWheel81Angle 90 add def	
	/LDwheel82Angle irWheel82Angle 90 add def	
	/LDwheel83Angle irWheel83Angle 90 add def	
	/LDwheel84Angle irWheel84Angle 90 add def	
	ixSgPosRear true eq {	
		/LDsgPosRear 180 def	%?brief sg position rear %?use LOC %?type REAL %?dflt    0.00
		} { 
		/LDsgPosRear 0 def	%?brief sg position rear %?use LOC %?type REAL %?dflt    0.00
	} ifelse 
	idWheel11Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		30 78 translate 
		LDwheel11Angle 
		rotate 
		1 1 scale 
		LXwheel11Error false false false (ssTravel008) 
		baSwitchSymbolColor001 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel12Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		30 -78 translate 
		LDwheel12Angle 
		rotate 
		1 1 scale 
		LXwheel12Error false false false (ssTravel008) 
		baSwitchSymbolColor001 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel13Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		-30 78 translate 
		LDwheel13Angle 
		rotate 
		1 1 scale 
		LXwheel13Error false false false (ssTravel008) 
		baSwitchSymbolColor001 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel14Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		-30 -78 translate 
		LDwheel14Angle 
		rotate 
		1 1 scale 
		LXwheel14Error false false false (ssTravel008) 
		baSwitchSymbolColor001 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel21Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		90 78 translate 
		LDwheel21Angle 
		rotate 
		1 1 scale 
		LXwheel21Error false false false (ssTravel008) 
		baSwitchSymbolColor001 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel22Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		90 -78 translate 
		LDwheel22Angle 
		rotate 
		1 1 scale 
		LXwheel22Error false false false (ssTravel008) 
		baSwitchSymbolColor001 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel23Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		-90 78 translate 
		LDwheel23Angle 
		rotate 
		1 1 scale 
		LXwheel23Error false false false (ssTravel008) 
		baSwitchSymbolColor001 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel24Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		-90 -78 translate 
		LDwheel24Angle 
		rotate 
		1 1 scale 
		LXwheel24Error false false false (ssTravel008) 
		baSwitchSymbolColor001 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel31Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		150 78 translate 
		LDwheel31Angle 
		rotate 
		1 1 scale 
		LXwheel31Error false false false (ssTravel008) 
		baSwitchSymbolColor001 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel32Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		150 -78 translate 
		LDwheel32Angle 
		rotate 
		1 1 scale 
		LXwheel32Error false false false (ssTravel008) 
		baSwitchSymbolColor001 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel33Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		-150 78 translate 
		LDwheel33Angle 
		rotate 
		1 1 scale 
		LXwheel33Error false false false (ssTravel008) 
		baSwitchSymbolColor001 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel34Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		-150 -78 translate 
		LDwheel34Angle 
		rotate 
		1 1 scale 
		LXwheel34Error false false false (ssTravel008) 
		baSwitchSymbolColor001 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel41Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		210 78 translate 
		LDwheel41Angle 
		rotate 
		1 1 scale 
		LXwheel41Error false false false (ssTravel008) 
		baSwitchSymbolColor001 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel42Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		210 -78 translate 
		LDwheel42Angle 
		rotate 
		1 1 scale 
		LXwheel42Error false false false (ssTravel008) 
		baSwitchSymbolColor001 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel43Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		-210 78 translate 
		LDwheel43Angle 
		rotate 
		1 1 scale 
		LXwheel43Error false false false (ssTravel008) 
		baSwitchSymbolColor001 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel44Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		-210 -78 translate 
		LDwheel44Angle 
		rotate 
		1 1 scale 
		LXwheel44Error false false false (ssTravel008) 
		baSwitchSymbolColor001 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel51Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		270 78 translate 
		LDwheel51Angle 
		rotate 
		1 1 scale 
		LXwheel51Error false false false (ssTravel008) 
		baSwitchSymbolColor001 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel52Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		270 -78 translate 
		LDwheel52Angle 
		rotate 
		1 1 scale 
		LXwheel52Error false false false (ssTravel008) 
		baSwitchSymbolColor001 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel53Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		-270 78 translate 
		LDwheel53Angle 
		rotate 
		1 1 scale 
		LXwheel53Error false false false (ssTravel008) 
		baSwitchSymbolColor001 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel54Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		-270 -78 translate 
		LDwheel54Angle 
		rotate 
		1 1 scale 
		LXwheel54Error false false false (ssTravel008) 
		baSwitchSymbolColor001 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel61Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		330 78 translate 
		LDwheel61Angle 
		rotate 
		1 1 scale 
		LXwheel61Error false false false (ssTravel008) 
		baSwitchSymbolColor001 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel62Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		330 -78 translate 
		LDwheel62Angle 
		rotate 
		1 1 scale 
		LXwheel62Error false false false (ssTravel008) 
		baSwitchSymbolColor001 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel63Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		-330 78 translate 
		LDwheel63Angle 
		rotate 
		1 1 scale 
		LXwheel63Error false false false (ssTravel008) 
		baSwitchSymbolColor001 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel64Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		-330 -78 translate 
		LDwheel64Angle 
		rotate 
		1 1 scale 
		LXwheel64Error false false false (ssTravel008) 
		baSwitchSymbolColor001 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel71Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		390 78 translate 
		LDwheel71Angle 
		rotate 
		1 1 scale 
		LXwheel71Error false false false (ssTravel008) 
		baSwitchSymbolColor001 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel72Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		390 -78 translate 
		LDwheel72Angle 
		rotate 
		1 1 scale 
		LXwheel72Error false false false (ssTravel008) 
		baSwitchSymbolColor001 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel73Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		-390 78 translate 
		LDwheel73Angle 
		rotate 
		1 1 scale 
		LXwheel73Error false false false (ssTravel008) 
		baSwitchSymbolColor001 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel74Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		-390 -78 translate 
		LDwheel74Angle 
		rotate 
		1 1 scale 
		LXwheel74Error false false false (ssTravel008) 
		baSwitchSymbolColor001 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel81Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		450 78 translate 
		LDwheel81Angle 
		rotate 
		1 1 scale 
		LXwheel81Error false false false (ssTravel008) 
		baSwitchSymbolColor001 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel82Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		450 -78 translate 
		LDwheel82Angle 
		rotate 
		1 1 scale 
		LXwheel82Error false false false (ssTravel008) 
		baSwitchSymbolColor001 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel83Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		-450 78 translate 
		LDwheel83Angle 
		rotate 
		1 1 scale 
		LXwheel83Error false false false (ssTravel008) 
		baSwitchSymbolColor001 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel84Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		-450 -78 translate 
		LDwheel84Angle 
		rotate 
		1 1 scale 
		LXwheel84Error false false false (ssTravel008) 
		baSwitchSymbolColor001 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel11Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		30 128 translate 
		LDsgPosRear 
		rotate 
		0.67 1 scale 
		irWheel11Deviation 3.10 () 70 true false false 
		LXwheel11Error FSfatFont 0 0 
		baValueText002 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel12Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		30 -128 translate 
		LDsgPosRear 
		rotate 
		0.67 1 scale 
		irWheel12Deviation 3.10 () 70 true false false 
		LXwheel12Error FSfatFont 0 0 
		baValueText002 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel13Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		-30 128 translate 
		LDsgPosRear 
		rotate 
		0.67 1 scale 
		irWheel13Deviation 3.10 () 70 true false false 
		LXwheel13Error FSfatFont 0 0 
		baValueText002 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel14Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		-30 -128 translate 
		LDsgPosRear 
		rotate 
		0.67 1 scale 
		irWheel14Deviation 3.10 () 70 true false false 
		LXwheel14Error FSfatFont 0 0 
		baValueText002 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel21Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		90 128 translate 
		LDsgPosRear 
		rotate 
		0.67 1 scale 
		irWheel21Deviation 3.10 () 70 true false false 
		LXwheel21Error FSfatFont 0 0 
		baValueText002 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel22Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		90 -128 translate 
		LDsgPosRear 
		rotate 
		0.67 1 scale 
		irWheel22Deviation 3.10 () 70 true false false 
		LXwheel22Error FSfatFont 0 0 
		baValueText002 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel23Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		-90 128 translate 
		LDsgPosRear 
		rotate 
		0.67 1 scale 
		irWheel23Deviation 3.10 () 70 true false false 
		LXwheel23Error FSfatFont 0 0 
		baValueText002 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel24Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		-90 -128 translate 
		LDsgPosRear 
		rotate 
		0.67 1 scale 
		irWheel24Deviation 3.10 () 70 true false false 
		LXwheel24Error FSfatFont 0 0 
		baValueText002 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel31Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		150 128 translate 
		LDsgPosRear 
		rotate 
		0.67 1 scale 
		irWheel31Deviation 3.10 () 70 true false false 
		LXwheel31Error FSfatFont 0 0 
		baValueText002 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel32Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		150 -128 translate 
		LDsgPosRear 
		rotate 
		0.67 1 scale 
		irWheel32Deviation 3.10 () 70 true false false 
		LXwheel32Error FSfatFont 0 0 
		baValueText002 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel33Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		-150 128 translate 
		LDsgPosRear 
		rotate 
		0.67 1 scale 
		irWheel33Deviation 3.10 () 70 true false false 
		LXwheel33Error FSfatFont 0 0 
		baValueText002 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel34Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		-150 -128 translate 
		LDsgPosRear 
		rotate 
		0.67 1 scale 
		irWheel34Deviation 3.10 () 70 true false false 
		LXwheel34Error FSfatFont 0 0 
		baValueText002 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel41Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		210 128 translate 
		LDsgPosRear 
		rotate 
		0.67 1 scale 
		irWheel41Deviation 3.10 () 70 true false false 
		LXwheel41Error FSfatFont 0 0 
		baValueText002 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel42Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		210 -128 translate 
		LDsgPosRear 
		rotate 
		0.67 1 scale 
		irWheel42Deviation 3.10 () 70 true false false 
		LXwheel42Error FSfatFont 0 0 
		baValueText002 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel43Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		-210 128 translate 
		LDsgPosRear 
		rotate 
		0.67 1 scale 
		irWheel43Deviation 3.10 () 70 true false false 
		LXwheel43Error FSfatFont 0 0 
		baValueText002 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel44Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		-210 -128 translate 
		LDsgPosRear 
		rotate 
		0.67 1 scale 
		irWheel44Deviation 3.10 () 70 true false false 
		LXwheel44Error FSfatFont 0 0 
		baValueText002 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel51Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		270 128 translate 
		LDsgPosRear 
		rotate 
		0.67 1 scale 
		irWheel51Deviation 3.10 () 70 true false false 
		LXwheel51Error FSfatFont 0 0 
		baValueText002 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel52Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		270 -128 translate 
		LDsgPosRear 
		rotate 
		0.67 1 scale 
		irWheel52Deviation 3.10 () 70 true false false 
		LXwheel52Error FSfatFont 0 0 
		baValueText002 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel53Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		-270 128 translate 
		LDsgPosRear 
		rotate 
		0.67 1 scale 
		irWheel53Deviation 3.10 () 70 true false false 
		LXwheel53Error FSfatFont 0 0 
		baValueText002 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel54Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		-270 -128 translate 
		LDsgPosRear 
		rotate 
		0.67 1 scale 
		irWheel54Deviation 3.10 () 70 true false false 
		LXwheel54Error FSfatFont 0 0 
		baValueText002 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel61Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		330 128 translate 
		LDsgPosRear 
		rotate 
		0.67 1 scale 
		irWheel61Deviation 3.10 () 70 true false false 
		LXwheel61Error FSfatFont 0 0 
		baValueText002 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel62Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		330 -128 translate 
		LDsgPosRear 
		rotate 
		0.67 1 scale 
		irWheel62Deviation 3.10 () 70 true false false 
		LXwheel62Error FSfatFont 0 0 
		baValueText002 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel63Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		-330 128 translate 
		LDsgPosRear 
		rotate 
		0.67 1 scale 
		irWheel63Deviation 3.10 () 70 true false false 
		LXwheel63Error FSfatFont 0 0 
		baValueText002 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel64Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		-330 -128 translate 
		LDsgPosRear 
		rotate 
		0.67 1 scale 
		irWheel64Deviation 3.10 () 70 true false false 
		LXwheel64Error FSfatFont 0 0 
		baValueText002 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel71Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		390 128 translate 
		LDsgPosRear 
		rotate 
		0.67 1 scale 
		irWheel71Deviation 3.10 () 70 true false false 
		LXwheel71Error FSfatFont 0 0 
		baValueText002 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel72Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		390 -128 translate 
		LDsgPosRear 
		rotate 
		0.67 1 scale 
		irWheel72Deviation 3.10 () 70 true false false 
		LXwheel72Error FSfatFont 0 0 
		baValueText002 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel73Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		-390 128 translate 
		LDsgPosRear 
		rotate 
		0.67 1 scale 
		irWheel73Deviation 3.10 () 70 true false false 
		LXwheel73Error FSfatFont 0 0 
		baValueText002 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel74Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		-390 -128 translate 
		LDsgPosRear 
		rotate 
		0.67 1 scale 
		irWheel74Deviation 3.10 () 70 true false false 
		LXwheel74Error FSfatFont 0 0 
		baValueText002 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel81Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		450 128 translate 
		LDsgPosRear 
		rotate 
		0.67 1 scale 
		irWheel81Deviation 3.10 () 70 true false false 
		LXwheel81Error FSfatFont 0 0 
		baValueText002 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel82Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		450 -128 translate 
		LDsgPosRear 
		rotate 
		0.67 1 scale 
		irWheel82Deviation 3.10 () 70 true false false 
		LXwheel82Error FSfatFont 0 0 
		baValueText002 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel83Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		-450 128 translate 
		LDsgPosRear 
		rotate 
		0.67 1 scale 
		irWheel83Deviation 3.10 () 70 true false false 
		LXwheel83Error FSfatFont 0 0 
		baValueText002 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel84Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		-450 -128 translate 
		LDsgPosRear 
		rotate 
		0.67 1 scale 
		irWheel84Deviation 3.10 () 70 true false false 
		LXwheel84Error FSfatFont 0 0 
		baValueText002 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel11Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		30 30 translate 
		LDsgPosRear 
		rotate 
		0.67 0.80 scale 
		11 3 () () false false false false 
		FSfatFont 0 
		baValueText001 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel12Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		30 -30 translate 
		LDsgPosRear 
		rotate 
		0.67 0.80 scale 
		12 3 () () false false false false 
		FSfatFont 0 
		baValueText001 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel21Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		90 30 translate 
		LDsgPosRear 
		rotate 
		0.67 0.80 scale 
		21 3 () () false false false false 
		FSfatFont 0 
		baValueText001 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel22Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		90 -30 translate 
		LDsgPosRear 
		rotate 
		0.67 0.80 scale 
		22 3 () () false false false false 
		FSfatFont 0 
		baValueText001 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel31Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		150 30 translate 
		LDsgPosRear 
		rotate 
		0.67 0.80 scale 
		31 3 () () false false false false 
		FSfatFont 0 
		baValueText001 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel32Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		150 -30 translate 
		LDsgPosRear 
		rotate 
		0.67 0.80 scale 
		32 3 () () false false false false 
		FSfatFont 0 
		baValueText001 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel41Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		210 30 translate 
		LDsgPosRear 
		rotate 
		0.67 0.80 scale 
		41 3 () () false false false false 
		FSfatFont 0 
		baValueText001 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel42Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		210 -30 translate 
		LDsgPosRear 
		rotate 
		0.67 0.80 scale 
		42 3 () () false false false false 
		FSfatFont 0 
		baValueText001 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel51Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		270 30 translate 
		LDsgPosRear 
		rotate 
		0.67 0.80 scale 
		51 3 () () false false false false 
		FSfatFont 0 
		baValueText001 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel52Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		270 -30 translate 
		LDsgPosRear 
		rotate 
		0.67 0.80 scale 
		52 3 () () false false false false 
		FSfatFont 0 
		baValueText001 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel61Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		330 30 translate 
		LDsgPosRear 
		rotate 
		0.67 0.80 scale 
		61 3 () () false false false false 
		FSfatFont 0 
		baValueText001 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel62Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		330 -30 translate 
		LDsgPosRear 
		rotate 
		0.67 0.80 scale 
		62 3 () () false false false false 
		FSfatFont 0 
		baValueText001 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel71Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		390 30 translate 
		LDsgPosRear 
		rotate 
		0.67 0.80 scale 
		71 3 () () false false false false 
		FSfatFont 0 
		baValueText001 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel72Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		390 -30 translate 
		LDsgPosRear 
		rotate 
		0.67 0.80 scale 
		72 3 () () false false false false 
		FSfatFont 0 
		baValueText001 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel81Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		450 30 translate 
		LDsgPosRear 
		rotate 
		0.67 0.80 scale 
		81 3 () () false false false false 
		FSfatFont 0 
		baValueText001 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel82Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		450 -30 translate 
		LDsgPosRear 
		rotate 
		0.67 0.80 scale 
		82 3 () () false false false false 
		FSfatFont 0 
		baValueText001 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel13Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		-30 30 translate 
		LDsgPosRear 
		rotate 
		0.67 0.80 scale 
		13 3 () () false false false false 
		FSfatFont 0 
		baValueText001 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel14Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		-30 -30 translate 
		LDsgPosRear 
		rotate 
		0.67 0.80 scale 
		14 3 () () false false false false 
		FSfatFont 0 
		baValueText001 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel23Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		-90 30 translate 
		LDsgPosRear 
		rotate 
		0.67 0.80 scale 
		23 3 () () false false false false 
		FSfatFont 0 
		baValueText001 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel24Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		-90 -30 translate 
		LDsgPosRear 
		rotate 
		0.67 0.80 scale 
		24 3 () () false false false false 
		FSfatFont 0 
		baValueText001 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel33Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		-150 30 translate 
		LDsgPosRear 
		rotate 
		0.67 0.80 scale 
		33 3 () () false false false false 
		FSfatFont 0 
		baValueText001 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel34Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		-150 -30 translate 
		LDsgPosRear 
		rotate 
		0.67 0.80 scale 
		34 3 () () false false false false 
		FSfatFont 0 
		baValueText001 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel43Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		-210 30 translate 
		LDsgPosRear 
		rotate 
		0.67 0.80 scale 
		43 3 () () false false false false 
		FSfatFont 0 
		baValueText001 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel44Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		-210 -30 translate 
		LDsgPosRear 
		rotate 
		0.67 0.80 scale 
		44 3 () () false false false false 
		FSfatFont 0 
		baValueText001 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel53Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		-270 30 translate 
		LDsgPosRear 
		rotate 
		0.67 0.80 scale 
		53 3 () () false false false false 
		FSfatFont 0 
		baValueText001 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel54Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		-270 -30 translate 
		LDsgPosRear 
		rotate 
		0.67 0.80 scale 
		54 3 () () false false false false 
		FSfatFont 0 
		baValueText001 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel63Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		-330 30 translate 
		LDsgPosRear 
		rotate 
		0.67 0.80 scale 
		63 3 () () false false false false 
		FSfatFont 0 
		baValueText001 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel64Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		-330 -30 translate 
		LDsgPosRear 
		rotate 
		0.67 0.80 scale 
		64 3 () () false false false false 
		FSfatFont 0 
		baValueText001 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel73Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		-390 30 translate 
		LDsgPosRear 
		rotate 
		0.67 0.80 scale 
		73 3 () () false false false false 
		FSfatFont 0 
		baValueText001 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel74Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		-390 -30 translate 
		LDsgPosRear 
		rotate 
		0.67 0.80 scale 
		74 3 () () false false false false 
		FSfatFont 0 
		baValueText001 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel83Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		-450 30 translate 
		LDsgPosRear 
		rotate 
		0.67 0.80 scale 
		83 3 () () false false false false 
		FSfatFont 0 
		baValueText001 
		setcolor 
		setmatrix_nlw 
	} if 
	idWheel84Status 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		-450 -30 translate 
		LDsgPosRear 
		rotate 
		0.67 0.80 scale 
		84 3 () () false false false false 
		FSfatFont 0 
		baValueText001 
		setcolor 
		setmatrix_nlw 
	} if -60 98 moveto 
	-60 58 lineto 
	stroke 
	-60 -98 moveto 
	-60 -58 lineto 
	stroke 
	-60 58 moveto 
	-70 48 lineto 
	stroke 
	-60 -58 moveto 
	-70 -48 lineto 
	stroke 
	-60 98 moveto 
	-50 108 lineto 
	stroke 
	-60 -98 moveto 
	-50 -108 lineto 
	stroke 
	-50 108 moveto 
	50 108 lineto 
	stroke 
	-50 -108 moveto 
	50 -108 lineto 
	stroke 
	50 108 moveto 
	60 98 lineto 
	stroke 
	50 -108 moveto 
	60 -98 lineto 
	stroke 
	60 98 moveto 
	60 58 lineto 
	stroke 
	60 -98 moveto 
	60 -58 lineto 
	stroke 
	60 58 moveto 
	70 48 lineto 
	stroke 
	60 -58 moveto 
	70 -48 lineto 
	stroke 
	70 48 moveto 
	235 48 lineto 
	stroke 
	70 -48 moveto 
	235 -48 lineto 
	stroke 
	-235 -48 moveto 
	-70 -48 lineto 
	stroke 
	-235 48 moveto 
	-70 48 lineto 
	stroke 
	%?term_beg
	
	idWheel81Status 0 eq 
	idWheel82Status 0 eq and 
	idWheel71Status 0 eq 
	idWheel72Status 0 eq and 
	idWheel61Status 0 eq 
	idWheel62Status 0 eq and 
	idWheel51Status 0 eq 
	idWheel52Status 0 eq and and and and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		235 -48 translate 
		0 rotate 
		1 1 scale 
		1 0 0 0 96 
		baPageLine003 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	idWheel83Status 0 eq 
	idWheel84Status 0 eq and 
	idWheel73Status 0 eq 
	idWheel74Status 0 eq and 
	idWheel63Status 0 eq 
	idWheel64Status 0 eq and 
	idWheel53Status 0 eq 
	idWheel54Status 0 eq and and and and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		-235 -48 translate 
		0 rotate 
		1 1 scale 
		1 0 0 0 96 
		baPageLine003 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	idWheel81Status 0 gt 
	idWheel82Status 0 gt or 
	idWheel71Status 0 gt 
	idWheel72Status 0 gt or 
	idWheel61Status 0 gt 
	idWheel62Status 0 gt or 
	idWheel51Status 0 gt 
	idWheel52Status 0 gt or or or or 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		235 48 translate 
		0 rotate 
		1 1 scale 
		1 0 0 60 0 
		baPageLine003 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	idWheel81Status 0 eq 
	idWheel82Status 0 eq and 
	idWheel71Status 0 eq 
	idWheel72Status 0 eq and 
	idWheel61Status 0 eq 
	idWheel62Status 0 eq and 
	idWheel51Status 0 gt 
	idWheel52Status 0 gt or and and and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		295 -48 translate 
		0 rotate 
		1 1 scale 
		1 0 0 0 96 
		baPageLine003 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	idWheel81Status 0 gt 
	idWheel82Status 0 gt or 
	idWheel71Status 0 gt 
	idWheel72Status 0 gt or 
	idWheel61Status 0 gt 
	idWheel62Status 0 gt or 
	idWheel51Status 0 gt 
	idWheel52Status 0 gt or or or or 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		235 -48 translate 
		0 rotate 
		1 1 scale 
		1 0 0 60 0 
		baPageLine003 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	idWheel81Status 0 gt 
	idWheel82Status 0 gt or 
	idWheel71Status 0 gt 
	idWheel72Status 0 gt or 
	idWheel61Status 0 gt 
	idWheel62Status 0 gt or or or 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		295 48 translate 
		0 rotate 
		1 1 scale 
		1 0 0 60 0 
		baPageLine003 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	idWheel81Status 0 eq 
	idWheel82Status 0 eq and 
	idWheel71Status 0 eq 
	idWheel72Status 0 eq and 
	idWheel61Status 0 gt 
	idWheel62Status 0 gt or and and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		355 -48 translate 
		0 rotate 
		1 1 scale 
		1 0 0 0 96 
		baPageLine003 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	idWheel81Status 0 gt 
	idWheel82Status 0 gt or 
	idWheel71Status 0 gt 
	idWheel72Status 0 gt or 
	idWheel61Status 0 gt 
	idWheel62Status 0 gt or or or 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		295 -48 translate 
		0 rotate 
		1 1 scale 
		1 0 0 60 0 
		baPageLine003 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	idWheel81Status 0 gt 
	idWheel82Status 0 gt or 
	idWheel71Status 0 gt 
	idWheel72Status 0 gt or or 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		355 48 translate 
		0 rotate 
		1 1 scale 
		1 0 0 60 0 
		baPageLine003 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	idWheel81Status 0 eq 
	idWheel82Status 0 eq and 
	idWheel71Status 0 gt 
	idWheel72Status 0 gt or and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		415 -48 translate 
		0 rotate 
		1 1 scale 
		1 0 0 0 96 
		baPageLine003 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	idWheel81Status 0 gt 
	idWheel82Status 0 gt or 
	idWheel71Status 0 gt 
	idWheel72Status 0 gt or or 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		355 -48 translate 
		0 rotate 
		1 1 scale 
		1 0 0 60 0 
		baPageLine003 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	idWheel81Status 0 gt 
	idWheel82Status 0 gt or 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		415 48 translate 
		0 rotate 
		1 1 scale 
		1 0 0 60 0 
		baPageLine003 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	idWheel81Status 0 gt 
	idWheel82Status 0 gt or 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		475 -48 translate 
		0 rotate 
		1 1 scale 
		1 0 0 0 96 
		baPageLine003 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	idWheel81Status 0 gt 
	idWheel82Status 0 gt or 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		415 -48 translate 
		0 rotate 
		1 1 scale 
		1 0 0 60 0 
		baPageLine003 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	idWheel83Status 0 gt 
	idWheel84Status 0 gt or 
	idWheel73Status 0 gt 
	idWheel74Status 0 gt or 
	idWheel63Status 0 gt 
	idWheel64Status 0 gt or 
	idWheel53Status 0 gt 
	idWheel54Status 0 gt or or or or 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		-295 48 translate 
		0 rotate 
		1 1 scale 
		1 0 0 60 0 
		baPageLine003 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	idWheel83Status 0 eq 
	idWheel84Status 0 eq and 
	idWheel73Status 0 eq 
	idWheel74Status 0 eq and 
	idWheel63Status 0 eq 
	idWheel64Status 0 eq and 
	idWheel53Status 0 gt 
	idWheel54Status 0 gt or and and and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		-295 -48 translate 
		0 rotate 
		1 1 scale 
		1 0 0 0 96 
		baPageLine003 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	idWheel83Status 0 gt 
	idWheel84Status 0 gt or 
	idWheel73Status 0 gt 
	idWheel74Status 0 gt or 
	idWheel63Status 0 gt 
	idWheel64Status 0 gt or 
	idWheel53Status 0 gt 
	idWheel54Status 0 gt or or or or 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		-295 -48 translate 
		0 rotate 
		1 1 scale 
		1 0 0 60 0 
		baPageLine003 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	idWheel83Status 0 gt 
	idWheel84Status 0 gt or 
	idWheel73Status 0 gt 
	idWheel74Status 0 gt or 
	idWheel63Status 0 gt 
	idWheel64Status 0 gt or or or 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		-355 48 translate 
		0 rotate 
		1 1 scale 
		1 0 0 60 0 
		baPageLine003 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	idWheel83Status 0 eq 
	idWheel84Status 0 eq and 
	idWheel73Status 0 eq 
	idWheel74Status 0 eq and 
	idWheel63Status 0 gt 
	idWheel64Status 0 gt or and and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		-355 -48 translate 
		0 rotate 
		1 1 scale 
		1 0 0 0 96 
		baPageLine003 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	idWheel83Status 0 gt 
	idWheel84Status 0 gt or 
	idWheel73Status 0 gt 
	idWheel74Status 0 gt or 
	idWheel63Status 0 gt 
	idWheel64Status 0 gt or or or 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		-355 -48 translate 
		0 rotate 
		1 1 scale 
		1 0 0 60 0 
		baPageLine003 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	idWheel83Status 0 gt 
	idWheel84Status 0 gt or 
	idWheel73Status 0 gt 
	idWheel74Status 0 gt or or 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		-415 48 translate 
		0 rotate 
		1 1 scale 
		1 0 0 60 0 
		baPageLine003 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	idWheel83Status 0 eq 
	idWheel84Status 0 eq and 
	idWheel73Status 0 gt 
	idWheel74Status 0 gt or and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		-415 -48 translate 
		0 rotate 
		1 1 scale 
		1 0 0 0 96 
		baPageLine003 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	idWheel83Status 0 gt 
	idWheel84Status 0 gt or 
	idWheel73Status 0 gt 
	idWheel74Status 0 gt or or 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		-415 -48 translate 
		0 rotate 
		1 1 scale 
		1 0 0 60 0 
		baPageLine003 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	idWheel83Status 0 gt 
	idWheel84Status 0 gt or 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		-475 48 translate 
		0 rotate 
		1 1 scale 
		1 0 0 60 0 
		baPageLine003 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	idWheel83Status 0 gt 
	idWheel84Status 0 gt or 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		-475 -48 translate 
		0 rotate 
		1 1 scale 
		1 0 0 0 96 
		baPageLine003 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	idWheel83Status 0 gt 
	idWheel84Status 0 gt or 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		-475 -48 translate 
		0 rotate 
		1 1 scale 
		1 0 0 60 0 
		baPageLine003 
		setcolor 
		setmatrix_nlw 
	} if 
} def
%?partend

%?partdef spTravel007
%?fn	spTravel007
%?brief	wheel or strut error
%?bbox	0 0 79 79
/spTravel007 {
	matrix currentmatrix_nlw 
	currentcolor 
	-7 -5 translate 
	0 rotate 
	0.87 0.87 scale 
	ssTravel014 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	23 20 translate 
	0 rotate 
	0.75 0.75 scale 
	ssTravel009 
	setcolor 
	setmatrix_nlw 
} def
%?partend

%?partdef spWinch005
%?fn	spWinch005
%?brief	slacl rope winch 1 or winch 2
%?bbox	0 0 79 79
/spWinch005 {
	/isString exch def	%?brief string %?use INP %?type STRI %?dflt 
	matrix currentmatrix_nlw 
	currentcolor 
	40 60 translate 
	0 rotate 
	0.75 0.75 scale 
	isString FSfatFont 8 
	baText001 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	10 3 translate 
	0 rotate 
	0.75 0.75 scale 
	gsHook003 
	setcolor 
	setmatrix_nlw 
} def
%?partend

%?partdef spCranePage004
%?fn	spCranePage004
%?brief	crane main page when sensor error values red flashing
%?bbox	0 0 719 559
/spCranePage004 {
	/ixLoadCurve75 exch def	%?brief load curve 75 %?use INP %?type BOOL %?dflt false
	/idOperationMode exch def	%?brief operation mode %?use INP %?type DINT %?dflt 0
	/irSgSpeed exch def	%?brief sg speed %?use INP %?type REAL %?dflt    0.00
	/irLgSpeed exch def	%?brief lg speed %?use INP %?type REAL %?dflt    0.00
	/ixEnaButton exch def	%?brief enable button %?use INP %?type BOOL %?dflt false
	/ixSgAngleError exch def	%?brief sg angle error %?use INP %?type BOOL %?dflt false
	/ixLgAngleError exch def	%?brief angle error %?use INP %?type BOOL %?dflt false
	/ixLoadError exch def	%?brief load error %?use INP %?type BOOL %?dflt false
	/idChangeUnit exch def	%?brief change unit %?use INP %?type DINT %?dflt 0
	/ixUtilizationErr exch def	%?brief utilization error %?use INP %?type BOOL %?dflt false
	/ixHgDown exch def	%?brief hoisting gear down %?use INP %?type BOOL %?dflt false
	/ixHgUp exch def	%?brief hoisting gear up %?use INP %?type BOOL %?dflt false
	/ixLgDown exch def	%?brief luffing gear down %?use INP %?type BOOL %?dflt false
	/ixLgUp exch def	%?brief luffing gear up %?use INP %?type BOOL %?dflt false
	/ixWindSpeedHigh exch def	%?brief wind speed high %?use INP %?type BOOL %?dflt false
	/irWindSpeed exch def	%?brief wind speed [m/s] %?use INP %?type REAL %?dflt    0.00
	/irRopeWinch2 exch def	%?brief rope winch 2 [m] %?use INP %?type REAL %?dflt    0.00
	/irRopeWinch1 exch def	%?brief rope winch 1 [m] %?use INP %?type REAL %?dflt    0.00
	/irResetLoad exch def	%?brief reset load [t] %?use INP %?type REAL %?dflt    0.00
	/irTaraLoad exch def	%?brief tara load [t] %?use INP %?type REAL %?dflt    0.00
	/irMaxLoad exch def	%?brief maximum load [t] %?use INP %?type REAL %?dflt    0.00
	/irActualLoad exch def	%?brief actual load [t] %?use INP %?type REAL %?dflt    0.00
	/irUtilisation exch def	%?brief utilisation %?use INP %?type REAL %?dflt    0.00
	/irOutreach exch def	%?brief outreach [m] %?use INP %?type REAL %?dflt    0.00
	/irSgPosition exch def	%?brief slewing gear position [°] %?use INP %?type REAL %?dflt    0.00
	/irJibAngle exch def	%?brief jib angle [°] %?use INP %?type REAL %?dflt    0.00
	/irCraneType exch def	%?brief crane type (MTC=1; BOS=2; CBO=3; CBG=4; RL=5) %?use INP %?type REAL %?dflt    0.00
	/ixResetLoadAct exch def	%?brief reset load active %?use INP %?type BOOL %?dflt false
	/ixTwoWinch exch def	%?brief two winches selected %?use INP %?type BOOL %?dflt false
	/ixLmlWarning exch def	%?brief lml warning %?use INP %?type BOOL %?dflt false
	/ixLmlAlarm exch def	%?brief lml alarm %?use INP %?type BOOL %?dflt false
	/LXsgPosSetZero false def	%?brief sg positon set to zero %?use LOC %?type BOOL %?dflt false
	/LDsgPosition 0 def	%?brief slewing ger position modified %?use LOC %?type REAL %?dflt    0.00
	ixWindSpeedHigh true eq {	
		true setflash 
	} if 
	matrix currentmatrix_nlw 
	currentcolor 
	281 495 translate 
	0 rotate 
	1 1 scale 
	irWindSpeed 3 false 
	ixWindSpeedHigh FSfatFont 0.75 
	baValueSpeed002 
	setcolor 
	setmatrix_nlw 
	false setflash 
	ixLgAngleError true eq {	
		true setflash 
	} if 
	matrix currentmatrix_nlw 
	currentcolor 
	305 425 translate 
	0 rotate 
	1 1 scale 
	irJibAngle 3 (°) false 
	ixLgAngleError FSfatFont 1 
	baValue001 
	setcolor 
	setmatrix_nlw 
	false setflash 
	matrix currentmatrix_nlw 
	currentcolor 
	210 120 translate 
	0 rotate 
	1 1 scale 
	true 
	irSgPosition 359.49 
	spGT001 
	/LXsgPosSetZero exch store 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	210 130 translate 
	0 rotate 
	1 1 scale 
	LXsgPosSetZero irSgPosition 0 
	FUN_SEL 
	/LDsgPosition exch store 
	setcolor 
	setmatrix_nlw 
	ixSgAngleError true eq {	
		true setflash 
	} if 
	matrix currentmatrix_nlw 
	currentcolor 
	225 145 translate 
	0 rotate 
	1 1 scale 
	LDsgPosition 3 (°) false 
	ixSgAngleError FSfatFont 1 
	baValue001 
	setcolor 
	setmatrix_nlw 
	false setflash 
	matrix currentmatrix_nlw 
	currentcolor 
	515 110 translate 
	0 rotate 
	1 1 scale 
	irRopeWinch1 3.10 false false 
	FSfatFont 0.75 
	baValueDist001 
	setcolor 
	setmatrix_nlw 
	ixTwoWinch true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		640 110 translate 
		0 rotate 
		1 1 scale 
		irRopeWinch2 3.10 false false 
		FSfatFont 0.75 
		baValueDist001 
		setcolor 
		setmatrix_nlw 
	} if 
	ixLgAngleError true eq {	
		true setflash 
	} if 
	matrix currentmatrix_nlw 
	currentcolor 
	465 315 translate 
	0 rotate 
	2 2 scale 
	irOutreach 3.10 false 
	ixLgAngleError FSfatFont 0.75 
	baValueDist001 
	setcolor 
	setmatrix_nlw 
	false setflash 
	ixLoadError true eq {	
		true setflash 
	} if 
	matrix currentmatrix_nlw 
	currentcolor 
	640 400 translate 
	0 rotate 
	2 2 scale 
	irActualLoad 3 false 
	ixLoadError FSfatFont idChangeUnit 0.75 
	baValueLoad001 
	setcolor 
	setmatrix_nlw 
	false setflash 
	ixUtilizationErr true eq {	
		true setflash 
	} if 
	matrix currentmatrix_nlw 
	currentcolor 
	450 425 translate 
	0 rotate 
	0.80 0.80 scale 
	irMaxLoad 3.10 false 
	ixUtilizationErr FSbigFont idChangeUnit 0.75 
	baValueLoad001 
	setcolor 
	setmatrix_nlw 
	false setflash 
	ixUtilizationErr true eq {	
		true setflash 
	} if 
	matrix currentmatrix_nlw 
	currentcolor 
	380 433 translate 
	0 rotate 
	0.80 0.80 scale 
	(max:) 
	FSbigFont 0 
	ixUtilizationErr false false false 
	baText002 
	setcolor 
	setmatrix_nlw 
	false setflash 
	ixUtilizationErr true eq {	
		ixUtilizationErr true eq {	
			true setflash 
		} if 
		matrix currentmatrix_nlw 
		currentcolor 
		Red 30 165 translate 
		0 rotate 
		1 1 scale 
		irUtilisation () 0 150 true true true false 
		ixLmlWarning ixLmlAlarm 1000 1000 0 0 6 30 305 true false 0 true 0 
		FSstdFont true 1 
		baBar006 
		setcolor 
		setmatrix_nlw 
		false setflash 
	} if 
	ixUtilizationErr false eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		30 165 translate 
		0 rotate 
		1 1 scale 
		irUtilisation () 0 150 true true true false 
		ixLmlWarning ixLmlAlarm 1000 1000 0 0 6 30 305 true false 0 true 0 
		FSstdFont true 1 
		baBar006 
		setcolor 
		setmatrix_nlw 
	} if 
	ixHgDown true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 380 59 translate 
		0 rotate 
		0.62 0.62 scale 
		gsGeneral001 
		setcolor 
		setmatrix_nlw 
	} if 
	ixHgUp true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 430 181 translate 
		180 rotate 
		0.62 0.62 scale 
		gsGeneral001 
		setcolor 
		setmatrix_nlw 
	} if 
	ixLgDown true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 655 338 translate 
		90 rotate 
		0.60 0.60 scale 
		gsGeneral001 
		setcolor 
		setmatrix_nlw 
	} if 
	ixLgUp true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 570 386 translate 
		270 rotate 
		0.60 0.60 scale 
		gsGeneral001 
		setcolor 
		setmatrix_nlw 
	} if 
	ixUtilizationErr true eq {	
		true setflash 
	} if 
	matrix currentmatrix_nlw 
	currentcolor 
	77 502 translate 
	0 rotate 
	0.75 0.75 scale 
	(%) 
	FSfatFont 0 
	ixUtilizationErr false false false 
	baText002 
	setcolor 
	setmatrix_nlw 
	false setflash 
	matrix currentmatrix_nlw 
	currentcolor 
	171 475 translate 
	0 rotate 
	0.75 0.75 scale 
	ixWindSpeedHigh false false false (ssWind001) 
	baSwitchSymbolColor004 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	545 290 translate 
	0 rotate 
	1 1 scale 
	ixLgAngleError false false false (gsLimit019) 
	baSwitchSymbolColor004 
	setcolor 
	setmatrix_nlw 
	idChangeUnit 4 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		440 460 translate 
		0 rotate 
		0.60 0.60 scale 
		(lb*1000) 
		FSmsgBigFont 0 
		baText001 
		setcolor 
		setmatrix_nlw 
	} if 
	irCraneType 1 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		63 84 translate 
		0 rotate 
		1.80 1.80 scale_nlw 
		ssCrane011 
		setcolor 
		setmatrix_nlw 
	} if 
	irCraneType 2 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		63 84 translate 
		0 rotate 
		1.80 1.80 scale_nlw 
		ssCrane012 
		setcolor 
		setmatrix_nlw 
	} if 
	irCraneType 3 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		63 84 translate 
		0 rotate 
		1.80 1.80 scale_nlw 
		ssCrane013 
		setcolor 
		setmatrix_nlw 
	} if 
	ixLoadCurve75 true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		155 460 translate 
		0 rotate 
		0.67 0.67 scale 
		75 3 (%) false false 
		FSfatFont 1 
		baValue001 
		setcolor 
		setmatrix_nlw 
	} if 
	ixLoadCurve75 false eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		155 460 translate 
		0 rotate 
		0.67 0.67 scale 
		66 3 (%) false false 
		FSfatFont 1 
		baValue001 
		setcolor 
		setmatrix_nlw 
	} if 
	matrix currentmatrix_nlw 
	currentcolor 
	110 410 translate 
	0 rotate 
	0.75 0.75 scale 
	ssLmb01 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	375 85 translate 
	0 rotate 
	0.75 0.75 scale 
	gsWinch001 
	setcolor 
	setmatrix_nlw 
} def
%?partend

%?partdef spSpreader001
%?fn	spSpreader001
%?brief	Spreader Twistlck Smbol
%?bbox	0 0 79 79
/spSpreader001 {
	/ixSpInPosition exch def	%?brief spreader in position %?use INP %?type BOOL %?dflt false
	/ixUnLocked exch def	%?brief twistlock Unlocked %?use INP %?type BOOL %?dflt false
	/ixLocked exch def	%?brief twistlock locked %?use INP %?type BOOL %?dflt false
	%?term_beg
	
	ixUnLocked false eq 
	ixLocked true eq and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		false false false 
		ixSpInPosition (ssSpreader002) 
		baSwitchSymbolColor001 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	ixUnLocked true eq 
	ixLocked false eq and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		false false false 
		ixSpInPosition (ssSpreader003) 
		baSwitchSymbolColor001 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	ixUnLocked ixLocked eq 
	%?term_end
	{	
		%?term_beg
		
		ixUnLocked ixLocked eq 
		%?term_end
		{	
			true setflash 
		} if 
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		false true false false (ssSpreader002) 
		baSwitchSymbolColor001 
		setcolor 
		setmatrix_nlw 
		false setflash 
	} if 
} def
%?partend

%?partdef spCranePage003
%?fn	spCranePage003
%?brief	crane main page when sensor error values red flashing
%?bbox	0 0 719 559
/spCranePage003 {
	/ixLoadCurve75 exch def	%?brief load curve 75 %?use INP %?type BOOL %?dflt false
	/idOperationMode exch def	%?brief operation mode %?use INP %?type DINT %?dflt 0
	/irSgSpeed exch def	%?brief sg speed %?use INP %?type REAL %?dflt    0.00
	/irLgSpeed exch def	%?brief lg speed %?use INP %?type REAL %?dflt    0.00
	/ixEnaButton exch def	%?brief enable button %?use INP %?type BOOL %?dflt false
	/ixSgAngleError exch def	%?brief sg angle error %?use INP %?type BOOL %?dflt false
	/ixLgAngleError exch def	%?brief angle error %?use INP %?type BOOL %?dflt false
	/ixLoadError exch def	%?brief load error %?use INP %?type BOOL %?dflt false
	/idChangeUnit exch def	%?brief change unit %?use INP %?type DINT %?dflt 0
	/ixUtilizationErr exch def	%?brief utilization error %?use INP %?type BOOL %?dflt false
	/ixHgDown exch def	%?brief hoisting gear down %?use INP %?type BOOL %?dflt false
	/ixHgUp exch def	%?brief hoisting gear up %?use INP %?type BOOL %?dflt false
	/ixLgDown exch def	%?brief luffing gear down %?use INP %?type BOOL %?dflt false
	/ixLgUp exch def	%?brief luffing gear up %?use INP %?type BOOL %?dflt false
	/ixWindSpeedHigh exch def	%?brief wind speed high %?use INP %?type BOOL %?dflt false
	/irWindSpeed exch def	%?brief wind speed [m/s] %?use INP %?type REAL %?dflt    0.00
	/irRopeWinch2 exch def	%?brief rope winch 2 [m] %?use INP %?type REAL %?dflt    0.00
	/irRopeWinch1 exch def	%?brief rope winch 1 [m] %?use INP %?type REAL %?dflt    0.00
	/irResetLoad exch def	%?brief reset load [t] %?use INP %?type REAL %?dflt    0.00
	/irTaraLoad exch def	%?brief tara load [t] %?use INP %?type REAL %?dflt    0.00
	/irMaxLoad exch def	%?brief maximum load [t] %?use INP %?type REAL %?dflt    0.00
	/irActualLoad exch def	%?brief actual load [t] %?use INP %?type REAL %?dflt    0.00
	/irUtilisation exch def	%?brief utilisation %?use INP %?type REAL %?dflt    0.00
	/irOutreach exch def	%?brief outreach [m] %?use INP %?type REAL %?dflt    0.00
	/irSgPosition exch def	%?brief slewing gear position [°] %?use INP %?type REAL %?dflt    0.00
	/irJibAngle exch def	%?brief jib angle [°] %?use INP %?type REAL %?dflt    0.00
	/irCraneType exch def	%?brief crane type (MTC=1; BOS=2; CBO=3; CBG=4; RL=5) %?use INP %?type REAL %?dflt    0.00
	/ixResetLoadAct exch def	%?brief reset load active %?use INP %?type BOOL %?dflt false
	/ixTwoWinch exch def	%?brief two winches selected %?use INP %?type BOOL %?dflt false
	/ixLmlWarning exch def	%?brief lml warning %?use INP %?type BOOL %?dflt false
	/ixLmlAlarm exch def	%?brief lml alarm %?use INP %?type BOOL %?dflt false
	/LXsgPosSetZero false def	%?brief sg positon set to zero %?use LOC %?type BOOL %?dflt false
	/LDsgPosition 0 def	%?brief slewing ger position modified %?use LOC %?type REAL %?dflt    0.00
	ixWindSpeedHigh true eq {	
		true setflash 
	} if 
	matrix currentmatrix_nlw 
	currentcolor 
	281 495 translate 
	0 rotate 
	1 1 scale 
	irWindSpeed 3 false 
	ixWindSpeedHigh FSfatFont 0.75 
	baValueSpeed002 
	setcolor 
	setmatrix_nlw 
	false setflash 
	ixLgAngleError true eq {	
		true setflash 
	} if 
	matrix currentmatrix_nlw 
	currentcolor 
	365 405 translate 
	0 rotate 
	1 1 scale 
	irJibAngle 3 (°) false 
	ixLgAngleError FSfatFont 1 
	baValue001 
	setcolor 
	setmatrix_nlw 
	false setflash 
	matrix currentmatrix_nlw 
	currentcolor 
	210 120 translate 
	0 rotate 
	1 1 scale 
	true 
	irSgPosition 359.49 
	spGT001 
	/LXsgPosSetZero exch store 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	210 130 translate 
	0 rotate 
	1 1 scale 
	LXsgPosSetZero irSgPosition 0 
	FUN_SEL 
	/LDsgPosition exch store 
	setcolor 
	setmatrix_nlw 
	ixSgAngleError true eq {	
		true setflash 
	} if 
	matrix currentmatrix_nlw 
	currentcolor 
	225 145 translate 
	0 rotate 
	1 1 scale 
	LDsgPosition 3 (°) false 
	ixSgAngleError FSfatFont 1 
	baValue001 
	setcolor 
	setmatrix_nlw 
	false setflash 
	matrix currentmatrix_nlw 
	currentcolor 
	515 110 translate 
	0 rotate 
	1 1 scale 
	irRopeWinch1 3.10 false false 
	FSfatFont 0.75 
	baValueDist001 
	setcolor 
	setmatrix_nlw 
	ixTwoWinch true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		640 110 translate 
		0 rotate 
		1 1 scale 
		irRopeWinch2 3.10 false false 
		FSfatFont 0.75 
		baValueDist001 
		setcolor 
		setmatrix_nlw 
	} if 
	ixLgAngleError true eq {	
		true setflash 
	} if 
	matrix currentmatrix_nlw 
	currentcolor 
	506 185 translate 
	0 rotate 
	2 2 scale 
	irOutreach 3.10 false 
	ixLgAngleError FSfatFont 0.75 
	baValueDist001 
	setcolor 
	setmatrix_nlw 
	false setflash 
	ixLoadError true eq {	
		true setflash 
	} if 
	matrix currentmatrix_nlw 
	currentcolor 
	671 270 translate 
	0 rotate 
	2 2 scale 
	irTaraLoad 3 false 
	ixLoadError FSfatFont idChangeUnit 0.75 
	baValueLoad001 
	setcolor 
	setmatrix_nlw 
	false setflash 
	ixUtilizationErr true eq {	
		true setflash 
	} if 
	matrix currentmatrix_nlw 
	currentcolor 
	450 295 translate 
	0 rotate 
	0.80 0.80 scale 
	irMaxLoad 3.10 false 
	ixUtilizationErr FSbigFont idChangeUnit 0.75 
	baValueLoad001 
	setcolor 
	setmatrix_nlw 
	false setflash 
	ixUtilizationErr true eq {	
		true setflash 
	} if 
	matrix currentmatrix_nlw 
	currentcolor 
	380 303 translate 
	0 rotate 
	0.80 0.80 scale 
	(max:) 
	FSbigFont 0 
	ixUtilizationErr false false false 
	baText002 
	setcolor 
	setmatrix_nlw 
	false setflash 
	ixLoadError true eq {	
		true setflash 
	} if 
	matrix currentmatrix_nlw 
	currentcolor 
	450 270 translate 
	0 rotate 
	0.80 0.80 scale 
	irActualLoad 3.10 false 
	ixLoadError FSbigFont idChangeUnit 0.75 
	baValueLoad001 
	setcolor 
	setmatrix_nlw 
	false setflash 
	ixResetLoadAct true eq {	
		ixLoadError true eq {	
			true setflash 
		} if 
		matrix currentmatrix_nlw 
		currentcolor 
		Green 656 323 translate 
		0 rotate 
		0.80 0.80 scale 
		irResetLoad 3.10 false 
		ixLoadError FSfatFont idChangeUnit 0.75 
		baValueLoad001 
		setcolor 
		setmatrix_nlw 
		false setflash 
	} if 
	ixUtilizationErr true eq {	
		ixUtilizationErr true eq {	
			true setflash 
		} if 
		matrix currentmatrix_nlw 
		currentcolor 
		Red 30 165 translate 
		0 rotate 
		1 1 scale 
		irUtilisation () 0 150 true true true false 
		ixLmlWarning ixLmlAlarm 1000 1000 0 0 6 30 305 true false 0 true 0 
		FSstdFont true 1 
		baBar006 
		setcolor 
		setmatrix_nlw 
		false setflash 
	} if 
	ixUtilizationErr false eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		30 165 translate 
		0 rotate 
		1 1 scale 
		irUtilisation () 0 150 true true true false 
		ixLmlWarning ixLmlAlarm 1000 1000 0 0 6 30 305 true false 0 true 0 
		FSstdFont true 1 
		baBar006 
		setcolor 
		setmatrix_nlw 
	} if 
	ixHgDown true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 380 59 translate 
		0 rotate 
		0.62 0.62 scale 
		gsGeneral001 
		setcolor 
		setmatrix_nlw 
	} if 
	ixHgUp true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 430 181 translate 
		180 rotate 
		0.62 0.62 scale 
		gsGeneral001 
		setcolor 
		setmatrix_nlw 
	} if 
	ixLgDown true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 696 208 translate 
		90 rotate 
		0.60 0.60 scale 
		gsGeneral001 
		setcolor 
		setmatrix_nlw 
	} if 
	ixLgUp true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 611 256 translate 
		270 rotate 
		0.60 0.60 scale 
		gsGeneral001 
		setcolor 
		setmatrix_nlw 
	} if 
	ixUtilizationErr true eq {	
		true setflash 
	} if 
	matrix currentmatrix_nlw 
	currentcolor 
	77 502 translate 
	0 rotate 
	0.75 0.75 scale 
	(%) 
	FSfatFont 0 
	ixUtilizationErr false false false 
	baText002 
	setcolor 
	setmatrix_nlw 
	false setflash 
	matrix currentmatrix_nlw 
	currentcolor 
	171 475 translate 
	0 rotate 
	0.75 0.75 scale 
	ixWindSpeedHigh false false false (ssWind001) 
	baSwitchSymbolColor004 
	setcolor 
	setmatrix_nlw 
	ixLoadError true eq {	
		true setflash 
	} if 
	matrix currentmatrix_nlw 
	currentcolor 
	384 278 translate 
	0 rotate 
	0.80 0.80 scale 
	(act:) 
	FSbigFont 0 
	ixLoadError false false false 
	baText002 
	setcolor 
	setmatrix_nlw 
	false setflash 
	matrix currentmatrix_nlw 
	currentcolor 
	586 160 translate 
	0 rotate 
	1 1 scale 
	ixLgAngleError false false false (gsLimit019) 
	baSwitchSymbolColor004 
	setcolor 
	setmatrix_nlw 
	idChangeUnit 4 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		440 330 translate 
		0 rotate 
		0.60 0.60 scale 
		(lb*1000) 
		FSmsgBigFont 0 
		baText001 
		setcolor 
		setmatrix_nlw 
	} if 
	irLgSpeed 2 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 225 380 translate 
		0 rotate 
		0.87 0.87 scale 
		gsDrive008 
		setcolor 
		setmatrix_nlw 
	} if 
	irLgSpeed 3 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 230 385 translate 
		0 rotate 
		0.75 0.75 scale 
		gsDrive006 
		setcolor 
		setmatrix_nlw 
	} if 
	irLgSpeed 1 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 235 390 translate 
		0 rotate 
		0.62 0.62 scale 
		gsDrive007 
		setcolor 
		setmatrix_nlw 
	} if 
	irSgSpeed 2 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 165 65 translate 
		0 rotate 
		0.87 0.87 scale 
		gsDrive008 
		setcolor 
		setmatrix_nlw 
	} if 
	irSgSpeed 3 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 170 70 translate 
		0 rotate 
		0.75 0.75 scale 
		gsDrive006 
		setcolor 
		setmatrix_nlw 
	} if 
	irSgSpeed 1 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 175 75 translate 
		0 rotate 
		0.62 0.62 scale 
		gsDrive007 
		setcolor 
		setmatrix_nlw 
	} if 
	idOperationMode 11 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		594 325 translate 
		0 rotate 
		1.40 1.40 scale_nlw 
		ssCoil001 
		setcolor 
		setmatrix_nlw 
	} if 
	idOperationMode 6 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		612 341 translate 
		0 rotate 
		1 1 scale_nlw 
		ssGrab002 
		setcolor 
		setmatrix_nlw 
	} if 
	idOperationMode 8 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		611 346 translate 
		0 rotate 
		1 1 scale_nlw 
		ssGrab003 
		setcolor 
		setmatrix_nlw 
	} if 
	idOperationMode 7 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		611 341 translate 
		0 rotate 
		1 1 scale_nlw 
		ssGrab005 
		setcolor 
		setmatrix_nlw 
	} if 
	idOperationMode 5 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		587 352 translate 
		0 rotate 
		0.80 0.80 scale_nlw 
		ssSpreader001 
		setcolor 
		setmatrix_nlw 
	} if 
	idOperationMode 9 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		611 353 translate 
		0 rotate 
		0.80 0.80 scale_nlw 
		ssWheelLoader001 
		setcolor 
		setmatrix_nlw 
	} if 
	idOperationMode 10 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		611 346 translate 
		0 rotate 
		1 1 scale_nlw 
		ssMagnet001 
		setcolor 
		setmatrix_nlw 
	} if 
	idOperationMode 4 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		611 343 translate 
		0 rotate 
		1 1 scale_nlw 
		ssRotator001 
		setcolor 
		setmatrix_nlw 
	} if 
	idOperationMode 3 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		611 360 translate 
		0 rotate 
		1 1 scale_nlw 
		ssHook005 
		setcolor 
		setmatrix_nlw 
	} if 
	ixLoadCurve75 true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		155 460 translate 
		0 rotate 
		0.67 0.67 scale 
		75 3 (%) false false 
		FSfatFont 1 
		baValue001 
		setcolor 
		setmatrix_nlw 
	} if 
	ixLoadCurve75 false eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		155 460 translate 
		0 rotate 
		0.67 0.67 scale 
		66 3 (%) false false 
		FSfatFont 1 
		baValue001 
		setcolor 
		setmatrix_nlw 
	} if 
	matrix currentmatrix_nlw 
	currentcolor 
	110 410 translate 
	0 rotate 
	0.75 0.75 scale 
	ssLmb01 
	setcolor 
	setmatrix_nlw 
	idOperationMode 99 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		611 343 translate 
		0 rotate 
		1 1 scale 
		ssManTrans001 
		setcolor 
		setmatrix_nlw 
	} if 
	matrix currentmatrix_nlw 
	currentcolor 
	375 85 translate 
	0 rotate 
	0.75 0.75 scale 
	gsWinch001 
	setcolor 
	setmatrix_nlw 
	irCraneType 1 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		62 83 translate 
		0 rotate 
		1.82 1.82 scale_nlw 
		ssCrane007 
		setcolor 
		setmatrix_nlw 
	} if 
	irCraneType 2 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		62 83 translate 
		0 rotate 
		1.82 1.82 scale_nlw 
		ssCrane008 
		setcolor 
		setmatrix_nlw 
	} if 
	irCraneType 3 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		62 83 translate 
		0 rotate 
		1.82 1.82 scale_nlw 
		ssCrane009 
		setcolor 
		setmatrix_nlw 
	} if 
} def
%?partend


%?partdef spGrab001
%?fn	spGrab001
%?brief	grab status
%?bbox	0 0 79 79
/spGrab001 {
	/idGrabStatus exch def	%?brief grab status %?use INP %?type REAL %?dflt    0.00
	idGrabStatus 1 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 0 -10 translate 
		0 rotate 
		1 1 scale 
		ssGrab001 
		setcolor 
		setmatrix_nlw 
	} if 
	idGrabStatus 3 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 -10 translate 
		0 rotate 
		1 1 scale 
		ssGrab001 
		setcolor 
		setmatrix_nlw 
	} if 
	idGrabStatus 2 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 0 0 translate 
		0 rotate 
		1 1 scale 
		ssGrab002 
		setcolor 
		setmatrix_nlw 
	} if 
	idGrabStatus 4 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		ssGrab002 
		setcolor 
		setmatrix_nlw 
	} if 
} def
%?partend

%?partdef spHybrid006
%?fn	spHybrid006
%?brief	hybrid symbol
%?bbox	0 0 159 159
/spHybrid006 {
	matrix currentmatrix_nlw 
	currentcolor 
	25 44 translate 
	0 rotate 
	1.25 1.87 scale 
	ssHybrid006 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	80 147 translate 
	240 rotate 
	1.25 1.87 scale 
	ssHybrid006 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	140 36 translate 
	120 rotate 
	1.25 1.87 scale 
	ssHybrid006 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	99 83 translate 
	0 rotate 
	1.50 1.50 scale 
	(Pac) 
	FSfatFont 0 false false false false 
	baText002 
	setcolor 
	setmatrix_nlw 
} def
%?partend

%?partdef spRecorder003
%?fn	spRecorder003
%?brief	hatch value
%?bbox	0 0 103 79
/spRecorder003 {
	/idHatchLoad exch def	%?brief hatch load %?use INP %?type REAL %?dflt    0.00
	/idHatchPos exch def	%?brief hatch position %?use INP %?type REAL %?dflt    0.00
	1 setlinewidth_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	95 17 translate 
	0 rotate 
	1 1 scale 
	idHatchLoad 5 (t) false false 7 0.70 
	baValue001 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	65 53 translate 
	0 rotate 
	1 1 scale 
	idHatchPos 9 () false false 7 1 
	baValue001 
	setcolor 
	setmatrix_nlw 
} def
%?partend

%?partdef spRecorder004
%?fn	spRecorder004
%?brief	recorder hatch + frame
%?bbox	0 0 639 79
/spRecorder004 {
	/idHatchNum exch def	%?brief idHatchNum %?use INP %?type REAL %?dflt    0.00
	/idHatchPos8 exch def	%?brief idHatchPos8 %?use INP %?type REAL %?dflt    0.00
	/idHatchPos7 exch def	%?brief idHatchPos7 %?use INP %?type REAL %?dflt    0.00
	/idHatchPos6 exch def	%?brief idHatchPos6 %?use INP %?type REAL %?dflt    0.00
	/idHatchPos5 exch def	%?brief idHatchPos5 %?use INP %?type REAL %?dflt    0.00
	/idHatchPos4 exch def	%?brief idHatchPos4 %?use INP %?type REAL %?dflt    0.00
	/idHatchPos3 exch def	%?brief idHatchPos3 %?use INP %?type REAL %?dflt    0.00
	/idHatchPos2 exch def	%?brief idHatchPos2 %?use INP %?type REAL %?dflt    0.00
	/idHatchPos1 exch def	%?brief idHatchPos1 %?use INP %?type REAL %?dflt    0.00
	matrix currentmatrix_nlw 
	currentcolor 
	1 -1 translate 
	0 rotate 
	1 1 scale 
	ssRecorder009 
	setcolor 
	setmatrix_nlw 
	idHatchNum idHatchPos1 eq {	
		currentcolor 
		Green 3 setlinewidth_nlw 
		104 63 moveto 
		12 63 lineto 
		stroke 
		12 63 moveto 
		40 9 lineto 
		stroke 
		40 9 moveto 
		104 9 lineto 
		stroke 
		104 9 moveto 
		104 63 lineto 
		stroke 
		1 setlinewidth_nlw 
		setcolor 
	} if 
	idHatchNum idHatchPos2 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 104 7 translate 
		0 rotate 
		0.72 0.72 scale 
		ssRecorder020 
		setcolor 
		setmatrix_nlw 
	} if 
	idHatchNum idHatchPos3 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 176 7 translate 
		0 rotate 
		0.72 0.72 scale 
		ssRecorder020 
		setcolor 
		setmatrix_nlw 
	} if 
	idHatchNum idHatchPos4 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 248 7 translate 
		0 rotate 
		0.72 0.72 scale 
		ssRecorder020 
		setcolor 
		setmatrix_nlw 
	} if 
	idHatchNum idHatchPos5 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 320 7 translate 
		0 rotate 
		0.72 0.72 scale 
		ssRecorder020 
		setcolor 
		setmatrix_nlw 
	} if 
	idHatchNum idHatchPos6 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 392 7 translate 
		0 rotate 
		0.72 0.72 scale 
		ssRecorder020 
		setcolor 
		setmatrix_nlw 
	} if 
	idHatchNum idHatchPos7 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 464 7 translate 
		0 rotate 
		0.72 0.72 scale 
		ssRecorder020 
		setcolor 
		setmatrix_nlw 
	} if 
	idHatchNum idHatchPos8 eq {	
		currentcolor 
		Green 3 setlinewidth_nlw 
		629 63 moveto 
		537 63 lineto 
		stroke 
		629 63 moveto 
		601 8 lineto 
		stroke 
		537 8 moveto 
		601 8 lineto 
		stroke 
		537 8 moveto 
		537 63 lineto 
		stroke 
		1 setlinewidth_nlw 
		setcolor 
	} if 
} def
%?partend



%?partdef spSycra002
%?fn	spSycra002
%?brief	Ausleger
%?bbox	-10 0 9 279
/spSycra002 {
	/idOutreach exch def	%?brief outreach %?use INP %?type REAL %?dflt    0.00
	3 setlinewidth_nlw 
	0 0 moveto 
	0 
	idOutreach 
	lineto 
	1 setlinewidth_nlw 
	stroke 
} def
%?partend

%?partdef spSycra003
%?fn	spSycra003
%?brief	Ausleger
%?bbox	-20 0 19 279
/spSycra003 {
	3 setlinewidth_nlw 
	-5 0 moveto 
	-15 50 lineto 
	stroke 
	5 0 moveto 
	15 50 lineto 
	stroke 
	0 260 moveto 
	-15 235 lineto 
	stroke 
	-15 235 moveto 
	-15 50 lineto 
	stroke 
	15 50 moveto 
	15 235 lineto 
	stroke 
	15 235 moveto 
	0 260 lineto 
	stroke 
	1 setlinewidth_nlw 
	-15 235 moveto 
	15 190 lineto 
	stroke 
	-15 190 moveto 
	15 190 lineto 
	stroke 
	-15 190 moveto 
	15 235 lineto 
	stroke 
	15 190 moveto 
	-15 125 lineto 
	stroke 
	-15 125 moveto 
	15 50 lineto 
	stroke 
	-15 190 moveto 
	15 125 lineto 
	stroke 
	-15 50 moveto 
	15 125 lineto 
	stroke 
	20 270 -5 -25 rectfill 
	-15 270 -5 -25 rectfill 
	-15 260 moveto 
	15 260 lineto 
	stroke 
	5 0 moveto 
	newpath 
	0 0 5 0 360 arc 
	eofill 
} def
%?partend





%?partdef spSycra001
%?fn	spSycra001
%?brief	sycra indication
%?bbox	-280 -280 279 279
/spSycra001 {
	/idPosUwB exch def	%?brief idPosUwB %?use INP %?type REAL %?dflt    0.00
	/idPosUwA exch def	%?brief idPosUwA %?use INP %?type REAL %?dflt    0.00
	/idOutreachB exch def	%?brief idOutreachB %?use INP %?type REAL %?dflt    0.00
	/idOutreachA exch def	%?brief idOutreachA %?use INP %?type REAL %?dflt    0.00
	/idAngleCraneB exch def	%?brief idAngleCraneB %?use INP %?type REAL %?dflt    0.00
	/idAngleCraneA exch def	%?brief idAngleCraneA %?use INP %?type REAL %?dflt    0.00
	/idDistanceCrane exch def	%?brief idDistanceCrane %?use INP %?type REAL %?dflt    0.00
	/LDoutreachScale 5 def	
	/LDposCrane idDistanceCrane LDoutreachScale mul 
	2 div def	
%?manual_beg
matrix currentmatrix_nlw 
	currentcolor 
	0 
	LDposCrane sub 
	0 translate 
	idAngleCraneA 
	rotate 
	1 1 scale 
	idOutreachA LDoutreachScale mul 
	spSycra002 
	setcolor 
	setmatrix_nlw 
	
matrix currentmatrix_nlw 
	currentcolor 
	0 
	LDposCrane add 
	0 translate 
	idAngleCraneB 
	rotate 
	1 1 scale 
	idOutreachB LDoutreachScale mul
	spSycra002 
	setcolor 
	setmatrix_nlw 

matrix currentmatrix_nlw 
	currentcolor 
	0 
	LDposCrane sub 0 translate 
	idPosUwA rotate 
	0.7 0.7 scale 
	ssUw001 
	setcolor 
	setmatrix_nlw 

matrix currentmatrix_nlw 
	currentcolor 
	0 
	LDposCrane add 0 translate 
	idPosUwB rotate 
	0.7 0.7 scale 
	ssUw001 
	setcolor 
	setmatrix_nlw 


	
	matrix currentmatrix_nlw 
	currentcolor 
	0 
	LDposCrane sub 
	0 translate 
	idAngleCraneA 
	rotate 
	0.7 0.02 
	idOutreachA mul 
	scale 
	spSycra003 
	setcolor 
	setmatrix_nlw 

	matrix currentmatrix_nlw 
	currentcolor 
	0 
	LDposCrane add 
	0 translate 
	idAngleCraneB 
	rotate 
	0.7 0.02 
	idOutreachB mul 
	scale 
	spSycra003 
	setcolor 
	setmatrix_nlw 
	


%?manual_end 
	
} def
%?partend

%?partdef spTrendDisplay001
%?fn	spTrendDisplay001
%?brief	continuous diagram over time
%?bbox	0 0 639 479
/spTrendDisplay001 {
	
%?manual_beg
	/MEMarrayTime exch def %?brief Zeit WerteArray %?use STATIC %?type ARR %?dflt 10000
	/MEMarray1 exch def %?brief Value 1 WerteArray Farbe: default %?use STATIC %?type ARR %?dflt 10000
	/MEMarray2 exch def %?brief Value 2 WerteArray Farbe: gr�se STATIC %?type ARR %?dflt 10000
	/MEMarray3 exch def %?brief Value 3 WerteArray Farbe: gelb %?use STATIC %?type ARR %?dflt 10000
	/MEMarray4 exch def %?brief Value 4 WerteArray Farbe: rot %?use STATIC %?type ARR %?dflt 10000
	/MEMarray5 exch def %?brief Value 5 WerteArray Farbe: blau %?use STATIC %?type ARR %?dflt 10000

	/I_MaxValue	exch	def		%?brief Maximumwert der Y-Skala	%?use INP	%?type REAL	%?dflt 10
	/I_MinValue	exch	def		%?brief Mindestwert der Y-Skala	%?use INP	%?type REAL	%?dflt 0
	/I_FieldsY	exch	def		%?brief Skalierungabschnitte der Y-Skala	%?use INP	%?type REAL	%?dflt 10
	/I_Value5	exch	def		%?brief Anzeigewert 5 in blau	%?use INP	%?type REAL	%?dflt 0
	/I_Value4	exch	def		%?brief Anzeigewert 4 in rot	%?use INP	%?type REAL	%?dflt 0
	/I_Value3	exch	def		%?brief Anzeigewert 3 in gelb	%?use INP	%?type REAL	%?dflt 0
	/I_Value2	exch	def		%?brief Anzeigewert 2 in gr�se INP	%?type REAL	%?dflt 0
	/I_Value1	exch	def		%?brief Anzeigewert 1 in Systemfarbe	%?use INP	%?type REAL	%?dflt 0

	/LD_scaleX	100	def				% Genauigkeit der Skalierung der X-Achse: pixel/s
	/LD_timeS	0	def				% aktuelle Sekunden des TrendDisplay (ohne abgelaufene Minuten)
	/LD_timeM	0	def				% aktuelle Minuten des TrendDisplay
	/LD_lastTimeScale	0	def		% neueste ZeitachsenSkalierung rechts im Bild, nach links laufend: Abstand vom rechten Bildschirmrand
	/LD_pos		0	def
	/LD_StartPos 0 def
	/LD_ReadPos 0 def
	/LD_EndPos 0 def
	/LD_help	0	def
	/LS_help	()	def
	/LRactMaxTime	0	def

	/LDmaxPixX MDmaxMsgPixX def
	/LDmaxPixY MDmaxMsgPixY 80 sub def

	
	% berechnete Werte definieren
	/LD_scaleY LDmaxPixY I_FieldsY div def		% Gr� eines Skalierungsabschnittes der Y-Achse in Pixel
	/LD_stepY I_MaxValue I_MinValue sub I_FieldsY div def	% Skalierung der Y-Achse ausrechnen in Skalierungsschritten

	matrix currentmatrix currentcolor
	ValueFont
	
	% Zoomen der Zeit
	matrix currentmatrix currentcolor
	0 -80 translate
	currentcolor
	baTouchButton001 { /MDtdFactX MDtdFactX 2 div store } if
	setcolor
	15 40 moveto (Zoom) show_utf8
	25 15 moveto (Out) show_utf8
	setcolor setmatrix
	matrix currentmatrix currentcolor
	LDmaxPixX 80 sub -80 translate
	currentcolor
	baTouchButton001 { /MDtdFactX MDtdFactX 2 mul store } if
	setcolor
	15 40 moveto (Zoom) show_utf8
	35 15 moveto (In) show_utf8
	setcolor setmatrix
	MDtdFactX 0 le { /MDtdFactX 0.01 store } if
	/LD_scaleX LD_scaleX MDtdFactX mul store

	% Starten des Zeitverlaufes (hierbei werden die Arrays gel�t, und neu angefangen)
	matrix currentmatrix currentcolor
	LDmaxPixX 2 div 80 sub -80 translate
	currentcolor
	baTouchButton001 {
		/MXdispRunning true store
		/MDstartTime realtime_sec store
		/LD_pos 0 store
		MEMarray1 length {
			MEMarrayTime LD_pos 0 put	
			MEMarray1 LD_pos 0 put	
			MEMarray2 LD_pos 0 put	
			MEMarray3 LD_pos 0 put	
			MEMarray4 LD_pos 0 put	
			MEMarray5 LD_pos 0 put	
			/LD_pos LD_pos 1 add store
		} repeat
		/MDactArrayPos 0 store
		/MXarrayFull false store
	} if
	setcolor
	20 30 moveto
	(RUN) show_utf8
	setcolor setmatrix
	% Stoppen des Zeitverlaufes
	matrix currentmatrix currentcolor
	LDmaxPixX 2 div -80 translate
	currentcolor
	baTouchButton001 { /MXdispRunning false store } if
	setcolor
	15 30 moveto
	(STOP) show_utf8
	setcolor setmatrix

	% Startzeit berechnen
	MDstartTime 0 eq { /MDstartTime realtime_sec store } if
 	MXdispRunning { /MDtime realtime_sec MDstartTime sub store } if		% aktuelle Zeit seit dem Start in Sekunden
%	/LD_timeS MDtime 60 mod store					% aktuelle Sekunden ohne Minuten herausrechnen
%	/LD_timeM MDtime 60 div cvi store					% aktuelle Minuten ohne Sekunden herausrechnen
	/LRactMaxTime LDmaxPixX LD_scaleX div store				% Anzahl der maximal sichtbaren Linien berechnen = angezeigte Zeitspanne in Sekunden
	/LD_timeS LRactMaxTime 60 mod store					% aktuelle Sekunden ohne Minuten herausrechnen
	/LD_timeM LRactMaxTime 60 div cvi store					% aktuelle Minuten ohne Sekunden herausrechnen

	% aktuelle Zeit einblenden
% LDmaxPixX (xxxx.xx) strw sub LDmaxPixY strh sub moveto
% LRactMaxTime LS_help 1 ncvs show_utf8
	(:xx ) strwh LDmaxPixX 2 index sub 3 sub LDmaxPixY 2 index sub 3 sub moveto pop pop		% Position hinter den Minuten	
	LD_timeM LS_help 0 ncvs dup strw neg 0 rmoveto							% Position um die Anzeigel㭧e der minuten nach links schieben
	show_utf8											% Anzeige Minuten
%	LD_timeS 10 lt { (:0) }{ (:) } ifelse show_utf8			
	(:) show_utf8			
	LD_timeS LS_help 2 0 nncvs show_utf8					% Anzeige Sekunden
	currentcolor
	Grey
	(min:sec) strwh neg 2 mul exch neg exch rmoveto
	(min:sec) show_utf8							% Anzeige Einheit
	setcolor

	% Skalierung Zeichnen
	Grey

	% Skalierung der Y-Achse
	/LD_pos 0 store
	I_FieldsY {
		/LD_help LD_scaleY LD_pos mul store
		0 LD_help moveto LDmaxPixX LD_help lineto stroke					% horizontale Linie Zeichnen
		5 LD_help 5 add moveto LD_pos LD_stepY mul I_MinValue add LS_help 0 ncvs show_utf8	% Beschriftung
		( m/s) show_utf8
		/LD_pos LD_pos 1 add store
	} repeat

	% Skalierung der Zeit-Achse
	/LD_lastTimeScale LD_timeS LD_timeS cvi sub LD_scaleX mul store	% Abstand der neuesten Zeitachse vom rechten Bildschirmrand berechnen
	/LD_pos LDmaxPixX LD_lastTimeScale sub store
	LDmaxPixX LD_scaleX div cvi 1 add {							% Anzahl der maximal sichtbaren Linien berechnen
		LD_pos 0 gt {												% das hinauszeichnen �en linken Bildschirmrand abfangen
%	 		LD_pos 0 moveto LD_pos LDmaxPixY lineto stroke				% vertikale Linie Zeichnen
		} if
		/LD_pos LD_pos LD_scaleX sub store							% Position f� n㢨sten Schleifendurchlauf berechnen
	} repeat
	
	% aktuellen Zeitwert ins Array speichern
 	MXdispRunning {
		MEMarrayTime MDactArrayPos MDtime put
		% aktuellen Wert ins Array speichern
		MEMarray1 MDactArrayPos I_Value1 put
		MEMarray2 MDactArrayPos I_Value2 put
		MEMarray3 MDactArrayPos I_Value3 put
		MEMarray4 MDactArrayPos I_Value4 put
		MEMarray5 MDactArrayPos I_Value5 put
		% aktuelle Arrayposition weiterz㧬en (beginnt bei 0)
		/MDactArrayPos MDactArrayPos 1 add store
		MDactArrayPos MEMarrayTime length ge {						% das Array arbeitet als Ringspeicher
			/MDactArrayPos 0 store
			/MXarrayFull true store
		} if
	} if

	% Diagramme zeichnen
	% aktuelle Startposition zum lesen des Array ermitteln
	MXarrayFull {
		/LD_StartPos MDactArrayPos store
		/LD_EndPos MDactArrayPos 1 sub store
		LD_EndPos 0 lt { /LD_EndPos MEMarrayTime length 1 sub store } if
	}{
		/LD_StartPos 0 store
		/LD_EndPos MDactArrayPos 1 sub store
		LD_EndPos 0 lt { /LD_EndPos 0 store } if
		LD_EndPos LD_StartPos lt { /LD_EndPos LD_StartPos store } if
	} ifelse

	% Linie 1: array auslesen und linien zeichnen (gezeichnet wird beginnend am 㫴esten Punkt bis zum neuesten)
	I_Value1 I_MinValue ge {
		setcolor currentcolor						% Farbe wechseln
		/LD_ReadPos LD_StartPos store
		MEMarrayTime LD_ReadPos get					% X Position
		MDtime exch sub LD_scaleX mul				% in die aktuelle Skalierung einrechnen
		LDmaxPixX exch sub						% in das zeitlich laufende Display einrechnen
		MEMarray1 LD_ReadPos get					% Y Position Wert 1
		I_MinValue sub LDmaxPixY I_MaxValue I_MinValue sub div mul	% in die aktuelle Skalierung einrechnen
		moveto
		MXarrayFull { MEMarrayTime length 1 sub } { LD_EndPos } ifelse {						
			/LD_ReadPos LD_ReadPos 1 add store
			LD_ReadPos MEMarrayTime length ge {
				/LD_ReadPos 0 store
			} if
			MEMarrayTime LD_ReadPos get					% X Position
			MDtime exch sub LD_scaleX mul				% in die aktuelle Skalierung einrechnen
			LDmaxPixX exch sub						% in das zeitlich laufende Display einrechnen
			MEMarray1 LD_ReadPos get					% Y Position
			I_MinValue sub LDmaxPixY I_MaxValue I_MinValue sub div mul	% in die aktuelle Skalierung einrechnen
			1 index 0 gt {								% Falls �en linken Bildschirmrand hinausgezeichnet w�die Linie nicht zeichnen
				lineto
			}{
				moveto
			} ifelse
		} repeat
		stroke
	} if

	% Linie 2: array auslesen und linien zeichnen (gezeichnet wird beginnend am 㫴esten Punkt bis zum neuesten)
	I_Value2 I_MinValue ge {
		Green										% Farbe wechseln
		/LD_ReadPos LD_StartPos store
		MEMarrayTime LD_ReadPos get					% X Position
		MDtime exch sub LD_scaleX mul				% in die aktuelle Skalierung einrechnen
		LDmaxPixX exch sub						% in das zeitlich laufende Display einrechnen
		MEMarray2 LD_ReadPos get					% Y Position Wert 1
		I_MinValue sub LDmaxPixY I_MaxValue I_MinValue sub div mul	% in die aktuelle Skalierung einrechnen
		moveto
		MXarrayFull { MEMarrayTime length 1 sub } { LD_EndPos } ifelse {						
			/LD_ReadPos LD_ReadPos 1 add store
			LD_ReadPos MEMarrayTime length ge {
				/LD_ReadPos 0 store
			} if
			MEMarrayTime LD_ReadPos get					% X Position
			MDtime exch sub LD_scaleX mul				% in die aktuelle Skalierung einrechnen
			LDmaxPixX exch sub						% in das zeitlich laufende Display einrechnen
			MEMarray2 LD_ReadPos get					% Y Position
			I_MinValue sub LDmaxPixY I_MaxValue I_MinValue sub div mul	% in die aktuelle Skalierung einrechnen
			1 index 0 gt {								% Falls �en linken Bildschirmrand hinausgezeichnet w�die Linie nicht zeichnen
				lineto
			}{
				moveto
			} ifelse
		} repeat
		stroke
	} if

	% Linie 3: array auslesen und linien zeichnen (gezeichnet wird beginnend am 㫴esten Punkt bis zum neuesten)
	I_Value3 I_MinValue ge {
		Yellow										% Farbe wechseln
		/LD_ReadPos LD_StartPos store
		MEMarrayTime LD_ReadPos get					% X Position
		MDtime exch sub LD_scaleX mul				% in die aktuelle Skalierung einrechnen
		LDmaxPixX exch sub						% in das zeitlich laufende Display einrechnen
		MEMarray3 LD_ReadPos get					% Y Position Wert 1
		I_MinValue sub LDmaxPixY I_MaxValue I_MinValue sub div mul	% in die aktuelle Skalierung einrechnen
		moveto
		MXarrayFull { MEMarrayTime length 1 sub } { LD_EndPos } ifelse {						
			/LD_ReadPos LD_ReadPos 1 add store
			LD_ReadPos MEMarrayTime length ge {
				/LD_ReadPos 0 store
			} if
			MEMarrayTime LD_ReadPos get					% X Position
			MDtime exch sub LD_scaleX mul				% in die aktuelle Skalierung einrechnen
			LDmaxPixX exch sub						% in das zeitlich laufende Display einrechnen
			MEMarray3 LD_ReadPos get					% Y Position
			I_MinValue sub LDmaxPixY I_MaxValue I_MinValue sub div mul	% in die aktuelle Skalierung einrechnen
			1 index 0 gt {								% Falls �en linken Bildschirmrand hinausgezeichnet w�die Linie nicht zeichnen
				lineto
			}{
				moveto
			} ifelse
		} repeat
		stroke
	} if

	% Linie 4: array auslesen und linien zeichnen (gezeichnet wird beginnend am 㫴esten Punkt bis zum neuesten)
	I_Value4 I_MinValue ge {
		Red											% Farbe wechseln
		/LD_ReadPos LD_StartPos store
		MEMarrayTime LD_ReadPos get					% X Position
		MDtime exch sub LD_scaleX mul				% in die aktuelle Skalierung einrechnen
		LDmaxPixX exch sub						% in das zeitlich laufende Display einrechnen
		MEMarray4 LD_ReadPos get					% Y Position Wert 1
		I_MinValue sub LDmaxPixY I_MaxValue I_MinValue sub div mul	% in die aktuelle Skalierung einrechnen
		moveto
		MXarrayFull { MEMarrayTime length 1 sub } { LD_EndPos } ifelse {						
			/LD_ReadPos LD_ReadPos 1 add store
			LD_ReadPos MEMarrayTime length ge {
				/LD_ReadPos 0 store
			} if
			MEMarrayTime LD_ReadPos get					% X Position
			MDtime exch sub LD_scaleX mul				% in die aktuelle Skalierung einrechnen
			LDmaxPixX exch sub						% in das zeitlich laufende Display einrechnen
			MEMarray4 LD_ReadPos get					% Y Position
			I_MinValue sub LDmaxPixY I_MaxValue I_MinValue sub div mul	% in die aktuelle Skalierung einrechnen
			1 index 0 gt {								% Falls �en linken Bildschirmrand hinausgezeichnet w�die Linie nicht zeichnen
				lineto
			}{
				moveto
			} ifelse
		} repeat
		stroke
	} if

	% Linie 5: array auslesen und linien zeichnen (gezeichnet wird beginnend am 㫴esten Punkt bis zum neuesten)
	I_Value5 I_MinValue ge {
		Blue										% Farbe wechseln
		/LD_ReadPos LD_StartPos store
		MEMarrayTime LD_ReadPos get					% X Position
		MDtime exch sub LD_scaleX mul				% in die aktuelle Skalierung einrechnen
		LDmaxPixX exch sub						% in das zeitlich laufende Display einrechnen
		MEMarray5 LD_ReadPos get					% Y Position Wert 1
		I_MinValue sub LDmaxPixY I_MaxValue I_MinValue sub div mul	% in die aktuelle Skalierung einrechnen
		moveto
		MXarrayFull { MEMarrayTime length 1 sub } { LD_EndPos } ifelse {						
			/LD_ReadPos LD_ReadPos 1 add store
			LD_ReadPos MEMarrayTime length ge {
				/LD_ReadPos 0 store
			} if
			MEMarrayTime LD_ReadPos get					% X Position
			MDtime exch sub LD_scaleX mul				% in die aktuelle Skalierung einrechnen
			LDmaxPixX exch sub						% in das zeitlich laufende Display einrechnen
			MEMarray5 LD_ReadPos get					% Y Position
			I_MinValue sub LDmaxPixY I_MaxValue I_MinValue sub div mul	% in die aktuelle Skalierung einrechnen
			1 index 0 gt {								% Falls �en linken Bildschirmrand hinausgezeichnet w�die Linie nicht zeichnen
				lineto
			}{
				moveto
			} ifelse
		} repeat
		stroke
	} if

	setcolor setmatrix
	% Variablen f� Globale Speicherung auf den stack legen
	MEMarrayTime
	MEMarray1
	MEMarray2
	MEMarray3
	MEMarray4
	MEMarray5
%?manual_end
	
} def
%?partend



%?partdef spCycOpTronic001
%?fn	spCycOpTronic001
%?brief	cycoptronic
%?bbox	0 0 79 79
/spCycOpTronic001 {
	/idSlide exch def	%?brief slide %?use INP %?type REAL %?dflt    0.00
	/idCycOpTrStatus exch def	%?brief status %?use INP %?type REAL %?dflt    0.00
	idCycOpTrStatus 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 -1 translate 
		0 rotate 
		1 1 scale 
		ssCycOpTronic002 
		setcolor 
		setmatrix_nlw 
	} if 
	idCycOpTrStatus 1 eq 
	idCycOpTrStatus 4 eq or 
	idCycOpTrStatus 5 eq or {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		ssCycOpTronic003 
		setcolor 
		setmatrix_nlw 
	} if 
	idCycOpTrStatus 3 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 41 43 translate 
		idSlide 40 sub 
		rotate 
		1 1 scale 
		ssCycOpTronic001 
		setcolor 
		setmatrix_nlw 
	} if 
	idCycOpTrStatus 2 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		16 0 translate 
		0 rotate 
		0.62 0.62 scale 
		gpGeneral001 
		setcolor 
		setmatrix_nlw 
	} if 
} def
%?partend

%?partdef spCycOpTronic0021
%?fn	spCycOpTronic0021
%?brief	cycoptronic
%?bbox	0 0 79 79
/spCycOpTronic0021 {
	/idSlide exch def	%?brief slide %?use INP %?type REAL %?dflt    0.00
	/idCycOpTrStatus exch def	%?brief status %?use INP %?type REAL %?dflt    0.00
	idCycOpTrStatus 0 gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 -1 translate 
		0 rotate 
		1 1 scale 
		ssCycOpTronic002 
		setcolor 
		setmatrix_nlw 
	} if 
	idCycOpTrStatus 1 eq 
	idCycOpTrStatus 4 eq or 
	idCycOpTrStatus 5 eq or {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		ssCycOpTronic003 
		setcolor 
		setmatrix_nlw 
	} if 
	idCycOpTrStatus 3 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 41 43 translate 
		idSlide 40 sub 
		rotate 
		1 1 scale 
		ssCycOpTronic001 
		setcolor 
		setmatrix_nlw 
	} if 
	idCycOpTrStatus 2 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		16 0 translate 
		0 rotate 
		0.62 0.62 scale 
		gpGeneral001 
		setcolor 
		setmatrix_nlw 
	} if 
} def
%?partend

%?partdef spCycOpTronic002
%?fn	spCycOpTronic002
%?brief	cycoptronic
%?bbox	0 0 79 79
/spCycOpTronic002 {
	/idSlide exch def	%?brief slide %?use INP %?type REAL %?dflt    0.00
	/idCycOpTrStatus exch def	%?brief status %?use INP %?type REAL %?dflt    0.00
	idCycOpTrStatus 0 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		ssCycOpTronic007 
		setcolor 
		setmatrix_nlw 
	} if 
	idCycOpTrStatus 1 eq 
	idCycOpTrStatus 2 eq or {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		ssCycOpTronic005 
		setcolor 
		setmatrix_nlw 
	} if 
	idCycOpTrStatus 4 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		Red 0 0 translate 
		0 rotate 
		1 1 scale 
		ssCycOpTronic005 
		setcolor 
		setmatrix_nlw 
	} if 
	idCycOpTrStatus 5 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		Yellow 0 0 translate 
		0 rotate 
		1 1 scale 
		ssCycOpTronic005 
		setcolor 
		setmatrix_nlw 
	} if 
	idCycOpTrStatus 3 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 0 0 translate 
		0 rotate 
		1 1 scale 
		ssCycOpTronic004 
		setcolor 
		setmatrix_nlw 
	} if 
} def
%?partend

%?partdef spCycOpTronic003
%?fn	spCycOpTronic003
%?brief	cycoptronic
%?bbox	0 0 79 79
/spCycOpTronic003 {
	/idSlide exch def	%?brief slide %?use INP %?type REAL %?dflt    0.00
	/idCycOpTrStatus exch def	%?brief status %?use INP %?type REAL %?dflt    0.00
	idCycOpTrStatus 2 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		1 0 translate 
		0 rotate 
		1 1 scale 
		gpGeneral001 
		setcolor 
		setmatrix_nlw 
	} if 
	idCycOpTrStatus 1 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		ssCycOpTronic006 
		setcolor 
		setmatrix_nlw 
	} if 
	idCycOpTrStatus 3 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 0 0 translate 
		0 rotate 
		1 1 scale 
		ssCycOpTronic006 
		setcolor 
		setmatrix_nlw 
	} if 
	idCycOpTrStatus 4 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		Red 0 0 translate 
		0 rotate 
		1 1 scale 
		ssCycOpTronic006 
		setcolor 
		setmatrix_nlw 
	} if 
	idCycOpTrStatus 5 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		Yellow 0 0 translate 
		0 rotate 
		1 1 scale 
		ssCycOpTronic006 
		setcolor 
		setmatrix_nlw 
	} if 
} def
%?partend



%?partdef spAntiCollision008
%?fn	spAntiCollision008
%?brief	Bereichsbegrenzung Sektor Teach In
%?bbox	0 0 319 319
/spAntiCollision008 {
	
%?manual_beg
	/ixAreaActive exch def	%?brief area active (green) %?use INP %?type BOOL %?dflt true
	/ixValueOkArea exch def	%?brief value ok area %?use INP %?type BOOL %?dflt true
	/irMinRadius exch def	%?brief minimum radius [m] %?use INP %?type REAL %?dflt   10.00
	/irMaxRadius exch def	%?brief maximum radius [m] %?use INP %?type REAL %?dflt  100.00
	/irRadiusLeArea exch def	%?brief radius left area [m] %?use INP %?type REAL %?dflt   80.00
	/irRadiusRiArea exch def	%?brief radius right area [m] %?use INP %?type REAL %?dflt   40.00
	/irAngleLeArea exch def	%?brief angle left area 1 %?use INP %?type REAL %?dflt   10.00
	/irAngleRiArea exch def	%?brief angle right area 1 %?use INP %?type REAL %?dflt   50.00
	/irLoadRadius exch def	%?brief radius of load [m] %?use INP %?type REAL %?dflt   50.00
	/irLoadAngle exch def	%?brief angle of load %?use INP %?type REAL %?dflt  0.00
	/irRadius exch def	%?brief radius of circle %?use INP %?type REAL %?dflt  240.00
	/qxSectorActive false def %brief activate area %?use OUT %?type BOOL %?dflt falsedflt false

	irMaxRadius 0 eq {
		/LRmaxRadius 100 def
		} {
		/LRmaxRadius irMaxRadius def
 	} ifelse 	
 	/LRradiusFactor irRadius LRmaxRadius div def	
 	/LRradiusMin irMinRadius LRradiusFactor mul def	
 	/LRradiusLeArea irRadiusLeArea LRradiusFactor mul def	
 	/LRradiusRiArea irRadiusRiArea LRradiusFactor mul def	
 	/LRradiusMax irMaxRadius LRradiusFactor mul def	
 	/LRradiusLoad irLoadRadius LRradiusFactor mul def	
 	/LRangleLeArea 0 irAngleLeArea sub def	
 	/LRangleRiArea 0 irAngleRiArea sub def	
 	/LRangleLoad irLoadAngle 90 add def	

	% ۢerpr�welche Ausladung kleiner ist und Zuweisung auf den Radius Area min
 	LRradiusLeArea LRradiusRiArea le {	
 		/LRradiusAreaMin LRradiusLeArea def	
 		} { 
 		/LRradiusAreaMin LRradiusRiArea def	
 	} ifelse 
	% ۢerpr�welche Ausladung kleiner ist und Zuweisung auf den Radius Area max
	LRradiusLeArea LRradiusRiArea ge {	
 		/LRradiusAreaMax LRradiusLeArea def	
 		} { 
 		/LRradiusAreaMax LRradiusRiArea def	
 	} ifelse 

 	matrix currentmatrix_nlw 
 	LRangleLoad 
 	rotate 
	% Fl㢨e zeichnen wenn Winkel nicht identisch
 	irAngleLeArea irAngleRiArea ne { 
 		matrix currentmatrix_nlw
		currentcolor 
 		0 0 translate 
		LRangleLeArea 
		rotate
		DarkGrey
		newpath 
		LRradiusMax 0 moveto
		0 0 
		LRradiusMax 0 360
		arc 
		0 0 
		LRradiusMin 360 0
		arcn 
		eofill 
		_mstatus {	
			_mxposd _myposd itransform 
			newpath 
			LRradiusAreaMax 0 moveto
			0 0 
			LRradiusAreaMax 0 LRangleRiArea LRangleLeArea sub
			arcn 
			0 0 
			LRradiusAreaMin LRangleRiArea LRangleLeArea sub 0
			arc 
			ineofill {
				LightGrey
			} {
				Invisible
			} ifelse
		} {
			Invisible
		} ifelse
		LRangleRiArea	LRangleLeArea sub abs 0.3 gt {
			newpath 
			LRradiusAreaMax 0 moveto
			0 0 
			LRradiusAreaMax 0 LRangleRiArea LRangleLeArea sub
			arcn 
			0 0 
			LRradiusAreaMin LRangleRiArea LRangleLeArea sub 0
			arc 
 			eofill 
		} if
		_mdown {	
			_mxposd _myposd itransform 
 			newpath 
			LRradiusAreaMax 0 moveto
			0 0 
			LRradiusAreaMax 0 LRangleRiArea LRangleLeArea sub
			arcn 
			0 0 
			LRradiusAreaMin LRangleRiArea LRangleLeArea sub 0
			arc 
			ineofill {
				/qxSectorActive true def
			} if
		} if
		setcolor 
		setmatrix_nlw
	} if
	setmatrix_nlw 

	matrix currentmatrix_nlw 
 	LRangleLoad 
 	rotate 
	currentcolor 
	ixValueOkArea false eq {
		Red
	} if
	ixAreaActive true eq {
		Green
	} if
	3 setlinewidth_nlw 
	% Kreispunkte zeichnen
	matrix currentmatrix_nlw
	LRangleLeArea 
	rotate 
	LRradiusLeArea 5 add 
	0 moveto 
	LRradiusLeArea 0 5 0 360 arc 
	stroke 
	LRangleRiArea LRangleLeArea sub 
	rotate 
	LRradiusRiArea 5 add 
	0 moveto 
	LRradiusRiArea 0 5 0 360 arc 
	stroke 
	setmatrix_nlw 

	% Umrandung zeichnen wenn Winkel nicht identisch
	LRangleRiArea	LRangleLeArea sub abs 0.3 gt { 
		matrix currentmatrix_nlw
		LRangleLeArea 
		rotate
		LRradiusAreaMax 0 moveto
		0 0 
		LRradiusAreaMax 0 LRangleRiArea LRangleLeArea sub
		arcn 
		0 0 
		LRradiusAreaMin LRangleRiArea LRangleLeArea sub 0
		arc 
		LRradiusAreaMax 0 lineto
 		stroke 
 		setmatrix_nlw 
	} if
	setcolor 
	setmatrix_nlw 

	% minimum und maximum Kreis
	matrix currentmatrix_nlw 
	currentcolor 
	0 0 translate 
	LRangleLeArea5 
	rotate
	1 setlinewidth_nlw 
 	LRradiusMax 0 moveto 
 	0 0 
 	LRradiusMax 0 360 arc 
 	LRradiusMin 0 moveto 
 	0 0 
 	LRradiusMin 0 360 arc 
 	stroke 
 	1 setlinewidth_nlw 
 	setcolor 
	setmatrix_nlw 

	% Kran und Anzeigewerte
 	matrix currentmatrix_nlw 
 	90 rotate 
 	currentcolor
 	Green
 	3 setlinewidth_nlw 
 	LRradiusMin 2 div 0 LRradiusMin 4 div sub moveto 
 	LRradiusLoad 6 sub 0 LRradiusMin 6 div sub lineto 
 	LRradiusLoad 6 sub LRradiusMin 6 div lineto 
 	LRradiusMin 2 div LRradiusMin 4 div lineto 
 	LRradiusMin 2 div LRradiusMin 2 div lineto
 	0 LRradiusMin 2 div sub LRradiusMin 2 div lineto
 	0 LRradiusMin 2 div sub 0 LRradiusMin 2 div sub lineto
 	LRradiusMin 2 div 0 LRradiusMin 2 div sub lineto
 	LRradiusMin 2 div 0 LRradiusMin 4 div sub lineto
 	stroke
 	LRradiusLoad 6 add 0 moveto 
 	LRradiusLoad  0 6 0 360 arc 
 	stroke 
 	1 setlinewidth_nlw
 	setcolor 
	setmatrix_nlw
 	matrix currentmatrix_nlw 
 	60 LRradiusLoad 10.0 sub translate 
 	1 1 scale 
 	irLoadRadius 3.10 false false FSfatFont 0.75 
 	baValueDist001 
 	setmatrix_nlw 
 	matrix currentmatrix_nlw 
	20 -50.0 translate 
  	1 1 scale 
 	irLoadAngle 3.10 (°) false false FSfatFont 1 
 	baValue001 
 	setmatrix_nlw 
 
	%?manual_end 
	
	qxSectorActive 
} def
%?partend



%?partdef spBubble001
%?fn	spBubble001
%?brief	circular bubble level
%?bbox	0 0 79 79
/spBubble001 {
	
%?manual_beg
	/irScaleY	exch	def		%?brief maximum positive Y angle	%?use INP	%?type REAL	%?dflt 5.0
	/irScaleX	exch	def		%?brief maximum positive X angle	%?use INP	%?type REAL	%?dflt 5.0
	/irYpos	exch	def			%?brief Y angle						%?use INP	%?type REAL	%?dflt 0.0
	/irXpos	exch	def			%?brief X angle						%?use INP	%?type REAL	%?dflt 0.0

	matrix currentmatrix_nlw currentcolor
	
	/L_Xpos 0 def
	/L_Ypos 0 def
	/L_MaxX	39 def
	/L_MaxY	39 def
	/L_radBub 5 def
	/L_radOneDeg 8 def

	LightGrey

	% Rahmen zeichnen
	1 1 77 77 rectstroke
	% Fadenkreuz zeichnen
	39 39 translate
	-38 0 moveto 39 0 lineto
	0 -38 moveto 0 39 lineto
	/L_radOneDeg L_MaxX irScaleX div round store
	0 0 moveto
	0 0 L_radOneDeg 0 360 arc
%	0 0 L_radOneDeg 2 mul 0 360 arc
	0 0 L_radOneDeg 3 mul 0 360 arc
%	0 0 L_radOneDeg 4 mul 0 360 arc
	
	setcolor
	currentcolor
	
	irXpos irScaleX gt {
		/irScaleX irXpos exch store
	} if
	irYpos irScaleY gt {
		/irScaleY irYpos exch store
	} if

	/L_Xpos irXpos irScaleX div L_MaxX mul store
	/L_Ypos irYpos irScaleY div L_MaxY mul store
	newpath
	L_Xpos L_radBub add L_Ypos moveto
	L_Xpos L_Ypos L_radBub 0 360 arc 
	eofill

	setcolor setmatrix_nlw
%?manual_end
	
} def
%?partend


























%?partdef spAntiCollision009
%?fn	spAntiCollision009
%?brief	Bereichsbegrenzung Sektor Teach In
%?bbox	0 0 319 319
/spAntiCollision009 {
	
%?manual_beg
	/ixDisableMainPag exch def	%?brief disable incication for main page %?use INP %?type BOOL %?dflt true
	/ixAreaActive exch def	%?brief area active (green) %?use INP %?type BOOL %?dflt true
	/ixValueOkArea exch def	%?brief value ok area %?use INP %?type BOOL %?dflt true
	/irMinRadius exch def	%?brief minimum radius [m] %?use INP %?type REAL %?dflt   10.00
	/irMaxRadius exch def	%?brief maximum radius [m] %?use INP %?type REAL %?dflt  100.00
	/irRadiusLeArea exch def	%?brief radius left area [m] %?use INP %?type REAL %?dflt   80.00
	/irRadiusRiArea exch def	%?brief radius right area [m] %?use INP %?type REAL %?dflt   40.00
	/irAngleLeArea exch def	%?brief angle left area 1 %?use INP %?type REAL %?dflt   10.00
	/irAngleRiArea exch def	%?brief angle right area 1 %?use INP %?type REAL %?dflt   50.00
	/irLoadRadius exch def	%?brief radius of load [m] %?use INP %?type REAL %?dflt   50.00
	/irLoadAngle exch def	%?brief angle of load %?use INP %?type REAL %?dflt  0.00
	/irRadius exch def	%?brief radius of circle %?use INP %?type REAL %?dflt  240.00
	/qxSectorActive false def %brief activate area %?use OUT %?type BOOL %?dflt falsedflt false

	irMaxRadius 0 eq {
		/LRmaxRadius 100 def
		} {
		/LRmaxRadius irMaxRadius def
 	} ifelse 	
 	/LRradiusFactor irRadius LRmaxRadius div def	
 	/LRradiusMin irMinRadius LRradiusFactor mul def	
 	/LRradiusLeArea irRadiusLeArea LRradiusFactor mul def	
 	/LRradiusRiArea irRadiusRiArea LRradiusFactor mul def	
 	/LRradiusMax irMaxRadius LRradiusFactor mul def	
 	/LRradiusLoad irLoadRadius LRradiusFactor mul def	
 	/LRangleLeArea 0 irAngleLeArea sub def	
 	/LRangleRiArea 0 irAngleRiArea sub def	
 	/LRangleLoad irLoadAngle 90 add def	

	% ۢerpr�welche Ausladung kleiner ist und Zuweisung auf den Radius Area min
 	LRradiusLeArea LRradiusRiArea le {	
 		/LRradiusAreaMin LRradiusLeArea def	
 		} { 
 		/LRradiusAreaMin LRradiusRiArea def	
 	} ifelse 
	% ۢerpr�welche Ausladung kleiner ist und Zuweisung auf den Radius Area max
	LRradiusLeArea LRradiusRiArea ge {	
 		/LRradiusAreaMax LRradiusLeArea def	
 		} { 
 		/LRradiusAreaMax LRradiusRiArea def	
 	} ifelse 

 	matrix currentmatrix_nlw 
 	LRangleLoad 
 	rotate 
	% Fl㢨e zeichnen wenn Winkel nicht identisch
 	irAngleLeArea irAngleRiArea ne { 
 		matrix currentmatrix_nlw
		currentcolor 
 		0 0 translate 
		LRangleLeArea 
		rotate
		DarkGrey
		newpath 
		LRradiusMax 0 moveto
		0 0 
		LRradiusMax 0 360
		arc 
		0 0 
		LRradiusMin 360 0
		arcn 
		eofill 
		_mstatus {	
			_mxposd _myposd itransform 
			newpath 
			LRradiusAreaMax 0 moveto
			0 0 
			LRradiusAreaMax 0 LRangleRiArea LRangleLeArea sub
			arcn 
			0 0 
			LRradiusAreaMin LRangleRiArea LRangleLeArea sub 0
			arc 
			ineofill {
				LightGrey
			} {
				Invisible
			} ifelse
		} {
			Invisible
		} ifelse
		LRangleRiArea	LRangleLeArea sub abs 0.3 gt {
			newpath 
			LRradiusAreaMax 0 moveto
			0 0 
			LRradiusAreaMax 0 LRangleRiArea LRangleLeArea sub
			arcn 
			0 0 
			LRradiusAreaMin LRangleRiArea LRangleLeArea sub 0
			arc 
 			eofill 
		} if
		_mdown {	
			_mxposd _myposd itransform 
 			newpath 
			LRradiusAreaMax 0 moveto
			0 0 
			LRradiusAreaMax 0 LRangleRiArea LRangleLeArea sub
			arcn 
			0 0 
			LRradiusAreaMin LRangleRiArea LRangleLeArea sub 0
			arc 
			ineofill {
				/qxSectorActive true def
			} if
		} if
		setcolor 
		setmatrix_nlw
	} if
	setmatrix_nlw 

	matrix currentmatrix_nlw 
 	LRangleLoad 
 	rotate 
	currentcolor 
	ixValueOkArea false eq {
		Red
	} if
	ixAreaActive true eq {
		Green
	} if


 	ixDisableMainPag false eq {
 	 	3 setlinewidth_nlw 
 	 }{	 	
 	 	 	1 setlinewidth_nlw 
 	 } ifelse






	% Kreispunkte zeichnen
	matrix currentmatrix_nlw
	LRangleLeArea 
	rotate 
	LRradiusLeArea 5 add 
	0 moveto 
	LRradiusLeArea 0 5 0 360 arc 
	stroke 
	LRangleRiArea LRangleLeArea sub 
	rotate 
	LRradiusRiArea 5 add 
	0 moveto 
	LRradiusRiArea 0 5 0 360 arc 
	stroke 
	setmatrix_nlw 

	% Umrandung zeichnen wenn Winkel nicht identisch
	LRangleRiArea	LRangleLeArea sub abs 0.3 gt { 
		matrix currentmatrix_nlw
		LRangleLeArea 
		rotate
		LRradiusAreaMax 0 moveto
		0 0 
		LRradiusAreaMax 0 LRangleRiArea LRangleLeArea sub
		arcn 
		0 0 
		LRradiusAreaMin LRangleRiArea LRangleLeArea sub 0
		arc 
		LRradiusAreaMax 0 lineto
 		stroke 
 		setmatrix_nlw 
	} if
	setcolor 
	setmatrix_nlw 

	% minimum und maximum Kreis
	matrix currentmatrix_nlw 
	currentcolor 
	0 0 translate 
	LRangleLeArea5 
	rotate
	1 setlinewidth_nlw 
 	LRradiusMax 0 moveto 
 	0 0 
 	LRradiusMax 0 360 arc 
 	LRradiusMin 0 moveto 
 	0 0 
 	LRradiusMin 0 360 arc 
 	stroke 
 	1 setlinewidth_nlw 
 	setcolor 
	setmatrix_nlw 

	% Kran und Anzeigewerte
 	matrix currentmatrix_nlw 
 	90 rotate 
 	currentcolor
 	Green
 	
 	ixDisableMainPag false eq {
 	 	3 setlinewidth_nlw 
 	 }{	 	
 	 	 	1 setlinewidth_nlw 
 	 } ifelse
 	 
 	LRradiusMin 2 div 0 LRradiusMin 4 div sub moveto 
 	LRradiusLoad 6 sub 0 LRradiusMin 6 div sub lineto 
 	LRradiusLoad 6 sub LRradiusMin 6 div lineto 
 	LRradiusMin 2 div LRradiusMin 4 div lineto 
 	LRradiusMin 2 div LRradiusMin 2 div lineto
 	0 LRradiusMin 2 div sub LRradiusMin 2 div lineto
 	0 LRradiusMin 2 div sub 0 LRradiusMin 2 div sub lineto
 	LRradiusMin 2 div 0 LRradiusMin 2 div sub lineto
 	LRradiusMin 2 div 0 LRradiusMin 4 div sub lineto
 	stroke
 	LRradiusLoad 6 add 0 moveto 
 	LRradiusLoad  0 6 0 360 arc 
 	stroke 
 	1 setlinewidth_nlw
 	setcolor 
	setmatrix_nlw
 	
 	
 	ixDisableMainPag false eq {
 	
 	matrix currentmatrix_nlw 
 	60 LRradiusLoad 10.0 sub translate 
 	1 1 scale 
 	irLoadRadius 3.10 false false FSfatFont 0.75 
 	baValueDist001 
 	setmatrix_nlw 
 	matrix currentmatrix_nlw 
	20 -50.0 translate 
  	1 1 scale 
 	irLoadAngle 3.10 (°) false false FSfatFont 1 
 	baValue001 
 	setmatrix_nlw 
 } if
 
 
 
	%?manual_end 
	
	qxSectorActive 
} def
%?partend

%?partdef spCranePage005
%?fn	spCranePage005
%?brief	crane main page when sensor error values red flashing
%?bbox	0 0 719 559
/spCranePage005 {
	/ixTypeInvisible exch def	%?brief hide crane type %?use INP %?type BOOL %?dflt false
	/idAirSpeedNum exch def	%?brief idAirSpeedNum %?use INP %?type REAL %?dflt    0.00
	/idNumCraneType exch def	%?brief number of crane type %?use INP %?type REAL %?dflt    0.00
	/ixLoadCurve75 exch def	%?brief load curve 75 %?use INP %?type BOOL %?dflt false
	/idOperationMode exch def	%?brief operation mode %?use INP %?type DINT %?dflt 0
	/irSgSpeed exch def	%?brief sg speed %?use INP %?type REAL %?dflt    0.00
	/irHgSpeed exch def	%?brief Hg speed %?use INP %?type REAL %?dflt    0.00
	/irLgSpeed exch def	%?brief lg speed %?use INP %?type REAL %?dflt    0.00
	/ixEnaButton exch def	%?brief enable button %?use INP %?type BOOL %?dflt false
	/ixSgAngleError exch def	%?brief sg angle error %?use INP %?type BOOL %?dflt false
	/ixLgAngleError exch def	%?brief angle error %?use INP %?type BOOL %?dflt false
	/ixLoadError exch def	%?brief load error %?use INP %?type BOOL %?dflt false
	/idChangeUnit exch def	%?brief change unit %?use INP %?type DINT %?dflt 0
	/ixUtilizationErr exch def	%?brief utilization error %?use INP %?type BOOL %?dflt false
	/ixHgDown exch def	%?brief hoisting gear down %?use INP %?type BOOL %?dflt false
	/ixHgUp exch def	%?brief hoisting gear up %?use INP %?type BOOL %?dflt false
	/ixLgDown exch def	%?brief luffing gear down %?use INP %?type BOOL %?dflt false
	/ixLgUp exch def	%?brief luffing gear up %?use INP %?type BOOL %?dflt false
	/ixWindSpeedHigh exch def	%?brief wind speed high %?use INP %?type BOOL %?dflt false
	/irWindSpeed exch def	%?brief wind speed [m/s] %?use INP %?type REAL %?dflt    0.00
	/irRopeWinch2 exch def	%?brief rope winch 2 [m] %?use INP %?type REAL %?dflt    0.00
	/irRopeWinch1 exch def	%?brief rope winch 1 [m] %?use INP %?type REAL %?dflt    0.00
	/irResetLoad exch def	%?brief reset load [t] %?use INP %?type REAL %?dflt    0.00
	/irTaraLoad exch def	%?brief tara load [t] %?use INP %?type REAL %?dflt    0.00
	/irMaxLoad exch def	%?brief maximum load [t] %?use INP %?type REAL %?dflt    0.00
	/irActualLoad exch def	%?brief actual load [t] %?use INP %?type REAL %?dflt    0.00
	/irUtilisation exch def	%?brief utilisation %?use INP %?type REAL %?dflt    0.00
	/irOutreach exch def	%?brief outreach [m] %?use INP %?type REAL %?dflt    0.00
	/irSgPosition exch def	%?brief slewing gear position [°] %?use INP %?type REAL %?dflt    0.00
	/irJibAngle exch def	%?brief jib angle [°] %?use INP %?type REAL %?dflt    0.00
	/irCraneType exch def	%?brief crane type (MTC=1; BOS=2; CBO=3; CBG=4; RL=5) %?use INP %?type REAL %?dflt    0.00
	/ixResetLoadAct exch def	%?brief reset load active %?use INP %?type BOOL %?dflt false
	/ixTwoWinch exch def	%?brief two winches selected %?use INP %?type BOOL %?dflt false
	/ixLmlWarning exch def	%?brief lml warning %?use INP %?type BOOL %?dflt false
	/ixLmlAlarm exch def	%?brief lml alarm %?use INP %?type BOOL %?dflt false
	/LXsgPosSetZero false def	%?brief sg positon set to zero %?use LOC %?type BOOL %?dflt false
	/LDsgPosition 0 def	%?brief slewing ger position modified %?use LOC %?type REAL %?dflt    0.00
	idAirSpeedNum 1 eq {	
		ixWindSpeedHigh true eq {	
			true setflash 
		} if 
		matrix currentmatrix_nlw 
		currentcolor 
		281 495 translate 
		0 rotate 
		1 1 scale 
		irWindSpeed 3 false 
		ixWindSpeedHigh FSfatFont 0.75 
		baValueSpeed002 
		setcolor 
		setmatrix_nlw 
		false setflash 
	} if 
	ixLgAngleError true eq {	
		true setflash 
	} if 
	matrix currentmatrix_nlw 
	currentcolor 
	365 405 translate 
	0 rotate 
	1 1 scale 
	irJibAngle 3 (°) false 
	ixLgAngleError FSfatFont 1 
	baValue001 
	setcolor 
	setmatrix_nlw 
	false setflash 
	matrix currentmatrix_nlw 
	currentcolor 
	210 120 translate 
	0 rotate 
	1 1 scale 
	true 
	irSgPosition 359.49 
	spGT001 
	/LXsgPosSetZero exch store 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	210 130 translate 
	0 rotate 
	1 1 scale 
	LXsgPosSetZero irSgPosition 0 
	FUN_SEL 
	/LDsgPosition exch store 
	setcolor 
	setmatrix_nlw 
	ixSgAngleError true eq {	
		true setflash 
	} if 
	matrix currentmatrix_nlw 
	currentcolor 
	225 145 translate 
	0 rotate 
	1 1 scale 
	LDsgPosition 3 (°) false 
	ixSgAngleError FSfatFont 1 
	baValue001 
	setcolor 
	setmatrix_nlw 
	false setflash 
	matrix currentmatrix_nlw 
	currentcolor 
	515 110 translate 
	0 rotate 
	1 1 scale 
	irRopeWinch1 3.10 false false 
	FSfatFont 0.75 
	baValueDist001 
	setcolor 
	setmatrix_nlw 
	ixTwoWinch true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		640 110 translate 
		0 rotate 
		1 1 scale 
		irRopeWinch2 3.10 false false 
		FSfatFont 0.75 
		baValueDist001 
		setcolor 
		setmatrix_nlw 
	} if 
	ixLgAngleError true eq {	
		true setflash 
	} if 
	matrix currentmatrix_nlw 
	currentcolor 
	506 185 translate 
	0 rotate 
	2 2 scale 
	irOutreach 3.10 false 
	ixLgAngleError FSfatFont 0.75 
	baValueDist001 
	setcolor 
	setmatrix_nlw 
	false setflash 
	ixLoadError true eq {	
		true setflash 
	} if 
	matrix currentmatrix_nlw 
	currentcolor 
	671 270 translate 
	0 rotate 
	2 2 scale 
	irTaraLoad 3 false 
	ixLoadError FSfatFont idChangeUnit 0.75 
	baValueLoad001 
	setcolor 
	setmatrix_nlw 
	false setflash 
	ixUtilizationErr true eq {	
		true setflash 
	} if 
	matrix currentmatrix_nlw 
	currentcolor 
	450 295 translate 
	0 rotate 
	0.80 0.80 scale 
	irMaxLoad 3.10 false 
	ixUtilizationErr FSbigFont idChangeUnit 0.75 
	baValueLoad001 
	setcolor 
	setmatrix_nlw 
	false setflash 
	ixUtilizationErr true eq {	
		true setflash 
	} if 
	matrix currentmatrix_nlw 
	currentcolor 
	380 303 translate 
	0 rotate 
	0.80 0.80 scale 
	(max:) 
	FSbigFont 0 
	ixUtilizationErr false false false 
	baText002 
	setcolor 
	setmatrix_nlw 
	false setflash 
	ixLoadError true eq {	
		true setflash 
	} if 
	matrix currentmatrix_nlw 
	currentcolor 
	450 270 translate 
	0 rotate 
	0.80 0.80 scale 
	irActualLoad 3.10 false 
	ixLoadError FSbigFont idChangeUnit 0.75 
	baValueLoad001 
	setcolor 
	setmatrix_nlw 
	false setflash 
	ixResetLoadAct true eq {	
		ixLoadError true eq {	
			true setflash 
		} if 
		matrix currentmatrix_nlw 
		currentcolor 
		Green 656 323 translate 
		0 rotate 
		0.80 0.80 scale 
		irResetLoad 3.10 false 
		ixLoadError FSfatFont idChangeUnit 0.75 
		baValueLoad001 
		setcolor 
		setmatrix_nlw 
		false setflash 
	} if 
	ixUtilizationErr true eq {	
		ixUtilizationErr true eq {	
			true setflash 
		} if 
		matrix currentmatrix_nlw 
		currentcolor 
		Red 30 165 translate 
		0 rotate 
		1 1 scale 
		irUtilisation () 0 150 true true true false 
		ixLmlWarning ixLmlAlarm 1000 1000 0 0 6 30 305 true false 0 true 0 
		FSstdFont true 1 
		baBar006 
		setcolor 
		setmatrix_nlw 
		false setflash 
	} if 
	ixUtilizationErr false eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		30 165 translate 
		0 rotate 
		1 1 scale 
		irUtilisation () 0 150 true true true false 
		ixLmlWarning ixLmlAlarm 1000 1000 0 0 6 30 305 true false 0 true 0 
		FSstdFont true 1 
		baBar006 
		setcolor 
		setmatrix_nlw 
	} if 
	ixHgDown true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 340 109 translate 
		0 rotate 
		0.62 0.62 scale 
		gsGeneral001 
		setcolor 
		setmatrix_nlw 
	} if 
	ixHgUp true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 390 191 translate 
		180 rotate 
		0.62 0.62 scale 
		gsGeneral001 
		setcolor 
		setmatrix_nlw 
	} if 
	ixLgDown true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 696 208 translate 
		90 rotate 
		0.60 0.60 scale 
		gsGeneral001 
		setcolor 
		setmatrix_nlw 
	} if 
	ixLgUp true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 611 256 translate 
		270 rotate 
		0.60 0.60 scale 
		gsGeneral001 
		setcolor 
		setmatrix_nlw 
	} if 
	ixUtilizationErr true eq {	
		true setflash 
	} if 
	matrix currentmatrix_nlw 
	currentcolor 
	77 502 translate 
	0 rotate 
	0.75 0.75 scale 
	(%) 
	FSfatFont 0 
	ixUtilizationErr false false false 
	baText002 
	setcolor 
	setmatrix_nlw 
	false setflash 
	matrix currentmatrix_nlw 
	currentcolor 
	171 475 translate 
	0 rotate 
	0.75 0.75 scale 
	ixWindSpeedHigh false false false (ssWind001) 
	baSwitchSymbolColor004 
	setcolor 
	setmatrix_nlw 
	ixLoadError true eq {	
		true setflash 
	} if 
	matrix currentmatrix_nlw 
	currentcolor 
	384 278 translate 
	0 rotate 
	0.80 0.80 scale 
	(act:) 
	FSbigFont 0 
	ixLoadError false false false 
	baText002 
	setcolor 
	setmatrix_nlw 
	false setflash 
	matrix currentmatrix_nlw 
	currentcolor 
	586 160 translate 
	0 rotate 
	1 1 scale 
	ixLgAngleError false false false (gsLimit019) 
	baSwitchSymbolColor004 
	setcolor 
	setmatrix_nlw 
	idChangeUnit 4 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		440 330 translate 
		0 rotate 
		0.60 0.60 scale 
		(lb*1000) 
		FSmsgBigFont 0 
		baText001 
		setcolor 
		setmatrix_nlw 
	} if 
	irLgSpeed 2 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 225 380 translate 
		0 rotate 
		0.87 0.87 scale 
		gsDrive008 
		setcolor 
		setmatrix_nlw 
	} if 
	irLgSpeed 3 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 230 385 translate 
		0 rotate 
		0.75 0.75 scale 
		gsDrive006 
		setcolor 
		setmatrix_nlw 
	} if 
	irLgSpeed 1 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 235 390 translate 
		0 rotate 
		0.62 0.62 scale 
		gsDrive007 
		setcolor 
		setmatrix_nlw 
	} if 
	irSgSpeed 2 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 165 65 translate 
		0 rotate 
		0.87 0.87 scale 
		gsDrive008 
		setcolor 
		setmatrix_nlw 
	} if 
	irSgSpeed 3 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 170 70 translate 
		0 rotate 
		0.75 0.75 scale 
		gsDrive006 
		setcolor 
		setmatrix_nlw 
	} if 
	irSgSpeed 1 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 175 75 translate 
		0 rotate 
		0.62 0.62 scale 
		gsDrive007 
		setcolor 
		setmatrix_nlw 
	} if 
	idOperationMode 11 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		594 325 translate 
		0 rotate 
		1.40 1.40 scale_nlw 
		ssCoil001 
		setcolor 
		setmatrix_nlw 
	} if 
	idOperationMode 14 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		593 346 translate 
		0 rotate 
		0.75 0.87 scale_nlw 
		ssTilt001 
		setcolor 
		setmatrix_nlw 
	} if 
	idOperationMode 6 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		615 341 translate 
		0 rotate 
		1 1 scale_nlw 
		ssGrab002 
		setcolor 
		setmatrix_nlw 
	} if 
	idOperationMode 8 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		611 346 translate 
		0 rotate 
		1 1 scale_nlw 
		ssGrab003 
		setcolor 
		setmatrix_nlw 
	} if 
	idOperationMode 7 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		614 341 translate 
		0 rotate 
		1 1 scale_nlw 
		ssGrab005 
		setcolor 
		setmatrix_nlw 
	} if 
	idOperationMode 5 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		588 352 translate 
		0 rotate 
		0.80 0.80 scale_nlw 
		ssSpreader001 
		setcolor 
		setmatrix_nlw 
	} if 
	idOperationMode 9 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		613 353 translate 
		0 rotate 
		0.80 0.80 scale_nlw 
		ssWheelLoader001 
		setcolor 
		setmatrix_nlw 
	} if 
	idOperationMode 10 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		613 346 translate 
		0 rotate 
		1 1 scale_nlw 
		ssMagnet001 
		setcolor 
		setmatrix_nlw 
	} if 
	idOperationMode 4 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		614 343 translate 
		0 rotate 
		1 1 scale_nlw 
		ssRotator001 
		setcolor 
		setmatrix_nlw 
	} if 
	idOperationMode 3 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		611 360 translate 
		0 rotate 
		1 1 scale_nlw 
		ssHook005 
		setcolor 
		setmatrix_nlw 
	} if 
	ixLoadCurve75 true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		155 460 translate 
		0 rotate 
		0.67 0.67 scale 
		75 3 (%) false false 
		FSfatFont 1 
		baValue001 
		setcolor 
		setmatrix_nlw 
	} if 
	ixLoadCurve75 false eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		155 460 translate 
		0 rotate 
		0.67 0.67 scale 
		66 3 (%) false false 
		FSfatFont 1 
		baValue001 
		setcolor 
		setmatrix_nlw 
	} if 
	matrix currentmatrix_nlw 
	currentcolor 
	110 410 translate 
	0 rotate 
	0.75 0.75 scale 
	ssLmb01 
	setcolor 
	setmatrix_nlw 
	idOperationMode 99 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		613 342 translate 
		0 rotate 
		1 1 scale 
		ssManTrans001 
		setcolor 
		setmatrix_nlw 
	} if 
	matrix currentmatrix_nlw 
	currentcolor 
	380 115 translate 
	0 rotate 
	0.75 0.75 scale 
	gsWinch001 
	setcolor 
	setmatrix_nlw 
	irCraneType 1 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		62 84 translate 
		0 rotate 
		1.82 1.82 scale_nlw 
		ssCrane007 
		setcolor 
		setmatrix_nlw 
	} if 
	irCraneType 2 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		62 83 translate 
		0 rotate 
		1.82 1.82 scale_nlw 
		ssCrane008 
		setcolor 
		setmatrix_nlw 
	} if 
	irCraneType 3 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		62 83 translate 
		0 rotate 
		1.82 1.82 scale_nlw 
		ssCrane009 
		setcolor 
		setmatrix_nlw 
	} if 
	matrix currentmatrix_nlw 
	currentcolor 
	365 366 translate 
	27 rotate 
	0.75 0.75 scale 
	(LIEBHERR) 4 0 
	baText001 
	setcolor 
	setmatrix_nlw 
	ixTypeInvisible false eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		199 197 translate 
		0 rotate 
		1 1 scale 
		idNumCraneType 3 false false 0 
		baValue004 
		setcolor 
		setmatrix_nlw 
	} if 
	irHgSpeed 1 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 385 65 translate 
		0 rotate 
		0.62 0.62 scale 
		gsDrive007 
		setcolor 
		setmatrix_nlw 
	} if 
	irHgSpeed 2 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 375 55 translate 
		0 rotate 
		0.87 0.87 scale 
		gsDrive008 
		setcolor 
		setmatrix_nlw 
	} if 
	irHgSpeed 3 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 380 60 translate 
		0 rotate 
		0.75 0.75 scale 
		gsDrive006 
		setcolor 
		setmatrix_nlw 
	} if 
	idAirSpeedNum 2 eq {	
		ixWindSpeedHigh true eq {	
			true setflash 
		} if 
		matrix currentmatrix_nlw 
		currentcolor 
		268 495 translate 
		0 rotate 
		1 1 scale 
		irWindSpeed 3600 mul 
		1000 div 
		3.10 (km/h) false 
		ixWindSpeedHigh 7 0.75 
		baValue001 
		setcolor 
		setmatrix_nlw 
		false setflash 
	} if 
	idAirSpeedNum 3 eq {	
		ixWindSpeedHigh true eq {	
			true setflash 
		} if 
		matrix currentmatrix_nlw 
		currentcolor 
		281 495 translate 
		0 rotate 
		1 1 scale 
		irWindSpeed 0.51 div 
		3 (kn) false 
		ixWindSpeedHigh 7 0.75 
		baValue001 
		setcolor 
		setmatrix_nlw 
		false setflash 
	} if 
} def
%?partend

%?partdef spCranePage006
%?fn	spCranePage006
%?brief	crane main page when sensor error values red flashing
%?bbox	0 0 719 559
/spCranePage006 {
	/ixTypeInvisible exch def	%?brief hide crane type %?use INP %?type BOOL %?dflt false
	/idAirSpeedNum exch def	%?brief idAirSpeedNum %?use INP %?type REAL %?dflt    0.00
	/idNumCraneType exch def	%?brief SDnumCraneType %?use INP %?type REAL %?dflt    0.00
	/ixLoadCurve75 exch def	%?brief load curve 75 %?use INP %?type BOOL %?dflt false
	/idOperationMode exch def	%?brief operation mode %?use INP %?type DINT %?dflt 0
	/irSgSpeed exch def	%?brief sg speed %?use INP %?type REAL %?dflt    0.00
	/irLgSpeed exch def	%?brief lg speed %?use INP %?type REAL %?dflt    0.00
	/ixEnaButton exch def	%?brief enable button %?use INP %?type BOOL %?dflt false
	/ixSgAngleError exch def	%?brief sg angle error %?use INP %?type BOOL %?dflt false
	/ixLgAngleError exch def	%?brief angle error %?use INP %?type BOOL %?dflt false
	/ixLoadError exch def	%?brief load error %?use INP %?type BOOL %?dflt false
	/idChangeUnit exch def	%?brief change unit %?use INP %?type DINT %?dflt 0
	/ixUtilizationErr exch def	%?brief utilization error %?use INP %?type BOOL %?dflt false
	/ixHgDown exch def	%?brief hoisting gear down %?use INP %?type BOOL %?dflt false
	/ixHgUp exch def	%?brief hoisting gear up %?use INP %?type BOOL %?dflt false
	/ixLgDown exch def	%?brief luffing gear down %?use INP %?type BOOL %?dflt false
	/ixLgUp exch def	%?brief luffing gear up %?use INP %?type BOOL %?dflt false
	/ixWindSpeedHigh exch def	%?brief wind speed high %?use INP %?type BOOL %?dflt false
	/irWindSpeed exch def	%?brief wind speed [m/s] %?use INP %?type REAL %?dflt    0.00
	/irRopeWinch2 exch def	%?brief rope winch 2 [m] %?use INP %?type REAL %?dflt    0.00
	/irRopeWinch1 exch def	%?brief rope winch 1 [m] %?use INP %?type REAL %?dflt    0.00
	/irResetLoad exch def	%?brief reset load [t] %?use INP %?type REAL %?dflt    0.00
	/irTaraLoad exch def	%?brief tara load [t] %?use INP %?type REAL %?dflt    0.00
	/irMaxLoad exch def	%?brief maximum load [t] %?use INP %?type REAL %?dflt    0.00
	/irActualLoad exch def	%?brief actual load [t] %?use INP %?type REAL %?dflt    0.00
	/irUtilisation exch def	%?brief utilisation %?use INP %?type REAL %?dflt    0.00
	/irOutreach exch def	%?brief outreach [m] %?use INP %?type REAL %?dflt    0.00
	/irSgPosition exch def	%?brief slewing gear position [°] %?use INP %?type REAL %?dflt    0.00
	/irJibAngle exch def	%?brief jib angle [°] %?use INP %?type REAL %?dflt    0.00
	/irCraneType exch def	%?brief crane type (MTC=1; BOS=2; CBO=3; CBG=4; RL=5) %?use INP %?type REAL %?dflt    0.00
	/ixResetLoadAct exch def	%?brief reset load active %?use INP %?type BOOL %?dflt false
	/ixTwoWinch exch def	%?brief two winches selected %?use INP %?type BOOL %?dflt false
	/ixLmlWarning exch def	%?brief lml warning %?use INP %?type BOOL %?dflt false
	/ixLmlAlarm exch def	%?brief lml alarm %?use INP %?type BOOL %?dflt false
	/LXsgPosSetZero false def	%?brief sg positon set to zero %?use LOC %?type BOOL %?dflt false
	/LDsgPosition 0 def	%?brief slewing ger position modified %?use LOC %?type REAL %?dflt    0.00
	idAirSpeedNum 1 eq {	
		ixWindSpeedHigh true eq {	
			true setflash 
		} if 
		matrix currentmatrix_nlw 
		currentcolor 
		281 495 translate 
		0 rotate 
		1 1 scale 
		irWindSpeed 3 false 
		ixWindSpeedHigh FSfatFont 0.75 
		baValueSpeed002 
		setcolor 
		setmatrix_nlw 
		false setflash 
	} if 
	ixLgAngleError true eq {	
		true setflash 
	} if 
	matrix currentmatrix_nlw 
	currentcolor 
	305 425 translate 
	0 rotate 
	1 1 scale 
	irJibAngle 3 (°) false 
	ixLgAngleError FSfatFont 1 
	baValue001 
	setcolor 
	setmatrix_nlw 
	false setflash 
	matrix currentmatrix_nlw 
	currentcolor 
	210 120 translate 
	0 rotate 
	1 1 scale 
	true 
	irSgPosition 359.49 
	spGT001 
	/LXsgPosSetZero exch store 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	210 130 translate 
	0 rotate 
	1 1 scale 
	LXsgPosSetZero irSgPosition 0 
	FUN_SEL 
	/LDsgPosition exch store 
	setcolor 
	setmatrix_nlw 
	ixSgAngleError true eq {	
		true setflash 
	} if 
	matrix currentmatrix_nlw 
	currentcolor 
	225 145 translate 
	0 rotate 
	1 1 scale 
	LDsgPosition 3 (°) false 
	ixSgAngleError FSfatFont 1 
	baValue001 
	setcolor 
	setmatrix_nlw 
	false setflash 
	matrix currentmatrix_nlw 
	currentcolor 
	515 110 translate 
	0 rotate 
	1 1 scale 
	irRopeWinch1 3.10 false false 
	FSfatFont 0.75 
	baValueDist001 
	setcolor 
	setmatrix_nlw 
	ixTwoWinch true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		640 110 translate 
		0 rotate 
		1 1 scale 
		irRopeWinch2 3.10 false false 
		FSfatFont 0.75 
		baValueDist001 
		setcolor 
		setmatrix_nlw 
	} if 
	ixLgAngleError true eq {	
		true setflash 
	} if 
	matrix currentmatrix_nlw 
	currentcolor 
	465 315 translate 
	0 rotate 
	2 2 scale 
	irOutreach 3.10 false 
	ixLgAngleError FSfatFont 0.75 
	baValueDist001 
	setcolor 
	setmatrix_nlw 
	false setflash 
	ixLoadError true eq {	
		true setflash 
	} if 
	matrix currentmatrix_nlw 
	currentcolor 
	640 400 translate 
	0 rotate 
	2 2 scale 
	irActualLoad 3 false 
	ixLoadError FSfatFont idChangeUnit 0.75 
	baValueLoad001 
	setcolor 
	setmatrix_nlw 
	false setflash 
	ixUtilizationErr true eq {	
		true setflash 
	} if 
	matrix currentmatrix_nlw 
	currentcolor 
	450 425 translate 
	0 rotate 
	0.80 0.80 scale 
	irMaxLoad 3.10 false 
	ixUtilizationErr FSbigFont idChangeUnit 0.75 
	baValueLoad001 
	setcolor 
	setmatrix_nlw 
	false setflash 
	ixUtilizationErr true eq {	
		true setflash 
	} if 
	matrix currentmatrix_nlw 
	currentcolor 
	380 433 translate 
	0 rotate 
	0.80 0.80 scale 
	(max:) 
	FSbigFont 0 
	ixUtilizationErr false false false 
	baText002 
	setcolor 
	setmatrix_nlw 
	false setflash 
	ixUtilizationErr true eq {	
		ixUtilizationErr true eq {	
			true setflash 
		} if 
		matrix currentmatrix_nlw 
		currentcolor 
		Red 30 165 translate 
		0 rotate 
		1 1 scale 
		irUtilisation () 0 150 true true true false 
		ixLmlWarning ixLmlAlarm 1000 1000 0 0 6 30 305 true false 0 true 0 
		FSstdFont true 1 
		baBar006 
		setcolor 
		setmatrix_nlw 
		false setflash 
	} if 
	ixUtilizationErr false eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		30 165 translate 
		0 rotate 
		1 1 scale 
		irUtilisation () 0 150 true true true false 
		ixLmlWarning ixLmlAlarm 1000 1000 0 0 6 30 305 true false 0 true 0 
		FSstdFont true 1 
		baBar006 
		setcolor 
		setmatrix_nlw 
	} if 
	ixHgDown true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 380 59 translate 
		0 rotate 
		0.62 0.62 scale 
		gsGeneral001 
		setcolor 
		setmatrix_nlw 
	} if 
	ixHgUp true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 430 181 translate 
		180 rotate 
		0.62 0.62 scale 
		gsGeneral001 
		setcolor 
		setmatrix_nlw 
	} if 
	ixLgDown true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 655 338 translate 
		90 rotate 
		0.60 0.60 scale 
		gsGeneral001 
		setcolor 
		setmatrix_nlw 
	} if 
	ixLgUp true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 570 386 translate 
		270 rotate 
		0.60 0.60 scale 
		gsGeneral001 
		setcolor 
		setmatrix_nlw 
	} if 
	ixUtilizationErr true eq {	
		true setflash 
	} if 
	matrix currentmatrix_nlw 
	currentcolor 
	77 502 translate 
	0 rotate 
	0.75 0.75 scale 
	(%) 
	FSfatFont 0 
	ixUtilizationErr false false false 
	baText002 
	setcolor 
	setmatrix_nlw 
	false setflash 
	matrix currentmatrix_nlw 
	currentcolor 
	171 475 translate 
	0 rotate 
	0.75 0.75 scale 
	ixWindSpeedHigh false false false (ssWind001) 
	baSwitchSymbolColor004 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	545 290 translate 
	0 rotate 
	1 1 scale 
	ixLgAngleError false false false (gsLimit019) 
	baSwitchSymbolColor004 
	setcolor 
	setmatrix_nlw 
	idChangeUnit 4 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		440 460 translate 
		0 rotate 
		0.60 0.60 scale 
		(lb*1000) 
		FSmsgBigFont 0 
		baText001 
		setcolor 
		setmatrix_nlw 
	} if 
	irCraneType 1 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		63 84 translate 
		0 rotate 
		1.80 1.80 scale_nlw 
		ssCrane011 
		setcolor 
		setmatrix_nlw 
	} if 
	irCraneType 2 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		63 84 translate 
		0 rotate 
		1.80 1.80 scale_nlw 
		ssCrane012 
		setcolor 
		setmatrix_nlw 
	} if 
	irCraneType 3 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		63 84 translate 
		0 rotate 
		1.80 1.80 scale_nlw 
		ssCrane013 
		setcolor 
		setmatrix_nlw 
	} if 
	ixLoadCurve75 true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		155 460 translate 
		0 rotate 
		0.67 0.67 scale 
		75 3 (%) false false 
		FSfatFont 1 
		baValue001 
		setcolor 
		setmatrix_nlw 
	} if 
	ixLoadCurve75 false eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		155 460 translate 
		0 rotate 
		0.67 0.67 scale 
		66 3 (%) false false 
		FSfatFont 1 
		baValue001 
		setcolor 
		setmatrix_nlw 
	} if 
	matrix currentmatrix_nlw 
	currentcolor 
	110 410 translate 
	0 rotate 
	0.75 0.75 scale 
	ssLmb01 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	375 85 translate 
	0 rotate 
	0.75 0.75 scale 
	gsWinch001 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	364 241 translate 
	-19 rotate 
	0.75 0.75 scale 
	(LIEBHERR) 4 0 
	baText001 
	setcolor 
	setmatrix_nlw 
	ixTypeInvisible false eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		199 197 translate 
		0 rotate 
		1 1 scale 
		idNumCraneType 3 false false 0 
		baValue004 
		setcolor 
		setmatrix_nlw 
	} if 
	idAirSpeedNum 2 eq {	
		ixWindSpeedHigh true eq {	
			true setflash 
		} if 
		matrix currentmatrix_nlw 
		currentcolor 
		268 495 translate 
		0 rotate 
		1 1 scale 
		irWindSpeed 3600 mul 
		1000 div 
		3.10 (km/h) false 
		ixWindSpeedHigh 7 0.75 
		baValue001 
		setcolor 
		setmatrix_nlw 
		false setflash 
	} if 
	idAirSpeedNum 3 eq {	
		ixWindSpeedHigh true eq {	
			true setflash 
		} if 
		matrix currentmatrix_nlw 
		currentcolor 
		281 495 translate 
		0 rotate 
		1 1 scale 
		irWindSpeed 0.51 div 
		3 (kn) false 
		ixWindSpeedHigh 7 0.75 
		baValue001 
		setcolor 
		setmatrix_nlw 
		false setflash 
	} if 
} def
%?partend

%?partdef spMagnet001
%?fn	spMagnet001
%?brief	magnet status
%?bbox	0 0 159 79
/spMagnet001 {
	/ixBattActiv exch def	%?brief ixBattActiv %?use INP %?type BOOL %?dflt false
	/idMagnetStatus exch def	%?brief magnet status %?use INP %?type REAL %?dflt    0.00
	idMagnetStatus 1 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		80 0 translate 
		0 rotate 
		1 1 scale 
		false false false false (ssMagnet004) 
		baSwitchSymbolColor001 
		setcolor 
		setmatrix_nlw 
	} if 
	idMagnetStatus 2 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		80 0 translate 
		0 rotate 
		1 1 scale 
		false false false true (ssMagnet001) 
		baSwitchSymbolColor001 
		setcolor 
		setmatrix_nlw 
	} if 
	idMagnetStatus 3 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		80 0 translate 
		0 rotate 
		1 1 scale 
		false false false true (ssMagnet004) 
		baSwitchSymbolColor001 
		setcolor 
		setmatrix_nlw 
	} if 
	idMagnetStatus 4 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		80 0 translate 
		0 rotate 
		1 1 scale 
		false true false false (ssMagnet001) 
		baSwitchSymbolColor001 
		setcolor 
		setmatrix_nlw 
	} if 
	idMagnetStatus 5 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		80 0 translate 
		0 rotate 
		1 1 scale 
		false true false false (ssMagnet004) 
		baSwitchSymbolColor001 
		setcolor 
		setmatrix_nlw 
	} if 
	ixBattActiv true eq {	
		ixBattActiv true eq {	
			true setflash 
		} if 
		matrix currentmatrix_nlw 
		currentcolor 
		Red 
		5 -15 translate 
		0 rotate 
		1 1 scale 
		gsEngine004 
		setcolor 
		setmatrix_nlw 
		false setflash 
	} if 
} def
%?partend


%?partdef spTilt001
%?fn	spTilt001
%?brief	tilt container status
%?bbox	0 0 79 79
/spTilt001 {
	/idTiltStatus exch def	%?brief tilt status %?use INP %?type REAL %?dflt    0.00
	idTiltStatus 1 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		Green -15 16 translate 
		0 rotate 
		0.69 0.75 scale 
		ssTilt001 
		setcolor 
		setmatrix_nlw 
	} if 
	idTiltStatus 3 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		-15 16 translate 
		0 rotate 
		0.69 0.75 scale 
		ssTilt001 
		setcolor 
		setmatrix_nlw 
	} if 
	idTiltStatus 2 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		Green -20 6 translate 
		0 rotate 
		0.69 0.87 scale 
		ssTilt002 
		setcolor 
		setmatrix_nlw 
	} if 
	idTiltStatus 4 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		-20 6 translate 
		0 rotate 
		0.69 0.87 scale 
		ssTilt002 
		setcolor 
		setmatrix_nlw 
	} if 
} def
%?partend

%?partdef spCranePage007
%?fn	spCranePage007
%?brief	crane main page when sensor error values red flashing
%?bbox	0 0 719 559
/spCranePage007 {
	/idNumCraneType exch def	%?brief number of crane type %?use INP %?type REAL %?dflt    0.00
	/ixLoadCurve75 exch def	%?brief load curve 75 %?use INP %?type BOOL %?dflt false
	/idOperationMode exch def	%?brief operation mode %?use INP %?type DINT %?dflt 0
	/irSgSpeed exch def	%?brief sg speed %?use INP %?type REAL %?dflt    0.00
	/irLgSpeed exch def	%?brief lg speed %?use INP %?type REAL %?dflt    0.00
	/ixEnaButton exch def	%?brief enable button %?use INP %?type BOOL %?dflt false
	/ixSgAngleError exch def	%?brief sg angle error %?use INP %?type BOOL %?dflt false
	/ixLgAngleError exch def	%?brief angle error %?use INP %?type BOOL %?dflt false
	/ixLoadError exch def	%?brief load error %?use INP %?type BOOL %?dflt false
	/idChangeUnit exch def	%?brief change unit %?use INP %?type DINT %?dflt 0
	/ixUtilizationErr exch def	%?brief utilization error %?use INP %?type BOOL %?dflt false
	/ixHgDown exch def	%?brief hoisting gear down %?use INP %?type BOOL %?dflt false
	/ixHgUp exch def	%?brief hoisting gear up %?use INP %?type BOOL %?dflt false
	/ixLgDown exch def	%?brief luffing gear down %?use INP %?type BOOL %?dflt false
	/ixLgUp exch def	%?brief luffing gear up %?use INP %?type BOOL %?dflt false
	/ixWindSpeedHigh exch def	%?brief wind speed high %?use INP %?type BOOL %?dflt false
	/irWindSpeed exch def	%?brief wind speed [m/s] %?use INP %?type REAL %?dflt    0.00
	/irRopeWinch2 exch def	%?brief rope winch 2 [m] %?use INP %?type REAL %?dflt    0.00
	/irRopeWinch1 exch def	%?brief rope winch 1 [m] %?use INP %?type REAL %?dflt    0.00
	/irResetLoad exch def	%?brief reset load [t] %?use INP %?type REAL %?dflt    0.00
	/irTaraLoad exch def	%?brief tara load [t] %?use INP %?type REAL %?dflt    0.00
	/irMaxLoad exch def	%?brief maximum load [t] %?use INP %?type REAL %?dflt    0.00
	/irActualLoad exch def	%?brief actual load [t] %?use INP %?type REAL %?dflt    0.00
	/irUtilisation exch def	%?brief utilisation %?use INP %?type REAL %?dflt    0.00
	/irOutreach exch def	%?brief outreach [m] %?use INP %?type REAL %?dflt    0.00
	/irSgPosition exch def	%?brief slewing gear position [°] %?use INP %?type REAL %?dflt    0.00
	/irJibAngle exch def	%?brief jib angle [°] %?use INP %?type REAL %?dflt    0.00
	/irCraneType exch def	%?brief crane type (MTC=1; BOS=2; CBO=3; CBG=4; RL=5) %?use INP %?type REAL %?dflt    0.00
	/ixResetLoadAct exch def	%?brief reset load active %?use INP %?type BOOL %?dflt false
	/ixTwoWinch exch def	%?brief two winches selected %?use INP %?type BOOL %?dflt false
	/ixLmlWarning exch def	%?brief lml warning %?use INP %?type BOOL %?dflt false
	/ixLmlAlarm exch def	%?brief lml alarm %?use INP %?type BOOL %?dflt false
	/LXsgPosSetZero false def	%?brief sg positon set to zero %?use LOC %?type BOOL %?dflt false
	/LDsgPosition 0 def	%?brief slewing ger position modified %?use LOC %?type REAL %?dflt    0.00
	matrix currentmatrix_nlw 
	currentcolor 
	210 120 translate 
	0 rotate 
	1 1 scale 
	true 
	irSgPosition 359.49 
	spGT001 
	/LXsgPosSetZero exch store 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	210 130 translate 
	0 rotate 
	1 1 scale 
	LXsgPosSetZero irSgPosition 0 
	FUN_SEL 
	/LDsgPosition exch store 
	setcolor 
	setmatrix_nlw 
	ixSgAngleError true eq {	
		true setflash 
	} if 
	matrix currentmatrix_nlw 
	currentcolor 
	595 145 translate 
	0 rotate 
	1 1 scale 
	LDsgPosition 3 (°) false 
	ixSgAngleError FSfatFont 1 
	baValue001 
	setcolor 
	setmatrix_nlw 
	false setflash 
	ixLgAngleError true eq {	
		true setflash 
	} if 
	matrix currentmatrix_nlw 
	currentcolor 
	286 185 translate 
	0 rotate 
	2 2 scale 
	irOutreach 3.10 false 
	ixLgAngleError FSfatFont 0.75 
	baValueDist001 
	setcolor 
	setmatrix_nlw 
	false setflash 
	ixLoadError true eq {	
		true setflash 
	} if 
	matrix currentmatrix_nlw 
	currentcolor 
	141 270 translate 
	0 rotate 
	2 2 scale 
	irTaraLoad 3 false 
	ixLoadError FSfatFont idChangeUnit 0.75 
	baValueLoad001 
	setcolor 
	setmatrix_nlw 
	false setflash 
	ixUtilizationErr true eq {	
		ixUtilizationErr true eq {	
			true setflash 
		} if 
		matrix currentmatrix_nlw 
		currentcolor 
		Red 645 165 translate 
		0 rotate 
		1 1 scale 
		irUtilisation () 0 150 true true true false 
		ixLmlWarning ixLmlAlarm 1000 1000 0 0 6 30 305 true false 0 true 0 
		FSstdFont true 1 
		baBar006 
		setcolor 
		setmatrix_nlw 
		false setflash 
	} if 
	ixUtilizationErr false eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		645 165 translate 
		0 rotate 
		1 1 scale 
		irUtilisation () 0 150 true true true false 
		ixLmlWarning ixLmlAlarm 1000 1000 0 0 6 30 305 true false 0 true 0 
		FSstdFont true 1 
		baBar006 
		setcolor 
		setmatrix_nlw 
	} if 
	ixUtilizationErr true eq {	
		true setflash 
	} if 
	matrix currentmatrix_nlw 
	currentcolor 
	687 502 translate 
	0 rotate 
	0.75 0.75 scale 
	(%) 
	FSfatFont 0 
	ixUtilizationErr false false false 
	baText002 
	setcolor 
	setmatrix_nlw 
	false setflash 
	matrix currentmatrix_nlw 
	currentcolor 
	531 475 translate 
	0 rotate 
	0.75 0.75 scale 
	ixWindSpeedHigh false false false (ssWind001) 
	baSwitchSymbolColor004 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	176 240 translate 
	180 rotate 
	1 1 scale 
	ixLgAngleError false false false (gsLimit019) 
	baSwitchSymbolColor004 
	setcolor 
	setmatrix_nlw 
	idOperationMode 11 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		60 325 translate 
		0 rotate 
		1.40 1.40 scale_nlw 
		ssCoil001 
		setcolor 
		setmatrix_nlw 
	} if 
	idOperationMode 14 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		56 346 translate 
		0 rotate 
		0.75 0.87 scale_nlw 
		ssTilt001 
		setcolor 
		setmatrix_nlw 
	} if 
	idOperationMode 6 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		78 341 translate 
		0 rotate 
		1 1 scale_nlw 
		ssGrab002 
		setcolor 
		setmatrix_nlw 
	} if 
	idOperationMode 8 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		76 346 translate 
		0 rotate 
		1 1 scale_nlw 
		ssGrab003 
		setcolor 
		setmatrix_nlw 
	} if 
	idOperationMode 7 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		77 341 translate 
		0 rotate 
		1 1 scale_nlw 
		ssGrab005 
		setcolor 
		setmatrix_nlw 
	} if 
	idOperationMode 5 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		52 352 translate 
		0 rotate 
		0.80 0.80 scale_nlw 
		ssSpreader001 
		setcolor 
		setmatrix_nlw 
	} if 
	idOperationMode 9 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		76 353 translate 
		0 rotate 
		0.80 0.80 scale_nlw 
		ssWheelLoader001 
		setcolor 
		setmatrix_nlw 
	} if 
	idOperationMode 10 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		76 346 translate 
		0 rotate 
		1 1 scale_nlw 
		ssMagnet001 
		setcolor 
		setmatrix_nlw 
	} if 
	idOperationMode 4 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		77 343 translate 
		0 rotate 
		1 1 scale_nlw 
		ssRotator001 
		setcolor 
		setmatrix_nlw 
	} if 
	idOperationMode 3 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		77 360 translate 
		0 rotate 
		1 1 scale_nlw 
		ssHook005 
		setcolor 
		setmatrix_nlw 
	} if 
	idOperationMode 99 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		81 342 translate 
		0 rotate 
		1 1 scale 
		ssManTrans001 
		setcolor 
		setmatrix_nlw 
	} if 
	matrix currentmatrix_nlw 
	currentcolor 
	400 366 translate 
	-27 rotate 
	0.75 0.75 scale 
	(LIEBHERR) 4 0 
	baText001 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	571 194 translate 
	0 rotate 
	1 1 scale 
	idNumCraneType 3 false false 0 
	baValue004 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	10 80 translate 
	0 rotate 
	1.82 1.82 scale_nlw 
	ssCrane014 
	setcolor 
	setmatrix_nlw 
	116 507 moveto 
	116 414 lineto 
	stroke 
} def
%?partend

%?partdef spVlf001
%?fn	spVlf001
%?brief	vlf
%?bbox	0 0 159 79
/spVlf001 {
	/MEM_TimeAtStart_00 exch def	%?brief  %?use STATIC %?type DINT
	/MEM_active_00_00 exch def	%?brief  %?use STATIC %?type BOOL
	/ixAdjustActiv exch def	%?brief adjust Activ %?use INP %?type BOOL %?dflt false
	/ixEnableTouch exch def	%?brief enable touch button %?use INP %?type BOOL %?dflt false
	/idDeviateY exch def	%?brief idDeviateY %?use INP %?type REAL %?dflt    0.00
	/idDeviateX exch def	%?brief idDeviateX %?use INP %?type REAL %?dflt    0.00
	/qxToutchOut false def	%?brief touch out %?use OUT %?type BOOL %?dflt false
	%?term_beg
	
	ixEnableTouch true eq 
	ixAdjustActiv false eq and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		40 0 translate 
		0 rotate 
		1 1 scale 
		5 
		MEM_TimeAtStart_00 MEM_active_00_00 
		baTouchButton011 
		/MEM_TimeAtStart_00 exch store 
		/MEM_active_00_00 exch store {	
			/qxToutchOut true store 
		} if 
		setcolor 
		setmatrix_nlw 
	} if 
	matrix currentmatrix_nlw 
	currentcolor 
	40 0 translate 
	0 rotate 
	1 1 scale 
	idDeviateX idDeviateY 5 5 
	spBubble001 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	0 30 translate 
	0 rotate 
	0.50 0.50 scale 
	gsLimit012 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	120 30 translate 
	0 rotate 
	0.50 0.50 scale 
	gsLimit016 
	setcolor 
	setmatrix_nlw 
	%?term_beg
	
	idDeviateY 0.15 gt 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 40 0 translate 
		90 rotate 
		0.50 0.50 scale 
		gsGeneral001 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	idDeviateY -0.15 lt 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 0 40 translate 
		-90 rotate 
		0.50 0.50 scale 
		gsGeneral001 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	idDeviateX 0.15 gt 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 160 0 translate 
		90 rotate 
		0.50 0.50 scale 
		gsGeneral001 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	idDeviateX -0.15 lt 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 120 40 translate 
		-90 rotate 
		0.50 0.50 scale 
		gsGeneral001 
		setcolor 
		setmatrix_nlw 
	} if 
	ixAdjustActiv true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		40 0 translate 
		0 rotate 
		1 1 scale 
		gpGeneral001 
		setcolor 
		setmatrix_nlw 
	} if 
	qxToutchOut MEM_TimeAtStart_00 MEM_active_00_00 
} def
%?partend

%?partdef spSycra004
%?fn	spSycra004
%?brief	sycratronic status
%?bbox	0 0 79 79
/spSycra004 {
	/idStatus exch def	%?brief status %?use INP %?type REAL %?dflt    0.00
	idStatus 6 eq {	
		idStatus 6 eq {	
			true setflash 
		} if 
		matrix currentmatrix_nlw 
		currentcolor 
		Yellow 0 0 translate 
		0 rotate 
		1 1 scale 
		ssSycra002 
		setcolor 
		setmatrix_nlw 
		false setflash 
	} if 
	%?term_beg
	
	idStatus 0 gt 
	idStatus 5 le and 
	%?term_end
	{	
		%?term_beg
		
		idStatus 2 eq 
		idStatus 3 eq or 
		%?term_end
		{	
			true setflash 
		} if 
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		ssSycra004 
		setcolor 
		setmatrix_nlw 
		false setflash 
	} if 
	%?term_beg
	
	%?term_beg
	
	idStatus 1 eq 
	idStatus 2 eq or 
	%?term_end
	{	
		%?term_beg
		
		idStatus 2 eq 
		%?term_end
		{	
			true setflash 
		} if 
		matrix currentmatrix_nlw 
		currentcolor 
		0 10 translate 
		0 rotate 
		1 1 scale 
		cransym27 
		setcolor 
		setmatrix_nlw 
		false setflash 
	} if false setflash 
	idStatus 5 eq {	
		idStatus 5 eq {	
			true setflash 
		} if 
		matrix currentmatrix_nlw 
		currentcolor 
		Yellow 19 24 translate 
		0 rotate 
		0.25 0.25 scale 
		warnsym1 
		setcolor 
		setmatrix_nlw 
		false setflash 
	} if 
	idStatus 7 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		gsGeneral089 
		setcolor 
		setmatrix_nlw 
	} if 
} def
%?partend

%?partdef spSycra005
%?fn	spSycra005
%?brief	sycratronic status
%?bbox	0 0 159 159
/spSycra005 {
	/idStatus exch def	%?brief status %?use INP %?type REAL %?dflt    0.00
	%?term_beg
	false setflash 
	matrix currentmatrix_nlw 
	currentcolor 
	77 60 translate 
	0 rotate 
	0.20 0.20 scale 
	ssCrane014 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	5 60 translate 
	0 rotate 
	0.20 0.20 scale 
	ssCrane007 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	60 69 translate 
	0 rotate 
	0.50 0.50 scale 
	idStatus 
	spSycra004 
	setcolor 
	setmatrix_nlw 
} def
%?partend

%?partdef spSycra006
%?fn	spSycra006
%?brief	Traverse drehen um den Haken
%?bbox	0 0 119 79
/spSycra006 {
	matrix currentmatrix_nlw 
	currentcolor 
	20 0 translate 
	0 rotate 
	1 1 scale 
	ssSycra004 
	setcolor 
	setmatrix_nlw 
} def
%?partend

%?partdef spSycra007
%?fn	spSycra007
%?brief	sycratronic points
%?bbox	-2 -2 17 17
/spSycra007 {
	/idP3_y exch def	%?brief idP3_y %?use INP %?type REAL %?dflt    0.00
	/idP3_x exch def	%?brief idP3_x %?use INP %?type REAL %?dflt    0.00
	/idP2_y exch def	%?brief idP2_y %?use INP %?type REAL %?dflt    0.00
	/idP2_x exch def	%?brief idP2_x %?use INP %?type REAL %?dflt    0.00
	0 0 moveto 
	idP3_x idP3_y 
	lineto 
	stroke 
	idP3_x idP3_y 
	moveto 
	idP2_x idP2_y 
	lineto 
	stroke 
	idP2_x idP2_y 
	moveto 
	0 0 lineto 
	stroke 
} def
%?partend


%?partdef spLandSea001
%?fn	spLandSea001
%?brief	LML stop, warning and bypass symbol
%?bbox	0 0 79 79
/spLandSea001 {
	/idLandSeaState exch def	%?brief idLandSeaState %?use INP %?type REAL %?dflt    0.00
	%?term_beg
	
	idLandSeaState 3 eq 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		Red 0 51 translate 
		0 rotate 
		0.37 0.37 scale 
		gsGeneral004 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	idLandSeaState 2 eq 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		Yellow 0 52 translate 
		0 rotate 
		0.37 0.37 scale 
		gsGeneral003 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	matrix currentmatrix_nlw 
	currentcolor 
	10 0 translate 
	0 rotate 
	0.87 0.87 scale 
	ssLiftCondition001 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	10 0 translate 
	0 rotate 
	0.75 0.75 scale 
	ssLiftCondition002 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	10 0 translate 
	0 rotate 
	0.87 0.87 scale 
	ssLiftCondition005 
	setcolor 
	setmatrix_nlw 
} def
%?partend

%?partdef spJoyStick001
%?fn	spJoyStick001
%?brief	joy Stick
%?bbox	0 0 79 79
/spJoyStick001 {
	matrix currentmatrix_nlw 
	currentcolor 
	-10 -10 translate 
	0 rotate 
	1.25 1.25 scale 
	cransym27 
	setcolor 
	setmatrix_nlw 
	3 setlinewidth_nlw 
	10 70 moveto 
	70 10 lineto 
	stroke 
	8 9 moveto 
	68 69 lineto 
	stroke 
	1 setlinewidth_nlw 
} def
%?partend

%?partdef spSpreader002
%?fn	spSpreader002
%?brief	spreader symbol
%?bbox	0 0 79 79
/spSpreader002 {
	3 setlinewidth_nlw 
	38 75 moveto 
	30 35 lineto 
	36 59 moveto 
	45 59 lineto 
	34 51 moveto 
	47 51 lineto 
	27 35 moveto 
	54 35 lineto 
	27 35 moveto 
	26 34 lineto 
	54 35 moveto 
	55 34 lineto 
	26 34 moveto 
	26 32 lineto 
	55 34 moveto 
	55 32 lineto 
	20 33 moveto 
	20 32 lineto 
	18 34 moveto 
	19 34 lineto 
	20 18 moveto 
	20 30 lineto 
	60 18 moveto 
	60 30 lineto 
	60 32 moveto 
	60 33 lineto 
	60 33 moveto 
	63 33 lineto 
	17 33 moveto 
	20 33 lineto 
	61 34 moveto 
	62 34 lineto 
	17 18 moveto 
	20 18 lineto 
	60 18 moveto 
	63 18 lineto 
	8 45 moveto 
	13 45 lineto 
	8 45 moveto 
	8 36 lineto 
	8 36 moveto 
	9 34 lineto 
	9 34 moveto 
	9 22 lineto 
	11 22 moveto 
	11 34 lineto 
	7 22 moveto 
	11 22 lineto 
	11 22 moveto 
	11 15 lineto 
	11 15 moveto 
	7 15 lineto 
	7 22 moveto 
	9 29 lineto 
	5 25 moveto 
	7 25 lineto 
	5 25 moveto 
	5 11 lineto 
	5 11 moveto 
	2 3 lineto 
	13 45 moveto 
	13 38 lineto 
	69 22 moveto 
	73 22 lineto 
	73 15 moveto 
	69 15 lineto 
	69 15 moveto 
	69 22 lineto 
	73 22 moveto 
	71 29 lineto 
	75 11 moveto 
	78 3 lineto 
	67 45 moveto 
	72 45 lineto 
	72 45 moveto 
	72 36 lineto 
	72 36 moveto 
	71 34 lineto 
	69 34 moveto 
	69 22 lineto 
	71 22 moveto 
	71 34 lineto 
	67 45 moveto 
	67 38 lineto 
	75 25 moveto 
	73 25 lineto 
	42 75 moveto 
	40 75 2 0 360 arc 
	stroke 
	42 75 moveto 
	51 35 lineto 
	stroke 
	17 33 moveto 
	17 18 lineto 
	stroke 
	63 33 moveto 
	63 18 lineto 
	stroke 
	11 34 moveto 
	13 38 lineto 
	stroke 
	17 29 moveto 
	11 29 lineto 
	stroke 
	69 34 moveto 
	67 38 lineto 
	stroke 
	63 29 moveto 
	69 29 lineto 
	stroke 
	75 25 moveto 
	75 11 lineto 
	stroke 
	1 setlinewidth_nlw 
	19 31 moveto 
	63 31 lineto 
	stroke 
	19 18 moveto 
	61 18 lineto 
	stroke 
	matrix currentmatrix_nlw 
	currentcolor 
	Green 60 60 translate 
	0 rotate 
	0.50 0.50 scale 
	ssArrow001 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	Green 20 60 translate 
	180 rotate 
	0.50 0.50 scale 
	ssArrow001 
	setcolor 
	setmatrix_nlw 
} def
%?partend

%?partdef spDacs001
%?fn	spDacs001
%?brief	dacs collision symbol
%?bbox	0 0 79 79
/spDacs001 {
	/ixDacsOccured exch def	%?brief dacs occured %?use INP %?type BOOL %?dflt false
	/ixQuickStop exch def	%?brief dacs quickstop %?use INP %?type BOOL %?dflt false
	/ixBypassDACS exch def	%?brief dacs Bypass %?use INP %?type BOOL %?dflt false
	/idDacsDist exch def	%?brief dacs distance %?use INP %?type REAL %?dflt    0.00
	/LXStop false def	%?brief Stop %?use LOC %?type BOOL %?dflt false
	/LDdacsDist 0 def	%?brief dacs distance %?use LOC %?type REAL %?dflt    0.00
	1 setlinewidth_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	0 0 translate 
	0 rotate 
	1 1 scale 
	6 
	idDacsDist 
	FUN_SUB 
	/LDdacsDist exch store 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	5 18 translate 
	270 rotate 
	1 1 scale 
	LDdacsDist 0 6 2 4 15 65 true true true false true 0 
	baBar005 
	setcolor 
	setmatrix_nlw 
	ixBypassDACS true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		Yellow 0 0 translate 
		0 rotate 
		1 1 scale 
		gsGeneral018 
		setcolor 
		setmatrix_nlw 
	} if 
	matrix currentmatrix_nlw 
	currentcolor 
	0 0 translate 
	0 rotate 
	1 1 scale 
	ixDacsOccured ixQuickStop 
	FUN_OR_2 
	/LXStop exch store 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	0 0 translate 
	0 rotate 
	1 1 scale 
	false false false false (ssBoom002) 
	baSwitchSymbolColor001 
	setcolor 
	setmatrix_nlw 
} def
%?partend
