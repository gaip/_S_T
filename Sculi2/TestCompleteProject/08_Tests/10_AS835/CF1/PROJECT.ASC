(*SOFTCONTROL:        
  VERSION:2.05.12*)
PLC_CONFIG
	CAN_LINE Line1 (LINE:=1,BAUDRATE:=1000000)
		CAN_MODULE
			TA54 AT 73: USAGE:=TRUE;
			DE AT 29: USAGE:=TRUE;
			T23A AT 97: USAGE:=TRUE;
			IMMO AT 107: USAGE:=FALSE;
			JD AT 65: USAGE:=TRUE;
			JA AT 66: USAGE:=TRUE;
			JD AT 67: USAGE:=TRUE;
			JA AT 68: USAGE:=TRUE;
			FP AT 69: USAGE:=FALSE;
			FP AT 70: USAGE:=FALSE;
			MA_X AT 109: USAGE:=FALSE;
			MA_W AT 113: USAGE:=FALSE;
			TA54 AT 74: USAGE:=FALSE;
			T23A AT 98: USAGE:=FALSE;
			TA54 AT 75: USAGE:=FALSE;
			T25A AT 99: USAGE:=FALSE;
		END_CAN_MODULE
	END_CAN_LINE
	CAN_LINE Line2 (LINE:=2,BAUDRATE:=500000)
		CAN_MODULE
			DA32 AT 9: USAGE:=TRUE;
			OA16 AT 17: USAGE:=TRUE;
			DE AT 33: USAGE:=TRUE;
			AE16 AT 41: USAGE:=TRUE;
			AE16 AT 42: USAGE:=TRUE;
			IF08 AT 57: USAGE:=TRUE;
			MOD2 AT 93: USAGE:=TRUE;
			MOA AT 92: USAGE:=TRUE;
			DA32 AT 10: USAGE:=FALSE;
			OA16 AT 18: USAGE:=FALSE;
			DE AT 34: USAGE:=FALSE;
			AE16 AT 48: USAGE:=FALSE;
			AE16 AT 43: USAGE:=FALSE;
			SFTY AT 5: USAGE:=TRUE;
			OD04 AT 13: USAGE:=TRUE;
			OD04 AT 14: USAGE:=FALSE;
			OA16 AT 19: USAGE:=FALSE;
			OD04 AT 15: USAGE:=FALSE;
			IF02 AT 49: USAGE:=FALSE;
			IF08 AT 58: USAGE:=FALSE;
			AGN AT 94: USAGE:=FALSE;
		END_CAN_MODULE
	END_CAN_LINE
	CAN_LINE Line3 (LINE:=3,BAUDRATE:=1000000)
		CAN_MODULE
			MA_X AT 109: USAGE:=FALSE;
			MA_X AT 110: USAGE:=FALSE;
			MA_X AT 111: USAGE:=FALSE;
			MA_W AT 113: USAGE:=FALSE;
			MA_W AT 114: USAGE:=FALSE;
			MA_W AT 115: USAGE:=FALSE;
			MA_W AT 116: USAGE:=FALSE;
			MA_D AT 124: USAGE:=FALSE;
		END_CAN_MODULE
	END_CAN_LINE
	VAR_GLOBAL_CONST
		VerApplication: STRING:='01849';
	END_VAR
END_PLC_CONFIG

FUNCTION GPkx_dV010: REAL
	VAR_INPUT 
		X1: REAL:=0.0;
		Y1: REAL:=0.0;
		X2: REAL:=0.0;
		Y2: REAL:=0.0;
		X: REAL:=0.0;
		minOut: REAL:=0.0;
		maxOut: REAL:=0.0;
	END_VAR
	VAR
		k: REAL:=0.0;
		d: REAL:=0.0;
	END_VAR
'FBD'
BODY
    WORKSPACE
        NETWORK_LIST_TYPE := NWTYPEFBD ;
        ACTIVE_NETWORK := 0 ;
    END_WORKSPACE
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_VARIN,,Y2,11,1,13,3,);
B(B_VARIN,,Y1,11,2,13,4,);
B(B_F,@SUB,,13,0,18,4,);
B(B_F,EQ_R,,18,0,23,4,);
B(B_VARIN,,0.0,16,4,18,6,);
B(B_F,@OR-2,,23,0,28,4,);
B(B_F,@GT-2,,18,5,23,9,);
B(B_VARIN,,X1,16,6,18,8,);
B(B_VARIN,,X2,16,7,18,9,);
B(B_JUMP,,error,28,1,30,3,);
L(18,3,18,5);
L(23,3,23,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_VARIN,,Y2,11,1,13,3,);
B(B_VARIN,,Y1,11,2,13,4,);
B(B_F,@SUB,,13,0,18,4,);
B(B_F,@DIV,,18,0,23,4,);
B(B_VARIN,,X2,11,5,13,7,);
B(B_VARIN,,X1,11,6,13,8,);
B(B_F,@SUB,,13,4,18,8,);
B(B_VAROUT,,k,23,1,25,3,);
L(18,3,18,6);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_F,@SUB,,18,0,23,4,);
B(B_VARIN,,Y1,16,1,18,3,);
B(B_F,@MUL-2,,13,3,18,7,);
B(B_VARIN,,X1,11,4,13,6,);
B(B_VARIN,,k,11,5,13,7,);
B(B_VAROUT,,d,23,1,25,3,);
L(18,3,18,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_F,@MUL-2,,13,3,18,7,);
B(B_F,@ADD-2,,18,3,23,7,);
B(B_VARIN,,X,11,4,13,6,);
B(B_VARIN,,k,11,5,13,7,);
B(B_VARIN,,d,16,7,18,9,);
B(B_F,limit,,23,2,29,7,);
B(B_VAROUT,,GPkx_dV010,29,3,31,5,);
B(B_VARIN,,minOut,21,1,23,3,);
B(B_VARIN,,maxOut,21,8,23,10,);
L(18,6,18,8);
L(23,2,23,4);
L(23,6,23,9);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VARIN,,TRUE,11,1,13,3,);
B(B_RETURN,,,13,1,15,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL := error: ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VARIN,,0.0,11,1,13,3,);
B(B_VAROUT,,GPkx_dV010,13,1,15,3,);
        END_NETWORK_BODY
    END_NET_WORK
END_BODY
END_FUNCTION

FUNCTION_BLOCK ADaddHydSumoV010
(*name of author: Manfred Schapler
version: 1.0
date: 10/97
modification:*)
(*name of author: Manfred Schapler
version: 1.0
date: 10/97
modification:*)
	VAR_INPUT 
		enable: BOOL:=FALSE;
			(*enable sum power regulator of the add. hydr.*)
		poti_anal_signal: REAL:=0.0;
			(*poti X23 analog signal*)
		sys_pressure_1: REAL:=0.0;
			(*system pressure 1*)
		sys_pressure_2: REAL:=0.0;
			(*system pressure 2*)
		analog_signal_1: REAL:=0.0;
			(*analog output signal 1*)
		analog_signal_2: REAL:=0.0;
			(*analog output signal 2*)
		max_power_in_prz: REAL:=0.0;
			(*maximum power of the add. hydr. in %*)
	END_VAR
	VAR_OUTPUT
		reduction_factor: REAL:=0.0;
			(*reduction factor for the analog signals*)
	END_VAR
	VAR 
		LDtheoMaxPower: REAL:=0.0;
			(*theoretical maximum power in bar * % of the add. hydr.*)
		LDactualPower: REAL:=0.0;
			(*actual power in bar * % of the add. hydr.*)
		LDpractMaxPower: REAL:=0.0;
			(*practical maximum power in bar * % of the add. hydr.*)
		LDpotiPowerSumo: REAL:=0.0;
			(*power for the add. hydr. by sum power regulation poti*)
		Integrator1: Integrator;
	END_VAR
'FBD'
BODY
    WORKSPACE
        NETWORK_LIST_TYPE := NWTYPEFBD ;
        ACTIVE_NETWORK := 0 ;
    END_WORKSPACE
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_COMMENT,,theoretical maximum power of the add. hydr. in bar * %,1,1,27,2,);
B(B_VAROUT,,LDtheoMaxPower,16,4,18,6,);
B(B_VARIN,,400.0,9,4,11,6,);
B(B_VARIN,,100.0,9,5,11,7,);
B(B_F,@MUL-3,,11,3,16,8,);
B(B_VARIN,,2.0,9,6,11,8,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_COMMENT,,actual power of the add. hydr. in bar * %,1,1,27,2,);
B(B_F,@MUL-2,,11,3,16,7,);
B(B_F,@MUL-2,,11,7,16,11,);
B(B_F,@ADD-2,,18,3,23,7,);
B(B_VAROUT,,LDactualPower,23,4,25,6,);
B(B_VARIN,,sys_pressure_1,9,4,11,6,);
B(B_VARIN,,sys_pressure_2,9,8,11,10,);
B(B_VARIN,,analog_signal_1,9,5,11,7,);
B(B_VARIN,,analog_signal_2,9,9,11,11,);
L(16,9,17,9);
L(17,6,17,9);
L(17,6,18,6);
L(16,5,18,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,practical maximum power of the add. hydr. in bar * %,1,1,27,2,);
B(B_F,@DIV,,11,6,16,10,);
B(B_F,@MUL-2,,18,3,23,7,);
B(B_VAROUT,,LDpractMaxPower,23,4,25,6,);
B(B_VARIN,,LDtheoMaxPower,16,4,18,6,);
B(B_VARIN,,100.0,9,8,11,10,);
B(B_VARIN,,max_power_in_prz,9,7,11,9,);
L(17,6,18,6);
L(17,6,17,8);
L(16,8,17,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 14 ;
        NETWORK_BODY
B(B_COMMENT,,reduction factor of the poti X23,1,1,27,2,);
B(B_F,@MUL-2,,20,6,25,10,);
B(B_F,@ADD-2,,27,3,32,7,);
B(B_F,@DIV,,34,3,39,7,);
B(B_VAROUT,,LDpotiPowerSumo,39,4,41,6,);
B(B_COMMENT,,max. reduct.ø^is 30%,20,10,26,12,);
B(B_VARIN,,poti_anal_signal,10,8,12,10,);
B(B_F,@SUB,,13,6,18,10,);
B(B_VARIN,,0.3,17,10,19,12,);
B(B_VARIN,,100.0,31,7,33,9,);
B(B_VARIN,,100.0,9,7,11,9,);
L(26,6,27,6);
L(25,8,26,8);
L(32,5,34,5);
L(33,6,34,6);
L(26,6,26,8);
L(12,9,13,9);
L(19,9,19,11);
L(19,9,20,9);
L(18,8,20,8);
L(33,6,33,8);
L(12,5,12,9);
L(12,5,27,5);
L(11,8,13,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 16 ;
        NETWORK_BODY
B(B_COMMENT,,reduction factor of the sum power reduction,1,1,27,2,);
B(B_F,sel,,11,3,16,8,);
B(B_VARIN,,1.0,9,5,11,7,);
B(B_VARIN,,LDpotiPowerSumo,9,6,11,8,);
B(B_VARIN,,enable,9,4,11,6,);
B(B_F,@MUL-2,,18,6,23,10,);
B(B_VARIN,,LDpractMaxPower,16,8,18,10,);
B(B_F,@DIV,,25,8,30,12,);
B(B_VARIN,,LDactualPower,23,10,25,12,);
B(B_F,limit,,34,7,40,12,);
B(B_VARIN,,0.0,32,8,34,10,);
B(B_VARIN,,1.0,32,10,34,12,);
B(B_FB,Integrator,Integrator1,43,6,52,12,);
B(B_VAROUT,,reduction_factor,52,7,54,9,);
B(B_VARIN,,TRUE,40,5,42,7,);
B(B_VARIN,,0.125,39,12,41,14,);
B(B_VARIN,,1.0,40,13,42,15,);
L(17,8,18,8);
L(17,5,17,8);
L(16,5,17,5);
L(24,10,25,10);
L(24,8,24,10);
L(23,8,24,8);
L(30,10,34,10);
L(40,9,43,9);
L(41,10,43,10);
L(42,11,43,11);
L(42,11,42,14);
L(41,10,41,13);
L(42,8,43,8);
L(42,6,42,8);
        END_NETWORK_BODY
    END_NET_WORK
END_BODY
END_FUNCTION_BLOCK

FUNCTION_BLOCK ADcalculateQV024
	VAR_INPUT 
		set_value: REAL:=0.0;
		max_value: REAL:=0.0;
		signal_in: REAL:=0.0;
		current_min: UINT:=0;
		current_50: UINT:=0;
		current_100: UINT:=0;
		current_150: UINT:=0;
		current_200: UINT:=0;
		current_250: UINT:=0;
		current_300: UINT:=0;
		current_350: UINT:=0;
		current_400: UINT:=0;
		current_450: UINT:=0;
		current_500: UINT:=0;
		current_max: UINT:=0;
		system_pressure: REAL:=0.0;
		max_comp_signal: REAL:=0.0;
		pow_Lim_reduct: REAL:=1.0;
		Int_time_up: REAL:=0.0;
	END_VAR
	VAR_OUTPUT
		calc_current: REAL:=0.0;
		signal_out: REAL:=0.0;
		calc_comp_signal: REAL:=0.0;
		calc_volume: REAL:=0.0;
	END_VAR
	VAR 
		LWmaxValue: UINT:=0;
		LDcorrInSignal: REAL:=0.0;
		LDd1: REAL:=0.0;
		LDd2: REAL:=0.0;
		LDd3: REAL:=0.0;
		LDd4: REAL:=0.0;
		LDd5: REAL:=0.0;
		LDd6: REAL:=0.0;
		LDd7: REAL:=0.0;
		LDd8: REAL:=0.0;
		LDd9: REAL:=0.0;
		LDd10: REAL:=0.0;
		LDd11: REAL:=0.0;
		LDcurrent_min: REAL:=0.0;
		LDcurrent1: REAL:=0.0;
		LDcurrent2: REAL:=0.0;
		LDcurrent3: REAL:=0.0;
		LDcurrent4: REAL:=0.0;
		LDcurrent5: REAL:=0.0;
		LDcurrent6: REAL:=0.0;
		LDcurrent7: REAL:=0.0;
		LDcurrent8: REAL:=0.0;
		LDcurrent9: REAL:=0.0;
		LDcurrent10: REAL:=0.0;
		LDcurrent11: REAL:=0.0;
		LDsumCurrent: REAL:=0.0;
		LDdiffX1: REAL:=0.0;
		LDdiffX2: REAL:=0.0;
		LDdiffX3: REAL:=0.0;
		LDdiffX4: REAL:=0.0;
		LDdiffX5: REAL:=0.0;
		LDdiffX6: REAL:=0.0;
		LDdiffX7: REAL:=0.0;
		LDdiffX8: REAL:=0.0;
		LDdiffX9: REAL:=0.0;
		LDdiffX10: REAL:=0.0;
		Integrator1: Integrator;
	END_VAR
'FBD'
BODY
    WORKSPACE
        NETWORK_LIST_TYPE := NWTYPEFBD ;
        ACTIVE_NETWORK := 0 ;
    END_WORKSPACE
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_VARIN,,system_pressure,9,6,11,8,);
B(B_F,limit,,12,4,18,9,);
B(B_VARIN,,0.1,10,5,12,7,);
B(B_F,@DIV,,20,4,25,8,);
B(B_VARIN,,400.0,17,9,19,11,);
B(B_F,@MUL-2,,27,3,32,7,);
B(B_VARIN,,max_comp_signal,24,2,26,4,);
B(B_COMMENT,,calculate leakoil or pressure compensation ,1,1,27,2,);
B(B_VAROUT,,calc_comp_signal,32,4,34,6,);
L(11,7,12,7);
L(11,7,11,8);
L(11,8,12,8);
L(19,7,19,10);
L(19,7,20,7);
L(18,6,20,6);
L(25,6,27,6);
L(26,3,26,5);
L(26,5,27,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 19 ;
        NETWORK_BODY
B(B_COMMENT,,calculate input signal,1,1,27,2,);
B(B_F,sel,,17,12,22,17,);
B(B_VARIN,,1000.0,15,15,17,17,);
B(B_F,@MUL-2,,17,5,22,9,);
B(B_FB,Integrator,Integrator1,25,4,34,10,);
B(B_VARIN,,TRUE,23,5,25,7,);
B(B_VARIN,,pow_Lim_reduct,15,7,17,9,);
B(B_VAROUT,,LDcorrInSignal,40,5,42,7,);
B(B_F,@DIV,,35,4,40,8,);
B(B_VARIN,,100.0,33,10,35,12,);
B(B_VARIN,,1000.0,23,16,25,18,);
B(B_F,EQ_R,,12,10,17,14,);
B(B_VARIN,,0.0,8,12,10,14,);
B(B_VARIN,,Int_time_up,9,11,11,13,);
B(B_F,abs,,12,5,17,8,);
B(B_VARIN,,signal_in,10,6,12,8,);
L(11,15,17,15);
L(22,7,25,7);
L(24,8,25,8);
L(35,7,35,11);
L(34,6,35,6);
L(22,14,24,14);
L(24,8,24,14);
L(25,9,25,17);
L(11,12,12,12);
L(10,13,12,13);
L(17,12,17,14);
L(11,12,11,15);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 16 ;
        NETWORK_BODY
B(B_COMMENT,,calculate volume depend on joystick signal,1,1,27,2,);
B(B_VARIN,,set_value,8,10,10,12,);
B(B_VARIN,,100.0,8,11,10,13,);
B(B_VARIN,,calc_comp_signal,14,13,16,15,);
B(B_F,@MUL-2,,16,9,21,13,);
B(B_F,@DIV,,10,9,15,13,);
B(B_F,@ADD-2,,25,8,30,12,);
B(B_VARIN,,0.0,23,5,25,7,);
B(B_F,NE_R,,25,3,30,7,);
B(B_F,sel,,31,5,36,10,);
B(B_F,limit,,38,4,44,9,);
B(B_VARIN,,max_value,35,11,37,13,);
B(B_F,real_to_uint,,37,10,48,13,);
B(B_VAROUT,,LWmaxValue,48,11,50,13,);
B(B_F,@MUL-2,,45,3,50,7,);
B(B_VARIN,,LDcorrInSignal,43,2,45,4,);
B(B_VAROUT,,calc_volume,50,4,52,6,);
L(16,12,16,14);
L(15,11,16,11);
L(10,5,10,11);
L(22,5,22,10);
L(22,10,25,10);
L(10,5,25,5);
L(21,11,25,11);
L(37,8,37,12);
L(37,8,38,8);
L(45,3,45,5);
L(44,6,45,6);
L(38,6,38,7);
L(36,7,38,7);
L(31,5,31,7);
L(31,9,31,10);
L(22,8,31,8);
L(30,5,31,5);
L(30,10,31,10);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_VARIN,,LWmaxValue,8,4,10,6,);
B(B_VARIN,,50,8,5,10,7,);
B(B_JUMP,,curr1,15,4,17,6,);
B(B_COMMENT,,jump to next when max value lower then X,1,1,27,2,);
B(B_F,@LE-2,,10,3,15,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_F,sel,,15,2,20,7,);
B(B_VARIN,,50.0,13,4,15,6,);
B(B_VAROUT,,LDdiffX1,20,3,22,5,);
B(B_VARIN,,current_max,8,2,10,4,);
B(B_F,@EQ-2,,10,1,15,5,);
B(B_VARIN,,current_50,8,3,10,5,);
B(B_F,@SUB,,10,5,15,9,);
B(B_VARIN,,0.0,8,7,10,9,);
B(B_VARIN,,max_value,8,6,10,8,);
L(15,3,15,4);
L(15,6,15,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_COMMENT,,calculate different slope for different volumes (Steigung),1,1,27,2,);
B(B_VARIN,,current_50,9,5,11,7,);
B(B_VARIN,,current_min,9,6,11,8,);
B(B_F,@SUB,,11,4,16,8,);
B(B_F,uint_to_real,,16,4,27,7,);
B(B_F,@DIV,,27,4,32,8,);
B(B_VAROUT,,LDd1,32,5,34,7,);
B(B_VARIN,,LDdiffX1,24,7,26,9,);
B(B_COMMENT,,d= diff y / diff x ,1,2,27,3,);
L(26,7,27,7);
L(26,7,26,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_F,limit,,11,4,17,9,);
B(B_VARIN,,0.0,9,5,11,7,);
B(B_VARIN,,LDdiffX1,9,7,11,9,);
B(B_F,@MUL-2,,19,4,24,8,);
B(B_VARIN,,calc_volume,9,6,11,8,);
B(B_VARIN,,LDd1,16,9,18,11,);
B(B_VAROUT,,LDcurrent1,24,5,26,7,);
B(B_COMMENT,,calculate current depend on joystick signal,1,1,27,2,);
B(B_COMMENT,,y = d*x,1,2,27,3,);
L(17,6,19,6);
L(18,7,18,10);
L(18,7,19,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_VARIN,,LWmaxValue,8,4,10,6,);
B(B_VARIN,,100,8,5,10,7,);
B(B_JUMP,,curr2,15,4,17,6,);
B(B_COMMENT,,jump to next when max value lower then X,1,1,27,2,);
B(B_F,@LE-2,,10,3,15,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_F,sel,,15,2,20,7,);
B(B_VARIN,,50.0,13,4,15,6,);
B(B_VAROUT,,LDdiffX2,20,3,22,5,);
B(B_VARIN,,current_max,8,2,10,4,);
B(B_F,@EQ-2,,10,1,15,5,);
B(B_VARIN,,current_100,8,3,10,5,);
B(B_F,@SUB,,10,5,15,9,);
B(B_VARIN,,50.0,8,7,10,9,);
B(B_VARIN,,max_value,8,6,10,8,);
L(15,3,15,4);
L(15,6,15,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_VARIN,,current_100,9,5,11,7,);
B(B_VARIN,,current_50,9,6,11,8,);
B(B_F,@SUB,,11,4,16,8,);
B(B_F,@DIV,,27,4,32,8,);
B(B_VAROUT,,LDd2,32,5,34,7,);
B(B_F,uint_to_real,,16,4,27,7,);
B(B_VARIN,,LDdiffX2,24,7,26,9,);
B(B_COMMENT,,calculate different slope for different volumes (Steigung),1,1,27,2,);
B(B_COMMENT,,d= diff y / diff x ,1,2,27,3,);
L(26,7,27,7);
L(26,7,26,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_F,limit,,19,4,25,9,);
B(B_VARIN,,0.0,17,5,19,7,);
B(B_F,@MUL-2,,27,4,32,8,);
B(B_VARIN,,LDd2,24,9,26,11,);
B(B_VAROUT,,LDcurrent2,32,5,34,7,);
B(B_F,@SUB,,11,5,16,9,);
B(B_VARIN,,calc_volume,9,6,11,8,);
B(B_VARIN,,50.0,9,7,11,9,);
B(B_COMMENT,,calculate current depend on joystick signal,1,1,27,2,);
B(B_COMMENT,,y = d*x,1,2,27,3,);
B(B_VARIN,,LDdiffX2,17,9,19,11,);
L(25,6,27,6);
L(26,7,26,10);
L(26,7,27,7);
L(16,7,19,7);
L(19,8,19,10);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_VARIN,,LWmaxValue,8,4,10,6,);
B(B_VARIN,,150,8,5,10,7,);
B(B_JUMP,,curr3,15,4,17,6,);
B(B_COMMENT,,jump to next when max value lower then X,1,1,27,2,);
B(B_F,@LE-2,,10,3,15,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_F,sel,,15,2,20,7,);
B(B_VARIN,,50.0,13,4,15,6,);
B(B_VAROUT,,LDdiffX3,20,3,22,5,);
B(B_VARIN,,current_max,8,2,10,4,);
B(B_F,@EQ-2,,10,1,15,5,);
B(B_VARIN,,current_150,8,3,10,5,);
B(B_F,@SUB,,10,5,15,9,);
B(B_VARIN,,100.0,8,7,10,9,);
B(B_VARIN,,max_value,8,6,10,8,);
L(15,3,15,4);
L(15,6,15,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_VARIN,,current_150,9,5,11,7,);
B(B_VARIN,,current_100,9,6,11,8,);
B(B_F,@SUB,,11,4,16,8,);
B(B_F,@DIV,,27,4,32,8,);
B(B_VAROUT,,LDd3,32,5,34,7,);
B(B_F,uint_to_real,,16,4,27,7,);
B(B_VARIN,,LDdiffX3,24,7,26,9,);
B(B_COMMENT,,calculate different slope for different volumes (Steigung),1,1,27,2,);
B(B_COMMENT,,d= diff y / diff x ,1,2,27,3,);
L(26,7,27,7);
L(26,7,26,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_F,limit,,19,4,25,9,);
B(B_VARIN,,0.0,17,5,19,7,);
B(B_F,@MUL-2,,27,4,32,8,);
B(B_VARIN,,LDd3,24,9,26,11,);
B(B_VAROUT,,LDcurrent3,32,5,34,7,);
B(B_F,@SUB,,11,5,16,9,);
B(B_VARIN,,calc_volume,9,6,11,8,);
B(B_VARIN,,100.0,9,7,11,9,);
B(B_COMMENT,,calculate current depend on joystick signal,1,1,27,2,);
B(B_COMMENT,,y = d*x,1,2,27,3,);
B(B_VARIN,,LDdiffX3,17,9,19,11,);
L(25,6,27,6);
L(26,7,26,10);
L(26,7,27,7);
L(16,7,19,7);
L(19,8,19,10);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_VARIN,,LWmaxValue,8,4,10,6,);
B(B_VARIN,,200,8,5,10,7,);
B(B_JUMP,,curr4,15,4,17,6,);
B(B_COMMENT,,jump to next when max value lower then X,1,1,27,2,);
B(B_F,@LE-2,,10,3,15,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_F,sel,,15,2,20,7,);
B(B_VARIN,,50.0,13,4,15,6,);
B(B_VAROUT,,LDdiffX4,20,3,22,5,);
B(B_VARIN,,current_max,8,2,10,4,);
B(B_F,@EQ-2,,10,1,15,5,);
B(B_VARIN,,current_200,8,3,10,5,);
B(B_F,@SUB,,10,5,15,9,);
B(B_VARIN,,150.0,8,7,10,9,);
B(B_VARIN,,max_value,8,6,10,8,);
L(15,3,15,4);
L(15,6,15,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_F,@SUB,,11,4,16,8,);
B(B_F,@DIV,,27,4,32,8,);
B(B_VAROUT,,LDd4,32,5,34,7,);
B(B_F,uint_to_real,,16,4,27,7,);
B(B_VARIN,,LDdiffX4,24,7,26,9,);
B(B_VARIN,,current_150,9,6,11,8,);
B(B_VARIN,,current_200,9,5,11,7,);
B(B_COMMENT,,calculate different slope for different volumes (Steigung),1,1,27,2,);
B(B_COMMENT,,d= diff y / diff x ,1,2,27,3,);
L(26,7,27,7);
L(26,7,26,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_F,limit,,19,4,25,9,);
B(B_VARIN,,0.0,17,5,19,7,);
B(B_F,@MUL-2,,27,4,32,8,);
B(B_VARIN,,LDd4,24,9,26,11,);
B(B_VAROUT,,LDcurrent4,32,5,34,7,);
B(B_F,@SUB,,11,5,16,9,);
B(B_VARIN,,calc_volume,9,6,11,8,);
B(B_VARIN,,150.0,9,7,11,9,);
B(B_COMMENT,,calculate current depend on joystick signal,1,1,27,2,);
B(B_COMMENT,,y = d*x,1,2,27,3,);
B(B_VARIN,,LDdiffX4,17,9,19,11,);
L(25,6,27,6);
L(26,7,26,10);
L(26,7,27,7);
L(16,7,19,7);
L(19,8,19,10);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_VARIN,,LWmaxValue,8,4,10,6,);
B(B_VARIN,,250,8,5,10,7,);
B(B_JUMP,,curr5,15,4,17,6,);
B(B_COMMENT,,jump to next when max value lower then X,1,1,27,2,);
B(B_F,@LE-2,,10,3,15,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_F,sel,,15,2,20,7,);
B(B_VARIN,,50.0,13,4,15,6,);
B(B_VAROUT,,LDdiffX5,20,3,22,5,);
B(B_VARIN,,current_max,8,2,10,4,);
B(B_F,@EQ-2,,10,1,15,5,);
B(B_VARIN,,current_250,8,3,10,5,);
B(B_F,@SUB,,10,5,15,9,);
B(B_VARIN,,200.0,8,7,10,9,);
B(B_VARIN,,max_value,8,6,10,8,);
L(15,3,15,4);
L(15,6,15,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_F,@SUB,,11,4,16,8,);
B(B_F,@DIV,,27,4,32,8,);
B(B_VAROUT,,LDd5,32,5,34,7,);
B(B_F,uint_to_real,,16,4,27,7,);
B(B_VARIN,,LDdiffX5,24,7,26,9,);
B(B_VARIN,,current_200,9,6,11,8,);
B(B_VARIN,,current_250,9,5,11,7,);
B(B_COMMENT,,calculate different slope for different volumes (Steigung),1,1,27,2,);
B(B_COMMENT,,d= diff y / diff x ,1,2,27,3,);
L(26,7,27,7);
L(26,7,26,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_F,limit,,19,4,25,9,);
B(B_VARIN,,0.0,17,5,19,7,);
B(B_F,@MUL-2,,27,4,32,8,);
B(B_VARIN,,LDd5,24,9,26,11,);
B(B_VAROUT,,LDcurrent5,32,5,34,7,);
B(B_F,@SUB,,11,5,16,9,);
B(B_VARIN,,calc_volume,9,6,11,8,);
B(B_VARIN,,200.0,9,7,11,9,);
B(B_COMMENT,,calculate current depend on joystick signal,1,1,27,2,);
B(B_COMMENT,,y = d*x,1,2,27,3,);
B(B_VARIN,,LDdiffX5,17,9,19,11,);
L(25,6,27,6);
L(26,7,26,10);
L(26,7,27,7);
L(16,7,19,7);
L(19,8,19,10);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_VARIN,,LWmaxValue,8,4,10,6,);
B(B_VARIN,,300,8,5,10,7,);
B(B_JUMP,,curr6,15,4,17,6,);
B(B_COMMENT,,jump to next when max value lower then X,1,1,27,2,);
B(B_F,@LE-2,,10,3,15,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_F,sel,,15,2,20,7,);
B(B_VARIN,,50.0,13,4,15,6,);
B(B_VAROUT,,LDdiffX6,20,3,22,5,);
B(B_VARIN,,current_max,8,2,10,4,);
B(B_F,@EQ-2,,10,1,15,5,);
B(B_VARIN,,current_300,8,3,10,5,);
B(B_F,@SUB,,10,5,15,9,);
B(B_VARIN,,250.0,8,7,10,9,);
B(B_VARIN,,max_value,8,6,10,8,);
L(15,3,15,4);
L(15,6,15,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_F,@DIV,,27,4,32,8,);
B(B_VAROUT,,LDd6,32,5,34,7,);
B(B_F,uint_to_real,,16,4,27,7,);
B(B_VARIN,,LDdiffX6,24,7,26,9,);
B(B_COMMENT,,calculate different slope for different volumes (Steigung),1,1,27,2,);
B(B_COMMENT,,d= diff y / diff x ,1,2,27,3,);
B(B_F,@SUB,,11,4,16,8,);
B(B_VARIN,,current_250,9,6,11,8,);
B(B_VARIN,,current_300,9,5,11,7,);
L(26,7,27,7);
L(26,7,26,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_F,limit,,19,4,25,9,);
B(B_VARIN,,0.0,17,5,19,7,);
B(B_F,@MUL-2,,27,4,32,8,);
B(B_VARIN,,LDd6,24,9,26,11,);
B(B_VAROUT,,LDcurrent6,32,5,34,7,);
B(B_F,@SUB,,11,5,16,9,);
B(B_VARIN,,calc_volume,9,6,11,8,);
B(B_VARIN,,250.0,9,7,11,9,);
B(B_COMMENT,,calculate current depend on joystick signal,1,1,27,2,);
B(B_COMMENT,,y = d*x,1,2,27,3,);
B(B_VARIN,,LDdiffX6,17,9,19,11,);
L(25,6,27,6);
L(26,7,26,10);
L(26,7,27,7);
L(16,7,19,7);
L(19,8,19,10);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_VARIN,,LWmaxValue,8,4,10,6,);
B(B_VARIN,,350,8,5,10,7,);
B(B_JUMP,,curr7,15,4,17,6,);
B(B_COMMENT,,jump to next when max value lower then X,1,1,27,2,);
B(B_F,@LE-2,,10,3,15,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_F,sel,,15,2,20,7,);
B(B_VARIN,,50.0,13,4,15,6,);
B(B_VAROUT,,LDdiffX7,20,3,22,5,);
B(B_VARIN,,current_max,8,2,10,4,);
B(B_F,@EQ-2,,10,1,15,5,);
B(B_VARIN,,current_350,8,3,10,5,);
B(B_F,@SUB,,10,5,15,9,);
B(B_VARIN,,300.0,8,7,10,9,);
B(B_VARIN,,max_value,8,6,10,8,);
L(15,3,15,4);
L(15,6,15,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_F,@DIV,,27,4,32,8,);
B(B_VAROUT,,LDd7,32,5,34,7,);
B(B_F,uint_to_real,,16,4,27,7,);
B(B_VARIN,,LDdiffX7,24,7,26,9,);
B(B_COMMENT,,calculate different slope for different volumes (Steigung),1,1,27,2,);
B(B_COMMENT,,d= diff y / diff x ,1,2,27,3,);
B(B_F,@SUB,,11,4,16,8,);
B(B_VARIN,,current_300,9,6,11,8,);
B(B_VARIN,,current_350,9,5,11,7,);
L(26,7,27,7);
L(26,7,26,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_F,limit,,19,4,25,9,);
B(B_VARIN,,0.0,17,5,19,7,);
B(B_F,@MUL-2,,27,4,32,8,);
B(B_VARIN,,LDd7,24,9,26,11,);
B(B_VAROUT,,LDcurrent7,32,5,34,7,);
B(B_F,@SUB,,11,5,16,9,);
B(B_VARIN,,calc_volume,9,6,11,8,);
B(B_VARIN,,300.0,9,7,11,9,);
B(B_COMMENT,,calculate current depend on joystick signal,1,1,27,2,);
B(B_COMMENT,,y = d*x,1,2,27,3,);
B(B_VARIN,,LDdiffX7,17,9,19,11,);
L(25,6,27,6);
L(26,7,26,10);
L(26,7,27,7);
L(16,7,19,7);
L(19,8,19,10);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_VARIN,,LWmaxValue,8,4,10,6,);
B(B_VARIN,,400,8,5,10,7,);
B(B_JUMP,,curr8,15,4,17,6,);
B(B_COMMENT,,jump to next when max value lower then X,1,1,27,2,);
B(B_F,@LE-2,,10,3,15,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_F,sel,,15,2,20,7,);
B(B_VARIN,,50.0,13,4,15,6,);
B(B_VAROUT,,LDdiffX8,20,3,22,5,);
B(B_VARIN,,current_max,8,2,10,4,);
B(B_F,@EQ-2,,10,1,15,5,);
B(B_VARIN,,current_400,8,3,10,5,);
B(B_F,@SUB,,10,5,15,9,);
B(B_VARIN,,350.0,8,7,10,9,);
B(B_VARIN,,max_value,8,6,10,8,);
L(15,3,15,4);
L(15,6,15,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_F,@DIV,,27,4,32,8,);
B(B_VAROUT,,LDd8,32,5,34,7,);
B(B_F,uint_to_real,,16,4,27,7,);
B(B_VARIN,,LDdiffX8,24,7,26,9,);
B(B_COMMENT,,calculate different slope for different volumes (Steigung),1,1,27,2,);
B(B_COMMENT,,d= diff y / diff x ,1,2,27,3,);
B(B_F,@SUB,,11,4,16,8,);
B(B_VARIN,,current_350,9,6,11,8,);
B(B_VARIN,,current_400,9,5,11,7,);
L(26,7,27,7);
L(26,7,26,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_F,limit,,19,4,25,9,);
B(B_VARIN,,0.0,17,5,19,7,);
B(B_F,@MUL-2,,27,4,32,8,);
B(B_VARIN,,LDd8,24,9,26,11,);
B(B_VAROUT,,LDcurrent8,32,5,34,7,);
B(B_F,@SUB,,11,5,16,9,);
B(B_VARIN,,calc_volume,9,6,11,8,);
B(B_VARIN,,350.0,9,7,11,9,);
B(B_COMMENT,,calculate current depend on joystick signal,1,1,27,2,);
B(B_COMMENT,,y = d*x,1,2,27,3,);
B(B_VARIN,,LDdiffX8,17,9,19,11,);
L(25,6,27,6);
L(26,7,26,10);
L(26,7,27,7);
L(16,7,19,7);
L(19,8,19,10);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_VARIN,,LWmaxValue,8,4,10,6,);
B(B_VARIN,,450,8,5,10,7,);
B(B_JUMP,,curr9,15,4,17,6,);
B(B_COMMENT,,jump to next when max value lower then X,1,1,27,2,);
B(B_F,@LE-2,,10,3,15,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_F,sel,,15,2,20,7,);
B(B_VARIN,,50.0,13,4,15,6,);
B(B_VAROUT,,LDdiffX9,20,3,22,5,);
B(B_VARIN,,current_max,8,2,10,4,);
B(B_F,@EQ-2,,10,1,15,5,);
B(B_VARIN,,current_450,8,3,10,5,);
B(B_F,@SUB,,10,5,15,9,);
B(B_VARIN,,400.0,8,7,10,9,);
B(B_VARIN,,max_value,8,6,10,8,);
L(15,3,15,4);
L(15,6,15,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_F,@DIV,,27,4,32,8,);
B(B_VAROUT,,LDd9,32,5,34,7,);
B(B_F,uint_to_real,,16,4,27,7,);
B(B_VARIN,,LDdiffX9,24,7,26,9,);
B(B_COMMENT,,calculate different slope for different volumes (Steigung),1,1,27,2,);
B(B_COMMENT,,d= diff y / diff x ,1,2,27,3,);
B(B_F,@SUB,,11,4,16,8,);
B(B_VARIN,,current_400,9,6,11,8,);
B(B_VARIN,,current_450,9,5,11,7,);
L(26,7,27,7);
L(26,7,26,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_F,limit,,19,4,25,9,);
B(B_VARIN,,0.0,17,5,19,7,);
B(B_F,@MUL-2,,27,4,32,8,);
B(B_VARIN,,LDd9,24,9,26,11,);
B(B_VAROUT,,LDcurrent9,32,5,34,7,);
B(B_F,@SUB,,11,5,16,9,);
B(B_VARIN,,calc_volume,9,6,11,8,);
B(B_VARIN,,400.0,9,7,11,9,);
B(B_COMMENT,,calculate current depend on joystick signal,1,1,27,2,);
B(B_COMMENT,,y = d*x,1,2,27,3,);
B(B_VARIN,,LDdiffX9,17,9,19,11,);
L(25,6,27,6);
L(26,7,26,10);
L(26,7,27,7);
L(16,7,19,7);
L(19,8,19,10);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_VARIN,,LWmaxValue,8,4,10,6,);
B(B_VARIN,,500,8,5,10,7,);
B(B_JUMP,,curr10,15,4,17,6,);
B(B_COMMENT,,jump to next when max value lower then X,1,1,27,2,);
B(B_F,@LE-2,,10,3,15,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_F,sel,,15,2,20,7,);
B(B_VARIN,,50.0,13,4,15,6,);
B(B_VAROUT,,LDdiffX10,20,3,22,5,);
B(B_VARIN,,current_max,8,2,10,4,);
B(B_F,@EQ-2,,10,1,15,5,);
B(B_VARIN,,current_500,8,3,10,5,);
B(B_F,@SUB,,10,5,15,9,);
B(B_VARIN,,450.0,8,7,10,9,);
B(B_VARIN,,max_value,8,6,10,8,);
L(15,3,15,4);
L(15,6,15,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_F,@DIV,,27,4,32,8,);
B(B_VAROUT,,LDd10,32,5,34,7,);
B(B_F,uint_to_real,,16,4,27,7,);
B(B_VARIN,,LDdiffX10,24,7,26,9,);
B(B_COMMENT,,calculate different slope for different volumes (Steigung),1,1,27,2,);
B(B_COMMENT,,d= diff y / diff x ,1,2,27,3,);
B(B_F,@SUB,,11,4,16,8,);
B(B_VARIN,,current_450,9,6,11,8,);
B(B_VARIN,,current_500,9,5,11,7,);
L(26,7,27,7);
L(26,7,26,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_F,limit,,19,4,25,9,);
B(B_VARIN,,0.0,17,5,19,7,);
B(B_F,@MUL-2,,27,4,32,8,);
B(B_VARIN,,LDd10,24,9,26,11,);
B(B_VAROUT,,LDcurrent10,32,5,34,7,);
B(B_F,@SUB,,11,5,16,9,);
B(B_VARIN,,calc_volume,9,6,11,8,);
B(B_VARIN,,450.0,9,7,11,9,);
B(B_COMMENT,,calculate current depend on joystick signal,1,1,27,2,);
B(B_COMMENT,,y = d*x,1,2,27,3,);
B(B_VARIN,,LDdiffX10,17,9,19,11,);
L(25,6,27,6);
L(26,7,26,10);
L(26,7,27,7);
L(16,7,19,7);
L(19,8,19,10);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_VARIN,,LWmaxValue,8,4,10,6,);
B(B_VARIN,,500,8,5,10,7,);
B(B_JUMP,,curr11,15,4,17,6,);
B(B_COMMENT,,jump to next when max value lower then X,1,1,27,2,);
B(B_F,@GT-2,,10,3,15,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 5 ;
        NETWORK_BODY
B(B_VARIN,,TRUE,9,2,11,4,);
B(B_JUMP,,next,11,2,13,4,);
B(B_COMMENT,,jump to next,1,1,27,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL := curr1: ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_COMMENT,,calculate different slope for different volumes (Steigung),1,1,27,2,);
B(B_COMMENT,,d= diff y / diff x ,1,2,27,3,);
B(B_VARIN,,current_max,10,5,12,7,);
B(B_VARIN,,current_50,9,6,11,8,);
B(B_F,sel,,18,5,23,10,);
B(B_VARIN,,current_min,21,9,23,11,);
B(B_F,@SUB,,23,7,28,11,);
B(B_F,uint_to_real,,28,7,39,10,);
B(B_F,@DIV,,39,7,44,11,);
B(B_VAROUT,,LDd1,44,8,46,10,);
B(B_VARIN,,max_value,36,10,38,12,);
B(B_F,@GE-2,,13,4,18,8,);
L(23,7,23,9);
L(12,6,12,8);
L(11,7,11,9);
L(11,7,13,7);
L(18,6,18,7);
L(12,8,18,8);
L(11,9,18,9);
L(38,10,39,10);
L(38,10,38,11);
L(12,6,13,6);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_F,limit,,11,4,17,9,);
B(B_VARIN,,0.0,9,5,11,7,);
B(B_VARIN,,50.0,9,7,11,9,);
B(B_F,@MUL-2,,19,4,24,8,);
B(B_VARIN,,calc_volume,9,6,11,8,);
B(B_VARIN,,LDd1,16,9,18,11,);
B(B_VAROUT,,LDcurrent1,24,5,26,7,);
B(B_COMMENT,,calculate current depend on joystick signal,1,1,27,2,);
B(B_COMMENT,,y = d*x,1,2,27,3,);
L(17,6,19,6);
L(18,7,18,10);
L(18,7,19,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_VARIN,,0.0,9,1,11,3,);
B(B_VAROUT,,LDcurrent2,11,1,13,3,);
B(B_VAROUT,,LDcurrent3,11,2,13,4,);
B(B_VAROUT,,LDcurrent4,11,3,13,5,);
B(B_VAROUT,,LDcurrent5,11,4,13,6,);
B(B_VAROUT,,LDcurrent6,11,5,13,7,);
B(B_VAROUT,,LDcurrent7,11,6,13,8,);
B(B_VAROUT,,LDcurrent8,11,7,13,9,);
B(B_VAROUT,,LDcurrent9,11,8,13,10,);
B(B_VAROUT,,LDcurrent10,11,9,13,11,);
B(B_VAROUT,,LDcurrent11,11,10,13,12,);
L(11,2,11,11);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 5 ;
        NETWORK_BODY
B(B_VARIN,,TRUE,9,2,11,4,);
B(B_JUMP,,next,11,2,13,4,);
B(B_COMMENT,,jump to next,1,1,27,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL := curr2: ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 15 ;
        NETWORK_BODY
B(B_COMMENT,,calculate different slope for different volumes (Steigung),1,1,27,2,);
B(B_COMMENT,,d= diff y / diff x ,1,2,27,3,);
B(B_F,@GE-2,,13,4,18,8,);
B(B_VARIN,,current_max,10,5,12,7,);
B(B_VARIN,,current_100,9,6,11,8,);
B(B_F,sel,,18,5,23,10,);
B(B_VARIN,,current_50,21,9,23,11,);
B(B_F,@SUB,,23,7,28,11,);
B(B_F,@DIV,,39,7,44,11,);
B(B_VAROUT,,LDd2,44,8,46,10,);
B(B_F,uint_to_real,,28,7,39,10,);
B(B_VARIN,,max_value,30,11,32,13,);
B(B_F,@SUB,,32,10,37,14,);
B(B_VARIN,,50.0,30,12,32,14,);
L(23,7,23,9);
L(12,6,12,8);
L(11,7,11,9);
L(12,6,13,6);
L(11,7,13,7);
L(18,6,18,7);
L(12,8,18,8);
L(11,9,18,9);
L(38,10,39,10);
L(37,12,38,12);
L(38,10,38,12);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_F,limit,,19,4,25,9,);
B(B_VARIN,,0.0,17,5,19,7,);
B(B_VARIN,,50.0,17,7,19,9,);
B(B_F,@MUL-2,,27,4,32,8,);
B(B_VARIN,,LDd2,24,9,26,11,);
B(B_VAROUT,,LDcurrent2,32,5,34,7,);
B(B_F,@SUB,,11,5,16,9,);
B(B_VARIN,,calc_volume,9,6,11,8,);
B(B_VARIN,,50.0,9,7,11,9,);
B(B_COMMENT,,calculate current depend on joystick signal,1,1,27,2,);
B(B_COMMENT,,y = d*x,1,2,27,3,);
L(25,6,27,6);
L(26,7,26,10);
L(26,7,27,7);
L(16,7,19,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_VAROUT,,LDcurrent3,11,1,13,3,);
B(B_VAROUT,,LDcurrent4,11,2,13,4,);
B(B_VAROUT,,LDcurrent5,11,3,13,5,);
B(B_VAROUT,,LDcurrent6,11,4,13,6,);
B(B_VAROUT,,LDcurrent7,11,5,13,7,);
B(B_VARIN,,0.0,9,1,11,3,);
B(B_VAROUT,,LDcurrent8,11,6,13,8,);
B(B_VAROUT,,LDcurrent9,11,7,13,9,);
B(B_VAROUT,,LDcurrent10,11,8,13,10,);
B(B_VAROUT,,LDcurrent11,11,9,13,11,);
L(11,2,11,10);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 5 ;
        NETWORK_BODY
B(B_VARIN,,TRUE,9,2,11,4,);
B(B_JUMP,,next,11,2,13,4,);
B(B_COMMENT,,jump to next,1,1,27,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL := curr3: ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 15 ;
        NETWORK_BODY
B(B_COMMENT,,calculate different slope for different volumes (Steigung),1,1,27,2,);
B(B_COMMENT,,d= diff y / diff x ,1,2,27,3,);
B(B_F,@GE-2,,13,4,18,8,);
B(B_VARIN,,current_max,10,5,12,7,);
B(B_VARIN,,current_150,9,6,11,8,);
B(B_F,sel,,18,5,23,10,);
B(B_VARIN,,current_100,21,9,23,11,);
B(B_F,@SUB,,23,7,28,11,);
B(B_F,@DIV,,39,7,44,11,);
B(B_VAROUT,,LDd3,44,8,46,10,);
B(B_F,uint_to_real,,28,7,39,10,);
B(B_VARIN,,max_value,30,11,32,13,);
B(B_F,@SUB,,32,10,37,14,);
B(B_VARIN,,100.0,30,12,32,14,);
L(23,7,23,9);
L(12,6,12,8);
L(11,7,11,9);
L(12,6,13,6);
L(11,7,13,7);
L(18,6,18,7);
L(12,8,18,8);
L(11,9,18,9);
L(38,10,39,10);
L(37,12,38,12);
L(38,10,38,12);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_F,limit,,19,4,25,9,);
B(B_VARIN,,0.0,17,5,19,7,);
B(B_VARIN,,50.0,17,7,19,9,);
B(B_F,@MUL-2,,27,4,32,8,);
B(B_VARIN,,LDd3,24,9,26,11,);
B(B_VAROUT,,LDcurrent3,32,5,34,7,);
B(B_F,@SUB,,11,5,16,9,);
B(B_VARIN,,calc_volume,9,6,11,8,);
B(B_VARIN,,100.0,9,7,11,9,);
B(B_COMMENT,,calculate current depend on joystick signal,1,1,27,2,);
B(B_COMMENT,,y = d*x,1,2,27,3,);
L(25,6,27,6);
L(26,7,26,10);
L(26,7,27,7);
L(16,7,19,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_VAROUT,,LDcurrent4,11,1,13,3,);
B(B_VAROUT,,LDcurrent5,11,2,13,4,);
B(B_VAROUT,,LDcurrent6,11,3,13,5,);
B(B_VAROUT,,LDcurrent7,11,4,13,6,);
B(B_VAROUT,,LDcurrent8,11,5,13,7,);
B(B_VAROUT,,LDcurrent9,11,6,13,8,);
B(B_VARIN,,0.0,9,1,11,3,);
B(B_VAROUT,,LDcurrent10,11,7,13,9,);
B(B_VAROUT,,LDcurrent11,11,8,13,10,);
L(11,2,11,9);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 5 ;
        NETWORK_BODY
B(B_VARIN,,TRUE,9,2,11,4,);
B(B_JUMP,,next,11,2,13,4,);
B(B_COMMENT,,jump to next,1,1,27,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL := curr4: ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 15 ;
        NETWORK_BODY
B(B_COMMENT,,calculate different slope for different volumes (Steigung),1,1,27,2,);
B(B_COMMENT,,d= diff y / diff x ,1,2,27,3,);
B(B_F,@GE-2,,13,4,18,8,);
B(B_VARIN,,current_max,10,5,12,7,);
B(B_VARIN,,current_200,9,6,11,8,);
B(B_F,sel,,18,5,23,10,);
B(B_VARIN,,current_150,21,9,23,11,);
B(B_F,@SUB,,23,7,28,11,);
B(B_F,@DIV,,39,7,44,11,);
B(B_VAROUT,,LDd4,44,8,46,10,);
B(B_F,uint_to_real,,28,7,39,10,);
B(B_VARIN,,max_value,30,11,32,13,);
B(B_F,@SUB,,32,10,37,14,);
B(B_VARIN,,150.0,30,12,32,14,);
L(23,7,23,9);
L(12,6,12,8);
L(11,7,11,9);
L(12,6,13,6);
L(11,7,13,7);
L(18,6,18,7);
L(12,8,18,8);
L(11,9,18,9);
L(38,10,39,10);
L(37,12,38,12);
L(38,10,38,12);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_F,limit,,19,4,25,9,);
B(B_VARIN,,0.0,17,5,19,7,);
B(B_VARIN,,50.0,17,7,19,9,);
B(B_F,@MUL-2,,27,4,32,8,);
B(B_VARIN,,LDd4,24,9,26,11,);
B(B_VAROUT,,LDcurrent4,32,5,34,7,);
B(B_F,@SUB,,11,5,16,9,);
B(B_VARIN,,calc_volume,9,6,11,8,);
B(B_VARIN,,150.0,9,7,11,9,);
B(B_COMMENT,,calculate current depend on joystick signal,1,1,27,2,);
B(B_COMMENT,,y = d*x,1,2,27,3,);
L(25,6,27,6);
L(26,7,26,10);
L(26,7,27,7);
L(16,7,19,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_VAROUT,,LDcurrent5,11,1,13,3,);
B(B_VAROUT,,LDcurrent6,11,2,13,4,);
B(B_VAROUT,,LDcurrent7,11,3,13,5,);
B(B_VARIN,,0.0,9,1,11,3,);
B(B_VAROUT,,LDcurrent8,11,4,13,6,);
B(B_VAROUT,,LDcurrent9,11,5,13,7,);
B(B_VAROUT,,LDcurrent10,11,6,13,8,);
B(B_VAROUT,,LDcurrent11,11,7,13,9,);
L(11,2,11,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 5 ;
        NETWORK_BODY
B(B_VARIN,,TRUE,9,2,11,4,);
B(B_JUMP,,next,11,2,13,4,);
B(B_COMMENT,,jump to next,1,1,27,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL := curr5: ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 15 ;
        NETWORK_BODY
B(B_COMMENT,,calculate different slope for different volumes (Steigung),1,1,27,2,);
B(B_COMMENT,,d= diff y / diff x ,1,2,27,3,);
B(B_F,@GE-2,,13,4,18,8,);
B(B_VARIN,,current_max,10,5,12,7,);
B(B_VARIN,,current_250,9,6,11,8,);
B(B_F,sel,,18,5,23,10,);
B(B_VARIN,,current_200,21,9,23,11,);
B(B_F,@SUB,,23,7,28,11,);
B(B_F,@DIV,,39,7,44,11,);
B(B_VAROUT,,LDd5,44,8,46,10,);
B(B_F,uint_to_real,,28,7,39,10,);
B(B_VARIN,,max_value,30,11,32,13,);
B(B_F,@SUB,,32,10,37,14,);
B(B_VARIN,,200.0,30,12,32,14,);
L(23,7,23,9);
L(12,6,12,8);
L(11,7,11,9);
L(12,6,13,6);
L(11,7,13,7);
L(18,6,18,7);
L(12,8,18,8);
L(11,9,18,9);
L(38,10,39,10);
L(37,12,38,12);
L(38,10,38,12);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_F,limit,,19,4,25,9,);
B(B_VARIN,,0.0,17,5,19,7,);
B(B_VARIN,,50.0,17,7,19,9,);
B(B_F,@MUL-2,,27,4,32,8,);
B(B_VARIN,,LDd5,24,9,26,11,);
B(B_VAROUT,,LDcurrent5,32,5,34,7,);
B(B_F,@SUB,,11,5,16,9,);
B(B_VARIN,,calc_volume,9,6,11,8,);
B(B_VARIN,,200.0,9,7,11,9,);
B(B_COMMENT,,calculate current depend on joystick signal,1,1,27,2,);
B(B_COMMENT,,y = d*x,1,2,27,3,);
L(25,6,27,6);
L(26,7,26,10);
L(26,7,27,7);
L(16,7,19,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_VAROUT,,LDcurrent6,11,1,13,3,);
B(B_VAROUT,,LDcurrent7,11,2,13,4,);
B(B_VARIN,,0.0,9,1,11,3,);
B(B_VAROUT,,LDcurrent8,11,3,13,5,);
B(B_VAROUT,,LDcurrent9,11,4,13,6,);
B(B_VAROUT,,LDcurrent10,11,5,13,7,);
B(B_VAROUT,,LDcurrent11,11,6,13,8,);
L(11,2,11,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 5 ;
        NETWORK_BODY
B(B_VARIN,,TRUE,9,2,11,4,);
B(B_JUMP,,next,11,2,13,4,);
B(B_COMMENT,,jump to next,1,1,27,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL := curr6: ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 15 ;
        NETWORK_BODY
B(B_COMMENT,,calculate different slope for different volumes (Steigung),1,1,27,2,);
B(B_COMMENT,,d= diff y / diff x ,1,2,27,3,);
B(B_VARIN,,current_250,21,9,23,11,);
B(B_F,@SUB,,23,7,28,11,);
B(B_F,@DIV,,39,7,44,11,);
B(B_VAROUT,,LDd6,44,8,46,10,);
B(B_F,uint_to_real,,28,7,39,10,);
B(B_VARIN,,max_value,30,11,32,13,);
B(B_F,@SUB,,32,10,37,14,);
B(B_VARIN,,250.0,30,12,32,14,);
B(B_F,@GE-2,,13,4,18,8,);
B(B_VARIN,,current_max,10,5,12,7,);
B(B_VARIN,,current_300,9,6,11,8,);
B(B_F,sel,,18,5,23,10,);
L(38,10,39,10);
L(37,12,38,12);
L(38,10,38,12);
L(23,7,23,9);
L(12,6,12,8);
L(11,7,11,9);
L(12,6,13,6);
L(11,7,13,7);
L(18,6,18,7);
L(12,8,18,8);
L(11,9,18,9);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_F,limit,,19,4,25,9,);
B(B_VARIN,,0.0,17,5,19,7,);
B(B_VARIN,,50.0,17,7,19,9,);
B(B_F,@MUL-2,,27,4,32,8,);
B(B_VARIN,,LDd6,24,9,26,11,);
B(B_VAROUT,,LDcurrent6,32,5,34,7,);
B(B_F,@SUB,,11,5,16,9,);
B(B_VARIN,,calc_volume,9,6,11,8,);
B(B_VARIN,,250.0,9,7,11,9,);
B(B_COMMENT,,calculate current depend on joystick signal,1,1,27,2,);
B(B_COMMENT,,y = d*x,1,2,27,3,);
L(25,6,27,6);
L(26,7,26,10);
L(26,7,27,7);
L(16,7,19,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_VARIN,,0.0,9,1,11,3,);
B(B_VAROUT,,LDcurrent7,11,1,13,3,);
B(B_VAROUT,,LDcurrent8,11,2,13,4,);
B(B_VAROUT,,LDcurrent9,11,3,13,5,);
B(B_VAROUT,,LDcurrent10,11,4,13,6,);
B(B_VAROUT,,LDcurrent11,11,5,13,7,);
L(11,2,11,6);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 5 ;
        NETWORK_BODY
B(B_VARIN,,TRUE,9,2,11,4,);
B(B_JUMP,,next,11,2,13,4,);
B(B_COMMENT,,jump to next,1,1,27,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL := curr7: ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 15 ;
        NETWORK_BODY
B(B_COMMENT,,calculate different slope for different volumes (Steigung),1,1,27,2,);
B(B_COMMENT,,d= diff y / diff x ,1,2,27,3,);
B(B_F,@GE-2,,13,4,18,8,);
B(B_VARIN,,current_max,10,5,12,7,);
B(B_VARIN,,current_350,9,6,11,8,);
B(B_F,sel,,18,5,23,10,);
B(B_VARIN,,current_300,21,9,23,11,);
B(B_F,@SUB,,23,7,28,11,);
B(B_F,@DIV,,39,7,44,11,);
B(B_VAROUT,,LDd7,44,8,46,10,);
B(B_F,uint_to_real,,28,7,39,10,);
B(B_VARIN,,max_value,30,11,32,13,);
B(B_F,@SUB,,32,10,37,14,);
B(B_VARIN,,300.0,30,12,32,14,);
L(23,7,23,9);
L(12,6,12,8);
L(11,7,11,9);
L(12,6,13,6);
L(11,7,13,7);
L(18,6,18,7);
L(12,8,18,8);
L(11,9,18,9);
L(38,10,39,10);
L(37,12,38,12);
L(38,10,38,12);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_F,limit,,19,4,25,9,);
B(B_VARIN,,0.0,17,5,19,7,);
B(B_VARIN,,50.0,17,7,19,9,);
B(B_F,@MUL-2,,27,4,32,8,);
B(B_VARIN,,LDd7,24,9,26,11,);
B(B_VAROUT,,LDcurrent7,32,5,34,7,);
B(B_F,@SUB,,11,5,16,9,);
B(B_VARIN,,calc_volume,9,6,11,8,);
B(B_VARIN,,300.0,9,7,11,9,);
B(B_COMMENT,,calculate current depend on joystick signal,1,1,27,2,);
B(B_COMMENT,,y = d*x,1,2,27,3,);
L(25,6,27,6);
L(26,7,26,10);
L(26,7,27,7);
L(16,7,19,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_VAROUT,,LDcurrent8,11,1,13,3,);
B(B_VAROUT,,LDcurrent9,11,2,13,4,);
B(B_VAROUT,,LDcurrent10,11,3,13,5,);
B(B_VARIN,,0.0,9,1,11,3,);
B(B_VAROUT,,LDcurrent11,11,4,13,6,);
L(11,2,11,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 5 ;
        NETWORK_BODY
B(B_VARIN,,TRUE,9,2,11,4,);
B(B_JUMP,,next,11,2,13,4,);
B(B_COMMENT,,jump to next,1,1,27,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL := curr8: ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 15 ;
        NETWORK_BODY
B(B_COMMENT,,calculate different slope for different volumes (Steigung),1,1,27,2,);
B(B_COMMENT,,d= diff y / diff x ,1,2,27,3,);
B(B_F,@GE-2,,13,4,18,8,);
B(B_VARIN,,current_max,10,5,12,7,);
B(B_VARIN,,current_400,9,6,11,8,);
B(B_F,sel,,18,5,23,10,);
B(B_VARIN,,current_350,21,9,23,11,);
B(B_F,@SUB,,23,7,28,11,);
B(B_F,@DIV,,39,7,44,11,);
B(B_VAROUT,,LDd8,44,8,46,10,);
B(B_F,uint_to_real,,28,7,39,10,);
B(B_VARIN,,max_value,30,11,32,13,);
B(B_F,@SUB,,32,10,37,14,);
B(B_VARIN,,350.0,30,12,32,14,);
L(23,7,23,9);
L(12,6,12,8);
L(11,7,11,9);
L(12,6,13,6);
L(11,7,13,7);
L(18,6,18,7);
L(12,8,18,8);
L(11,9,18,9);
L(38,10,39,10);
L(37,12,38,12);
L(38,10,38,12);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_F,limit,,19,4,25,9,);
B(B_VARIN,,0.0,17,5,19,7,);
B(B_VARIN,,50.0,17,7,19,9,);
B(B_F,@MUL-2,,27,4,32,8,);
B(B_VARIN,,LDd8,24,9,26,11,);
B(B_VAROUT,,LDcurrent8,32,5,34,7,);
B(B_F,@SUB,,11,5,16,9,);
B(B_VARIN,,calc_volume,9,6,11,8,);
B(B_VARIN,,350.0,9,7,11,9,);
B(B_COMMENT,,calculate current depend on joystick signal,1,1,27,2,);
B(B_COMMENT,,y = d*x,1,2,27,3,);
L(25,6,27,6);
L(26,7,26,10);
L(26,7,27,7);
L(16,7,19,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 5 ;
        NETWORK_BODY
B(B_VAROUT,,LDcurrent9,11,1,13,3,);
B(B_VAROUT,,LDcurrent10,11,2,13,4,);
B(B_VARIN,,0.0,9,1,11,3,);
B(B_VAROUT,,LDcurrent11,11,3,13,5,);
L(11,2,11,4);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 5 ;
        NETWORK_BODY
B(B_VARIN,,TRUE,9,2,11,4,);
B(B_JUMP,,next,11,2,13,4,);
B(B_COMMENT,,jump to next,1,1,27,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL := curr9: ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 15 ;
        NETWORK_BODY
B(B_COMMENT,,calculate different slope for different volumes (Steigung),1,1,27,2,);
B(B_COMMENT,,d= diff y / diff x ,1,2,27,3,);
B(B_F,@GE-2,,13,4,18,8,);
B(B_VARIN,,current_max,10,5,12,7,);
B(B_VARIN,,current_450,9,6,11,8,);
B(B_F,sel,,18,5,23,10,);
B(B_VARIN,,current_400,21,9,23,11,);
B(B_F,@SUB,,23,7,28,11,);
B(B_F,@DIV,,39,7,44,11,);
B(B_VAROUT,,LDd9,44,8,46,10,);
B(B_F,uint_to_real,,28,7,39,10,);
B(B_VARIN,,max_value,30,11,32,13,);
B(B_F,@SUB,,32,10,37,14,);
B(B_VARIN,,400.0,30,12,32,14,);
L(23,7,23,9);
L(12,6,12,8);
L(11,7,11,9);
L(12,6,13,6);
L(11,7,13,7);
L(18,6,18,7);
L(12,8,18,8);
L(11,9,18,9);
L(38,10,39,10);
L(37,12,38,12);
L(38,10,38,12);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_F,limit,,19,4,25,9,);
B(B_VARIN,,0.0,17,5,19,7,);
B(B_VARIN,,50.0,17,7,19,9,);
B(B_F,@MUL-2,,27,4,32,8,);
B(B_VARIN,,LDd9,24,9,26,11,);
B(B_VAROUT,,LDcurrent9,32,5,34,7,);
B(B_F,@SUB,,11,5,16,9,);
B(B_VARIN,,calc_volume,9,6,11,8,);
B(B_VARIN,,400.0,9,7,11,9,);
B(B_COMMENT,,calculate current depend on joystick signal,1,1,27,2,);
B(B_COMMENT,,y = d*x,1,2,27,3,);
L(25,6,27,6);
L(26,7,26,10);
L(26,7,27,7);
L(16,7,19,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VAROUT,,LDcurrent10,11,1,13,3,);
B(B_VARIN,,0.0,9,1,11,3,);
B(B_VAROUT,,LDcurrent11,11,2,13,4,);
L(11,2,11,3);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 5 ;
        NETWORK_BODY
B(B_VARIN,,TRUE,9,2,11,4,);
B(B_JUMP,,next,11,2,13,4,);
B(B_COMMENT,,jump to next,1,1,27,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL := curr10: ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 15 ;
        NETWORK_BODY
B(B_COMMENT,,calculate different slope for different volumes (Steigung),1,1,27,2,);
B(B_COMMENT,,d= diff y / diff x ,1,2,27,3,);
B(B_F,@GE-2,,13,4,18,8,);
B(B_VARIN,,current_max,10,5,12,7,);
B(B_VARIN,,current_500,9,6,11,8,);
B(B_F,sel,,18,5,23,10,);
B(B_VARIN,,current_450,21,9,23,11,);
B(B_F,@SUB,,23,7,28,11,);
B(B_F,@DIV,,39,7,44,11,);
B(B_VAROUT,,LDd10,44,8,46,10,);
B(B_F,uint_to_real,,28,7,39,10,);
B(B_VARIN,,max_value,30,11,32,13,);
B(B_F,@SUB,,32,10,37,14,);
B(B_VARIN,,450.0,30,12,32,14,);
L(23,7,23,9);
L(12,6,12,8);
L(11,7,11,9);
L(12,6,13,6);
L(11,7,13,7);
L(18,6,18,7);
L(12,8,18,8);
L(11,9,18,9);
L(38,10,39,10);
L(37,12,38,12);
L(38,10,38,12);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_F,limit,,19,4,25,9,);
B(B_VARIN,,0.0,17,5,19,7,);
B(B_VARIN,,50.0,17,7,19,9,);
B(B_F,@MUL-2,,27,4,32,8,);
B(B_VARIN,,LDd10,24,9,26,11,);
B(B_VAROUT,,LDcurrent10,32,5,34,7,);
B(B_F,@SUB,,11,5,16,9,);
B(B_VARIN,,calc_volume,9,6,11,8,);
B(B_VARIN,,450.0,9,7,11,9,);
B(B_COMMENT,,calculate current depend on joystick signal,1,1,27,2,);
B(B_COMMENT,,y = d*x,1,2,27,3,);
L(25,6,27,6);
L(26,7,26,10);
L(26,7,27,7);
L(16,7,19,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VAROUT,,LDcurrent11,11,1,13,3,);
B(B_VARIN,,0.0,9,1,11,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 5 ;
        NETWORK_BODY
B(B_VARIN,,TRUE,9,2,11,4,);
B(B_JUMP,,next,11,2,13,4,);
B(B_COMMENT,,jump to next,1,1,27,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL := curr11: ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_F,@DIV,,27,4,32,8,);
B(B_VAROUT,,LDd11,32,5,34,7,);
B(B_F,uint_to_real,,16,4,27,7,);
B(B_COMMENT,,calculate different slope for different volumes (Steigung),1,1,27,2,);
B(B_COMMENT,,d= diff y / diff x ,1,2,27,3,);
B(B_F,@SUB,,11,4,16,8,);
B(B_VARIN,,current_500,9,6,11,8,);
B(B_VARIN,,current_max,9,5,11,7,);
B(B_VARIN,,max_value,18,8,20,10,);
B(B_F,@SUB,,20,7,25,11,);
B(B_VARIN,,500.0,18,9,20,11,);
L(26,7,27,7);
L(25,9,26,9);
L(26,7,26,9);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_F,limit,,18,4,24,9,);
B(B_F,@MUL-2,,26,4,31,8,);
B(B_VAROUT,,LDcurrent11,31,5,33,7,);
B(B_VARIN,,LDd11,23,9,25,11,);
B(B_F,@SUB,,11,5,16,9,);
B(B_VARIN,,calc_volume,9,6,11,8,);
B(B_VARIN,,500.0,9,7,11,9,);
B(B_VARIN,,0.0,15,3,17,5,);
B(B_COMMENT,,calculate current depend on joystick signal,1,1,27,2,);
B(B_COMMENT,,y = d*x,1,2,27,3,);
L(24,6,26,6);
L(25,7,26,7);
L(25,7,25,10);
L(17,7,17,8);
L(17,8,18,8);
L(16,7,18,7);
L(17,4,17,6);
L(17,6,18,6);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 5 ;
        NETWORK_BODY
B(B_VARIN,,TRUE,9,2,11,4,);
B(B_JUMP,,next,11,2,13,4,);
B(B_COMMENT,,jump to next,1,1,27,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL := next: ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 21 ;
        NETWORK_BODY
B(B_COMMENT,,calculate current rated value (Sollwert),1,1,27,2,);
B(B_VAROUT,,LDsumCurrent,28,7,30,9,);
B(B_VARIN,,LDcurrent1,21,8,23,10,);
B(B_VARIN,,LDcurrent6,21,13,23,15,);
B(B_VARIN,,LDcurrent5,21,12,23,14,);
B(B_VARIN,,LDcurrent4,21,11,23,13,);
B(B_VARIN,,LDcurrent3,21,10,23,12,);
B(B_VARIN,,LDcurrent2,21,9,23,11,);
B(B_VARIN,,current_min,9,4,11,6,);
B(B_F,uint_to_real,,11,3,22,6,);
B(B_VAROUT,,LDcurrent_min,22,4,24,6,);
B(B_VARIN,,LDcurrent7,21,14,23,16,);
B(B_VAROUT,,calc_current,28,8,30,10,);
B(B_VARIN,,LDcurrent10,21,17,23,19,);
B(B_VARIN,,LDcurrent9,21,16,23,18,);
B(B_VARIN,,LDcurrent8,21,15,23,17,);
B(B_VARIN,,LDcurrent11,21,18,23,20,);
B(B_F,@ADD-12,,23,6,28,20,);
L(22,5,22,8);
L(28,8,28,9);
L(22,8,23,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 15 ;
        NETWORK_BODY
B(B_VARIN,,current_max,9,8,11,10,);
B(B_F,@SUB,,22,7,27,11,);
B(B_F,uint_to_real,,11,7,22,10,);
B(B_F,@DIV,,29,6,34,10,);
B(B_VARIN,,100.0,26,5,28,7,);
B(B_F,@MUL-2,,36,6,41,10,);
B(B_F,@SUB,,29,10,34,14,);
B(B_VARIN,,LDsumCurrent,27,11,29,13,);
B(B_VARIN,,LDcurrent_min,19,12,21,14,);
B(B_F,@MUL-2,,43,8,48,12,);
B(B_VARIN,,-1.0,41,10,43,12,);
B(B_F,sel,,50,5,55,10,);
B(B_F,@LT-2,,43,2,48,6,);
B(B_VARIN,,signal_in,41,3,43,5,);
B(B_VARIN,,0.0,41,4,43,6,);
B(B_COMMENT,,calibrate joystick signal depend on rated value,1,1,27,2,);
B(B_VAROUT,,signal_out,55,6,57,8,);
L(21,10,21,11);
L(21,10,22,10);
L(27,9,29,9);
L(28,8,29,8);
L(28,6,28,8);
L(35,9,36,9);
L(34,8,36,8);
L(21,11,21,13);
L(21,13,29,13);
L(34,12,35,12);
L(35,9,35,12);
L(41,8,50,8);
L(48,10,49,10);
L(49,9,49,10);
L(49,9,50,9);
L(42,8,42,10);
L(42,10,43,10);
L(48,4,49,4);
L(49,4,49,7);
L(49,7,50,7);
        END_NETWORK_BODY
    END_NET_WORK
END_BODY
END_FUNCTION_BLOCK

FUNCTION_BLOCK ADdynGCAutomV015
	VAR_INPUT 
		automatic_active: BOOL:=FALSE;
			(*automatic active not stopped*)
		begin_autom: BOOL:=FALSE;
			(*begin with the automatic cycle*)
		start_new_point: BOOL:=FALSE;
			(*start new compaction point*)
		winch_standing: BOOL:=FALSE;
			(*winch is standing still*)
		winch_working: BOOL:=FALSE;
			(*winch is moving*)
		hg_pressure: REAL:=0.0;
			(*pressure hoisting gear*)
		hg_press_memory: REAL:=0.0;
			(*pressure memory hoisting gear*)
		press_pou_on_rop: REAL:=0.0;
			(*pressure pounder on the rope*)
		given_hois_hight: REAL:=0.0;
			(*given hoist hight*)
		given_slodow_hig: REAL:=0.0;
			(*given slow down hight*)
		rope_lenght_abso: REAL:=0.0;
			(*rope lenght absolut*)
		analo_sig_clutch: REAL:=0.0;
			(*analog signal clutch*)
		pou_start_fallin: BOOL:=FALSE;
			(*pounder starts falling*)
		slipping_fall_of: BOOL:=FALSE;
			(*slipping fall in the beginning of the fall is NOT released*)
		hg_number: INT:=0;
			(*number of the hoisting gear*)
		set_pou_fallin: BOOL:=FALSE;
			(*set pounder falling*)
		hg_brake: BOOL:=FALSE;
			(*hg brake opened*)
	END_VAR
	VAR_OUTPUT
		pounder_to_rope: BOOL:=FALSE;
			(*get the pounder to the rope*)
		pounder_on_rope: BOOL:=FALSE;
			(*pounder is on the rope*)
		slipping_fall: BOOL:=FALSE;
			(*slipping fall in the beginning of the fall*)
		free_fall: BOOL:=FALSE;
			(*free_fall*)
		slow_down_fall: BOOL:=FALSE;
			(*slow down falling*)
		digital_clutch: BOOL:=FALSE;
			(*digital clutch*)
		pres_sliClu_begi: REAL:=0.0;
			(*clutch signal slipping clutch for get pounder to the rope*)
		clu_sig_slip_fal: REAL:=0.0;
			(*clutch signal slipping fall*)
		rope_lenght_rela: REAL:=0.0;
			(*rope lenght relative*)
		beats: REAL:=0.0;
			(*beats since automatic started*)
		compaction: REAL:=0.0;
			(*compaction since automatic started*)
		compaction_check: BOOL:=FALSE;
			(*compaction check*)
		automatic_error: BOOL:=FALSE;
			(*automatic error*)
		automatic_workin: BOOL:=FALSE;
			(*automatic working*)
	END_VAR
	VAR_EXTERNAL CONSTANT
		MSG_ERROR: UINT:=0;
	END_VAR
	VAR 
		LXcycleCompleted: BOOL:=FALSE;
		LXcompactChecked: BOOL:=FALSE;
		LXpresErr: BOOL:=FALSE;
		LXerror: BOOL:=FALSE;
		LX100: BOOL:=FALSE;
		LDtaraAutom: REAL:=0.0;
		LDtaraCycle: REAL:=0.0;
		Integrator1: Integrator;
		Integrator2: Integrator;
		TON1: TON;
		RS1: RS;
		RS2: RS;
		RS3: RS;
		RS4: RS;
		RS5: RS;
		RS6: RS;
		RS7: RS;
		RS8: RS;
		RS9: RS;
		RS10: RS;
		SR1: SR;
		R_TRIG1: R_TRIG;
		R_TRIG2: R_TRIG;
		R_TRIG3: R_TRIG;
		F_TRIG1: F_TRIG;
		F_TRIG2: F_TRIG;
		error1: MsgUDintUDint;
		error2: MsgUDintUDint;
		error3: MsgUDintUDint;
		error4: MsgUDintUDint;
	END_VAR
'FBD'
BODY
    WORKSPACE
        NETWORK_LIST_TYPE := NWTYPEFBD ;
        ACTIVE_NETWORK := 0 ;
    END_WORKSPACE
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 19 ;
        NETWORK_BODY
B(B_COMMENT,,set rope lenght,1,1,27,2,);
B(B_VAROUT,,LDtaraCycle,34,14,36,16,);
B(B_VARIN,,LDtaraCycle,25,15,27,17,);
B(B_VARIN,,rope_lenght_abso,26,16,28,18,);
B(B_F,sel,,29,13,34,18,);
B(B_F,sel,,29,6,34,11,);
B(B_VAROUT,,LDtaraAutom,34,7,36,9,);
B(B_VARIN,,LDtaraAutom,27,8,29,10,);
B(B_F,@OR-2,,21,10,26,14,);
B(B_FB,RS,RS1,22,4,27,8,);
B(B_FB,R_TRIG,R_TRIG1,11,10,18,13,);
B(B_VARIN,,pounder_on_rope,9,11,11,13,);
B(B_VARIN,,begin_autom,18,13,20,15,);
B(B_VARIN,,start_new_point,20,5,22,7,);
L(27,16,29,16);
L(28,17,29,17);
L(27,12,27,15);
L(27,15,29,15);
L(28,10,29,10);
L(28,10,28,17);
L(26,12,27,12);
L(27,6,28,6);
L(28,6,28,8);
L(28,8,29,8);
L(19,7,22,7);
L(18,12,21,12);
L(19,7,19,12);
L(20,13,20,14);
L(20,13,21,13);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_F,@SUB,,11,1,16,5,);
B(B_VAROUT,,rope_lenght_rela,16,2,18,4,);
B(B_VARIN,,LDtaraCycle,9,3,11,5,);
B(B_VARIN,,rope_lenght_abso,9,2,11,4,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 28 ;
        NETWORK_BODY
B(B_COMMENT,,get the pounder to the rope,1,1,27,2,);
B(B_F,@AND-2,,19,16,24,20,0N);
B(B_VARIN,,begin_autom,16,17,18,19,);
B(B_F,@AND-2,,19,20,24,24,);
B(B_F,@GT-2,,11,21,16,25,);
B(B_VARIN,,hg_press_memory,9,22,11,24,);
B(B_VARIN,,65.0,9,23,11,25,);
B(B_VARIN,,automatic_active,23,25,25,27,);
B(B_F,@OR-2,,25,23,30,27,NN);
B(B_FB,RS,RS3,32,20,37,24,);
B(B_VAROUT,,LXpresErr,37,21,39,23,);
B(B_F,@OR-2,,26,13,31,17,);
B(B_F,@AND-2,,33,12,38,16,);
B(B_VAROUT,,pounder_to_rope,45,13,47,15,);
B(B_FB,RS,RS2,40,12,45,16,);
B(B_VARIN,,winch_standing,30,11,32,13,);
B(B_VARIN,,automatic_error,31,3,33,5,);
B(B_VARIN,,automatic_active,31,4,33,6,);
B(B_F,@GE-2,,26,7,31,11,);
B(B_F,@OR-4,,33,2,38,8,0N);
B(B_VARIN,,pounder_on_rope,31,5,33,7,);
B(B_VARIN,,rope_lenght_rela,24,8,26,10,);
B(B_VARIN,,given_hois_hight,24,9,26,11,);
B(B_VARIN,,LXcycleCompleted,24,14,26,16,);
L(17,19,19,19);
L(17,19,17,23);
L(18,18,19,18);
L(18,18,18,22);
L(18,22,19,22);
L(16,23,19,23);
L(24,18,25,18);
L(24,22,26,22);
L(25,16,25,18);
L(17,23,17,25);
L(17,25,25,25);
L(30,25,31,25);
L(26,22,32,22);
L(31,23,32,23);
L(31,23,31,25);
L(25,16,26,16);
L(38,14,40,14);
L(31,15,33,15);
L(32,12,32,14);
L(32,14,33,14);
L(39,15,40,15);
L(31,9,32,9);
L(32,7,33,7);
L(38,4,39,4);
L(32,7,32,9);
L(39,4,39,15);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 35 ;
        NETWORK_BODY
B(B_COMMENT,,set the clutch pressure for slipping clutch to start,1,1,27,2,);
B(B_COMMENT,,Abschalten im Fehlerfall:ø^Analoger Kupplungstrom halten bis die Winde steht.ø^Wenn der Strom abgeschalten wird~ würde die Winde währendø^dem Stehenbleiben des Windemotors von schleifender Kupplungø^auf geschlossen schalten~ und die Winde wür,0,0,0,0,0,0,0,);
B(B_F,@ADD-2,,22,7,27,11,);
B(B_VARIN,,analo_sig_clutch,20,8,22,10,);
B(B_VARIN,,10.0,20,9,22,11,);
B(B_F,sel,,29,6,34,11,);
B(B_VAROUT,,pres_sliClu_begi,46,6,48,8,);
B(B_COMMENT,,0=unendlich~ 20=5sec.~ 10000=10msec.ø^von 100% bis 0%,37,20,53,22,);
B(B_FB,Integrator,Integrator1,37,5,46,11,);
B(B_VARIN,,TRUE,34,4,36,6,);
B(B_F,sel,,30,22,35,27,);
B(B_F,@OR-2,,22,3,27,7,);
B(B_VARIN,,pounder_to_rope,20,4,22,6,);
B(B_VARIN,,pounder_on_rope,20,5,22,7,);
B(B_VARIN,,0.0,27,27,29,29,);
B(B_VARIN,,10.0,26,26,28,28,);
B(B_COMMENT,,0%   ->  15bar -> geschlossenø^12~5%-> 15bar ->geschlossenø^25% -> 20bar -> schleifendø^40% -> 25bar -> schleifendø^50% -> 30bar -> schleifendø^60% -> 34bar -> offenø^100%->50bar -> offen,1,27,13,34,);
B(B_F,@OR-3,,22,22,27,27,);
B(B_VARIN,,pounder_on_rope,20,25,22,27,);
B(B_VARIN,,winch_working,20,24,22,26,);
B(B_F,@AND-2,,16,20,21,24,);
B(B_F,@GE-2,,11,21,16,25,);
B(B_VARIN,,hg_pressure,9,22,11,24,);
B(B_VARIN,,press_pou_on_rop,9,23,11,25,);
B(B_COMMENT,,hier kommen ca. 15bar offset hydraulisch hinzu!!!ø^(das Ventil hat mind 15bar),14,32,33,34,);
B(B_VARIN,,pounder_to_rope,14,19,16,21,);
B(B_VARIN,,0.0,26,11,28,13,);
B(B_F,sel,,29,13,34,18,);
B(B_F,@OR-2,,22,13,27,17,0N);
B(B_VARIN,,automatic_active,20,14,22,16,);
B(B_VARIN,,hg_brake,20,15,22,17,);
B(B_VARIN,,10000.0,26,18,28,20,);
B(B_VARIN,,0.0,25,17,27,19,);
L(28,8,29,8);
L(28,10,29,10);
L(27,9,29,9);
L(34,8,37,8);
L(35,9,37,9);
L(36,10,37,10);
L(36,7,37,7);
L(36,5,36,7);
L(35,24,36,24);
L(36,10,36,24);
L(28,5,28,8);
L(27,5,28,5);
L(28,25,30,25);
L(28,25,28,27);
L(29,26,30,26);
L(29,26,29,28);
L(27,24,30,24);
L(16,20,16,22);
L(21,22,22,22);
L(22,22,22,24);
L(35,9,35,15);
L(28,10,28,12);
L(27,15,29,15);
L(27,16,29,16);
L(28,17,29,17);
L(27,16,27,18);
L(28,17,28,19);
L(34,15,35,15);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 19 ;
        NETWORK_BODY
B(B_COMMENT,,pounder is on the rope -> lift pounder,1,1,27,2,);
B(B_VAROUT,,pounder_on_rope,37,5,39,7,);
B(B_FB,RS,RS4,32,4,37,8,);
B(B_F,@OR-3,,25,8,30,13,N);
B(B_VARIN,,automatic_error,23,10,25,12,);
B(B_VARIN,,automatic_active,23,9,25,11,);
B(B_FB,TON,TON1,25,4,30,8,);
B(B_F,@AND-2,,18,4,23,8,);
B(B_F,@GE-2,,11,5,16,9,);
B(B_VARIN,,hg_pressure,9,6,11,8,);
B(B_VARIN,,press_pou_on_rop,9,7,11,9,);
B(B_VARIN,,pounder_to_rope,15,3,17,5,);
B(B_VARIN,,T#1.0s,22,8,24,10,);
B(B_COMMENT,,Wartezeit 1 Sekunde damit Ramme am Seil ist,27,1,46,2,);
B(B_F,@GE-2,,11,12,16,16,);
B(B_VARIN,,rope_lenght_rela,9,13,11,15,);
B(B_VARIN,,given_hois_hight,9,14,11,16,);
B(B_F,@OR-2,,18,12,23,16,);
B(B_VARIN,,set_pou_fallin,15,16,17,18,);
L(31,7,32,7);
L(31,7,31,10);
L(30,10,31,10);
L(23,14,24,14);
L(24,12,24,14);
L(24,12,25,12);
L(30,6,32,6);
L(23,6,25,6);
L(16,7,18,7);
L(17,6,18,6);
L(17,4,17,6);
L(24,7,24,9);
L(24,7,25,7);
L(17,15,17,17);
L(17,15,18,15);
L(16,14,18,14);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 17 ;
        NETWORK_BODY
B(B_COMMENT,,slipping fall,1,1,25,2,);
B(B_VARIN,,automatic_active,23,7,25,9,);
B(B_VARIN,,automatic_error,23,8,25,10,);
B(B_FB,F_TRIG,F_TRIG1,16,4,23,7,);
B(B_VARIN,,pounder_on_rope,14,5,16,7,);
B(B_FB,RS,RS5,32,5,37,9,);
B(B_VAROUT,,slipping_fall,37,6,39,8,);
B(B_VARIN,,free_fall,29,11,31,13,);
B(B_F,@AND-4,,25,5,30,11,00N);
B(B_F,@GE-2,,11,10,16,14,);
B(B_VARIN,,given_hois_hight,9,12,11,14,);
B(B_VARIN,,rope_lenght_rela,9,11,11,13,);
B(B_F,@OR-2,,18,10,23,14,);
B(B_VARIN,,set_pou_fallin,15,14,17,16,);
L(24,10,25,10);
L(23,6,24,6);
L(24,6,24,7);
L(24,7,25,7);
L(30,7,32,7);
L(31,8,32,8);
L(31,8,31,12);
L(24,10,24,12);
L(23,12,24,12);
L(17,13,17,15);
L(17,13,18,13);
L(16,12,18,12);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 19 ;
        NETWORK_BODY
B(B_F,sel,,25,9,30,14,);
B(B_F,@MUL-2,,18,10,23,14,);
B(B_VARIN,,1.05,16,12,18,14,);
B(B_VARIN,,analo_sig_clutch,16,11,18,13,);
B(B_VARIN,,100.0,22,14,24,16,);
B(B_FB,Integrator,Integrator2,33,8,42,14,);
B(B_VARIN,,TRUE,30,7,32,9,);
B(B_VARIN,,10000.0,30,16,32,18,);
B(B_VARIN,,30.0,29,15,31,17,);
B(B_VAROUT,,clu_sig_slip_fal,42,9,44,11,);
B(B_COMMENT,,Kupplung nach dem Sprungø^auf den Schleifpunktø^integrierend weiteröffnen!,33,14,45,17,);
B(B_F,@AND-2,,18,5,23,9,);
B(B_F,@OR-2,,11,6,16,10,);
B(B_VARIN,,slipping_fall,9,7,11,9,);
B(B_VARIN,,free_fall,9,8,11,10,);
B(B_FB,RS,RS6,11,2,16,6,);
B(B_VARIN,,LXcycleCompleted,9,4,11,6,);
B(B_VARIN,,pou_start_fallin,9,3,11,5,);
B(B_COMMENT,,Die Kupplung wird erst weitergeöffnet~ wenn sich die Windeø^wirklich im Anfang des Freien Falles befindet.ø^Bei Rammen mit zwei Winden muß dies überwachtø^werden: pou_start_fallin,24,1,47,5,);
L(23,12,25,12);
L(24,11,25,11);
L(24,13,25,13);
L(24,13,24,15);
L(32,8,32,10);
L(32,10,33,10);
L(30,11,33,11);
L(31,12,33,12);
L(32,13,33,13);
L(31,12,31,16);
L(32,13,32,17);
L(24,7,24,11);
L(23,7,24,7);
L(17,4,17,7);
L(17,7,18,7);
L(16,8,18,8);
L(16,4,17,4);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 18 ;
        NETWORK_BODY
B(B_COMMENT,,free fall,1,1,27,2,);
B(B_FB,RS,RS7,40,4,45,8,);
B(B_VAROUT,,free_fall,45,5,47,7,);
B(B_F,@AND-2,,33,4,38,8,);
B(B_VARIN,,slipping_fall,30,3,32,5,);
B(B_VARIN,,LXcycleCompleted,37,8,39,10,);
B(B_VARIN,,slipping_fall_of,24,6,26,8,);
B(B_F,@OR-3,,26,5,31,10,);
B(B_F,@GT-2,,18,12,23,16,);
B(B_F,@GE-2,,18,8,23,12,);
B(B_VARIN,,100.0,14,10,16,12,);
B(B_VARIN,,clu_sig_slip_fal,15,9,17,11,);
B(B_F,@MUL-2,,11,13,16,17,);
B(B_VARIN,,analo_sig_clutch,9,14,11,16,);
B(B_VARIN,,1.35,9,15,11,17,);
L(38,6,40,6);
L(39,7,40,7);
L(32,4,32,6);
L(32,6,33,6);
L(39,7,39,9);
L(24,8,26,8);
L(24,8,24,10);
L(31,7,33,7);
L(25,9,25,14);
L(25,9,26,9);
L(23,10,24,10);
L(23,14,25,14);
L(16,11,18,11);
L(17,10,18,10);
L(17,10,17,14);
L(16,15,18,15);
L(17,14,18,14);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 14 ;
        NETWORK_BODY
B(B_COMMENT,,slow down,1,1,27,2,);
B(B_FB,RS,RS8,25,4,30,8,);
B(B_VAROUT,,slow_down_fall,30,5,32,7,);
B(B_F,@AND-2,,18,4,23,8,);
B(B_VARIN,,LXcycleCompleted,22,11,24,13,);
B(B_VARIN,,free_fall,16,5,18,7,);
B(B_VARIN,,rope_lenght_rela,9,8,11,10,);
B(B_F,@LE-2,,11,7,16,11,);
B(B_VARIN,,given_slodow_hig,9,9,11,11,);
L(23,6,25,6);
L(24,7,25,7);
L(24,7,24,12);
L(17,7,18,7);
L(17,7,17,9);
L(16,9,17,9);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 14 ;
        NETWORK_BODY
B(B_COMMENT,,cycle completed,1,1,27,2,);
B(B_VARIN,,slow_down_fall,9,6,11,8,);
B(B_VARIN,,winch_standing,9,5,11,7,);
B(B_F,@AND-2,,11,4,16,8,);
B(B_VAROUT,,LXcycleCompleted,23,5,25,7,);
B(B_VARIN,,automatic_error,9,11,11,13,);
B(B_VARIN,,automatic_active,9,10,11,12,);
B(B_VARIN,,pounder_to_rope,9,9,11,11,);
B(B_F,@OR-3,,11,8,16,13,0N);
B(B_FB,SR,SR1,18,4,23,8,);
L(17,7,18,7);
L(17,7,17,10);
L(16,10,17,10);
L(16,6,18,6);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 14 ;
        NETWORK_BODY
B(B_COMMENT,,count the beats,1,1,27,2,);
B(B_F,sel,,19,5,24,10,);
B(B_F,@ADD-2,,12,9,17,13,);
B(B_VARIN,,1.0,10,11,12,13,);
B(B_F,sel,,26,4,31,9,);
B(B_VARIN,,beats,9,7,11,9,);
B(B_VARIN,,start_new_point,23,3,25,5,);
B(B_VARIN,,0.0,23,10,25,12,);
B(B_VAROUT,,beats,31,5,33,7,);
B(B_FB,R_TRIG,R_TRIG2,11,5,18,8,);
B(B_VARIN,,LXcycleCompleted,9,6,11,8,);
L(17,11,18,11);
L(18,9,18,11);
L(18,9,19,9);
L(11,8,19,8);
L(11,8,11,11);
L(11,11,12,11);
L(25,6,26,6);
L(25,4,25,6);
L(24,7,26,7);
L(25,8,26,8);
L(25,8,25,11);
L(18,7,19,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 15 ;
        NETWORK_BODY
B(B_COMMENT,,compaction,1,1,27,2,);
B(B_F,sel,,25,6,30,11,);
B(B_F,@SUB,,18,10,23,14,);
B(B_VAROUT,,compaction,30,7,32,9,);
B(B_VARIN,,compaction,23,8,25,10,);
B(B_F,@OR-2,,18,4,23,8,);
B(B_VARIN,,start_new_point,16,6,18,8,);
B(B_FB,R_TRIG,R_TRIG3,11,4,18,7,);
B(B_VARIN,,pounder_on_rope,9,5,11,7,);
B(B_VARIN,,rope_lenght_abso,16,12,18,14,);
B(B_VARIN,,LDtaraAutom,16,11,18,13,);
B(B_VAROUT,,compaction_check,18,2,20,4,);
L(24,10,24,12);
L(24,10,25,10);
L(23,12,24,12);
L(23,6,24,6);
L(24,6,24,8);
L(24,8,25,8);
L(18,3,18,6);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 43 ;
        NETWORK_BODY
B(B_COMMENT,,automatic working and error,1,1,27,2,);
B(B_VAROUT,,automatic_error,27,4,29,6,);
B(B_VARIN,,MSG_ERROR,39,38,41,40,);
B(B_FB,MsgUDintUDint,error2,41,17,51,24,);
B(B_VARIN,,MSG_ERROR,39,20,41,22,);
B(B_VARIN,,MSG_ERROR,39,29,41,31,);
B(B_FB,MsgUDintUDint,error3,41,26,51,33,);
B(B_VARIN,,LXerror,15,4,17,6,);
B(B_VARIN,,free_fall,9,7,11,9,);
B(B_VARIN,,MSG_ERROR,39,11,41,13,);
B(B_FB,MsgUDintUDint,error1,41,8,51,15,);
B(B_F,sel,,34,32,39,37,);
B(B_F,sel,,34,23,39,28,);
B(B_VARIN,,314,30,26,32,28,);
B(B_VARIN,,313,30,25,32,27,);
B(B_VARIN,,308,30,8,32,10,);
B(B_VARIN,,307,30,7,32,9,);
B(B_F,sel,,34,5,39,10,);
B(B_F,sel,,34,14,39,19,);
B(B_VARIN,,310,30,17,32,19,);
B(B_VARIN,,309,30,16,32,18,);
B(B_VARIN,,315,32,34,34,36,);
B(B_VARIN,,316,32,35,34,37,);
B(B_FB,MsgUDintUDint,error4,41,35,51,42,);
B(B_F,@AND-4,,11,6,16,12,0N0N);
B(B_VARIN,,FALSE,9,9,11,11,);
B(B_VARIN,,LXcycleCompleted,9,10,11,12,);
B(B_VARIN,,slow_down_fall,9,8,11,10,);
B(B_F,@OR-4,,22,3,27,9,);
B(B_VARIN,,hg_number,12,33,14,35,);
B(B_F,@EQ-2,,14,32,19,36,);
B(B_VARIN,,2,12,34,14,36,);
B(B_VARIN,,given_slodow_hig,9,13,11,15,);
B(B_VARIN,,given_hois_hight,9,14,11,16,);
B(B_F,@GE-2,,11,12,16,16,);
B(B_VARIN,,LXpresErr,14,17,16,19,);
B(B_COMMENT,,winch_standing,2,5,10,6,);
L(18,6,22,6);
L(18,20,41,20);
L(19,29,41,29);
L(20,38,41,38);
L(18,6,18,20);
L(17,5,17,11);
L(17,11,41,11);
L(40,34,40,37);
L(40,37,41,37);
L(39,34,40,34);
L(40,25,40,28);
L(39,25,40,25);
L(32,26,34,26);
L(32,27,34,27);
L(40,28,41,28);
L(33,25,34,25);
L(40,7,40,10);
L(32,8,34,8);
L(32,9,34,9);
L(40,10,41,10);
L(33,7,34,7);
L(39,7,40,7);
L(40,16,40,19);
L(39,16,40,16);
L(32,17,34,17);
L(32,18,34,18);
L(40,19,41,19);
L(33,16,34,16);
L(33,7,33,34);
L(16,8,18,8);
L(19,7,22,7);
L(20,8,22,8);
L(17,5,22,5);
L(19,7,19,29);
L(20,8,20,38);
L(19,34,34,34);
L(16,14,19,14);
L(16,18,20,18);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 18 ;
        NETWORK_BODY
B(B_COMMENT,,set digital clutch,1,1,27,2,);
B(B_FB,RS,RS10,36,3,41,7,);
B(B_VAROUT,,digital_clutch,41,4,43,6,);
B(B_COMMENT,,PouToRope: DigClutch geöffnet lassen bis die Windeø^steht~ (Pumpe im Null d.h. Bremse zu) da sich sonstø^die Winde noch dreht bis pumpe im Null,40,9,61,12,);
B(B_COMMENT,,Abschaltung im Fehlerfall:,40,8,61,9,);
B(B_VARIN,,pounder_to_rope,10,8,12,10,);
B(B_VARIN,,slow_down_fall,11,5,13,7,);
B(B_VARIN,,slipping_fall,11,7,13,9,);
B(B_VARIN,,free_fall,11,6,13,8,);
B(B_VARIN,,LXcycleCompleted,11,4,13,6,);
B(B_F,@OR-6,,13,3,18,11,);
B(B_F,@AND-2,,29,6,34,10,NN);
B(B_FB,F_TRIG,F_TRIG2,13,11,20,14,);
B(B_FB,RS,RS9,21,11,26,15,0N);
B(B_VAROUT,,automatic_workin,28,3,30,5,);
B(B_VARIN,,pounder_on_rope,9,9,11,11,);
B(B_VARIN,,hg_brake,18,14,20,16,);
B(B_F,@AND-2,,29,12,34,16,N);
B(B_VAROUT,,LXerror,34,13,36,15,);
B(B_VARIN,,automatic_active,26,15,28,17,);
L(35,6,36,6);
L(12,9,13,9);
L(18,5,36,5);
L(28,5,28,14);
L(28,8,29,8);
L(12,9,12,13);
L(12,13,13,13);
L(20,13,21,13);
L(26,13,27,13);
L(27,9,27,13);
L(27,9,29,9);
L(28,4,28,5);
L(20,14,21,14);
L(11,10,13,10);
L(34,8,35,8);
L(35,6,35,8);
L(20,14,20,15);
L(28,14,29,14);
L(28,15,28,16);
L(28,15,29,15);
        END_NETWORK_BODY
    END_NET_WORK
END_BODY
END_FUNCTION_BLOCK

FUNCTION_BLOCK ADdynGCWinchV024
	VAR_INPUT 
		both_winches: BOOL:=FALSE;
			(*dgc with hg1 and hg2*)
		hg1_active: BOOL:=FALSE;
			(*hg1 dgc active*)
		hg2_active: BOOL:=FALSE;
			(*hg2 dgc active*)
		hg1_fast_speed: BOOL:=FALSE;
			(*hg1 fast speed active*)
		hg2_fast_speed: BOOL:=FALSE;
			(*hg2 fast speed active*)
		hg1_brake: BOOL:=FALSE;
			(*hg1 brake opened*)
		hg2_brake: BOOL:=FALSE;
			(*hg2 brake opened*)
		hg1_get_po_to_ro: BOOL:=FALSE;
			(*hg1 get the pounder to the rope*)
		hg2_get_po_to_ro: BOOL:=FALSE;
			(*hg2 get the pounder to the rope*)
		hg1_poun_on_rope: BOOL:=FALSE;
			(*hg1 pounder is on the rope*)
		hg2_poun_on_rope: BOOL:=FALSE;
			(*hg2 pounder is on the rope*)
		hg1_slippin_fall: BOOL:=FALSE;
			(*hg1 slipping fall*)
		hg2_slippin_fall: BOOL:=FALSE;
			(*hg2 slipping fall*)
		hg1_free_fall: BOOL:=FALSE;
			(*hg1 free fall*)
		hg2_free_fall: BOOL:=FALSE;
			(*hg2 free fall*)
		hg1_slow_down: BOOL:=FALSE;
			(*hg1 slow down fall*)
		hg2_slow_down: BOOL:=FALSE;
			(*hg2 slow down fall*)
		hg1_clu_sig_ptro: REAL:=0.0;
			(*hg1 clutch signal pressure for slipping to get pounder to the rope*)
		hg2_clu_sig_ptro: REAL:=0.0;
			(*hg2 clutch signal pressure for slipping to get pounder to the rope*)
		sig_slip_clutch: REAL:=0.0;
			(*clutch signal for slipping clutch to slow down*)
		hg1_sig_slip_fal: REAL:=0.0;
			(*hg1 clutch signal for slipping fall*)
		hg2_sig_slip_fal: REAL:=0.0;
			(*hg2 clutch signal for slipping fall*)
		pre_hg1_dig_clut: BOOL:=FALSE;
			(*preselect hg1 digital clutch*)
		pre_hg2_dig_clut: BOOL:=FALSE;
			(*preselect hg2 digital clutch*)
	END_VAR
	VAR_OUTPUT
		hg1_anal_sig_win: REAL:=0.0;
			(*hg1 analog signal winch*)
		hg2_anal_sig_win: REAL:=0.0;
			(*hg2 analog signal winch*)
		anal_sig_clutch: REAL:=0.0;
			(*analog signal clutch*)
		pou_start_fallin: BOOL:=FALSE;
			(*pounder starts falling*)
		hg1_lock_trimot: BOOL:=FALSE;
			(*hg1 lock trimot*)
		hg2_lock_trimot: BOOL:=FALSE;
			(*hg2 lock trimot*)
		en_hg1_dig_clut: BOOL:=FALSE;
			(*enable hg1 digital clutch*)
		en_hg2_dig_clut: BOOL:=FALSE;
			(*enable hg2 digital clutch*)
		set_pou_fallin: BOOL:=FALSE;
			(*set pounder falling*)
	END_VAR
	VAR 
		LXhg1PouToRope: BOOL:=FALSE;
		LXhg2PouToRope: BOOL:=FALSE;
		LXhg1PouOnRope: BOOL:=FALSE;
		LXhg2PouOnRope: BOOL:=FALSE;
		LXhg1SlipFall: BOOL:=FALSE;
		LXhg2SlipFall: BOOL:=FALSE;
		LXhg1FreeFall: BOOL:=FALSE;
		LXhg2FreeFall: BOOL:=FALSE;
		LXhg1SlowDown: BOOL:=FALSE;
		LXhg2SlowDown: BOOL:=FALSE;
		LDhg1pouToRopSig: REAL:=0.0;
		LDhg2pouToRopSig: REAL:=0.0;
		RS1: RS;
		RS2: RS;
		RS3: RS;
		RS4: RS;
		RS5: RS;
		RS6: RS;
		RS7: RS;
		RS8: RS;
		RS9: RS;
		RS10: RS;
		RS11: RS;
		RS12: RS;
		RS13: RS;
		TON1: TON;
		TON2: TON;
		Integrator1: Integrator;
	END_VAR
'FBD'
BODY
    WORKSPACE
        NETWORK_LIST_TYPE := NWTYPEFBD ;
        ACTIVE_NETWORK := 0 ;
    END_WORKSPACE
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_COMMENT,,set analog signal of the hoisting winch and the clutch (close) to zero,1,1,27,2,);
B(B_VAROUT,,hg1_anal_sig_win,11,3,13,5,);
B(B_VARIN,,0.0,9,3,11,5,);
B(B_VAROUT,,anal_sig_clutch,11,5,13,7,);
B(B_VAROUT,,hg2_anal_sig_win,11,4,13,6,);
L(11,4,11,6);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 23 ;
        NETWORK_BODY
B(B_COMMENT,,get the pounder to the rope,1,1,27,2,);
B(B_VARIN,,hg2_get_po_to_ro,9,6,11,8,);
B(B_VARIN,,both_winches,9,7,11,9,);
B(B_F,@OR-2,,11,5,16,9,0N);
B(B_VARIN,,hg1_get_po_to_ro,15,3,17,5,);
B(B_FB,RS,RS1,32,4,37,8,);
B(B_VARIN,,LXhg1PouOnRope,14,10,16,12,);
B(B_VARIN,,hg1_active,16,14,18,16,);
B(B_F,@AND-2,,18,8,23,12,N);
B(B_F,@OR-2,,25,8,30,12,);
B(B_F,@AND-2,,18,4,23,8,);
B(B_F,@AND-2,,18,12,23,16,NN);
B(B_F,@AND-2,,39,7,44,11,N);
B(B_FB,RS,RS2,46,4,51,8,);
B(B_F,@OR-2,,31,11,36,15,N);
B(B_VARIN,,hg1_brake,29,12,31,14,);
B(B_VARIN,,hg1_active,29,13,31,15,);
B(B_F,sel,,31,17,36,22,);
B(B_VARIN,,hg1_fast_speed,29,18,31,20,);
B(B_VARIN,,60.0,29,19,31,21,);
B(B_VARIN,,33.0,29,20,31,22,);
B(B_F,sel,,39,15,44,20,);
B(B_VAROUT,,hg1_anal_sig_win,44,16,46,18,);
B(B_VARIN,,hg1_anal_sig_win,35,15,37,17,);
B(B_VAROUT,,hg1_lock_trimot,38,12,40,14,);
B(B_VAROUT,,LXhg1PouToRope,51,5,53,7,);
B(B_VAROUT,,LDhg1pouToRopSig,37,20,39,22,);
L(17,6,18,6);
L(31,7,31,10);
L(31,7,32,7);
L(24,11,25,11);
L(24,11,24,14);
L(17,4,17,14);
L(16,11,18,11);
L(17,10,18,10);
L(23,10,25,10);
L(30,10,31,10);
L(16,7,18,7);
L(23,6,32,6);
L(17,14,18,14);
L(23,14,24,14);
L(37,10,39,10);
L(38,9,39,9);
L(45,7,46,7);
L(45,7,45,9);
L(44,9,45,9);
L(37,6,46,6);
L(37,10,37,13);
L(36,13,37,13);
L(36,19,39,19);
L(37,18,39,18);
L(37,16,37,18);
L(38,17,39,17);
L(38,6,38,17);
L(37,19,37,21);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 21 ;
        NETWORK_BODY
B(B_F,@AND-2,,18,2,23,6,);
B(B_VARIN,,hg1_get_po_to_ro,9,4,11,6,);
B(B_VARIN,,both_winches,9,5,11,7,);
B(B_F,@OR-2,,11,3,16,7,0N);
B(B_VARIN,,hg2_get_po_to_ro,15,1,17,3,);
B(B_FB,RS,RS3,32,2,37,6,);
B(B_F,@AND-2,,18,6,23,10,N);
B(B_VARIN,,LXhg2PouOnRope,14,8,16,10,);
B(B_VARIN,,hg2_active,16,12,18,14,);
B(B_F,@OR-2,,25,6,30,10,);
B(B_F,@AND-2,,18,10,23,14,NN);
B(B_F,@AND-2,,39,5,44,9,N);
B(B_FB,RS,RS4,46,2,51,6,);
B(B_F,@OR-2,,31,9,36,13,N);
B(B_VARIN,,hg2_brake,29,10,31,12,);
B(B_VARIN,,hg2_active,29,11,31,13,);
B(B_F,sel,,31,15,36,20,);
B(B_VARIN,,hg2_fast_speed,29,16,31,18,);
B(B_VARIN,,60.0,29,17,31,19,);
B(B_VARIN,,33.0,29,18,31,20,);
B(B_F,sel,,39,13,44,18,);
B(B_VARIN,,hg2_anal_sig_win,35,13,37,15,);
B(B_VAROUT,,hg2_anal_sig_win,44,14,46,16,);
B(B_VAROUT,,hg2_lock_trimot,38,10,40,12,);
B(B_VAROUT,,LXhg2PouToRope,51,3,53,5,);
B(B_VAROUT,,LDhg2pouToRopSig,37,18,39,20,);
L(17,4,18,4);
L(16,5,18,5);
L(31,5,31,8);
L(31,5,32,5);
L(23,4,32,4);
L(17,8,18,8);
L(16,9,18,9);
L(17,2,17,12);
L(24,9,24,12);
L(24,9,25,9);
L(23,8,25,8);
L(30,8,31,8);
L(17,12,18,12);
L(23,12,24,12);
L(38,7,39,7);
L(45,5,46,5);
L(45,5,45,7);
L(44,7,45,7);
L(37,4,46,4);
L(37,8,39,8);
L(37,8,37,11);
L(36,11,37,11);
L(36,17,39,17);
L(37,16,39,16);
L(37,14,37,16);
L(38,15,39,15);
L(38,4,38,15);
L(37,17,37,19);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 18 ;
        NETWORK_BODY
B(B_F,sel,,27,3,32,8,);
B(B_VAROUT,,anal_sig_clutch,32,4,34,6,);
B(B_VARIN,,anal_sig_clutch,25,5,27,7,);
B(B_F,@OR-2,,20,1,25,5,);
B(B_VARIN,,LXhg1PouToRope,18,2,20,4,);
B(B_VARIN,,LXhg2PouToRope,18,3,20,5,);
B(B_F,sel,,20,7,25,12,);
B(B_F,sel,,13,8,18,13,);
B(B_VARIN,,hg1_active,11,9,13,11,);
B(B_VARIN,,both_winches,17,6,19,8,);
B(B_VARIN,,hg1_clu_sig_ptro,9,11,11,13,);
B(B_VARIN,,hg2_clu_sig_ptro,10,10,12,12,);
B(B_F,min-2,,13,13,18,17,);
L(25,3,26,3);
L(26,3,26,5);
L(26,5,27,5);
L(25,9,26,9);
L(26,7,26,9);
L(26,7,27,7);
L(19,7,19,9);
L(19,9,20,9);
L(18,10,20,10);
L(12,11,13,11);
L(11,12,13,12);
L(12,11,12,15);
L(11,16,13,16);
L(11,12,11,16);
L(19,11,19,15);
L(19,11,20,11);
L(12,15,13,15);
L(18,15,19,15);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 20 ;
        NETWORK_BODY
B(B_COMMENT,,lift the pounder to the given hight,1,1,27,2,);
B(B_F,@OR-2,,11,5,16,9,0N);
B(B_VARIN,,hg2_poun_on_rope,9,6,11,8,);
B(B_VARIN,,both_winches,9,7,11,9,);
B(B_F,@AND-2,,18,8,23,12,N);
B(B_F,@AND-2,,18,4,23,8,);
B(B_VARIN,,hg1_poun_on_rope,15,3,17,5,);
B(B_F,@AND-2,,18,12,23,16,NN);
B(B_VARIN,,hg1_active,16,14,18,16,);
B(B_F,@OR-2,,25,8,30,12,);
B(B_FB,RS,RS5,32,4,37,8,);
B(B_VAROUT,,LXhg1PouOnRope,38,5,40,7,);
B(B_VARIN,,LXhg1SlipFall,9,10,11,12,);
B(B_VARIN,,LXhg1FreeFall,9,11,11,13,);
B(B_VAROUT,,hg1_anal_sig_win,51,12,53,14,);
B(B_F,sel,,46,11,51,16,);
B(B_F,sel,,39,12,44,17,);
B(B_VARIN,,hg1_anal_sig_win,37,14,39,16,);
B(B_VARIN,,LDhg1pouToRopSig,37,15,39,17,);
B(B_VARIN,,100.0,43,17,45,19,);
B(B_FB,TON,TON1,39,8,44,12,);
B(B_VARIN,,T#0.6s,35,10,37,12,);
B(B_F,@OR-2,,11,9,16,13,);
L(17,10,18,10);
L(17,6,18,6);
L(16,7,18,7);
L(23,14,24,14);
L(17,14,18,14);
L(17,4,17,14);
L(23,10,25,10);
L(24,11,25,11);
L(24,11,24,14);
L(31,7,32,7);
L(37,6,38,6);
L(31,7,31,10);
L(30,10,31,10);
L(23,6,32,6);
L(45,13,46,13);
L(45,10,45,13);
L(44,14,46,14);
L(45,15,45,18);
L(45,15,46,15);
L(44,10,45,10);
L(38,10,39,10);
L(37,11,39,11);
L(38,6,38,14);
L(38,14,39,14);
L(16,11,18,11);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 18 ;
        NETWORK_BODY
B(B_F,@OR-2,,11,3,16,7,0N);
B(B_VARIN,,hg1_poun_on_rope,9,4,11,6,);
B(B_VARIN,,both_winches,9,5,11,7,);
B(B_F,@AND-2,,18,2,23,6,);
B(B_VARIN,,hg2_poun_on_rope,15,1,17,3,);
B(B_F,@AND-2,,18,6,23,10,N);
B(B_F,@AND-2,,18,10,23,14,NN);
B(B_VARIN,,hg2_active,16,12,18,14,);
B(B_F,@OR-2,,25,6,30,10,);
B(B_FB,RS,RS6,32,2,37,6,);
B(B_VAROUT,,LXhg2PouOnRope,38,3,40,5,);
B(B_VARIN,,LXhg2SlipFall,9,8,11,10,);
B(B_VARIN,,LXhg2FreeFall,9,9,11,11,);
B(B_F,sel,,46,9,51,14,);
B(B_F,sel,,39,10,44,15,);
B(B_VARIN,,LDhg2pouToRopSig,37,13,39,15,);
B(B_VARIN,,100.0,43,15,45,17,);
B(B_FB,TON,TON2,39,6,44,10,);
B(B_VARIN,,T#0.6s,35,8,37,10,);
B(B_VARIN,,hg2_anal_sig_win,37,12,39,14,);
B(B_VAROUT,,hg2_anal_sig_win,51,10,53,12,);
B(B_F,@OR-2,,11,7,16,11,);
L(17,4,18,4);
L(16,5,18,5);
L(17,8,18,8);
L(23,12,24,12);
L(17,12,18,12);
L(23,8,25,8);
L(24,9,25,9);
L(24,9,24,12);
L(17,2,17,12);
L(23,4,32,4);
L(37,4,38,4);
L(30,8,31,8);
L(31,5,31,8);
L(31,5,32,5);
L(45,11,46,11);
L(45,8,45,11);
L(44,12,46,12);
L(45,13,45,16);
L(45,13,46,13);
L(44,8,45,8);
L(38,8,39,8);
L(37,9,39,9);
L(38,12,39,12);
L(38,4,38,12);
L(16,9,18,9);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 15 ;
        NETWORK_BODY
B(B_FB,Integrator,Integrator1,26,8,35,14,);
B(B_F,sel,,17,9,22,14,);
B(B_VARIN,,0.0,15,12,17,14,);
B(B_VARIN,,10000.0,24,11,26,13,);
B(B_VARIN,,50.0,24,12,26,14,);
B(B_VAROUT,,anal_sig_clutch,40,4,42,6,);
B(B_F,sel,,35,3,40,8,);
B(B_VARIN,,anal_sig_clutch,13,5,15,7,);
B(B_F,@OR-2,,11,1,16,5,);
B(B_VARIN,,LXhg2PouOnRope,9,3,11,5,);
B(B_VARIN,,LXhg1PouOnRope,9,2,11,4,);
B(B_VARIN,,TRUE,24,9,26,11,);
L(22,11,26,11);
L(34,5,35,5);
L(34,3,34,5);
L(35,7,35,10);
L(15,12,17,12);
L(15,6,35,6);
L(15,6,15,12);
L(16,3,34,3);
L(16,11,17,11);
L(16,3,16,11);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_COMMENT,,begin of pounder falling,1,1,27,2,);
B(B_F,@OR-4,,11,3,16,9,);
B(B_VARIN,,hg2_slippin_fall,9,7,11,9,);
B(B_VARIN,,hg1_slippin_fall,9,6,11,8,);
B(B_VARIN,,hg1_free_fall,9,4,11,6,);
B(B_VARIN,,hg2_free_fall,9,5,11,7,);
B(B_VARIN,,both_winches,15,9,17,11,);
B(B_F,@AND-2,,18,3,23,7,);
B(B_VAROUT,,set_pou_fallin,23,4,25,6,);
L(16,5,18,5);
L(17,6,17,10);
L(17,6,18,6);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 14 ;
        NETWORK_BODY
B(B_COMMENT,,slipping fall in the beginning of the fall,1,1,27,2,);
B(B_VARIN,,both_winches,9,7,11,9,);
B(B_F,@AND-2,,18,8,23,12,N);
B(B_FB,RS,RS7,25,4,30,8,);
B(B_VARIN,,hg1_slippin_fall,15,3,17,5,);
B(B_VARIN,,hg2_slippin_fall,9,6,11,8,);
B(B_VARIN,,LXhg1FreeFall,9,10,11,12,);
B(B_F,@OR-2,,11,9,16,13,);
B(B_VARIN,,LXhg1SlowDown,9,11,11,13,);
B(B_VAROUT,,LXhg1SlipFall,30,5,32,7,);
B(B_F,@OR-2,,11,5,16,9,0N);
B(B_F,@AND-2,,18,4,23,8,);
L(17,10,18,10);
L(16,11,18,11);
L(24,7,25,7);
L(24,7,24,10);
L(17,4,17,10);
L(23,10,24,10);
L(16,7,18,7);
L(17,6,18,6);
L(23,6,25,6);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_VARIN,,both_winches,9,5,11,7,);
B(B_F,@AND-2,,18,6,23,10,N);
B(B_VARIN,,hg2_slippin_fall,15,1,17,3,);
B(B_VARIN,,hg1_slippin_fall,9,4,11,6,);
B(B_VARIN,,LXhg2FreeFall,9,8,11,10,);
B(B_F,@OR-2,,11,7,16,11,);
B(B_VARIN,,LXhg2SlowDown,9,9,11,11,);
B(B_FB,RS,RS8,25,2,30,6,);
B(B_VAROUT,,LXhg2SlipFall,30,3,32,5,);
B(B_F,@AND-2,,18,2,23,6,);
B(B_F,@OR-2,,11,3,16,7,0N);
L(17,8,18,8);
L(16,9,18,9);
L(24,5,25,5);
L(24,5,24,8);
L(23,8,24,8);
L(17,2,17,8);
L(17,4,18,4);
L(23,4,25,4);
L(16,5,18,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_VAROUT,,anal_sig_clutch,23,4,25,6,);
B(B_F,sel,,18,3,23,8,);
B(B_VARIN,,anal_sig_clutch,16,5,18,7,);
B(B_F,@OR-2,,11,1,16,5,);
B(B_VARIN,,LXhg2SlipFall,9,3,11,5,);
B(B_VARIN,,LXhg1SlipFall,9,2,11,4,);
B(B_F,sel,,11,7,16,12,);
B(B_VARIN,,hg1_sig_slip_fal,9,10,11,12,);
B(B_VARIN,,hg2_sig_slip_fal,9,9,11,11,);
B(B_VARIN,,hg1_active,9,8,11,10,);
L(17,5,18,5);
L(16,3,17,3);
L(17,3,17,5);
L(16,9,17,9);
L(17,7,17,9);
L(17,7,18,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,set starts falling for the automatic,1,1,27,2,);
B(B_F,@OR-2,,18,3,23,7,N);
B(B_VARIN,,both_winches,16,4,18,6,);
B(B_F,@AND-2,,11,6,16,10,);
B(B_VARIN,,hg1_slippin_fall,9,7,11,9,);
B(B_VARIN,,hg2_slippin_fall,9,8,11,10,);
B(B_VAROUT,,pou_start_fallin,23,4,25,6,);
L(16,8,17,8);
L(17,6,17,8);
L(17,6,18,6);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_COMMENT,,free fall,1,1,27,2,);
B(B_F,@AND-2,,18,8,23,12,N);
B(B_VARIN,,LXhg1SlowDown,14,10,16,12,);
B(B_FB,RS,RS9,25,4,30,8,);
B(B_VARIN,,hg1_free_fall,15,3,17,5,);
B(B_VARIN,,hg2_free_fall,9,6,11,8,);
B(B_VARIN,,both_winches,9,7,11,9,);
B(B_VAROUT,,LXhg1FreeFall,30,5,32,7,);
B(B_F,@AND-2,,18,4,23,8,);
B(B_F,@OR-2,,11,5,16,9,0N);
L(17,10,18,10);
L(16,11,18,11);
L(24,7,25,7);
L(24,7,24,10);
L(17,4,17,10);
L(23,10,24,10);
L(17,6,18,6);
L(23,6,25,6);
L(16,7,18,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_F,@AND-2,,18,6,23,10,N);
B(B_VARIN,,LXhg2SlowDown,14,8,16,10,);
B(B_FB,RS,RS10,25,2,30,6,);
B(B_VARIN,,hg2_free_fall,15,1,17,3,);
B(B_VARIN,,hg1_free_fall,9,4,11,6,);
B(B_VARIN,,both_winches,9,5,11,7,);
B(B_VAROUT,,LXhg2FreeFall,30,3,32,5,);
B(B_F,@AND-2,,18,2,23,6,);
B(B_F,@OR-2,,11,3,16,7,0N);
L(17,8,18,8);
L(16,9,18,9);
L(24,5,25,5);
L(24,5,24,8);
L(17,2,17,8);
L(23,8,24,8);
L(17,4,18,4);
L(23,4,25,4);
L(16,5,18,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_F,sel,,18,3,23,8,);
B(B_VARIN,,anal_sig_clutch,16,5,18,7,);
B(B_VARIN,,100.0,16,6,18,8,);
B(B_VAROUT,,anal_sig_clutch,23,4,25,6,);
B(B_F,@OR-2,,11,1,16,5,);
B(B_VARIN,,LXhg2FreeFall,9,3,11,5,);
B(B_VARIN,,LXhg1FreeFall,9,2,11,4,);
L(17,5,18,5);
L(16,3,17,3);
L(17,3,17,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 14 ;
        NETWORK_BODY
B(B_COMMENT,,slow down fall,1,1,27,2,);
B(B_F,@OR-2,,13,5,18,9,0N);
B(B_F,@AND-2,,20,4,25,8,);
B(B_FB,RS,RS11,27,4,32,8,);
B(B_VARIN,,hg1_slow_down,17,3,19,5,);
B(B_F,@AND-2,,20,8,25,12,N);
B(B_F,@OR-2,,13,9,18,13,NN);
B(B_VARIN,,both_winches,9,7,11,9,);
B(B_VARIN,,hg2_slow_down,10,6,12,8,);
B(B_VAROUT,,LXhg1SlowDown,32,5,34,7,);
L(19,6,20,6);
L(18,7,20,7);
L(26,7,27,7);
L(25,6,27,6);
L(26,7,26,10);
L(19,4,19,10);
L(12,7,13,7);
L(11,8,13,8);
L(12,7,12,11);
L(12,11,13,11);
L(11,8,11,12);
L(11,12,13,12);
L(19,10,20,10);
L(18,11,20,11);
L(25,10,26,10);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_F,@OR-2,,13,3,18,7,0N);
B(B_F,@AND-2,,20,2,25,6,);
B(B_FB,RS,RS12,27,2,32,6,);
B(B_VARIN,,hg2_slow_down,17,1,19,3,);
B(B_VARIN,,both_winches,9,5,11,7,);
B(B_VARIN,,hg1_slow_down,10,4,12,6,);
B(B_F,@AND-2,,20,6,25,10,N);
B(B_F,@OR-2,,13,7,18,11,NN);
B(B_VAROUT,,LXhg2SlowDown,32,3,34,5,);
L(19,4,20,4);
L(18,5,20,5);
L(26,5,27,5);
L(25,4,27,4);
L(19,2,19,8);
L(26,5,26,8);
L(11,6,13,6);
L(12,9,13,9);
L(11,6,11,10);
L(11,10,13,10);
L(19,8,20,8);
L(18,9,20,9);
L(25,8,26,8);
L(12,5,13,5);
L(12,5,12,9);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_VAROUT,,anal_sig_clutch,23,4,25,6,);
B(B_F,sel,,18,3,23,8,);
B(B_VARIN,,anal_sig_clutch,16,5,18,7,);
B(B_VARIN,,sig_slip_clutch,16,6,18,8,);
B(B_F,@OR-2,,11,1,16,5,);
B(B_VARIN,,LXhg2SlowDown,9,3,11,5,);
B(B_VARIN,,LXhg1SlowDown,9,2,11,4,);
L(17,5,18,5);
L(16,3,17,3);
L(17,3,17,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 21 ;
        NETWORK_BODY
B(B_COMMENT,,oprn/close digital clutch,1,1,27,2,);
B(B_F,@AND-2,,11,2,16,6,0N);
B(B_F,@AND-2,,11,16,16,20,0N);
B(B_VARIN,,pre_hg1_dig_clut,8,3,10,5,);
B(B_VAROUT,,en_hg1_dig_clut,30,3,32,5,);
B(B_F,@AND-3,,11,6,16,11,);
B(B_F,@AND-3,,11,11,16,16,NN);
B(B_VARIN,,both_winches,6,4,8,6,);
B(B_VARIN,,pre_hg2_dig_clut,5,17,7,19,);
B(B_FB,RS,RS13,18,6,23,10,);
B(B_F,@OR-2,,25,2,30,6,);
B(B_F,@OR-2,,25,15,30,19,);
B(B_VAROUT,,en_hg2_dig_clut,30,16,32,18,);
L(8,19,11,19);
L(8,5,11,5);
L(10,4,11,4);
L(9,9,11,9);
L(16,18,25,18);
L(10,8,11,8);
L(7,18,11,18);
L(8,5,8,19);
L(8,10,11,10);
L(9,9,9,18);
L(10,4,10,13);
L(10,13,11,13);
L(9,14,11,14);
L(8,15,11,15);
L(16,8,18,8);
L(16,13,17,13);
L(17,9,18,9);
L(17,9,17,13);
L(16,4,25,4);
L(23,8,24,8);
L(24,5,25,5);
L(24,5,24,17);
L(24,17,25,17);
        END_NETWORK_BODY
    END_NET_WORK
END_BODY
END_FUNCTION_BLOCK

FUNCTION_BLOCK ADhgHightLimV010
	VAR_INPUT 
		preselected: BOOL:=FALSE;
			(*sg limitation preselected*)
		rope_lenght: REAL:=0.0;
			(*rope lenght [m]*)
		max_hg_speed: REAL:=0.0;
			(*maximum hg speed [m/min]*)
		upper_limit: REAL:=0.0;
			(*hg upper limitation [m]*)
		lower_limit: REAL:=0.0;
			(*hg lower limitation [m]*)
		int_time_dn: REAL:=0.0;
			(*integration time down*)
		analog_signal: REAL:=0.0;
			(*analog signal before reduction*)
	END_VAR
	VAR_OUTPUT
		reduct_signal: REAL:=0.0;
			(*reduction signal*)
		hg_stop_lifting: BOOL:=FALSE;
			(*hg stop lifting*)
		hg_stop_lowering: BOOL:=FALSE;
			(*hg stop lowering*)
		hg_stop_lift_sym: BOOL:=FALSE;
			(*hg stop lifting symbol*)
		hg_stop_low_sym: BOOL:=FALSE;
			(*hg stop lowering symbol*)
	END_VAR
	VAR 
		LXinitOk: BOOL:=FALSE;
		LDanalogSig: REAL:=0.0;
		LDuppBrakePoint: REAL:=0.0;
		LDlowBrakePoint: REAL:=0.0;
		LDstopDistance: REAL:=0.0;
		LDredSigLift: REAL:=0.0;
		LDredSigLower: REAL:=0.0;
	END_VAR
'FBD'
BODY
    WORKSPACE
        NETWORK_LIST_TYPE := NWTYPEFBD ;
        ACTIVE_NETWORK := 0 ;
    END_WORKSPACE
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_F,not,,11,3,16,6,);
B(B_COMMENT,,exit program when limitation not active,1,1,27,2,);
B(B_JUMP,,exit,16,4,18,6,);
B(B_VARIN,,preselected,9,4,11,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_COMMENT,,init first time,1,1,27,2,);
B(B_VARIN,,LXinitOk,9,4,11,6,);
B(B_F,not,,11,3,16,6,);
B(B_JUMP,,init,16,4,18,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_F,limit,,16,2,22,7,);
B(B_VAROUT,,LDanalogSig,22,3,24,5,);
B(B_VARIN,,-1.0,14,1,16,3,);
B(B_VARIN,,1.0,14,7,16,9,);
B(B_VARIN,,analog_signal,9,4,11,6,);
B(B_F,@DIV,,11,3,16,7,);
B(B_VARIN,,100.0,9,5,11,7,);
L(16,6,16,8);
L(16,2,16,4);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 20 ;
        NETWORK_BODY
B(B_COMMENT,,calculation of the stopping distance [m] and brake points,1,1,27,2,);
B(B_VARIN,,60.0,9,12,11,14,);
B(B_VARIN,,max_hg_speed,9,11,11,13,);
B(B_F,@DIV,,11,15,16,19,);
B(B_COMMENT,,sek,7,14,11,15,);
B(B_VARIN,,2.0,21,14,23,16,);
B(B_VAROUT,,LDstopDistance,29,11,31,13,);
B(B_F,@SUB,,30,6,35,10,);
B(B_F,@SUB,,30,2,35,6,);
B(B_VARIN,,upper_limit,28,3,30,5,);
B(B_VAROUT,,LDuppBrakePoint,35,3,37,5,);
B(B_F,@DIV,,24,10,29,14,);
B(B_F,@MUL-2,,17,10,22,14,);
B(B_F,@DIV,,11,10,16,14,);
B(B_COMMENT,,m,18,9,20,10,);
B(B_COMMENT,,m/min,7,9,11,10,);
B(B_VARIN,,lower_limit,26,7,28,9,);
B(B_VARIN,,int_time_dn,9,17,11,19,);
B(B_VARIN,,100.0,9,16,11,18,);
B(B_VAROUT,,LDlowBrakePoint,35,7,37,9,);
L(17,13,17,17);
L(16,17,17,17);
L(23,13,24,13);
L(23,13,23,15);
L(29,9,30,9);
L(29,5,30,5);
L(29,5,29,12);
L(28,8,30,8);
L(22,12,24,12);
L(16,12,17,12);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 17 ;
        NETWORK_BODY
B(B_COMMENT,,calculate reduction signal liftting~ stop and symbol control,1,1,27,2,);
B(B_F,GPkx_dV010,,11,5,20,14,);
B(B_VARIN,,1.0,9,12,11,14,);
B(B_VARIN,,0.0,9,11,11,13,);
B(B_VARIN,,0.0,9,7,11,9,);
B(B_VARIN,,1.0,9,9,11,11,);
B(B_VARIN,,upper_limit,9,8,11,10,);
B(B_VARIN,,LDuppBrakePoint,9,6,11,8,);
B(B_F,@SUB,,22,4,27,8,);
B(B_VARIN,,1.0,20,5,22,7,);
B(B_VARIN,,rope_lenght,9,10,11,12,);
B(B_VAROUT,,LDredSigLift,27,5,29,7,);
B(B_F,EQ_R,,28,7,33,11,);
B(B_VARIN,,0.0,24,9,26,11,);
B(B_F,@LT-2,,28,11,33,15,);
B(B_VARIN,,LDanalogSig,26,13,28,15,);
B(B_F,@OR-2,,34,10,39,14,);
B(B_VAROUT,,hg_stop_lifting,34,8,36,10,);
B(B_VAROUT,,hg_stop_lift_sym,39,11,41,13,);
B(B_COMMENT,,wenn Red. Signal kleiner ist ø^als Analogvorgabe ,34,14,46,16,);
L(20,7,22,7);
L(27,6,27,13);
L(27,13,28,13);
L(26,10,28,10);
L(27,9,28,9);
L(34,9,34,12);
L(33,9,34,9);
L(33,13,34,13);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 19 ;
        NETWORK_BODY
B(B_COMMENT,,calculate reduction signal lowering~ stop and symbol control,1,1,27,2,);
B(B_F,GPkx_dV010,,19,5,28,14,);
B(B_VARIN,,1.0,17,12,19,14,);
B(B_VARIN,,0.0,17,11,19,13,);
B(B_VARIN,,0.0,17,7,19,9,);
B(B_VARIN,,1.0,17,9,19,11,);
B(B_F,@SUB,,30,4,35,8,);
B(B_VARIN,,1.0,28,5,30,7,);
B(B_VARIN,,LDlowBrakePoint,17,6,19,8,);
B(B_VAROUT,,LDredSigLower,35,5,37,7,);
B(B_F,EQ_R,,36,8,41,12,);
B(B_VARIN,,0.0,32,10,34,12,);
B(B_F,@LT-2,,36,12,41,16,);
B(B_F,@MUL-2,,30,13,35,17,);
B(B_VARIN,,-1.0,28,15,30,17,);
B(B_VARIN,,LDanalogSig,28,14,30,16,);
B(B_F,@OR-2,,41,11,46,15,);
B(B_VAROUT,,hg_stop_lowering,41,9,43,11,);
B(B_VAROUT,,hg_stop_low_sym,46,12,48,14,);
B(B_COMMENT,,wenn Red. Signal kleiner ist ø^als Analogvorgabe ,36,16,48,18,);
B(B_VARIN,,lower_limit,17,8,19,10,);
B(B_F,@MUL-2,,11,10,16,14,);
B(B_VARIN,,-1.0,9,12,11,14,);
B(B_VARIN,,rope_lenght,9,11,11,13,);
L(28,7,30,7);
L(35,14,36,14);
L(34,11,36,11);
L(35,10,36,10);
L(35,15,36,15);
L(41,10,41,13);
L(35,6,35,14);
L(16,11,16,12);
L(16,11,19,11);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,calculate reduction signal ,1,1,27,2,);
B(B_VARIN,,analog_signal,9,4,11,6,);
B(B_F,@LT-2,,11,3,16,7,);
B(B_VARIN,,0.0,9,5,11,7,);
B(B_F,sel,,16,5,21,10,);
B(B_VARIN,,LDredSigLift,14,7,16,9,);
B(B_VARIN,,LDredSigLower,14,8,16,10,);
B(B_VAROUT,,reduct_signal,21,6,23,8,);
L(16,5,16,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,exit programm,1,1,27,2,);
B(B_VARIN,,TRUE,9,3,11,5,);
B(B_RETURN,,,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL := exit: ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_VARIN,,1.0,9,3,11,5,);
B(B_VAROUT,,reduct_signal,11,3,13,5,);
B(B_COMMENT,,exit hoisting limitation,1,1,27,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_VARIN,,FALSE,9,1,11,3,);
B(B_VAROUT,,hg_stop_lowering,11,1,13,3,);
B(B_VAROUT,,hg_stop_low_sym,11,2,13,4,);
B(B_VAROUT,,hg_stop_lifting,11,3,13,5,);
B(B_VAROUT,,hg_stop_lift_sym,11,4,13,6,);
L(11,2,11,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,exit programm,1,1,27,2,);
B(B_VARIN,,TRUE,9,3,11,5,);
B(B_RETURN,,,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL := init: ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,init hoisting limitation,1,1,27,2,);
B(B_VARIN,,TRUE,9,3,11,5,);
B(B_VAROUT,,LXinitOk,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
END_BODY
END_FUNCTION_BLOCK

FUNCTION_BLOCK ADlmlScaleInV100
(*name of author: Manfred Schapler
version: 1.0
date: 04/97
modification:*)
(*name of author: Manfred Schapler
date: 04/97
modification:*)
	VAR_INPUT 
		ixLmlDeactive: BOOL:=FALSE;
			(*lml single sensor (excavator mode)*)
		ixSingleSenScale: BOOL:=FALSE;
			(*lml single sensor (excavator mode)*)
		ixFixedJib: BOOL:=FALSE;
			(*lml mode fixed jib*)
		ixLuffingJib: BOOL:=FALSE;
			(*lml mode luffing jib*)
		ixDerrick: BOOL:=FALSE;
			(*lml mode derrick*)
		iwLoadBoomLeft: UINT:=0;
			(*load sensor main boom left*)
		iwLoadBoomRight: UINT:=0;
			(*load sensor main boom right*)
		iwAngleBoomPivPi: UINT:=0;
			(*angle sensor main boom pivot piece*)
		iwAngleBoomHead: UINT:=0;
			(*angle sensor main boom head*)
		iwLoadBoStabLeft: UINT:=0;
			(*load sensor main boom stabilisation left*)
		iwLoadBoStabRigh: UINT:=0;
			(*load sensor main boom stabilisation right*)
		iwLoadJibLeft: UINT:=0;
			(*load sensor luffing jib left*)
		iwLoadJibRight: UINT:=0;
			(*load sensor luffing jib right*)
		iwAngleJibPivPi: UINT:=0;
			(*angle sensor luffing jib pivot piece*)
		iwAngleJibHead: UINT:=0;
			(*angle sensor luffing jib head*)
		iwPressJibStab1: UINT:=0;
			(*pressure 1 fall back support luffing jib*)
		iwPressJibStab2: UINT:=0;
			(*pressure 2 fall back support luffing jib*)
		iwWindSpeedBoom: UINT:=0;
			(*wind speed sensor main boom*)
		iwWindSpeedJib: UINT:=0;
			(*wind speed sensor jib*)
		iwLoadDerrLeft: UINT:=0;
			(*load sensor derrick left*)
		iwLoadDerrRight: UINT:=0;
			(*load sensor derrick right*)
		iwLoadDerBalLeft: UINT:=0;
			(*laod sensor derrick ballast left*)
		iwLoadDerBalRigh: UINT:=0;
			(*laod sensor derrick ballast right*)
		ixDevLoadBoom: BOOL:=FALSE;
			(*deviation load sensors main boom*)
		ixDevAngleBoom: BOOL:=FALSE;
			(*deviation angle sensors main boom*)
		ixDevLoadBoStab: BOOL:=FALSE;
			(*deviation load sensors main boom stabilisation*)
		ixDevLoadLuJib: BOOL:=FALSE;
			(*deviation load sensors luffing jib*)
		ixDevAngleLuJib: BOOL:=FALSE;
			(*deviation angle sensors luffing jib*)
		ixDevLoadDerrick: BOOL:=FALSE;
			(*deviation load sensors derrick*)
		ixDevLoadDerrBal: BOOL:=FALSE;
			(*deviation load sensors derrick ballast*)
		ixLmlStarted: BOOL:=FALSE;
			(*lml was calculated for at least one time*)
		ixEngStarterActi: BOOL:=FALSE;
			(*engine starter activated*)
		irScalFactLoadBo: REAL:=0.0;
			(*scale factor load sensors boom*)
		ixWindSpeedSen: BOOL:=FALSE;
			(*wind speed sensor activated*)
	END_VAR
	VAR_OUTPUT
		qrPressLuJibStab: REAL:=0.0;
			(*pressure fall back support luffing jib*)
		qrBoomLoadLeft: REAL:=0.0;
			(*load sensor main boom - A-frame left*)
		qrBoomLoadRight: REAL:=0.0;
			(*load sensor main boom - A-frame right*)
		qrLoadAFrame: REAL:=0.0;
			(*load main boom for A-frame pressure*)
		qrWindSpeed: REAL:=0.0;
			(*wind speed*)
		qxErrKmlAFrame: BOOL:=FALSE;
			(*load sensor error main boom for A-frame pressure*)
		qxErrKmlBoomLeft: BOOL:=FALSE;
			(*load sensor error main boom left*)
		qxErrKmlBoomRigh: BOOL:=FALSE;
			(*load sensor error main boom right*)
		qxErrKmsStabLeft: BOOL:=FALSE;
			(*load sensor error main boom stabilisation left*)
		qxErrKmsStabRigh: BOOL:=FALSE;
			(*load sensor error main boom stabilisation right*)
		qxErrKmlJibLeft: BOOL:=FALSE;
			(*load sensor error luffing jib left*)
		qxErrKmlJibRight: BOOL:=FALSE;
			(*load sensor error luffing jib right*)
		qxErrKmlDerrLeft: BOOL:=FALSE;
			(*load sensor error derrick left*)
		qxErrKmlDerrRigh: BOOL:=FALSE;
			(*load sensor error derrick right*)
		qxErrKmlDeBaLeft: BOOL:=FALSE;
			(*load sensor error derrick ballast left*)
		qxErrKmlDeBaRigh: BOOL:=FALSE;
			(*load sensor error derrick ballast right*)
		qxErrAngBomPivPi: BOOL:=FALSE;
			(*angle sensor error main boom pivot piece*)
		qxErrAngBoomHead: BOOL:=FALSE;
			(*angle sensor error main boom head*)
		qxErrAngJibPivPi: BOOL:=FALSE;
			(*angle sensor error luffing jib pivot piece*)
		qxErrAngJibHead: BOOL:=FALSE;
			(*angle sensor error luffing jib head*)
		qxWindSpeedWarn: BOOL:=FALSE;
			(*wind speed high warning*)
		qxWindSpeedToHig: BOOL:=FALSE;
			(*wind speed to high*)
		qxErrPressSenJib: BOOL:=FALSE;
			(*pressure sensor error fall back support luffing jib*)
		qxPressJibStaLow: BOOL:=FALSE;
			(*pressure fall back support luffing jib too low*)
	END_VAR
	VAR_EXTERNAL CONSTANT
		MSG_WARNING: UINT:=0;
			(* message priority: "warning" *)
		MSG_ERROR: UINT:=0;
			(* message priority: "error" *)
	END_VAR
	VAR_EXTERNAL CONSTANT RETAIN
		CDlmlLuJPreDevia: REAL:=0.0;
			(*lml maximum deviation of the luffin jib pressure sensors*)
		CDminPresRFST3LJ: REAL:=0.0;
			(*minimum pressure of the fall back support of the luffing jib*)
	END_VAR
	VAR 
		LXinitOk: BOOL:=FALSE;
		LXaFrameOnlyLeft: BOOL:=FALSE;
		LXpresLJibDeviat: BOOL:=FALSE;
		LXpressLuJib1Err: BOOL:=FALSE;
		LXpressLuJib2Err: BOOL:=FALSE;
		LXmaBoMissing: BOOL:=FALSE;
		LXluJiMissing: BOOL:=FALSE;
		LXkmlMaBoLeShort: BOOL:=FALSE;
		LXkmlMaBoLeBreak: BOOL:=FALSE;
		LXkmlMaBoLeWaLow: BOOL:=FALSE;
		LXkmlMaBoLeFail: BOOL:=FALSE;
		LXkmlMaBoRiShort: BOOL:=FALSE;
		LXkmlMaBoRiBreak: BOOL:=FALSE;
		LXkmlMaBoRiWaLow: BOOL:=FALSE;
		LXkmlMaBoRiFail: BOOL:=FALSE;
		LXangMaBoLoShort: BOOL:=FALSE;
		LXangMaBoLoBreak: BOOL:=FALSE;
		LXangMaBoLoWaLow: BOOL:=FALSE;
		LXangMaBoLoFail: BOOL:=FALSE;
		LXangMaBoToShort: BOOL:=FALSE;
		LXangMaBoToBreak: BOOL:=FALSE;
		LXangMaBoToWaLow: BOOL:=FALSE;
		LXangMaBoToFail: BOOL:=FALSE;
		LXkmlLuJiLeShort: BOOL:=FALSE;
		LXkmlLuJiLeBreak: BOOL:=FALSE;
		LXkmlLuJiLeWaLow: BOOL:=FALSE;
		LXkmlLuJiLeFail: BOOL:=FALSE;
		LXkmlLuJiRiShort: BOOL:=FALSE;
		LXkmlLuJiRiBreak: BOOL:=FALSE;
		LXkmlLuJiRiWaLow: BOOL:=FALSE;
		LXkmlLuJiRiFail: BOOL:=FALSE;
		LXangLuJiLoShort: BOOL:=FALSE;
		LXangLuJiLoBreak: BOOL:=FALSE;
		LXangLuJiLoWaLow: BOOL:=FALSE;
		LXangLuJiLoFail: BOOL:=FALSE;
		LXangLuJiToShort: BOOL:=FALSE;
		LXangLuJiToBreak: BOOL:=FALSE;
		LXangLuJiToWaLow: BOOL:=FALSE;
		LXangLuJiToFail: BOOL:=FALSE;
		LXkmlDerrLeShort: BOOL:=FALSE;
		LXkmlDerrLeBreak: BOOL:=FALSE;
		LXkmlDerrLeWaLow: BOOL:=FALSE;
		LXkmlDerrLeFail: BOOL:=FALSE;
		LXkmlDerrRiShort: BOOL:=FALSE;
		LXkmlDerrRiBreak: BOOL:=FALSE;
		LXkmlDerrRiWaLow: BOOL:=FALSE;
		LXkmlDerrRiFail: BOOL:=FALSE;
		LXkmlDeBaLeShort: BOOL:=FALSE;
		LXkmlDeBaLeBreak: BOOL:=FALSE;
		LXkmlDeBaLeWaLow: BOOL:=FALSE;
		LXkmlDeBaLeFail: BOOL:=FALSE;
		LXkmlDeBaRiShort: BOOL:=FALSE;
		LXkmlDeBaRiBreak: BOOL:=FALSE;
		LXkmlDeBaRiWaLow: BOOL:=FALSE;
		LXkmlDeBaRiFail: BOOL:=FALSE;
		LXpreLuJi1Short: BOOL:=FALSE;
		LXpreLuJi1Break: BOOL:=FALSE;
		LXpreLuJi1WaLow: BOOL:=FALSE;
		LXpreLuJi2Short: BOOL:=FALSE;
		LXpreLuJi2Break: BOOL:=FALSE;
		LXpreLuJi2WaLow: BOOL:=FALSE;
		LXkmsStabLeShort: BOOL:=FALSE;
		LXkmsStabLeBreak: BOOL:=FALSE;
		LXkmsStabLeWaLow: BOOL:=FALSE;
		LXkmsStabLeFail: BOOL:=FALSE;
		LXkmsStabRiShort: BOOL:=FALSE;
		LXkmsStabRiBreak: BOOL:=FALSE;
		LXkmsStabRiWaLow: BOOL:=FALSE;
		LXkmsStabRiFail: BOOL:=FALSE;
		LXwinSpMaBoShort: BOOL:=FALSE;
		LXwinSpMaBoBreak: BOOL:=FALSE;
		LXwinSpMaBoWaLow: BOOL:=FALSE;
		LXwinSpLuJiShort: BOOL:=FALSE;
		LXwinSpLuJiBreak: BOOL:=FALSE;
		LXwinSpLuJiWaLow: BOOL:=FALSE;
		LRpressure1: REAL:=0.0;
		LRpressure2: REAL:=0.0;
		LRmaxLoadLeft: REAL:=0.0;
		LRmaxLoadRight: REAL:=0.0;
		LRmaxWindSpeed: REAL:=0.0;
		LTsensorSafeTime: TIME:=T#0s;
		TON1: TON;
		TON2: TON;
		TON3: TON;
		TOF1: TOF;
		CorrValue_Real1: CorrValue_Real;
		CorrValue_Real2: CorrValue_Real;
		ScaleAIfail1: ScaleAIfail;
		ScaleAIfail2: ScaleAIfail;
		ScaleAIfail3: ScaleAIfail;
		ScaleAIfail4: ScaleAIfail;
		ScaleAIfail5: ScaleAIfail;
		ScaleAIfail6: ScaleAIfail;
		ScaleAIfail7: ScaleAIfail;
		ScaleAIfail8: ScaleAIfail;
		ScaleAIfail9: ScaleAIfail;
		ScaleAIfail10: ScaleAIfail;
		ScaleAIfail11: ScaleAIfail;
		ScaleAIfail12: ScaleAIfail;
		ScaleAIfail13: ScaleAIfail;
		ScaleAIfail14: ScaleAIfail;
		ScaleAIfail15: ScaleAIfail;
		ScaleAIfail16: ScaleAIfail;
		ScaleAIfail17: ScaleAIfail;
		ScaleAIfail18: ScaleAIfail;
		SR1: SR;
		SR2: SR;
		SR3: SR;
		SR4: SR;
		SR5: SR;
		SR6: SR;
		SR7: SR;
		SR8: SR;
		SR9: SR;
		SR10: SR;
		SR11: SR;
		SR12: SR;
		SR13: SR;
		SR14: SR;
		SR15: SR;
		SR16: SR;
		SR17: SR;
		SR18: SR;
		SR19: SR;
		SR20: SR;
		SR21: SR;
		SR22: SR;
		MessageOW1: MsgRealReal;
		MessageOW2: MsgRealReal;
		MessageOW3: MsgRealReal;
		MessageOW4: MsgRealReal;
		MessageOW5: MsgRealReal;
		MessageOW6: MsgRealReal;
		MessageOW7: MsgRealReal;
		MessageOW8: MsgRealReal;
		MessageOW9: MsgRealReal;
		MessageOW10: MsgRealReal;
		MessageOW11: MsgRealReal;
		MessageOW12: MsgRealReal;
		MessageOW13: MsgRealReal;
		MessageOW14: MsgRealReal;
		MessageOW15: MsgRealReal;
		MessageOW16: MsgRealReal;
		MessageOW17: MsgRealReal;
		MessageOW18: MsgRealReal;
		MessageMB1: MsgRealReal;
		MessageMB2: MsgRealReal;
		MessageMB3: MsgRealReal;
		MessageMB5: MsgRealReal;
		MessageMB6: MsgRealReal;
		MessageMB7: MsgRealReal;
		MessageMB8: MsgRealReal;
		MessageMB9: MsgRealReal;
		MessageMB10: MsgRealReal;
		MessageMB11: MsgRealReal;
		MessageMB12: MsgRealReal;
		MessageMB13: MsgRealReal;
		MessageMB14: MsgRealReal;
		MessageMB15: MsgRealReal;
		MessageMB16: MsgRealReal;
		MessageMB17: MsgRealReal;
		MessageLJ1: MsgRealReal;
		MessageLJ2: MsgRealReal;
		MessageLJ3: MsgRealReal;
		MessageLJ4: MsgRealReal;
		MessageLJ5: MsgRealReal;
		MessageLJ6: MsgRealReal;
		MessageLJ7: MsgRealReal;
		MessageLJ8: MsgRealReal;
		MessageLJ9: MsgRealReal;
		MessageLJ10: MsgRealReal;
		MessageLJ11: MsgRealReal;
		MessageLJ12: MsgRealReal;
		MessageLJ13: MsgRealReal;
		MessageLJ14: MsgRealReal;
		MessageLJ15: MsgRealReal;
		MessageLJ16: MsgRealReal;
		MessageLJ17: MsgRealReal;
		MessageLJ18: MsgRealReal;
		MessageLJ19: MsgRealReal;
		MessageLJ20: MsgRealReal;
		MessageLJ21: MsgRealReal;
		MessageLJ22: MsgRealReal;
		MessageLJ23: MsgRealReal;
		MessageLJ24: MsgRealReal;
		MessageLJ25: MsgRealReal;
		MessageLJ26: MsgRealReal;
		MessageLJ27: MsgRealReal;
		MessageLJ28: MsgRealReal;
		MessageLJ29: MsgRealReal;
		MessageDe1: MsgRealReal;
		MessageDe2: MsgRealReal;
		MessageDe3: MsgRealReal;
		MessageDe4: MsgRealReal;
		MessageDe5: MsgRealReal;
		MessageDe6: MsgRealReal;
		MessageDe7: MsgRealReal;
		MessageDe8: MsgRealReal;
		MessageDe9: MsgRealReal;
		MessageDe10: MsgRealReal;
		MessageDe11: MsgRealReal;
		MessageDe12: MsgRealReal;
		MessageDe13: MsgRealReal;
		MessageDe14: MsgRealReal;
		MessageDe15: MsgRealReal;
		MessageDe16: MsgRealReal;
		MessageDe17: MsgRealReal;
		MessageDe18: MsgRealReal;
	END_VAR
'FBD'
BODY
    WORKSPACE
        NETWORK_LIST_TYPE := NWTYPEFBD ;
        ACTIVE_NETWORK := 0 ;
    END_WORKSPACE
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_COMMENT,,init first time,1,1,27,2,);
B(B_VARIN,,LXinitOk,9,4,11,6,);
B(B_F,not,,11,3,16,6,);
B(B_JUMP,,init,16,4,18,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 24 ;
        NETWORK_BODY
B(B_VARIN,,iwLoadBoomLeft,9,5,11,7,);
B(B_VARIN,,irScalFactLoadBo,9,6,11,8,);
B(B_VARIN,,LTsensorSafeTime,9,7,11,9,);
B(B_VAROUT,,qrBoomLoadLeft,24,5,26,7,);
B(B_VAROUT,,qxErrKmlBoomLeft,47,9,49,11,);
B(B_F,@OR-4,,42,8,47,14,);
B(B_COMMENT,,scale boom sensor for a-frame pressure,1,1,27,2,);
B(B_VAROUT,,LXkmlMaBoLeShort,41,15,43,17,);
B(B_VAROUT,,LXkmlMaBoLeBreak,40,16,42,18,);
B(B_VAROUT,,LXkmlMaBoLeWaLow,39,17,41,19,);
B(B_VAROUT,,LXkmlMaBoLeFail,38,21,40,23,);
B(B_FB,ScaleAIfail,ScaleAIfail1,11,4,24,11,);
B(B_F,@AND-2,,27,16,32,20,0N);
B(B_FB,SR,SR1,32,16,37,20,0N);
B(B_VARIN,,ixEngStarterActi,22,18,24,20,);
L(24,10,25,10);
L(24,9,26,9);
L(24,8,27,8);
L(24,7,28,7);
L(28,7,28,10);
L(27,8,27,14);
L(26,9,26,18);
L(25,10,25,22);
L(41,10,41,16);
L(40,11,40,17);
L(40,11,42,11);
L(39,12,42,12);
L(38,13,42,13);
L(38,13,38,22);
L(37,18,39,18);
L(39,12,39,18);
L(28,10,42,10);
L(27,14,40,14);
L(25,22,38,22);
L(26,18,27,18);
L(32,19,32,21);
L(26,21,32,21);
L(26,18,26,21);
L(24,19,27,19);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_COMMENT,,signal load sensors main boom for A-Frame cylinder pressure limit,1,1,27,2,);
B(B_VARIN,,qxErrKmlBoomLeft,9,5,11,7,);
B(B_F,@AND-2,,11,3,16,7,);
B(B_VARIN,,qxErrKmlBoomRigh,9,9,11,11,);
B(B_F,@OR-2,,16,3,21,7,);
B(B_VAROUT,,qxErrKmlAFrame,21,4,23,6,);
B(B_COMMENT,,kml_err_a_frameø^ACHTUNG: Die Verknüpfung dieses Merkers istø^abhängig von der Statik und Hydraulik des A-Bockesø^(bzw. der A-Bockzylinder) !!!,17,7,38,11,);
B(B_VARIN,,ixSingleSenScale,9,4,11,6,);
B(B_F,@AND-3,,11,7,16,12,00N);
B(B_VARIN,,ixSingleSenScale,9,10,11,12,);
L(11,6,11,9);
L(16,6,16,9);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 18 ;
        NETWORK_BODY
B(B_F,sel,,23,4,28,9,);
B(B_F,sel,,18,5,23,10,);
B(B_VARIN,,qxErrKmlBoomLeft,16,4,18,6,);
B(B_F,@ADD-2,,13,6,18,10,);
B(B_F,@MUL-2,,13,10,18,14,);
B(B_F,@MUL-2,,18,13,23,17,);
B(B_VARIN,,qrBoomLoadRight,10,7,12,9,);
B(B_VARIN,,qrBoomLoadLeft,9,8,11,10,);
B(B_VARIN,,2.0,11,15,13,17,);
B(B_VARIN,,qxErrKmlBoomRigh,16,3,18,5,);
B(B_F,@OR-2,,18,1,23,5,);
B(B_VARIN,,ixSingleSenScale,16,2,18,4,);
B(B_VAROUT,,qrLoadAFrame,28,5,30,7,);
L(18,5,18,7);
L(18,9,18,12);
L(23,8,23,15);
L(12,8,12,12);
L(12,12,13,12);
L(12,8,13,8);
L(11,9,13,9);
L(11,9,11,15);
L(11,15,18,15);
L(13,13,13,16);
L(13,16,18,16);
L(23,3,23,6);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_F,@GT-2,,13,1,18,5,);
B(B_F,sel,,18,4,23,9,);
B(B_VARIN,,LRmaxLoadLeft,9,3,11,5,);
B(B_VARIN,,qrBoomLoadLeft,10,2,12,4,);
B(B_VAROUT,,LRmaxLoadLeft,23,5,25,7,);
L(18,3,18,6);
L(12,3,12,8);
L(12,8,18,8);
L(13,7,18,7);
L(12,3,13,3);
L(13,4,13,7);
L(11,4,13,4);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_F,sel,,11,1,16,6,N);
B(B_VAROUT,,LRmaxLoadLeft,16,2,18,4,);
B(B_VARIN,,0.0,9,4,11,6,);
B(B_VARIN,,LRmaxLoadLeft,9,3,11,5,);
B(B_VARIN,,ixDevLoadBoom,9,2,11,4,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 51 ;
        NETWORK_BODY
B(B_F,@AND-3,,33,33,38,38,);
B(B_F,@AND-3,,33,43,38,48,);
B(B_F,@GT-2,,35,2,40,6,);
B(B_F,@AND-2,,42,1,47,5,);
B(B_F,@AND-2,,42,5,47,9,);
B(B_F,@OR-2,,49,1,54,5,);
B(B_F,sel,,56,6,61,11,);
B(B_F,@AND-3,,33,26,38,31,NN);
B(B_VAROUT,,qrWindSpeed,61,7,63,9,);
B(B_VARIN,,ixLuffingJib,17,37,19,39,);
B(B_VARIN,,ixFixedJib,17,36,19,38,);
B(B_F,@OR-2,,19,35,24,39,);
B(B_F,@AND-3,,33,38,38,43,);
B(B_COMMENT,,wind speed,1,1,27,2,);
B(B_F,@AND-2,,33,15,38,19,);
B(B_F,@AND-2,,33,19,38,23,);
B(B_VARIN,,40.0,9,15,11,17,);
B(B_VARIN,,iwWindSpeedJib,9,14,11,16,);
B(B_VARIN,,40.0,9,7,11,9,);
B(B_VARIN,,iwWindSpeedBoom,9,6,11,8,);
B(B_VARIN,,LTsensorSafeTime,9,8,11,10,);
B(B_VARIN,,LTsensorSafeTime,9,16,11,18,);
B(B_FB,ScaleAIfail,ScaleAIfail2,11,5,24,12,);
B(B_FB,ScaleAIfail,ScaleAIfail3,11,13,24,20,);
B(B_F,@AND-4,,41,23,46,29,000N);
B(B_F,@AND-2,,40,38,45,42,0N);
B(B_FB,SR,SR3,45,38,50,42,0N);
B(B_F,@AND-2,,40,19,45,23,0N);
B(B_FB,SR,SR2,45,19,50,23,0N);
B(B_VAROUT,,LXwinSpMaBoShort,38,16,40,18,);
B(B_VARIN,,ixEngStarterActi,37,48,39,50,);
B(B_VAROUT,,LXwinSpMaBoWaLow,50,20,52,22,);
B(B_VAROUT,,LXwinSpMaBoBreak,46,24,48,26,);
B(B_VAROUT,,LXwinSpLuJiWaLow,50,39,52,41,);
B(B_VAROUT,,LXwinSpLuJiBreak,40,44,42,46,);
B(B_VAROUT,,LXwinSpLuJiShort,40,34,42,36,);
B(B_VARIN,,ixWindSpeedSen,23,24,25,26,);
B(B_VARIN,,ixLmlStarted,23,31,25,33,);
L(24,9,31,9);
L(28,36,33,36);
L(27,46,33,46);
L(32,18,32,45);
L(32,8,32,17);
L(31,9,31,26);
L(28,16,28,36);
L(33,4,33,15);
L(27,17,27,46);
L(32,35,33,35);
L(32,45,33,45);
L(24,37,33,37);
L(30,47,33,47);
L(40,4,42,4);
L(41,3,42,3);
L(41,7,42,7);
L(47,7,48,7);
L(48,4,48,7);
L(48,4,49,4);
L(47,3,49,3);
L(55,8,56,8);
L(55,3,55,8);
L(54,3,55,3);
L(33,4,35,4);
L(34,5,34,9);
L(34,5,35,5);
L(34,9,56,9);
L(33,10,56,10);
L(27,28,33,28);
L(28,29,33,29);
L(24,7,34,7);
L(24,8,42,8);
L(24,15,33,15);
L(24,16,28,16);
L(24,17,27,17);
L(41,3,41,11);
L(30,11,41,11);
L(30,11,30,37);
L(24,10,29,10);
L(24,18,26,18);
L(29,10,29,21);
L(30,30,33,30);
L(30,37,30,47);
L(32,40,33,40);
L(26,41,33,41);
L(26,18,26,41);
L(30,42,33,42);
L(32,17,33,17);
L(32,18,33,18);
L(29,21,33,21);
L(32,22,33,22);
L(40,27,40,32);
L(40,27,41,27);
L(38,28,41,28);
L(31,26,41,26);
L(32,25,41,25);
L(39,41,40,41);
L(45,41,45,43);
L(38,43,45,43);
L(38,40,38,43);
L(39,22,39,49);
L(38,40,40,40);
L(45,22,45,23);
L(38,23,45,23);
L(38,21,38,23);
L(39,22,40,22);
L(38,21,40,21);
L(38,45,40,45);
L(38,35,40,35);
L(25,25,32,25);
L(25,32,40,32);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 24 ;
        NETWORK_BODY
B(B_VARIN,,LRmaxWindSpeed,9,17,11,19,);
B(B_F,@GT-2,,13,15,18,19,);
B(B_F,@AND-2,,23,10,28,14,);
B(B_VARIN,,20.0,14,13,16,15,);
B(B_F,@GT-2,,16,11,21,15,);
B(B_VARIN,,16.0,14,8,16,10,);
B(B_F,@GT-2,,16,6,21,10,);
B(B_F,@AND-2,,23,5,28,9,);
B(B_VARIN,,T#3s,30,7,32,9,);
B(B_FB,TON,TON1,32,5,37,9,);
B(B_VAROUT,,qxWindSpeedWarn,37,6,39,8,);
B(B_VARIN,,T#3s,30,12,32,14,);
B(B_FB,TON,TON2,32,10,37,14,);
B(B_VAROUT,,qxWindSpeedToHig,37,11,39,13,);
B(B_VARIN,,ixWindSpeedSen,14,2,16,4,);
B(B_VARIN,,ixFixedJib,14,3,16,5,);
B(B_VARIN,,ixLuffingJib,14,4,16,6,);
B(B_F,@OR-3,,16,1,21,6,);
B(B_VARIN,,qrWindSpeed,9,16,11,18,);
B(B_F,sel,,18,18,23,23,);
B(B_VAROUT,,LRmaxWindSpeed,23,19,25,21,);
L(11,18,11,21);
L(12,17,12,22);
L(11,18,13,18);
L(11,17,13,17);
L(21,13,23,13);
L(21,8,23,8);
L(28,7,32,7);
L(22,3,22,12);
L(22,12,23,12);
L(22,7,23,7);
L(28,12,32,12);
L(21,3,22,3);
L(12,8,12,17);
L(12,13,16,13);
L(12,8,16,8);
L(18,17,18,20);
L(11,21,18,21);
L(12,22,18,22);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_FB,TOF,TOF1,11,2,16,6,);
B(B_VARIN,,T#0.2s,9,4,11,6,);
B(B_VARIN,,qxWindSpeedToHig,9,3,11,5,);
B(B_F,sel,,27,2,32,7,);
B(B_VAROUT,,LRmaxWindSpeed,32,3,34,5,);
B(B_VARIN,,0.0,25,4,27,6,);
B(B_VARIN,,LRmaxWindSpeed,25,5,27,7,);
L(16,4,27,4);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 18 ;
        NETWORK_BODY
B(B_VARIN,,iwAngleBoomPivPi,9,5,11,7,);
B(B_VARIN,,1.0,9,6,11,8,);
B(B_VARIN,,LTsensorSafeTime,9,7,11,9,);
B(B_FB,SR,SR4,31,11,36,15,0N);
B(B_F,@OR-4,,41,5,46,11,);
B(B_VAROUT,,qxErrAngBomPivPi,46,6,48,8,);
B(B_F,@AND-2,,26,11,31,15,0N);
B(B_VARIN,,ixEngStarterActi,22,13,24,15,);
B(B_COMMENT,,check lower main boom angle sensor,1,1,27,2,);
B(B_VAROUT,,LXangMaBoLoShort,40,11,42,13,);
B(B_VAROUT,,LXangMaBoLoBreak,39,12,41,14,);
B(B_VAROUT,,LXangMaBoLoWaLow,38,13,40,15,);
B(B_VAROUT,,LXangMaBoLoFail,37,14,39,16,);
B(B_FB,ScaleAIfail,ScaleAIfail4,11,4,24,11,);
L(31,14,31,16);
L(24,9,25,9);
L(24,7,41,7);
L(24,8,41,8);
L(24,10,41,10);
L(40,7,40,12);
L(39,8,39,13);
L(38,9,38,14);
L(38,9,41,9);
L(37,10,37,15);
L(24,14,26,14);
L(25,13,26,13);
L(25,9,25,16);
L(25,16,31,16);
L(36,13,38,13);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,exit program when lml is not active,1,1,27,2,);
B(B_VARIN,,ixLmlDeactive,9,3,11,5,);
B(B_JUMP,,message,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 18 ;
        NETWORK_BODY
B(B_VARIN,,iwLoadBoStabLeft,9,5,11,7,);
B(B_VARIN,,1.0,9,6,11,8,);
B(B_VARIN,,LTsensorSafeTime,9,7,11,9,);
B(B_FB,SR,SR5,31,11,36,15,0N);
B(B_F,@OR-4,,41,5,46,11,);
B(B_VAROUT,,qxErrKmsStabLeft,46,6,48,8,);
B(B_F,@AND-2,,26,11,31,15,0N);
B(B_VARIN,,ixEngStarterActi,22,13,24,15,);
B(B_COMMENT,,check boom stabilisation load sensor left,1,1,27,2,);
B(B_VAROUT,,LXkmsStabLeShort,40,11,42,13,);
B(B_VAROUT,,LXkmsStabLeBreak,39,12,41,14,);
B(B_VAROUT,,LXkmsStabLeWaLow,38,13,40,15,);
B(B_VAROUT,,LXkmsStabLeFail,37,14,39,16,);
B(B_FB,ScaleAIfail,ScaleAIfail5,11,4,24,11,);
L(31,14,31,16);
L(24,9,25,9);
L(24,7,41,7);
L(24,8,41,8);
L(24,10,41,10);
L(40,7,40,12);
L(39,8,39,13);
L(38,9,38,14);
L(38,9,41,9);
L(36,13,38,13);
L(37,10,37,15);
L(24,14,26,14);
L(25,13,26,13);
L(25,9,25,16);
L(25,16,31,16);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 18 ;
        NETWORK_BODY
B(B_VARIN,,iwLoadBoStabRigh,9,5,11,7,);
B(B_VARIN,,1.0,9,6,11,8,);
B(B_VARIN,,LTsensorSafeTime,9,7,11,9,);
B(B_FB,SR,SR6,31,11,36,15,0N);
B(B_F,@OR-4,,41,5,46,11,);
B(B_VAROUT,,qxErrKmsStabRigh,46,6,48,8,);
B(B_F,@AND-2,,26,11,31,15,0N);
B(B_VARIN,,ixEngStarterActi,22,13,24,15,);
B(B_COMMENT,,check boom stabilisation load sensor right,1,1,27,2,);
B(B_VAROUT,,LXkmsStabRiShort,40,11,42,13,);
B(B_VAROUT,,LXkmsStabRiBreak,39,12,41,14,);
B(B_VAROUT,,LXkmsStabRiWaLow,38,13,40,15,);
B(B_VAROUT,,LXkmsStabRiFail,37,14,39,16,);
B(B_FB,ScaleAIfail,ScaleAIfail6,11,4,24,11,);
L(31,14,31,16);
L(24,9,25,9);
L(24,7,41,7);
L(24,8,41,8);
L(24,10,41,10);
L(40,7,40,12);
L(39,8,39,13);
L(38,9,38,14);
L(38,9,41,9);
L(36,13,38,13);
L(37,10,37,15);
L(24,14,26,14);
L(25,13,26,13);
L(25,9,25,16);
L(25,16,31,16);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_VARIN,,ixSingleSenScale,9,3,11,5,);
B(B_COMMENT,,jump to message when single sensor lml is active,1,1,27,2,);
B(B_JUMP,,message,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 18 ;
        NETWORK_BODY
B(B_VARIN,,iwLoadBoomRight,9,5,11,7,);
B(B_VARIN,,irScalFactLoadBo,9,6,11,8,);
B(B_VARIN,,LTsensorSafeTime,9,7,11,9,);
B(B_FB,SR,SR7,31,11,36,15,0N);
B(B_F,@OR-4,,41,5,46,11,);
B(B_VAROUT,,qxErrKmlBoomRigh,46,6,48,8,);
B(B_F,@AND-2,,26,11,31,15,0N);
B(B_VARIN,,ixEngStarterActi,22,13,24,15,);
B(B_COMMENT,,check main boom sensors,1,1,27,2,);
B(B_VAROUT,,LXkmlMaBoRiShort,40,11,42,13,);
B(B_VAROUT,,LXkmlMaBoRiBreak,39,12,41,14,);
B(B_VAROUT,,LXkmlMaBoRiWaLow,38,13,40,15,);
B(B_VAROUT,,LXkmlMaBoRiFail,37,14,39,16,);
B(B_VAROUT,,qrBoomLoadRight,24,5,26,7,);
B(B_FB,ScaleAIfail,ScaleAIfail7,11,4,24,11,);
L(31,14,31,16);
L(24,9,25,9);
L(24,7,41,7);
L(24,8,41,8);
L(24,10,41,10);
L(40,7,40,12);
L(39,8,39,13);
L(38,9,38,14);
L(38,9,41,9);
L(36,13,38,13);
L(37,10,37,15);
L(24,14,26,14);
L(25,13,26,13);
L(25,9,25,16);
L(25,16,31,16);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_F,@GT-2,,13,1,18,5,);
B(B_F,sel,,18,4,23,9,);
B(B_VARIN,,LRmaxLoadRight,9,3,11,5,);
B(B_VARIN,,qrBoomLoadRight,10,2,12,4,);
B(B_VAROUT,,LRmaxLoadRight,23,5,25,7,);
L(18,3,18,6);
L(12,3,12,8);
L(12,8,18,8);
L(13,7,18,7);
L(12,3,13,3);
L(13,4,13,7);
L(11,4,13,4);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_F,sel,,11,1,16,6,N);
B(B_VARIN,,0.0,9,4,11,6,);
B(B_VARIN,,LRmaxLoadRight,9,3,11,5,);
B(B_VAROUT,,LRmaxLoadRight,16,2,18,4,);
B(B_VARIN,,ixDevLoadBoom,9,2,11,4,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 18 ;
        NETWORK_BODY
B(B_VARIN,,iwAngleBoomHead,9,5,11,7,);
B(B_VARIN,,1.0,9,6,11,8,);
B(B_VARIN,,LTsensorSafeTime,9,7,11,9,);
B(B_FB,SR,SR8,31,11,36,15,0N);
B(B_F,@OR-4,,41,5,46,11,);
B(B_VAROUT,,qxErrAngBoomHead,46,6,48,8,);
B(B_F,@AND-2,,26,11,31,15,0N);
B(B_VARIN,,ixEngStarterActi,22,13,24,15,);
B(B_VAROUT,,LXangMaBoToShort,40,11,42,13,);
B(B_VAROUT,,LXangMaBoToBreak,39,12,41,14,);
B(B_VAROUT,,LXangMaBoToWaLow,38,13,40,15,);
B(B_VAROUT,,LXangMaBoToFail,37,14,39,16,);
B(B_FB,ScaleAIfail,ScaleAIfail8,11,4,24,11,);
L(31,14,31,16);
L(24,9,25,9);
L(24,7,41,7);
L(24,8,41,8);
L(24,10,41,10);
L(40,7,40,12);
L(39,8,39,13);
L(38,9,38,14);
L(38,9,41,9);
L(36,13,38,13);
L(37,10,37,15);
L(24,14,26,14);
L(25,13,26,13);
L(25,9,25,16);
L(25,16,31,16);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_COMMENT,,jump to derrick when luffing jib not enabled,1,1,27,2,);
B(B_JUMP,,derrick,17,4,19,6,);
B(B_F,not,,12,3,17,6,);
B(B_VARIN,,ixLuffingJib,10,4,12,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 18 ;
        NETWORK_BODY
B(B_VARIN,,iwLoadJibLeft,9,5,11,7,);
B(B_VARIN,,1.0,9,6,11,8,);
B(B_VARIN,,LTsensorSafeTime,9,7,11,9,);
B(B_FB,SR,SR9,31,11,36,15,0N);
B(B_F,@OR-4,,41,5,46,11,);
B(B_VAROUT,,qxErrKmlJibLeft,46,6,48,8,);
B(B_F,@AND-2,,26,11,31,15,0N);
B(B_VARIN,,ixEngStarterActi,22,13,24,15,);
B(B_COMMENT,,check luffing jib sensors,1,1,27,2,);
B(B_VAROUT,,LXkmlLuJiLeShort,40,11,42,13,);
B(B_VAROUT,,LXkmlLuJiLeBreak,39,12,41,14,);
B(B_VAROUT,,LXkmlLuJiLeWaLow,38,13,40,15,);
B(B_VAROUT,,LXkmlLuJiLeFail,37,14,39,16,);
B(B_FB,ScaleAIfail,ScaleAIfail9,11,4,24,11,);
L(31,14,31,16);
L(24,9,25,9);
L(24,7,41,7);
L(24,8,41,8);
L(24,10,41,10);
L(40,7,40,12);
L(39,8,39,13);
L(38,9,38,14);
L(38,9,41,9);
L(36,13,38,13);
L(37,10,37,15);
L(24,14,26,14);
L(25,13,26,13);
L(25,9,25,16);
L(25,16,31,16);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 16 ;
        NETWORK_BODY
B(B_VARIN,,iwLoadJibRight,9,3,11,5,);
B(B_VARIN,,1.0,9,4,11,6,);
B(B_VARIN,,LTsensorSafeTime,9,5,11,7,);
B(B_FB,SR,SR10,31,9,36,13,0N);
B(B_F,@OR-4,,41,3,46,9,);
B(B_VAROUT,,qxErrKmlJibRight,46,4,48,6,);
B(B_F,@AND-2,,26,9,31,13,0N);
B(B_VARIN,,ixEngStarterActi,22,11,24,13,);
B(B_VAROUT,,LXkmlLuJiRiShort,40,9,42,11,);
B(B_VAROUT,,LXkmlLuJiRiBreak,39,10,41,12,);
B(B_VAROUT,,LXkmlLuJiRiWaLow,38,11,40,13,);
B(B_VAROUT,,LXkmlLuJiRiFail,37,12,39,14,);
B(B_FB,ScaleAIfail,ScaleAIfail10,11,2,24,9,);
L(31,12,31,14);
L(24,7,25,7);
L(24,5,41,5);
L(24,6,41,6);
L(24,8,41,8);
L(40,5,40,10);
L(39,6,39,11);
L(38,7,38,12);
L(38,7,41,7);
L(36,11,38,11);
L(37,8,37,13);
L(24,12,26,12);
L(25,11,26,11);
L(25,7,25,14);
L(25,14,31,14);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 16 ;
        NETWORK_BODY
B(B_VARIN,,iwAngleJibPivPi,9,3,11,5,);
B(B_VARIN,,1.0,9,4,11,6,);
B(B_VARIN,,LTsensorSafeTime,9,5,11,7,);
B(B_FB,SR,SR11,31,9,36,13,0N);
B(B_F,@OR-4,,41,3,46,9,);
B(B_VAROUT,,qxErrAngJibPivPi,46,4,48,6,);
B(B_F,@AND-2,,26,9,31,13,0N);
B(B_VARIN,,ixEngStarterActi,22,11,24,13,);
B(B_VAROUT,,LXangLuJiLoShort,40,9,42,11,);
B(B_VAROUT,,LXangLuJiLoBreak,39,10,41,12,);
B(B_VAROUT,,LXangLuJiLoWaLow,38,11,40,13,);
B(B_VAROUT,,LXangLuJiLoFail,37,12,39,14,);
B(B_FB,ScaleAIfail,ScaleAIfail11,11,2,24,9,);
L(31,12,31,14);
L(24,7,25,7);
L(24,8,41,8);
L(40,5,40,10);
L(39,6,39,11);
L(38,7,38,12);
L(38,7,41,7);
L(36,11,38,11);
L(37,8,37,13);
L(24,12,26,12);
L(25,11,26,11);
L(25,7,25,14);
L(25,14,31,14);
L(24,5,41,5);
L(24,6,41,6);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 16 ;
        NETWORK_BODY
B(B_VARIN,,iwAngleJibHead,9,3,11,5,);
B(B_VARIN,,1.0,9,4,11,6,);
B(B_VARIN,,LTsensorSafeTime,9,5,11,7,);
B(B_FB,SR,SR12,31,9,36,13,0N);
B(B_F,@OR-4,,41,3,46,9,);
B(B_VAROUT,,qxErrAngJibHead,46,4,48,6,);
B(B_F,@AND-2,,26,9,31,13,0N);
B(B_VARIN,,ixEngStarterActi,22,11,24,13,);
B(B_VAROUT,,LXangLuJiToShort,40,9,42,11,);
B(B_VAROUT,,LXangLuJiToBreak,39,10,41,12,);
B(B_VAROUT,,LXangLuJiToWaLow,38,11,40,13,);
B(B_VAROUT,,LXangLuJiToFail,37,12,39,14,);
B(B_FB,ScaleAIfail,ScaleAIfail12,11,2,24,9,);
L(31,12,31,14);
L(24,7,25,7);
L(24,5,41,5);
L(24,6,41,6);
L(24,8,41,8);
L(40,5,40,10);
L(39,6,39,11);
L(38,7,38,12);
L(38,7,41,7);
L(36,11,38,11);
L(37,8,37,13);
L(24,12,26,12);
L(25,11,26,11);
L(25,7,25,14);
L(25,14,31,14);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 17 ;
        NETWORK_BODY
B(B_COMMENT,,scale pressure sensores fall back support luffing jib,1,1,27,2,);
B(B_FB,SR,SR13,31,10,36,14,0N);
B(B_F,@AND-2,,26,10,31,14,0N);
B(B_VARIN,,ixEngStarterActi,21,12,23,14,);
B(B_VAROUT,,LXpreLuJi1Short,39,11,41,13,);
B(B_VAROUT,,LXpreLuJi1Break,38,12,40,14,);
B(B_VAROUT,,LRpressure1,24,5,26,7,);
B(B_VARIN,,iwPressJibStab1,9,5,11,7,);
B(B_VARIN,,400.0,9,6,11,8,);
B(B_VAROUT,,LXpressLuJib1Err,45,6,47,8,);
B(B_F,@OR-3,,40,5,45,10,);
B(B_VAROUT,,LXpreLuJi1WaLow,37,13,39,15,);
B(B_VARIN,,LTsensorSafeTime,9,7,11,9,);
B(B_FB,ScaleAIfail,ScaleAIfail13,11,4,24,11,);
L(31,13,31,15);
L(25,12,26,12);
L(25,15,31,15);
L(23,13,26,13);
L(38,8,38,13);
L(39,7,39,12);
L(24,7,40,7);
L(37,9,37,14);
L(24,8,40,8);
L(25,9,25,15);
L(24,9,25,9);
L(36,12,37,12);
L(37,9,40,9);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 15 ;
        NETWORK_BODY
B(B_FB,SR,SR14,31,8,36,12,0N);
B(B_F,@AND-2,,26,8,31,12,0N);
B(B_VARIN,,ixEngStarterActi,21,10,23,12,);
B(B_VAROUT,,LXpreLuJi2Short,39,9,41,11,);
B(B_VAROUT,,LXpreLuJi2Break,38,10,40,12,);
B(B_VAROUT,,LRpressure2,24,3,26,5,);
B(B_VARIN,,iwPressJibStab2,9,3,11,5,);
B(B_VARIN,,400.0,9,4,11,6,);
B(B_VAROUT,,LXpressLuJib2Err,45,4,47,6,);
B(B_F,@OR-3,,40,3,45,8,);
B(B_VAROUT,,LXpreLuJi2WaLow,37,11,39,13,);
B(B_VARIN,,LTsensorSafeTime,9,5,11,7,);
B(B_FB,ScaleAIfail,ScaleAIfail14,11,2,24,9,);
L(31,11,31,13);
L(25,10,26,10);
L(25,13,31,13);
L(23,11,26,11);
L(38,6,38,11);
L(39,5,39,10);
L(24,5,40,5);
L(37,7,37,12);
L(24,6,40,6);
L(25,7,25,13);
L(24,7,25,7);
L(37,7,40,7);
L(36,10,37,10);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_F,@SUB,,11,1,16,5,);
B(B_F,abs,,18,1,23,4,);
B(B_F,@GT-2,,25,1,30,5,);
B(B_VARIN,,CDlmlLuJPreDevia,22,4,24,6,);
B(B_FB,TON,TON3,32,1,37,5,);
B(B_VAROUT,,LXpresLJibDeviat,37,2,39,4,);
B(B_VARIN,,T#0.5s,29,5,31,7,);
B(B_VARIN,,LRpressure1,9,2,11,4,);
B(B_VARIN,,LRpressure2,9,3,11,5,);
L(23,3,25,3);
L(24,4,25,4);
L(24,4,24,5);
L(30,3,32,3);
L(31,4,32,4);
L(16,3,18,3);
L(31,4,31,6);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 31 ;
        NETWORK_BODY
B(B_F,sel,,32,16,37,21,);
B(B_F,sel,,40,24,45,29,);
B(B_F,@LT-2,,32,24,37,28,);
B(B_FB,SR,SR17,22,16,27,20,);
B(B_FB,SR,SR16,22,11,27,15,);
B(B_VARIN,,FALSE,19,20,21,22,);
B(B_F,@AND-2,,22,1,27,5,);
B(B_VARIN,,LRpressure2,10,26,12,28,);
B(B_VARIN,,LRpressure1,10,25,12,27,);
B(B_F,@ADD-2,,14,24,19,28,);
B(B_F,@DIV,,22,24,27,28,);
B(B_VARIN,,2.0,20,26,22,28,);
B(B_F,sel,,39,15,44,20,);
B(B_VARIN,,CDminPresRFST3LJ,51,28,53,30,);
B(B_F,@OR-2,,63,1,68,5,);
B(B_F,@LT-2,,54,18,59,22,);
B(B_F,sel,,47,14,52,19,);
B(B_VAROUT,,qrPressLuJibStab,53,15,55,17,);
B(B_FB,SR,SR15,22,6,27,10,);
B(B_VARIN,,FALSE,17,8,19,10,);
B(B_VARIN,,LXpresLJibDeviat,17,7,19,9,);
B(B_F,@XOR-2,,30,8,35,12,);
B(B_F,@AND-2,,37,7,42,11,0N);
B(B_VARIN,,LXpresLJibDeviat,61,22,63,24,);
B(B_F,@OR-3,,63,17,68,22,);
B(B_F,@AND-2,,69,17,74,21,0N);
B(B_VARIN,,LXpressLuJib1Err,17,12,19,14,);
B(B_VARIN,,LXpressLuJib2Err,17,17,19,19,);
B(B_FB,SR,SR18,74,17,79,21,0N);
B(B_VARIN,,ixEngStarterActi,67,23,69,25,);
B(B_VAROUT,,qxPressJibStaLow,79,18,81,20,);
B(B_VAROUT,,qxErrPressSenJib,68,2,70,4,);
L(29,20,32,20);
L(37,26,40,26);
L(31,22,31,26);
L(31,26,32,26);
L(30,27,32,27);
L(30,23,30,27);
L(39,22,39,28);
L(45,26,46,26);
L(46,18,46,26);
L(21,19,22,19);
L(21,14,22,14);
L(21,14,21,21);
L(21,4,21,13);
L(21,4,22,4);
L(20,3,22,3);
L(20,3,20,18);
L(27,18,32,18);
L(38,27,40,27);
L(39,28,40,28);
L(29,20,29,22);
L(28,19,32,19);
L(12,26,14,26);
L(12,27,14,27);
L(13,23,13,27);
L(12,22,12,26);
L(12,22,39,22);
L(13,23,38,23);
L(19,26,22,26);
L(27,26,28,26);
L(28,19,28,26);
L(37,18,39,18);
L(38,17,39,17);
L(38,13,38,17);
L(38,19,39,19);
L(38,19,38,27);
L(53,16,53,20);
L(62,4,62,20);
L(53,21,53,29);
L(62,4,63,4);
L(27,3,63,3);
L(27,13,38,13);
L(46,18,47,18);
L(46,16,47,16);
L(53,21,54,21);
L(53,20,54,20);
L(44,17,47,17);
L(52,16,53,16);
L(46,9,46,16);
L(19,8,22,8);
L(19,9,22,9);
L(28,10,30,10);
L(28,10,28,13);
L(29,11,30,11);
L(29,11,29,18);
L(35,10,37,10);
L(36,9,37,9);
L(36,8,36,9);
L(27,8,36,8);
L(42,9,46,9);
L(59,20,63,20);
L(61,3,61,19);
L(63,21,63,23);
L(61,19,63,19);
L(69,20,69,24);
L(19,13,22,13);
L(19,18,22,18);
L(68,19,69,19);
L(68,19,68,22);
L(68,22,74,22);
L(74,20,74,22);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL := derrick: ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_COMMENT,,jump to message when derrick not enabled,1,1,27,2,);
B(B_F,not,,12,3,17,6,);
B(B_JUMP,,message,17,4,19,6,);
B(B_VARIN,,ixDerrick,10,4,12,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 18 ;
        NETWORK_BODY
B(B_VARIN,,iwLoadDerrLeft,9,5,11,7,);
B(B_VARIN,,1.0,9,6,11,8,);
B(B_VARIN,,LTsensorSafeTime,9,7,11,9,);
B(B_FB,SR,SR19,31,11,36,15,0N);
B(B_F,@OR-4,,41,5,46,11,);
B(B_VAROUT,,qxErrKmlDerrLeft,46,6,48,8,);
B(B_F,@AND-2,,26,11,31,15,0N);
B(B_VARIN,,ixEngStarterActi,22,13,24,15,);
B(B_COMMENT,,scale derrick - main boom sensors,1,1,27,2,);
B(B_VAROUT,,LXkmlDerrLeShort,40,11,42,13,);
B(B_VAROUT,,LXkmlDerrLeBreak,39,12,41,14,);
B(B_VAROUT,,LXkmlDerrLeWaLow,38,13,40,15,);
B(B_VAROUT,,LXkmlDerrLeFail,37,14,39,16,);
B(B_FB,ScaleAIfail,ScaleAIfail15,11,4,24,11,);
L(31,14,31,16);
L(24,9,25,9);
L(24,7,41,7);
L(24,8,41,8);
L(24,10,41,10);
L(40,7,40,12);
L(39,8,39,13);
L(38,9,38,14);
L(38,9,41,9);
L(36,13,38,13);
L(37,10,37,15);
L(24,14,26,14);
L(25,13,26,13);
L(25,9,25,16);
L(25,16,31,16);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 16 ;
        NETWORK_BODY
B(B_VARIN,,iwLoadDerrRight,9,3,11,5,);
B(B_VARIN,,1.0,9,4,11,6,);
B(B_VARIN,,LTsensorSafeTime,9,5,11,7,);
B(B_FB,SR,SR20,31,9,36,13,0N);
B(B_F,@OR-4,,41,3,46,9,);
B(B_VAROUT,,qxErrKmlDerrRigh,46,4,48,6,);
B(B_F,@AND-2,,26,9,31,13,0N);
B(B_VARIN,,ixEngStarterActi,22,11,24,13,);
B(B_VAROUT,,LXkmlDerrRiShort,40,9,42,11,);
B(B_VAROUT,,LXkmlDerrRiBreak,39,10,41,12,);
B(B_VAROUT,,LXkmlDerrRiWaLow,38,11,40,13,);
B(B_VAROUT,,LXkmlDerrRiFail,37,12,39,14,);
B(B_FB,ScaleAIfail,ScaleAIfail16,11,2,24,9,);
L(31,12,31,14);
L(24,7,25,7);
L(24,5,41,5);
L(24,6,41,6);
L(24,8,41,8);
L(40,5,40,10);
L(39,6,39,11);
L(38,7,38,12);
L(38,7,41,7);
L(36,11,38,11);
L(37,8,37,13);
L(24,12,26,12);
L(25,11,26,11);
L(25,7,25,14);
L(25,14,31,14);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 18 ;
        NETWORK_BODY
B(B_VARIN,,iwLoadDerBalLeft,9,5,11,7,);
B(B_VARIN,,1.0,9,6,11,8,);
B(B_VARIN,,LTsensorSafeTime,9,7,11,9,);
B(B_FB,SR,SR21,31,11,36,15,0N);
B(B_F,@OR-4,,41,5,46,11,);
B(B_VAROUT,,qxErrKmlDeBaLeft,46,6,48,8,);
B(B_F,@AND-2,,26,11,31,15,0N);
B(B_VARIN,,ixEngStarterActi,22,13,24,15,);
B(B_COMMENT,,scale derrick ballast sensors,1,1,27,2,);
B(B_VAROUT,,LXkmlDeBaLeShort,40,11,42,13,);
B(B_VAROUT,,LXkmlDeBaLeBreak,39,12,41,14,);
B(B_VAROUT,,LXkmlDeBaLeWaLow,38,13,40,15,);
B(B_VAROUT,,LXkmlDeBaLeFail,37,14,39,16,);
B(B_FB,ScaleAIfail,ScaleAIfail17,11,4,24,11,);
L(31,14,31,16);
L(24,9,25,9);
L(24,7,41,7);
L(24,8,41,8);
L(24,10,41,10);
L(40,7,40,12);
L(39,8,39,13);
L(38,9,38,14);
L(38,9,41,9);
L(36,13,38,13);
L(37,10,37,15);
L(24,14,26,14);
L(25,13,26,13);
L(25,9,25,16);
L(25,16,31,16);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 16 ;
        NETWORK_BODY
B(B_VARIN,,iwLoadDerBalRigh,9,3,11,5,);
B(B_VARIN,,1.0,9,4,11,6,);
B(B_VARIN,,LTsensorSafeTime,9,5,11,7,);
B(B_FB,SR,SR22,31,9,36,13,0N);
B(B_F,@OR-4,,41,3,46,9,);
B(B_VAROUT,,qxErrKmlDeBaRigh,46,4,48,6,);
B(B_F,@AND-2,,26,9,31,13,0N);
B(B_VARIN,,ixEngStarterActi,22,11,24,13,);
B(B_VAROUT,,LXkmlDeBaRiShort,40,9,42,11,);
B(B_VAROUT,,LXkmlDeBaRiBreak,39,10,41,12,);
B(B_VAROUT,,LXkmlDeBaRiWaLow,38,11,40,13,);
B(B_VAROUT,,LXkmlDeBaRiFail,37,12,39,14,);
B(B_FB,ScaleAIfail,ScaleAIfail18,11,2,24,9,);
L(31,12,31,14);
L(24,7,25,7);
L(24,8,41,8);
L(40,5,40,10);
L(39,6,39,11);
L(38,7,38,12);
L(38,7,41,7);
L(36,11,38,11);
L(37,8,37,13);
L(24,12,26,12);
L(25,11,26,11);
L(25,7,25,14);
L(25,14,31,14);
L(24,5,41,5);
L(24,6,41,6);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL := message: ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 30 ;
        NETWORK_BODY
B(B_COMMENT,,messages,1,1,32,2,);
B(B_VARIN,,ixSingleSenScale,20,5,22,7,);
B(B_VARIN,,ixLmlDeactive,20,4,22,6,);
B(B_VAROUT,,LXmaBoMissing,27,4,29,6,);
B(B_COMMENT,,Wenn alle Geber einen Kabelbruch melden~ so wird nur die Meldung ausgegeben~ø^daß der Ausleger fehlt.,28,12,58,14,);
B(B_VARIN,,LXangMaBoLoBreak,20,6,22,8,);
B(B_F,@AND-2,,11,10,16,14,);
B(B_F,@OR-2,,16,10,21,14,0N);
B(B_VARIN,,ixDerrick,14,14,16,16,);
B(B_VARIN,,LXkmlDerrLeBreak,9,11,11,13,);
B(B_VARIN,,LXkmlDerrRiBreak,9,12,11,14,);
B(B_F,@OR-2,,17,15,22,19,N);
B(B_VARIN,,ixLuffingJib,15,16,17,18,);
B(B_VARIN,,LXkmlLuJiLeBreak,10,21,12,23,);
B(B_VARIN,,LXkmlLuJiRiBreak,10,22,12,24,);
B(B_VARIN,,LXangLuJiLoBreak,10,23,12,25,);
B(B_VARIN,,LXangLuJiToBreak,10,24,12,26,);
B(B_VARIN,,ixLuffingJib,10,20,12,22,);
B(B_VARIN,,ixLmlDeactive,10,19,12,21,);
B(B_VAROUT,,LXluJiMissing,17,19,19,21,);
B(B_VARIN,,LXangMaBoToBreak,20,7,22,9,);
B(B_VARIN,,LXpreLuJi2Break,10,26,12,28,);
B(B_VARIN,,LXpreLuJi1Break,10,25,12,27,);
B(B_VARIN,,LXwinSpMaBoBreak,20,8,22,10,);
B(B_F,@AND-7,,22,3,27,12,NN);
B(B_F,@AND-9,,12,18,17,29,N);
B(B_VARIN,,LXwinSpLuJiBreak,10,27,12,29,);
L(16,13,16,15);
L(21,10,21,12);
L(17,18,17,20);
L(21,10,22,10);
L(22,11,22,17);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 38 ;
        NETWORK_BODY
B(B_VARIN,,MSG_ERROR,10,35,12,37,);
B(B_VARIN,,462,20,5,22,7,);
B(B_VARIN,,743,20,13,22,15,);
B(B_VARIN,,745,20,29,22,31,);
B(B_VARIN,,744,20,21,22,23,);
B(B_VARIN,,LXkmlMaBoLeShort,20,6,22,8,);
B(B_VARIN,,LXkmlMaBoLeBreak,20,14,22,16,);
B(B_VARIN,,LXkmlMaBoLeWaLow,20,22,22,24,);
B(B_VARIN,,LXkmlMaBoLeFail,20,30,22,32,);
B(B_VARIN,,464,40,5,42,7,);
B(B_VARIN,,746,40,13,42,15,);
B(B_VARIN,,748,40,29,42,31,);
B(B_VARIN,,747,40,21,42,23,);
B(B_VARIN,,LXkmlMaBoRiShort,40,6,42,8,);
B(B_VARIN,,LXkmlMaBoRiBreak,40,14,42,16,);
B(B_VARIN,,LXkmlMaBoRiWaLow,40,22,42,24,);
B(B_VARIN,,LXkmlMaBoRiFail,40,30,42,32,);
B(B_FB,MsgRealReal,MessageOW3,22,20,31,27,);
B(B_FB,MsgRealReal,MessageOW4,22,28,31,35,);
B(B_FB,MsgRealReal,MessageOW1,22,4,31,11,);
B(B_FB,MsgRealReal,MessageOW2,22,12,31,19,);
B(B_FB,MsgRealReal,MessageOW5,42,4,51,11,);
B(B_FB,MsgRealReal,MessageOW6,42,12,51,19,);
B(B_FB,MsgRealReal,MessageOW7,42,20,51,27,);
B(B_FB,MsgRealReal,MessageOW8,42,28,51,35,);
B(B_COMMENT,,Messages of the superstructure,1,1,27,2,);
L(12,8,22,8);
L(12,16,22,16);
L(12,24,22,24);
L(12,32,22,32);
L(32,8,42,8);
L(32,16,42,16);
L(32,24,42,24);
L(32,32,42,32);
L(32,8,32,36);
L(12,8,12,36);
L(12,36,32,36);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 38 ;
        NETWORK_BODY
B(B_VARIN,,733,20,5,22,7,);
B(B_VARIN,,734,20,13,22,15,);
B(B_VARIN,,736,20,29,22,31,);
B(B_VARIN,,735,20,21,22,23,);
B(B_VARIN,,LXkmsStabLeShort,20,6,22,8,);
B(B_VARIN,,LXkmsStabLeFail,20,30,22,32,);
B(B_VARIN,,LXkmsStabLeBreak,20,14,22,16,);
B(B_VARIN,,LXkmsStabLeWaLow,20,22,22,24,);
B(B_VARIN,,737,40,5,42,7,);
B(B_VARIN,,738,40,13,42,15,);
B(B_VARIN,,740,40,29,42,31,);
B(B_VARIN,,739,40,21,42,23,);
B(B_VARIN,,LXkmsStabRiShort,40,6,42,8,);
B(B_VARIN,,LXkmsStabRiBreak,40,14,42,16,);
B(B_VARIN,,LXkmsStabRiWaLow,40,22,42,24,);
B(B_VARIN,,LXkmsStabRiFail,40,30,42,32,);
B(B_VARIN,,MSG_ERROR,10,35,12,37,);
B(B_COMMENT,,Messages of the main boom stabilisation sensors,1,1,27,2,);
B(B_FB,MsgRealReal,MessageOW9,22,4,31,11,);
B(B_FB,MsgRealReal,MessageOW10,22,12,31,19,);
B(B_FB,MsgRealReal,MessageOW11,22,20,31,27,);
B(B_FB,MsgRealReal,MessageOW12,22,28,31,35,);
B(B_FB,MsgRealReal,MessageOW14,42,12,51,19,);
B(B_FB,MsgRealReal,MessageOW13,42,4,51,11,);
B(B_FB,MsgRealReal,MessageOW15,42,20,51,27,);
B(B_FB,MsgRealReal,MessageOW16,42,28,51,35,);
L(12,8,22,8);
L(12,16,22,16);
L(12,24,22,24);
L(12,32,22,32);
L(32,8,42,8);
L(32,16,42,16);
L(32,24,42,24);
L(32,32,42,32);
L(32,8,32,36);
L(12,8,12,36);
L(12,36,32,36);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 18 ;
        NETWORK_BODY
B(B_FB,MsgRealReal,MessageOW17,22,2,31,9,);
B(B_FB,MsgRealReal,MessageOW18,22,10,31,17,);
B(B_VARIN,,MSG_WARNING,10,5,12,7,);
B(B_VARIN,,ixDevLoadBoom,20,4,22,6,);
B(B_VARIN,,580,20,3,22,5,);
B(B_VARIN,,LRmaxLoadLeft,20,6,22,8,);
B(B_VARIN,,LRmaxLoadRight,20,7,22,9,);
B(B_VARIN,,741,20,11,22,13,);
B(B_VARIN,,ixDevLoadBoStab,20,12,22,14,);
L(12,14,22,14);
L(12,6,22,6);
L(12,6,12,14);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 28 ;
        NETWORK_BODY
B(B_VARIN,,785,27,4,29,6,);
B(B_VARIN,,786,27,12,29,14,);
B(B_VARIN,,788,27,20,29,22,);
B(B_VARIN,,LXluJiMissing,10,6,12,8,);
B(B_F,@AND-2,,14,4,19,8,0N);
B(B_F,@AND-2,,14,12,19,16,N);
B(B_F,@AND-2,,14,20,19,24,);
B(B_VARIN,,LXmaBoMissing,11,5,13,7,);
B(B_FB,MsgRealReal,MessageMB1,29,3,38,10,);
B(B_FB,MsgRealReal,MessageMB2,29,11,38,18,);
B(B_FB,MsgRealReal,MessageMB3,29,19,38,26,);
B(B_VARIN,,MSG_ERROR,27,6,29,8,);
B(B_VARIN,,MSG_ERROR,27,14,29,16,);
B(B_VARIN,,MSG_ERROR,27,22,29,24,);
B(B_COMMENT,,MessageMB4   frei,30,26,38,27,);
B(B_COMMENT,,Messages of the boom sensors,1,1,27,2,);
L(13,6,14,6);
L(12,7,14,7);
L(13,14,14,14);
L(12,15,14,15);
L(13,22,14,22);
L(12,23,14,23);
L(13,6,13,22);
L(12,7,12,23);
L(19,22,29,22);
L(19,14,29,14);
L(19,6,29,6);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 36 ;
        NETWORK_BODY
B(B_F,@AND-2,,47,5,52,9,0N);
B(B_F,@AND-2,,47,13,52,17,0N);
B(B_F,@AND-2,,47,21,52,25,0N);
B(B_F,@AND-2,,47,29,52,33,0N);
B(B_F,@AND-2,,81,5,86,9,0N);
B(B_F,@AND-2,,81,13,86,17,0N);
B(B_F,@AND-2,,14,5,19,9,0N);
B(B_F,@AND-2,,14,13,19,17,0N);
B(B_F,@AND-2,,14,21,19,25,0N);
B(B_F,@AND-2,,14,29,19,33,0N);
B(B_VARIN,,LXmaBoMissing,11,1,13,3,);
B(B_VARIN,,LXangMaBoLoShort,10,6,12,8,);
B(B_VARIN,,LXangMaBoLoBreak,10,14,12,16,);
B(B_VARIN,,LXangMaBoLoWaLow,10,22,12,24,);
B(B_VARIN,,LXangMaBoLoFail,10,30,12,32,);
B(B_FB,MsgRealReal,MessageMB5,27,4,36,11,);
B(B_FB,MsgRealReal,MessageMB6,27,12,36,19,);
B(B_FB,MsgRealReal,MessageMB8,27,28,36,35,);
B(B_FB,MsgRealReal,MessageMB7,27,20,36,27,);
B(B_VARIN,,482,25,5,27,7,);
B(B_VARIN,,773,25,13,27,15,);
B(B_VARIN,,775,25,29,27,31,);
B(B_VARIN,,774,25,21,27,23,);
B(B_VARIN,,MSG_ERROR,25,7,27,9,);
B(B_VARIN,,MSG_ERROR,25,15,27,17,);
B(B_VARIN,,MSG_ERROR,25,23,27,25,);
B(B_VARIN,,MSG_ERROR,25,31,27,33,);
B(B_VARIN,,LXangMaBoToShort,43,6,45,8,);
B(B_VARIN,,LXangMaBoToBreak,43,14,45,16,);
B(B_VARIN,,LXangMaBoToWaLow,43,22,45,24,);
B(B_VARIN,,LXangMaBoToFail,43,30,45,32,);
B(B_FB,MsgRealReal,MessageMB9,60,4,69,11,);
B(B_FB,MsgRealReal,MessageMB10,60,12,69,19,);
B(B_FB,MsgRealReal,MessageMB12,60,28,69,35,);
B(B_FB,MsgRealReal,MessageMB11,60,20,69,27,);
B(B_VARIN,,484,58,5,60,7,);
B(B_VARIN,,776,58,13,60,15,);
B(B_VARIN,,778,58,29,60,31,);
B(B_VARIN,,777,58,21,60,23,);
B(B_VARIN,,MSG_ERROR,58,7,60,9,);
B(B_VARIN,,MSG_ERROR,58,15,60,17,);
B(B_VARIN,,MSG_ERROR,58,23,60,25,);
B(B_VARIN,,MSG_ERROR,58,31,60,33,);
B(B_VARIN,,MSG_ERROR,92,7,94,9,);
B(B_VARIN,,239,92,5,94,7,);
B(B_FB,MsgRealReal,MessageMB13,94,4,103,11,);
B(B_VARIN,,MSG_ERROR,92,15,94,17,);
B(B_VARIN,,789,92,13,94,15,);
B(B_FB,MsgRealReal,MessageMB14,94,12,103,19,);
B(B_VARIN,,LXwinSpMaBoShort,77,6,79,8,);
B(B_VARIN,,LXwinSpMaBoBreak,77,14,79,16,);
B(B_F,@AND-2,,81,21,86,25,0N);
B(B_VARIN,,MSG_ERROR,92,23,94,25,);
B(B_VARIN,,790,92,21,94,23,);
B(B_FB,MsgRealReal,MessageMB15,94,20,103,27,);
B(B_VARIN,,LXwinSpMaBoWaLow,77,22,79,24,);
L(45,7,47,7);
L(45,15,47,15);
L(45,23,47,23);
L(45,31,47,31);
L(46,8,47,8);
L(46,16,47,16);
L(46,24,47,24);
L(46,32,47,32);
L(52,7,60,7);
L(52,15,60,15);
L(52,23,60,23);
L(52,31,60,31);
L(46,2,46,32);
L(79,7,81,7);
L(79,15,81,15);
L(80,8,81,8);
L(80,16,81,16);
L(86,7,94,7);
L(86,15,94,15);
L(12,7,14,7);
L(12,15,14,15);
L(12,23,14,23);
L(12,31,14,31);
L(13,8,14,8);
L(13,16,14,16);
L(13,24,14,24);
L(13,32,14,32);
L(19,7,27,7);
L(19,15,27,15);
L(19,23,27,23);
L(19,31,27,31);
L(13,2,13,32);
L(13,2,80,2);
L(79,23,81,23);
L(80,24,81,24);
L(86,23,94,23);
L(80,2,80,24);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 18 ;
        NETWORK_BODY
B(B_FB,MsgRealReal,MessageMB17,22,10,31,17,);
B(B_VARIN,,2,20,11,22,13,);
B(B_VARIN,,LRmaxWindSpeed,20,14,22,16,);
B(B_VARIN,,qxWindSpeedToHig,20,12,22,14,);
B(B_VARIN,,485,20,3,22,5,);
B(B_VARIN,,ixDevAngleBoom,20,4,22,6,);
B(B_FB,MsgRealReal,MessageMB16,22,2,31,9,);
B(B_VARIN,,MSG_WARNING,10,5,12,7,);
L(12,6,22,6);
L(12,14,22,14);
L(12,6,12,14);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 38 ;
        NETWORK_BODY
B(B_VARIN,,467,24,7,26,9,);
B(B_VARIN,,749,24,15,26,17,);
B(B_VARIN,,MSG_ERROR,24,9,26,11,);
B(B_VARIN,,MSG_ERROR,24,17,26,19,);
B(B_VARIN,,751,24,31,26,33,);
B(B_VARIN,,MSG_ERROR,24,33,26,35,);
B(B_VARIN,,750,24,23,26,25,);
B(B_VARIN,,MSG_ERROR,24,25,26,27,);
B(B_VARIN,,469,57,7,59,9,);
B(B_VARIN,,752,57,15,59,17,);
B(B_VARIN,,MSG_ERROR,57,9,59,11,);
B(B_VARIN,,MSG_ERROR,57,17,59,19,);
B(B_VARIN,,754,57,31,59,33,);
B(B_VARIN,,MSG_ERROR,57,33,59,35,);
B(B_VARIN,,753,57,23,59,25,);
B(B_VARIN,,MSG_ERROR,57,25,59,27,);
B(B_VARIN,,487,90,7,92,9,);
B(B_VARIN,,779,90,15,92,17,);
B(B_VARIN,,MSG_ERROR,90,9,92,11,);
B(B_VARIN,,MSG_ERROR,90,17,92,19,);
B(B_VARIN,,781,90,31,92,33,);
B(B_VARIN,,MSG_ERROR,90,33,92,35,);
B(B_VARIN,,780,90,23,92,25,);
B(B_VARIN,,MSG_ERROR,90,25,92,27,);
B(B_VARIN,,489,123,7,125,9,);
B(B_VARIN,,782,123,15,125,17,);
B(B_VARIN,,MSG_ERROR,123,9,125,11,);
B(B_VARIN,,MSG_ERROR,123,17,125,19,);
B(B_VARIN,,784,123,31,125,33,);
B(B_VARIN,,MSG_ERROR,123,33,125,35,);
B(B_VARIN,,783,123,23,125,25,);
B(B_VARIN,,MSG_ERROR,123,25,125,27,);
B(B_FB,MsgRealReal,MessageLJ1,26,6,35,13,);
B(B_FB,MsgRealReal,MessageLJ2,26,14,35,21,);
B(B_FB,MsgRealReal,MessageLJ4,26,30,35,37,);
B(B_FB,MsgRealReal,MessageLJ3,26,22,35,29,);
B(B_FB,MsgRealReal,MessageLJ5,59,6,68,13,);
B(B_FB,MsgRealReal,MessageLJ6,59,14,68,21,);
B(B_FB,MsgRealReal,MessageLJ8,59,30,68,37,);
B(B_FB,MsgRealReal,MessageLJ7,59,22,68,29,);
B(B_FB,MsgRealReal,MessageLJ9,92,6,101,13,);
B(B_FB,MsgRealReal,MessageLJ10,92,14,101,21,);
B(B_FB,MsgRealReal,MessageLJ12,92,30,101,37,);
B(B_FB,MsgRealReal,MessageLJ11,92,22,101,29,);
B(B_FB,MsgRealReal,MessageLJ13,125,6,134,13,);
B(B_FB,MsgRealReal,MessageLJ14,125,14,134,21,);
B(B_FB,MsgRealReal,MessageLJ16,125,30,134,37,);
B(B_FB,MsgRealReal,MessageLJ15,125,22,134,29,);
B(B_F,@AND-2,,13,7,18,11,0N);
B(B_F,@AND-2,,13,15,18,19,0N);
B(B_F,@AND-2,,13,23,18,27,0N);
B(B_F,@AND-2,,13,31,18,35,0N);
B(B_F,@AND-2,,112,7,117,11,0N);
B(B_F,@AND-2,,112,15,117,19,0N);
B(B_F,@AND-2,,112,23,117,27,0N);
B(B_F,@AND-2,,112,31,117,35,0N);
B(B_F,@AND-2,,79,7,84,11,0N);
B(B_F,@AND-2,,79,15,84,19,0N);
B(B_F,@AND-2,,79,23,84,27,0N);
B(B_F,@AND-2,,79,31,84,35,0N);
B(B_F,@AND-2,,46,7,51,11,0N);
B(B_F,@AND-2,,46,15,51,19,0N);
B(B_F,@AND-2,,46,23,51,27,0N);
B(B_F,@AND-2,,46,31,51,35,0N);
B(B_VARIN,,LXkmlLuJiLeShort,9,8,11,10,);
B(B_VARIN,,LXkmlLuJiLeBreak,9,16,11,18,);
B(B_VARIN,,LXkmlLuJiLeWaLow,9,24,11,26,);
B(B_VARIN,,LXkmlLuJiLeFail,9,32,11,34,);
B(B_VARIN,,LXkmlLuJiRiShort,42,8,44,10,);
B(B_VARIN,,LXkmlLuJiRiBreak,42,16,44,18,);
B(B_VARIN,,LXkmlLuJiRiWaLow,42,24,44,26,);
B(B_VARIN,,LXkmlLuJiRiFail,42,32,44,34,);
B(B_VARIN,,LXangLuJiLoShort,75,8,77,10,);
B(B_VARIN,,LXangLuJiLoBreak,75,16,77,18,);
B(B_VARIN,,LXangLuJiLoWaLow,75,24,77,26,);
B(B_VARIN,,LXangLuJiLoFail,75,32,77,34,);
B(B_VARIN,,LXangLuJiToShort,108,8,110,10,);
B(B_VARIN,,LXangLuJiToBreak,108,16,110,18,);
B(B_VARIN,,LXangLuJiToWaLow,108,24,110,26,);
B(B_VARIN,,LXangLuJiToFail,108,32,110,34,);
B(B_VARIN,,LXluJiMissing,10,3,12,5,);
B(B_COMMENT,,Messages of the luffing jib sensors,1,1,27,2,);
L(11,9,13,9);
L(11,17,13,17);
L(11,25,13,25);
L(11,33,13,33);
L(12,10,13,10);
L(12,18,13,18);
L(12,26,13,26);
L(12,34,13,34);
L(18,9,26,9);
L(18,17,26,17);
L(18,25,26,25);
L(18,33,26,33);
L(12,4,12,34);
L(110,9,112,9);
L(110,17,112,17);
L(110,25,112,25);
L(110,33,112,33);
L(111,10,112,10);
L(111,18,112,18);
L(111,26,112,26);
L(111,34,112,34);
L(117,9,125,9);
L(117,17,125,17);
L(117,25,125,25);
L(117,33,125,33);
L(111,4,111,34);
L(77,9,79,9);
L(77,17,79,17);
L(77,25,79,25);
L(77,33,79,33);
L(78,10,79,10);
L(78,18,79,18);
L(78,26,79,26);
L(78,34,79,34);
L(84,9,92,9);
L(84,17,92,17);
L(84,25,92,25);
L(84,33,92,33);
L(78,4,78,34);
L(44,9,46,9);
L(44,17,46,17);
L(44,25,46,25);
L(44,33,46,33);
L(45,10,46,10);
L(45,18,46,18);
L(45,26,46,26);
L(45,34,46,34);
L(51,9,59,9);
L(51,17,59,17);
L(51,25,59,25);
L(51,33,59,33);
L(45,4,45,34);
L(12,4,111,4);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 28 ;
        NETWORK_BODY
B(B_F,@AND-2,,13,5,18,9,0N);
B(B_F,@AND-2,,13,13,18,17,0N);
B(B_VARIN,,LXluJiMissing,10,1,12,3,);
B(B_VARIN,,LXpreLuJi1Short,9,6,11,8,);
B(B_VARIN,,LXpreLuJi1Break,9,14,11,16,);
B(B_VARIN,,258,24,5,26,7,);
B(B_VARIN,,795,24,13,26,15,);
B(B_VARIN,,MSG_ERROR,24,7,26,9,);
B(B_VARIN,,MSG_ERROR,24,15,26,17,);
B(B_FB,MsgRealReal,MessageLJ17,26,4,35,11,);
B(B_FB,MsgRealReal,MessageLJ18,26,12,35,19,);
B(B_F,@AND-2,,46,5,51,9,0N);
B(B_F,@AND-2,,46,13,51,17,0N);
B(B_VARIN,,LXpreLuJi2Short,42,6,44,8,);
B(B_VARIN,,LXpreLuJi2Break,42,14,44,16,);
B(B_VARIN,,258,57,5,59,7,);
B(B_VARIN,,798,57,13,59,15,);
B(B_VARIN,,MSG_ERROR,57,7,59,9,);
B(B_VARIN,,MSG_ERROR,57,15,59,17,);
B(B_FB,MsgRealReal,MessageLJ20,59,4,68,11,);
B(B_FB,MsgRealReal,MessageLJ21,59,12,68,19,);
B(B_F,@AND-2,,80,5,85,9,0N);
B(B_F,@AND-2,,80,13,85,17,0N);
B(B_VARIN,,MSG_ERROR,91,7,93,9,);
B(B_VARIN,,245,91,5,93,7,);
B(B_FB,MsgRealReal,MessageLJ23,93,4,102,11,);
B(B_VARIN,,MSG_ERROR,91,15,93,17,);
B(B_VARIN,,792,91,13,93,15,);
B(B_FB,MsgRealReal,MessageLJ24,93,12,102,19,);
B(B_VARIN,,LXwinSpLuJiBreak,76,14,78,16,);
B(B_VARIN,,LXwinSpLuJiShort,76,6,78,8,);
B(B_F,@AND-2,,80,21,85,25,0N);
B(B_VARIN,,MSG_ERROR,91,23,93,25,);
B(B_VARIN,,793,91,21,93,23,);
B(B_FB,MsgRealReal,MessageLJ25,93,20,102,27,);
B(B_VARIN,,LXwinSpLuJiWaLow,76,22,78,24,);
B(B_F,@AND-2,,13,21,18,25,0N);
B(B_VARIN,,LXpreLuJi1WaLow,9,22,11,24,);
B(B_VARIN,,796,24,21,26,23,);
B(B_VARIN,,MSG_ERROR,24,23,26,25,);
B(B_FB,MsgRealReal,MessageLJ19,26,20,35,27,);
B(B_F,@AND-2,,46,21,51,25,0N);
B(B_VARIN,,LXpreLuJi2WaLow,42,22,44,24,);
B(B_VARIN,,799,57,21,59,23,);
B(B_VARIN,,MSG_ERROR,57,23,59,25,);
B(B_FB,MsgRealReal,MessageLJ22,59,20,68,27,);
L(11,7,13,7);
L(11,15,13,15);
L(12,8,13,8);
L(12,16,13,16);
L(18,7,26,7);
L(18,15,26,15);
L(44,7,46,7);
L(44,15,46,15);
L(45,8,46,8);
L(45,16,46,16);
L(51,7,59,7);
L(51,15,59,15);
L(78,7,80,7);
L(78,15,80,15);
L(79,8,80,8);
L(79,16,80,16);
L(85,7,93,7);
L(85,15,93,15);
L(78,23,80,23);
L(79,24,80,24);
L(85,23,93,23);
L(79,2,79,24);
L(12,2,79,2);
L(11,23,13,23);
L(12,24,13,24);
L(18,23,26,23);
L(12,2,12,24);
L(44,23,46,23);
L(45,24,46,24);
L(51,23,59,23);
L(45,2,45,24);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 18 ;
        NETWORK_BODY
B(B_FB,MsgRealReal,MessageLJ26,19,2,28,9,);
B(B_VARIN,,470,17,3,19,5,);
B(B_VARIN,,ixDevLoadLuJib,17,4,19,6,);
B(B_FB,MsgRealReal,MessageLJ27,19,10,28,17,);
B(B_VARIN,,490,17,11,19,13,);
B(B_VARIN,,ixDevAngleLuJib,17,12,19,14,);
B(B_VARIN,,MSG_WARNING,7,5,9,7,);
L(9,6,19,6);
L(9,14,19,14);
L(9,6,9,14);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 18 ;
        NETWORK_BODY
B(B_FB,MsgRealReal,MessageLJ28,19,2,28,9,);
B(B_VARIN,,261,17,3,19,5,);
B(B_VARIN,,LXpresLJibDeviat,17,4,19,6,);
B(B_VARIN,,265,17,11,19,13,);
B(B_VARIN,,qxPressJibStaLow,17,12,19,14,);
B(B_VARIN,,MSG_ERROR,7,5,9,7,);
B(B_FB,MsgRealReal,MessageLJ29,19,10,28,17,);
L(9,6,19,6);
L(9,14,19,14);
L(9,6,9,14);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 38 ;
        NETWORK_BODY
B(B_VARIN,,474,58,7,60,9,);
B(B_VARIN,,758,58,15,60,17,);
B(B_VARIN,,MSG_ERROR,58,9,60,11,);
B(B_VARIN,,MSG_ERROR,58,17,60,19,);
B(B_VARIN,,760,58,31,60,33,);
B(B_VARIN,,MSG_ERROR,58,33,60,35,);
B(B_VARIN,,759,58,23,60,25,);
B(B_VARIN,,MSG_ERROR,58,25,60,27,);
B(B_FB,MsgRealReal,MessageDe5,60,6,69,13,);
B(B_FB,MsgRealReal,MessageDe6,60,14,69,21,);
B(B_FB,MsgRealReal,MessageDe8,60,30,69,37,);
B(B_FB,MsgRealReal,MessageDe7,60,22,69,29,);
B(B_VARIN,,472,25,7,27,9,);
B(B_VARIN,,755,25,15,27,17,);
B(B_VARIN,,MSG_ERROR,25,9,27,11,);
B(B_VARIN,,MSG_ERROR,25,17,27,19,);
B(B_VARIN,,757,25,31,27,33,);
B(B_VARIN,,MSG_ERROR,25,33,27,35,);
B(B_VARIN,,756,25,23,27,25,);
B(B_VARIN,,MSG_ERROR,25,25,27,27,);
B(B_FB,MsgRealReal,MessageDe1,27,6,36,13,);
B(B_FB,MsgRealReal,MessageDe2,27,14,36,21,);
B(B_FB,MsgRealReal,MessageDe4,27,30,36,37,);
B(B_FB,MsgRealReal,MessageDe3,27,22,36,29,);
B(B_F,@AND-2,,14,7,19,11,0N);
B(B_F,@AND-2,,14,15,19,19,0N);
B(B_F,@AND-2,,14,23,19,27,0N);
B(B_F,@AND-2,,14,31,19,35,0N);
B(B_F,@AND-2,,47,7,52,11,0N);
B(B_F,@AND-2,,47,15,52,19,0N);
B(B_F,@AND-2,,47,23,52,27,0N);
B(B_F,@AND-2,,47,31,52,35,0N);
B(B_VARIN,,LXkmlDerrRiShort,43,8,45,10,);
B(B_VARIN,,LXkmlDerrRiBreak,43,16,45,18,);
B(B_VARIN,,LXkmlDerrRiWaLow,43,24,45,26,);
B(B_VARIN,,LXkmlDerrRiFail,43,32,45,34,);
B(B_VARIN,,LXkmlDerrLeShort,10,8,12,10,);
B(B_VARIN,,LXkmlDerrLeBreak,10,16,12,18,);
B(B_VARIN,,LXkmlDerrLeWaLow,10,24,12,26,);
B(B_VARIN,,LXkmlDerrLeFail,10,32,12,34,);
B(B_VARIN,,LXmaBoMissing,11,3,13,5,);
B(B_COMMENT,,Messages of the derrick sensors,1,1,27,2,);
L(12,9,14,9);
L(12,17,14,17);
L(12,25,14,25);
L(12,33,14,33);
L(13,10,14,10);
L(13,18,14,18);
L(13,26,14,26);
L(13,34,14,34);
L(19,9,27,9);
L(19,17,27,17);
L(19,25,27,25);
L(19,33,27,33);
L(13,4,13,34);
L(45,9,47,9);
L(45,17,47,17);
L(45,25,47,25);
L(45,33,47,33);
L(46,10,47,10);
L(46,18,47,18);
L(46,26,47,26);
L(46,34,47,34);
L(52,9,60,9);
L(52,17,60,17);
L(52,25,60,25);
L(52,33,60,33);
L(46,4,46,34);
L(13,4,46,4);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 36 ;
        NETWORK_BODY
B(B_VARIN,,MSG_ERROR,10,33,12,35,);
B(B_VARIN,,477,20,3,22,5,);
B(B_VARIN,,761,20,11,22,13,);
B(B_VARIN,,763,20,27,22,29,);
B(B_VARIN,,762,20,19,22,21,);
B(B_FB,MsgRealReal,MessageDe9,22,2,31,9,);
B(B_FB,MsgRealReal,MessageDe10,22,10,31,17,);
B(B_FB,MsgRealReal,MessageDe12,22,26,31,33,);
B(B_FB,MsgRealReal,MessageDe11,22,18,31,25,);
B(B_VARIN,,LXkmlDeBaLeShort,20,4,22,6,);
B(B_VARIN,,LXkmlDeBaLeBreak,20,12,22,14,);
B(B_VARIN,,LXkmlDeBaLeWaLow,20,20,22,22,);
B(B_VARIN,,LXkmlDeBaLeFail,20,28,22,30,);
B(B_VARIN,,LXkmlDeBaRiShort,40,4,42,6,);
B(B_VARIN,,LXkmlDeBaRiBreak,40,12,42,14,);
B(B_VARIN,,LXkmlDeBaRiWaLow,40,20,42,22,);
B(B_VARIN,,LXkmlDeBaRiFail,40,28,42,30,);
B(B_VARIN,,479,40,3,42,5,);
B(B_VARIN,,764,40,11,42,13,);
B(B_VARIN,,766,40,27,42,29,);
B(B_VARIN,,765,40,19,42,21,);
B(B_FB,MsgRealReal,MessageDe15,42,18,51,25,);
B(B_FB,MsgRealReal,MessageDe14,42,10,51,17,);
B(B_FB,MsgRealReal,MessageDe16,42,26,51,33,);
B(B_FB,MsgRealReal,MessageDe13,42,2,51,9,);
L(12,6,22,6);
L(12,14,22,14);
L(12,22,22,22);
L(12,30,22,30);
L(32,6,42,6);
L(32,14,42,14);
L(32,22,42,22);
L(32,30,42,30);
L(32,6,32,34);
L(12,6,12,34);
L(12,34,32,34);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 18 ;
        NETWORK_BODY
B(B_VARIN,,475,17,3,19,5,);
B(B_VARIN,,ixDevLoadDerrick,17,4,19,6,);
B(B_VARIN,,480,17,11,19,13,);
B(B_VARIN,,ixDevLoadDerrBal,17,12,19,14,);
B(B_VARIN,,MSG_WARNING,7,5,9,7,);
B(B_FB,MsgRealReal,MessageDe17,19,2,28,9,);
B(B_FB,MsgRealReal,MessageDe18,19,10,28,17,);
L(9,6,19,6);
L(9,6,9,14);
L(9,14,19,14);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL := exit: ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,exit program,1,1,27,2,);
B(B_VARIN,,TRUE,9,3,11,5,);
B(B_RETURN,,,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL := init: ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,init program,1,1,27,2,);
B(B_VARIN,,TRUE,9,3,11,5,);
B(B_VAROUT,,LXinitOk,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_COMMENT,,set sensor security time,1,1,27,2,);
B(B_COMMENT,,Diese Zeit hat folgenden Hintergrund:ø^Wird der Geber ausgesteckt~ so fällt das signal von 4mA (oder höher) auf 0mA ab.ø^Es wird nun also auch der Bereich WarnLow und Failure des ScaleAIfail durchlaufen.ø^Diese Fehler sollen aber nicht ausgel,0,0,0,0,0,0,0,);
B(B_COMMENT,,Deshalb muß das Signal in diesen Bereichen zunächst für diese SecurityTime anliegenø^daß der Fehler auch ausglöst wird.ø^Die Zeit richtet sich nun danach~ wie schnell das Signal vom Modul mit 0mA übermittelt wird.ø^(Hier sind HW und SW Filter,0,0,0,0,0,0,0,);
B(B_COMMENT,,Diese Zeit hat folgenden Hintergrund:ø^Wird der Geber ausgesteckt~ so fällt das signal von 4mA (oder höher) auf 0mA ab.,8,7,41,9,);
B(B_COMMENT,,Es wird nun also auch der Bereich WarnLow und Failure des ScaleAIfai  durchlaufen.ø^Diese Fehler sollen aber nicht ausgelöst werden.,8,10,41,12,);
B(B_F,real_to_time,,11,3,22,6,);
B(B_VARIN,,50.0,9,4,11,6,);
B(B_VAROUT,,LTsensorSafeTime,22,4,24,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_COMMENT,,Deshalb muß das Signal in diesen Bereichen zunächst für diese SecurityTime anliegen~ø^daß der Fehler auch ausglöst wird.,8,1,41,3,);
B(B_COMMENT,,Die Zeit richtet sich nun danach wie schnell das Signal vom Modul mit 0mA übermittelt wird.ø^(Hier sind HW und SW Filter eingebaut.),8,4,41,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,In der Praxis wird der Stromwert von 0mA auf dem CAN-Bus relativ schnell übermittelt.ø^Deshalb wurde die Zeit mit 50ms festgelegt~ sodaß es auch bei einer Druchlaufzeit vomø^50ms mind. wenigstens einen Durchlauf anliegen muß.,8,1,41,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_FB,CorrValue_Real,CorrValue_Real1,11,4,23,10,);
B(B_VARIN,,20.0,9,5,11,7,);
B(B_VARIN,,0.0,9,6,11,8,);
B(B_VARIN,,400.0,9,7,11,9,);
B(B_VARIN,,CDlmlLuJPreDevia,9,8,11,10,);
B(B_COMMENT,,maximum deviation of the luffing jib pressure sensors,1,1,27,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_FB,CorrValue_Real,CorrValue_Real2,11,4,23,10,);
B(B_VARIN,,75.0,9,5,11,7,);
B(B_VARIN,,50.0,9,6,11,8,);
B(B_VARIN,,300.0,9,7,11,9,);
B(B_VARIN,,CDminPresRFST3LJ,9,8,11,10,);
B(B_COMMENT,,minimum pressure of the fall back support of the luffing jib,1,1,27,2,);
        END_NETWORK_BODY
    END_NET_WORK
END_BODY
END_FUNCTION_BLOCK

FUNCTION_BLOCK ADpowerRegV011
(*name of author: Manfred Schapler
version: 1.0
date: 10/97
modification:*)
(*name of author: Manfred Schapler
version: 1.0
date: 10/97
modification:*)
	VAR_INPUT 
		anal_signal_in: REAL:=0.0;
			(*analog signal input*)
		sys_pressure: REAL:=0.0;
			(*system pressure [bar]*)
		max_volume: UINT:=0;
			(*maximum volume in [l/min]*)
		max_power: REAL:=0.0;
			(*maximum power  in [kW]*)
	END_VAR
	VAR_OUTPUT
		anal_signal_out: REAL:=0.0;
			(*reduction factor for the analog signals*)
		calculated_power: REAL:=0.0;
			(*calculated power [kW]*)
	END_VAR
	VAR 
		Integrator1: Integrator;
	END_VAR
'FBD'
BODY
    WORKSPACE
        NETWORK_LIST_TYPE := NWTYPEFBD ;
        ACTIVE_NETWORK := 0 ;
    END_WORKSPACE
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 14 ;
        NETWORK_BODY
B(B_F,@DIV,,17,5,22,9,);
B(B_VARIN,,100.0,15,7,17,9,);
B(B_F,@MUL-2,,24,5,29,9,);
B(B_VARIN,,sys_pressure,28,3,30,5,);
B(B_F,@MUL-2,,31,4,36,8,);
B(B_F,@DIV,,38,4,43,8,);
B(B_VARIN,,600.0,35,8,37,10,);
B(B_VAROUT,,calculated_power,43,5,45,7,);
B(B_COMMENT,,calculated power in kW,1,1,27,2,);
B(B_F,uint_to_real,,11,9,22,12,);
B(B_VARIN,,max_volume,9,10,11,12,);
B(B_F,abs,,12,5,17,8,);
B(B_VARIN,,anal_signal_in,10,6,12,8,);
L(22,7,24,7);
L(23,8,24,8);
L(29,7,31,7);
L(30,4,30,6);
L(30,6,31,6);
L(36,6,38,6);
L(37,7,37,9);
L(37,7,38,7);
L(22,11,23,11);
L(23,8,23,11);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 14 ;
        NETWORK_BODY
B(B_VARIN,,max_power,9,7,11,9,);
B(B_VARIN,,calculated_power,9,8,11,10,);
B(B_F,@DIV,,11,6,16,10,);
B(B_F,limit,,19,5,25,10,);
B(B_VARIN,,0.0,17,6,19,8,);
B(B_VARIN,,1.0,17,8,19,10,);
B(B_FB,Integrator,Integrator1,28,4,37,10,);
B(B_VARIN,,TRUE,25,3,27,5,);
B(B_VARIN,,0.125,24,10,26,12,);
B(B_VARIN,,1.0,25,11,27,13,);
B(B_F,@MUL-2,,39,4,44,8,);
B(B_VARIN,,anal_signal_in,36,10,38,12,);
B(B_VAROUT,,anal_signal_out,44,5,46,7,);
B(B_COMMENT,,reduction factor of power reduction,1,1,27,2,);
L(16,8,19,8);
L(25,7,28,7);
L(26,8,28,8);
L(27,9,28,9);
L(27,9,27,12);
L(26,8,26,11);
L(27,6,28,6);
L(27,4,27,6);
L(37,6,39,6);
L(38,7,38,11);
L(38,7,39,7);
        END_NETWORK_BODY
    END_NET_WORK
END_BODY
END_FUNCTION_BLOCK

FUNCTION_BLOCK ADpowerRegV012
(*name of author: Manfred Schapler
version: 1.0
date: 10/97
modification:*)
(*name of author: Manfred Schapler
version: 1.0
date: 10/97
modification:*)
	VAR_INPUT 
		anal_signal_in: REAL:=0.0;
			(*analog signal input*)
		sys_pressure: REAL:=0.0;
			(*system pressure [bar]*)
		max_volume: UINT:=0;
			(*maximum volume in [l/min]*)
		max_power: REAL:=0.0;
			(*maximum power  in [kW]*)
	END_VAR
	VAR_OUTPUT
		anal_signal_out: REAL:=0.0;
			(*reduction factor for the analog signals*)
		calculated_power: REAL:=0.0;
			(*calculated power [kW]*)
	END_VAR
	VAR 
		Integrator1: Integrator;
	END_VAR
'FBD'
BODY
    WORKSPACE
        NETWORK_LIST_TYPE := NWTYPEFBD ;
        ACTIVE_NETWORK := 0 ;
    END_WORKSPACE
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 14 ;
        NETWORK_BODY
B(B_COMMENT,,calculated power in kW,1,1,27,2,);
B(B_F,@DIV,,16,5,21,9,);
B(B_VARIN,,100.0,14,7,16,9,);
B(B_F,@MUL-2,,23,5,28,9,);
B(B_VARIN,,sys_pressure,27,3,29,5,);
B(B_F,@MUL-2,,30,4,35,8,);
B(B_F,@DIV,,37,4,42,8,);
B(B_VARIN,,600.0,34,8,36,10,);
B(B_VAROUT,,calculated_power,42,5,44,7,);
B(B_F,abs,,11,5,16,8,);
B(B_VARIN,,anal_signal_in,9,6,11,8,);
B(B_F,uint_to_real,,11,9,22,12,);
B(B_VARIN,,max_volume,9,10,11,12,);
L(21,7,23,7);
L(22,8,23,8);
L(28,7,30,7);
L(29,4,29,6);
L(29,6,30,6);
L(35,6,37,6);
L(36,7,36,9);
L(36,7,37,7);
L(22,8,22,11);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 14 ;
        NETWORK_BODY
B(B_COMMENT,,reduction factor of power reduction,1,1,27,2,);
B(B_F,@DIV,,13,9,18,13,);
B(B_F,@GE-2,,13,3,18,7,);
B(B_VARIN,,max_power,9,5,11,7,);
B(B_VARIN,,calculated_power,9,4,11,6,);
B(B_F,sel,,19,5,24,10,);
B(B_F,limit,,25,4,31,9,);
B(B_VARIN,,0.0,23,3,25,5,);
B(B_VARIN,,1.0,23,9,25,11,);
B(B_VARIN,,1.0,17,7,19,9,);
B(B_FB,Integrator,Integrator1,34,3,43,9,);
B(B_VARIN,,TRUE,31,2,33,4,);
B(B_VARIN,,0.125,30,9,32,11,);
B(B_VARIN,,1.0,31,10,33,12,);
B(B_F,@MUL-2,,45,3,50,7,);
B(B_VARIN,,anal_signal_in,42,9,44,11,);
B(B_VAROUT,,anal_signal_out,50,4,52,6,);
L(11,6,11,11);
L(11,6,13,6);
L(12,5,12,12);
L(11,11,13,11);
L(11,5,13,5);
L(12,12,13,12);
L(19,9,19,11);
L(19,5,19,7);
L(25,4,25,6);
L(25,8,25,10);
L(24,7,25,7);
L(18,5,19,5);
L(18,11,19,11);
L(31,6,34,6);
L(32,7,34,7);
L(33,8,34,8);
L(33,8,33,11);
L(32,7,32,10);
L(33,5,34,5);
L(33,3,33,5);
L(43,5,45,5);
L(44,6,44,10);
L(44,6,45,6);
        END_NETWORK_BODY
    END_NET_WORK
END_BODY
END_FUNCTION_BLOCK

FUNCTION_BLOCK ADropeLeCalcV011
(*name of author: Manfred Schapler
version: 1.0
date: 04/97
modification:*)
(*name of author: Manfred Schapler
version: 1.0
date: 04/97
modification:*)
	VAR_INPUT 
		impulses: DINT:=0;
			(*counts*)
		circumference: REAL:=0.0;
			(*circumference in the middle of the rope*)
		gear_ratio: REAL:=0.0;
			(*gear ratio winch / incrementalsensor*)
		imp_incremental: REAL:=0.0;
			(*impulse of the incrementalsensor*)
	END_VAR
	VAR_OUTPUT
		lenght_in_m: REAL:=0.0;
			(*rope lenght in m*)
		impuls_per_meter: REAL:=0.0;
			(*impulses per meter*)
	END_VAR
'FBD'
BODY
    WORKSPACE
        NETWORK_LIST_TYPE := NWTYPEFBD ;
        ACTIVE_NETWORK := 0 ;
    END_WORKSPACE
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_F,@DIV,,23,1,28,5,);
B(B_F,@DIV,,30,3,35,7,);
B(B_VARIN,,imp_incremental,28,5,30,7,);
B(B_F,@MUL-2,,37,5,42,9,);
B(B_VARIN,,circumference,35,7,37,9,);
B(B_VAROUT,,lenght_in_m,42,6,44,8,);
B(B_VARIN,,gear_ratio,21,3,23,5,);
B(B_F,dint_to_real,,11,1,22,4,);
B(B_VARIN,,impulses,9,2,11,4,);
L(29,5,30,5);
L(29,3,29,5);
L(28,3,29,3);
L(35,5,36,5);
L(36,5,36,7);
L(36,7,37,7);
L(22,3,23,3);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_F,@MUL-2,,11,1,16,5,);
B(B_VARIN,,gear_ratio,9,2,11,4,);
B(B_VARIN,,imp_incremental,9,3,11,5,);
B(B_F,@DIV,,18,1,23,5,);
B(B_VAROUT,,impuls_per_meter,23,2,25,4,);
B(B_VARIN,,circumference,15,5,17,7,);
L(17,4,17,6);
L(17,4,18,4);
L(16,3,18,3);
        END_NETWORK_BODY
    END_NET_WORK
END_BODY
END_FUNCTION_BLOCK

FUNCTION_BLOCK ADspeedCalcV011
	VAR_INPUT 
		impulses: DINT:=0;
			(*counts*)
		gear_ratio: REAL:=0.0;
			(*gear ratio *)
		avarage_factor: REAL:=0.0;
			(*avaraging factor (filter)*)
	END_VAR
	VAR_OUTPUT
		speed_in_rpm: REAL:=0.0;
			(*speed in rpm*)
	END_VAR
	VAR_EXTERNAL
		MDdeltaTime: REAL:=0.001;
			(*time to the last scan in sec.*)
	END_VAR
	VAR 
		LDimpulses_old: DINT:=0;
		LDimpulsDiff: DINT:=0;
		LDmeasCounts: REAL:=0.0;
		LDlokalSpeed: REAL:=0.0;
	END_VAR
'FBD'
BODY
    WORKSPACE
        NETWORK_LIST_TYPE := NWTYPEFBD ;
        ACTIVE_NETWORK := 0 ;
    END_WORKSPACE
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_VARIN,,impulses,9,4,11,6,);
B(B_VARIN,,LDimpulses_old,9,5,11,7,);
B(B_F,@SUB,,11,3,16,7,);
B(B_F,abs,,16,3,21,6,);
B(B_VAROUT,,LDimpulsDiff,21,4,23,6,);
B(B_COMMENT,,calculation differnece impulse  [imp/looping],1,1,27,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_VARIN,,impulses,9,3,11,5,);
B(B_VAROUT,,LDimpulses_old,11,3,13,5,);
B(B_COMMENT,,save old impulse [imp/looping],1,1,27,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_VARIN,,LDimpulsDiff,9,4,11,6,);
B(B_F,@EQ-2,,11,3,16,7,);
B(B_VARIN,,0,9,5,11,7,);
B(B_JUMP,,t_time,16,4,18,6,);
B(B_COMMENT,,jump to t_time if no impuls/looping ,1,1,27,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 14 ;
        NETWORK_BODY
B(B_F,@DIV,,32,5,37,9,);
B(B_VARIN,,LDmeasCounts,30,7,32,9,);
B(B_VARIN,,gear_ratio,37,9,39,11,);
B(B_F,@MUL-2,,25,3,30,7,);
B(B_F,@DIV,,39,7,44,11,);
B(B_VAROUT,,LDlokalSpeed,44,8,46,10,);
B(B_COMMENT,,claculate lokal speed ,1,1,27,2,);
B(B_VARIN,,MDdeltaTime,9,8,11,10,);
B(B_VARIN,,1.0,9,7,11,9,);
B(B_F,@DIV,,11,6,16,10,);
B(B_F,@MUL-2,,18,6,23,10,);
B(B_VARIN,,60.0,15,10,17,12,);
B(B_F,dint_to_real,,12,3,23,6,);
B(B_VARIN,,LDimpulsDiff,10,4,12,6,);
B(B_COMMENT,,20 loops/sek * 60 sek =1200 imp/min,8,12,24,13,);
L(31,7,32,7);
L(31,5,31,7);
L(37,7,38,7);
L(38,7,38,9);
L(30,5,31,5);
L(38,9,39,9);
L(23,8,24,8);
L(24,6,24,8);
L(24,6,25,6);
L(16,8,18,8);
L(17,9,17,11);
L(17,9,18,9);
L(23,5,25,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_VARIN,,1.0,9,3,11,5,);
B(B_VAROUT,,LDmeasCounts,11,3,13,5,);
B(B_COMMENT,,set measureing counts 1 ,1,1,27,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_VARIN,,TRUE,9,3,11,5,);
B(B_JUMP,,speed,11,3,13,5,);
B(B_COMMENT,,jump to speed claculation ,1,1,27,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL := t_time: ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_F,@DIV,,25,4,30,8,);
B(B_F,@DIV,,32,6,37,10,);
B(B_VARIN,,gear_ratio,30,8,32,10,);
B(B_VAROUT,,LDlokalSpeed,37,7,39,9,);
B(B_COMMENT,,claculate lokal speed ,1,1,27,2,);
B(B_COMMENT,,20 loops/sek * 60 sek =1200 imp/min,1,2,17,3,);
B(B_VARIN,,MDdeltaTime,9,6,11,8,);
B(B_VARIN,,1.0,9,5,11,7,);
B(B_F,@DIV,,11,4,16,8,);
B(B_F,@MUL-2,,18,4,23,8,);
B(B_VARIN,,60.0,15,8,17,10,);
B(B_VARIN,,LDmeasCounts,22,9,24,11,);
L(30,6,31,6);
L(31,6,31,8);
L(31,8,32,8);
L(16,6,18,6);
L(17,7,17,9);
L(17,7,18,7);
L(23,6,25,6);
L(24,7,25,7);
L(24,7,24,10);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_F,@ADD-2,,11,3,16,7,);
B(B_VARIN,,LDmeasCounts,9,4,11,6,);
B(B_VARIN,,1.0,9,5,11,7,);
B(B_VAROUT,,LDmeasCounts,16,4,18,6,);
B(B_COMMENT,,count up measuring Counts (loops),1,1,27,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_VARIN,,LDlokalSpeed,9,4,11,6,);
B(B_VARIN,,speed_in_rpm,9,5,11,7,);
B(B_F,@LT-2,,11,3,16,7,);
B(B_JUMP,,speed,16,4,18,6,);
B(B_COMMENT,,jump to speed calculation if  speed is decrease,1,1,27,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_VARIN,,TRUE,9,4,11,6,);
B(B_RETURN,,,11,4,13,6,);
B(B_COMMENT,,otherwise hold speed and return,1,1,27,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL := speed: ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_F,@SUB,,12,4,17,8,);
B(B_F,@DIV,,19,7,24,11,);
B(B_VARIN,,speed_in_rpm,9,5,11,7,);
B(B_VARIN,,LDlokalSpeed,10,6,12,8,);
B(B_F,@SUB,,26,6,31,10,);
B(B_VARIN,,avarage_factor,17,9,19,11,);
B(B_VAROUT,,speed_in_rpm,31,7,33,9,);
B(B_COMMENT,,calculate actual speed with avarage factor,1,1,27,2,);
L(11,6,12,6);
L(11,4,11,6);
L(11,4,25,4);
L(25,4,25,8);
L(17,6,18,6);
L(18,9,19,9);
L(18,6,18,9);
L(25,8,26,8);
L(24,9,26,9);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_VARIN,,0.0,9,2,11,4,);
B(B_VARIN,,speed_in_rpm,9,3,11,5,);
B(B_VARIN,,1000000.0,9,4,11,6,);
B(B_F,limit,,11,1,17,6,);
B(B_VAROUT,,speed_in_rpm,17,2,19,4,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 5 ;
        NETWORK_BODY
B(B_VARIN,,TRUE,9,2,11,4,);
B(B_RETURN,,,11,2,13,4,);
        END_NETWORK_BODY
    END_NET_WORK
END_BODY
END_FUNCTION_BLOCK

FUNCTION_BLOCK DMdrillDrDigV024
	VAR_INPUT 
		analog_sign_pos: BOOL:=FALSE;
			(*analog signal positiv*)
		analog_sign_neg: BOOL:=FALSE;
			(*analog signal negativ*)
		global_stop: BOOL:=FALSE;
			(*global stop drilling drive*)
		min_engine_speed: BOOL:=FALSE;
			(*minimum engine speed*)
		stop_all_functio: BOOL:=FALSE;
			(*stop all functions*)
		pres_gear_box_dd: BOOL:=FALSE;
			(*preselection gear box drilling drive*)
		presel_shak_dd: BOOL:=FALSE;
			(*preselection shaking drilling drive*)
		pres_worm_clean: BOOL:=FALSE;
			(*preselection worm cleaner in out*)
		enable_shak_dd: BOOL:=FALSE;
			(*enable shaking drilling drive*)
		pump_sign_zero: BOOL:=FALSE;
			(*pump in zero position*)
		no_zero_pos_gear: BOOL:=FALSE;
			(*no zero position to switch gear box *)
	END_VAR
	VAR_OUTPUT
		enable_pow_stage: BOOL:=FALSE;
			(*enable power stage right/left*)
		enable_gear_box: BOOL:=FALSE;
			(*enable gear box drilling drive*)
		shaking_dd_ri: BOOL:=FALSE;
			(*enable shaking driller right*)
		shaking_dd_le: BOOL:=FALSE;
			(*enable shaking driller left*)
		shak_dd_working: BOOL:=FALSE;
			(*shaking driller left/right working*)
		local_stop: BOOL:=FALSE;
			(*local stop cyl. out*)
		worm_clean_out: BOOL:=FALSE;
			(*worm cleaner out*)
		worm_clean_in: BOOL:=FALSE;
			(*worm cleaner in*)
		worm_clean_freeT: BOOL:=FALSE;
			(*worm cleaner free turn*)
	END_VAR
	VAR 
		LXenable_shak_dd: BOOL:=FALSE;
		LXin: BOOL:=FALSE;
		LXout: BOOL:=FALSE;
		LXdelayAnaSignal: BOOL:=FALSE;
		LXwaitAnaSignal: BOOL:=FALSE;
		RS1: RS;
		RS2: RS;
		RS3: RS;
		RS4: RS;
		RS5: RS;
		R_TRIG1: R_TRIG;
		R_TRIG2: R_TRIG;
		TON1: TON;
		TON2: TON;
		TOF1: TOF;
		TOF2: TOF;
		TOF3: TOF;
	END_VAR
'FBD'
BODY
    WORKSPACE
        NETWORK_LIST_TYPE := NWTYPEFBD ;
        ACTIVE_NETWORK := 0 ;
    END_WORKSPACE
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 14 ;
        NETWORK_BODY
B(B_VARIN,,analog_sign_pos,9,4,11,6,);
B(B_COMMENT,,enable power stages,1,1,27,2,);
B(B_VARIN,,analog_sign_neg,9,5,11,7,);
B(B_F,@OR-2,,11,3,16,7,);
B(B_F,@AND-2,,25,6,30,10,N);
B(B_FB,RS,RS1,32,3,37,7,);
B(B_VAROUT,,enable_pow_stage,37,4,39,6,);
B(B_F,@AND-3,,18,3,23,8,0NN);
B(B_VARIN,,stop_all_functio,15,9,17,11,);
B(B_VARIN,,global_stop,14,8,16,10,);
B(B_VARIN,,pump_sign_zero,22,10,24,12,);
L(16,6,18,6);
L(30,8,31,8);
L(31,6,31,8);
L(31,6,32,6);
L(24,8,25,8);
L(24,5,24,8);
L(16,5,18,5);
L(23,5,32,5);
L(16,6,16,9);
L(17,7,17,10);
L(17,7,18,7);
L(24,9,24,11);
L(24,9,25,9);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 19 ;
        NETWORK_BODY
B(B_COMMENT,,shaking drilling drive left + right,1,1,27,2,);
B(B_VARIN,,presel_shak_dd,15,5,17,7,);
B(B_VARIN,,enable_shak_dd,15,6,17,8,);
B(B_F,@AND-4,,20,3,25,9,N);
B(B_FB,RS,RS2,34,3,39,7,);
B(B_VAROUT,,shak_dd_working,39,4,41,6,);
B(B_VARIN,,stop_all_functio,15,4,17,6,);
B(B_F,@OR-3,,20,9,25,14,0NN);
B(B_F,@AND-3,,28,9,33,14,);
B(B_VARIN,,shak_dd_working,25,15,27,17,);
B(B_VARIN,,pump_sign_zero,9,14,11,16,);
B(B_F,@AND-3,,11,13,16,18,0NN);
B(B_VARIN,,shaking_dd_ri,9,15,11,17,);
B(B_VARIN,,shaking_dd_le,9,16,11,18,);
L(33,6,34,6);
L(25,5,34,5);
L(17,5,20,5);
L(17,7,20,7);
L(17,6,20,6);
L(18,6,18,12);
L(19,5,19,11);
L(16,8,20,8);
L(18,12,20,12);
L(19,11,20,11);
L(17,7,17,13);
L(17,13,20,13);
L(27,13,28,13);
L(26,12,28,12);
L(26,12,26,15);
L(27,13,27,16);
L(25,11,28,11);
L(33,6,33,11);
L(16,8,16,15);
L(16,15,26,15);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 14 ;
        NETWORK_BODY
B(B_FB,TOF,TOF1,11,1,16,5,);
B(B_FB,TOF,TOF2,11,9,16,13,);
B(B_VARIN,,analog_sign_pos,9,2,11,4,);
B(B_VARIN,,analog_sign_neg,9,10,11,12,);
B(B_VARIN,,T#0.2s,9,3,11,5,);
B(B_VARIN,,T#0.2s,9,11,11,13,);
B(B_VAROUT,,shaking_dd_ri,24,2,26,4,);
B(B_VAROUT,,shaking_dd_le,24,9,26,11,);
B(B_VARIN,,shak_dd_working,15,6,17,8,);
B(B_F,@AND-3,,19,1,24,6,00N);
B(B_F,@AND-3,,19,8,24,13,00N);
B(B_VARIN,,local_stop,14,7,16,9,);
L(16,11,19,11);
L(17,4,19,4);
L(16,3,19,3);
L(17,10,19,10);
L(18,5,19,5);
L(18,5,18,12);
L(18,12,19,12);
L(16,8,18,8);
L(17,4,17,10);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 26 ;
        NETWORK_BODY
B(B_FB,RS,RS3,33,4,38,8,);
B(B_F,@AND-3,,26,4,31,9,0N);
B(B_F,@AND-3,,26,9,31,14,);
B(B_VARIN,,enable_gear_box,21,6,23,8,);
B(B_VARIN,,pres_gear_box_dd,14,4,16,6,);
B(B_FB,R_TRIG,R_TRIG1,16,3,23,6,);
B(B_F,@OR-2,,40,4,45,8,);
B(B_VARIN,,analog_sign_pos,14,20,16,22,);
B(B_VARIN,,analog_sign_neg,14,21,16,23,);
B(B_F,@OR-2,,16,19,21,23,);
B(B_F,@AND-2,,25,16,30,20,);
B(B_FB,RS,RS4,32,16,37,20,);
B(B_F,@AND-2,,25,21,30,25,NN);
B(B_VARIN,,shak_dd_working,22,17,24,19,);
B(B_F,@AND-2,,47,3,52,7,);
B(B_VAROUT,,enable_gear_box,52,4,54,6,);
B(B_VARIN,,min_engine_speed,44,2,46,4,);
B(B_COMMENT,,gear box drilling drive,1,1,27,2,);
B(B_F,@OR-2,,18,10,23,14,);
B(B_VARIN,,enable_gear_box,23,15,25,17,);
B(B_VARIN,,no_zero_pos_gear,16,12,18,14,);
B(B_VARIN,,pump_sign_zero,16,11,18,13,);
L(31,11,32,11);
L(32,7,32,11);
L(32,7,33,7);
L(31,6,33,6);
L(24,11,26,11);
L(25,8,25,12);
L(25,8,26,8);
L(25,13,26,13);
L(23,5,24,5);
L(24,6,26,6);
L(24,5,24,11);
L(23,7,26,7);
L(38,6,40,6);
L(39,7,40,7);
L(23,19,25,19);
L(30,18,32,18);
L(24,18,25,18);
L(24,18,24,23);
L(24,23,25,23);
L(23,19,23,24);
L(21,21,23,21);
L(23,24,25,24);
L(30,23,31,23);
L(31,19,31,23);
L(31,19,32,19);
L(37,18,39,18);
L(39,7,39,18);
L(46,3,46,5);
L(46,5,47,5);
L(45,6,47,6);
L(23,12,26,12);
L(25,13,25,16);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 14 ;
        NETWORK_BODY
B(B_FB,TON,TON2,13,4,18,8,);
B(B_FB,TOF,TOF3,13,9,18,13,);
B(B_VARIN,,T#0.5s,9,6,11,8,);
B(B_VARIN,,enable_gear_box,10,5,12,7,);
B(B_VAROUT,,LXdelayAnaSignal,18,5,20,7,);
B(B_VAROUT,,LXwaitAnaSignal,18,10,20,12,);
B(B_COMMENT,,time delay to switch over gear box,1,1,27,2,);
L(11,7,13,7);
L(11,7,11,12);
L(11,12,13,12);
L(12,6,12,11);
L(12,11,13,11);
L(12,6,13,6);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 17 ;
        NETWORK_BODY
B(B_COMMENT,,stop drilling drive,1,1,27,2,);
B(B_F,@OR-4,,21,10,26,16,);
B(B_VAROUT,,local_stop,26,11,28,13,);
B(B_VARIN,,global_stop,19,13,21,15,);
B(B_VARIN,,stop_all_functio,19,14,21,16,);
B(B_VARIN,,enable_gear_box,10,4,12,6,);
B(B_F,@AND-3,,13,8,18,13,NN);
B(B_F,@AND-3,,13,3,18,8,0NN);
B(B_VARIN,,LXwaitAnaSignal,11,11,13,13,);
B(B_VARIN,,LXdelayAnaSignal,8,6,10,8,);
B(B_VARIN,,no_zero_pos_gear,9,5,11,7,);
L(20,5,20,12);
L(20,12,21,12);
L(19,10,19,13);
L(19,13,21,13);
L(12,5,12,10);
L(12,10,13,10);
L(18,10,19,10);
L(12,5,13,5);
L(18,5,20,5);
L(10,7,13,7);
L(11,6,13,6);
L(11,6,11,11);
L(11,11,13,11);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 24 ;
        NETWORK_BODY
B(B_COMMENT,,worm cleaner drilling drive,1,1,27,2,);
B(B_FB,R_TRIG,R_TRIG2,13,4,20,7,);
B(B_F,@AND-2,,24,4,29,8,0N);
B(B_FB,RS,RS5,31,4,36,8,);
B(B_VARIN,,LXin,22,6,24,8,);
B(B_VARIN,,pres_worm_clean,10,5,12,7,);
B(B_VAROUT,,LXin,37,5,39,7,);
B(B_F,not,,38,7,43,10,);
B(B_VAROUT,,LXout,43,8,45,10,);
B(B_F,@AND-2,,24,9,29,13,);
B(B_VARIN,,LXin,22,11,24,13,);
B(B_F,@AND-3,,13,12,18,17,00N);
B(B_F,@AND-3,,13,18,18,23,0N);
B(B_VARIN,,LXout,11,21,13,23,);
B(B_VARIN,,LXin,9,14,11,16,);
B(B_VARIN,,stop_all_functio,9,15,11,17,);
B(B_F,@OR-2,,20,15,25,19,);
B(B_VAROUT,,worm_clean_in,19,13,21,15,);
B(B_VAROUT,,worm_clean_out,19,19,21,21,);
B(B_VAROUT,,worm_clean_freeT,25,16,27,18,);
L(20,6,24,6);
L(29,6,31,6);
L(30,7,31,7);
L(12,6,13,6);
L(36,6,37,6);
L(37,6,37,9);
L(37,9,38,9);
L(21,11,24,11);
L(21,6,21,11);
L(30,7,30,11);
L(29,11,30,11);
L(12,14,12,20);
L(12,14,13,14);
L(12,20,13,20);
L(11,16,11,21);
L(11,21,13,21);
L(11,16,13,16);
L(11,15,13,15);
L(12,6,12,14);
L(18,20,19,20);
L(19,18,19,20);
L(19,18,20,18);
L(18,14,19,14);
L(19,14,19,17);
L(19,17,20,17);
        END_NETWORK_BODY
    END_NET_WORK
END_BODY
END_FUNCTION_BLOCK

FUNCTION_BLOCK ENmsgInfoV030
	VAR_INPUT 
		engineStarting: BOOL:=FALSE;
		batteryChargeOFF: BOOL:=FALSE;
		powerReductionTe: BOOL:=FALSE;
		powerReductionHi: BOOL:=FALSE;
		coolWatTempWarn: BOOL:=FALSE;
		coolWatTempError: BOOL:=FALSE;
		charAirTempWarn: BOOL:=FALSE;
		charAirTempError: BOOL:=FALSE;
		fuelTempWarn: BOOL:=FALSE;
		fuelTempError: BOOL:=FALSE;
		waterInFuel: BOOL:=FALSE;
		lubOilPressWarn: BOOL:=FALSE;
		lubOilPressError: BOOL:=FALSE;
		fuelPressWarn: BOOL:=FALSE;
		fuelPressError: BOOL:=FALSE;
		airFilterError: BOOL:=FALSE;
		fuelPressRailWar: BOOL:=FALSE;
		fuelPressRailErr: BOOL:=FALSE;
		coolWatLevError: BOOL:=FALSE;
		lubOilContLowWar: BOOL:=FALSE;
		lubOilContLowErr: BOOL:=FALSE;
		lubOilContHigWar: BOOL:=FALSE;
		lubOilContHigErr: BOOL:=FALSE;
		engSpeedHiWarn: BOOL:=FALSE;
		engSpeedHiError: BOOL:=FALSE;
		AdBlueContWarn: BOOL:=FALSE;
		AdBlueContError: BOOL:=FALSE;
		stopByEDC: BOOL:=FALSE;
		EDCReqStop: BOOL:=FALSE;
		EDCReqRepair: BOOL:=FALSE;
		asynchError: BOOL:=FALSE;
		coolWaterTemp: REAL:=0.0;
		chargeAirTemp: REAL:=0.0;
		lubOilPress: REAL:=0.0;
		engineSpeed: REAL:=0.0;
	END_VAR
	VAR_EXTERNAL CONSTANT
		MSG_INFO: UINT:=0;
			(* message priority: "info" *)
		MSG_WARNING: UINT:=0;
			(* message priority: "warning" *)
	END_VAR
	VAR 
		LDmaxEngSpeed: REAL:=0.0;
		LDmaxCharAirTemp: REAL:=0.0;
		LDmaxCoolWatTemp: REAL:=0.0;
		LDmaxlubOilPress: REAL:=0.0;
		Message1: MsgRealReal;
		Message2: MsgRealReal;
		Message3: MsgRealReal;
		Message4: MsgRealReal;
		Message5: MsgRealReal;
		Message6: MsgRealReal;
		Message7: MsgRealReal;
		Message8: MsgRealReal;
		Message9: MsgRealReal;
		Message10: MsgRealReal;
		Message11: MsgRealReal;
		Message12: MsgRealReal;
		Message13: MsgRealReal;
		Message14: MsgRealReal;
		Message15: MsgRealReal;
		Message16: MsgRealReal;
		Message17: MsgRealReal;
		Message18: MsgRealReal;
		Message19: MsgRealReal;
		Message20: MsgRealReal;
		Message21: MsgRealReal;
		Message22: MsgRealReal;
		Message23: MsgRealReal;
		Message24: MsgRealReal;
		Message25: MsgRealReal;
		Message26: MsgRealReal;
		Message27: MsgRealReal;
		Message28: MsgRealReal;
		Message29: MsgRealReal;
		Message30: MsgRealReal;
		Message31: MsgRealReal;
	END_VAR
'FBD'
BODY
    WORKSPACE
        NETWORK_LIST_TYPE := NWTYPEFBD ;
        ACTIVE_NETWORK := 0 ;
    END_WORKSPACE
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_F,@LT-2,,15,1,20,5,);
B(B_VARIN,,engineSpeed,11,3,13,5,);
B(B_VARIN,,LDmaxEngSpeed,12,2,14,4,);
B(B_F,sel,,20,2,25,7,);
B(B_VAROUT,,LDmaxEngSpeed,25,3,27,5,);
L(14,3,15,3);
L(13,4,15,4);
L(14,3,14,5);
L(14,5,20,5);
L(13,4,13,6);
L(13,6,20,6);
L(20,3,20,4);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_F,@LT-2,,15,1,20,5,);
B(B_VARIN,,chargeAirTemp,11,3,13,5,);
B(B_VARIN,,LDmaxCharAirTemp,12,2,14,4,);
B(B_F,sel,,20,2,25,7,);
B(B_VAROUT,,LDmaxCharAirTemp,25,3,27,5,);
L(14,3,15,3);
L(13,4,15,4);
L(14,3,14,5);
L(14,5,20,5);
L(13,4,13,6);
L(13,6,20,6);
L(20,3,20,4);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_F,@LT-2,,15,1,20,5,);
B(B_VARIN,,coolWaterTemp,11,3,13,5,);
B(B_VARIN,,LDmaxCoolWatTemp,12,2,14,4,);
B(B_F,sel,,20,2,25,7,);
B(B_VAROUT,,LDmaxCoolWatTemp,25,3,27,5,);
L(14,3,15,3);
L(13,4,15,4);
L(14,3,14,5);
L(14,5,20,5);
L(13,4,13,6);
L(13,6,20,6);
L(20,3,20,4);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_F,@LT-2,,15,1,20,5,);
B(B_VARIN,,lubOilPress,11,3,13,5,);
B(B_VARIN,,LDmaxlubOilPress,12,2,14,4,);
B(B_F,sel,,20,2,25,7,);
B(B_VAROUT,,LDmaxlubOilPress,25,3,27,5,);
L(14,3,15,3);
L(13,4,15,4);
L(14,3,14,5);
L(14,5,20,5);
L(13,4,13,6);
L(13,6,20,6);
L(20,3,20,4);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_FB,MsgRealReal,Message1,13,2,22,9,);
B(B_VARIN,,422,11,3,13,5,);
B(B_VARIN,,engineStarting,11,4,13,6,);
B(B_VARIN,,MSG_INFO,11,5,13,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_FB,MsgRealReal,Message2,13,2,22,9,);
B(B_VARIN,,423,11,3,13,5,);
B(B_VARIN,,batteryChargeOFF,11,4,13,6,);
B(B_VARIN,,MSG_INFO,11,5,13,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_FB,MsgRealReal,Message3,13,2,22,9,);
B(B_VARIN,,424,11,3,13,5,);
B(B_VARIN,,powerReductionTe,11,4,13,6,);
B(B_VARIN,,MSG_INFO,11,5,13,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_FB,MsgRealReal,Message4,13,2,22,9,);
B(B_VARIN,,425,11,3,13,5,);
B(B_VARIN,,powerReductionHi,11,4,13,6,);
B(B_VARIN,,MSG_INFO,11,5,13,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_FB,MsgRealReal,Message5,13,2,22,9,);
B(B_VARIN,,428,11,3,13,5,);
B(B_VARIN,,coolWatTempWarn,11,4,13,6,);
B(B_VARIN,,MSG_INFO,11,5,13,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_FB,MsgRealReal,Message6,13,2,22,9,);
B(B_VARIN,,429,11,3,13,5,);
B(B_VARIN,,coolWatTempError,11,4,13,6,);
B(B_VARIN,,MSG_WARNING,11,5,13,7,);
B(B_VARIN,,LDmaxCoolWatTemp,11,6,13,8,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_FB,MsgRealReal,Message7,13,2,22,9,);
B(B_VARIN,,430,11,3,13,5,);
B(B_VARIN,,charAirTempWarn,11,4,13,6,);
B(B_VARIN,,MSG_INFO,11,5,13,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_FB,MsgRealReal,Message8,13,2,22,9,);
B(B_VARIN,,431,11,3,13,5,);
B(B_VARIN,,charAirTempError,11,4,13,6,);
B(B_VARIN,,MSG_INFO,11,5,13,7,);
B(B_VARIN,,LDmaxCharAirTemp,11,6,13,8,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_FB,MsgRealReal,Message9,13,2,22,9,);
B(B_VARIN,,432,11,3,13,5,);
B(B_VARIN,,fuelTempWarn,11,4,13,6,);
B(B_VARIN,,MSG_INFO,11,5,13,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_FB,MsgRealReal,Message10,13,2,22,9,);
B(B_VARIN,,433,11,3,13,5,);
B(B_VARIN,,fuelTempError,11,4,13,6,);
B(B_VARIN,,MSG_INFO,11,5,13,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_FB,MsgRealReal,Message11,13,2,22,9,);
B(B_VARIN,,448,11,3,13,5,);
B(B_VARIN,,waterInFuel,11,4,13,6,);
B(B_VARIN,,MSG_WARNING,11,5,13,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_FB,MsgRealReal,Message12,13,2,22,9,);
B(B_VARIN,,436,11,3,13,5,);
B(B_VARIN,,lubOilPressWarn,11,4,13,6,);
B(B_VARIN,,MSG_INFO,11,5,13,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_FB,MsgRealReal,Message13,13,1,22,8,);
B(B_VARIN,,437,11,2,13,4,);
B(B_VARIN,,lubOilPressError,11,3,13,5,);
B(B_VARIN,,MSG_WARNING,11,4,13,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_FB,MsgRealReal,Message14,13,2,22,9,);
B(B_VARIN,,625,11,3,13,5,);
B(B_VARIN,,fuelPressWarn,11,4,13,6,);
B(B_VARIN,,MSG_INFO,11,5,13,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_FB,MsgRealReal,Message15,13,1,22,8,);
B(B_VARIN,,626,11,2,13,4,);
B(B_VARIN,,fuelPressError,11,3,13,5,);
B(B_VARIN,,MSG_INFO,11,4,13,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_FB,MsgRealReal,Message16,13,1,22,8,);
B(B_VARIN,,439,11,2,13,4,);
B(B_VARIN,,airFilterError,11,3,13,5,);
B(B_VARIN,,MSG_INFO,11,4,13,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_FB,MsgRealReal,Message17,13,2,22,9,);
B(B_VARIN,,627,11,3,13,5,);
B(B_VARIN,,fuelPressRailWar,11,4,13,6,);
B(B_VARIN,,MSG_INFO,11,5,13,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_FB,MsgRealReal,Message18,13,1,22,8,);
B(B_VARIN,,628,11,2,13,4,);
B(B_VARIN,,fuelPressRailErr,11,3,13,5,);
B(B_VARIN,,MSG_INFO,11,4,13,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_FB,MsgRealReal,Message19,13,2,22,9,);
B(B_VARIN,,440,11,3,13,5,);
B(B_VARIN,,coolWatLevError,11,4,13,6,);
B(B_VARIN,,MSG_WARNING,11,5,13,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_FB,MsgRealReal,Message20,13,2,22,9,);
B(B_VARIN,,629,11,3,13,5,);
B(B_VARIN,,lubOilContLowWar,11,4,13,6,);
B(B_VARIN,,MSG_INFO,11,5,13,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_FB,MsgRealReal,Message21,13,1,22,8,);
B(B_VARIN,,630,11,2,13,4,);
B(B_VARIN,,lubOilContLowErr,11,3,13,5,);
B(B_VARIN,,MSG_WARNING,11,4,13,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_FB,MsgRealReal,Message22,13,2,22,9,);
B(B_VARIN,,730,11,3,13,5,);
B(B_VARIN,,lubOilContHigWar,11,4,13,6,);
B(B_VARIN,,MSG_INFO,11,5,13,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_FB,MsgRealReal,Message23,13,1,22,8,);
B(B_VARIN,,731,11,2,13,4,);
B(B_VARIN,,lubOilContHigErr,11,3,13,5,);
B(B_VARIN,,MSG_WARNING,11,4,13,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_FB,MsgRealReal,Message24,13,2,22,9,);
B(B_VARIN,,443,11,3,13,5,);
B(B_VARIN,,engSpeedHiWarn,11,4,13,6,);
B(B_VARIN,,MSG_INFO,11,5,13,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_FB,MsgRealReal,Message25,13,2,22,9,);
B(B_VARIN,,444,11,3,13,5,);
B(B_VARIN,,engSpeedHiError,11,4,13,6,);
B(B_VARIN,,MSG_WARNING,11,5,13,7,);
B(B_VARIN,,LDmaxEngSpeed,11,6,13,8,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_FB,MsgRealReal,Message26,13,2,22,9,);
B(B_VARIN,,631,11,3,13,5,);
B(B_VARIN,,AdBlueContWarn,11,4,13,6,);
B(B_VARIN,,MSG_INFO,11,5,13,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_FB,MsgRealReal,Message27,13,1,22,8,);
B(B_VARIN,,632,11,2,13,4,);
B(B_VARIN,,AdBlueContError,11,3,13,5,);
B(B_VARIN,,MSG_WARNING,11,4,13,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_FB,MsgRealReal,Message28,13,2,22,9,);
B(B_VARIN,,633,11,3,13,5,);
B(B_VARIN,,stopByEDC,11,4,13,6,);
B(B_VARIN,,MSG_INFO,11,5,13,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_FB,MsgRealReal,Message29,13,2,22,9,);
B(B_VARIN,,634,11,3,13,5,);
B(B_VARIN,,EDCReqStop,11,4,13,6,);
B(B_VARIN,,MSG_WARNING,11,5,13,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_FB,MsgRealReal,Message30,13,2,22,9,);
B(B_VARIN,,635,11,3,13,5,);
B(B_VARIN,,EDCReqRepair,11,4,13,6,);
B(B_VARIN,,MSG_WARNING,11,5,13,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_FB,MsgRealReal,Message31,13,2,22,9,);
B(B_VARIN,,445,11,3,13,5,);
B(B_VARIN,,asynchError,11,4,13,6,);
B(B_VARIN,,MSG_INFO,11,5,13,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_F,sel,,13,1,18,6,N);
B(B_VARIN,,0.0,11,4,13,6,);
B(B_VAROUT,,LDmaxEngSpeed,18,2,20,4,);
B(B_VARIN,,LDmaxEngSpeed,11,3,13,5,);
B(B_VARIN,,engSpeedHiError,11,2,13,4,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_F,sel,,13,1,18,6,N);
B(B_VARIN,,0.0,11,4,13,6,);
B(B_VAROUT,,LDmaxCharAirTemp,18,2,20,4,);
B(B_VARIN,,LDmaxCharAirTemp,11,3,13,5,);
B(B_VARIN,,charAirTempError,11,2,13,4,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_F,sel,,13,1,18,6,N);
B(B_VARIN,,0.0,11,4,13,6,);
B(B_VAROUT,,LDmaxCoolWatTemp,18,2,20,4,);
B(B_VARIN,,LDmaxCoolWatTemp,11,3,13,5,);
B(B_VARIN,,coolWatTempError,11,2,13,4,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_F,sel,,13,1,18,6,N);
B(B_VARIN,,0.0,11,4,13,6,);
B(B_VAROUT,,LDmaxlubOilPress,18,2,20,4,);
B(B_VARIN,,LDmaxlubOilPress,11,3,13,5,);
B(B_VARIN,,lubOilPressError,11,2,13,4,);
        END_NETWORK_BODY
    END_NET_WORK
END_BODY
END_FUNCTION_BLOCK

FUNCTION_BLOCK ENscaleInputV043
	VAR_OUTPUT 
		engineSpeed: REAL:=0.0;
		engineExploitat: REAL:=0.0;
		engineTorqueAct: REAL:=0.0;
		engineTorqueMax: REAL:=0.0;
		batteryVoltage: REAL:=0.0;
		chargeAiTemp: REAL:=0.0;
		coolWaterTemp: REAL:=0.0;
		hydrOilTemp: REAL:=0.0;
		lubOilPress: REAL:=0.0;
		chargeAirPress: REAL:=0.0;
		lubOilCont: REAL:=0.0;
		DEFcont: REAL:=0.0;
		outdoorTemp: REAL:=0.0;
		DPFminEngTorque: REAL:=0.0;
		DPFremainTime: REAL:=0.0;
		enginePowerAct: REAL:=0.0;
		enginePowerMax: REAL:=0.0;
		fuelCon_ulPerScn: UDINT:=0;
			(*fuel consumption [ul/scan] not filtered*)
		fuelCon_lPerHoPs: REAL:=0.0;
			(*fuel consumption [l/h/scan] not filtered*)
	END_VAR
	VAR_EXTERNAL
		IWengActSpeed: INT:=0;
			(*engine actual speed [U/min]*)
		IWengActTorque: INT:=0;
			(*engine actual torque [1/10 %]*)
		IWengMaxTorque: INT:=0;
			(*engine actual maximum torque [Nm]*)
		IWengBattVoltage: INT:=0;
			(*engine battery voltage [1/5 V]*)
		IWengChaAirTemp: INT:=0;
			(*engine charge air temperature [°C]*)
		IWengCoolWatTemp: INT:=0;
			(*engine cooling water temperature [°C]*)
		IWhyrdOilTemp: INT:=0;
			(*hydraulic oil temperature [°C]*)
		IWengLubOilPress: INT:=0;
			(*engine lub oil pressure [1/10 bar]*)
		IWengChaAirPress: INT:=0;
			(*engine charge air pressure [1/10 bar]*)
		IWengFuelConsump: INT:=0;
			(*engine fuel consumption [1/100 liter]*)
		IWengLubOilCont: INT:=0;
			(*engine lub oil content [%]*)
		IWengOutdoorTemp: INT:=0;
			(*engine outdoor temperature [°C]*)
		IWengDefCont: INT:=0;
			(*engine DEF content [1/10%]*)
		IWengDpfMinTorqu: INT:=0;
			(*engine DPF minimum engine torque [Nm]*)
		IWengDpfRemTime: INT:=0;
			(*engine DPF remaining time [min]*)
		MDdeltaTime: REAL:=0.001;
			(*time to the last scan in sec.*)
	END_VAR
	VAR_EXTERNAL CONSTANT
		PI: REAL:=3.141592653;
	END_VAR
'FBD'
BODY
    WORKSPACE
        NETWORK_LIST_TYPE := NWTYPEFBD ;
        ACTIVE_NETWORK := 0 ;
    END_WORKSPACE
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_COMMENT,,engine speed,1,1,40,2,);
B(B_VARIN,,IWengActSpeed,11,4,13,6,);
B(B_F,int_to_real,,13,3,23,6,);
B(B_VAROUT,,engineSpeed,23,4,25,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_COMMENT,,actual engine expoitation,1,1,40,2,);
B(B_VARIN,,10.0,21,6,23,8,);
B(B_F,int_to_real,,13,3,23,6,);
B(B_F,@DIV,,23,3,28,7,);
B(B_VAROUT,,engineExploitat,28,4,30,6,);
B(B_VARIN,,IWengActTorque,11,4,13,6,);
L(23,6,23,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_COMMENT,,actual maximum engine torque,1,1,40,2,);
B(B_VARIN,,IWengMaxTorque,11,4,13,6,);
B(B_F,int_to_real,,13,3,23,6,);
B(B_VAROUT,,engineTorqueMax,23,4,25,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_COMMENT,,actual engine torque,1,1,40,2,);
B(B_VARIN,,IWengActTorque,11,4,13,6,);
B(B_F,int_to_real,,13,3,23,6,);
B(B_VARIN,,1000.0,21,6,23,8,);
B(B_F,@DIV,,23,3,28,7,);
B(B_F,@MUL-2,,28,3,33,7,);
B(B_VARIN,,engineTorqueMax,26,7,28,9,);
B(B_VAROUT,,engineTorqueAct,33,4,35,6,);
L(23,6,23,7);
L(28,6,28,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_COMMENT,,battery voltage,1,1,40,2,);
B(B_VARIN,,IWengBattVoltage,11,4,13,6,);
B(B_VARIN,,10.0,21,6,23,8,);
B(B_VAROUT,,batteryVoltage,28,4,30,6,);
B(B_F,int_to_real,,13,3,23,6,);
B(B_F,@DIV,,23,3,28,7,);
L(23,6,23,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_COMMENT,,charge air temperature,1,1,40,2,);
B(B_VARIN,,IWengChaAirTemp,11,4,13,6,);
B(B_F,int_to_real,,13,3,23,6,);
B(B_VAROUT,,chargeAiTemp,23,4,25,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_COMMENT,,cooling water temperature,1,1,40,2,);
B(B_VARIN,,IWengCoolWatTemp,11,4,13,6,);
B(B_F,int_to_real,,13,3,23,6,);
B(B_VAROUT,,coolWaterTemp,23,4,25,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_COMMENT,,hydraulic oil temperature,1,1,40,2,);
B(B_VARIN,,IWhyrdOilTemp,11,4,13,6,);
B(B_F,int_to_real,,13,3,23,6,);
B(B_VAROUT,,hydrOilTemp,23,4,25,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_COMMENT,,lub oil pressure,1,1,40,2,);
B(B_VARIN,,IWengLubOilPress,11,4,13,6,);
B(B_VARIN,,100.0,21,6,23,8,);
B(B_VAROUT,,lubOilPress,28,4,30,6,);
B(B_F,@DIV,,23,3,28,7,);
B(B_F,int_to_real,,13,3,23,6,);
L(23,6,23,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_COMMENT,,charge air pressure,1,1,40,2,);
B(B_VARIN,,IWengChaAirPress,11,4,13,6,);
B(B_VARIN,,100.0,21,6,23,8,);
B(B_VAROUT,,chargeAirPress,28,4,30,6,);
B(B_F,@DIV,,23,3,28,7,);
B(B_F,int_to_real,,13,3,23,6,);
L(23,6,23,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_COMMENT,,lub oil content,1,1,40,2,);
B(B_VARIN,,IWengLubOilCont,11,4,13,6,);
B(B_F,int_to_real,,13,3,23,6,);
B(B_VAROUT,,lubOilCont,23,4,25,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_COMMENT,,DEF content,1,1,40,2,);
B(B_F,int_to_real,,13,3,23,6,);
B(B_VARIN,,IWengDefCont,11,4,13,6,);
B(B_VARIN,,10.0,21,6,23,8,);
B(B_F,@DIV,,23,3,28,7,);
B(B_VAROUT,,DEFcont,28,4,30,6,);
L(23,6,23,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_COMMENT,,outdoor temperature,1,1,40,2,);
B(B_VARIN,,IWengOutdoorTemp,11,4,13,6,);
B(B_F,int_to_real,,13,3,23,6,);
B(B_VAROUT,,outdoorTemp,23,4,25,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_COMMENT,,DPF minimum engine troque,1,1,40,2,);
B(B_VARIN,,IWengDpfMinTorqu,11,4,13,6,);
B(B_F,int_to_real,,13,3,23,6,);
B(B_VAROUT,,DPFminEngTorque,23,4,25,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_COMMENT,,DPF remaining time,1,1,40,2,);
B(B_VARIN,,IWengDpfRemTime,11,4,13,6,);
B(B_F,int_to_real,,13,3,23,6,);
B(B_VAROUT,,DPFremainTime,23,4,25,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_COMMENT,,fuel consumption [micro liter],1,1,40,2,);
B(B_VARIN,,IWengFuelConsump,11,4,13,6,);
B(B_VAROUT,,fuelCon_ulPerScn,24,4,26,6,);
B(B_F,int_to_udint,,13,3,24,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_F,udint_to_real,,13,1,24,4,);
B(B_VARIN,,fuelCon_ulPerScn,11,2,13,4,);
B(B_F,@MUL-2,,24,1,29,5,);
B(B_VARIN,,3600.0,22,4,24,6,);
B(B_F,@DIV,,29,1,34,5,);
B(B_VARIN,,MDdeltaTime,27,5,29,7,);
B(B_COMMENT,,ul / h,30,5,33,6,);
B(B_F,@DIV,,34,1,39,5,);
B(B_VARIN,,1000.0,32,6,34,8,);
B(B_F,@DIV,,39,1,44,5,);
B(B_VAROUT,,fuelCon_lPerHoPs,44,2,46,4,);
B(B_COMMENT,,l / h,44,4,48,5,);
L(24,4,24,5);
L(29,4,29,6);
L(39,4,39,7);
L(34,7,39,7);
L(34,4,34,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 15 ;
        NETWORK_BODY
B(B_COMMENT,,calculate engine power [kW],1,1,40,2,);
B(B_F,@DIV,,18,6,23,10,);
B(B_F,@MUL-2,,23,3,28,7,);
B(B_VARIN,,engineTorqueMax,21,4,23,6,);
B(B_VARIN,,30.0,16,10,18,12,);
B(B_VARIN,,engineSpeed,11,7,13,9,);
B(B_VARIN,,PI,11,8,13,10,);
B(B_F,@MUL-2,,13,6,18,10,);
B(B_F,@MUL-2,,23,9,28,13,);
B(B_VARIN,,engineTorqueAct,21,11,23,13,);
B(B_COMMENT,,P= M*w ; w=2*Pi*n[U/s]=Pi*n [U/min]/30,41,1,60,2,);
B(B_VAROUT,,enginePowerMax,35,4,37,6,);
B(B_F,@DIV,,30,3,35,7,);
B(B_VAROUT,,enginePowerAct,35,10,37,12,);
B(B_F,@DIV,,30,9,35,13,);
B(B_VARIN,,1000.0,27,13,29,15,);
L(23,6,23,8);
L(18,9,18,11);
L(23,8,23,11);
L(28,5,30,5);
L(28,11,30,11);
L(29,6,29,14);
L(29,6,30,6);
L(29,12,30,12);
        END_NETWORK_BODY
    END_NET_WORK
END_BODY
END_FUNCTION_BLOCK

FUNCTION_BLOCK FB_anaCylAnaV011
	VAR_INPUT 
		analog_signal_in: REAL:=0.0;
			(*analog signal input pump signal*)
		adjus_eng_speed: REAL:=0.0;
			(*adjusted engine speed*)
		lim_cyl_out: REAL:=0.0;
			(*correction cyl.out*)
		lim_cyl_in: REAL:=0.0;
			(*correction cyl.in*)
		integr_time_up: REAL:=0.0;
			(*integrator raising time*)
		integr_time_down: REAL:=0.0;
			(*integrator falling time*)
	END_VAR
	VAR_OUTPUT
		analog_signal_pu: REAL:=0.0;
			(*cyl. analog output signal*)
		pump_sign_zero: BOOL:=FALSE;
			(*pump in zero position cyl.*)
	END_VAR
	VAR 
		LDanalSignEnSp: REAL:=0.0;
			(*analog signal after engine speed lim.*)
		LDanalSignIntegr: REAL:=0.0;
			(*analog signal after integrator*)
		LD1: REAL:=0.0;
			(*analog signal after out limitation*)
		LD2: REAL:=0.0;
			(*analog signal after in limitation*)
		Integrator1: Integrator;
	END_VAR
'FBD'
BODY
    WORKSPACE
        NETWORK_LIST_TYPE := NWTYPEFBD ;
        ACTIVE_NETWORK := 0 ;
    END_WORKSPACE
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_COMMENT,,signal limitation in consideration to the engine speed,1,1,27,2,);
B(B_F,@DIV,,21,5,26,9,);
B(B_VARIN,,adjus_eng_speed,9,6,11,8,);
B(B_F,@MUL-2,,28,4,33,8,);
B(B_VAROUT,,LDanalSignEnSp,33,5,35,7,);
B(B_VARIN,,analog_signal_in,25,3,27,5,);
B(B_VARIN,,130.0,19,7,21,9,);
B(B_F,@ADD-2,,11,5,16,9,);
B(B_VARIN,,30.0,9,7,11,9,);
L(27,6,28,6);
L(27,4,27,6);
L(26,7,28,7);
L(16,7,21,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,integrator analog signal cyl.,1,1,27,2,);
B(B_FB,Integrator,Integrator1,11,4,20,10,);
B(B_VARIN,,LDanalSignEnSp,9,6,11,8,);
B(B_VAROUT,,LDanalSignIntegr,20,5,22,7,);
B(B_VARIN,,TRUE,9,5,11,7,);
B(B_VARIN,,integr_time_up,9,7,11,9,);
B(B_VARIN,,integr_time_down,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_COMMENT,,limitation cyl. out,1,1,27,2,);
B(B_F,@MUL-2,,19,3,24,7,);
B(B_F,@DIV,,12,8,17,12,);
B(B_VAROUT,,LD1,24,4,26,6,);
B(B_VARIN,,lim_cyl_out,10,9,12,11,);
B(B_VARIN,,100.0,10,10,12,12,);
B(B_VARIN,,LDanalSignIntegr,9,5,11,7,);
B(B_F,limit,,11,3,17,8,);
B(B_VARIN,,0.0,9,6,11,8,);
B(B_VARIN,,-100.0,9,4,11,6,);
L(18,6,19,6);
L(17,10,18,10);
L(18,6,18,10);
L(17,5,19,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_COMMENT,,limitation cyl.in ,1,1,27,2,);
B(B_F,@MUL-2,,20,3,25,7,);
B(B_VAROUT,,LD2,25,4,27,6,);
B(B_F,@DIV,,13,8,18,12,);
B(B_VARIN,,lim_cyl_in,11,9,13,11,);
B(B_VARIN,,100.0,11,10,13,12,);
B(B_VARIN,,LDanalSignIntegr,10,5,12,7,);
B(B_F,limit,,12,3,18,8,);
B(B_VARIN,,0.0,10,4,12,6,);
B(B_VARIN,,100.0,10,6,12,8,);
L(19,6,20,6);
L(18,10,19,10);
L(19,6,19,10);
L(18,5,20,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,selection in or out,1,1,27,2,);
B(B_VARIN,,LDanalSignIntegr,9,4,11,6,);
B(B_VARIN,,0.0,9,5,11,7,);
B(B_F,@GE-2,,11,3,16,7,);
B(B_F,sel,,18,5,23,10,);
B(B_VAROUT,,analog_signal_pu,23,6,25,8,);
B(B_VARIN,,LD1,16,7,18,9,);
B(B_VARIN,,LD2,16,8,18,10,);
L(16,5,17,5);
L(17,5,17,7);
L(17,7,18,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_COMMENT,,pump signal in zero,1,1,27,2,);
B(B_VARIN,,0.0,9,5,11,7,);
B(B_VARIN,,analog_signal_pu,9,4,11,6,);
B(B_VAROUT,,pump_sign_zero,16,4,18,6,);
B(B_F,EQ_R,,11,3,16,7,);
        END_NETWORK_BODY
    END_NET_WORK
END_BODY
END_FUNCTION_BLOCK

FUNCTION_BLOCK FB_anaCylDigV010
	VAR_INPUT 
		analog_sign_out: BOOL:=FALSE;
			(*analog signal out*)
		analog_sign_in: BOOL:=FALSE;
			(*analog signal in*)
		global_stop: BOOL:=FALSE;
			(*global stop cyl.*)
		limit_swit_out: BOOL:=FALSE;
			(*upper limit switch*)
		limit_swit_in: BOOL:=FALSE;
			(*lower limit switch*)
		stop_all_functio: BOOL:=FALSE;
			(*stop all functions*)
		pump_sign_zero: BOOL:=FALSE;
			(*pump in zero position*)
	END_VAR
	VAR_OUTPUT
		enable_pow_stage: BOOL:=FALSE;
			(*enable pump up*)
		local_stop_out: BOOL:=FALSE;
			(*local stop cyl. out*)
		local_stop_in: BOOL:=FALSE;
			(*local stop cyl. in*)
	END_VAR
	VAR 
		RS1: RS;
	END_VAR
'FBD'
BODY
    WORKSPACE
        NETWORK_LIST_TYPE := NWTYPEFBD ;
        ACTIVE_NETWORK := 0 ;
    END_WORKSPACE
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 15 ;
        NETWORK_BODY
B(B_COMMENT,,stop cylinder,1,1,27,2,);
B(B_VARIN,,global_stop,9,4,11,6,);
B(B_F,@OR-2,,18,10,23,14,0N);
B(B_F,@OR-2,,18,6,23,10,0N);
B(B_VARIN,,limit_swit_out,14,8,16,10,);
B(B_VARIN,,limit_swit_in,14,12,16,14,);
B(B_VAROUT,,local_stop_out,23,7,25,9,);
B(B_VAROUT,,local_stop_in,23,11,25,13,);
B(B_F,@OR-2,,11,3,16,7,);
B(B_VARIN,,stop_all_functio,9,5,11,7,);
L(17,5,17,12);
L(17,12,18,12);
L(17,8,18,8);
L(16,9,18,9);
L(16,13,18,13);
L(16,5,17,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_F,@AND-2,,25,6,30,10,N);
B(B_FB,RS,RS1,32,3,37,7,);
B(B_COMMENT,,enable power stages,1,1,27,2,);
B(B_VAROUT,,enable_pow_stage,37,4,39,6,);
B(B_VARIN,,pump_sign_zero,23,8,25,10,);
B(B_F,@OR-2,,18,3,23,7,);
B(B_F,@AND-2,,11,3,16,7,0N);
B(B_F,@AND-2,,11,7,16,11,0N);
B(B_VARIN,,analog_sign_out,9,4,11,6,);
B(B_VARIN,,local_stop_out,9,5,11,7,);
B(B_VARIN,,analog_sign_in,9,8,11,10,);
B(B_VARIN,,local_stop_in,9,9,11,11,);
L(30,8,31,8);
L(31,6,31,8);
L(31,6,32,6);
L(24,8,25,8);
L(24,5,24,8);
L(23,5,32,5);
L(16,5,18,5);
L(16,9,17,9);
L(17,6,17,9);
L(17,6,18,6);
        END_NETWORK_BODY
    END_NET_WORK
END_BODY
END_FUNCTION_BLOCK

FUNCTION_BLOCK FB_cursX25V011
	VAR_INPUT 
		enable_function: BOOL:=FALSE;
			(*function preselected*)
		but_curs_in: BOOL:=FALSE;
			(*cursor button in*)
		but_curs_out: BOOL:=FALSE;
			(*cursor button out*)
		extern: BOOL:=FALSE;
			(*extern ; joy stick control*)
		stop_sign_in: BOOL:=FALSE;
			(*stop signal in*)
		stop_sign_out: BOOL:=FALSE;
			(*stop signal out*)
		signal_in: BOOL:=FALSE;
			(*signal in preselected*)
		signal_out: BOOL:=FALSE;
			(*signal out preselected*)
	END_VAR
	VAR_OUTPUT
		fun_curs_in: BOOL:=FALSE;
			(*enable cursor function in*)
		fun_curs_out: BOOL:=FALSE;
			(*enable cursor function out*)
		analog_sign: REAL:=0.0;
			(*extern analog signal button*)
		led_curs_in: BOOL:=FALSE;
			(*led cursor in*)
		led_curs_out: BOOL:=FALSE;
			(*led cursor out*)
	END_VAR
	VAR_EXTERNAL
		MXflashSignal: BOOL:=FALSE;
			(*flash signal*)
	END_VAR
	VAR 
		LXfunCursOut: BOOL:=FALSE;
		LXfunCursIn: BOOL:=FALSE;
		LDanalogOut: REAL:=0.0;
			(*analog signal +/- 50%*)
	END_VAR
'FBD'
BODY
    WORKSPACE
        NETWORK_LIST_TYPE := NWTYPEFBD ;
        ACTIVE_NETWORK := 0 ;
    END_WORKSPACE
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 28 ;
        NETWORK_BODY
B(B_COMMENT,,cursor up and down function,1,1,27,2,);
B(B_VARIN,,but_curs_out,9,6,11,8,);
B(B_VARIN,,but_curs_in,9,7,11,9,);
B(B_F,@AND-4,,15,3,20,9,0N0N);
B(B_VARIN,,enable_function,9,4,11,6,);
B(B_F,@AND-4,,15,9,20,15,0NN);
B(B_VARIN,,extern,9,5,11,7,);
B(B_F,@AND-4,,15,15,20,21,000N);
B(B_F,@AND-4,,15,21,20,27,00N);
B(B_VARIN,,signal_out,9,18,11,20,);
B(B_VARIN,,signal_in,9,19,11,21,);
B(B_F,@OR-2,,23,6,28,10,);
B(B_VAROUT,,fun_curs_out,28,7,30,9,);
B(B_F,@OR-2,,23,12,28,16,);
B(B_VAROUT,,fun_curs_in,28,13,30,15,);
B(B_VAROUT,,LXfunCursOut,21,4,23,6,);
B(B_VAROUT,,LXfunCursIn,22,10,24,12,);
L(11,8,15,8);
L(11,7,15,7);
L(11,6,15,6);
L(11,5,15,5);
L(14,11,15,11);
L(13,12,15,12);
L(12,7,12,13);
L(12,13,15,13);
L(11,8,11,14);
L(11,14,15,14);
L(14,17,15,17);
L(14,23,15,23);
L(14,5,14,23);
L(13,18,15,18);
L(13,24,15,24);
L(13,6,13,24);
L(11,19,15,19);
L(11,20,15,20);
L(12,19,12,25);
L(12,25,15,25);
L(11,20,11,26);
L(11,26,15,26);
L(20,5,21,5);
L(21,8,23,8);
L(20,11,22,11);
L(22,14,23,14);
L(20,17,21,17);
L(21,9,23,9);
L(20,23,22,23);
L(22,15,23,15);
L(21,9,21,17);
L(21,5,21,8);
L(22,11,22,14);
L(22,15,22,23);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_COMMENT,,cursor analog signal,1,1,27,2,);
B(B_F,sel,,11,3,16,8,);
B(B_VAROUT,,LDanalogOut,16,4,18,6,);
B(B_VARIN,,LDanalogOut,9,5,11,7,);
B(B_VARIN,,50.0,9,6,11,8,);
B(B_VARIN,,LXfunCursIn,9,4,11,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_F,sel,,11,1,16,6,);
B(B_VAROUT,,LDanalogOut,16,2,18,4,);
B(B_VARIN,,LDanalogOut,9,3,11,5,);
B(B_VARIN,,-50.0,9,4,11,6,);
B(B_VARIN,,LXfunCursOut,9,2,11,4,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_VARIN,,LXfunCursOut,9,2,11,4,);
B(B_VARIN,,LXfunCursIn,9,3,11,5,);
B(B_F,@OR-2,,11,1,16,5,);
B(B_F,sel,,18,3,23,8,);
B(B_VAROUT,,analog_sign,23,4,25,6,);
B(B_VARIN,,0.0,16,5,18,7,);
B(B_VARIN,,LDanalogOut,16,6,18,8,);
L(17,5,18,5);
L(16,3,17,3);
L(17,3,17,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 16 ;
        NETWORK_BODY
B(B_COMMENT,,led control cursor in,1,1,28,2,);
B(B_VARIN,,stop_sign_in,9,5,11,7,);
B(B_VARIN,,extern,9,6,11,8,);
B(B_VARIN,,enable_function,9,4,11,6,);
B(B_F,@AND-3,,14,3,19,8,0NN);
B(B_F,@OR-2,,21,3,26,7,);
B(B_VAROUT,,led_curs_in,26,4,28,6,);
B(B_F,@AND-5,,14,8,19,15,0N);
B(B_VARIN,,MXflashSignal,12,12,14,14,);
B(B_VARIN,,signal_in,12,13,14,15,);
L(12,6,12,11);
L(11,7,11,12);
L(11,12,14,12);
L(20,6,20,10);
L(11,7,14,7);
L(11,6,14,6);
L(12,11,14,11);
L(19,5,21,5);
L(20,6,21,6);
L(11,5,14,5);
L(13,5,13,10);
L(13,10,14,10);
L(19,10,20,10);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 17 ;
        NETWORK_BODY
B(B_COMMENT,,led control cursor out,1,1,28,2,);
B(B_VARIN,,extern,9,6,11,8,);
B(B_VARIN,,stop_sign_out,9,5,11,7,);
B(B_VARIN,,enable_function,9,4,11,6,);
B(B_F,@AND-3,,14,3,19,8,0NN);
B(B_F,@OR-2,,21,3,26,7,);
B(B_VAROUT,,led_curs_out,26,4,28,6,);
B(B_F,@AND-5,,14,9,19,16,0N);
B(B_VARIN,,MXflashSignal,12,13,14,15,);
B(B_VARIN,,signal_out,12,14,14,16,);
L(12,6,12,12);
L(11,7,11,13);
L(11,13,14,13);
L(20,6,20,11);
L(11,7,14,7);
L(11,6,14,6);
L(12,12,14,12);
L(19,5,21,5);
L(20,6,21,6);
L(11,5,14,5);
L(13,5,13,11);
L(13,11,14,11);
L(19,11,20,11);
        END_NETWORK_BODY
    END_NET_WORK
END_BODY
END_FUNCTION_BLOCK

FUNCTION_BLOCK FB_cursX25V012
	VAR_INPUT 
		enable_function: BOOL:=FALSE;
			(*function preselected*)
		but_curs_in: BOOL:=FALSE;
			(*cursor button in*)
		but_curs_out: BOOL:=FALSE;
			(*cursor button out*)
		extern: BOOL:=FALSE;
			(*extern ; joy stick control*)
		stop_sign_in: BOOL:=FALSE;
			(*stop signal in*)
		stop_sign_out: BOOL:=FALSE;
			(*stop signal out*)
		signal_in: BOOL:=FALSE;
			(*signal in preselected*)
		signal_out: BOOL:=FALSE;
			(*signal out preselected*)
		analog_sign_in: REAL:=0.0;
			(*alalog signal in*)
		analog_sign_out: REAL:=0.0;
			(*alalog signal out*)
	END_VAR
	VAR_OUTPUT
		fun_curs_in: BOOL:=FALSE;
			(*enable cursor function in*)
		fun_curs_out: BOOL:=FALSE;
			(*enable cursor function out*)
		analog_sign: REAL:=0.0;
			(*extern analog signal button*)
		led_curs_in: BOOL:=FALSE;
			(*led cursor in*)
		led_curs_out: BOOL:=FALSE;
			(*led cursor out*)
	END_VAR
	VAR_EXTERNAL
		MXflashSignal: BOOL:=FALSE;
			(*flash signal*)
	END_VAR
	VAR 
		LXfunCursOut: BOOL:=FALSE;
		LXfunCursIn: BOOL:=FALSE;
		LDanalogOut: REAL:=0.0;
			(*analog signal +/- 50%*)
	END_VAR
'FBD'
BODY
    WORKSPACE
        NETWORK_LIST_TYPE := NWTYPEFBD ;
        ACTIVE_NETWORK := 0 ;
    END_WORKSPACE
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 28 ;
        NETWORK_BODY
B(B_COMMENT,,cursor up and down function,1,1,27,2,);
B(B_VARIN,,but_curs_out,9,6,11,8,);
B(B_VARIN,,but_curs_in,9,7,11,9,);
B(B_F,@AND-4,,15,3,20,9,0N0N);
B(B_VARIN,,enable_function,9,4,11,6,);
B(B_F,@AND-4,,15,9,20,15,0NN);
B(B_VARIN,,extern,9,5,11,7,);
B(B_F,@AND-4,,15,15,20,21,000N);
B(B_F,@AND-4,,15,21,20,27,00N);
B(B_VARIN,,signal_out,9,18,11,20,);
B(B_VARIN,,signal_in,9,19,11,21,);
B(B_F,@OR-2,,23,6,28,10,);
B(B_VAROUT,,fun_curs_out,28,7,30,9,);
B(B_F,@OR-2,,23,12,28,16,);
B(B_VAROUT,,fun_curs_in,28,13,30,15,);
B(B_VAROUT,,LXfunCursOut,21,4,23,6,);
B(B_VAROUT,,LXfunCursIn,22,10,24,12,);
L(11,8,15,8);
L(11,7,15,7);
L(11,6,15,6);
L(11,5,15,5);
L(14,11,15,11);
L(13,12,15,12);
L(12,7,12,13);
L(12,13,15,13);
L(11,8,11,14);
L(11,14,15,14);
L(14,17,15,17);
L(14,23,15,23);
L(14,5,14,23);
L(13,18,15,18);
L(13,24,15,24);
L(13,6,13,24);
L(11,19,15,19);
L(11,20,15,20);
L(12,19,12,25);
L(12,25,15,25);
L(11,20,11,26);
L(11,26,15,26);
L(20,5,21,5);
L(21,8,23,8);
L(20,11,22,11);
L(22,14,23,14);
L(20,17,21,17);
L(21,9,23,9);
L(20,23,22,23);
L(22,15,23,15);
L(21,9,21,17);
L(21,5,21,8);
L(22,11,22,14);
L(22,15,22,23);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_COMMENT,,cursor analog signal,1,1,27,2,);
B(B_F,sel,,11,3,16,8,);
B(B_VAROUT,,LDanalogOut,16,4,18,6,);
B(B_VARIN,,LDanalogOut,9,5,11,7,);
B(B_VARIN,,analog_sign_out,9,6,11,8,);
B(B_VARIN,,LXfunCursIn,9,4,11,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_F,sel,,25,1,30,6,);
B(B_VAROUT,,LDanalogOut,30,2,32,4,);
B(B_VARIN,,LDanalogOut,23,3,25,5,);
B(B_VARIN,,LXfunCursOut,23,2,25,4,);
B(B_F,@MUL-2,,11,3,16,7,);
B(B_VARIN,,analog_sign_in,9,4,11,6,);
B(B_VARIN,,-1.0,9,5,11,7,);
L(16,5,25,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_VARIN,,LXfunCursOut,9,2,11,4,);
B(B_VARIN,,LXfunCursIn,9,3,11,5,);
B(B_F,@OR-2,,11,1,16,5,);
B(B_F,sel,,18,3,23,8,);
B(B_VAROUT,,analog_sign,23,4,25,6,);
B(B_VARIN,,0.0,16,5,18,7,);
B(B_VARIN,,LDanalogOut,16,6,18,8,);
L(17,5,18,5);
L(16,3,17,3);
L(17,3,17,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 16 ;
        NETWORK_BODY
B(B_COMMENT,,led control cursor in,1,1,28,2,);
B(B_VARIN,,stop_sign_in,9,5,11,7,);
B(B_VARIN,,extern,9,6,11,8,);
B(B_VARIN,,enable_function,9,4,11,6,);
B(B_F,@AND-3,,14,3,19,8,0NN);
B(B_F,@OR-2,,21,3,26,7,);
B(B_VAROUT,,led_curs_in,26,4,28,6,);
B(B_F,@AND-5,,14,8,19,15,0N);
B(B_VARIN,,MXflashSignal,12,12,14,14,);
B(B_VARIN,,signal_in,12,13,14,15,);
L(12,6,12,11);
L(11,7,11,12);
L(11,12,14,12);
L(20,6,20,10);
L(11,7,14,7);
L(11,6,14,6);
L(12,11,14,11);
L(19,5,21,5);
L(20,6,21,6);
L(11,5,14,5);
L(13,5,13,10);
L(13,10,14,10);
L(19,10,20,10);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 17 ;
        NETWORK_BODY
B(B_COMMENT,,led control cursor out,1,1,28,2,);
B(B_VARIN,,extern,9,6,11,8,);
B(B_VARIN,,stop_sign_out,9,5,11,7,);
B(B_VARIN,,enable_function,9,4,11,6,);
B(B_F,@AND-3,,14,3,19,8,0NN);
B(B_F,@OR-2,,21,3,26,7,);
B(B_VAROUT,,led_curs_out,26,4,28,6,);
B(B_F,@AND-5,,14,9,19,16,0N);
B(B_VARIN,,MXflashSignal,12,13,14,15,);
B(B_VARIN,,signal_out,12,14,14,16,);
L(12,6,12,12);
L(11,7,11,13);
L(11,13,14,13);
L(20,6,20,11);
L(11,7,14,7);
L(11,6,14,6);
L(12,12,14,12);
L(19,5,21,5);
L(20,6,21,6);
L(11,5,14,5);
L(13,5,13,11);
L(13,11,14,11);
L(19,11,20,11);
        END_NETWORK_BODY
    END_NET_WORK
END_BODY
END_FUNCTION_BLOCK

FUNCTION_BLOCK FB_demuxV010
	VAR_INPUT 
		iqr_1: REAL:=0.0;
		iqr_2: REAL:=0.0;
		iqr_3: REAL:=0.0;
		iqr_4: REAL:=0.0;
		iqr_5: REAL:=0.0;
		ir_input: REAL:=0.0;
		iw_number: UINT:=0;
	END_VAR
	VAR_OUTPUT
		qr_1: REAL:=0.0;
		qr_2: REAL:=0.0;
		qr_3: REAL:=0.0;
		qr_4: REAL:=0.0;
		qr_5: REAL:=0.0;
	END_VAR
'FBD'
BODY
    WORKSPACE
        NETWORK_LIST_TYPE := NWTYPEFBD ;
        ACTIVE_NETWORK := 0 ;
    END_WORKSPACE
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_VARIN,,iw_number,11,2,13,4,);
B(B_VARIN,,1,11,3,13,5,);
B(B_VARIN,,ir_input,16,6,18,8,);
B(B_F,sel,,18,3,23,8,);
B(B_VARIN,,iqr_1,16,5,18,7,);
B(B_VAROUT,,qr_1,23,4,25,6,);
B(B_F,@EQ-2,,13,1,18,5,);
L(18,3,18,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_VARIN,,iw_number,11,2,13,4,);
B(B_VARIN,,2,11,3,13,5,);
B(B_VARIN,,ir_input,16,6,18,8,);
B(B_F,sel,,18,3,23,8,);
B(B_VARIN,,iqr_2,16,5,18,7,);
B(B_VAROUT,,qr_2,23,4,25,6,);
B(B_F,@EQ-2,,13,1,18,5,);
L(18,3,18,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_VARIN,,iw_number,11,2,13,4,);
B(B_VARIN,,3,11,3,13,5,);
B(B_VARIN,,ir_input,16,6,18,8,);
B(B_F,sel,,18,3,23,8,);
B(B_VARIN,,iqr_3,16,5,18,7,);
B(B_VAROUT,,qr_3,23,4,25,6,);
B(B_F,@EQ-2,,13,1,18,5,);
L(18,3,18,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_VARIN,,iw_number,11,2,13,4,);
B(B_VARIN,,4,11,3,13,5,);
B(B_VARIN,,ir_input,16,6,18,8,);
B(B_F,sel,,18,3,23,8,);
B(B_VARIN,,iqr_4,16,5,18,7,);
B(B_VAROUT,,qr_4,23,4,25,6,);
B(B_F,@EQ-2,,13,1,18,5,);
L(18,3,18,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_VARIN,,iw_number,11,2,13,4,);
B(B_VARIN,,5,11,3,13,5,);
B(B_VARIN,,ir_input,16,6,18,8,);
B(B_F,sel,,18,3,23,8,);
B(B_VARIN,,iqr_5,16,5,18,7,);
B(B_VAROUT,,qr_5,23,4,25,6,);
B(B_F,@EQ-2,,13,1,18,5,);
L(18,3,18,5);
        END_NETWORK_BODY
    END_NET_WORK
END_BODY
END_FUNCTION_BLOCK

FUNCTION_BLOCK FB_filterUnV010
	VAR_INPUT 
		in: REAL:=0.0;
			(*input signal filter [x.xx]*)
		timeUp: REAL:=0.0;
			(*filter time up [s]*)
		timeDown: REAL:=0.0;
			(*filter time down [s]*)
	END_VAR
	VAR_OUTPUT
		outFiltered1: REAL:=0.0;
			(*output signal filtered 1 [x.xx]*)
		outFiltered2: REAL:=0.0;
			(*output signal filtered 2 [x.xx]*)
		outFiltered3: REAL:=0.0;
			(*output signal filtered 3 [x.xx]*)
	END_VAR
	VAR 
		LDintegTimeUp: REAL:=0.0;
			(*integration time filter up [x.xx/s]*)
		LDintegTimeDown: REAL:=0.0;
			(*integration time filter down [x.xx/s]*)
		LDfilterTimeUp1: REAL:=0.0;
			(*filter time up 1 [x.xx/s]*)
		LDfilterTimeDo1: REAL:=0.0;
			(*filter time down 1 [x.xx/s]*)
		LDfilterTimeUp2: REAL:=0.0;
			(*filter time up 2 [x.xx/s]*)
		LDfilterTimeDo2: REAL:=0.0;
			(*filter time down 2 [x.xx/s]*)
		LDfilterTimeUp3: REAL:=0.0;
			(*filter time up 3 [x.xx/s]*)
		LDfilterTimeDo3: REAL:=0.0;
			(*filter time down 3 [x.xx/s]*)
		Integrator1: Integrator;
		Integrator2: Integrator;
		Integrator3: Integrator;
	END_VAR
'FBD'
BODY
    WORKSPACE
        NETWORK_LIST_TYPE := NWTYPEFBD ;
        ACTIVE_NETWORK := 0 ;
    END_WORKSPACE
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_F,@LE-2,,11,1,16,5,);
B(B_VARIN,,timeUp,9,2,11,4,);
B(B_VARIN,,0.0,9,3,11,5,);
B(B_JUMP,,error,16,2,18,4,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_F,@LE-2,,11,1,16,5,);
B(B_VARIN,,timeDown,9,2,11,4,);
B(B_VARIN,,0.0,9,3,11,5,);
B(B_JUMP,,error,16,2,18,4,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_F,@DIV,,11,1,16,5,);
B(B_VAROUT,,LDintegTimeUp,16,2,18,4,);
B(B_VARIN,,1.0,9,2,11,4,);
B(B_VARIN,,timeUp,9,3,11,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_F,@DIV,,11,1,16,5,);
B(B_VAROUT,,LDintegTimeDown,16,2,18,4,);
B(B_VARIN,,1.0,9,2,11,4,);
B(B_VARIN,,timeDown,9,3,11,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_F,abs,,16,4,21,7,);
B(B_VARIN,,in,9,5,11,7,);
B(B_VARIN,,outFiltered1,9,6,11,8,);
B(B_F,@SUB,,11,4,16,8,);
B(B_F,@MUL-2,,23,1,28,5,);
B(B_VAROUT,,LDfilterTimeDo1,28,7,30,9,);
B(B_F,@MUL-2,,23,6,28,10,);
B(B_VARIN,,LDintegTimeUp,21,2,23,4,);
B(B_VARIN,,LDintegTimeDown,21,8,23,10,);
B(B_VAROUT,,LDfilterTimeUp1,28,2,30,4,);
L(22,4,23,4);
L(22,4,22,8);
L(22,8,23,8);
L(21,6,22,6);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_FB,Integrator,Integrator1,11,2,20,8,);
B(B_VARIN,,TRUE,9,3,11,5,);
B(B_VARIN,,in,9,4,11,6,);
B(B_VARIN,,LDfilterTimeUp1,9,5,11,7,);
B(B_VARIN,,LDfilterTimeDo1,9,6,11,8,);
B(B_VAROUT,,outFiltered1,20,3,22,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_F,@SUB,,11,4,16,8,);
B(B_VARIN,,outFiltered1,9,5,11,7,);
B(B_VARIN,,outFiltered2,9,6,11,8,);
B(B_F,abs,,16,4,21,7,);
B(B_F,@MUL-2,,23,1,28,5,);
B(B_VAROUT,,LDfilterTimeDo2,28,7,30,9,);
B(B_F,@MUL-2,,23,6,28,10,);
B(B_VARIN,,LDintegTimeUp,21,2,23,4,);
B(B_VARIN,,LDintegTimeDown,21,8,23,10,);
B(B_VAROUT,,LDfilterTimeUp2,28,2,30,4,);
L(22,4,23,4);
L(22,4,22,8);
L(22,8,23,8);
L(21,6,22,6);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_FB,Integrator,Integrator2,11,2,20,8,);
B(B_VARIN,,TRUE,9,3,11,5,);
B(B_VARIN,,outFiltered1,9,4,11,6,);
B(B_VARIN,,LDfilterTimeUp2,9,5,11,7,);
B(B_VARIN,,LDfilterTimeDo2,9,6,11,8,);
B(B_VAROUT,,outFiltered2,20,3,22,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_F,@SUB,,11,4,16,8,);
B(B_VARIN,,outFiltered2,9,5,11,7,);
B(B_VARIN,,outFiltered3,9,6,11,8,);
B(B_F,abs,,16,4,21,7,);
B(B_F,@MUL-2,,23,1,28,5,);
B(B_VAROUT,,LDfilterTimeDo3,28,7,30,9,);
B(B_F,@MUL-2,,23,6,28,10,);
B(B_VARIN,,LDintegTimeUp,21,2,23,4,);
B(B_VARIN,,LDintegTimeDown,21,8,23,10,);
B(B_VAROUT,,LDfilterTimeUp3,28,2,30,4,);
L(22,4,23,4);
L(22,4,22,8);
L(22,8,23,8);
L(21,6,22,6);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_FB,Integrator,Integrator3,11,2,20,8,);
B(B_VARIN,,TRUE,9,3,11,5,);
B(B_VARIN,,outFiltered2,9,4,11,6,);
B(B_VARIN,,LDfilterTimeUp3,9,5,11,7,);
B(B_VARIN,,LDfilterTimeDo3,9,6,11,8,);
B(B_VAROUT,,outFiltered3,20,3,22,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,TRUE,9,1,11,3,);
B(B_RETURN,,,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL := error: ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,in,9,1,11,3,);
B(B_VAROUT,,outFiltered1,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,in,9,1,11,3,);
B(B_VAROUT,,outFiltered2,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,in,9,1,11,3,);
B(B_VAROUT,,outFiltered3,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
END_BODY
END_FUNCTION_BLOCK

FUNCTION_BLOCK FB_functX25V010
	VAR_INPUT 
		button: BOOL:=FALSE;
			(*input button*)
		extern: BOOL:=FALSE;
			(*input extern*)
		release_function: BOOL:=FALSE;
			(*release button*)
		reset_function: BOOL:=FALSE;
			(*reset function*)
	END_VAR
	VAR_OUTPUT
		enable_function: BOOL:=FALSE;
			(*enable*)
		presel_function: BOOL:=FALSE;
			(*preselection function*)
	END_VAR
	VAR 
		R_TRIG1: R_TRIG;
		F_TRIG1: F_TRIG;
		RS1: RS;
	END_VAR
'FBD'
BODY
    WORKSPACE
        NETWORK_LIST_TYPE := NWTYPEFBD ;
        ACTIVE_NETWORK := 0 ;
    END_WORKSPACE
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 21 ;
        NETWORK_BODY
B(B_FB,R_TRIG,R_TRIG1,11,5,18,8,);
B(B_F,@OR-2,,20,5,25,9,);
B(B_VARIN,,button,9,6,11,8,);
B(B_COMMENT,,preselection button x25,1,1,27,2,);
B(B_F,@AND-2,,28,4,33,8,);
B(B_FB,RS,RS1,35,4,40,8,);
B(B_VAROUT,,enable_function,40,5,42,7,);
B(B_VARIN,,release_function,24,3,26,5,);
B(B_F,@AND-2,,20,9,25,13,);
B(B_FB,F_TRIG,F_TRIG1,11,14,18,17,);
B(B_VARIN,,extern,9,7,11,9,);
B(B_F,@AND-2,,20,13,25,17,);
B(B_F,@OR-4,,28,12,33,18,00N);
B(B_VARIN,,release_function,24,17,26,19,);
B(B_VARIN,,reset_function,25,18,27,20,);
B(B_VAROUT,,presel_function,34,2,36,4,);
B(B_VARIN,,enable_function,17,11,19,13,);
L(18,7,20,7);
L(25,7,28,7);
L(26,4,26,6);
L(26,6,28,6);
L(33,6,35,6);
L(19,7,19,11);
L(19,11,20,11);
L(18,16,20,16);
L(19,12,19,15);
L(19,15,20,15);
L(11,8,20,8);
L(11,8,11,16);
L(34,7,35,7);
L(25,15,28,15);
L(25,11,26,11);
L(26,11,26,14);
L(26,14,28,14);
L(26,16,28,16);
L(26,16,26,18);
L(27,17,28,17);
L(27,17,27,19);
L(33,14,34,14);
L(34,7,34,14);
L(34,3,34,6);
L(19,12,20,12);
        END_NETWORK_BODY
    END_NET_WORK
END_BODY
END_FUNCTION_BLOCK

FUNCTION_BLOCK FB_joy2_10fuV010
	VAR_INPUT 
		analog_in: REAL:=0.0;
			(*analog input signal *)
		stop_main: BOOL:=FALSE;
			(*stop main function*)
		channel1: BOOL:=FALSE;
			(*channel 1 preselected*)
		channel2: BOOL:=FALSE;
			(*channel 2 preselected*)
		channel3: BOOL:=FALSE;
			(*channel 3 preselected*)
		channel4: BOOL:=FALSE;
			(*channel 4 preselected*)
		channel5: BOOL:=FALSE;
			(*channel 5 preselected*)
		channel6: BOOL:=FALSE;
			(*channel 6 preselected*)
		channel7: BOOL:=FALSE;
			(*channel 7 preselected*)
		channel8: BOOL:=FALSE;
			(*channel 8 preselected*)
		channel9: BOOL:=FALSE;
			(*channel 9 preselected*)
		channel10: BOOL:=FALSE;
			(*channel 10 preselected*)
		pump_zero_main: BOOL:=FALSE;
			(*pump in zero position main function*)
		pump_zero_out1: BOOL:=FALSE;
			(*pump in zero position output 1*)
		pump_zero_out2: BOOL:=FALSE;
			(*pump in zero position output 2*)
		pump_zero_out3: BOOL:=FALSE;
			(*pump in zero position output 3*)
		pump_zero_out4: BOOL:=FALSE;
			(*pump in zero position output 4*)
		pump_zero_out5: BOOL:=FALSE;
			(*pump in zero position output 5*)
		pump_zero_out6: BOOL:=FALSE;
			(*pump in zero position output 6*)
		pump_zero_out7: BOOL:=FALSE;
			(*pump in zero position output 7*)
		pump_zero_out8: BOOL:=FALSE;
			(*pump in zero position output 8*)
		pump_zero_out9: BOOL:=FALSE;
			(*pump in zero position output 9*)
		pump_zero_out10: BOOL:=FALSE;
			(*pump in zero position output 10*)
		sym_stop_main: REAL:=0.0;
			(*symbol number stop main function*)
		sym_main: REAL:=0.0;
			(*symbol number main function*)
		sym_ch1: REAL:=0.0;
			(*symbol number channel 1 function*)
		sym_ch2: REAL:=0.0;
			(*symbol number channel 2 function*)
		sym_ch3: REAL:=0.0;
			(*symbol number channel 3 function*)
		sym_ch4: REAL:=0.0;
			(*symbol number channel 4 function*)
		sym_ch5: REAL:=0.0;
			(*symbol number channel 5 function*)
		sym_ch6: REAL:=0.0;
			(*symbol number channel 6 function*)
		sym_ch7: REAL:=0.0;
			(*symbol number channel 7 function*)
		sym_ch8: REAL:=0.0;
			(*symbol number channel 8 function*)
		sym_ch9: REAL:=0.0;
			(*symbol number channel 9 function*)
		sym_ch10: REAL:=0.0;
			(*symbol number channel 10 function*)
	END_VAR
	VAR_OUTPUT
		analog_main: REAL:=0.0;
			(*analog output main*)
		analog_out1: REAL:=0.0;
			(*analog output signal channel 1*)
		analog_out2: REAL:=0.0;
			(*analog output signal channel 2*)
		analog_out3: REAL:=0.0;
			(*analog output signal channel 3*)
		analog_out4: REAL:=0.0;
			(*analog output signal channel 4*)
		analog_out5: REAL:=0.0;
			(*analog output signal channel 5*)
		analog_out6: REAL:=0.0;
			(*analog output signal channel 6*)
		analog_out7: REAL:=0.0;
			(*analog output signal channel 7*)
		analog_out8: REAL:=0.0;
			(*analog output signal channel 8*)
		analog_out9: REAL:=0.0;
			(*analog output signal channel 9*)
		analog_out10: REAL:=0.0;
			(*analog output signal channel 10*)
		stop_main_funct: BOOL:=FALSE;
			(*stop main function*)
		release1: BOOL:=FALSE;
			(*release channel 1*)
		release2: BOOL:=FALSE;
			(*release channel 2*)
		release3: BOOL:=FALSE;
			(*release channel 3*)
		release4: BOOL:=FALSE;
			(*release channel 4*)
		release5: BOOL:=FALSE;
			(*release channel 5*)
		release6: BOOL:=FALSE;
			(*release channel 6*)
		release7: BOOL:=FALSE;
			(*release channel 7*)
		release8: BOOL:=FALSE;
			(*release channel 8*)
		release9: BOOL:=FALSE;
			(*release channel 8*)
		release10: BOOL:=FALSE;
			(*release channel 8*)
		symbol: REAL:=0.0;
			(*symbol *)
	END_VAR
	VAR 
		LXjoyStickZero: BOOL:=FALSE;
			(*joystick signal in zero position*)
		LXblinkSymb: BOOL:=FALSE;
		LX1: BOOL:=FALSE;
		RS1: RS;
		RS2: RS;
		RS3: RS;
		RS4: RS;
		RS5: RS;
		RS6: RS;
		RS7: RS;
		RS8: RS;
		RS9: RS;
		RS10: RS;
		SR1: SR;
	END_VAR
'FBD'
BODY
    WORKSPACE
        NETWORK_LIST_TYPE := NWTYPEFBD ;
        ACTIVE_NETWORK := 0 ;
    END_WORKSPACE
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_COMMENT,,joystick in zero position,1,1,27,2,);
B(B_VARIN,,analog_in,9,4,11,6,);
B(B_VARIN,,0.0,9,5,11,7,);
B(B_F,@EQ-2,,11,3,16,7,);
B(B_VAROUT,,LXjoyStickZero,16,4,18,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 54 ;
        NETWORK_BODY
B(B_VARIN,,0,12,5,14,7,);
B(B_F,sel,,16,3,21,8,);
B(B_VARIN,,channel1,14,4,16,6,);
B(B_F,sel,,16,8,21,13,);
B(B_F,sel,,16,13,21,18,);
B(B_F,sel,,16,18,21,23,);
B(B_VARIN,,channel4,11,19,13,21,);
B(B_VARIN,,channel3,11,14,13,16,);
B(B_VARIN,,channel2,11,9,13,11,);
B(B_F,to_uint,,6,6,13,9,);
B(B_VARIN,,1,4,7,6,9,);
B(B_F,@EQ-2,,38,3,43,7,);
B(B_VARIN,,1,36,5,38,7,);
B(B_VARIN,,pump_zero_main,43,7,45,9,);
B(B_VARIN,,pump_zero_out1,43,8,45,10,);
B(B_VARIN,,pump_zero_out2,43,9,45,11,);
B(B_VARIN,,pump_zero_out3,43,10,45,12,);
B(B_VARIN,,pump_zero_out4,43,11,45,13,);
B(B_VAROUT,,LX1,50,6,52,8,);
B(B_COMMENT,,preselection set enable,1,1,27,2,);
B(B_F,sel,,16,23,21,28,);
B(B_F,sel,,16,28,21,33,);
B(B_VARIN,,channel6,11,29,13,31,);
B(B_VARIN,,channel5,11,24,13,26,);
B(B_F,sel,,16,33,21,38,);
B(B_F,sel,,16,48,21,53,);
B(B_VARIN,,channel10,11,49,13,51,);
B(B_VARIN,,channel7,11,34,13,36,);
B(B_VARIN,,pump_zero_out5,43,12,45,14,);
B(B_VARIN,,pump_zero_out6,43,13,45,15,);
B(B_VARIN,,pump_zero_out7,43,14,45,16,);
B(B_VARIN,,pump_zero_out8,43,15,45,17,);
B(B_VARIN,,pump_zero_out9,43,16,45,18,);
B(B_VARIN,,pump_zero_out10,43,17,45,19,);
B(B_F,sel,,16,38,21,43,);
B(B_VARIN,,channel8,11,39,13,41,);
B(B_F,sel,,16,43,21,48,);
B(B_VARIN,,channel9,11,44,13,46,);
B(B_F,@ADD-10,,31,3,36,15,);
B(B_VARIN,,LXjoyStickZero,43,18,45,20,);
B(B_F,@AND-13,,45,5,50,20,);
L(23,7,23,15);
L(22,6,22,10);
L(14,6,16,6);
L(14,7,16,7);
L(21,10,22,10);
L(13,20,16,20);
L(13,15,16,15);
L(14,12,16,12);
L(13,10,16,10);
L(15,11,16,11);
L(15,16,16,16);
L(14,17,16,17);
L(15,21,16,21);
L(14,22,16,22);
L(21,20,24,20);
L(21,15,23,15);
L(13,8,14,8);
L(24,8,31,8);
L(23,7,31,7);
L(43,5,44,5);
L(44,5,44,7);
L(13,30,16,30);
L(13,25,16,25);
L(15,26,16,26);
L(14,27,16,27);
L(15,31,16,31);
L(14,32,16,32);
L(13,50,16,50);
L(13,35,16,35);
L(15,36,16,36);
L(14,37,16,37);
L(15,51,16,51);
L(14,52,16,52);
L(24,8,24,20);
L(21,25,25,25);
L(21,30,26,30);
L(21,35,27,35);
L(21,50,30,50);
L(25,9,25,25);
L(25,9,31,9);
L(26,10,26,30);
L(26,10,31,10);
L(27,11,27,35);
L(27,11,31,11);
L(15,6,15,51);
L(14,7,14,52);
L(13,40,16,40);
L(15,41,16,41);
L(14,42,16,42);
L(13,45,16,45);
L(15,46,16,46);
L(14,47,16,47);
L(29,13,31,13);
L(29,13,29,45);
L(28,12,31,12);
L(28,12,28,40);
L(21,40,28,40);
L(21,45,29,45);
L(30,14,31,14);
L(21,5,31,5);
L(36,5,38,5);
L(22,6,31,6);
L(30,14,30,50);
L(44,7,45,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_COMMENT,,channel 1,1,1,27,2,);
B(B_FB,RS,RS1,25,3,30,7,);
B(B_VARIN,,channel1,9,4,11,6,);
B(B_VARIN,,LX1,9,5,11,7,);
B(B_VAROUT,,release1,31,4,33,6,);
B(B_F,sel,,32,6,37,11,);
B(B_VARIN,,0.0,30,8,32,10,);
B(B_VARIN,,analog_in,30,9,32,11,);
B(B_VAROUT,,analog_out1,37,7,39,9,);
B(B_F,@AND-2,,11,3,16,7,);
B(B_F,@AND-3,,18,7,23,12,NN);
B(B_VARIN,,pump_zero_out1,16,10,18,12,);
B(B_VARIN,,channel1,16,9,18,11,);
L(24,6,24,9);
L(24,6,25,6);
L(17,5,17,9);
L(30,5,31,5);
L(31,8,32,8);
L(31,5,31,8);
L(16,5,25,5);
L(17,9,18,9);
L(23,9,24,9);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_COMMENT,,channel 2,1,1,27,2,);
B(B_FB,RS,RS2,25,3,30,7,);
B(B_VARIN,,channel2,9,4,11,6,);
B(B_VARIN,,LX1,9,5,11,7,);
B(B_VAROUT,,release2,31,4,33,6,);
B(B_F,sel,,32,6,37,11,);
B(B_VARIN,,0.0,30,8,32,10,);
B(B_VARIN,,analog_in,30,9,32,11,);
B(B_VAROUT,,analog_out2,37,7,39,9,);
B(B_F,@AND-2,,11,3,16,7,);
B(B_VARIN,,pump_zero_out2,16,10,18,12,);
B(B_F,@AND-3,,18,7,23,12,NN);
B(B_VARIN,,channel2,16,9,18,11,);
L(24,6,24,9);
L(24,6,25,6);
L(17,5,17,9);
L(30,5,31,5);
L(31,8,32,8);
L(31,5,31,8);
L(16,5,25,5);
L(17,9,18,9);
L(23,9,24,9);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_COMMENT,,channel 3,1,1,27,2,);
B(B_FB,RS,RS3,25,3,30,7,);
B(B_VARIN,,channel3,9,4,11,6,);
B(B_VARIN,,LX1,9,5,11,7,);
B(B_VAROUT,,release3,31,4,33,6,);
B(B_F,sel,,32,6,37,11,);
B(B_VARIN,,0.0,30,8,32,10,);
B(B_VARIN,,analog_in,30,9,32,11,);
B(B_VAROUT,,analog_out3,37,7,39,9,);
B(B_F,@AND-2,,11,3,16,7,);
B(B_F,@AND-3,,18,7,23,12,NN);
B(B_VARIN,,pump_zero_out3,16,10,18,12,);
B(B_VARIN,,channel3,16,9,18,11,);
L(23,9,24,9);
L(24,6,24,9);
L(24,6,25,6);
L(17,5,17,9);
L(17,9,18,9);
L(30,5,31,5);
L(31,8,32,8);
L(31,5,31,8);
L(16,5,25,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_COMMENT,,channel 4,1,1,27,2,);
B(B_FB,RS,RS4,25,3,30,7,);
B(B_VARIN,,channel4,9,4,11,6,);
B(B_VARIN,,LX1,9,5,11,7,);
B(B_VAROUT,,release4,31,4,33,6,);
B(B_F,sel,,32,6,37,11,);
B(B_VARIN,,0.0,30,8,32,10,);
B(B_VARIN,,analog_in,30,9,32,11,);
B(B_VAROUT,,analog_out4,37,7,39,9,);
B(B_F,@AND-2,,11,3,16,7,);
B(B_F,@AND-3,,18,7,23,12,NN);
B(B_VARIN,,pump_zero_out4,16,10,18,12,);
B(B_VARIN,,channel4,16,9,18,11,);
L(24,6,24,9);
L(24,6,25,6);
L(17,5,17,9);
L(30,5,31,5);
L(31,8,32,8);
L(31,5,31,8);
L(16,5,25,5);
L(17,9,18,9);
L(23,9,24,9);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_COMMENT,,channel 5,1,1,27,2,);
B(B_FB,RS,RS5,25,3,30,7,);
B(B_VARIN,,channel5,9,4,11,6,);
B(B_VARIN,,LX1,9,5,11,7,);
B(B_VAROUT,,release5,31,4,33,6,);
B(B_F,sel,,32,6,37,11,);
B(B_VARIN,,0.0,30,8,32,10,);
B(B_VARIN,,analog_in,30,9,32,11,);
B(B_VAROUT,,analog_out5,37,7,39,9,);
B(B_F,@AND-2,,11,3,16,7,);
B(B_F,@AND-3,,18,7,23,12,NN);
B(B_VARIN,,pump_zero_out5,16,10,18,12,);
B(B_VARIN,,channel5,16,9,18,11,);
L(24,6,24,9);
L(24,6,25,6);
L(17,5,17,9);
L(30,5,31,5);
L(31,8,32,8);
L(31,5,31,8);
L(16,5,25,5);
L(17,9,18,9);
L(23,9,24,9);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_COMMENT,,channel 6,1,1,27,2,);
B(B_FB,RS,RS6,25,3,30,7,);
B(B_VARIN,,channel6,9,4,11,6,);
B(B_VARIN,,LX1,9,5,11,7,);
B(B_VAROUT,,release6,31,4,33,6,);
B(B_F,sel,,32,6,37,11,);
B(B_VARIN,,0.0,30,8,32,10,);
B(B_VARIN,,analog_in,30,9,32,11,);
B(B_VAROUT,,analog_out6,37,7,39,9,);
B(B_F,@AND-2,,11,3,16,7,);
B(B_F,@AND-3,,18,7,23,12,NN);
B(B_VARIN,,pump_zero_out6,16,10,18,12,);
B(B_VARIN,,channel6,16,9,18,11,);
L(24,6,24,9);
L(24,6,25,6);
L(17,5,17,9);
L(30,5,31,5);
L(31,8,32,8);
L(31,5,31,8);
L(16,5,25,5);
L(17,9,18,9);
L(23,9,24,9);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_COMMENT,,channel 7,1,1,27,2,);
B(B_FB,RS,RS7,25,3,30,7,);
B(B_VARIN,,channel7,9,4,11,6,);
B(B_VARIN,,LX1,9,5,11,7,);
B(B_VAROUT,,release7,31,4,33,6,);
B(B_F,sel,,32,6,37,11,);
B(B_VARIN,,0.0,30,8,32,10,);
B(B_VARIN,,analog_in,30,9,32,11,);
B(B_VAROUT,,analog_out7,37,7,39,9,);
B(B_F,@AND-2,,11,3,16,7,);
B(B_F,@AND-3,,18,7,23,12,NN);
B(B_VARIN,,pump_zero_out7,16,10,18,12,);
B(B_VARIN,,channel7,16,9,18,11,);
L(24,6,24,9);
L(24,6,25,6);
L(17,5,17,9);
L(30,5,31,5);
L(31,8,32,8);
L(31,5,31,8);
L(16,5,25,5);
L(17,9,18,9);
L(23,9,24,9);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_COMMENT,,channel 8,1,1,27,2,);
B(B_FB,RS,RS8,25,3,30,7,);
B(B_VARIN,,channel8,9,4,11,6,);
B(B_VARIN,,LX1,9,5,11,7,);
B(B_VAROUT,,release8,31,4,33,6,);
B(B_F,sel,,32,6,37,11,);
B(B_VARIN,,0.0,30,8,32,10,);
B(B_VARIN,,analog_in,30,9,32,11,);
B(B_VAROUT,,analog_out8,37,7,39,9,);
B(B_F,@AND-2,,11,3,16,7,);
B(B_F,@AND-3,,18,7,23,12,NN);
B(B_VARIN,,pump_zero_out8,16,10,18,12,);
B(B_VARIN,,channel8,16,9,18,11,);
L(24,6,24,9);
L(24,6,25,6);
L(17,5,17,9);
L(30,5,31,5);
L(31,8,32,8);
L(31,5,31,8);
L(16,5,25,5);
L(17,9,18,9);
L(23,9,24,9);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_COMMENT,,channel 9,1,1,27,2,);
B(B_FB,RS,RS9,25,3,30,7,);
B(B_VARIN,,channel9,9,4,11,6,);
B(B_VARIN,,LX1,9,5,11,7,);
B(B_VAROUT,,release9,31,4,33,6,);
B(B_F,sel,,32,6,37,11,);
B(B_VARIN,,0.0,30,8,32,10,);
B(B_VARIN,,analog_in,30,9,32,11,);
B(B_VAROUT,,analog_out9,37,7,39,9,);
B(B_F,@AND-2,,11,3,16,7,);
B(B_F,@AND-3,,18,7,23,12,NN);
B(B_VARIN,,pump_zero_out9,16,10,18,12,);
B(B_VARIN,,channel9,16,9,18,11,);
L(24,6,24,9);
L(24,6,25,6);
L(17,5,17,9);
L(30,5,31,5);
L(31,8,32,8);
L(31,5,31,8);
L(16,5,25,5);
L(17,9,18,9);
L(23,9,24,9);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_COMMENT,,channel 10,1,1,27,2,);
B(B_FB,RS,RS10,25,3,30,7,);
B(B_VARIN,,channel10,9,4,11,6,);
B(B_VARIN,,LX1,9,5,11,7,);
B(B_VAROUT,,release10,31,4,33,6,);
B(B_F,sel,,32,6,37,11,);
B(B_VARIN,,0.0,30,8,32,10,);
B(B_VARIN,,analog_in,30,9,32,11,);
B(B_VAROUT,,analog_out10,37,7,39,9,);
B(B_F,@AND-2,,11,3,16,7,);
B(B_F,@AND-3,,18,7,23,12,NN);
B(B_VARIN,,pump_zero_out10,16,10,18,12,);
B(B_VARIN,,channel10,16,9,18,11,);
L(24,6,24,9);
L(24,6,25,6);
L(17,5,17,9);
L(30,5,31,5);
L(31,8,32,8);
L(31,5,31,8);
L(16,5,25,5);
L(17,9,18,9);
L(23,9,24,9);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 19 ;
        NETWORK_BODY
B(B_COMMENT,,stop main function,1,1,27,2,);
B(B_VARIN,,release1,9,6,11,8,);
B(B_VARIN,,release2,9,7,11,9,);
B(B_VARIN,,release3,9,8,11,10,);
B(B_VARIN,,release4,9,9,11,11,);
B(B_VARIN,,release5,9,10,11,12,);
B(B_VARIN,,release6,9,11,11,13,);
B(B_VARIN,,release7,9,12,11,14,);
B(B_VARIN,,release8,9,13,11,15,);
B(B_FB,SR,SR1,18,5,23,9,);
B(B_VARIN,,LXjoyStickZero,15,3,17,5,);
B(B_VAROUT,,stop_main_funct,23,6,25,8,);
B(B_VARIN,,release9,9,14,11,16,);
B(B_VARIN,,release10,9,15,11,17,);
B(B_VARIN,,stop_main,9,16,11,18,);
B(B_F,@OR-11,,11,5,16,18,);
L(17,8,18,8);
L(17,4,17,8);
L(16,7,18,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_F,sel,,11,2,16,7,);
B(B_VARIN,,0.0,9,5,11,7,);
B(B_VAROUT,,analog_main,16,3,18,5,);
B(B_VARIN,,analog_in,9,4,11,6,);
B(B_VARIN,,stop_main_funct,9,3,11,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 22 ;
        NETWORK_BODY
B(B_COMMENT,,calculation blinking symbol ,1,1,27,2,);
B(B_F,@OR-10,,11,5,16,17,);
B(B_VARIN,,channel1,9,6,11,8,);
B(B_VARIN,,channel2,9,7,11,9,);
B(B_VARIN,,channel3,9,8,11,10,);
B(B_VARIN,,channel4,9,9,11,11,);
B(B_VARIN,,channel5,9,10,11,12,);
B(B_VARIN,,channel6,9,11,11,13,);
B(B_VARIN,,channel7,9,12,11,14,);
B(B_VARIN,,channel8,9,13,11,15,);
B(B_VARIN,,channel9,9,14,11,16,);
B(B_VARIN,,channel10,9,15,11,17,);
B(B_F,@AND-3,,17,4,22,9,0N);
B(B_VARIN,,stop_main,15,3,17,5,);
B(B_F,NE_R,,11,17,16,21,);
B(B_VARIN,,0.0,9,19,11,21,);
B(B_VARIN,,analog_in,9,18,11,20,);
B(B_VAROUT,,LXblinkSymb,22,5,24,7,);
B(B_COMMENT,,http://jira.zdv.liebherr.i:8080/browse/LWNTBEHSHSSW10511521-60,30,1,69,2,);
L(17,4,17,6);
L(16,7,17,7);
L(17,8,17,19);
L(16,19,17,19);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 22 ;
        NETWORK_BODY
B(B_F,sel,,16,14,21,19,);
B(B_VARIN,,sym_main,14,16,16,18,);
B(B_VARIN,,sym_stop_main,14,17,16,19,);
B(B_F,@AND-2,,11,13,16,17,);
B(B_VARIN,,stop_main,9,14,11,16,);
B(B_VARIN,,stop_main_funct,9,15,11,17,);
B(B_F,sel,,22,13,27,18,);
B(B_VARIN,,release1,20,12,22,14,);
B(B_F,sel,,28,12,33,17,);
B(B_VARIN,,sym_ch2,26,18,28,20,);
B(B_VARIN,,release2,26,11,28,13,);
B(B_VARIN,,sym_ch1,20,19,22,21,);
B(B_F,sel,,34,11,39,16,);
B(B_VARIN,,release3,32,10,34,12,);
B(B_F,sel,,40,10,45,15,);
B(B_VARIN,,sym_ch4,38,16,40,18,);
B(B_VARIN,,release4,38,9,40,11,);
B(B_VARIN,,sym_ch3,32,17,34,19,);
B(B_F,sel,,46,9,51,14,);
B(B_VARIN,,release5,44,8,46,10,);
B(B_F,sel,,52,8,57,13,);
B(B_VARIN,,sym_ch6,50,14,52,16,);
B(B_VARIN,,release6,50,7,52,9,);
B(B_VARIN,,sym_ch5,44,15,46,17,);
B(B_F,sel,,58,7,63,12,);
B(B_VARIN,,release7,56,6,58,8,);
B(B_F,sel,,64,6,69,11,);
B(B_VARIN,,sym_ch8,62,12,64,14,);
B(B_VARIN,,release8,62,5,64,7,);
B(B_VARIN,,sym_ch7,56,13,58,15,);
B(B_COMMENT,,symbol for joystick indication,1,1,27,2,);
B(B_F,sel,,70,5,75,10,);
B(B_VARIN,,release9,68,4,70,6,);
B(B_F,sel,,76,4,81,9,);
B(B_VARIN,,sym_ch10,74,10,76,12,);
B(B_VARIN,,release10,74,3,76,5,);
B(B_VARIN,,sym_ch9,68,11,70,13,);
B(B_VAROUT,,symbol,93,4,95,6,);
B(B_F,sel,,88,3,93,8,);
B(B_F,@ADD-2,,82,7,87,11,);
B(B_VARIN,,100.0,80,9,82,11,);
B(B_VARIN,,LXblinkSymb,85,2,87,4,);
L(16,15,16,16);
L(22,13,22,15);
L(22,17,22,20);
L(21,16,22,16);
L(28,12,28,14);
L(28,16,28,19);
L(27,15,28,15);
L(34,11,34,13);
L(34,15,34,18);
L(33,14,34,14);
L(40,10,40,12);
L(40,14,40,17);
L(39,13,40,13);
L(46,9,46,11);
L(46,13,46,16);
L(45,12,46,12);
L(52,8,52,10);
L(52,12,52,15);
L(51,11,52,11);
L(58,7,58,9);
L(58,11,58,14);
L(57,10,58,10);
L(64,6,64,8);
L(64,10,64,13);
L(63,9,64,9);
L(70,5,70,7);
L(70,9,70,12);
L(69,8,70,8);
L(76,4,76,6);
L(76,8,76,11);
L(75,7,76,7);
L(81,6,88,6);
L(82,6,82,9);
L(87,7,87,9);
L(87,7,88,7);
L(87,3,87,5);
L(87,5,88,5);
        END_NETWORK_BODY
    END_NET_WORK
END_BODY
END_FUNCTION_BLOCK

FUNCTION_BLOCK GPcalcOpHourV020
	VAR_INPUT 
		count_on: BOOL:=FALSE;
			(*counter is operating*)
		reset_rel: BOOL:=FALSE;
			(*reset relative counter*)
		count_rel_old: REAL:=0.0;
			(*counter value old (last scan) relative*)
		count_abs_old: REAL:=0.0;
			(*counter value old (last scan) absolut*)
	END_VAR
	VAR_OUTPUT
		count_rel_new: REAL:=0.0;
			(*counter value new relative*)
		count_abs_new: REAL:=0.0;
			(*counter value new absolut*)
	END_VAR
	VAR 
		LXreset: BOOL:=FALSE;
		LDactTimeValue: REAL:=0.0;
		LDstartTime: REAL:=0.0;
		LDrealTime: REAL:=0.0;
		LDcouRelByStart: REAL:=0.0;
		LDcouAbsByStart: REAL:=0.0;
		R_TRIG1: R_TRIG;
		R_TRIG2: R_TRIG;
	END_VAR
'FBD'
BODY
    WORKSPACE
        NETWORK_LIST_TYPE := NWTYPEFBD ;
        ACTIVE_NETWORK := 0 ;
    END_WORKSPACE
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_F,READ_REAL_ms,,10,3,21,6,);
B(B_F,time_to_real,,21,3,32,6,);
B(B_F,@DIV,,34,3,39,7,);
B(B_VARIN,,3600000.0,31,6,33,8,);
B(B_VAROUT,,LDrealTime,39,4,41,6,);
B(B_COMMENT,,calculate the real Time in houres,1,1,27,2,);
L(32,5,34,5);
L(33,6,34,6);
L(33,6,33,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 5 ;
        NETWORK_BODY
B(B_FB,R_TRIG,R_TRIG1,11,1,18,4,);
B(B_VARIN,,reset_rel,9,2,11,4,);
B(B_VAROUT,,LXreset,18,2,20,4,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 20 ;
        NETWORK_BODY
B(B_F,sel,,24,4,29,9,);
B(B_VAROUT,,LDstartTime,29,5,31,7,);
B(B_F,sel,,24,9,29,14,);
B(B_VAROUT,,LDcouAbsByStart,29,10,31,12,);
B(B_VARIN,,LDstartTime,20,6,22,8,);
B(B_VARIN,,LDrealTime,20,7,22,9,);
B(B_F,sel,,24,14,29,19,);
B(B_VARIN,,LDcouRelByStart,22,16,24,18,);
B(B_VARIN,,count_rel_old,22,17,24,19,);
B(B_VAROUT,,LDcouRelByStart,29,15,31,17,);
B(B_VARIN,,LDcouAbsByStart,20,11,22,13,);
B(B_VARIN,,count_abs_old,20,12,22,14,);
B(B_F,@OR-2,,18,2,23,6,);
B(B_FB,R_TRIG,R_TRIG2,11,2,18,5,);
B(B_VARIN,,count_on,9,3,11,5,);
B(B_VARIN,,LXreset,16,5,18,7,);
L(23,6,24,6);
L(22,7,24,7);
L(22,8,24,8);
L(23,16,24,16);
L(23,11,24,11);
L(22,12,24,12);
L(22,13,24,13);
L(23,4,23,16);
L(18,5,18,6);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_F,@SUB,,11,5,16,9,);
B(B_F,sel,,18,1,23,6,);
B(B_VARIN,,LDrealTime,9,6,11,8,);
B(B_VARIN,,LDstartTime,9,7,11,9,);
B(B_VAROUT,,LDactTimeValue,23,2,25,4,);
B(B_VARIN,,LDactTimeValue,16,3,18,5,);
B(B_VARIN,,count_on,16,2,18,4,);
L(17,5,18,5);
L(17,5,17,7);
L(16,7,17,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 18 ;
        NETWORK_BODY
B(B_F,sel,,19,3,24,8,);
B(B_VAROUT,,count_abs_new,24,4,26,6,);
B(B_F,sel,,19,9,24,14,);
B(B_VARIN,,count_rel_old,17,11,19,13,);
B(B_VARIN,,count_abs_old,15,5,17,7,);
B(B_F,@ADD-2,,11,7,16,11,);
B(B_VARIN,,LDcouAbsByStart,9,8,11,10,);
B(B_VARIN,,LDactTimeValue,9,9,11,11,);
B(B_VARIN,,LDcouRelByStart,9,15,11,17,);
B(B_F,@ADD-2,,11,13,16,17,);
B(B_F,sel,,34,8,39,13,);
B(B_VAROUT,,count_rel_new,39,9,41,11,);
B(B_VARIN,,LXreset,32,9,34,11,);
B(B_VARIN,,0.0,32,11,34,13,);
B(B_F,@AND-2,,13,1,18,5,0N);
B(B_VARIN,,count_on,11,2,13,4,);
B(B_VARIN,,LXreset,11,3,13,5,);
L(17,6,19,6);
L(18,5,19,5);
L(18,11,19,11);
L(19,13,19,15);
L(11,10,11,15);
L(16,15,19,15);
L(19,7,19,9);
L(16,9,19,9);
L(24,11,34,11);
L(18,3,18,11);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_F,sel,,14,6,19,11,);
B(B_VAROUT,,count_rel_new,19,7,21,9,);
B(B_F,sel,,14,1,19,6,);
B(B_VAROUT,,LDcouRelByStart,19,2,21,4,);
B(B_VARIN,,LDcouRelByStart,10,3,12,5,);
B(B_VARIN,,LXreset,11,2,13,4,);
B(B_VARIN,,0.0,10,4,12,6,);
B(B_VARIN,,count_rel_new,9,8,11,10,);
L(13,3,14,3);
L(13,3,13,8);
L(13,8,14,8);
L(11,9,14,9);
L(12,5,14,5);
L(12,5,12,10);
L(12,10,14,10);
L(12,4,14,4);
        END_NETWORK_BODY
    END_NET_WORK
END_BODY
END_FUNCTION_BLOCK

FUNCTION_BLOCK GPfilter10V010
	VAR_INPUT 
		value: REAL:=0.0;
			(*input value*)
		window_value: REAL:=0.0;
			(*window value + / - input*)
	END_VAR
	VAR_OUTPUT
		filtered_value: REAL:=0.0;
			(*filtered value*)
	END_VAR
	VAR 
		valueT_1: REAL:=0.0;
		valueT_2: REAL:=0.0;
		valueT_3: REAL:=0.0;
		valueT_4: REAL:=0.0;
		valueT_5: REAL:=0.0;
		valueT_6: REAL:=0.0;
		valueT_7: REAL:=0.0;
		valueT_8: REAL:=0.0;
		valueT_9: REAL:=0.0;
		FB1: WndComp;
	END_VAR
'FBD'
BODY
    WORKSPACE
        NETWORK_LIST_TYPE := NWTYPEFBD ;
        ACTIVE_NETWORK := 0 ;
    END_WORKSPACE
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 17 ;
        NETWORK_BODY
B(B_VARIN,,value,9,3,11,5,);
B(B_F,@ADD-10,,11,2,16,14,);
B(B_VARIN,,valueT_1,9,4,11,6,);
B(B_VARIN,,valueT_2,9,5,11,7,);
B(B_VARIN,,valueT_3,9,6,11,8,);
B(B_VARIN,,valueT_4,9,7,11,9,);
B(B_VARIN,,valueT_5,9,8,11,10,);
B(B_VARIN,,valueT_6,9,9,11,11,);
B(B_VARIN,,valueT_7,9,10,11,12,);
B(B_VARIN,,valueT_8,9,11,11,13,);
B(B_VARIN,,valueT_9,9,12,11,14,);
B(B_F,@DIV,,21,2,26,6,);
B(B_VARIN,,10.0,19,4,21,6,);
B(B_FB,WndComp,FB1,37,2,44,8,);
B(B_VARIN,,0.0,35,6,37,8,);
B(B_VARIN,,window_value,22,7,24,9,);
B(B_F,@SUB,,26,5,31,9,);
B(B_F,@ADD-2,,26,9,31,13,);
B(B_F,@OR-2,,46,3,51,7,);
B(B_F,sel,,53,5,58,10,);
B(B_VARIN,,filtered_value,51,7,53,9,);
B(B_VAROUT,,filtered_value,58,6,60,8,);
B(B_VARIN,,filtered_value,23,6,25,8,);
L(16,4,21,4);
L(26,4,37,4);
L(24,8,26,8);
L(24,8,24,12);
L(24,12,26,12);
L(33,6,33,11);
L(33,6,37,6);
L(32,5,37,5);
L(32,5,32,7);
L(25,7,26,7);
L(31,7,32,7);
L(25,11,26,11);
L(31,11,33,11);
L(25,7,25,11);
L(44,5,46,5);
L(44,6,46,6);
L(51,5,52,5);
L(52,5,52,7);
L(52,7,53,7);
L(34,4,34,9);
L(34,9,53,9);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,valueT_8,9,1,11,3,);
B(B_VAROUT,,valueT_9,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,valueT_7,9,1,11,3,);
B(B_VAROUT,,valueT_8,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,valueT_6,9,1,11,3,);
B(B_VAROUT,,valueT_7,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,valueT_5,9,1,11,3,);
B(B_VAROUT,,valueT_6,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,valueT_4,9,1,11,3,);
B(B_VAROUT,,valueT_5,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,valueT_3,9,1,11,3,);
B(B_VAROUT,,valueT_4,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,valueT_2,9,1,11,3,);
B(B_VAROUT,,valueT_3,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,valueT_1,9,1,11,3,);
B(B_VAROUT,,valueT_2,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,value,9,1,11,3,);
B(B_VAROUT,,valueT_1,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
END_BODY
END_FUNCTION_BLOCK

FUNCTION_BLOCK GPfilter10V020
	VAR_INPUT 
		value: REAL:=0.0;
			(*input value*)
		window_value: REAL:=0.0;
			(*window value + / - input*)
		number_filt_cycl: UINT:=0;
			(*number of filtered cycles*)
	END_VAR
	VAR_OUTPUT
		filtered_value: REAL:=0.0;
			(*filtered value*)
	END_VAR
	VAR 
		valueT_1: REAL:=0.0;
		valueT_2: REAL:=0.0;
		valueT_3: REAL:=0.0;
		valueT_4: REAL:=0.0;
		valueT_5: REAL:=0.0;
		valueT_6: REAL:=0.0;
		valueT_7: REAL:=0.0;
		valueT_8: REAL:=0.0;
		valueT_9: REAL:=0.0;
		FB1: WndComp;
	END_VAR
'FBD'
BODY
    WORKSPACE
        NETWORK_LIST_TYPE := NWTYPEFBD ;
        ACTIVE_NETWORK := 0 ;
    END_WORKSPACE
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 21 ;
        NETWORK_BODY
B(B_VARIN,,value,21,3,23,5,);
B(B_F,@ADD-10,,23,2,28,14,);
B(B_VARIN,,valueT_1,21,4,23,6,);
B(B_VARIN,,valueT_2,21,5,23,7,);
B(B_VARIN,,valueT_3,21,6,23,8,);
B(B_VARIN,,valueT_4,21,7,23,9,);
B(B_VARIN,,valueT_5,21,8,23,10,);
B(B_VARIN,,valueT_6,21,9,23,11,);
B(B_VARIN,,valueT_7,21,10,23,12,);
B(B_VARIN,,valueT_8,21,11,23,13,);
B(B_VARIN,,valueT_9,21,12,23,14,);
B(B_F,@DIV,,33,2,38,6,);
B(B_FB,WndComp,FB1,49,2,56,8,);
B(B_VARIN,,0.0,47,6,49,8,);
B(B_VARIN,,window_value,34,7,36,9,);
B(B_F,@SUB,,38,5,43,9,);
B(B_F,@ADD-2,,38,9,43,13,);
B(B_F,@OR-2,,58,3,63,7,);
B(B_F,sel,,65,5,70,10,);
B(B_VARIN,,filtered_value,63,7,65,9,);
B(B_VAROUT,,filtered_value,70,6,72,8,);
B(B_VARIN,,filtered_value,35,6,37,8,);
B(B_F,limit,,11,14,17,19,);
B(B_F,uint_to_real,,17,14,28,17,);
B(B_VARIN,,number_filt_cycl,9,16,11,18,);
B(B_VARIN,,1,9,15,11,17,);
B(B_VARIN,,10,9,17,11,19,);
L(28,4,33,4);
L(38,4,49,4);
L(36,8,38,8);
L(36,8,36,12);
L(36,12,38,12);
L(45,6,45,11);
L(45,6,49,6);
L(44,5,49,5);
L(44,5,44,7);
L(37,7,38,7);
L(43,7,44,7);
L(37,11,38,11);
L(43,11,45,11);
L(37,7,37,11);
L(56,5,58,5);
L(56,6,58,6);
L(63,5,64,5);
L(64,5,64,7);
L(64,7,65,7);
L(46,4,46,9);
L(46,9,65,9);
L(28,5,28,16);
L(28,5,33,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_F,@GE-2,,11,1,16,5,);
B(B_VARIN,,number_filt_cycl,9,2,11,4,);
B(B_VARIN,,10,9,3,11,5,);
B(B_F,sel,,16,3,21,8,);
B(B_VAROUT,,valueT_9,21,4,23,6,);
B(B_VARIN,,valueT_8,14,6,16,8,);
B(B_VARIN,,0.0,14,5,16,7,);
L(16,3,16,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_F,@GE-2,,11,1,16,5,);
B(B_VARIN,,number_filt_cycl,9,2,11,4,);
B(B_VARIN,,9,9,3,11,5,);
B(B_F,sel,,16,3,21,8,);
B(B_VAROUT,,valueT_8,21,4,23,6,);
B(B_VARIN,,valueT_7,14,6,16,8,);
B(B_VARIN,,0.0,14,5,16,7,);
L(16,3,16,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_F,@GE-2,,11,1,16,5,);
B(B_VARIN,,number_filt_cycl,9,2,11,4,);
B(B_VARIN,,8,9,3,11,5,);
B(B_F,sel,,16,3,21,8,);
B(B_VAROUT,,valueT_7,21,4,23,6,);
B(B_VARIN,,valueT_6,14,6,16,8,);
B(B_VARIN,,0.0,14,5,16,7,);
L(16,3,16,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_F,@GE-2,,11,1,16,5,);
B(B_VARIN,,number_filt_cycl,9,2,11,4,);
B(B_VARIN,,7,9,3,11,5,);
B(B_F,sel,,16,3,21,8,);
B(B_VAROUT,,valueT_6,21,4,23,6,);
B(B_VARIN,,valueT_5,14,6,16,8,);
B(B_VARIN,,0.0,14,5,16,7,);
L(16,3,16,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_F,@GE-2,,11,1,16,5,);
B(B_VARIN,,number_filt_cycl,9,2,11,4,);
B(B_VARIN,,6,9,3,11,5,);
B(B_F,sel,,16,3,21,8,);
B(B_VAROUT,,valueT_5,21,4,23,6,);
B(B_VARIN,,valueT_4,14,6,16,8,);
B(B_VARIN,,0.0,14,5,16,7,);
L(16,3,16,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_F,@GE-2,,11,1,16,5,);
B(B_VARIN,,number_filt_cycl,9,2,11,4,);
B(B_VARIN,,5,9,3,11,5,);
B(B_F,sel,,16,3,21,8,);
B(B_VAROUT,,valueT_4,21,4,23,6,);
B(B_VARIN,,valueT_3,14,6,16,8,);
B(B_VARIN,,0.0,14,5,16,7,);
L(16,3,16,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_F,@GE-2,,11,1,16,5,);
B(B_VARIN,,number_filt_cycl,9,2,11,4,);
B(B_VARIN,,4,9,3,11,5,);
B(B_F,sel,,16,3,21,8,);
B(B_VAROUT,,valueT_3,21,4,23,6,);
B(B_VARIN,,valueT_2,14,6,16,8,);
B(B_VARIN,,0.0,14,5,16,7,);
L(16,3,16,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_F,@GE-2,,11,1,16,5,);
B(B_VARIN,,number_filt_cycl,9,2,11,4,);
B(B_VARIN,,3,9,3,11,5,);
B(B_F,sel,,16,3,21,8,);
B(B_VAROUT,,valueT_2,21,4,23,6,);
B(B_VARIN,,valueT_1,14,6,16,8,);
B(B_VARIN,,0.0,14,5,16,7,);
L(16,3,16,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_F,@GE-2,,11,1,16,5,);
B(B_VARIN,,number_filt_cycl,9,2,11,4,);
B(B_VARIN,,2,9,3,11,5,);
B(B_F,sel,,16,3,21,8,);
B(B_VAROUT,,valueT_1,21,4,23,6,);
B(B_VARIN,,value,14,6,16,8,);
B(B_VARIN,,0.0,14,5,16,7,);
L(16,3,16,5);
        END_NETWORK_BODY
    END_NET_WORK
END_BODY
END_FUNCTION_BLOCK

FUNCTION_BLOCK GPfilter4InTPV02
	VAR_INPUT 
		in1: UINT:=0;
		in2: UINT:=0;
		in3: UINT:=0;
		in4: UINT:=0;
		CutOffFreuency: REAL:=0.0;
	END_VAR
	VAR_OUTPUT
		out1: UINT:=0;
		out2: UINT:=0;
		out3: UINT:=0;
		out4: UINT:=0;
	END_VAR
	VAR 
		Filter1: FilterTP4;
		Filter2: FilterTP4;
		Filter3: FilterTP4;
		Filter4: FilterTP4;
	END_VAR
'FBD'
BODY
    WORKSPACE
        NETWORK_LIST_TYPE := NWTYPEFBD ;
        ACTIVE_NETWORK := 0 ;
    END_WORKSPACE
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_FB,FilterTP4,Filter1,24,2,33,6,);
B(B_VARIN,,CutOffFreuency,21,5,23,7,);
B(B_VARIN,,in1,9,3,11,5,);
B(B_F,uint_to_real,,11,2,22,5,);
B(B_F,limit,,38,1,44,6,);
B(B_F,real_to_uint,,44,1,55,4,);
B(B_VAROUT,,out1,55,2,57,4,);
B(B_VARIN,,0.0,36,2,38,4,);
B(B_VARIN,,65535.0,36,4,38,6,);
L(23,5,24,5);
L(23,5,23,6);
L(22,4,24,4);
L(33,4,38,4);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_FB,FilterTP4,Filter2,24,2,33,6,);
B(B_VARIN,,CutOffFreuency,21,5,23,7,);
B(B_VARIN,,in2,9,3,11,5,);
B(B_F,uint_to_real,,11,2,22,5,);
B(B_F,real_to_uint,,44,1,55,4,);
B(B_VAROUT,,out2,55,2,57,4,);
B(B_F,limit,,38,1,44,6,);
B(B_VARIN,,0.0,36,2,38,4,);
B(B_VARIN,,65535.0,36,4,38,6,);
L(23,5,24,5);
L(23,5,23,6);
L(22,4,24,4);
L(33,4,38,4);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_FB,FilterTP4,Filter3,24,2,33,6,);
B(B_VARIN,,CutOffFreuency,21,5,23,7,);
B(B_VARIN,,in3,9,3,11,5,);
B(B_F,uint_to_real,,11,2,22,5,);
B(B_F,real_to_uint,,44,1,55,4,);
B(B_VAROUT,,out3,55,2,57,4,);
B(B_F,limit,,38,1,44,6,);
B(B_VARIN,,0.0,36,2,38,4,);
B(B_VARIN,,65535.0,36,4,38,6,);
L(23,5,24,5);
L(23,5,23,6);
L(22,4,24,4);
L(33,4,38,4);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_FB,FilterTP4,Filter4,24,2,33,6,);
B(B_VARIN,,CutOffFreuency,21,5,23,7,);
B(B_VARIN,,in4,9,3,11,5,);
B(B_F,uint_to_real,,11,2,22,5,);
B(B_F,real_to_uint,,44,1,55,4,);
B(B_VAROUT,,out4,55,2,57,4,);
B(B_F,limit,,38,1,44,6,);
B(B_VARIN,,0.0,36,2,38,4,);
B(B_VARIN,,65535.0,36,4,38,6,);
L(23,5,24,5);
L(23,5,23,6);
L(22,4,24,4);
L(33,4,38,4);
        END_NETWORK_BODY
    END_NET_WORK
END_BODY
END_FUNCTION_BLOCK

FUNCTION_BLOCK GPgeoLineV010
	VAR_INPUT 
		irMaxRad: REAL:=0.0;
		irHeadRad: REAL:=0.0;
		irHeadAng: REAL:=0.0;
		irLine1P1Rad: REAL:=0.0;
		irLine1P1Ang: REAL:=0.0;
		irLine1P2Rad: REAL:=0.0;
		irLine1P2Ang: REAL:=0.0;
	END_VAR
	VAR_OUTPUT
		qxStopByColl: BOOL:=FALSE;
		qxStopSlewLeft: BOOL:=FALSE;
		qxStopSlewRight: BOOL:=FALSE;
		qrDistToColl: REAL:=0.0;
		qrLinePoin1Angle: REAL:=0.0;
		qrLinePoin2Angle: REAL:=0.0;
	END_VAR
	VAR 
		LXinitOk: BOOL:=FALSE;
		LXdummy: BOOL:=FALSE;
		LRheadRad: REAL:=0.0;
		LRborderAngle: REAL:=0.0;
		LDcoPoinNum: DINT:=0;
		LAcs1: UDINT:=0;
		LAdummyPoint: UDINT:=0;
		LAdummyVector: UDINT:=0;
		LAvectorHead: UDINT:=0;
		LApointHead: UDINT:=0;
		LApointCenter: UDINT:=0;
		LAlineBoom: UDINT:=0;
		LAline1P1: UDINT:=0;
		LAline1P2: UDINT:=0;
		LAvector1P1P2: UDINT:=0;
		LAline1: UDINT:=0;
		LAvectorToLine: UDINT:=0;
		LAarcMaxRad: UDINT:=0;
		LAcoPoi1RadLine1: UDINT:=0;
		LAcoPoi2RadLine1: UDINT:=0;
		GeoPoint1: GeoGetPoint;
		GeoPoint2: GeoGetPoint;
		GeoDist1: GeoGetXDistance;
		GeoDist2: GeoGetXDistance;
		GeoDist3: GeoGetXDistance;
		GeoDist4: GeoGetXDistance;
		GeoVect1: GeoGetVector;
	END_VAR
'FBD'
BODY
    WORKSPACE
        NETWORK_LIST_TYPE := NWTYPEFBD ;
        ACTIVE_NETWORK := 0 ;
    END_WORKSPACE
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_VARIN,,LXinitOk,9,4,11,6,);
B(B_COMMENT,,init first time,1,1,27,2,);
B(B_F,not,,11,3,16,6,);
B(B_JUMP,,init,16,4,18,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,setze Koordinatensystem,1,1,27,2,);
B(B_COMMENT,,setzt das Koordinatensystem,41,4,63,5,);
B(B_F,GeoSetCoordsys,,11,3,23,10,);
B(B_VARIN,,LAcs1,9,4,11,6,);
B(B_VARIN,,0.0,9,5,11,7,);
B(B_VARIN,,0.0,9,6,11,8,);
B(B_VARIN,,0.0,9,7,11,9,);
B(B_VARIN,,FALSE,9,8,11,10,);
B(B_VAROUT,,LXdummy,23,4,25,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,checke ob benötigte Daten auch vorhanden sind,1,1,27,2,);
B(B_F,EQ_R,,11,3,16,7,);
B(B_F,sel,,16,5,21,10,);
B(B_VAROUT,,LRheadRad,21,6,23,8,);
B(B_VARIN,,irHeadRad,9,5,11,7,);
B(B_VARIN,,0.0,9,4,11,6,);
B(B_VARIN,,1.0,14,8,16,10,);
L(16,5,16,7);
L(11,6,11,8);
L(11,8,16,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 28 ;
        NETWORK_BODY
B(B_COMMENT,,setze Ausleger,1,1,27,2,);
B(B_VARIN,,LAvectorHead,19,4,21,6,);
B(B_VARIN,,LRheadRad,19,5,21,7,);
B(B_VARIN,,irHeadAng,19,6,21,8,);
B(B_VARIN,,LAcs1,9,7,11,9,);
B(B_COMMENT,,setzt den Vektor Ausleger,41,4,63,5,);
B(B_F,GeoSetVectorRPhi,,21,3,35,9,);
B(B_VAROUT,,LXdummy,35,4,37,6,);
B(B_VARIN,,LApointHead,19,10,21,12,);
B(B_VARIN,,LRheadRad,19,11,21,13,);
B(B_VARIN,,irHeadAng,19,12,21,14,);
B(B_COMMENT,,setzt den Auslegerkopf als Punkt,41,10,63,11,);
B(B_F,GeoSetPointRPhi,,21,9,34,15,);
B(B_VARIN,,LApointCenter,19,16,21,18,);
B(B_VARIN,,0.0,19,17,21,19,);
B(B_VARIN,,0.0,19,18,21,20,);
B(B_F,GeoSetPointRPhi,,21,15,34,21,);
B(B_COMMENT,,setzt den Drehmittelpunkt als Punkt,41,16,63,17,);
B(B_VAROUT,,LXdummy,34,10,36,12,);
B(B_VAROUT,,LXdummy,34,16,36,18,);
B(B_COMMENT,,setzt den Ausleger als Liniensegment,41,22,63,23,);
B(B_F,GeoSetLineSeg,,21,21,32,27,);
B(B_VAROUT,,LXdummy,32,22,34,24,);
B(B_VARIN,,LApointHead,19,24,21,26,);
B(B_VARIN,,LApointCenter,19,23,21,25,);
B(B_VARIN,,LAlineBoom,19,22,21,24,);
L(11,8,21,8);
L(11,8,11,26);
L(11,14,21,14);
L(11,20,21,20);
L(11,26,21,26);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 17 ;
        NETWORK_BODY
B(B_F,GeoSetPointRPhi,,34,1,47,7,);
B(B_VARIN,,LAline1P1,32,2,34,4,);
B(B_VARIN,,irLine1P1Rad,32,3,34,5,);
B(B_VARIN,,irLine1P1Ang,32,4,34,6,);
B(B_F,GeoSetPointRPhi,,34,7,47,13,);
B(B_VARIN,,LAline1P2,32,8,34,10,);
B(B_VARIN,,irLine1P2Ang,32,10,34,12,);
B(B_VAROUT,,LXdummy,47,2,49,4,);
B(B_VAROUT,,LXdummy,47,8,49,10,);
B(B_VARIN,,irLine1P1Rad,9,7,11,9,);
B(B_VARIN,,irLine1P2Rad,9,8,11,10,);
B(B_F,@EQ-2,,11,6,16,10,);
B(B_VARIN,,irLine1P2Ang,9,4,11,6,);
B(B_VARIN,,irLine1P1Ang,9,3,11,5,);
B(B_F,@EQ-2,,11,2,16,6,);
B(B_F,@AND-2,,16,5,21,9,);
B(B_F,sel,,21,8,26,13,);
B(B_F,@ADD-2,,16,12,21,16,);
B(B_VARIN,,0.01,14,14,16,16,);
B(B_VARIN,,LAcs1,25,5,27,7,);
B(B_COMMENT,,setze Linie,1,1,27,2,);
L(27,6,34,6);
L(27,12,34,12);
L(27,6,27,12);
L(21,12,21,14);
L(21,7,21,10);
L(16,4,16,7);
L(11,11,21,11);
L(11,9,11,11);
L(16,11,16,14);
L(26,10,34,10);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_VARIN,,LAvector1P1P2,9,2,11,4,);
B(B_VARIN,,10.0,9,3,11,5,);
B(B_VARIN,,0.0,9,4,11,6,);
B(B_F,GeoSetVectorRPhi,,11,1,25,7,);
B(B_VAROUT,,LXdummy,25,2,27,4,);
B(B_VARIN,,LAcs1,9,5,11,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_FB,GeoGetXDistance,GeoDist1,11,2,28,9,);
B(B_VARIN,,LAvector1P1P2,9,7,11,9,);
B(B_VARIN,,LAline1P1,9,3,11,5,);
B(B_VARIN,,LAline1P2,9,4,11,6,);
B(B_VARIN,,LAdummyPoint,9,5,11,7,);
B(B_VARIN,,LAdummyPoint,9,6,11,8,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_F,GeoSetLine,,11,1,20,7,);
B(B_VARIN,,LAline1,9,2,11,4,);
B(B_VARIN,,LAline1P1,9,3,11,5,);
B(B_VARIN,,LAvector1P1P2,9,4,11,6,);
B(B_VARIN,,LAcs1,9,5,11,7,);
B(B_VAROUT,,LXdummy,20,2,22,4,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,checke Kollision Ausleger - Linie,1,1,27,2,);
B(B_FB,GeoGetXDistance,GeoDist2,11,3,28,10,);
B(B_VARIN,,LAline1,9,4,11,6,);
B(B_VARIN,,LAlineBoom,9,5,11,7,);
B(B_VARIN,,LAdummyPoint,9,6,11,8,);
B(B_VARIN,,LAdummyPoint,9,7,11,9,);
B(B_VAROUT,,LDcoPoinNum,28,5,30,7,);
B(B_VARIN,,LAdummyVector,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_VARIN,,LDcoPoinNum,9,2,11,4,);
B(B_VARIN,,0,9,3,11,5,);
B(B_F,@GT-2,,11,1,16,5,);
B(B_VAROUT,,qxStopByColl,16,2,18,4,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_VARIN,,LAline1P1,9,3,11,5,);
B(B_VARIN,,LApointHead,9,4,11,6,);
B(B_F,GeoGetDistance,,11,2,23,6,);
B(B_F,abs,,23,2,28,5,);
B(B_F,sel,,37,1,42,6,);
B(B_VAROUT,,qrDistToColl,42,2,44,4,);
B(B_VARIN,,0.0,35,4,37,6,);
B(B_VARIN,,qxStopByColl,35,2,37,4,);
L(28,4,37,4);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,ermittle den Vektor zwischen Drehmittelpunkt und Linie,1,1,27,2,);
B(B_FB,GeoGetXDistance,GeoDist3,11,3,28,10,);
B(B_VARIN,,LAdummyPoint,9,6,11,8,);
B(B_VARIN,,LAdummyPoint,9,7,11,9,);
B(B_VARIN,,LAvectorToLine,9,8,11,10,);
B(B_COMMENT,,errechne kürzesten Abstand Linie Drehmittelpunkt als Vektorø^der Vektor im rechten Winkel zur Linie auf den Drehmittelpunkt hatø^den Trennwinkel für den Drehwerksstop rechts / links,35,4,59,7,);
B(B_VARIN,,LAline1,9,5,11,7,);
B(B_VARIN,,LApointCenter,9,4,11,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_FB,GeoGetVector,GeoVect1,11,1,22,7,);
B(B_VARIN,,LAvectorToLine,9,2,11,4,);
B(B_VARIN,,LAcs1,9,3,11,5,);
B(B_VAROUT,,LRborderAngle,22,5,24,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_VARIN,,LRborderAngle,9,6,11,8,);
B(B_VARIN,,irHeadAng,9,5,11,7,);
B(B_F,@GE-2,,11,4,16,8,);
B(B_F,@AND-2,,18,3,23,7,);
B(B_VAROUT,,qxStopSlewRight,23,4,25,6,);
B(B_VARIN,,qxStopByColl,15,2,17,4,);
B(B_VARIN,,LRborderAngle,9,10,11,12,);
B(B_VARIN,,irHeadAng,9,9,11,11,);
B(B_F,@LT-2,,11,8,16,12,);
B(B_F,@AND-2,,18,7,23,11,);
B(B_VAROUT,,qxStopSlewLeft,23,8,25,10,);
B(B_COMMENT,,ACHTUNG: Koordinatensystem der GeoLib !!!ø^(Drehrichtung positiv =  gegen den Uhrzeigersinn),35,6,54,8,);
B(B_COMMENT,,setze Richtungsstops Drehwerk~ um bei möglicher Linienüberschreitung zurückdrehen zu können,1,1,36,2,);
L(17,5,18,5);
L(16,10,18,10);
L(17,9,18,9);
L(17,3,17,9);
L(16,6,18,6);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_COMMENT,,errechne die X/YKoordinaten für die Linie bei max Ausladung für Lisual,1,1,27,2,);
B(B_VARIN,,LAarcMaxRad,9,4,11,6,);
B(B_VARIN,,LApointCenter,9,5,11,7,);
B(B_VARIN,,irMaxRad,9,6,11,8,);
B(B_F,GeoSetCircle,,11,3,22,9,);
B(B_VARIN,,LAcs1,9,7,11,9,);
B(B_VAROUT,,LXdummy,22,4,24,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_FB,GeoGetXDistance,GeoDist4,11,2,28,9,);
B(B_VARIN,,LAline1,9,3,11,5,);
B(B_VARIN,,LAarcMaxRad,9,4,11,6,);
B(B_VARIN,,LAcoPoi1RadLine1,9,5,11,7,);
B(B_VARIN,,LAcoPoi2RadLine1,9,6,11,8,);
B(B_VARIN,,LAdummyVector,9,7,11,9,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_VARIN,,LAcoPoi1RadLine1,9,3,11,5,);
B(B_VARIN,,LAcs1,9,4,11,6,);
B(B_FB,GeoGetPoint,GeoPoint1,11,2,21,8,);
B(B_VAROUT,,qrLinePoin1Angle,21,6,23,8,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_VARIN,,LAcoPoi2RadLine1,9,3,11,5,);
B(B_VARIN,,LAcs1,9,4,11,6,);
B(B_FB,GeoGetPoint,GeoPoint2,11,2,21,8,);
B(B_VAROUT,,qrLinePoin2Angle,21,6,23,8,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL := exit: ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,exit program,1,1,27,2,);
B(B_VARIN,,TRUE,9,3,11,5,);
B(B_RETURN,,,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL := init: ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,init program,1,1,27,2,);
B(B_VARIN,,TRUE,9,3,11,5,);
B(B_VAROUT,,LXinitOk,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 5 ;
        NETWORK_BODY
B(B_F,GeoNewCoordsys,,11,2,23,5,);
B(B_VARIN,,0,9,3,11,5,);
B(B_VAROUT,,LAcs1,23,3,25,5,);
B(B_COMMENT,,Speicherplatz für Koordinatensystem~ Punkte~ Linien~ ... (Objekte reservieren),1,1,32,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VAROUT,,LAdummyPoint,22,1,24,3,);
B(B_F,GeoNewVector,,11,0,22,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_F,GeoNewPoint,,11,0,21,3,);
B(B_VAROUT,,LAdummyVector,21,1,23,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VAROUT,,LAvectorHead,22,1,24,3,);
B(B_F,GeoNewVector,,11,0,22,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_F,GeoNewPoint,,11,0,21,3,);
B(B_VAROUT,,LApointHead,21,1,23,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_F,GeoNewPoint,,11,0,21,3,);
B(B_VAROUT,,LApointCenter,21,1,23,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VAROUT,,LAlineBoom,22,1,24,3,);
B(B_F,GeoNewLineSeg,,11,0,22,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_F,GeoNewPoint,,11,0,21,3,);
B(B_VAROUT,,LAline1P1,21,1,23,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_F,GeoNewPoint,,11,0,21,3,);
B(B_VAROUT,,LAline1P2,21,1,23,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VAROUT,,LAvector1P1P2,22,1,24,3,);
B(B_F,GeoNewVector,,11,0,22,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_F,GeoNewLine,,11,0,20,3,);
B(B_VAROUT,,LAline1,20,1,22,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VAROUT,,LAvectorToLine,22,1,24,3,);
B(B_F,GeoNewVector,,11,0,22,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_F,GeoNewPoint,,11,0,21,3,);
B(B_VAROUT,,LAcoPoi1RadLine1,21,1,23,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_F,GeoNewPoint,,11,0,21,3,);
B(B_VAROUT,,LAcoPoi2RadLine1,21,1,23,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VAROUT,,LAarcMaxRad,22,1,24,3,);
B(B_F,GeoNewCircle,,11,0,22,3,);
        END_NETWORK_BODY
    END_NET_WORK
END_BODY
END_FUNCTION_BLOCK

FUNCTION_BLOCK GPgeoRadSlewV010
	VAR_INPUT 
		irHeadRad: REAL:=0.0;
		irHeadAng: REAL:=0.0;
		irRadMin: REAL:=0.0;
		irRadMax: REAL:=0.0;
		irAngLeft: REAL:=0.0;
		irAngRight: REAL:=0.0;
	END_VAR
	VAR_OUTPUT
		qxStopByMinRad: BOOL:=FALSE;
		qxStopByMaxRad: BOOL:=FALSE;
		qxStopSgLimLeft: BOOL:=FALSE;
		qxStopSgLimRight: BOOL:=FALSE;
		qrDistToCoMinRad: REAL:=0.0;
		qrDistToCoMaxRad: REAL:=0.0;
		qrDistToCoSlew: REAL:=0.0;
	END_VAR
	VAR 
		LXinitOk: BOOL:=FALSE;
		LXdummy: BOOL:=FALSE;
		LXCollMinRad: BOOL:=FALSE;
		LXCollMaxRad: BOOL:=FALSE;
		LRheadRad: REAL:=0.0;
		LRdistToColl1: REAL:=0.0;
		LRdistToColl2: REAL:=0.0;
		LRdistToColl3: REAL:=0.0;
		LRdistSgLeft: REAL:=0.0;
		LRdistSgRight: REAL:=0.0;
		LRborderAngle: REAL:=0.0;
		LAdummyPoint: UDINT:=0;
		LAdummyVector: UDINT:=0;
		LDcoPoinNum: DINT:=0;
		LAcs1: UDINT:=0;
		LAvectorHead: UDINT:=0;
		LApointHead: UDINT:=0;
		LApointCenter: UDINT:=0;
		LAlineBoom: UDINT:=0;
		LAarc1: UDINT:=0;
		LAarc2: UDINT:=0;
		LApoint1: UDINT:=0;
		LApoint2: UDINT:=0;
		LApoint3: UDINT:=0;
		LAlineLeft: UDINT:=0;
		LAlineRight: UDINT:=0;
		GeoDist1: GeoGetXDistance;
		GeoDist2: GeoGetXDistance;
		GeoDist3: GeoGetXDistance;
		GeoDist4: GeoGetXDistance;
		GeoDist5: GeoGetXDistance;
		GeoDist6: GeoGetXDistance;
	END_VAR
'FBD'
BODY
    WORKSPACE
        NETWORK_LIST_TYPE := NWTYPEFBD ;
        ACTIVE_NETWORK := 0 ;
    END_WORKSPACE
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_VARIN,,LXinitOk,9,4,11,6,);
B(B_COMMENT,,init first time,1,1,27,2,);
B(B_F,not,,11,3,16,6,);
B(B_JUMP,,init,16,4,18,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,setze Koordinatensystem,1,1,27,2,);
B(B_COMMENT,,setzt das Koordinatensystem,41,4,63,5,);
B(B_F,GeoSetCoordsys,,11,3,23,10,);
B(B_VARIN,,LAcs1,9,4,11,6,);
B(B_VARIN,,0.0,9,5,11,7,);
B(B_VARIN,,0.0,9,6,11,8,);
B(B_VARIN,,0.0,9,7,11,9,);
B(B_VARIN,,FALSE,9,8,11,10,);
B(B_VAROUT,,LXdummy,23,4,25,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,checke ob benötigte Daten auch vorhanden sind,1,1,27,2,);
B(B_F,EQ_R,,11,3,16,7,);
B(B_F,sel,,16,5,21,10,);
B(B_VAROUT,,LRheadRad,21,6,23,8,);
B(B_VARIN,,irHeadRad,9,5,11,7,);
B(B_VARIN,,0.0,9,4,11,6,);
B(B_VARIN,,1.0,14,8,16,10,);
L(16,5,16,7);
L(11,6,11,8);
L(11,8,16,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 28 ;
        NETWORK_BODY
B(B_COMMENT,,setze Ausleger,1,1,27,2,);
B(B_VARIN,,LAvectorHead,19,4,21,6,);
B(B_VARIN,,LRheadRad,19,5,21,7,);
B(B_VARIN,,irHeadAng,19,6,21,8,);
B(B_VARIN,,LAcs1,9,7,11,9,);
B(B_COMMENT,,setzt den Vektor Ausleger,41,4,63,5,);
B(B_F,GeoSetVectorRPhi,,21,3,35,9,);
B(B_VAROUT,,LXdummy,35,4,37,6,);
B(B_VARIN,,LApointHead,19,10,21,12,);
B(B_VARIN,,LRheadRad,19,11,21,13,);
B(B_VARIN,,irHeadAng,19,12,21,14,);
B(B_COMMENT,,setzt den Auslegerkopf als Punkt,41,10,63,11,);
B(B_F,GeoSetPointRPhi,,21,9,34,15,);
B(B_VARIN,,LApointCenter,19,16,21,18,);
B(B_VARIN,,0.0,19,17,21,19,);
B(B_VARIN,,0.0,19,18,21,20,);
B(B_F,GeoSetPointRPhi,,21,15,34,21,);
B(B_COMMENT,,setzt den Drehmittelpunkt als Punkt,41,16,63,17,);
B(B_VAROUT,,LXdummy,34,10,36,12,);
B(B_VAROUT,,LXdummy,34,16,36,18,);
B(B_COMMENT,,setzt den Ausleger als Liniensegment,41,22,63,23,);
B(B_F,GeoSetLineSeg,,21,21,32,27,);
B(B_VAROUT,,LXdummy,32,22,34,24,);
B(B_VARIN,,LApointHead,19,24,21,26,);
B(B_VARIN,,LApointCenter,19,23,21,25,);
B(B_VARIN,,LAlineBoom,19,22,21,24,);
L(11,8,21,8);
L(11,8,11,26);
L(11,14,21,14);
L(11,20,21,20);
L(11,26,21,26);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_COMMENT,,setze minimale Ausladungsbegrenzung,1,1,27,2,);
B(B_VARIN,,LAarc1,9,4,11,6,);
B(B_VARIN,,LApointCenter,9,5,11,7,);
B(B_VARIN,,irRadMin,9,6,11,8,);
B(B_VARIN,,LAcs1,9,7,11,9,);
B(B_F,GeoSetCircle,,11,3,22,9,);
B(B_VAROUT,,LXdummy,22,4,24,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_COMMENT,,setze maximale Ausladungsbegrenzung,1,1,27,2,);
B(B_VARIN,,LAarc2,9,4,11,6,);
B(B_VARIN,,LApointCenter,9,5,11,7,);
B(B_VARIN,,irRadMax,9,6,11,8,);
B(B_VARIN,,LAcs1,9,7,11,9,);
B(B_F,GeoSetCircle,,11,3,22,9,);
B(B_VAROUT,,LXdummy,22,4,24,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,checke Kollision Ausleger - Minimalausladung,1,1,27,2,);
B(B_VARIN,,LAlineBoom,8,4,10,6,);
B(B_VARIN,,LAarc1,8,5,10,7,);
B(B_FB,GeoGetXDistance,GeoDist1,10,3,27,10,);
B(B_VARIN,,LAdummyPoint,8,6,10,8,);
B(B_VARIN,,LAdummyPoint,8,7,10,9,);
B(B_VARIN,,LAdummyVector,8,8,10,10,);
B(B_F,@LT-2,,31,4,36,8,);
B(B_VARIN,,1,29,6,31,8,);
B(B_VAROUT,,LXCollMinRad,36,5,38,7,);
B(B_VAROUT,,qxStopByMinRad,36,6,38,8,);
L(27,6,31,6);
L(36,6,36,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_VARIN,,LApointHead,8,2,10,4,);
B(B_VARIN,,LAarc1,8,3,10,5,);
B(B_F,GeoGetDistance,,10,1,22,5,);
B(B_F,sel,,31,0,36,5,);
B(B_VARIN,,0.0,29,3,31,5,);
B(B_VAROUT,,qrDistToCoMinRad,36,1,38,3,);
B(B_VARIN,,LXCollMinRad,29,1,31,3,);
L(22,3,31,3);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,checke Kollision Ausleger - Maximalausladung,1,1,27,2,);
B(B_VARIN,,LAlineBoom,8,4,10,6,);
B(B_VARIN,,LAarc2,8,5,10,7,);
B(B_FB,GeoGetXDistance,GeoDist2,10,3,27,10,);
B(B_VARIN,,LAdummyPoint,8,6,10,8,);
B(B_VARIN,,LAdummyPoint,8,7,10,9,);
B(B_VARIN,,LAdummyVector,8,8,10,10,);
B(B_VARIN,,0,29,6,31,8,);
B(B_VAROUT,,LXCollMaxRad,36,5,38,7,);
B(B_F,sel,,41,0,46,5,);
B(B_VARIN,,0.0,39,3,41,5,);
B(B_VAROUT,,qrDistToCoMaxRad,46,1,48,3,);
B(B_F,@GT-2,,31,4,36,8,);
B(B_F,abs,,28,1,33,4,);
B(B_VAROUT,,qxStopByMaxRad,36,6,38,8,);
L(36,2,36,6);
L(28,3,28,5);
L(27,5,28,5);
L(36,2,41,2);
L(27,6,31,6);
L(33,3,41,3);
L(36,6,36,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_COMMENT,,checke Kollision Drehbereich,1,1,27,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 21 ;
        NETWORK_BODY
B(B_COMMENT,,calculate the middle of the dead area,1,1,27,2,);
B(B_F,@SUB,,11,13,16,17,);
B(B_VARIN,,2.0,15,17,17,19,);
B(B_F,@DIV,,18,13,23,17,);
B(B_F,@ADD-2,,25,13,30,17,);
B(B_VARIN,,irAngLeft,8,15,10,17,);
B(B_VARIN,,irAngRight,9,14,11,16,);
B(B_F,sel,,39,5,44,10,);
B(B_VARIN,,irAngLeft,30,4,32,6,);
B(B_VARIN,,irAngRight,30,3,32,5,);
B(B_F,@GT-2,,32,2,37,6,);
B(B_VARIN,,irAngLeft,9,7,11,9,);
B(B_F,@SUB,,11,6,16,10,);
B(B_VARIN,,2.0,15,10,17,12,);
B(B_F,@DIV,,18,6,23,10,);
B(B_F,@ADD-2,,25,6,30,10,);
B(B_VARIN,,irAngRight,8,8,10,10,);
B(B_VARIN,,180.0,29,10,31,12,);
B(B_COMMENT,,ACHTUNG: Koordinatensystem der GeoLib !!!ø^(Drehrichtung positiv =  gegen den Uhrzeigersinn),40,16,59,18,);
B(B_VARIN,,360.0,46,4,48,6,);
B(B_F,sel,,53,4,58,9,);
B(B_VAROUT,,LRborderAngle,58,5,60,7,);
B(B_VARIN,,360.0,46,10,48,12,);
B(B_F,@SUB,,48,8,53,12,);
B(B_F,@ADD-2,,32,6,37,10,);
B(B_F,@GE-2,,48,2,53,6,);
L(17,16,18,16);
L(17,16,17,18);
L(16,15,18,15);
L(10,16,11,16);
L(10,16,10,19);
L(10,19,24,19);
L(24,16,24,19);
L(24,16,25,16);
L(23,15,25,15);
L(38,9,39,9);
L(38,9,38,15);
L(38,4,38,7);
L(38,7,39,7);
L(37,4,38,4);
L(17,9,18,9);
L(17,9,17,11);
L(16,8,18,8);
L(10,9,11,9);
L(10,9,10,12);
L(10,12,24,12);
L(24,9,24,12);
L(24,9,25,9);
L(23,8,25,8);
L(31,9,32,9);
L(31,9,31,11);
L(30,15,38,15);
L(53,8,53,10);
L(53,4,53,6);
L(44,7,53,7);
L(44,4,44,7);
L(44,7,44,10);
L(44,10,48,10);
L(30,8,32,8);
L(37,8,39,8);
L(44,4,48,4);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_F,GeoSetPointRPhi,,10,1,23,7,);
B(B_VAROUT,,LXdummy,23,2,25,4,);
B(B_VARIN,,LApoint1,8,2,10,4,);
B(B_VARIN,,LAcs1,8,5,10,7,);
B(B_VARIN,,LRheadRad,8,3,10,5,);
B(B_VARIN,,irAngLeft,8,4,10,6,);
B(B_COMMENT,,Punkt 1: Kollisionspunkt links,53,3,66,4,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_F,sel,,15,2,20,7,);
B(B_VARIN,,LRheadRad,8,6,10,8,);
B(B_VARIN,,0.1,8,7,10,9,);
B(B_F,@SUB,,10,5,15,9,);
B(B_F,GeoSetPointRPhi,,30,1,43,7,);
B(B_VAROUT,,LXdummy,43,2,45,4,);
B(B_VARIN,,LApoint2,28,2,30,4,);
B(B_VARIN,,LAcs1,28,5,30,7,);
B(B_VARIN,,LRborderAngle,28,4,30,6,);
B(B_F,EQ_R,,10,1,15,5,);
B(B_VARIN,,irAngRight,8,2,10,4,);
B(B_VARIN,,irAngLeft,8,3,10,5,);
B(B_COMMENT,,Punkt 2: Punkt auf dem Scheitel im gesperrten Bereichø^mit aktueller Ausladung,53,3,73,5,);
L(15,6,15,7);
L(10,5,15,5);
L(10,5,10,7);
L(20,4,30,4);
L(15,3,15,4);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_F,GeoSetPointRPhi,,10,1,23,7,);
B(B_VAROUT,,LXdummy,23,2,25,4,);
B(B_VARIN,,LApoint3,8,2,10,4,);
B(B_VARIN,,irAngRight,8,4,10,6,);
B(B_VARIN,,LAcs1,8,5,10,7,);
B(B_VARIN,,LRheadRad,8,3,10,5,);
B(B_COMMENT,,Punkt 3: Kollisionspunkt rechts,53,3,66,4,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_VARIN,,LAlineLeft,8,2,10,4,);
B(B_VARIN,,LApoint2,8,4,10,6,);
B(B_VARIN,,LAcs1,8,5,10,7,);
B(B_VARIN,,LApoint1,8,3,10,5,);
B(B_F,GeoSetLineSeg,,10,1,21,7,);
B(B_VAROUT,,LXdummy,21,2,23,4,);
B(B_COMMENT,,Kollisions-Linie 1: Linie zwischen Punkt 1 und Punkt 2,53,2,74,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_VARIN,,LAlineRight,8,2,10,4,);
B(B_VARIN,,LApoint2,8,4,10,6,);
B(B_VARIN,,LAcs1,8,5,10,7,);
B(B_VARIN,,LApoint3,8,3,10,5,);
B(B_F,GeoSetLineSeg,,10,1,21,7,);
B(B_VAROUT,,LXdummy,21,2,23,4,);
B(B_COMMENT,,Kollisions-Linie 2: Linie zwischen Punkt 3 und Punkt 2,53,2,74,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 19 ;
        NETWORK_BODY
B(B_VARIN,,LAlineBoom,8,4,10,6,);
B(B_VARIN,,LAlineLeft,8,5,10,7,);
B(B_FB,GeoGetXDistance,GeoDist3,10,3,27,10,);
B(B_VARIN,,LAdummyPoint,8,6,10,8,);
B(B_VARIN,,LAdummyPoint,8,7,10,9,);
B(B_VARIN,,LAdummyVector,8,8,10,10,);
B(B_VARIN,,0,29,6,31,8,);
B(B_VAROUT,,qxStopSgLimLeft,36,5,38,7,);
B(B_F,@GT-2,,31,4,36,8,);
B(B_FB,GeoGetXDistance,GeoDist4,10,11,27,18,);
B(B_VARIN,,LApointHead,8,12,10,14,);
B(B_VARIN,,LAlineLeft,8,13,10,15,);
B(B_VARIN,,LAdummyPoint,8,14,10,16,);
B(B_VARIN,,LAdummyPoint,8,15,10,17,);
B(B_VARIN,,LAdummyVector,8,16,10,18,);
B(B_F,sel,,36,10,41,15,);
B(B_VARIN,,0.0,34,13,36,15,);
B(B_VAROUT,,LRdistSgLeft,41,11,43,13,);
B(B_F,abs,,27,11,32,14,);
L(27,6,31,6);
L(32,13,36,13);
L(36,6,36,12);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 19 ;
        NETWORK_BODY
B(B_VARIN,,LAlineBoom,8,4,10,6,);
B(B_VARIN,,LAlineRight,8,5,10,7,);
B(B_FB,GeoGetXDistance,GeoDist5,10,3,27,10,);
B(B_VARIN,,LAdummyPoint,8,6,10,8,);
B(B_VARIN,,LAdummyPoint,8,7,10,9,);
B(B_VARIN,,LAdummyVector,8,8,10,10,);
B(B_VARIN,,0,29,6,31,8,);
B(B_F,@GT-2,,31,4,36,8,);
B(B_FB,GeoGetXDistance,GeoDist6,10,11,27,18,);
B(B_VARIN,,LApointHead,8,12,10,14,);
B(B_VARIN,,LAlineRight,8,13,10,15,);
B(B_VARIN,,LAdummyPoint,8,14,10,16,);
B(B_VARIN,,LAdummyPoint,8,15,10,17,);
B(B_VARIN,,LAdummyVector,8,16,10,18,);
B(B_F,sel,,36,10,41,15,);
B(B_VARIN,,0.0,34,13,36,15,);
B(B_F,abs,,27,11,32,14,);
B(B_VAROUT,,LRdistSgRight,41,11,43,13,);
B(B_VAROUT,,qxStopSgLimRight,36,5,38,7,);
L(27,6,31,6);
L(32,13,36,13);
L(36,6,36,12);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_VARIN,,LRdistSgLeft,8,2,10,4,);
B(B_VARIN,,LRdistSgRight,8,3,10,5,);
B(B_F,min-2,,10,1,15,5,);
B(B_VAROUT,,qrDistToCoSlew,15,2,17,4,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL := exit: ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,exit program,1,1,27,2,);
B(B_VARIN,,TRUE,9,3,11,5,);
B(B_RETURN,,,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL := init: ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,init program,1,1,27,2,);
B(B_VARIN,,TRUE,9,3,11,5,);
B(B_VAROUT,,LXinitOk,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 5 ;
        NETWORK_BODY
B(B_F,GeoNewCoordsys,,11,2,23,5,);
B(B_VARIN,,0,9,3,11,5,);
B(B_VAROUT,,LAcs1,23,3,25,5,);
B(B_COMMENT,,Speicherplatz für Koordinatensystem~ Punkte~ Linien~ ... (Objekte reservieren),1,1,32,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VAROUT,,LAdummyPoint,22,1,24,3,);
B(B_F,GeoNewVector,,11,0,22,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_F,GeoNewPoint,,11,0,21,3,);
B(B_VAROUT,,LAdummyVector,21,1,23,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VAROUT,,LAvectorHead,22,1,24,3,);
B(B_F,GeoNewVector,,11,0,22,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_F,GeoNewPoint,,11,0,21,3,);
B(B_VAROUT,,LApointHead,21,1,23,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_F,GeoNewPoint,,11,0,21,3,);
B(B_VAROUT,,LApointCenter,21,1,23,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VAROUT,,LAlineBoom,22,1,24,3,);
B(B_F,GeoNewLineSeg,,11,0,22,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VAROUT,,LAarc1,22,1,24,3,);
B(B_F,GeoNewCircle,,11,0,22,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VAROUT,,LAarc2,22,1,24,3,);
B(B_F,GeoNewCircle,,11,0,22,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VAROUT,,LApoint1,21,1,23,3,);
B(B_F,GeoNewPoint,,11,0,21,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VAROUT,,LApoint2,21,1,23,3,);
B(B_F,GeoNewPoint,,11,0,21,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VAROUT,,LApoint3,21,1,23,3,);
B(B_F,GeoNewPoint,,11,0,21,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VAROUT,,LAlineLeft,22,1,24,3,);
B(B_F,GeoNewLineSeg,,11,0,22,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VAROUT,,LAlineRight,22,1,24,3,);
B(B_F,GeoNewLineSeg,,11,0,22,3,);
        END_NETWORK_BODY
    END_NET_WORK
END_BODY
END_FUNCTION_BLOCK

FUNCTION_BLOCK GPgeoSectorV010
	VAR_INPUT 
		irMaxRad: REAL:=0.0;
		irHeadRad: REAL:=0.0;
		irHeadAng: REAL:=0.0;
		irPoint1Rad: REAL:=0.0;
		irPoint1Ang: REAL:=0.0;
		irPoint2Rad: REAL:=0.0;
		irPoint2Ang: REAL:=0.0;
		irPoint3Rad: REAL:=0.0;
		irPoint3Ang: REAL:=0.0;
		ixSgTurnsRight: BOOL:=FALSE;
		ixSgTurnsLeft: BOOL:=FALSE;
		ixLgIsLowering: BOOL:=FALSE;
		irSgActAngle: REAL:=0.0;
	END_VAR
	VAR_OUTPUT
		qxStopByColl: BOOL:=FALSE;
		qxStopSlewLeft: BOOL:=FALSE;
		qxStopSlewRight: BOOL:=FALSE;
		qrDistToColl: REAL:=0.0;
	END_VAR
	VAR 
		LXinitOk: BOOL:=FALSE;
		LXdummy: BOOL:=FALSE;
		LXcollision1: BOOL:=FALSE;
		LXcollision2: BOOL:=FALSE;
		LXcollisionAct: BOOL:=FALSE;
		LAdummyPoint: UDINT:=0;
		LAdummyVector: UDINT:=0;
		LRheadRad: REAL:=0.0;
		LAcs1: UDINT:=0;
		LAvectorHead: UDINT:=0;
		LApointHead: UDINT:=0;
		LApointCenter: UDINT:=0;
		LAlineBoom: UDINT:=0;
		LApointHeadAct: UDINT:=0;
		LAlineBoomAct: UDINT:=0;
		LApoint1: UDINT:=0;
		LApoint2: UDINT:=0;
		LApoint3: UDINT:=0;
		LAline1: UDINT:=0;
		LAline2: UDINT:=0;
		GeoDist1: GeoGetXDistance;
		GeoDist2: GeoGetXDistance;
		GeoDist3: GeoGetXDistance;
		GeoDist4: GeoGetXDistance;
		R_TRIG1: R_TRIG;
		R_TRIG2: R_TRIG;
		R_TRIG3: R_TRIG;
		R_TRIG4: R_TRIG;
		RS1: RS;
		RS2: RS;
		RS3: RS;
		RS4: RS;
	END_VAR
'FBD'
BODY
    WORKSPACE
        NETWORK_LIST_TYPE := NWTYPEFBD ;
        ACTIVE_NETWORK := 0 ;
    END_WORKSPACE
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_VARIN,,LXinitOk,9,4,11,6,);
B(B_COMMENT,,init first time,1,1,27,2,);
B(B_F,not,,11,3,16,6,);
B(B_JUMP,,init,16,4,18,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,setze Koordinatensystem,1,1,27,2,);
B(B_COMMENT,,setzt das Koordinatensystem,41,4,63,5,);
B(B_F,GeoSetCoordsys,,11,3,23,10,);
B(B_VARIN,,LAcs1,9,4,11,6,);
B(B_VARIN,,0.0,9,5,11,7,);
B(B_VARIN,,0.0,9,6,11,8,);
B(B_VARIN,,0.0,9,7,11,9,);
B(B_VARIN,,FALSE,9,8,11,10,);
B(B_VAROUT,,LXdummy,23,4,25,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,checke ob benötigte Daten auch vorhanden sind,1,1,27,2,);
B(B_F,EQ_R,,11,3,16,7,);
B(B_F,sel,,16,5,21,10,);
B(B_VAROUT,,LRheadRad,21,6,23,8,);
B(B_VARIN,,irHeadRad,9,5,11,7,);
B(B_VARIN,,0.0,9,4,11,6,);
B(B_VARIN,,1.0,14,8,16,10,);
L(16,5,16,7);
L(11,6,11,8);
L(11,8,16,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 28 ;
        NETWORK_BODY
B(B_COMMENT,,setze Ausleger am Stop Punkt,1,1,27,2,);
B(B_VARIN,,LAvectorHead,19,4,21,6,);
B(B_VARIN,,LRheadRad,19,5,21,7,);
B(B_VARIN,,irHeadAng,19,6,21,8,);
B(B_VARIN,,LAcs1,9,7,11,9,);
B(B_COMMENT,,setzt den Vektor Ausleger,41,4,63,5,);
B(B_F,GeoSetVectorRPhi,,21,3,35,9,);
B(B_VAROUT,,LXdummy,35,4,37,6,);
B(B_VARIN,,LApointHead,19,10,21,12,);
B(B_VARIN,,LRheadRad,19,11,21,13,);
B(B_VARIN,,irHeadAng,19,12,21,14,);
B(B_COMMENT,,setzt den Auslegerkopf als Punkt,41,10,63,11,);
B(B_F,GeoSetPointRPhi,,21,9,34,15,);
B(B_VARIN,,LApointCenter,19,16,21,18,);
B(B_VARIN,,0.0,19,17,21,19,);
B(B_VARIN,,0.0,19,18,21,20,);
B(B_F,GeoSetPointRPhi,,21,15,34,21,);
B(B_COMMENT,,setzt den Drehmittelpunkt als Punkt,41,16,63,17,);
B(B_VAROUT,,LXdummy,34,10,36,12,);
B(B_VAROUT,,LXdummy,34,16,36,18,);
B(B_COMMENT,,setzt den Ausleger als Liniensegment,41,22,63,23,);
B(B_F,GeoSetLineSeg,,21,21,32,27,);
B(B_VAROUT,,LXdummy,32,22,34,24,);
B(B_VARIN,,LApointHead,19,24,21,26,);
B(B_VARIN,,LApointCenter,19,23,21,25,);
B(B_VARIN,,LAlineBoom,19,22,21,24,);
L(11,8,21,8);
L(11,8,11,26);
L(11,14,21,14);
L(11,20,21,20);
L(11,26,21,26);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 16 ;
        NETWORK_BODY
B(B_COMMENT,,setze Ausleger aktueller DW Winkel,1,1,27,2,);
B(B_VARIN,,LApointHeadAct,19,4,21,6,);
B(B_VARIN,,LRheadRad,19,5,21,7,);
B(B_VARIN,,irSgActAngle,19,6,21,8,);
B(B_F,GeoSetPointRPhi,,21,3,34,9,);
B(B_VAROUT,,LXdummy,34,4,36,6,);
B(B_VARIN,,LAcs1,9,7,11,9,);
B(B_F,GeoSetLineSeg,,21,9,32,15,);
B(B_VAROUT,,LXdummy,32,10,34,12,);
B(B_VARIN,,LApointHead,19,12,21,14,);
B(B_VARIN,,LApointCenter,19,11,21,13,);
B(B_VARIN,,LAlineBoomAct,19,10,21,12,);
L(11,8,21,8);
L(11,14,21,14);
L(11,8,11,14);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_COMMENT,,setze Punkt 1,1,1,27,2,);
B(B_VARIN,,LApoint1,9,4,11,6,);
B(B_VARIN,,irPoint1Rad,9,5,11,7,);
B(B_VARIN,,irPoint1Ang,9,6,11,8,);
B(B_VARIN,,LAcs1,9,7,11,9,);
B(B_VAROUT,,LXdummy,24,4,26,6,);
B(B_F,GeoSetPointRPhi,,11,3,24,9,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 18 ;
        NETWORK_BODY
B(B_COMMENT,,setze Punkt 2,1,1,27,2,);
B(B_VARIN,,irPoint1Rad,8,8,10,10,);
B(B_VARIN,,irPoint2Rad,8,9,10,11,);
B(B_F,@EQ-2,,10,7,15,11,);
B(B_VARIN,,irPoint2Ang,8,5,10,7,);
B(B_VARIN,,irPoint1Ang,8,4,10,6,);
B(B_F,@EQ-2,,10,3,15,7,);
B(B_F,@AND-2,,15,6,20,10,);
B(B_F,sel,,20,9,25,14,);
B(B_F,@ADD-2,,15,13,20,17,);
B(B_VARIN,,0.01,13,15,15,17,);
B(B_VARIN,,LApoint2,32,9,34,11,);
B(B_VARIN,,irPoint2Ang,32,11,34,13,);
B(B_VARIN,,LAcs1,32,12,34,14,);
B(B_VAROUT,,LXdummy,47,9,49,11,);
B(B_F,GeoSetPointRPhi,,34,8,47,14,);
L(15,5,15,8);
L(20,13,20,15);
L(10,12,20,12);
L(10,10,10,12);
L(15,12,15,15);
L(20,8,20,11);
L(25,11,34,11);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 18 ;
        NETWORK_BODY
B(B_COMMENT,,setze Punkt 3,1,1,27,2,);
B(B_VARIN,,irPoint2Rad,8,8,10,10,);
B(B_VARIN,,irPoint3Rad,8,9,10,11,);
B(B_F,@EQ-2,,10,7,15,11,);
B(B_VARIN,,irPoint3Ang,8,5,10,7,);
B(B_VARIN,,irPoint2Ang,8,4,10,6,);
B(B_F,@EQ-2,,10,3,15,7,);
B(B_F,@AND-2,,15,6,20,10,);
B(B_F,sel,,20,9,25,14,);
B(B_F,@ADD-2,,15,13,20,17,);
B(B_VARIN,,0.02,13,15,15,17,);
B(B_VARIN,,LApoint3,32,9,34,11,);
B(B_VARIN,,irPoint3Ang,32,11,34,13,);
B(B_VARIN,,LAcs1,32,12,34,14,);
B(B_VAROUT,,LXdummy,47,9,49,11,);
B(B_F,GeoSetPointRPhi,,34,8,47,14,);
B(B_COMMENT,,hier +0.02 korrigieren~ falls alle drei Punkte aufeinander liegen,20,16,43,17,);
L(15,5,15,8);
L(20,13,20,15);
L(10,12,20,12);
L(10,10,10,12);
L(15,12,15,15);
L(20,8,20,11);
L(25,11,34,11);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_VARIN,,LAline1,9,4,11,6,);
B(B_VARIN,,LApoint1,9,5,11,7,);
B(B_VARIN,,LApoint2,9,6,11,8,);
B(B_VARIN,,LAcs1,9,7,11,9,);
B(B_F,GeoSetLineSeg,,11,3,22,9,);
B(B_VAROUT,,LXdummy,22,4,24,6,);
B(B_COMMENT,,setze Linie 1,1,1,27,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_COMMENT,,setze Linie 2,1,1,27,2,);
B(B_VARIN,,LAline2,9,4,11,6,);
B(B_VARIN,,LApoint2,9,5,11,7,);
B(B_VARIN,,LApoint3,9,6,11,8,);
B(B_VARIN,,LAcs1,9,7,11,9,);
B(B_F,GeoSetLineSeg,,11,3,22,9,);
B(B_VAROUT,,LXdummy,22,4,24,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,checke Kollision Ausleger - Sektorlinien,1,1,27,2,);
B(B_FB,GeoGetXDistance,GeoDist1,11,3,28,10,);
B(B_VARIN,,LAline1,9,4,11,6,);
B(B_VARIN,,LAlineBoom,9,5,11,7,);
B(B_VARIN,,LAdummyPoint,9,6,11,8,);
B(B_VARIN,,LAdummyPoint,9,7,11,9,);
B(B_VARIN,,LAdummyVector,9,8,11,10,);
B(B_VARIN,,0,29,6,31,8,);
B(B_F,@GT-2,,31,4,36,8,);
B(B_VAROUT,,LXcollision1,36,5,38,7,);
L(28,6,31,6);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_FB,GeoGetXDistance,GeoDist2,11,1,28,8,);
B(B_VARIN,,LAline2,9,2,11,4,);
B(B_VARIN,,LAlineBoom,9,3,11,5,);
B(B_VARIN,,LAdummyPoint,9,4,11,6,);
B(B_VARIN,,LAdummyPoint,9,5,11,7,);
B(B_VARIN,,LAdummyVector,9,6,11,8,);
B(B_VARIN,,0,29,4,31,6,);
B(B_F,@GT-2,,31,2,36,6,);
B(B_VAROUT,,LXcollision2,36,3,38,5,);
L(28,4,31,4);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_VARIN,,LXcollision1,9,2,11,4,);
B(B_VARIN,,LXcollision2,9,3,11,5,);
B(B_F,@OR-2,,11,1,16,5,);
B(B_VAROUT,,qxStopByColl,16,2,18,4,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_VARIN,,LAline1,9,2,11,4,);
B(B_VARIN,,LApointHead,9,3,11,5,);
B(B_F,abs,,23,1,28,4,);
B(B_F,GeoGetDistance,,11,1,23,5,);
B(B_VARIN,,LAline2,9,6,11,8,);
B(B_VARIN,,LApointHead,9,7,11,9,);
B(B_F,abs,,23,5,28,8,);
B(B_F,GeoGetDistance,,11,5,23,9,);
B(B_F,min-2,,28,4,33,8,);
B(B_F,sel,,42,3,47,8,);
B(B_VAROUT,,qrDistToColl,47,4,49,6,);
B(B_VARIN,,0.0,40,6,42,8,);
B(B_VARIN,,qxStopByColl,40,4,42,6,);
L(33,6,42,6);
L(28,3,28,6);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 19 ;
        NETWORK_BODY
B(B_COMMENT,,checke die aktuelle Auslegerposition eine Kollision hat,1,1,27,2,);
B(B_FB,GeoGetXDistance,GeoDist3,11,3,28,10,);
B(B_VARIN,,LAline1,9,4,11,6,);
B(B_VARIN,,LAlineBoomAct,9,5,11,7,);
B(B_VARIN,,LAdummyPoint,9,6,11,8,);
B(B_VARIN,,LAdummyPoint,9,7,11,9,);
B(B_VARIN,,LAdummyVector,9,8,11,10,);
B(B_VARIN,,0,29,6,31,8,);
B(B_F,@GT-2,,31,4,36,8,);
B(B_FB,GeoGetXDistance,GeoDist4,11,11,28,18,);
B(B_VARIN,,LAline2,9,12,11,14,);
B(B_VARIN,,LAlineBoomAct,9,13,11,15,);
B(B_VARIN,,LAdummyPoint,9,14,11,16,);
B(B_VARIN,,LAdummyPoint,9,15,11,17,);
B(B_VARIN,,LAdummyVector,9,16,11,18,);
B(B_VARIN,,0,29,14,31,16,);
B(B_F,@GT-2,,31,12,36,16,);
B(B_F,@OR-2,,36,8,41,12,);
B(B_VAROUT,,LXcollisionAct,41,9,43,11,);
L(28,6,31,6);
L(28,14,31,14);
L(36,11,36,14);
L(36,6,36,10);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 24 ;
        NETWORK_BODY
B(B_COMMENT,,setzte den Richtungsstop aufgrund der aktuellen Drehrichtung,1,1,27,2,);
B(B_F,@AND-2,,21,7,26,11,);
B(B_FB,RS,RS1,26,7,31,11,);
B(B_FB,R_TRIG,R_TRIG1,11,8,18,11,);
B(B_VARIN,,LXcollision1,9,9,11,11,);
B(B_F,@AND-2,,21,15,26,19,);
B(B_FB,RS,RS2,26,15,31,19,);
B(B_FB,R_TRIG,R_TRIG2,11,16,18,19,);
B(B_VARIN,,LXcollision2,9,17,11,19,);
B(B_F,@AND-2,,21,11,26,15,NN);
B(B_F,@OR-2,,15,3,20,7,);
B(B_VARIN,,ixLgIsLowering,13,5,15,7,);
B(B_VARIN,,ixSgTurnsRight,13,4,15,6,);
B(B_VARIN,,LXcollisionAct,17,13,19,15,);
B(B_F,@AND-2,,21,19,26,23,NN);
B(B_F,@OR-2,,31,11,36,15,);
B(B_F,@OR-2,,36,10,41,14,);
B(B_VAROUT,,qxStopSlewRight,41,11,43,13,);
B(B_VARIN,,qxStopByColl,34,4,36,6,);
B(B_COMMENT,,da das Winkelgebersignal des Ausleger schwingt~ wird bei EZW Senken ein Stop ausgelöstø^und kurz darauf wird keine Kollision mehr berechnet~ obwohl der Ausleger schon Kollidiertø^und auch gestoppt wurde. Das Ansteuersignal EZW ist bereits nul,0,0,0,0,0,0,0,);
B(B_COMMENT,,Dann kommt wieder ein Stop~ das Ansteuersignal ist aber schon Null und es wird keine Stopø^DW mehr ausgelöst. Das DW muß hier aber in beiden Richtungen gesperrt werden,55,15,90,18,);
B(B_COMMENT,,ACHTUNG: Bei Kollision durch EZW senken:,55,9,90,10,);
B(B_COMMENT,,Die Verknüpfung von ixLgIsLowering könnte gelöscht werden!,48,19,76,21,);
L(18,10,21,10);
L(31,9,31,13);
L(11,10,11,13);
L(26,10,26,13);
L(18,18,21,18);
L(20,17,21,17);
L(11,13,21,13);
L(20,5,20,17);
L(20,9,21,9);
L(19,14,21,14);
L(26,18,26,21);
L(19,14,19,22);
L(19,22,21,22);
L(11,21,21,21);
L(11,18,11,21);
L(31,14,31,17);
L(36,5,36,12);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 22 ;
        NETWORK_BODY
B(B_F,@AND-2,,21,5,26,9,);
B(B_FB,RS,RS3,26,5,31,9,);
B(B_FB,R_TRIG,R_TRIG3,11,6,18,9,);
B(B_VARIN,,LXcollision1,9,7,11,9,);
B(B_F,@AND-2,,21,13,26,17,);
B(B_FB,RS,RS4,26,13,31,17,);
B(B_FB,R_TRIG,R_TRIG4,11,14,18,17,);
B(B_VARIN,,LXcollision2,9,15,11,17,);
B(B_F,@AND-2,,21,9,26,13,NN);
B(B_F,@OR-2,,15,1,20,5,);
B(B_VARIN,,ixLgIsLowering,13,3,15,5,);
B(B_VARIN,,ixSgTurnsLeft,13,2,15,4,);
B(B_VARIN,,LXcollisionAct,17,11,19,13,);
B(B_F,@AND-2,,21,17,26,21,NN);
B(B_F,@OR-2,,31,9,36,13,);
B(B_F,@OR-2,,36,8,41,12,);
B(B_VARIN,,qxStopByColl,34,2,36,4,);
B(B_VAROUT,,qxStopSlewLeft,41,9,43,11,);
L(18,8,21,8);
L(31,7,31,11);
L(11,8,11,11);
L(26,8,26,11);
L(18,16,21,16);
L(20,15,21,15);
L(11,11,21,11);
L(20,3,20,15);
L(20,7,21,7);
L(19,12,21,12);
L(26,16,26,19);
L(19,12,19,20);
L(19,20,21,20);
L(11,19,21,19);
L(11,16,11,19);
L(31,12,31,15);
L(36,3,36,10);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL := exit: ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,exit program,1,1,27,2,);
B(B_VARIN,,TRUE,9,3,11,5,);
B(B_RETURN,,,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL := init: ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,init program,1,1,27,2,);
B(B_VARIN,,TRUE,9,3,11,5,);
B(B_VAROUT,,LXinitOk,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 5 ;
        NETWORK_BODY
B(B_F,GeoNewCoordsys,,11,2,23,5,);
B(B_VARIN,,0,9,3,11,5,);
B(B_VAROUT,,LAcs1,23,3,25,5,);
B(B_COMMENT,,Speicherplatz für Koordinatensystem~ Punkte~ Linien~ ... (Objekte reservieren),1,1,32,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VAROUT,,LAdummyPoint,22,1,24,3,);
B(B_F,GeoNewVector,,11,0,22,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_F,GeoNewPoint,,11,0,21,3,);
B(B_VAROUT,,LAdummyVector,21,1,23,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VAROUT,,LAvectorHead,22,1,24,3,);
B(B_F,GeoNewVector,,11,0,22,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_F,GeoNewPoint,,11,0,21,3,);
B(B_VAROUT,,LApointHead,21,1,23,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_F,GeoNewPoint,,11,0,21,3,);
B(B_VAROUT,,LApointCenter,21,1,23,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VAROUT,,LAlineBoom,22,1,24,3,);
B(B_F,GeoNewLineSeg,,11,0,22,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_F,GeoNewPoint,,11,0,21,3,);
B(B_VAROUT,,LApoint1,21,1,23,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_F,GeoNewPoint,,11,0,21,3,);
B(B_VAROUT,,LApoint2,21,1,23,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_F,GeoNewPoint,,11,0,21,3,);
B(B_VAROUT,,LApoint3,21,1,23,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VAROUT,,LAline1,22,1,24,3,);
B(B_F,GeoNewLineSeg,,11,0,22,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VAROUT,,LAline2,22,1,24,3,);
B(B_F,GeoNewLineSeg,,11,0,22,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_F,GeoNewPoint,,11,0,21,3,);
B(B_VAROUT,,LApointHeadAct,21,1,23,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VAROUT,,LAlineBoomAct,22,1,24,3,);
B(B_F,GeoNewLineSeg,,11,0,22,3,);
        END_NETWORK_BODY
    END_NET_WORK
END_BODY
END_FUNCTION_BLOCK

FUNCTION_BLOCK GPpidPowRegV020
(*name of author: Manfred Schapler
version: 1.0
date: 04/97
modification:*)
(*name of author: Manfred Schapler
version: 1.0
date: 04/97
modification:*)
	VAR_INPUT 
		analog_signal_1: REAL:=0.0;
			(*analog signal 1*)
		analog_signal_2: REAL:=0.0;
			(*analog signal 2*)
		corr_p_fact: REAL:=0.0;
			(*correction of the p-factor*)
		corr_i_fact_up: REAL:=0.0;
			(*correction of the i-factor up*)
		corr_i_fact_down: REAL:=0.0;
			(*correction of the i-factor down*)
		corr_d_fact: REAL:=0.0;
			(*correction of the d-factor*)
		reset_output_is0: BOOL:=FALSE;
			(*reset PID special regulator with true on the output*)
	END_VAR
	VAR_OUTPUT
		reduction_factor: REAL:=0.0;
			(*reduction factor between 0 and 1*)
	END_VAR
	VAR_EXTERNAL
		MDdeltaTime: REAL:=0.001;
			(*time to the last scan in sec.*)
	END_VAR
	VAR 
		LDdeviation: REAL:=0.0;
			(*deviation of the analog signal*)
		LDdevSignal_t0: REAL:=0.0;
			(*deviation signal by the last calculation*)
		LDdevSignalDiff: REAL:=0.0;
			(*deviation signal difference to the last calculation*)
		LDp_Part: REAL:=0.0;
			(*p-part*)
		LDi_Part: REAL:=0.0;
			(*i-part*)
		LDd_Part: REAL:=0.0;
			(*d-part*)
	END_VAR
'FBD'
BODY
    WORKSPACE
        NETWORK_LIST_TYPE := NWTYPEFBD ;
        ACTIVE_NETWORK := 0 ;
    END_WORKSPACE
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,store the difference to the last calculation,1,1,27,2,);
B(B_VARIN,,LDdeviation,9,3,11,5,);
B(B_VAROUT,,LDdevSignal_t0,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_COMMENT,,deviation,1,1,27,2,);
B(B_F,@SUB,,11,3,16,7,);
B(B_VARIN,,analog_signal_1,9,5,11,7,);
B(B_VARIN,,analog_signal_2,9,4,11,6,);
B(B_VAROUT,,LDdeviation,16,4,18,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_COMMENT,,deviation grade,1,1,27,2,);
B(B_F,@SUB,,11,3,16,7,);
B(B_VARIN,,LDdeviation,9,4,11,6,);
B(B_VARIN,,LDdevSignal_t0,9,5,11,7,);
B(B_VAROUT,,LDdevSignalDiff,16,4,18,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_COMMENT,,P-part,1,1,27,2,);
B(B_F,@MUL-2,,11,5,16,9,);
B(B_VARIN,,LDdeviation,9,6,11,8,);
B(B_VARIN,,corr_p_fact,9,7,11,9,);
B(B_F,limit,,18,4,24,9,);
B(B_VARIN,,100.0,15,9,17,11,);
B(B_VARIN,,0.0,15,3,17,5,);
B(B_VAROUT,,LDp_Part,24,5,26,7,);
L(16,7,18,7);
L(17,6,18,6);
L(17,4,17,6);
L(17,8,18,8);
L(17,8,17,10);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_COMMENT,,I-part,1,1,27,2,);
B(B_VARIN,,LDdeviation,9,6,11,8,);
B(B_F,@LT-2,,11,5,16,9,);
B(B_VARIN,,0.0,9,7,11,9,);
B(B_F,sel,,19,5,24,10,);
B(B_VARIN,,corr_i_fact_up,15,9,17,11,);
B(B_VARIN,,corr_i_fact_down,16,10,18,12,);
B(B_F,@ADD-2,,33,4,38,8,);
B(B_VARIN,,LDi_Part,30,9,32,11,);
B(B_F,@MUL-3,,26,4,31,9,);
B(B_VARIN,,MDdeltaTime,23,10,25,12,);
B(B_VARIN,,LDdeviation,23,3,25,5,);
B(B_F,limit,,40,3,46,8,);
B(B_VAROUT,,LDi_Part,46,4,48,6,);
B(B_VARIN,,0.0,37,2,39,4,);
B(B_VARIN,,100.0,37,8,39,10,);
L(16,7,19,7);
L(17,8,19,8);
L(18,9,19,9);
L(17,8,17,10);
L(18,9,18,11);
L(32,7,33,7);
L(31,6,33,6);
L(32,7,32,10);
L(25,6,26,6);
L(24,7,26,7);
L(25,8,26,8);
L(25,8,25,11);
L(25,4,25,6);
L(39,5,40,5);
L(39,7,40,7);
L(39,7,39,9);
L(39,3,39,5);
L(38,6,40,6);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_F,@DIV,,11,5,16,9,);
B(B_VARIN,,MDdeltaTime,9,7,11,9,);
B(B_VARIN,,LDdevSignalDiff,9,6,11,8,);
B(B_F,@MUL-2,,18,5,23,9,);
B(B_F,limit,,25,4,31,9,);
B(B_VARIN,,100.0,22,9,24,11,);
B(B_VARIN,,0.0,22,3,24,5,);
B(B_VAROUT,,LDd_Part,31,5,33,7,);
B(B_VARIN,,corr_d_fact,15,9,17,11,);
B(B_COMMENT,,D-part,1,1,27,2,);
L(17,8,18,8);
L(23,7,25,7);
L(24,6,25,6);
L(24,4,24,6);
L(24,8,25,8);
L(24,8,24,10);
L(17,8,17,10);
L(16,7,18,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_COMMENT,,reduction factor,1,1,27,2,);
B(B_F,@ADD-3,,11,5,16,10,);
B(B_F,@DIV,,18,5,23,9,);
B(B_VARIN,,100.0,15,10,17,12,);
B(B_F,limit,,25,4,31,9,);
B(B_VARIN,,0.0,22,3,24,5,);
B(B_VARIN,,1.0,22,9,24,11,);
B(B_VAROUT,,reduction_factor,31,5,33,7,);
B(B_VARIN,,LDp_Part,9,6,11,8,);
B(B_VARIN,,LDi_Part,9,7,11,9,);
B(B_VARIN,,LDd_Part,9,8,11,10,);
L(16,7,18,7);
L(17,8,18,8);
L(17,8,17,11);
L(24,6,25,6);
L(24,4,24,6);
L(23,7,25,7);
L(24,8,25,8);
L(24,8,24,10);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 24 ;
        NETWORK_BODY
B(B_COMMENT,,reset pid regulator,1,1,27,2,);
B(B_VARIN,,reset_output_is0,9,4,11,6,);
B(B_F,sel,,13,3,18,8,);
B(B_VAROUT,,LDp_Part,18,4,20,6,);
B(B_VARIN,,LDp_Part,9,5,11,7,);
B(B_VARIN,,0.0,9,6,11,8,);
B(B_F,sel,,13,8,18,13,);
B(B_VAROUT,,LDi_Part,18,9,20,11,);
B(B_VARIN,,0.0,9,11,11,13,);
B(B_F,sel,,13,13,18,18,);
B(B_VAROUT,,LDd_Part,18,14,20,16,);
B(B_VARIN,,0.0,9,16,11,18,);
B(B_VARIN,,LDd_Part,9,15,11,17,);
B(B_VARIN,,LDi_Part,9,10,11,12,);
B(B_F,sel,,13,18,18,23,);
B(B_VAROUT,,reduction_factor,18,19,20,21,);
B(B_VARIN,,0.0,9,21,11,23,);
B(B_VARIN,,reduction_factor,9,20,11,22,);
L(11,6,13,6);
L(11,7,13,7);
L(11,5,13,5);
L(11,11,13,11);
L(11,12,13,12);
L(11,16,13,16);
L(11,17,13,17);
L(12,10,13,10);
L(12,15,13,15);
L(11,21,13,21);
L(11,22,13,22);
L(12,20,13,20);
L(12,5,12,20);
        END_NETWORK_BODY
    END_NET_WORK
END_BODY
END_FUNCTION_BLOCK

FUNCTION_BLOCK GPpidV010
(*name of author: Manfred Schapler
version: 1.0
date: 04/97
modification:*)
(*name of author: Manfred Schapler
version: 1.0
date: 04/97
modification:*)
	VAR_INPUT 
		analog_signal_1: REAL:=0.0;
			(*analog signal 1*)
		analog_signal_2: REAL:=0.0;
			(*analog signal 2*)
		corr_p_fact: REAL:=0.0;
			(*correction of the p-factor*)
		corr_i_fact_up: REAL:=0.0;
			(*correction of the i-factor up*)
		corr_i_fact_down: REAL:=0.0;
			(*correction of the i-factor down*)
		corr_d_fact: REAL:=0.0;
			(*correction of the d-factor*)
		reset: BOOL:=FALSE;
			(*reset pid regulator*)
	END_VAR
	VAR_OUTPUT
		reduction_factor: REAL:=0.0;
			(*reduction factor between 0 and 1*)
	END_VAR
	VAR_EXTERNAL
		MDdeltaTime: REAL:=0.001;
			(*time to the last scan in sec.*)
	END_VAR
	VAR 
		LDdeviation: REAL:=0.0;
			(*deviation of the analog signal*)
		LDdevSignal_t0: REAL:=0.0;
			(*deviation signal by the last calculation*)
		LDdevSignalDiff: REAL:=0.0;
			(*deviation signal difference to the last calculation*)
		LDp_Part: REAL:=0.0;
			(*p-part*)
		LDi_Part: REAL:=0.0;
			(*i-part*)
		LDd_Part: REAL:=0.0;
			(*d-part*)
	END_VAR
'FBD'
BODY
    WORKSPACE
        NETWORK_LIST_TYPE := NWTYPEFBD ;
        ACTIVE_NETWORK := 0 ;
    END_WORKSPACE
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,store the difference to the last calculation,1,1,27,2,);
B(B_VARIN,,LDdeviation,9,3,11,5,);
B(B_VAROUT,,LDdevSignal_t0,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_COMMENT,,deviation,1,1,27,2,);
B(B_F,@SUB,,11,3,16,7,);
B(B_VARIN,,analog_signal_1,9,5,11,7,);
B(B_VARIN,,analog_signal_2,9,4,11,6,);
B(B_VAROUT,,LDdeviation,16,4,18,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_COMMENT,,deviation grade,1,1,27,2,);
B(B_F,@SUB,,11,3,16,7,);
B(B_VARIN,,LDdeviation,9,4,11,6,);
B(B_VARIN,,LDdevSignal_t0,9,5,11,7,);
B(B_VAROUT,,LDdevSignalDiff,16,4,18,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_COMMENT,,P-part,1,1,27,2,);
B(B_F,@MUL-2,,11,3,16,7,);
B(B_VAROUT,,LDp_Part,16,4,18,6,);
B(B_VARIN,,LDdeviation,9,4,11,6,);
B(B_VARIN,,corr_p_fact,9,5,11,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_COMMENT,,I-part,1,1,27,2,);
B(B_VARIN,,LDdeviation,9,6,11,8,);
B(B_F,@LT-2,,11,5,16,9,);
B(B_VARIN,,0.0,9,7,11,9,);
B(B_F,sel,,19,5,24,10,);
B(B_VARIN,,corr_i_fact_up,15,9,17,11,);
B(B_VARIN,,corr_i_fact_down,16,10,18,12,);
B(B_F,@ADD-2,,33,4,38,8,);
B(B_VARIN,,LDi_Part,30,9,32,11,);
B(B_F,@MUL-3,,26,4,31,9,);
B(B_VARIN,,MDdeltaTime,23,10,25,12,);
B(B_VARIN,,LDdeviation,23,3,25,5,);
B(B_VARIN,,100.0,37,8,39,10,);
B(B_VARIN,,-100.0,37,2,39,4,);
B(B_F,limit,,40,3,46,8,);
B(B_VAROUT,,LDi_Part,46,4,48,6,);
L(16,7,19,7);
L(17,8,19,8);
L(18,9,19,9);
L(17,8,17,10);
L(18,9,18,11);
L(32,7,33,7);
L(31,6,33,6);
L(32,7,32,10);
L(25,6,26,6);
L(24,7,26,7);
L(25,8,26,8);
L(25,8,25,11);
L(25,4,25,6);
L(38,6,40,6);
L(39,7,40,7);
L(39,5,40,5);
L(39,3,39,5);
L(39,7,39,9);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_COMMENT,,D-part,1,1,27,2,);
B(B_F,@DIV,,11,3,16,7,);
B(B_F,@MUL-2,,18,3,23,7,);
B(B_VARIN,,corr_d_fact,15,7,17,9,);
B(B_VAROUT,,LDd_Part,23,4,25,6,);
B(B_VARIN,,MDdeltaTime,9,5,11,7,);
B(B_VARIN,,LDdevSignalDiff,9,4,11,6,);
L(16,5,18,5);
L(17,6,18,6);
L(17,6,17,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_COMMENT,,reduction factor,1,1,27,2,);
B(B_F,@ADD-3,,11,5,16,10,);
B(B_F,@DIV,,18,5,23,9,);
B(B_VARIN,,100.0,15,10,17,12,);
B(B_F,limit,,25,4,31,9,);
B(B_VARIN,,-1.0,22,3,24,5,);
B(B_VARIN,,1.0,22,9,24,11,);
B(B_VAROUT,,reduction_factor,31,5,33,7,);
B(B_VARIN,,LDp_Part,9,6,11,8,);
B(B_VARIN,,LDi_Part,9,7,11,9,);
B(B_VARIN,,LDd_Part,9,8,11,10,);
L(16,7,18,7);
L(17,8,18,8);
L(17,8,17,11);
L(24,6,25,6);
L(24,4,24,6);
L(23,7,25,7);
L(24,8,25,8);
L(24,8,24,10);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 24 ;
        NETWORK_BODY
B(B_COMMENT,,reset pid regulator,1,1,27,2,);
B(B_VARIN,,reset,9,4,11,6,);
B(B_F,sel,,13,3,18,8,);
B(B_VAROUT,,LDp_Part,18,4,20,6,);
B(B_VARIN,,LDp_Part,9,5,11,7,);
B(B_VARIN,,0.0,9,6,11,8,);
B(B_F,sel,,13,8,18,13,);
B(B_VAROUT,,LDi_Part,18,9,20,11,);
B(B_VARIN,,0.0,9,11,11,13,);
B(B_F,sel,,13,13,18,18,);
B(B_VAROUT,,LDd_Part,18,14,20,16,);
B(B_VARIN,,0.0,9,16,11,18,);
B(B_VARIN,,LDd_Part,9,15,11,17,);
B(B_VARIN,,LDi_Part,9,10,11,12,);
B(B_F,sel,,13,18,18,23,);
B(B_VAROUT,,reduction_factor,18,19,20,21,);
B(B_VARIN,,0.0,9,21,11,23,);
B(B_VARIN,,reduction_factor,9,20,11,22,);
L(11,6,13,6);
L(11,7,13,7);
L(11,5,13,5);
L(11,11,13,11);
L(11,12,13,12);
L(11,16,13,16);
L(11,17,13,17);
L(12,10,13,10);
L(12,15,13,15);
L(11,21,13,21);
L(11,22,13,22);
L(12,20,13,20);
L(12,5,12,20);
        END_NETWORK_BODY
    END_NET_WORK
END_BODY
END_FUNCTION_BLOCK

FUNCTION_BLOCK HGanalogPartV024
(*name of author: Josef Schmid
version: 1.0
date: 07/99
modification:*)
(*name of author: Manfred Schapler
date: 04/97
modification:*)
	VAR_INPUT 
		analog_signal_in: REAL:=0.0;
			(*analog signal input*)
		presen_eng_speed: REAL:=0.0;
			(*present engine speed*)
		eng_spd_f_reduct: REAL:=0.0;
			(*engine speed for reduction*)
		max_lift_reg_sig: REAL:=0.0;
			(*maximum lifting regulator signal*)
		max_lowe_reg_sig: REAL:=0.0;
			(*maximum lowering regulator signal*)
		int_time_up: REAL:=0.0;
			(*integration time up*)
		int_time_dn: REAL:=0.0;
			(*integration time down*)
		rope_lenght: REAL:=0.0;
			(*rope lenght*)
		max_hg_speed: REAL:=0.0;
			(*maximum hg speed [m/min]*)
		hg_upper_limit: REAL:=0.0;
			(*hg upper limitation [m]*)
		hg_lower_limit: REAL:=0.0;
			(*hg lower limitation [m]*)
		hg_limit_presel: BOOL:=FALSE;
			(*hg hight limitation preselected*)
	END_VAR
	VAR_OUTPUT
		an_signal_valve: REAL:=0.0;
			(*analog signal pump*)
		valve_in_zero: BOOL:=FALSE;
			(*pump signal in zero*)
		hg_stop_lifting: BOOL:=FALSE;
			(*hg stop lifting*)
		hg_stop_lowering: BOOL:=FALSE;
			(*hg stop lowering*)
		hg_stop_lift_sym: BOOL:=FALSE;
			(*hg stop lifting symbol*)
		hg_stop_low_sym: BOOL:=FALSE;
			(*hg stop lowering symbol*)
	END_VAR
	VAR 
		LDsignalDemand: REAL:=0.0;
		LDsignalIntegr: REAL:=0.0;
		LDlowering: REAL:=0.0;
		LDlifting: REAL:=0.0;
		LDlimAnalSignal: REAL:=0.0;
			(*analog signal after limitations*)
		LDhightLimRedSig: REAL:=0.0;
			(*reduction signal hight limitation*)
		Integrator1: Integrator;
		ADhgHightLim1: ADhgHightLimV010;
	END_VAR
'FBD'
BODY
    WORKSPACE
        NETWORK_LIST_TYPE := NWTYPEFBD ;
        ACTIVE_NETWORK := 0 ;
    END_WORKSPACE
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,signal limitation in consideration to the engine speed,1,1,27,2,);
B(B_VARIN,,presen_eng_speed,9,7,11,9,);
B(B_VARIN,,eng_spd_f_reduct,9,8,11,10,);
B(B_F,@DIV,,11,6,16,10,);
B(B_F,limit,,20,5,26,10,);
B(B_VARIN,,0.0,18,6,20,8,);
B(B_VARIN,,1.0,18,8,20,10,);
B(B_F,@MUL-2,,29,4,34,8,);
B(B_VAROUT,,LDsignalDemand,34,5,36,7,);
B(B_VARIN,,analog_signal_in,26,3,28,5,);
L(16,8,20,8);
L(28,6,29,6);
L(28,4,28,6);
L(26,7,29,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,integrator hg analog signal,1,1,27,2,);
B(B_FB,Integrator,Integrator1,11,4,20,10,);
B(B_VARIN,,TRUE,9,5,11,7,);
B(B_VARIN,,int_time_up,9,7,11,9,);
B(B_VARIN,,int_time_dn,9,8,11,10,);
B(B_VAROUT,,LDsignalIntegr,20,5,22,7,);
B(B_VARIN,,LDsignalDemand,9,6,11,8,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_COMMENT,,lifting limitation,1,1,27,2,);
B(B_F,@MUL-2,,11,3,16,7,);
B(B_VARIN,,LDsignalIntegr,9,4,11,6,);
B(B_VARIN,,max_lift_reg_sig,9,5,11,7,);
B(B_VAROUT,,LDlifting,16,4,18,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_COMMENT,,lowering limitation,1,1,27,2,);
B(B_F,@MUL-2,,11,3,16,7,);
B(B_VARIN,,LDsignalIntegr,9,4,11,6,);
B(B_VARIN,,max_lowe_reg_sig,9,5,11,7,);
B(B_VAROUT,,LDlowering,16,4,18,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,selection lifting or lowering,1,1,27,2,);
B(B_VARIN,,LDsignalIntegr,9,4,11,6,);
B(B_F,@GE-2,,11,3,16,7,);
B(B_VARIN,,0.0,9,5,11,7,);
B(B_F,sel,,16,5,21,10,);
B(B_VAROUT,,LDlimAnalSignal,21,6,23,8,);
B(B_VARIN,,LDlowering,14,7,16,9,);
B(B_VARIN,,LDlifting,14,8,16,10,);
L(16,5,16,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_FB,ADhgHightLimV010,ADhgHightLim1,11,3,32,12,);
B(B_VARIN,,hg_limit_presel,9,4,11,6,);
B(B_VARIN,,rope_lenght,9,5,11,7,);
B(B_VARIN,,max_hg_speed,9,6,11,8,);
B(B_VARIN,,hg_upper_limit,9,7,11,9,);
B(B_VARIN,,hg_lower_limit,9,8,11,10,);
B(B_VARIN,,int_time_dn,9,9,11,11,);
B(B_VARIN,,LDlimAnalSignal,9,10,11,12,);
B(B_VAROUT,,hg_stop_lifting,32,5,34,7,);
B(B_VAROUT,,hg_stop_lowering,32,6,34,8,);
B(B_VAROUT,,hg_stop_lift_sym,32,7,34,9,);
B(B_VAROUT,,hg_stop_low_sym,32,8,34,10,);
B(B_VAROUT,,LDhightLimRedSig,32,4,34,6,);
B(B_COMMENT,,hoisting limitation reduction signal,1,1,27,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_F,@MUL-2,,11,3,16,7,);
B(B_VARIN,,LDhightLimRedSig,9,5,11,7,);
B(B_VARIN,,LDlimAnalSignal,9,4,11,6,);
B(B_VAROUT,,an_signal_valve,16,4,18,6,);
B(B_COMMENT,,joy stick signal hoisting limitation ,2,1,28,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_COMMENT,,valve signal in zero,1,1,27,2,);
B(B_F,EQ_R,,11,3,16,7,);
B(B_VARIN,,0.0,9,5,11,7,);
B(B_VARIN,,an_signal_valve,9,4,11,6,);
B(B_VAROUT,,valve_in_zero,16,4,18,6,);
        END_NETWORK_BODY
    END_NET_WORK
END_BODY
END_FUNCTION_BLOCK

FUNCTION_BLOCK HGanalogPartV037
(*name of author: Manfred Schapler
version: 1.0
date: 04/97
modification:*)
(*name of author: Manfred Schapler
date: 04/97
modification:*)
	VAR_INPUT 
		analog_signal_in: REAL:=0.0;
			(*analog signal input*)
		system_pressure: REAL:=0.0;
			(*system pressure*)
		max_pow_reg_sign: REAL:=0.0;
			(*maximum engine power regulator signal*)
		integr_time_up: REAL:=0.0;
			(*integrator time for analog signal up*)
		inetgr_time_down: REAL:=0.0;
			(*integrator time for analog signal down*)
		en_leakoil_comp: BOOL:=FALSE;
			(*enable leakoil compensation*)
		leakoil_anal_sig: REAL:=0.0;
			(*leakoil analog signal*)
		winch_lifting: BOOL:=FALSE;
			(*winch is lifting*)
		winch_lowering: BOOL:=FALSE;
			(*winch is lowering*)
		oth_low_reg_sign: REAL:=0.0;
			(*other lowering limitation regulator signal*)
		anal_sign_270bar: REAL:=0.0;
			(*low_lim_reg analog signal by 270bar*)
		load_press_to_sy: BOOL:=FALSE;
			(*give system pressure into the system*)
		en_store_press: BOOL:=FALSE;
			(*enable store system pressure*)
		set_press_memory: BOOL:=FALSE;
			(*set pressure memory*)
		press_memory_in: REAL:=0.0;
			(*HG 1 pressure memory*)
		hg_limit_presel: BOOL:=FALSE;
			(*hg hight limitation preselected*)
		rope_lenght: REAL:=0.0;
			(*rope lenght*)
		max_hg_speed: REAL:=0.0;
			(*maximum hg speed [m/min]*)
		hg_upper_limit: REAL:=0.0;
			(*hg upper limitation [m]*)
		hg_lower_limit: REAL:=0.0;
			(*hg lower limitation [m]*)
	END_VAR
	VAR_OUTPUT
		analog_signal_pu: REAL:=0.0;
			(*analog signal pump*)
		analog_signal_tr: REAL:=0.0;
			(*analog signal trimot*)
		pump_in_zero: BOOL:=FALSE;
			(*pump in zero position*)
		press_loaded: BOOL:=FALSE;
			(*system pressure loaded*)
		en_trimot_analog: BOOL:=FALSE;
			(*enable trimot analog*)
		low_lim_reg_sign: REAL:=0.0;
			(*lowering limitation regultor signal*)
		press_memory_out: REAL:=0.0;
			(*HG 1 pressure memory*)
		hg_stop_lifting: BOOL:=FALSE;
			(*hg stop lifting*)
		hg_stop_lowering: BOOL:=FALSE;
			(*hg stop lowering*)
		hg_stop_lift_sym: BOOL:=FALSE;
			(*hg stop lifting symbol*)
		hg_stop_low_sym: BOOL:=FALSE;
			(*hg stop lowering symbol*)
	END_VAR
	VAR 
		LD1: REAL:=0.0;
			(*analog signal trimot (intermediat)*)
		LD2: REAL:=0.0;
			(*analog signal after maximum engine power regulator limitation*)
		LD3: REAL:=0.0;
			(*analog signal after lowering controller limitation*)
		LDanalSignIntegr: REAL:=0.0;
			(*analog signal after integrator*)
		LDlimAnalSignal: REAL:=0.0;
			(*analog signal after limitations*)
		LDloadPressSign: REAL:=0.0;
			(*analog signal to load system pressure*)
		LDanalSigWouLeak: REAL:=0.0;
			(*analog signal to the pump without leakoil*)
		LDleakoilAnal: REAL:=0.0;
			(*analog signal from the leakoil compensation*)
		LDfilteredPress: REAL:=0.0;
			(*filtered pressure*)
		LDlowLimRegSig: REAL:=0.0;
			(*lowering limitation regulator signal*)
		LDhightLimRedSig: REAL:=0.0;
			(*reduction signal hight limitation*)
		Integrator1: Integrator;
		Integrator2: Integrator;
		Integrator3: Integrator;
		Integrator4: Integrator;
		Integrator5: Integrator;
		HGleakoilCom1: HGleakoilComV020;
		WndComp1: WndComp;
		GPfilter101: GPfilter10V010;
		ADhgHightLim1: ADhgHightLimV010;
	END_VAR
'FBD'
BODY
    WORKSPACE
        NETWORK_LIST_TYPE := NWTYPEFBD ;
        ACTIVE_NETWORK := 0 ;
    END_WORKSPACE
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 14 ;
        NETWORK_BODY
B(B_COMMENT,,integrator hg 1 analog signal,1,1,27,2,);
B(B_VARIN,,analog_signal_in,11,7,13,9,);
B(B_F,sel,,13,5,18,10,);
B(B_VARIN,,LDloadPressSign,11,8,13,10,);
B(B_VARIN,,load_press_to_sy,11,6,13,8,);
B(B_FB,Integrator,Integrator1,21,4,30,10,);
B(B_VAROUT,,LDanalSignIntegr,30,5,32,7,);
B(B_VARIN,,en_store_press,18,3,20,5,);
B(B_VARIN,,inetgr_time_down,18,11,20,13,);
B(B_VARIN,,integr_time_up,17,10,19,12,);
L(20,4,20,6);
L(20,6,21,6);
L(19,8,19,11);
L(20,9,20,12);
L(20,9,21,9);
L(19,8,21,8);
L(18,7,21,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,maximum engine power regulator limitation,1,1,27,2,);
B(B_VARIN,,LDanalSignIntegr,9,5,11,7,);
B(B_F,limit,,11,3,17,8,);
B(B_VARIN,,0.0,9,4,11,6,);
B(B_VARIN,,100.0,9,6,11,8,);
B(B_F,@MUL-2,,19,3,24,7,);
B(B_VAROUT,,LD1,24,4,26,6,);
B(B_VARIN,,max_pow_reg_sign,16,8,18,10,);
L(17,5,19,5);
L(18,6,19,6);
L(18,6,18,9);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 16 ;
        NETWORK_BODY
B(B_COMMENT,,lowering control limitation,1,1,27,2,);
B(B_VARIN,,press_memory_in,9,5,11,7,);
B(B_F,@SUB,,11,4,16,8,);
B(B_VARIN,,30.0,9,6,11,8,);
B(B_VARIN,,7.5,15,8,17,10,);
B(B_FB,Integrator,Integrator2,35,3,44,9,);
B(B_VARIN,,800.0,31,8,33,10,);
B(B_VARIN,,TRUE,32,2,34,4,);
B(B_F,limit,,46,2,52,7,);
B(B_VAROUT,,LDfilteredPress,52,3,54,5,);
B(B_VARIN,,0.0,43,1,45,3,);
B(B_VARIN,,370.0,43,9,45,11,);
B(B_FB,GPfilter10V010,GPfilter101,18,4,32,8,);
B(B_VARIN,,LDlimAnalSignal,19,9,21,11,);
B(B_VARIN,,0.0,19,10,21,12,);
B(B_F,@GE-2,,21,8,26,12,);
B(B_F,sel,,28,10,33,15,);
B(B_VARIN,,20.0,26,12,28,14,);
B(B_VARIN,,10000.0,26,13,28,15,);
L(17,7,17,9);
L(17,7,18,7);
L(33,7,35,7);
L(34,8,35,8);
L(33,7,33,9);
L(34,3,34,5);
L(34,5,35,5);
L(44,5,46,5);
L(45,4,46,4);
L(45,2,45,4);
L(45,6,46,6);
L(45,6,45,10);
L(16,6,18,6);
L(32,6,35,6);
L(26,10,27,10);
L(27,10,27,12);
L(27,12,28,12);
L(33,12,34,12);
L(34,8,34,12);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 22 ;
        NETWORK_BODY
B(B_F,@SUB,,11,9,16,13,);
B(B_VARIN,,LDfilteredPress,9,10,11,12,);
B(B_VARIN,,70.0,9,11,11,13,);
B(B_F,@DIV,,18,9,23,13,);
B(B_VARIN,,200.0,15,13,17,15,);
B(B_F,@MUL-2,,25,9,30,13,);
B(B_F,@SUB,,32,8,37,12,);
B(B_VARIN,,1.0,29,7,31,9,);
B(B_F,limit,,39,7,45,12,);
B(B_VARIN,,0.0,36,6,38,8,);
B(B_VARIN,,1.0,36,12,38,14,);
B(B_F,@DIV,,18,15,23,19,);
B(B_F,@SUB,,11,15,16,19,);
B(B_VARIN,,100.0,9,16,11,18,);
B(B_VARIN,,anal_sign_270bar,9,17,11,19,);
B(B_VARIN,,100.0,15,19,17,21,);
B(B_COMMENT,,200bar Regelbereichø^von 70bar bis 270barø^auf den eingest Wert,2,13,11,16,);
B(B_F,sel,,48,5,53,10,);
B(B_VAROUT,,low_lim_reg_sign,53,6,55,8,);
B(B_VARIN,,1.0,44,5,46,7,);
B(B_VARIN,,LDanalSignIntegr,39,2,41,4,);
B(B_VARIN,,0.0,39,3,41,5,);
B(B_F,@LT-2,,41,1,46,5,);
L(16,11,18,11);
L(17,12,18,12);
L(17,12,17,14);
L(23,11,25,11);
L(24,12,25,12);
L(30,11,32,11);
L(31,10,32,10);
L(31,8,31,10);
L(37,10,39,10);
L(38,9,39,9);
L(38,11,39,11);
L(38,11,38,13);
L(38,7,38,9);
L(23,17,24,17);
L(16,17,18,17);
L(17,18,18,18);
L(17,18,17,20);
L(24,12,24,17);
L(45,9,48,9);
L(46,8,48,8);
L(47,7,48,7);
L(46,6,46,8);
L(47,3,47,7);
L(46,3,47,3);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_VARIN,,low_lim_reg_sign,9,2,11,4,);
B(B_VARIN,,oth_low_reg_sign,9,3,11,5,);
B(B_VAROUT,,LDlowLimRegSig,18,2,20,4,);
B(B_VARIN,,1.0,9,4,11,6,);
B(B_VARIN,,1.0,9,5,11,7,);
B(B_F,SigMin4,,11,1,18,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_F,@MUL-2,,11,3,16,7,);
B(B_VARIN,,LDanalSignIntegr,9,4,11,6,);
B(B_FB,Integrator,Integrator3,19,2,28,8,);
B(B_VAROUT,,LD2,28,3,30,5,);
B(B_VARIN,,TRUE,16,1,18,3,);
B(B_VARIN,,50.0,15,7,17,9,);
B(B_VARIN,,100.0,16,8,18,10,);
B(B_VARIN,,LDlowLimRegSig,9,5,11,7,);
L(17,6,19,6);
L(17,6,17,8);
L(18,7,18,9);
L(18,7,19,7);
L(16,5,19,5);
L(18,4,19,4);
L(18,2,18,4);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,selection lifting or lowering,1,1,27,2,);
B(B_VARIN,,LDanalSignIntegr,9,4,11,6,);
B(B_VARIN,,0.0,9,5,11,7,);
B(B_F,sel,,18,5,23,10,);
B(B_VAROUT,,LDlimAnalSignal,23,6,25,8,);
B(B_F,@GE-2,,11,3,16,7,);
B(B_VARIN,,LD1,16,8,18,10,);
B(B_VARIN,,LD2,16,7,18,9,);
L(17,5,17,7);
L(17,7,18,7);
L(16,5,17,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_FB,ADhgHightLimV010,ADhgHightLim1,11,3,32,12,);
B(B_VARIN,,hg_limit_presel,9,4,11,6,);
B(B_VARIN,,rope_lenght,9,5,11,7,);
B(B_VARIN,,max_hg_speed,9,6,11,8,);
B(B_VARIN,,hg_upper_limit,9,7,11,9,);
B(B_VARIN,,hg_lower_limit,9,8,11,10,);
B(B_VARIN,,inetgr_time_down,9,9,11,11,);
B(B_VARIN,,LDlimAnalSignal,9,10,11,12,);
B(B_VAROUT,,hg_stop_lifting,32,5,34,7,);
B(B_VAROUT,,hg_stop_lowering,32,6,34,8,);
B(B_VAROUT,,hg_stop_lift_sym,32,7,34,9,);
B(B_VAROUT,,hg_stop_low_sym,32,8,34,10,);
B(B_VAROUT,,LDhightLimRedSig,32,4,34,6,);
B(B_COMMENT,,hoisting limitation,1,1,27,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_COMMENT,,trimot: joystick signal greater than 10%,1,1,27,2,);
B(B_VAROUT,,LD3,21,4,23,6,);
B(B_F,@MUL-2,,16,3,21,7,);
B(B_VARIN,,LDhightLimRedSig,14,4,16,6,);
B(B_F,abs,,11,5,16,8,);
B(B_VARIN,,LDanalSignIntegr,9,6,11,8,);
B(B_F,@GE-2,,22,5,27,9,);
B(B_VAROUT,,en_trimot_analog,27,6,29,8,);
B(B_VARIN,,10.0,20,7,22,9,);
L(21,5,21,7);
L(16,6,16,7);
L(21,7,22,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_F,@SUB,,11,5,16,9,);
B(B_VARIN,,LD3,9,6,11,8,);
B(B_VARIN,,10.0,9,7,11,9,);
B(B_F,limit,,18,4,24,9,);
B(B_VARIN,,0.0,15,3,17,5,);
B(B_F,@DIV,,26,4,31,8,);
B(B_VARIN,,0.9,23,9,25,11,);
B(B_COMMENT,,trimot analog output,1,1,27,2,);
B(B_VAROUT,,analog_signal_tr,31,5,33,7,);
L(17,4,17,6);
L(17,6,18,6);
L(16,7,18,7);
L(17,7,17,8);
L(17,8,18,8);
L(24,6,26,6);
L(25,7,26,7);
L(25,7,25,10);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_COMMENT,,load system pressure,1,1,27,2,);
B(B_FB,Integrator,Integrator4,12,6,21,12,);
B(B_VARIN,,6.0,10,9,12,11,);
B(B_VARIN,,6.0,10,10,12,12,);
B(B_F,sel,,32,2,37,7,);
B(B_VAROUT,,LDloadPressSign,37,3,39,5,);
B(B_VARIN,,0.0,30,4,32,6,);
B(B_VARIN,,load_press_to_sy,9,3,11,5,);
B(B_VARIN,,20.0,10,8,12,10,);
B(B_F,@ADD-2,,25,6,30,10,);
B(B_VARIN,,8.0,23,8,25,10,);
L(11,8,12,8);
L(31,6,32,6);
L(31,6,31,8);
L(30,8,31,8);
L(11,4,32,4);
L(11,4,11,8);
L(21,8,25,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_VARIN,,0.0,23,9,25,11,);
B(B_VARIN,,400.0,15,9,17,11,);
B(B_FB,WndComp,WndComp1,26,2,33,8,);
B(B_VAROUT,,press_loaded,40,5,42,7,);
B(B_VARIN,,en_store_press,32,8,34,10,);
B(B_F,@AND-2,,35,4,40,8,0N);
B(B_F,limit,,18,4,24,9,);
B(B_F,@SUB,,11,5,16,9,);
B(B_VARIN,,50.0,9,7,11,9,);
B(B_VARIN,,0.0,15,3,17,5,);
B(B_VARIN,,system_pressure,23,1,25,3,);
B(B_VARIN,,press_memory_in,9,6,11,8,);
L(34,7,35,7);
L(34,7,34,9);
L(33,6,35,6);
L(25,4,26,4);
L(25,2,25,4);
L(16,7,18,7);
L(17,6,18,6);
L(17,4,17,6);
L(17,8,18,8);
L(17,8,17,10);
L(24,6,26,6);
L(25,7,26,7);
L(25,7,25,10);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_COMMENT,,store system pressure + set pressure memory (to 100 - 30bar),1,1,27,2,);
B(B_F,sel,,11,5,16,10,);
B(B_VARIN,,press_memory_in,9,7,11,9,);
B(B_VARIN,,en_store_press,9,6,11,8,);
B(B_VARIN,,system_pressure,9,8,11,10,);
B(B_VARIN,,70.0,15,10,17,12,);
B(B_F,sel,,17,4,22,9,);
B(B_VAROUT,,press_memory_out,22,5,24,7,);
B(B_VARIN,,set_press_memory,15,3,17,5,);
L(17,4,17,6);
L(16,7,17,7);
L(17,8,17,11);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,selection joysticksignal or load pressure signal,1,1,27,2,);
B(B_F,@MUL-2,,11,6,16,10,);
B(B_VARIN,,LDhightLimRedSig,9,8,11,10,);
B(B_VARIN,,LDlimAnalSignal,9,7,11,9,);
B(B_VAROUT,,LDanalSigWouLeak,21,4,23,6,);
B(B_F,sel,,16,3,21,8,);
B(B_VARIN,,en_store_press,14,4,16,6,);
B(B_VARIN,,LDloadPressSign,14,5,16,7,);
L(16,7,16,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_COMMENT,,check pump in zero,1,1,27,2,);
B(B_VARIN,,LDanalSigWouLeak,9,4,11,6,);
B(B_F,EQ_R,,11,3,16,7,);
B(B_VARIN,,0.0,9,5,11,7,);
B(B_VAROUT,,pump_in_zero,16,4,18,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 20 ;
        NETWORK_BODY
B(B_COMMENT,,leakoil compensation,1,1,27,2,);
B(B_VARIN,,LDanalSigWouLeak,9,6,11,8,);
B(B_F,@GT-2,,13,5,18,9,);
B(B_VARIN,,0.0,9,7,11,9,);
B(B_VARIN,,0.0,9,11,11,13,);
B(B_VARIN,,system_pressure,21,16,23,18,);
B(B_VARIN,,leakoil_anal_sig,22,17,24,19,);
B(B_VARIN,,en_leakoil_comp,22,3,24,5,);
B(B_VAROUT,,LDleakoilAnal,48,5,50,7,);
B(B_F,@LT-2,,13,9,18,13,);
B(B_VARIN,,winch_lifting,18,14,20,16,);
B(B_VARIN,,winch_lowering,19,15,21,17,);
B(B_FB,HGleakoilComV020,HGleakoilCom1,25,4,48,14,);
L(11,7,13,7);
L(11,8,13,8);
L(11,12,13,12);
L(19,8,19,11);
L(20,9,20,15);
L(21,10,21,16);
L(22,11,22,14);
L(12,14,22,14);
L(12,7,12,14);
L(24,13,24,18);
L(23,12,23,17);
L(24,13,25,13);
L(23,12,25,12);
L(22,11,25,11);
L(21,10,25,10);
L(20,9,25,9);
L(19,8,25,8);
L(18,7,25,7);
L(24,4,24,6);
L(12,11,13,11);
L(18,11,19,11);
L(24,6,25,6);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 14 ;
        NETWORK_BODY
B(B_COMMENT,,output signal,1,1,27,2,);
B(B_FB,Integrator,Integrator5,19,4,28,10,);
B(B_VARIN,,TRUE,16,3,18,5,);
B(B_VARIN,,300.0,16,11,18,13,);
B(B_VARIN,,integr_time_up,15,10,17,12,);
B(B_VAROUT,,analog_signal_pu,28,5,30,7,);
B(B_VARIN,,LDleakoilAnal,9,7,11,9,);
B(B_VARIN,,LDanalSigWouLeak,9,6,11,8,);
B(B_F,@ADD-2,,11,5,16,9,);
B(B_COMMENT,,Integrationszeit der Pumpe 0~3 Sekunden. Diesø^wird immer benötigt damit Pumpe auch demø^Signal folgen kann. (Eingriff GLR) ,21,10,38,13,);
L(18,4,18,6);
L(18,6,19,6);
L(17,8,17,11);
L(18,9,18,12);
L(18,9,19,9);
L(17,8,19,8);
L(16,7,19,7);
        END_NETWORK_BODY
    END_NET_WORK
END_BODY
END_FUNCTION_BLOCK

FUNCTION_BLOCK HGanalogPartV039
(*name of author: Manfred Schapler
version: 1.0
date: 04/97
modification:*)
(*name of author: Manfred Schapler
date: 04/97
modification:*)
	VAR_INPUT 
		analog_signal_in: REAL:=0.0;
			(*analog signal input*)
		system_pressure: REAL:=0.0;
			(*system pressure*)
		max_lift_reg_sig: REAL:=0.0;
			(*maximum lifting regulator signal*)
		max_lowe_reg_sig: REAL:=0.0;
			(*maximum lowering regulator signal*)
		integr_time_up: REAL:=0.0;
			(*integrator time for analog signal up*)
		inetgr_time_down: REAL:=0.0;
			(*integrator time for analog signal down*)
		en_leakoil_comp: BOOL:=FALSE;
			(*enable leakoil compensation*)
		leakoil_anal_sig: REAL:=0.0;
			(*leakoil analog signal*)
		winch_lifting: BOOL:=FALSE;
			(*winch is lifting*)
		winch_lowering: BOOL:=FALSE;
			(*winch is lowering*)
		anal_sign_270bar: REAL:=0.0;
			(*low_lim_reg analog signal by 270bar*)
		load_press_to_sy: BOOL:=FALSE;
			(*give system pressure into the system*)
		en_store_press: BOOL:=FALSE;
			(*enable store system pressure*)
		set_press_memory: BOOL:=FALSE;
			(*set pressure memory*)
		press_memory_in: REAL:=0.0;
			(*HG 1 pressure memory*)
		hg_limit_presel: BOOL:=FALSE;
			(*hg hight limitation preselected*)
		rope_lenght: REAL:=0.0;
			(*rope lenght*)
		max_hg_speed: REAL:=0.0;
			(*maximum hg speed [m/min]*)
		hg_upper_limit: REAL:=0.0;
			(*hg upper limitation [m]*)
		hg_lower_limit: REAL:=0.0;
			(*hg lower limitation [m]*)
	END_VAR
	VAR_OUTPUT
		analog_signal_pu: REAL:=0.0;
			(*analog signal pump*)
		analog_signal_tr: REAL:=0.0;
			(*analog signal trimot*)
		pump_in_zero: BOOL:=FALSE;
			(*pump in zero position*)
		press_loaded: BOOL:=FALSE;
			(*system pressure loaded*)
		en_trimot_analog: BOOL:=FALSE;
			(*enable trimot analog*)
		low_lim_reg_sign: REAL:=0.0;
			(*lowering limitation regultor signal*)
		press_memory_out: REAL:=0.0;
			(*HG 1 pressure memory*)
		hg_stop_lifting: BOOL:=FALSE;
			(*hg stop lifting*)
		hg_stop_lowering: BOOL:=FALSE;
			(*hg stop lowering*)
		hg_stop_lift_sym: BOOL:=FALSE;
			(*hg stop lifting symbol*)
		hg_stop_low_sym: BOOL:=FALSE;
			(*hg stop lowering symbol*)
	END_VAR
	VAR 
		LD1: REAL:=0.0;
			(*analog signal trimot (intermediat)*)
		LD2: REAL:=0.0;
			(*analog signal after maximum engine power regulator limitation*)
		LD3: REAL:=0.0;
			(*analog signal after lowering controller limitation*)
		LDanalSignIntegr: REAL:=0.0;
			(*analog signal after integrator*)
		LDlimAnalSignal: REAL:=0.0;
			(*analog signal after limitations*)
		LDloadPressSign: REAL:=0.0;
			(*analog signal to load system pressure*)
		LDanalSigWouLeak: REAL:=0.0;
			(*analog signal to the pump without leakoil*)
		LDleakoilAnal: REAL:=0.0;
			(*analog signal from the leakoil compensation*)
		LDfilteredPress: REAL:=0.0;
			(*filtered pressure*)
		LDhightLimRedSig: REAL:=0.0;
			(*reduction signal hight limitation*)
		Integrator1: Integrator;
		Integrator2: Integrator;
		Integrator3: Integrator;
		Integrator4: Integrator;
		Integrator5: Integrator;
		HGleakoilCom1: HGleakoilComV020;
		WndComp1: WndComp;
		GPfilter101: GPfilter10V010;
		ADhgHightLim1: ADhgHightLimV010;
	END_VAR
'FBD'
BODY
    WORKSPACE
        NETWORK_LIST_TYPE := NWTYPEFBD ;
        ACTIVE_NETWORK := 0 ;
    END_WORKSPACE
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 14 ;
        NETWORK_BODY
B(B_COMMENT,,integrator hg 1 analog signal,1,1,27,2,);
B(B_VARIN,,analog_signal_in,11,7,13,9,);
B(B_F,sel,,13,5,18,10,);
B(B_VARIN,,LDloadPressSign,11,8,13,10,);
B(B_VARIN,,load_press_to_sy,11,6,13,8,);
B(B_FB,Integrator,Integrator1,21,4,30,10,);
B(B_VAROUT,,LDanalSignIntegr,30,5,32,7,);
B(B_VARIN,,en_store_press,18,3,20,5,);
B(B_VARIN,,inetgr_time_down,18,11,20,13,);
B(B_VARIN,,integr_time_up,17,10,19,12,);
L(20,4,20,6);
L(20,6,21,6);
L(19,8,19,11);
L(20,9,20,12);
L(20,9,21,9);
L(19,8,21,8);
L(18,7,21,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,maximum engine power regulator limitation,1,1,27,2,);
B(B_VARIN,,LDanalSignIntegr,9,5,11,7,);
B(B_F,limit,,11,3,17,8,);
B(B_VARIN,,0.0,9,4,11,6,);
B(B_VARIN,,100.0,9,6,11,8,);
B(B_F,@MUL-2,,19,3,24,7,);
B(B_VAROUT,,LD1,24,4,26,6,);
B(B_VARIN,,max_lift_reg_sig,16,8,18,10,);
L(17,5,19,5);
L(18,6,19,6);
L(18,6,18,9);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 16 ;
        NETWORK_BODY
B(B_COMMENT,,lowering control limitation,1,1,27,2,);
B(B_VARIN,,press_memory_in,9,5,11,7,);
B(B_F,@SUB,,11,4,16,8,);
B(B_VARIN,,30.0,9,6,11,8,);
B(B_VARIN,,7.5,15,8,17,10,);
B(B_FB,Integrator,Integrator2,35,3,44,9,);
B(B_VARIN,,800.0,31,8,33,10,);
B(B_VARIN,,TRUE,32,2,34,4,);
B(B_F,limit,,46,2,52,7,);
B(B_VAROUT,,LDfilteredPress,52,3,54,5,);
B(B_VARIN,,0.0,43,1,45,3,);
B(B_VARIN,,370.0,43,9,45,11,);
B(B_FB,GPfilter10V010,GPfilter101,18,4,32,8,);
B(B_VARIN,,LDlimAnalSignal,19,9,21,11,);
B(B_VARIN,,0.0,19,10,21,12,);
B(B_F,@GE-2,,21,8,26,12,);
B(B_F,sel,,28,10,33,15,);
B(B_VARIN,,20.0,26,12,28,14,);
B(B_VARIN,,10000.0,26,13,28,15,);
L(17,7,17,9);
L(17,7,18,7);
L(33,7,35,7);
L(34,8,35,8);
L(33,7,33,9);
L(34,3,34,5);
L(34,5,35,5);
L(44,5,46,5);
L(45,4,46,4);
L(45,2,45,4);
L(45,6,46,6);
L(45,6,45,10);
L(16,6,18,6);
L(32,6,35,6);
L(26,10,27,10);
L(27,10,27,12);
L(27,12,28,12);
L(33,12,34,12);
L(34,8,34,12);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 22 ;
        NETWORK_BODY
B(B_F,@SUB,,11,9,16,13,);
B(B_VARIN,,LDfilteredPress,9,10,11,12,);
B(B_VARIN,,70.0,9,11,11,13,);
B(B_F,@DIV,,18,9,23,13,);
B(B_VARIN,,200.0,15,13,17,15,);
B(B_F,@MUL-2,,25,9,30,13,);
B(B_F,@SUB,,32,8,37,12,);
B(B_VARIN,,1.0,29,7,31,9,);
B(B_F,limit,,39,7,45,12,);
B(B_VARIN,,0.0,36,6,38,8,);
B(B_VARIN,,1.0,36,12,38,14,);
B(B_F,@DIV,,18,15,23,19,);
B(B_F,@SUB,,11,15,16,19,);
B(B_VARIN,,100.0,9,16,11,18,);
B(B_VARIN,,anal_sign_270bar,9,17,11,19,);
B(B_VARIN,,100.0,15,19,17,21,);
B(B_COMMENT,,200bar Regelbereichø^von 70bar bis 270barø^auf den eingest Wert,2,13,11,16,);
B(B_F,sel,,48,5,53,10,);
B(B_VAROUT,,low_lim_reg_sign,53,6,55,8,);
B(B_VARIN,,1.0,44,5,46,7,);
B(B_VARIN,,LDanalSignIntegr,39,2,41,4,);
B(B_VARIN,,0.0,39,3,41,5,);
B(B_F,@LT-2,,41,1,46,5,);
L(16,11,18,11);
L(17,12,18,12);
L(17,12,17,14);
L(23,11,25,11);
L(24,12,25,12);
L(30,11,32,11);
L(31,10,32,10);
L(31,8,31,10);
L(37,10,39,10);
L(38,9,39,9);
L(38,11,39,11);
L(38,11,38,13);
L(38,7,38,9);
L(23,17,24,17);
L(16,17,18,17);
L(17,18,18,18);
L(17,18,17,20);
L(24,12,24,17);
L(45,9,48,9);
L(46,8,48,8);
L(47,7,48,7);
L(46,6,46,8);
L(47,3,47,7);
L(46,3,47,3);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_F,@MUL-2,,18,3,23,7,);
B(B_VARIN,,LDanalSignIntegr,16,4,18,6,);
B(B_FB,Integrator,Integrator3,26,2,35,8,);
B(B_VAROUT,,LD2,35,3,37,5,);
B(B_VARIN,,TRUE,23,1,25,3,);
B(B_VARIN,,50.0,22,7,24,9,);
B(B_VARIN,,100.0,23,8,25,10,);
B(B_F,SigMin4,,11,6,18,12,);
B(B_VARIN,,max_lowe_reg_sig,9,7,11,9,);
B(B_VARIN,,low_lim_reg_sign,9,8,11,10,);
B(B_VARIN,,1.0,9,9,11,11,);
B(B_VARIN,,1.0,9,10,11,12,);
L(24,6,26,6);
L(24,6,24,8);
L(25,7,25,9);
L(25,7,26,7);
L(23,5,26,5);
L(25,4,26,4);
L(25,2,25,4);
L(18,6,18,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,selection lifting or lowering,1,1,27,2,);
B(B_VARIN,,LDanalSignIntegr,9,4,11,6,);
B(B_VARIN,,0.0,9,5,11,7,);
B(B_F,sel,,18,5,23,10,);
B(B_VAROUT,,LDlimAnalSignal,23,6,25,8,);
B(B_F,@GE-2,,11,3,16,7,);
B(B_VARIN,,LD1,16,8,18,10,);
B(B_VARIN,,LD2,16,7,18,9,);
L(17,5,17,7);
L(17,7,18,7);
L(16,5,17,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_FB,ADhgHightLimV010,ADhgHightLim1,11,3,32,12,);
B(B_VARIN,,hg_limit_presel,9,4,11,6,);
B(B_VARIN,,rope_lenght,9,5,11,7,);
B(B_VARIN,,max_hg_speed,9,6,11,8,);
B(B_VARIN,,hg_upper_limit,9,7,11,9,);
B(B_VARIN,,hg_lower_limit,9,8,11,10,);
B(B_VARIN,,inetgr_time_down,9,9,11,11,);
B(B_VARIN,,LDlimAnalSignal,9,10,11,12,);
B(B_VAROUT,,hg_stop_lifting,32,5,34,7,);
B(B_VAROUT,,hg_stop_lowering,32,6,34,8,);
B(B_VAROUT,,hg_stop_lift_sym,32,7,34,9,);
B(B_VAROUT,,hg_stop_low_sym,32,8,34,10,);
B(B_VAROUT,,LDhightLimRedSig,32,4,34,6,);
B(B_COMMENT,,hoisting limitation,1,1,27,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_COMMENT,,trimot: joystick signal greater than 10%,1,1,27,2,);
B(B_VAROUT,,LD3,21,4,23,6,);
B(B_F,@MUL-2,,16,3,21,7,);
B(B_VARIN,,LDhightLimRedSig,14,4,16,6,);
B(B_F,abs,,11,5,16,8,);
B(B_VARIN,,LDanalSignIntegr,9,6,11,8,);
B(B_F,@GE-2,,22,5,27,9,);
B(B_VAROUT,,en_trimot_analog,27,6,29,8,);
B(B_VARIN,,10.0,20,7,22,9,);
L(21,5,21,7);
L(16,6,16,7);
L(21,7,22,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_F,@SUB,,11,5,16,9,);
B(B_VARIN,,LD3,9,6,11,8,);
B(B_VARIN,,10.0,9,7,11,9,);
B(B_F,limit,,18,4,24,9,);
B(B_VARIN,,0.0,15,3,17,5,);
B(B_F,@DIV,,26,4,31,8,);
B(B_VARIN,,0.9,23,9,25,11,);
B(B_COMMENT,,trimot analog output,1,1,27,2,);
B(B_VAROUT,,analog_signal_tr,31,5,33,7,);
L(17,4,17,6);
L(17,6,18,6);
L(16,7,18,7);
L(17,7,17,8);
L(17,8,18,8);
L(24,6,26,6);
L(25,7,26,7);
L(25,7,25,10);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_COMMENT,,load system pressure,1,1,27,2,);
B(B_FB,Integrator,Integrator4,12,6,21,12,);
B(B_VARIN,,6.0,10,9,12,11,);
B(B_VARIN,,6.0,10,10,12,12,);
B(B_F,sel,,32,2,37,7,);
B(B_VAROUT,,LDloadPressSign,37,3,39,5,);
B(B_VARIN,,0.0,30,4,32,6,);
B(B_VARIN,,load_press_to_sy,9,3,11,5,);
B(B_VARIN,,20.0,10,8,12,10,);
B(B_F,@ADD-2,,25,6,30,10,);
B(B_VARIN,,8.0,23,8,25,10,);
L(11,8,12,8);
L(31,6,32,6);
L(31,6,31,8);
L(30,8,31,8);
L(11,4,32,4);
L(11,4,11,8);
L(21,8,25,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_VARIN,,0.0,23,9,25,11,);
B(B_VARIN,,400.0,15,9,17,11,);
B(B_FB,WndComp,WndComp1,26,2,33,8,);
B(B_VAROUT,,press_loaded,40,5,42,7,);
B(B_VARIN,,en_store_press,32,8,34,10,);
B(B_F,@AND-2,,35,4,40,8,0N);
B(B_F,limit,,18,4,24,9,);
B(B_F,@SUB,,11,5,16,9,);
B(B_VARIN,,50.0,9,7,11,9,);
B(B_VARIN,,0.0,15,3,17,5,);
B(B_VARIN,,system_pressure,23,1,25,3,);
B(B_VARIN,,press_memory_in,9,6,11,8,);
L(34,7,35,7);
L(34,7,34,9);
L(33,6,35,6);
L(25,4,26,4);
L(25,2,25,4);
L(16,7,18,7);
L(17,6,18,6);
L(17,4,17,6);
L(17,8,18,8);
L(17,8,17,10);
L(24,6,26,6);
L(25,7,26,7);
L(25,7,25,10);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_COMMENT,,store system pressure + set pressure memory (to 100 - 30bar),1,1,27,2,);
B(B_F,sel,,11,5,16,10,);
B(B_VARIN,,press_memory_in,9,7,11,9,);
B(B_VARIN,,en_store_press,9,6,11,8,);
B(B_VARIN,,system_pressure,9,8,11,10,);
B(B_VARIN,,70.0,15,10,17,12,);
B(B_F,sel,,17,4,22,9,);
B(B_VAROUT,,press_memory_out,22,5,24,7,);
B(B_VARIN,,set_press_memory,15,3,17,5,);
L(17,4,17,6);
L(16,7,17,7);
L(17,8,17,11);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,selection joysticksignal or load pressure signal,1,1,27,2,);
B(B_F,@MUL-2,,11,6,16,10,);
B(B_VARIN,,LDhightLimRedSig,9,8,11,10,);
B(B_VARIN,,LDlimAnalSignal,9,7,11,9,);
B(B_VAROUT,,LDanalSigWouLeak,21,4,23,6,);
B(B_F,sel,,16,3,21,8,);
B(B_VARIN,,en_store_press,14,4,16,6,);
B(B_VARIN,,LDloadPressSign,14,5,16,7,);
L(16,7,16,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_COMMENT,,check pump in zero,1,1,27,2,);
B(B_VARIN,,LDanalSigWouLeak,9,4,11,6,);
B(B_F,EQ_R,,11,3,16,7,);
B(B_VARIN,,0.0,9,5,11,7,);
B(B_VAROUT,,pump_in_zero,16,4,18,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 20 ;
        NETWORK_BODY
B(B_COMMENT,,leakoil compensation,1,1,27,2,);
B(B_VARIN,,LDanalSigWouLeak,9,6,11,8,);
B(B_F,@GT-2,,13,5,18,9,);
B(B_VARIN,,0.0,9,7,11,9,);
B(B_VARIN,,0.0,9,11,11,13,);
B(B_VARIN,,system_pressure,21,16,23,18,);
B(B_VARIN,,leakoil_anal_sig,22,17,24,19,);
B(B_VARIN,,en_leakoil_comp,22,3,24,5,);
B(B_VAROUT,,LDleakoilAnal,48,5,50,7,);
B(B_F,@LT-2,,13,9,18,13,);
B(B_VARIN,,winch_lifting,18,14,20,16,);
B(B_VARIN,,winch_lowering,19,15,21,17,);
B(B_FB,HGleakoilComV020,HGleakoilCom1,25,4,48,14,);
L(11,7,13,7);
L(11,8,13,8);
L(11,12,13,12);
L(19,8,19,11);
L(20,9,20,15);
L(21,10,21,16);
L(22,11,22,14);
L(12,14,22,14);
L(12,7,12,14);
L(24,13,24,18);
L(23,12,23,17);
L(24,13,25,13);
L(23,12,25,12);
L(22,11,25,11);
L(21,10,25,10);
L(20,9,25,9);
L(19,8,25,8);
L(18,7,25,7);
L(24,4,24,6);
L(12,11,13,11);
L(18,11,19,11);
L(24,6,25,6);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 14 ;
        NETWORK_BODY
B(B_COMMENT,,output signal,1,1,27,2,);
B(B_FB,Integrator,Integrator5,19,4,28,10,);
B(B_VARIN,,TRUE,16,3,18,5,);
B(B_VARIN,,300.0,16,11,18,13,);
B(B_VARIN,,integr_time_up,15,10,17,12,);
B(B_VAROUT,,analog_signal_pu,28,5,30,7,);
B(B_VARIN,,LDleakoilAnal,9,7,11,9,);
B(B_VARIN,,LDanalSigWouLeak,9,6,11,8,);
B(B_F,@ADD-2,,11,5,16,9,);
B(B_COMMENT,,Integrationszeit der Pumpe 0~3 Sekunden. Diesø^wird immer benötigt damit Pumpe auch demø^Signal folgen kann. (Eingriff GLR) ,21,10,38,13,);
L(18,4,18,6);
L(18,6,19,6);
L(17,8,17,11);
L(18,9,18,12);
L(18,9,19,9);
L(17,8,19,8);
L(16,7,19,7);
        END_NETWORK_BODY
    END_NET_WORK
END_BODY
END_FUNCTION_BLOCK

FUNCTION_BLOCK HGdigLogPartV022
(*name of author: Josef Schmid
version: 1.0
date: 07/99
modification:*)
(*name of author: Manfred Schapler
date: 04/97
modification:*)
	VAR_INPUT 
		analog_sign_pos: BOOL:=FALSE;
			(*analog signal positiv*)
		analog_sign_neg: BOOL:=FALSE;
			(*analog signal negativ*)
		global_stop_up: BOOL:=FALSE;
			(*global stop up*)
		global_stop_down: BOOL:=FALSE;
			(*global stop down*)
		stop_all_functio: BOOL:=FALSE;
			(*global stop all excavator functions*)
		lml_stop: BOOL:=FALSE;
			(*lml stop*)
		lower_limit_swit: BOOL:=FALSE;
			(*lower limit switch o.k.*)
		upper_limit_swit: BOOL:=FALSE;
			(*upper limit switch o.k.*)
		valve_in_zero: BOOL:=FALSE;
			(*pump signal in zero*)
		button_freefall: BOOL:=FALSE;
			(*freefall button on keyboard*)
		select_freefall: BOOL:=FALSE;
			(*select freefall*)
		brake_press_ok: BOOL:=FALSE;
			(*brake pressure o.k.*)
		unsecured_freefa: BOOL:=FALSE;
			(*preselection unsecured freefall*)
		winch_standstill: BOOL:=FALSE;
			(*winch standstill*)
		glo_lock_clutch: BOOL:=FALSE;
			(*global lock clutch*)
	END_VAR
	VAR_OUTPUT
		brake: BOOL:=FALSE;
			(*winch parking brake*)
		clutch: BOOL:=FALSE;
			(*clutch*)
		enable_valve: BOOL:=FALSE;
			(*enable pump up or down*)
		loc_stop_rap_up: BOOL:=FALSE;
			(*local stop rapid lifting*)
		loc_stop_rap_dn: BOOL:=FALSE;
			(*local stop rapid lowering*)
		loc_stop_integra: BOOL:=FALSE;
			(*local stop integrated*)
		freefall_selecte: BOOL:=FALSE;
			(*freefall selected*)
	END_VAR
	VAR 
		LXlmlStop: BOOL:=FALSE;
			(*lml stop*)
		LXstopUpInAction: BOOL:=FALSE;
			(*stop up in action*)
		LXstopDnInAction: BOOL:=FALSE;
			(*stop up in action*)
		LXlockPresFF: BOOL:=FALSE;
		SR1: SR;
		RS1: RS;
		RS2: RS;
		RS3: RS;
		RS4: RS;
		RS5: RS;
		RS6: RS;
		RS7: RS;
		TOF1: TOF;
		F_TRIG1: F_TRIG;
		R_TRIG1: R_TRIG;
		R_TRIG2: R_TRIG;
		R_TRIG3: R_TRIG;
	END_VAR
'FBD'
BODY
    WORKSPACE
        NETWORK_LIST_TYPE := NWTYPEFBD ;
        ACTIVE_NETWORK := 0 ;
    END_WORKSPACE
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_COMMENT,,lml stop,1,1,26,2,);
B(B_VARIN,,lml_stop,8,5,10,7,);
B(B_F,@AND-3,,11,7,16,12,NNN);
B(B_VAROUT,,LXlmlStop,23,5,25,7,);
B(B_FB,RS,RS1,18,4,23,8,);
B(B_VARIN,,analog_sign_pos,9,9,11,11,);
B(B_VARIN,,brake,9,10,11,12,);
L(10,6,10,9);
L(10,9,11,9);
L(16,9,17,9);
L(17,7,18,7);
L(17,7,17,9);
L(10,6,18,6);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 25 ;
        NETWORK_BODY
B(B_COMMENT,,rapid stop hoisting gear ,1,1,27,2,);
B(B_VARIN,,clutch,8,12,10,14,);
B(B_F,@OR-4,,11,8,16,14,0N);
B(B_F,@AND-2,,18,7,23,11,N);
B(B_F,@OR-3,,11,16,16,21,0N);
B(B_VAROUT,,loc_stop_rap_up,17,11,19,13,);
B(B_F,@AND-2,,18,16,23,20,0N);
B(B_VAROUT,,loc_stop_rap_dn,17,14,19,16,);
B(B_VARIN,,analog_sign_neg,15,6,17,8,);
B(B_VARIN,,analog_sign_pos,15,21,17,23,);
B(B_VAROUT,,LXstopUpInAction,23,8,25,10,);
B(B_VAROUT,,LXstopDnInAction,23,17,25,19,);
B(B_VARIN,,global_stop_up,9,9,11,11,);
B(B_VARIN,,upper_limit_swit,9,10,11,12,);
B(B_VARIN,,LXlmlStop,9,11,11,13,);
B(B_VARIN,,lower_limit_swit,9,18,11,20,);
B(B_VARIN,,global_stop_down,9,19,11,21,);
L(10,13,11,13);
L(10,18,11,18);
L(10,13,10,18);
L(16,10,18,10);
L(17,9,18,9);
L(17,7,17,9);
L(17,10,17,12);
L(16,18,18,18);
L(17,15,17,18);
L(17,19,18,19);
L(17,19,17,22);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,integrated stop hoisting gear,1,1,27,2,);
B(B_VARIN,,stop_all_functio,9,3,11,5,);
B(B_VAROUT,,loc_stop_integra,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_COMMENT,,lock preselction freefall,1,1,27,2,);
B(B_F,@AND-2,,12,4,17,8,);
B(B_VARIN,,freefall_selecte,10,5,12,7,);
B(B_FB,F_TRIG,F_TRIG1,12,9,19,12,);
B(B_FB,SR,SR1,19,4,24,8,);
B(B_VARIN,,button_freefall,10,6,12,8,);
B(B_VAROUT,,LXlockPresFF,24,5,26,7,);
B(B_COMMENT,,Taste muß bei Wiedervorwahl losgelassen werdenø^damit eine ungewollte Vorwahl durch die ansteigendeø^Flanke des Bremsdruckes während dem Ausschaltenø^verhindert wird!,26,7,46,11,);
L(17,6,19,6);
L(19,7,19,11);
L(12,7,12,11);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 28 ;
        NETWORK_BODY
B(B_COMMENT,,preselection freefall,1,1,27,2,);
B(B_FB,RS,RS2,49,5,54,9,);
B(B_FB,RS,RS3,35,18,40,22,0N);
B(B_F,@AND-2,,42,15,47,19,);
B(B_VAROUT,,freefall_selecte,54,6,56,8,);
B(B_VARIN,,analog_sign_neg,26,10,28,12,);
B(B_VARIN,,valve_in_zero,26,11,28,13,);
B(B_VARIN,,select_freefall,22,12,24,14,);
B(B_VARIN,,stop_all_functio,22,13,24,15,);
B(B_F,@OR-3,,28,18,33,23,0N);
B(B_F,@AND-2,,21,22,26,26,);
B(B_VARIN,,freefall_selecte,32,25,34,27,);
B(B_VARIN,,winch_standstill,22,14,24,16,);
B(B_VARIN,,freefall_selecte,18,25,20,27,);
B(B_FB,R_TRIG,R_TRIG2,12,22,19,25,);
B(B_VARIN,,button_freefall,9,23,11,25,);
B(B_VARIN,,brake_press_ok,17,5,19,7,);
B(B_FB,R_TRIG,R_TRIG1,19,4,26,7,);
B(B_VARIN,,analog_sign_pos,26,9,28,11,);
B(B_F,@AND-9,,28,5,33,16,00NNN00N);
B(B_VARIN,,LXlockPresFF,26,8,28,10,);
L(34,21,35,21);
L(40,20,41,20);
L(41,18,41,20);
L(41,18,42,18);
L(27,17,42,17);
L(47,17,48,17);
L(48,8,48,17);
L(48,8,49,8);
L(33,20,35,20);
L(27,15,27,17);
L(26,14,26,20);
L(26,20,28,20);
L(24,14,28,14);
L(25,13,25,21);
L(25,21,28,21);
L(24,13,28,13);
L(20,25,21,25);
L(20,25,20,26);
L(26,24,27,24);
L(27,22,28,22);
L(27,22,27,24);
L(34,21,34,26);
L(24,15,28,15);
L(19,24,21,24);
L(11,8,11,24);
L(11,8,28,8);
L(11,24,12,24);
L(26,6,27,6);
L(27,6,27,7);
L(27,7,28,7);
L(33,7,49,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 27 ;
        NETWORK_BODY
B(B_COMMENT,,clutch,1,1,27,2,);
B(B_VARIN,,brake_press_ok,9,7,11,9,);
B(B_FB,R_TRIG,R_TRIG3,11,6,18,9,);
B(B_FB,RS,RS4,21,6,26,10,0N);
B(B_VARIN,,unsecured_freefa,18,3,20,5,);
B(B_F,@AND-2,,28,5,33,9,);
B(B_F,@OR-2,,35,8,40,12,);
B(B_F,@AND-2,,42,19,47,23,);
B(B_VARIN,,freefall_selecte,33,21,35,23,);
B(B_VARIN,,analog_sign_pos,33,22,35,24,);
B(B_VARIN,,analog_sign_neg,33,23,35,25,);
B(B_FB,RS,RS5,49,18,54,22,);
B(B_VAROUT,,clutch,54,19,56,21,);
B(B_VARIN,,freefall_selecte,40,12,42,14,);
B(B_VARIN,,analog_sign_pos,40,13,42,15,);
B(B_VARIN,,analog_sign_neg,40,14,42,16,);
B(B_VARIN,,loc_stop_integra,40,15,42,17,);
B(B_VARIN,,glo_lock_clutch,40,16,42,18,);
B(B_F,@AND-6,,42,10,47,18,00NNNN);
B(B_VARIN,,winch_standstill,39,18,41,20,);
B(B_F,@OR-4,,35,20,40,26,N);
B(B_VARIN,,glo_lock_clutch,33,24,35,26,);
L(18,8,21,8);
L(19,8,19,11);
L(20,4,20,9);
L(20,9,21,9);
L(20,4,27,4);
L(27,4,27,7);
L(27,7,28,7);
L(26,8,28,8);
L(19,11,35,11);
L(33,7,34,7);
L(34,7,34,10);
L(34,10,35,10);
L(40,10,41,10);
L(41,10,41,12);
L(41,19,41,21);
L(41,21,42,21);
L(47,21,49,21);
L(48,12,48,20);
L(48,20,49,20);
L(41,12,42,12);
L(47,12,48,12);
L(40,22,42,22);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 14 ;
        NETWORK_BODY
B(B_COMMENT,,brake,1,1,27,2,);
B(B_F,@OR-2,,11,3,16,7,);
B(B_VARIN,,analog_sign_pos,9,4,11,6,);
B(B_VARIN,,analog_sign_neg,9,5,11,7,);
B(B_F,@AND-4,,18,5,23,11,0NNN);
B(B_VARIN,,LXstopUpInAction,16,7,18,9,);
B(B_VARIN,,LXstopDnInAction,16,8,18,10,);
B(B_VARIN,,loc_stop_integra,16,9,18,11,);
B(B_VARIN,,valve_in_zero,22,11,24,13,);
B(B_FB,RS,RS6,32,5,37,9,);
B(B_F,@AND-2,,25,8,30,12,N);
B(B_FB,TOF,TOF1,39,5,44,9,);
B(B_VAROUT,,brake,44,6,46,8,);
B(B_VARIN,,T#0.5s,36,9,38,11,);
L(16,5,17,5);
L(17,5,17,7);
L(17,7,18,7);
L(30,10,31,10);
L(31,8,31,10);
L(31,8,32,8);
L(24,10,25,10);
L(23,7,32,7);
L(24,11,25,11);
L(24,11,24,12);
L(24,7,24,10);
L(38,8,39,8);
L(38,8,38,10);
L(37,7,39,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_COMMENT,,enable power stages,1,1,27,2,);
B(B_F,@AND-2,,11,7,16,11,N);
B(B_FB,RS,RS7,18,4,23,8,);
B(B_VARIN,,valve_in_zero,9,9,11,11,);
B(B_VAROUT,,enable_valve,23,5,25,7,);
B(B_VARIN,,brake,8,5,10,7,);
L(16,9,17,9);
L(17,7,17,9);
L(17,7,18,7);
L(10,9,11,9);
L(10,6,10,9);
L(10,6,18,6);
        END_NETWORK_BODY
    END_NET_WORK
END_BODY
END_FUNCTION_BLOCK

FUNCTION_BLOCK HGdigLogPartV036
(*name of author: Manfred Schapler
version: 1.0
date: 04/97
modification:*)
(*name of author: Manfred Schapler
version: 1.0
date: 04/97
modification:*)
	VAR_INPUT 
		analog_sign_pos: BOOL:=FALSE;
			(*analog signal positiv*)
		analog_sign_neg: BOOL:=FALSE;
			(*analog signal negativ*)
		pump_in_zero: BOOL:=FALSE;
			(*pump in zero position*)
		press_loaded: BOOL:=FALSE;
			(*system pressure loaded*)
		glo_stop_up: BOOL:=FALSE;
			(*global stop rapid up*)
		glo_stop_down: BOOL:=FALSE;
			(*global stop rapid down*)
		stop_all_functio: BOOL:=FALSE;
			(*global stop all excavator functions*)
		lml_stop: BOOL:=FALSE;
			(*lml stop*)
		en_trimot_analog: BOOL:=FALSE;
			(*enable trimot of the analog part*)
		winch_standing: BOOL:=FALSE;
			(*winch in stopped position*)
		feed_press_ok: BOOL:=FALSE;
			(*feed pressure hg o.k.*)
		errnu_feed_press: UDINT:=0;
			(*error number feed pressure*)
		brake_press_ok: BOOL:=FALSE;
			(*brake pressure o.k.*)
		lower_limit_swit: BOOL:=FALSE;
			(*lower limit switch o.k.*)
		upper_limit_swit: BOOL:=FALSE;
			(*upper limit switch o.k.*)
		presel_fast_sped: BOOL:=FALSE;
			(*preselecion fast speed operation*)
		button_freefall: BOOL:=FALSE;
			(*preselection freefall by the push-button*)
		select_freefall: BOOL:=FALSE;
			(*freefall selected*)
		unsecured_freefa: BOOL:=FALSE;
			(*unsecured freefall*)
		glo_lock_clutch: BOOL:=FALSE;
			(*global lock clutch*)
		drill_freefall: BOOL:=FALSE;
			(*drilling freefall*)
		min_engine_speed: BOOL:=FALSE;
			(*minimum engine speed reached*)
		select_fast_sped: BOOL:=FALSE;
			(*fast speed operation selected*)
		max_press_fast_s: REAL:=0.0;
			(*correction value maximum pressure fast speed operation*)
		bridge_fast_sped: BOOL:=FALSE;
			(*bridge switrch fast speed operation*)
		lock_fast_speed: BOOL:=FALSE;
			(*lock fast speed*)
		pressure_memory: REAL:=0.0;
			(*pressure memory*)
	END_VAR
	VAR_OUTPUT
		load_press_to_sy: BOOL:=FALSE;
			(*give system pressure into the system*)
		brake_normal: BOOL:=FALSE;
			(*brake for normal speed*)
		brake_fast_speed: BOOL:=FALSE;
			(*brake for fast speed operation*)
		clutch: BOOL:=FALSE;
			(*freefall clutch*)
		enable_pump: BOOL:=FALSE;
			(*enable pump up or down*)
		enable_trimot: BOOL:=FALSE;
			(*enable trimot*)
		loc_stop_integra: BOOL:=FALSE;
			(*local stop integrated*)
		loc_stop_rapidUp: BOOL:=FALSE;
			(*local stop rapid lifting*)
		loc_stop_rapidDn: BOOL:=FALSE;
			(*local stop rapid lowering*)
		store_sys_press: BOOL:=FALSE;
			(*store system pressure*)
		en_leakoil_comp: BOOL:=FALSE;
			(*enable leakoil compensation*)
		freefall_selecte: BOOL:=FALSE;
			(*freefall selected*)
		led_fast_speed: BOOL:=FALSE;
			(*led fast speed operation*)
		enab_fast_speed: BOOL:=FALSE;
			(*enable fast speed operation*)
	END_VAR
	VAR_EXTERNAL CONSTANT
		MSG_WARNING: UINT:=0;
	END_VAR
	VAR 
		LXlmlStop: BOOL:=FALSE;
			(*lml stop*)
		LXstopUpEnDown: BOOL:=FALSE;
			(*stop lifting allow lowering*)
		LXstopDownEnUp: BOOL:=FALSE;
			(*stop lowering allow lifting*)
		LX23fastSpeedSel: BOOL:=FALSE;
			(*X23 fast speed selected*)
		LXerrorFeedPress: BOOL:=FALSE;
			(*error feed pressure*)
		LXclutchOpened: BOOL:=FALSE;
			(*clutch opened before*)
		LXdrillFreefall: BOOL:=FALSE;
			(*drill freefall preselected*)
		LXlockPresFF: BOOL:=FALSE;
		LXlockPresdrilFF: BOOL:=FALSE;
		RS1: RS;
		RS2: RS;
		RS3: RS;
		RS4: RS;
		RS5: RS;
		RS6: RS;
		RS7: RS;
		RS8: RS;
		RS9: RS;
		RS10: RS;
		RS11: RS;
		RS12: RS;
		RS13: RS;
		RS14: RS;
		RS15: RS;
		RS16: RS;
		SR1: SR;
		SR2: SR;
		TON1: TON;
		TON2: TON;
		TON3: TON;
		TOF1: TOF;
		F_TRIG1: F_TRIG;
		F_TRIG2: F_TRIG;
		F_TRIG3: F_TRIG;
		R_TRIG1: R_TRIG;
		R_TRIG2: R_TRIG;
		R_TRIG3: R_TRIG;
		R_TRIG4: R_TRIG;
		R_TRIG5: R_TRIG;
		R_TRIG6: R_TRIG;
		R_TRIG7: R_TRIG;
		Message1: MsgRealReal;
	END_VAR
'FBD'
BODY
    WORKSPACE
        NETWORK_LIST_TYPE := NWTYPEFBD ;
        ACTIVE_NETWORK := 0 ;
    END_WORKSPACE
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 15 ;
        NETWORK_BODY
B(B_COMMENT,,check if clutch was opened before,1,1,27,2,);
B(B_FB,RS,RS1,25,4,30,8,);
B(B_VARIN,,analog_sign_pos,9,9,11,11,);
B(B_VARIN,,analog_sign_neg,9,10,11,12,);
B(B_VARIN,,clutch,15,5,17,7,);
B(B_VAROUT,,LXclutchOpened,30,5,32,7,);
B(B_F,@OR-2,,11,8,16,12,);
B(B_VARIN,,pump_in_zero,15,12,17,14,);
B(B_F,@AND-3,,18,7,23,12,N0N);
L(17,6,25,6);
L(17,6,17,9);
L(24,7,24,9);
L(24,7,25,7);
L(16,10,18,10);
L(17,11,17,13);
L(17,11,18,11);
L(17,9,18,9);
L(23,9,24,9);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 14 ;
        NETWORK_BODY
B(B_COMMENT,,load system pressure to the system,1,1,27,2,);
B(B_F,@OR-2,,11,3,16,7,);
B(B_VARIN,,analog_sign_pos,9,4,11,6,);
B(B_VARIN,,analog_sign_neg,9,5,11,7,);
B(B_VARIN,,press_loaded,16,7,18,9,);
B(B_VARIN,,LXstopUpEnDown,16,8,18,10,);
B(B_VAROUT,,load_press_to_sy,23,6,25,8,);
B(B_VARIN,,loc_stop_integra,16,10,18,12,);
B(B_VARIN,,store_sys_press,16,11,18,13,);
B(B_VARIN,,LXstopDownEnUp,16,9,18,11,);
B(B_F,@AND-6,,18,5,23,13,0NNNNN);
L(16,5,17,5);
L(17,5,17,7);
L(17,7,18,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 18 ;
        NETWORK_BODY
B(B_COMMENT,,store system pressure,1,1,27,2,);
B(B_FB,F_TRIG,F_TRIG1,18,13,25,16,);
B(B_VARIN,,press_loaded,18,7,20,9,);
B(B_FB,RS,RS2,27,12,32,16,);
B(B_VAROUT,,store_sys_press,32,13,34,15,);
B(B_F,@OR-2,,13,3,18,7,);
B(B_VARIN,,analog_sign_pos,11,4,13,6,);
B(B_VARIN,,analog_sign_neg,11,5,13,7,);
B(B_VARIN,,LXstopUpEnDown,18,8,20,10,);
B(B_F,@AND-5,,20,5,25,12,00NNN);
B(B_VARIN,,LXstopDownEnUp,18,9,20,11,);
B(B_VARIN,,loc_stop_integra,18,10,20,12,);
B(B_VARIN,,brake_normal,9,14,11,16,);
B(B_VARIN,,brake_fast_speed,9,15,11,17,);
B(B_F,@OR-2,,11,13,16,17,);
L(26,7,26,14);
L(26,14,27,14);
L(25,15,27,15);
L(18,5,19,5);
L(19,5,19,7);
L(19,7,20,7);
L(25,7,26,7);
L(16,15,18,15);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_VARIN,,brake_normal,9,5,11,7,);
B(B_F,@OR-2,,11,4,16,8,);
B(B_VARIN,,brake_fast_speed,9,6,11,8,);
B(B_FB,TOF,TOF1,18,4,23,8,);
B(B_VARIN,,T#0.2s,15,8,17,10,);
B(B_COMMENT,,enable leak oil,1,1,27,2,);
B(B_VAROUT,,en_leakoil_comp,23,5,25,7,);
L(16,6,18,6);
L(17,7,18,7);
L(17,7,17,9);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 16 ;
        NETWORK_BODY
B(B_COMMENT,,error feed pressure,1,1,27,2,);
B(B_F,@AND-4,,19,9,24,15,00NN);
B(B_VARIN,,pump_in_zero,17,10,19,12,);
B(B_VARIN,,feed_press_ok,17,11,19,13,);
B(B_VARIN,,analog_sign_pos,17,12,19,14,);
B(B_VARIN,,analog_sign_neg,17,13,19,15,);
B(B_FB,RS,RS3,26,4,31,8,);
B(B_VAROUT,,LXerrorFeedPress,35,5,37,7,);
B(B_VARIN,,MSG_WARNING,34,11,36,13,);
B(B_VARIN,,errnu_feed_press,32,9,34,11,);
B(B_FB,MsgRealReal,Message1,36,8,45,15,);
B(B_F,@AND-3,,19,4,24,9,NN);
B(B_VARIN,,feed_press_ok,16,3,18,5,);
B(B_VARIN,,clutch,15,4,17,6,);
B(B_FB,TON,TON1,11,6,16,10,);
B(B_VARIN,,min_engine_speed,9,7,11,9,);
B(B_VARIN,,T#2s,9,8,11,10,);
L(25,7,26,7);
L(25,7,25,11);
L(24,11,25,11);
L(35,6,35,11);
L(35,11,36,11);
L(34,10,36,10);
L(24,6,26,6);
L(31,6,35,6);
L(17,7,19,7);
L(17,5,17,7);
L(18,4,18,6);
L(18,6,19,6);
L(16,8,19,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_COMMENT,,lml stop,1,1,27,2,);
B(B_VARIN,,lml_stop,9,5,11,7,);
B(B_F,@AND-3,,12,7,17,12,NN);
B(B_VARIN,,analog_sign_pos,10,9,12,11,);
B(B_VARIN,,pump_in_zero,10,10,12,12,);
B(B_FB,RS,RS4,19,4,24,8,);
B(B_VAROUT,,LXlmlStop,24,5,26,7,);
L(11,6,11,9);
L(11,9,12,9);
L(11,6,19,6);
L(18,7,19,7);
L(18,7,18,9);
L(17,9,18,9);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 21 ;
        NETWORK_BODY
B(B_COMMENT,,rapid stop,1,1,27,2,);
B(B_VARIN,,LXerrorFeedPress,9,5,11,7,);
B(B_VARIN,,lower_limit_swit,16,15,18,17,);
B(B_VARIN,,upper_limit_swit,14,7,16,9,);
B(B_VARIN,,LXlmlStop,14,8,16,10,);
B(B_VAROUT,,loc_stop_rapidUp,24,6,26,8,);
B(B_VARIN,,analog_sign_neg,23,11,25,13,);
B(B_F,@AND-2,,25,16,30,20,0N);
B(B_VAROUT,,LXstopDownEnUp,30,17,32,19,);
B(B_VAROUT,,loc_stop_rapidDn,24,14,26,16,);
B(B_VARIN,,analog_sign_pos,23,18,25,20,);
B(B_F,@AND-2,,25,9,30,13,0N);
B(B_VAROUT,,LXstopUpEnDown,30,10,32,12,);
B(B_F,@OR-4,,18,5,23,11,0N);
B(B_VARIN,,glo_stop_up,14,9,16,11,);
B(B_F,@OR-3,,18,13,23,18,0N);
B(B_VARIN,,glo_stop_down,16,16,18,18,);
B(B_VARIN,,clutch,9,4,11,6,);
B(B_F,@OR-2,,11,3,16,7,);
L(17,5,17,15);
L(16,8,18,8);
L(16,9,18,9);
L(24,7,24,11);
L(24,15,24,18);
L(24,18,25,18);
L(24,11,25,11);
L(17,7,18,7);
L(23,7,24,7);
L(16,10,18,10);
L(17,15,18,15);
L(23,15,24,15);
L(16,5,17,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,integrated stop,1,1,27,2,);
B(B_VARIN,,stop_all_functio,9,3,11,5,);
B(B_VAROUT,,loc_stop_integra,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 23 ;
        NETWORK_BODY
B(B_COMMENT,,preselection fast speed operation,1,1,27,2,);
B(B_VARIN,,presel_fast_sped,9,8,11,10,);
B(B_FB,R_TRIG,R_TRIG1,11,7,18,10,);
B(B_FB,RS,RS5,36,15,41,19,);
B(B_VAROUT,,led_fast_speed,42,18,44,20,);
B(B_VAROUT,,LX23fastSpeedSel,42,16,44,18,);
B(B_VARIN,,LX23fastSpeedSel,25,18,27,20,);
B(B_VARIN,,brake_fast_speed,25,19,27,21,);
B(B_F,@AND-4,,27,16,32,22,00N);
B(B_VARIN,,pump_in_zero,25,20,27,22,);
B(B_VARIN,,LXclutchOpened,27,10,29,12,);
B(B_VARIN,,pump_in_zero,27,11,29,13,);
B(B_F,@AND-6,,29,6,34,14,00NN);
B(B_VARIN,,lock_fast_speed,27,9,29,11,);
B(B_VARIN,,select_fast_sped,27,12,29,14,);
B(B_F,@LT-2,,22,3,27,7,);
B(B_VARIN,,max_press_fast_s,20,5,22,7,);
B(B_VARIN,,pressure_memory,20,4,22,6,);
L(18,9,19,9);
L(35,8,35,17);
L(35,17,36,17);
L(41,17,42,17);
L(42,17,42,19);
L(32,18,36,18);
L(19,9,29,9);
L(28,5,28,8);
L(28,8,29,8);
L(34,8,35,8);
L(27,5,28,5);
L(19,18,27,18);
L(19,9,19,18);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 22 ;
        NETWORK_BODY
B(B_VARIN,,LXclutchOpened,30,8,32,10,);
B(B_VARIN,,pump_in_zero,30,9,32,11,);
B(B_VARIN,,select_fast_sped,30,10,32,12,);
B(B_F,@AND-5,,32,5,37,12,00N);
B(B_FB,R_TRIG,R_TRIG2,17,6,24,9,);
B(B_VAROUT,,enab_fast_speed,44,11,46,13,);
B(B_FB,RS,RS6,39,10,44,14,);
B(B_VARIN,,max_press_fast_s,23,3,25,5,);
B(B_VARIN,,pressure_memory,23,2,25,4,);
B(B_F,@LT-2,,25,1,30,5,);
B(B_F,@AND-3,,32,12,37,17,N);
B(B_VARIN,,pump_in_zero,30,14,32,16,);
B(B_VARIN,,LX23fastSpeedSel,23,17,25,19,);
B(B_VARIN,,brake_fast_speed,30,13,32,15,);
B(B_VARIN,,bridge_fast_sped,9,8,11,10,);
B(B_VARIN,,LX23fastSpeedSel,9,7,11,9,);
B(B_F,@AND-3,,11,6,16,11,0NN);
B(B_VARIN,,brake_normal,9,9,11,11,);
B(B_VARIN,,bridge_fast_sped,23,18,25,20,);
B(B_VARIN,,lock_fast_speed,23,19,25,21,);
B(B_F,@OR-3,,25,16,30,21,N);
L(37,7,38,7);
L(30,3,31,3);
L(31,3,31,7);
L(31,7,32,7);
L(38,13,38,14);
L(38,7,38,12);
L(38,13,39,13);
L(38,12,39,12);
L(24,8,32,8);
L(37,14,38,14);
L(31,16,31,18);
L(31,16,32,16);
L(16,8,17,8);
L(30,18,31,18);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_VARIN,,freefall_selecte,9,4,11,6,);
B(B_VARIN,,button_freefall,9,5,11,7,);
B(B_F,@AND-2,,11,3,16,7,);
B(B_FB,F_TRIG,F_TRIG2,11,8,18,11,);
B(B_FB,SR,SR1,18,3,23,7,);
B(B_VAROUT,,LXlockPresFF,23,4,25,6,);
B(B_COMMENT,,lock preselection freefall,1,1,27,2,);
B(B_COMMENT,,Taste muß bei Wiedervorwahl losgelassen werden ø^damit eine ungewollte Vorwahl durch die Ansteigendeø^Flanke des Bremsdruckes verhindert wird,24,7,46,10,);
L(11,6,11,10);
L(18,6,18,10);
L(16,5,18,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 30 ;
        NETWORK_BODY
B(B_COMMENT,,preselection freefall,1,1,27,2,);
B(B_FB,R_TRIG,R_TRIG3,18,4,25,7,);
B(B_VARIN,,button_freefall,25,7,27,9,);
B(B_VARIN,,brake_press_ok,16,5,18,7,);
B(B_VARIN,,analog_sign_neg,25,10,27,12,);
B(B_VARIN,,pump_in_zero,25,11,27,13,);
B(B_FB,RS,RS7,48,5,53,9,);
B(B_VAROUT,,freefall_selecte,53,6,55,8,);
B(B_VARIN,,winch_standing,20,15,22,17,);
B(B_VARIN,,stop_all_functio,20,13,22,15,);
B(B_VARIN,,min_engine_speed,20,14,22,16,);
B(B_VARIN,,select_freefall,20,12,22,14,);
B(B_F,@OR-4,,27,19,32,25,N0N);
B(B_F,@AND-2,,20,24,25,28,);
B(B_VARIN,,button_freefall,9,25,11,27,);
B(B_FB,R_TRIG,R_TRIG4,11,24,18,27,);
B(B_VARIN,,freefall_selecte,17,27,19,29,);
B(B_FB,RS,RS8,34,19,39,23,0N);
B(B_VARIN,,freefall_selecte,31,27,33,29,);
B(B_F,@AND-2,,41,16,46,20,);
B(B_VARIN,,analog_sign_pos,25,9,27,11,);
B(B_F,@AND-10,,27,5,32,17,00NNN00N);
B(B_VARIN,,LXlockPresFF,25,8,27,10,);
L(25,6,26,6);
L(26,6,26,7);
L(47,8,48,8);
L(22,14,27,14);
L(22,15,27,15);
L(22,16,27,16);
L(22,13,27,13);
L(25,21,27,21);
L(24,22,27,22);
L(23,23,27,23);
L(23,15,23,23);
L(24,14,24,22);
L(25,13,25,21);
L(25,26,26,26);
L(26,24,26,26);
L(26,24,27,24);
L(18,26,20,26);
L(19,27,19,28);
L(19,27,20,27);
L(26,16,26,18);
L(32,21,34,21);
L(33,22,34,22);
L(33,22,33,28);
L(26,18,41,18);
L(39,21,40,21);
L(40,19,40,21);
L(40,19,41,19);
L(46,18,47,18);
L(47,8,47,18);
L(26,7,27,7);
L(32,7,48,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_VARIN,,LXdrillFreefall,9,4,11,6,);
B(B_VARIN,,drill_freefall,9,5,11,7,);
B(B_F,@AND-2,,11,3,16,7,);
B(B_FB,F_TRIG,F_TRIG3,11,8,18,11,);
B(B_FB,SR,SR2,18,3,23,7,);
B(B_VAROUT,,LXlockPresdrilFF,23,4,25,6,);
B(B_COMMENT,,lock preselection drill freefall,1,1,27,2,);
L(11,6,11,10);
L(18,6,18,10);
L(16,5,18,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 30 ;
        NETWORK_BODY
B(B_FB,R_TRIG,R_TRIG5,25,4,32,7,);
B(B_VARIN,,drill_freefall,32,7,34,9,);
B(B_VARIN,,brake_press_ok,23,5,25,7,);
B(B_VARIN,,analog_sign_neg,32,10,34,12,);
B(B_VARIN,,pump_in_zero,32,11,34,13,);
B(B_FB,RS,RS9,55,5,60,9,);
B(B_VAROUT,,LXdrillFreefall,60,6,62,8,);
B(B_F,@AND-2,,27,24,32,28,);
B(B_FB,RS,RS10,41,19,46,23,0N);
B(B_VARIN,,LXdrillFreefall,38,27,40,29,);
B(B_F,@AND-2,,48,16,53,20,);
B(B_F,@OR-3,,34,19,39,24,0N);
B(B_VARIN,,analog_sign_pos,18,22,20,24,);
B(B_VARIN,,analog_sign_neg,18,23,20,25,);
B(B_F,@OR-4,,20,20,25,26,);
B(B_VARIN,,glo_lock_clutch,18,24,20,26,);
B(B_VARIN,,drill_freefall,10,21,12,23,);
B(B_FB,R_TRIG,R_TRIG6,12,20,19,23,);
B(B_VARIN,,LXdrillFreefall,25,26,27,28,);
B(B_COMMENT,,preselection drill freefall,1,1,27,2,);
B(B_VARIN,,winch_standing,28,14,30,16,);
B(B_VARIN,,min_engine_speed,29,13,31,15,);
B(B_VARIN,,stop_all_functio,30,12,32,14,);
B(B_VARIN,,analog_sign_pos,32,9,34,11,);
B(B_F,@AND-9,,34,5,39,16,00NNN0N);
B(B_VARIN,,LXlockPresdrilFF,32,8,34,10,);
L(32,6,33,6);
L(33,6,33,7);
L(54,8,55,8);
L(32,26,33,26);
L(33,23,33,26);
L(40,22,41,22);
L(40,22,40,28);
L(33,18,48,18);
L(46,21,47,21);
L(47,19,47,21);
L(47,19,48,19);
L(53,18,54,18);
L(54,8,54,18);
L(31,22,34,22);
L(33,23,34,23);
L(32,21,34,21);
L(39,21,41,21);
L(33,15,33,18);
L(26,26,27,26);
L(19,22,20,22);
L(25,22,26,22);
L(26,22,26,26);
L(32,13,32,21);
L(31,14,31,22);
L(30,15,34,15);
L(31,14,34,14);
L(32,13,34,13);
L(33,7,34,7);
L(39,7,55,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 33 ;
        NETWORK_BODY
B(B_COMMENT,,clutch,1,1,27,2,);
B(B_F,@AND-2,,43,22,48,26,);
B(B_VAROUT,,clutch,55,22,57,24,);
B(B_F,@OR-4,,36,23,41,29,);
B(B_F,@AND-6,,43,10,48,18,0NNNN);
B(B_VARIN,,analog_sign_pos,41,12,43,14,);
B(B_VARIN,,analog_sign_neg,41,13,43,15,);
B(B_VARIN,,loc_stop_integra,41,14,43,16,);
B(B_VARIN,,glo_lock_clutch,41,15,43,17,);
B(B_FB,RS,RS11,22,6,27,10,0N);
B(B_F,@AND-2,,29,5,34,9,);
B(B_VARIN,,brake_press_ok,10,7,12,9,);
B(B_FB,R_TRIG,R_TRIG7,12,6,19,9,);
B(B_F,@OR-2,,36,8,41,12,);
B(B_VARIN,,unsecured_freefa,19,3,21,5,);
B(B_VARIN,,freefall_selecte,34,19,36,21,);
B(B_F,@OR-2,,36,17,41,21,);
B(B_VARIN,,LXdrillFreefall,34,18,36,20,);
B(B_VARIN,,winch_standing,40,21,42,23,);
B(B_FB,RS,RS12,50,21,55,25,);
B(B_VARIN,,analog_sign_pos,34,24,36,26,);
B(B_VARIN,,analog_sign_neg,34,25,36,27,);
B(B_VARIN,,glo_lock_clutch,34,26,36,28,);
B(B_F,@AND-2,,29,28,34,32,NN);
B(B_VARIN,,freefall_selecte,27,29,29,31,);
B(B_VARIN,,LXdrillFreefall,27,30,29,32,);
L(48,24,50,24);
L(42,24,43,24);
L(49,12,49,23);
L(41,25,43,25);
L(42,22,42,24);
L(42,12,43,12);
L(48,12,49,12);
L(21,9,22,9);
L(27,8,29,8);
L(28,4,28,7);
L(21,4,28,4);
L(28,7,29,7);
L(34,7,35,7);
L(35,10,36,10);
L(41,10,42,10);
L(35,7,35,10);
L(20,11,36,11);
L(21,4,21,9);
L(20,8,20,11);
L(19,8,22,8);
L(42,10,42,12);
L(41,19,42,19);
L(42,17,42,19);
L(42,17,43,17);
L(49,23,50,23);
L(34,30,35,30);
L(35,28,35,30);
L(35,28,36,28);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 21 ;
        NETWORK_BODY
B(B_COMMENT,,brake normal speed,1,1,27,2,);
B(B_F,@OR-2,,11,3,16,7,);
B(B_VARIN,,analog_sign_pos,9,4,11,6,);
B(B_VARIN,,analog_sign_neg,9,5,11,7,);
B(B_VARIN,,enab_fast_speed,17,11,19,13,);
B(B_VARIN,,store_sys_press,17,12,19,14,);
B(B_F,@AND-2,,26,11,31,15,N);
B(B_VAROUT,,brake_normal,52,9,54,11,);
B(B_VARIN,,pump_in_zero,23,17,25,19,);
B(B_VARIN,,LXstopUpEnDown,17,13,19,15,);
B(B_VARIN,,LXstopDownEnUp,17,14,19,16,);
B(B_VARIN,,loc_stop_integra,17,15,19,17,);
B(B_VARIN,,feed_press_ok,9,8,11,10,);
B(B_VARIN,,feed_press_ok,37,18,39,20,);
B(B_F,@OR-2,,40,11,45,15,0N);
B(B_F,@OR-2,,11,7,16,11,N);
B(B_VARIN,,clutch,9,9,11,11,);
B(B_FB,RS,RS13,47,8,52,12,);
B(B_F,@AND-7,,19,8,24,17,0NN0NNN);
B(B_FB,TON,TON2,33,11,38,15,);
B(B_VARIN,,T#0.5s,30,15,32,17,);
L(17,11,19,11);
L(16,5,18,5);
L(18,5,18,10);
L(25,13,26,13);
L(25,10,25,13);
L(25,14,26,14);
L(46,11,47,11);
L(46,11,46,13);
L(39,14,40,14);
L(25,14,25,18);
L(18,10,19,10);
L(17,9,17,11);
L(39,14,39,19);
L(38,13,40,13);
L(45,13,46,13);
L(16,9,17,9);
L(24,10,47,10);
L(31,13,33,13);
L(32,14,33,14);
L(32,14,32,16);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 21 ;
        NETWORK_BODY
B(B_COMMENT,,brake fast speed operation,1,1,27,2,);
B(B_VARIN,,enab_fast_speed,17,11,19,13,);
B(B_VARIN,,store_sys_press,17,12,19,14,);
B(B_F,@AND-2,,26,11,31,15,N);
B(B_FB,RS,RS14,47,8,52,12,);
B(B_VAROUT,,brake_fast_speed,52,9,54,11,);
B(B_VARIN,,pump_in_zero,23,17,25,19,);
B(B_VARIN,,LXstopUpEnDown,17,13,19,15,);
B(B_VARIN,,LXstopDownEnUp,17,14,19,16,);
B(B_VARIN,,loc_stop_integra,17,15,19,17,);
B(B_F,@AND-7,,19,8,24,17,0N00NNN);
B(B_VARIN,,feed_press_ok,37,18,39,20,);
B(B_F,@OR-2,,40,11,45,15,0N);
B(B_VARIN,,feed_press_ok,9,8,11,10,);
B(B_F,@OR-2,,11,7,16,11,N);
B(B_VARIN,,clutch,9,9,11,11,);
B(B_F,@OR-2,,11,3,16,7,);
B(B_VARIN,,analog_sign_pos,9,4,11,6,);
B(B_VARIN,,analog_sign_neg,9,5,11,7,);
B(B_FB,TON,TON3,33,11,38,15,);
B(B_VARIN,,T#0.5s,30,15,32,17,);
L(17,11,19,11);
L(18,5,18,10);
L(17,9,17,11);
L(25,13,26,13);
L(25,10,25,13);
L(25,14,26,14);
L(46,11,47,11);
L(46,11,46,13);
L(39,14,40,14);
L(25,14,25,18);
L(18,10,19,10);
L(24,10,47,10);
L(39,14,39,19);
L(38,13,40,13);
L(45,13,46,13);
L(16,9,17,9);
L(16,5,18,5);
L(31,13,33,13);
L(32,14,33,14);
L(32,14,32,16);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_COMMENT,,enable power stages,1,1,27,2,);
B(B_F,@AND-2,,18,7,23,11,N);
B(B_VARIN,,pump_in_zero,16,9,18,11,);
B(B_FB,RS,RS15,25,4,30,8,);
B(B_VAROUT,,enable_pump,30,5,32,7,);
B(B_F,@OR-2,,11,4,16,8,);
B(B_VARIN,,load_press_to_sy,9,5,11,7,);
B(B_VARIN,,en_leakoil_comp,9,6,11,8,);
L(24,7,25,7);
L(24,7,24,9);
L(23,9,24,9);
L(17,9,18,9);
L(17,6,17,9);
L(16,6,25,6);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 19 ;
        NETWORK_BODY
B(B_COMMENT,,enable power stage trimot,1,1,27,2,);
B(B_VARIN,,bridge_fast_sped,10,9,12,11,);
B(B_VARIN,,brake_normal,10,10,12,12,);
B(B_FB,RS,RS16,21,7,26,11,);
B(B_VARIN,,LX23fastSpeedSel,12,8,14,10,);
B(B_VARIN,,brake_fast_speed,9,11,11,13,);
B(B_F,@AND-4,,14,7,19,13,00NN);
B(B_F,@AND-3,,14,13,19,18,NNN);
B(B_VAROUT,,enable_trimot,33,3,35,5,);
B(B_F,@AND-3,,28,2,33,7,00N);
B(B_VARIN,,enable_pump,26,4,28,6,);
B(B_VARIN,,en_trimot_analog,26,3,28,5,);
L(12,10,14,10);
L(12,11,14,11);
L(13,10,13,15);
L(12,11,12,16);
L(12,16,14,16);
L(20,10,20,15);
L(20,10,21,10);
L(19,9,21,9);
L(11,12,14,12);
L(13,15,14,15);
L(19,15,20,15);
L(11,12,11,17);
L(11,17,14,17);
L(27,6,27,9);
L(26,9,27,9);
L(27,6,28,6);
        END_NETWORK_BODY
    END_NET_WORK
END_BODY
END_FUNCTION_BLOCK

FUNCTION_BLOCK HGleakoilComV020
	VAR_INPUT 
		en_leakoil_comp: BOOL:=FALSE;
			(*enable leakoil compeansation*)
		analog_sig_pos: BOOL:=FALSE;
			(*analog signal pump lifting*)
		analog_sig_neg: BOOL:=FALSE;
			(*analog signal pump lowering*)
		winch_lifting: BOOL:=FALSE;
			(*winch is lifting*)
		winch_lowering: BOOL:=FALSE;
			(*winch is lowering*)
		analog_signal_pu: REAL:=0.0;
			(*analog signal pump*)
		system_pressure: REAL:=0.0;
			(*system pressure*)
		max_comp_signal: REAL:=0.0;
			(*maximum compensation signal*)
	END_VAR
	VAR_OUTPUT
		leakoil_anal_sig: REAL:=0.0;
			(*leakoil analog signal*)
	END_VAR
	VAR_EXTERNAL
		MDdeltaTime: REAL:=0.001;
			(*time to the last scan in sec.*)
	END_VAR
	VAR 
		LDstorePress: REAL:=0.0;
		LD1: REAL:=0.0;
		LD2: REAL:=0.0;
	END_VAR
'FBD'
BODY
    WORKSPACE
        NETWORK_LIST_TYPE := NWTYPEFBD ;
        ACTIVE_NETWORK := 0 ;
    END_WORKSPACE
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 17 ;
        NETWORK_BODY
B(B_F,@SUB,,36,9,41,13,);
B(B_F,limit,,43,8,49,13,);
B(B_VARIN,,1.0,40,7,42,9,);
B(B_F,@DIV,,51,8,56,12,);
B(B_VARIN,,365.0,48,13,50,15,);
B(B_F,@MUL-2,,58,7,63,11,);
B(B_F,sel,,66,5,71,10,);
B(B_VARIN,,en_leakoil_comp,63,4,65,6,);
B(B_VARIN,,0.0,64,7,66,9,);
B(B_VAROUT,,LD1,71,6,73,8,);
B(B_VARIN,,max_comp_signal,55,6,57,8,);
B(B_F,sel,,29,9,34,14,);
B(B_VARIN,,35.0,33,14,35,16,);
B(B_VAROUT,,LDstorePress,35,6,37,8,);
B(B_COMMENT,,leakoil compensation,1,1,27,2,);
B(B_F,@AND-2,,22,7,27,11,0N);
B(B_F,@LT-2,,15,8,20,12,);
B(B_VARIN,,analog_signal_pu,13,5,15,7,);
B(B_VARIN,,0.0,13,6,15,8,);
B(B_F,EQ_R,,15,4,20,8,);
B(B_VARIN,,LDstorePress,12,12,14,14,);
B(B_VARIN,,system_pressure,11,11,13,13,);
B(B_COMMENT,,Damit bei Leckölnachförder (nach stehenbleiben)~ dieø^Leckölkomp nicht mehr erhöht werden kann!,9,14,30,16,);
L(42,11,42,12);
L(42,12,43,12);
L(42,8,42,10);
L(42,10,43,10);
L(41,11,43,11);
L(49,10,51,10);
L(50,11,51,11);
L(50,11,50,14);
L(65,5,65,7);
L(65,7,66,7);
L(63,9,66,9);
L(56,10,58,10);
L(57,9,58,9);
L(57,7,57,9);
L(35,12,35,15);
L(35,12,36,12);
L(34,11,36,11);
L(35,7,35,11);
L(27,9,28,9);
L(28,9,28,11);
L(28,11,29,11);
L(21,9,22,9);
L(20,10,22,10);
L(20,6,21,6);
L(21,6,21,9);
L(14,11,14,13);
L(14,11,15,11);
L(13,10,13,12);
L(13,10,15,10);
L(14,13,29,13);
L(13,12,29,12);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 18 ;
        NETWORK_BODY
B(B_F,sel,,20,10,25,15,);
B(B_VARIN,,0.0,18,12,20,14,);
B(B_F,sel,,20,3,25,8,);
B(B_VARIN,,0.0,18,5,20,7,);
B(B_F,sel,,27,7,32,12,);
B(B_F,@MUL-2,,34,7,39,11,);
B(B_VARIN,,MDdeltaTime,31,12,33,14,);
B(B_F,@ADD-2,,41,7,46,11,);
B(B_F,sel,,48,6,53,11,);
B(B_VARIN,,LD2,38,11,40,13,);
B(B_VARIN,,0.0,45,11,47,13,);
B(B_F,@AND-2,,41,3,46,7,NN);
B(B_VARIN,,analog_sig_pos,39,4,41,6,);
B(B_VARIN,,analog_sig_neg,39,5,41,7,);
B(B_F,@AND-2,,11,10,16,14,);
B(B_F,@AND-2,,11,3,16,7,);
B(B_VARIN,,analog_sig_neg,9,11,11,13,);
B(B_VARIN,,analog_sig_pos,9,4,11,6,);
B(B_VARIN,,winch_lowering,9,5,11,7,);
B(B_VARIN,,winch_lifting,9,12,11,14,);
B(B_COMMENT,,correct leakoil comp. by checking the real winch direction,1,1,27,2,);
B(B_F,limit,,55,5,61,10,);
B(B_VAROUT,,LD2,61,6,63,8,);
B(B_VARIN,,-15.0,52,4,54,6,);
B(B_VARIN,,15.0,52,11,54,13,);
B(B_F,to_real,,10,7,17,10,);
B(B_VARIN,,10.0,8,8,10,10,);
B(B_F,to_real,,11,14,18,17,);
B(B_VARIN,,-10.0,9,15,11,17,);
L(19,12,20,12);
L(19,9,19,12);
L(25,5,26,5);
L(25,12,26,12);
L(26,11,26,12);
L(26,5,26,10);
L(26,11,27,11);
L(26,10,27,10);
L(19,9,27,9);
L(33,10,33,13);
L(33,10,34,10);
L(32,9,34,9);
L(47,10,48,10);
L(47,10,47,12);
L(40,10,41,10);
L(40,10,40,12);
L(39,9,41,9);
L(46,9,48,9);
L(47,8,48,8);
L(46,5,47,5);
L(47,5,47,8);
L(16,12,19,12);
L(16,5,20,5);
L(53,8,55,8);
L(54,7,55,7);
L(54,5,54,7);
L(54,9,55,9);
L(54,9,54,12);
L(17,9,18,9);
L(18,7,18,9);
L(18,7,20,7);
L(18,16,19,16);
L(19,14,19,16);
L(19,14,20,14);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_COMMENT,,output signal,1,1,27,2,);
B(B_F,@ADD-2,,11,5,16,9,);
B(B_VARIN,,LD1,9,6,11,8,);
B(B_VARIN,,LD2,9,7,11,9,);
B(B_F,limit,,18,4,24,9,);
B(B_VARIN,,0.0,15,3,17,5,);
B(B_VARIN,,max_comp_signal,15,9,17,11,);
B(B_VAROUT,,leakoil_anal_sig,24,5,26,7,);
L(17,6,18,6);
L(17,4,17,6);
L(16,7,18,7);
L(17,8,18,8);
L(17,8,17,10);
        END_NETWORK_BODY
    END_NET_WORK
END_BODY
END_FUNCTION_BLOCK

FUNCTION_BLOCK LGanalogPartV013
	VAR_INPUT 
		analog_signal_in: REAL:=0.0;
			(*analog signal input*)
		presen_eng_speed: REAL:=0.0;
			(*present engine speed*)
		eng_spd_f_reduct: REAL:=0.0;
			(*engine speed for reduction*)
		int_time_up: REAL:=0.0;
			(*integration time up*)
		int_time_dn: REAL:=0.0;
			(*integration time down*)
		max_lift_reg_sig: REAL:=0.0;
			(*maximum lifting regulator signal*)
		max_lowe_reg_sig: REAL:=0.0;
			(*maximum lowering regulator signal*)
		lg_speed_1: BOOL:=FALSE;
			(*lg speed 1*)
		lg_speed_2: BOOL:=FALSE;
			(*lg speed 2*)
		lg_speed_3: BOOL:=FALSE;
			(*lg speed 3*)
	END_VAR
	VAR_OUTPUT
		analog_signal_pu: REAL:=0.0;
			(*analog signal pump*)
		pump_sign_zero: BOOL:=FALSE;
			(*pump signal in zero*)
	END_VAR
	VAR 
		LDanalSignLimita: REAL:=0.0;
			(*analog signal after limitation*)
		LDanalogSig: REAL:=0.0;
		LDsigLift: REAL:=0.0;
		LDsigLower: REAL:=0.0;
		LDreduct: REAL:=0.0;
		Integrator1: Integrator;
	END_VAR
'FBD'
BODY
    WORKSPACE
        NETWORK_LIST_TYPE := NWTYPEFBD ;
        ACTIVE_NETWORK := 0 ;
    END_WORKSPACE
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_VARIN,,presen_eng_speed,9,7,11,9,);
B(B_VARIN,,eng_spd_f_reduct,9,8,11,10,);
B(B_F,@DIV,,11,6,16,10,);
B(B_F,limit,,20,5,26,10,);
B(B_VARIN,,0.0,18,6,20,8,);
B(B_VARIN,,1.0,18,8,20,10,);
B(B_COMMENT,,signal limitation in consideration to the engine speed,1,1,27,2,);
B(B_F,@MUL-2,,28,2,33,6,);
B(B_VAROUT,,LDanalogSig,33,3,35,5,);
B(B_VARIN,,analog_signal_in,26,3,28,5,);
L(16,8,20,8);
L(27,5,27,7);
L(26,7,27,7);
L(27,5,28,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_F,sel,,18,5,23,10,);
B(B_VARIN,,lg_speed_2,16,6,18,8,);
B(B_F,sel,,30,4,35,9,);
B(B_VAROUT,,LDreduct,35,5,37,7,);
B(B_VARIN,,lg_speed_3,28,5,30,7,);
B(B_VARIN,,0.33,16,7,18,9,);
B(B_F,to_real,,11,8,18,11,);
B(B_VARIN,,0.66,9,9,11,11,);
B(B_VARIN,,1.0,28,7,30,9,);
B(B_COMMENT,,signal limitation ,1,1,27,2,);
L(23,7,30,7);
L(18,9,18,10);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_COMMENT,,signal limitation lifting,1,1,27,2,);
B(B_F,SigMin4,,11,6,18,12,);
B(B_F,@MUL-2,,18,3,23,7,);
B(B_VARIN,,LDanalogSig,16,4,18,6,);
B(B_VAROUT,,LDsigLift,23,4,25,6,);
B(B_VARIN,,1.0,9,9,11,11,);
B(B_VARIN,,1.0,9,10,11,12,);
B(B_VARIN,,max_lift_reg_sig,9,8,11,10,);
B(B_VARIN,,LDreduct,9,7,11,9,);
L(18,6,18,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_COMMENT,,signal limitation lowering,1,1,27,2,);
B(B_F,SigMin4,,11,6,18,12,);
B(B_F,@MUL-2,,18,3,23,7,);
B(B_VARIN,,LDanalogSig,16,4,18,6,);
B(B_VAROUT,,LDsigLower,23,4,25,6,);
B(B_VARIN,,1.0,9,9,11,11,);
B(B_VARIN,,1.0,9,10,11,12,);
B(B_VARIN,,max_lowe_reg_sig,9,8,11,10,);
B(B_VARIN,,LDreduct,9,7,11,9,);
L(18,6,18,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,selection lifting or lowering,1,1,27,2,);
B(B_VARIN,,LDanalogSig,9,4,11,6,);
B(B_VARIN,,0.0,9,5,11,7,);
B(B_F,sel,,18,5,23,10,);
B(B_VAROUT,,LDanalSignLimita,23,6,25,8,);
B(B_F,@GE-2,,11,3,16,7,);
B(B_VARIN,,LDsigLift,16,8,18,10,);
B(B_VARIN,,LDsigLower,16,7,18,9,);
L(17,5,17,7);
L(17,7,18,7);
L(16,5,17,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,integrator lg analog signal,1,1,27,2,);
B(B_FB,Integrator,Integrator1,11,4,20,10,);
B(B_VARIN,,LDanalSignLimita,9,6,11,8,);
B(B_VAROUT,,analog_signal_pu,20,5,22,7,);
B(B_VARIN,,TRUE,9,5,11,7,);
B(B_VARIN,,int_time_up,9,7,11,9,);
B(B_VARIN,,int_time_dn,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_COMMENT,,pump signal in zero,1,1,27,2,);
B(B_F,EQ_R,,11,3,16,7,);
B(B_VARIN,,0.0,9,5,11,7,);
B(B_VARIN,,analog_signal_pu,9,4,11,6,);
B(B_VAROUT,,pump_sign_zero,16,4,18,6,);
        END_NETWORK_BODY
    END_NET_WORK
END_BODY
END_FUNCTION_BLOCK

FUNCTION_BLOCK LGdigLogPartV013
	VAR_INPUT 
		analog_sign_pos: BOOL:=FALSE;
			(*analog signal positiv*)
		analog_sign_neg: BOOL:=FALSE;
			(*analog signal negativ*)
		global_stop_up: BOOL:=FALSE;
			(*global stop up*)
		global_stop_down: BOOL:=FALSE;
			(*global stop down*)
		stop_all_functio: BOOL:=FALSE;
			(*global stop all excavator functions*)
		lml_stop: BOOL:=FALSE;
			(*lml stop*)
		lml_stop_backwar: BOOL:=FALSE;
			(*lml stop backwards*)
		lower_limit_swit: BOOL:=FALSE;
			(*lower limit switch o.k.*)
		upper_limit_swit: BOOL:=FALSE;
			(*upper limit switch o.k.*)
		pump_sign_zero: BOOL:=FALSE;
			(*pump signal in zero*)
		used_4_hoist_Op: BOOL:=FALSE;
			(*lg section is used for hoisting winch operation*)
		X23_lg_speed: BOOL:=FALSE;
			(*X23 lg speed push button*)
	END_VAR
	VAR_OUTPUT
		brake: BOOL:=FALSE;
			(*brake for normal speed*)
		enable_pump: BOOL:=FALSE;
			(*enable pump up or down*)
		local_stop_up: BOOL:=FALSE;
			(*local stop integrated lifting*)
		local_stop_dn: BOOL:=FALSE;
			(*local stop integrated lowering*)
		lg_speed_1: BOOL:=FALSE;
			(*lg speed 1*)
		lg_speed_2: BOOL:=FALSE;
			(*lg speed 2*)
		lg_speed_3: BOOL:=FALSE;
			(*lg speed 3*)
	END_VAR
	VAR_EXTERNAL RETAIN
		MXlgSpeed1Memory: BOOL:=FALSE;
			(*lg speed 1 memory*)
		MXlgSpeed2Memory: BOOL:=FALSE;
			(*lg speed 2 memory*)
		MXlgSpeed3Memory: BOOL:=FALSE;
			(*lg speed 3 memory*)
	END_VAR
	VAR 
		LXlmlStop: BOOL:=FALSE;
			(*lml stop*)
		LXlmlStopBack: BOOL:=FALSE;
			(*lml stop backwards*)
		LXinitOk: BOOL:=FALSE;
		LXlmlStopDn: BOOL:=FALSE;
		LXlmlStopUp: BOOL:=FALSE;
		RS1: RS;
		RS2: RS;
		RS3: RS;
		RS4: RS;
		RS5: RS;
		RS6: RS;
		RS7: RS;
		TOF1: TOF;
		R_TRIG1: R_TRIG;
	END_VAR
'FBD'
BODY
    WORKSPACE
        NETWORK_LIST_TYPE := NWTYPEFBD ;
        ACTIVE_NETWORK := 0 ;
    END_WORKSPACE
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_COMMENT,,init program,1,1,27,2,);
B(B_F,not,,11,3,16,6,);
B(B_VARIN,,LXinitOk,9,4,11,6,);
B(B_JUMP,,init,16,4,18,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_COMMENT,,lml stop,1,1,26,2,);
B(B_VARIN,,lml_stop,9,5,11,7,);
B(B_F,@AND-3,,12,7,17,12,NNN);
B(B_VAROUT,,LXlmlStop,24,5,26,7,);
B(B_FB,RS,RS1,19,4,24,8,);
B(B_VARIN,,analog_sign_neg,10,9,12,11,);
B(B_VARIN,,brake,10,10,12,12,);
L(11,6,11,9);
L(11,9,12,9);
L(17,9,18,9);
L(18,7,19,7);
L(18,7,18,9);
L(11,6,19,6);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_COMMENT,,lml stop backwards,1,1,26,2,);
B(B_VARIN,,lml_stop_backwar,9,5,11,7,);
B(B_F,@AND-3,,12,7,17,12,NNN);
B(B_VAROUT,,LXlmlStopBack,24,5,26,7,);
B(B_FB,RS,RS2,19,4,24,8,);
B(B_VARIN,,analog_sign_pos,10,9,12,11,);
B(B_VARIN,,brake,10,10,12,12,);
L(11,6,11,9);
L(11,9,12,9);
L(17,9,18,9);
L(18,7,19,7);
L(18,7,18,9);
L(11,6,19,6);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 15 ;
        NETWORK_BODY
B(B_F,sel,,13,3,18,8,);
B(B_F,sel,,13,9,18,14,);
B(B_VARIN,,used_4_hoist_Op,10,4,12,6,);
B(B_VARIN,,LXlmlStop,9,5,11,7,);
B(B_VARIN,,LXlmlStopBack,8,6,10,8,);
B(B_VAROUT,,LXlmlStopDn,18,4,20,6,);
B(B_VAROUT,,LXlmlStopUp,18,10,20,12,);
B(B_COMMENT,,set lml stop depend on luffing gear operation or hoisting operation,1,1,26,2,);
L(12,5,12,11);
L(12,11,13,11);
L(12,5,13,5);
L(10,7,10,12);
L(10,12,13,12);
L(11,6,11,13);
L(11,13,13,13);
L(11,6,13,6);
L(10,7,13,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 16 ;
        NETWORK_BODY
B(B_COMMENT,,stop luffing gear,1,1,27,2,);
B(B_VARIN,,LXlmlStopDn,11,12,13,14,);
B(B_VARIN,,lower_limit_swit,11,11,13,13,);
B(B_VARIN,,upper_limit_swit,9,5,11,7,);
B(B_VAROUT,,local_stop_up,18,4,20,6,);
B(B_VAROUT,,local_stop_dn,18,10,20,12,);
B(B_F,@OR-4,,13,9,18,15,0N);
B(B_VARIN,,global_stop_down,11,13,13,15,);
B(B_VARIN,,stop_all_functio,10,4,12,6,);
B(B_VARIN,,global_stop_up,9,7,11,9,);
B(B_F,@OR-4,,13,3,18,9,0N);
B(B_VARIN,,LXlmlStopUp,9,6,11,8,);
L(11,6,13,6);
L(12,11,13,11);
L(12,5,12,11);
L(11,8,13,8);
L(12,5,13,5);
L(11,7,13,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_COMMENT,,brake,1,1,27,2,);
B(B_VARIN,,analog_sign_pos,9,4,11,6,);
B(B_FB,RS,RS3,32,3,37,7,);
B(B_F,@AND-2,,25,6,30,10,N);
B(B_VARIN,,pump_sign_zero,23,8,25,10,);
B(B_F,@OR-2,,18,3,23,7,);
B(B_F,@AND-2,,11,3,16,7,0N);
B(B_VARIN,,local_stop_up,9,5,11,7,);
B(B_F,@AND-2,,11,7,16,11,0N);
B(B_VARIN,,analog_sign_neg,9,8,11,10,);
B(B_VARIN,,local_stop_dn,9,9,11,11,);
B(B_FB,TOF,TOF1,39,3,44,7,);
B(B_VAROUT,,brake,44,4,46,6,);
B(B_VARIN,,T#0.5s,36,7,38,9,);
L(30,8,31,8);
L(31,6,31,8);
L(31,6,32,6);
L(24,8,25,8);
L(24,5,24,8);
L(23,5,32,5);
L(16,5,18,5);
L(17,6,18,6);
L(17,6,17,9);
L(16,9,17,9);
L(37,5,39,5);
L(38,6,39,6);
L(38,6,38,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_COMMENT,,enable power stages,1,1,27,2,);
B(B_F,@AND-2,,12,7,17,11,N);
B(B_FB,RS,RS4,19,4,24,8,);
B(B_VARIN,,pump_sign_zero,10,9,12,11,);
B(B_VAROUT,,enable_pump,24,5,26,7,);
B(B_VARIN,,brake,9,5,11,7,);
L(17,9,18,9);
L(18,7,18,9);
L(18,7,19,7);
L(11,9,12,9);
L(11,6,11,9);
L(11,6,19,6);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 20 ;
        NETWORK_BODY
B(B_COMMENT,,select lg speed,1,1,27,2,);
B(B_VARIN,,X23_lg_speed,9,5,11,7,);
B(B_FB,R_TRIG,R_TRIG1,11,4,18,7,);
B(B_F,@AND-2,,20,5,25,9,);
B(B_VARIN,,lg_speed_3,16,7,18,9,);
B(B_F,@AND-2,,20,10,25,14,);
B(B_VARIN,,lg_speed_1,16,12,18,14,);
B(B_F,@AND-2,,20,15,25,19,);
B(B_VARIN,,lg_speed_2,16,17,18,19,);
B(B_FB,RS,RS5,28,5,33,9,);
B(B_FB,RS,RS6,28,10,33,14,);
B(B_FB,RS,RS7,28,15,33,19,);
B(B_COMMENT,,ACHTUNG: diese RS FlipFlops werden im Init Teil gesetzt,25,3,46,4,);
B(B_VAROUT,,lg_speed_1,34,6,36,8,);
B(B_VAROUT,,lg_speed_2,34,11,36,13,);
B(B_VAROUT,,lg_speed_3,34,16,36,18,);
L(18,8,20,8);
L(19,7,20,7);
L(18,6,19,6);
L(18,13,20,13);
L(19,12,20,12);
L(18,18,20,18);
L(19,17,20,17);
L(19,6,19,17);
L(25,7,28,7);
L(25,12,28,12);
L(25,17,28,17);
L(27,13,27,17);
L(27,13,28,13);
L(27,8,27,12);
L(27,8,28,8);
L(26,7,26,18);
L(26,18,28,18);
L(33,12,34,12);
L(33,7,34,7);
L(33,17,34,17);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,exit luffing gear program,1,1,27,2,);
B(B_VARIN,,TRUE,9,3,11,5,);
B(B_RETURN,,,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL := init: ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,init luffing gear program,1,1,27,2,);
B(B_VARIN,,TRUE,9,3,11,5,);
B(B_VAROUT,,LXinitOk,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_COMMENT,,init lg speed,1,1,27,2,);
B(B_VAROUT,,lg_speed_1,30,9,32,11,);
B(B_VARIN,,FALSE,23,10,25,12,);
B(B_FB,RS,RS5,25,8,30,12,);
B(B_F,@AND-3,,11,3,16,8,NNN);
B(B_F,@OR-2,,18,6,23,10,);
B(B_VARIN,,MXlgSpeed1Memory,16,8,18,10,);
B(B_VARIN,,MXlgSpeed1Memory,9,4,11,6,);
B(B_VARIN,,MXlgSpeed2Memory,9,5,11,7,);
B(B_VARIN,,MXlgSpeed3Memory,9,6,11,8,);
L(17,8,18,8);
L(17,5,17,8);
L(16,5,17,5);
L(23,8,24,8);
L(24,8,24,10);
L(24,10,25,10);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_VARIN,,MXlgSpeed2Memory,9,3,11,5,);
B(B_VAROUT,,lg_speed_2,16,3,18,5,);
B(B_VARIN,,FALSE,9,4,11,6,);
B(B_FB,RS,RS6,11,2,16,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_VARIN,,MXlgSpeed3Memory,9,3,11,5,);
B(B_VAROUT,,lg_speed_3,16,3,18,5,);
B(B_VARIN,,FALSE,9,4,11,6,);
B(B_FB,RS,RS7,11,2,16,6,);
        END_NETWORK_BODY
    END_NET_WORK
END_BODY
END_FUNCTION_BLOCK

FUNCTION_BLOCK MDhydrPump
	VAR_INPUT 
		volume: REAL:=0.0;
			(*volume [cm³]*)
		pivotingRange: REAL:=0.0;
			(*pivoting range [%]*)
		diffPressure: REAL:=0.0;
			(*difference pressure [bar]*)
		revolution: REAL:=0.0;
			(*revolution [rev/min]*)
	END_VAR
	VAR_OUTPUT
		quantity: REAL:=0.0;
			(*quantity [l/min]*)
		torque: REAL:=0.0;
			(*torque [Nm]*)
		power: REAL:=0.0;
			(*power [kW]*)
	END_VAR
	VAR 
		LDactualVolume: REAL:=0.0;
			(*actual volume [cm³]*)
	END_VAR
'FBD'
BODY
    WORKSPACE
        NETWORK_LIST_TYPE := NWTYPEFBD ;
        ACTIVE_NETWORK := 0 ;
    END_WORKSPACE
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_COMMENT,,calculate signed actual volume [cm³],1,1,16,2,);
B(B_F,@DIV,,11,3,16,7,);
B(B_F,@MUL-2,,18,3,23,7,);
B(B_VARIN,,volume,15,7,17,9,);
B(B_VARIN,,pivotingRange,9,4,11,6,);
B(B_VARIN,,100.0,9,5,11,7,);
B(B_VAROUT,,LDactualVolume,23,4,25,6,);
L(16,5,18,5);
L(17,6,17,8);
L(17,6,18,6);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_COMMENT,,calculate signed quantity [l/min],1,1,14,2,);
B(B_VARIN,,LDactualVolume,9,4,11,6,);
B(B_VARIN,,revolution,9,5,11,7,);
B(B_F,@MUL-2,,11,3,16,7,);
B(B_F,@DIV,,18,3,23,7,);
B(B_VARIN,,1000.0,15,7,17,9,);
B(B_VAROUT,,quantity,23,4,25,6,);
L(16,5,18,5);
L(17,6,18,6);
L(17,6,17,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,calculate signed torque [Nm],1,1,13,2,);
B(B_VARIN,,LDactualVolume,9,4,11,6,);
B(B_VARIN,,diffPressure,9,5,11,7,);
B(B_F,@MUL-2,,11,3,16,7,);
B(B_F,@DIV,,18,3,23,7,);
B(B_F,@DIV,,25,3,30,7,);
B(B_VARIN,,20.0,15,7,17,9,);
B(B_VARIN,,3.14159,22,8,24,10,);
B(B_VAROUT,,torque,30,4,32,6,);
L(16,5,18,5);
L(17,6,18,6);
L(23,5,25,5);
L(17,6,17,8);
L(24,6,24,9);
L(24,6,25,6);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_COMMENT,,calculate signed power [kW],1,1,13,2,);
B(B_F,@MUL-4,,11,3,16,9,);
B(B_VARIN,,torque,9,4,11,6,);
B(B_VARIN,,revolution,9,5,11,7,);
B(B_VARIN,,2.0,9,6,11,8,);
B(B_VARIN,,3.14159,9,7,11,9,);
B(B_F,@DIV,,18,3,23,7,);
B(B_VARIN,,60000.0,15,9,17,11,);
B(B_VAROUT,,power,23,4,25,6,);
L(16,5,18,5);
L(17,6,18,6);
L(17,6,17,10);
        END_NETWORK_BODY
    END_NET_WORK
END_BODY
END_FUNCTION_BLOCK

FUNCTION_BLOCK MDpivotingRange
	VAR_INPUT 
		minCurrentPos: UINT:=0;
			(*minimum current positive [mA]*)
		minCurrentNeg: UINT:=0;
			(*minimum current negative [mA]*)
		actCurrentPos: UINT:=0;
			(*actual current positive [mA]*)
		actCurrentNeg: UINT:=0;
			(*actual current negative [mA]*)
		rangeCurrent: UINT:=0;
			(*range current [mA]*)
	END_VAR
	VAR_OUTPUT
		pivotingRange: REAL:=0.0;
			(*pivoting range [%]*)
	END_VAR
	VAR 
		LDpivotRangePos: REAL:=0.0;
			(*pivoting range positive [%]*)
		LDpivotRangeNeg: REAL:=0.0;
			(*pivoting range negative [%]*)
	END_VAR
'FBD'
BODY
    WORKSPACE
        NETWORK_LIST_TYPE := NWTYPEFBD ;
        ACTIVE_NETWORK := 0 ;
    END_WORKSPACE
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_COMMENT,,check range current ,1,1,10,2,);
B(B_VARIN,,rangeCurrent,9,4,11,6,);
B(B_VARIN,,0,9,5,11,7,);
B(B_JUMP,,error,16,4,18,6,);
B(B_F,@EQ-2,,11,3,16,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_COMMENT,,calculate pivoting range positive [%],1,1,16,2,);
B(B_VARIN,,actCurrentPos,9,6,11,8,);
B(B_F,@SUB,,23,5,28,9,);
B(B_F,limit,,30,4,36,9,);
B(B_VARIN,,0,27,3,29,5,);
B(B_VARIN,,rangeCurrent,35,9,37,11,);
B(B_F,uint_to_int,,11,5,21,8,);
B(B_VARIN,,minCurrentPos,9,9,11,11,);
B(B_F,uint_to_int,,11,8,21,11,);
B(B_F,int_to_real,,37,4,47,7,);
B(B_F,uint_to_real,,37,8,48,11,);
B(B_F,@DIV,,50,4,55,8,);
B(B_F,@MUL-2,,57,4,62,8,);
B(B_VARIN,,100.0,54,10,56,12,);
B(B_F,limit,,64,3,70,8,);
B(B_VARIN,,0.0,61,2,63,4,);
B(B_VAROUT,,LDpivotRangePos,70,4,72,6,);
L(28,7,30,7);
L(29,7,29,8);
L(29,8,30,8);
L(29,6,30,6);
L(29,4,29,6);
L(21,7,23,7);
L(21,10,22,10);
L(22,8,22,10);
L(22,8,23,8);
L(36,6,37,6);
L(55,6,57,6);
L(56,7,57,7);
L(56,7,56,11);
L(62,6,64,6);
L(63,5,64,5);
L(63,7,64,7);
L(63,7,63,11);
L(56,11,63,11);
L(63,3,63,5);
L(49,7,50,7);
L(49,7,49,10);
L(47,6,50,6);
L(48,10,49,10);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_COMMENT,,calculate pivoting range negative [%],1,1,16,2,);
B(B_VARIN,,actCurrentNeg,9,6,11,8,);
B(B_F,@SUB,,23,5,28,9,);
B(B_F,limit,,30,4,36,9,);
B(B_VARIN,,0,27,3,29,5,);
B(B_VARIN,,rangeCurrent,35,9,37,11,);
B(B_F,uint_to_int,,11,5,21,8,);
B(B_F,uint_to_int,,11,8,21,11,);
B(B_VARIN,,minCurrentNeg,9,9,11,11,);
B(B_F,int_to_real,,37,4,47,7,);
B(B_F,@DIV,,50,4,55,8,);
B(B_F,@MUL-2,,57,4,62,8,);
B(B_VARIN,,100.0,54,10,56,12,);
B(B_F,limit,,64,3,70,8,);
B(B_VARIN,,0.0,61,2,63,4,);
B(B_VAROUT,,LDpivotRangeNeg,70,4,72,6,);
B(B_F,uint_to_real,,37,8,48,11,);
L(28,7,30,7);
L(29,7,29,8);
L(29,8,30,8);
L(29,6,30,6);
L(29,4,29,6);
L(21,7,23,7);
L(21,10,22,10);
L(22,8,22,10);
L(22,8,23,8);
L(36,6,37,6);
L(49,7,50,7);
L(49,7,49,10);
L(55,6,57,6);
L(56,7,57,7);
L(56,7,56,11);
L(62,6,64,6);
L(63,5,64,5);
L(63,7,64,7);
L(63,7,63,11);
L(56,11,63,11);
L(63,3,63,5);
L(48,10,49,10);
L(47,6,49,6);
L(49,6,50,6);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 14 ;
        NETWORK_BODY
B(B_COMMENT,,pivoting range [%],1,1,9,2,);
B(B_F,@GT-2,,11,3,16,7,);
B(B_VARIN,,LDpivotRangeNeg,9,4,11,6,);
B(B_VARIN,,LDpivotRangePos,9,5,11,7,);
B(B_F,sel,,18,5,23,10,);
B(B_VARIN,,LDpivotRangePos,16,7,18,9,);
B(B_VARIN,,LDpivotRangeNeg,9,10,11,12,);
B(B_F,@MUL-2,,11,9,16,13,);
B(B_VARIN,,-1.0,9,11,11,13,);
B(B_VAROUT,,pivotingRange,23,6,25,8,);
L(16,5,17,5);
L(17,5,17,7);
L(17,7,18,7);
L(16,11,17,11);
L(17,9,17,11);
L(17,9,18,9);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,TRUE,9,1,11,3,);
B(B_RETURN,,,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL := error: ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,0.0,9,1,11,3,);
B(B_VAROUT,,pivotingRange,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
END_BODY
END_FUNCTION_BLOCK

FUNCTION_BLOCK SCmodeSelV021
	VAR_INPUT 
		ixRelOpMode1: BOOL:=FALSE;
			(*release operation mode1*)
		ixRelOpMode2: BOOL:=FALSE;
			(*release operation mode2*)
		ixRelOpMode3: BOOL:=FALSE;
			(*release operation mode3*)
		ixRelOpMode4: BOOL:=FALSE;
			(*release operation mode4*)
		ixRelOpMode5: BOOL:=FALSE;
			(*release operation mode5*)
		ixRelOpMode6: BOOL:=FALSE;
			(*release operation mode6*)
		ixRelOpMode7: BOOL:=FALSE;
			(*release operation mode7*)
		ixRelOpMode8: BOOL:=FALSE;
			(*release operation mode8*)
		ixRelOpMode9: BOOL:=FALSE;
			(*release operation mode9*)
		ixRelOpMode10: BOOL:=FALSE;
			(*release operation mode10*)
		ixRelOpMode11: BOOL:=FALSE;
			(*release operation mode11*)
		ixRelOpMode12: BOOL:=FALSE;
			(*release operation mode12*)
		ixRelOpMode13: BOOL:=FALSE;
			(*release operation mode13*)
		ixRelOpMode14: BOOL:=FALSE;
			(*release operation mode14*)
		ixRelOpMode15: BOOL:=FALSE;
			(*release operation mode15*)
		ixRelOpMode16: BOOL:=FALSE;
			(*release operation mode16*)
		ixReleaseModeCh: BOOL:=FALSE;
			(*release set change mode*)
		iwActOpMode: UINT:=0;
			(*actual operation mode*)
		ixNewModeAckn: BOOL:=FALSE;
			(*screen new mode acknowledged*)
		irPresNewMode: REAL:=0.0;
			(*screen preselected new operation mode*)
	END_VAR
	VAR_OUTPUT
		qxOpMode1: BOOL:=FALSE;
			(*screen status for op mode 1*)
		qxOpMode2: BOOL:=FALSE;
			(*screen status for op mode 2*)
		qxOpMode3: BOOL:=FALSE;
			(*screen status for op mode 3*)
		qxOpMode4: BOOL:=FALSE;
			(*screen status for op mode 4*)
		qxOpMode5: BOOL:=FALSE;
			(*screen status for op mode 5*)
		qxOpMode6: BOOL:=FALSE;
			(*screen status for op mode 6*)
		qxOpMode7: BOOL:=FALSE;
			(*screen status for op mode 7*)
		qxOpMode8: BOOL:=FALSE;
			(*screen status for op mode 8*)
		qxOpMode9: BOOL:=FALSE;
			(*screen status for op mode 9*)
		qxOpMode10: BOOL:=FALSE;
			(*screen status for op mode 10*)
		qxOpMode11: BOOL:=FALSE;
			(*screen status for op mode 11*)
		qxOpMode12: BOOL:=FALSE;
			(*screen status for op mode 12*)
		qxOpMode13: BOOL:=FALSE;
			(*screen status for op mode 13*)
		qxOpMode14: BOOL:=FALSE;
			(*screen status for op mode 14*)
		qxOpMode15: BOOL:=FALSE;
			(*screen status for op mode 15*)
		qxOpMode16: BOOL:=FALSE;
			(*screen status for op mode 16*)
		qxSetAcknNewMode: BOOL:=FALSE;
			(*screen status acknowledge mode*)
		qxNewModeAckn: BOOL:=FALSE;
			(*new mode acknowledged*)
		qwActOpMode: UINT:=0;
			(*preselected actual operation mode*)
	END_VAR
	VAR 
		LXinitOk: BOOL:=FALSE;
		LWmaskPresel: WORD:=0;
		LW1: UINT:=0;
		LWcount: UINT:=0;
		LW2: WORD:=0;
		R_TRIG1: R_TRIG;
		RS1: RS;
		RS2: RS;
	END_VAR
'FBD'
BODY
    WORKSPACE
        NETWORK_LIST_TYPE := NWTYPEFBD ;
        ACTIVE_NETWORK := 0 ;
    END_WORKSPACE
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,init,1,1,40,2,);
B(B_VARIN,,LXinitOk,11,3,13,5,);
B(B_JUMP,,init,13,3,15,5,N);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VAROUT,,qxOpMode1,13,1,15,3,);
B(B_VARIN,,ixRelOpMode1,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VAROUT,,qxOpMode2,13,1,15,3,);
B(B_VARIN,,ixRelOpMode2,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VAROUT,,qxOpMode3,13,1,15,3,);
B(B_VARIN,,ixRelOpMode3,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VAROUT,,qxOpMode4,13,1,15,3,);
B(B_VARIN,,ixRelOpMode4,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VAROUT,,qxOpMode5,13,1,15,3,);
B(B_VARIN,,ixRelOpMode5,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VAROUT,,qxOpMode6,13,1,15,3,);
B(B_VARIN,,ixRelOpMode6,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VAROUT,,qxOpMode7,13,1,15,3,);
B(B_VARIN,,ixRelOpMode7,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VAROUT,,qxOpMode8,13,1,15,3,);
B(B_VARIN,,ixRelOpMode8,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VAROUT,,qxOpMode9,13,1,15,3,);
B(B_VARIN,,ixRelOpMode9,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VAROUT,,qxOpMode10,13,1,15,3,);
B(B_VARIN,,ixRelOpMode10,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VAROUT,,qxOpMode11,13,1,15,3,);
B(B_VARIN,,ixRelOpMode11,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VAROUT,,qxOpMode12,13,1,15,3,);
B(B_VARIN,,ixRelOpMode12,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VAROUT,,qxOpMode13,13,1,15,3,);
B(B_VARIN,,ixRelOpMode13,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VAROUT,,qxOpMode14,13,1,15,3,);
B(B_VARIN,,ixRelOpMode14,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VAROUT,,qxOpMode15,13,1,15,3,);
B(B_VARIN,,ixRelOpMode15,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VAROUT,,qxOpMode16,13,1,15,3,);
B(B_VARIN,,ixRelOpMode16,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_VARIN,,ixReleaseModeCh,11,3,13,5,);
B(B_FB,R_TRIG,R_TRIG1,13,2,20,5,);
B(B_FB,RS,RS1,20,2,25,6,);
B(B_VAROUT,,qxSetAcknNewMode,25,3,27,5,);
B(B_F,@OR-2,,14,5,19,9,N);
B(B_VARIN,,ixNewModeAckn,12,7,14,9,);
L(13,4,13,7);
L(20,5,20,7);
L(13,7,14,7);
L(19,7,20,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 14 ;
        NETWORK_BODY
B(B_COMMENT,,set new operation mode,1,1,40,2,);
B(B_FB,RS,RS2,19,3,24,7,);
B(B_VAROUT,,qxNewModeAckn,24,4,26,6,);
B(B_F,sel,,25,6,30,11,);
B(B_VAROUT,,qwActOpMode,30,7,32,9,);
B(B_VARIN,,iwActOpMode,23,8,25,10,);
B(B_F,real_to_uint,,13,10,24,13,);
B(B_VARIN,,irPresNewMode,11,11,13,13,);
B(B_F,@AND-2,,14,3,19,7,);
B(B_VARIN,,ixNewModeAckn,12,5,14,7,);
B(B_VARIN,,ixReleaseModeCh,12,4,14,6,);
B(B_VARIN,,FALSE,17,7,19,9,);
L(24,5,24,8);
L(24,10,24,12);
L(24,10,25,10);
L(24,8,25,8);
L(19,6,19,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,exit,1,1,40,2,);
B(B_VARIN,,TRUE,11,3,13,5,);
B(B_RETURN,,,13,3,15,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL := init: ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,init,1,1,40,2,);
B(B_VARIN,,TRUE,11,3,13,5,);
B(B_VAROUT,,LXinitOk,13,3,15,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_VAROUT,,LWcount,13,3,15,5,);
B(B_VARIN,,iwActOpMode,11,3,13,5,);
B(B_COMMENT,,Wert für Schleifenzähler,1,1,40,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 5 ;
        NETWORK_BODY
B(B_VARIN,,1,11,2,13,4,);
B(B_VAROUT,,LW1,13,2,15,4,);
B(B_COMMENT,,Initwert,1,1,40,2,);
B(B_COMMENT,,1DL:  0000 0001,36,3,54,4,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL := loop: ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_VARIN,,LW1,11,4,13,6,);
B(B_F,@MUL-2,,13,3,18,7,);
B(B_VARIN,,2,11,5,13,7,);
B(B_VAROUT,,LW1,18,4,20,6,);
B(B_COMMENT,,Endlosschleife; Bitmuster anlegen,1,1,40,2,);
B(B_COMMENT,,shl um 1 Stelle ,20,3,32,4,);
B(B_COMMENT,,1DL:  0000 0010,36,3,54,4,);
B(B_COMMENT,,2DL:  0000 0100,36,4,54,5,);
B(B_COMMENT,,3DL:  0000 1000,36,5,54,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_VARIN,,LWcount,11,4,13,6,);
B(B_F,@SUB,,13,3,18,7,);
B(B_VARIN,,1,11,5,13,7,);
B(B_VAROUT,,LWcount,18,4,20,6,);
B(B_VARIN,,0,17,7,19,9,);
B(B_F,@NE,,19,5,24,9,);
B(B_JUMP,,loop,24,6,26,8,);
B(B_COMMENT,,wenn 0 wir Endlosschleife verlassen ,1,1,40,2,);
L(18,5,18,7);
L(18,7,19,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 22 ;
        NETWORK_BODY
B(B_VARIN,,ixRelOpMode1,11,4,13,6,);
B(B_VARIN,,ixRelOpMode2,11,5,13,7,);
B(B_VARIN,,ixRelOpMode3,11,6,13,8,);
B(B_VARIN,,ixRelOpMode4,11,7,13,9,);
B(B_VARIN,,ixRelOpMode5,11,8,13,10,);
B(B_VARIN,,ixRelOpMode6,11,9,13,11,);
B(B_VARIN,,ixRelOpMode7,11,10,13,12,);
B(B_VARIN,,ixRelOpMode8,11,11,13,13,);
B(B_VARIN,,ixRelOpMode9,11,12,13,14,);
B(B_VARIN,,ixRelOpMode10,11,13,13,15,);
B(B_VARIN,,ixRelOpMode11,11,14,13,16,);
B(B_VARIN,,ixRelOpMode12,11,15,13,17,);
B(B_VARIN,,ixRelOpMode13,11,16,13,18,);
B(B_VARIN,,ixRelOpMode14,11,17,13,19,);
B(B_VARIN,,ixRelOpMode15,11,18,13,20,);
B(B_VARIN,,ixRelOpMode16,11,19,13,21,);
B(B_F,BitMask2Word,,13,3,24,21,);
B(B_VAROUT,,LWmaskPresel,24,4,26,6,);
B(B_COMMENT,,bit mask for enable preselections ,1,1,40,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_F,uint_to_word,,18,3,29,6,);
B(B_F,@AND-2,,29,4,34,8,);
B(B_VARIN,,LWmaskPresel,27,6,29,8,);
B(B_F,@EQ-2,,36,4,41,8,);
B(B_VARIN,,0,34,6,36,8,);
B(B_COMMENT,,if preselected operation modes is not activ change to main page,1,1,40,2,);
B(B_F,sel,,42,6,47,11,);
B(B_VARIN,,iwActOpMode,40,8,42,10,);
B(B_VARIN,,1,40,9,42,11,);
B(B_VAROUT,,qwActOpMode,47,7,49,9,);
B(B_VAROUT,,LW2,35,2,37,4,);
B(B_COMMENT,,shr um 1 Stelle (Mode 1=bit 0),2,8,14,9,);
B(B_F,@DIV,,13,3,18,7,);
B(B_VARIN,,LW1,11,4,13,6,);
B(B_VARIN,,2,11,5,13,7,);
L(29,5,29,6);
L(34,6,36,6);
L(41,6,41,8);
L(41,8,42,8);
L(35,3,35,6);
        END_NETWORK_BODY
    END_NET_WORK
END_BODY
END_FUNCTION_BLOCK

FUNCTION_BLOCK SGanalogPartV040
	VAR_INPUT 
		analog_signal_in: REAL:=0.0;
			(*analog signal input*)
		integr_time_up: REAL:=0.0;
			(*integrator time for analog signal up*)
		inetgr_time_down: REAL:=0.0;
			(*integrator time for analog signal down*)
		speed_red_sig: REAL:=0.0;
			(*speed reduction signal*)
		leakoil_anal_sig: REAL:=0.0;
			(*leakoil analog signal*)
		sg_sys_diff_pres: REAL:=0.0;
			(*system difference pressure*)
		en_leakoil_comp: BOOL:=FALSE;
			(*enable leakoil compensation*)
		sg_ludv_sys: BOOL:=FALSE;
			(*sg by ludv system*)
		max_sped_red_sig: REAL:=0.0;
			(*maximum speed reduction signal*)
	END_VAR
	VAR_OUTPUT
		analog_signal_pu: REAL:=0.0;
			(*analog signal pump*)
		pump_in_zero: BOOL:=FALSE;
			(*pump in zero*)
	END_VAR
	VAR 
		LDlimited: REAL:=0.0;
			(*analog signal after slewing gear limitation*)
		LDanalSigWouLeak: REAL:=0.0;
		LDleakoilAnal: REAL:=0.0;
		Integrator1: Integrator;
		SGleakoilCom1: SGleakoilComV010;
	END_VAR
'FBD'
BODY
    WORKSPACE
        NETWORK_LIST_TYPE := NWTYPEFBD ;
        ACTIVE_NETWORK := 0 ;
    END_WORKSPACE
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_COMMENT,,signal limitation,1,1,27,2,);
B(B_F,SigMin4,,11,6,18,12,);
B(B_F,@MUL-2,,18,3,23,7,);
B(B_VARIN,,analog_signal_in,16,4,18,6,);
B(B_VAROUT,,LDlimited,23,4,25,6,);
B(B_VARIN,,1.0,9,9,11,11,);
B(B_VARIN,,1.0,9,10,11,12,);
B(B_VARIN,,max_sped_red_sig,9,8,11,10,);
B(B_VARIN,,speed_red_sig,9,7,11,9,);
L(18,6,18,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,integrator sg analog signal,1,1,27,2,);
B(B_FB,Integrator,Integrator1,11,4,20,10,);
B(B_VARIN,,LDlimited,9,6,11,8,);
B(B_VARIN,,TRUE,9,5,11,7,);
B(B_VARIN,,integr_time_up,9,7,11,9,);
B(B_VARIN,,inetgr_time_down,9,8,11,10,);
B(B_VAROUT,,LDanalSigWouLeak,20,5,22,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_COMMENT,,check pump in zero,1,1,27,2,);
B(B_VARIN,,LDanalSigWouLeak,9,4,11,6,);
B(B_F,EQ_R,,11,3,16,7,);
B(B_VARIN,,0.0,9,5,11,7,);
B(B_VAROUT,,pump_in_zero,16,4,18,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 18 ;
        NETWORK_BODY
B(B_COMMENT,,leakoil compensation,1,1,27,2,);
B(B_VARIN,,LDanalSigWouLeak,9,6,11,8,);
B(B_F,@GT-2,,13,5,18,9,);
B(B_VARIN,,0.0,9,7,11,9,);
B(B_VARIN,,0.0,9,11,11,13,);
B(B_F,@LT-2,,13,9,18,13,);
B(B_VARIN,,sg_sys_diff_pres,19,14,21,16,);
B(B_VARIN,,leakoil_anal_sig,20,15,22,17,);
B(B_VAROUT,,LDleakoilAnal,46,5,48,7,);
B(B_COMMENT,,pos=right ; neg=left,1,4,11,5,);
B(B_COMMENT,,pos=right ; neg=left,2,16,12,17,);
B(B_VARIN,,sg_ludv_sys,21,16,23,18,);
B(B_VARIN,,en_leakoil_comp,21,3,23,5,);
B(B_FB,SGleakoilComV010,SGleakoilCom1,23,4,46,13,);
L(11,7,13,7);
L(11,8,13,8);
L(11,12,13,12);
L(19,8,19,11);
L(12,7,12,14);
L(23,4,23,6);
L(12,11,13,11);
L(18,11,19,11);
L(20,9,20,14);
L(21,10,21,15);
L(19,8,23,8);
L(18,7,23,7);
L(20,9,23,9);
L(21,10,23,10);
L(12,14,20,14);
L(22,11,22,16);
L(22,11,23,11);
L(23,12,23,17);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_COMMENT,,output signal,1,1,27,2,);
B(B_VARIN,,LDleakoilAnal,9,5,11,7,);
B(B_VARIN,,LDanalSigWouLeak,9,4,11,6,);
B(B_F,@ADD-2,,11,3,16,7,);
B(B_VAROUT,,analog_signal_pu,16,4,18,6,);
        END_NETWORK_BODY
    END_NET_WORK
END_BODY
END_FUNCTION_BLOCK

FUNCTION_BLOCK SGdigLogPartV050
	VAR_INPUT 
		analog_sign_pos: BOOL:=FALSE;
			(*analog signal positiv*)
		analog_sign_neg: BOOL:=FALSE;
			(*analog signal negativ*)
		global_stop_righ: BOOL:=FALSE;
			(*global stop right*)
		global_stop_left: BOOL:=FALSE;
			(*global stop left*)
		stop_all_functio: BOOL:=FALSE;
			(*global stop all excavator functions*)
		pump_in_zero: BOOL:=FALSE;
			(*pump in zero*)
		X23_sg_speed: BOOL:=FALSE;
			(*X23 keyboard bottom sg speed*)
		X23_sg_mom_reg: BOOL:=FALSE;
			(*X23 keyboard bottom sg moment regulator*)
		joy_sg_mom_reg: BOOL:=FALSE;
			(*joystick push bottom sg moment regulator*)
		error_joystick: BOOL:=FALSE;
			(*sg error joystick*)
		presel_mom_reg: BOOL:=FALSE;
			(*preselection moment regulator*)
		error_press_indi: BOOL:=FALSE;
			(*error pressure indicator sg*)
		press_diff_high: BOOL:=FALSE;
			(*pressure differnce to high to enable moment regulator*)
		force_sg_speed_1: BOOL:=FALSE;
			(*force sg speed 1*)
		brake_time: REAL:=0.0;
			(*brake time*)
	END_VAR
	VAR_OUTPUT
		brake: BOOL:=FALSE;
			(*brake for normal speed*)
		enable_pump: BOOL:=FALSE;
			(*enable pump right or left*)
		local_stop_right: BOOL:=FALSE;
			(*local stop integrated right*)
		local_stop_left: BOOL:=FALSE;
			(*local stop integrated left*)
		sg_speed_1: BOOL:=FALSE;
			(*sg speed 1 enabled*)
		sg_speed_2: BOOL:=FALSE;
			(*sg speed 2 enabled*)
		sg_speed_3: BOOL:=FALSE;
			(*sg speed 3 enabled*)
		mom_reg_enabled: BOOL:=FALSE;
			(*moment regulator enabled*)
		stop_free_turn: BOOL:=FALSE;
			(*stop free turn operation*)
		X23_led_mom_reg: BOOL:=FALSE;
			(*X23  LED moment regulator*)
		en_leakoil_comp: BOOL:=FALSE;
			(*enable leakoil compensation*)
	END_VAR
	VAR_EXTERNAL RETAIN
		MXsgSpeed1Memory: BOOL:=FALSE;
			(*sg speed 1 memory*)
		MXsgSpeed2Memory: BOOL:=FALSE;
			(*sg speed 2 memory*)
		MXsgSpeed3Memory: BOOL:=FALSE;
			(*sg speed 3 memory*)
	END_VAR
	VAR 
		LXinitOk: BOOL:=FALSE;
			(*init completed*)
		LXmomRegByJoyst: BOOL:=FALSE;
			(*moment regulator by joystick push bottom*)
		R_TRIG1: R_TRIG;
		R_TRIG2: R_TRIG;
		TON1: TON;
		RS1: RS;
		RS2: RS;
		RS3: RS;
		RS4: RS;
		RS5: RS;
		RS6: RS;
		RS7: RS;
		RS8: RS;
		SR1: SR;
		SR2: SR;
		TOF1: TOF;
	END_VAR
'FBD'
BODY
    WORKSPACE
        NETWORK_LIST_TYPE := NWTYPEFBD ;
        ACTIVE_NETWORK := 0 ;
    END_WORKSPACE
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_COMMENT,,init program,1,1,27,2,);
B(B_F,not,,11,3,16,6,);
B(B_VARIN,,LXinitOk,9,4,11,6,);
B(B_JUMP,,init,16,4,18,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_COMMENT,,stop slewing gear,1,1,27,2,);
B(B_VARIN,,global_stop_righ,10,4,12,6,);
B(B_VAROUT,,local_stop_right,17,4,19,6,);
B(B_VARIN,,global_stop_left,10,9,12,11,);
B(B_VAROUT,,local_stop_left,17,8,19,10,);
B(B_VARIN,,stop_all_functio,9,5,11,7,);
B(B_F,@OR-2,,12,3,17,7,);
B(B_F,@OR-2,,12,7,17,11,);
L(11,6,11,9);
L(11,6,12,6);
L(11,9,12,9);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 17 ;
        NETWORK_BODY
B(B_COMMENT,,enable brake,1,1,27,2,);
B(B_VARIN,,analog_sign_pos,9,6,11,8,);
B(B_F,@AND-2,,11,5,16,9,0N);
B(B_VARIN,,local_stop_right,9,7,11,9,);
B(B_F,@AND-2,,11,9,16,13,0N);
B(B_VARIN,,analog_sign_neg,9,10,11,12,);
B(B_VARIN,,local_stop_left,9,11,11,13,);
B(B_F,@OR-3,,18,4,23,9,);
B(B_VARIN,,mom_reg_enabled,15,3,17,5,);
B(B_F,@AND-2,,25,4,30,8,0N);
B(B_VARIN,,stop_free_turn,22,9,24,11,);
B(B_F,@AND-2,,32,8,37,12,N);
B(B_VARIN,,pump_in_zero,30,10,32,12,);
B(B_FB,TON,TON1,39,8,44,12,);
B(B_FB,RS,RS1,46,4,51,8,);
B(B_F,real_to_time,,26,12,37,15,);
B(B_F,@MUL-2,,21,12,26,16,);
B(B_VARIN,,brake_time,19,13,21,15,);
B(B_VARIN,,1000.0,19,14,21,16,);
B(B_VAROUT,,brake,51,5,53,7,);
L(16,7,18,7);
L(17,8,18,8);
L(17,8,17,11);
L(16,11,17,11);
L(17,6,18,6);
L(17,4,17,6);
L(24,7,24,10);
L(24,7,25,7);
L(23,6,25,6);
L(31,10,32,10);
L(31,6,31,10);
L(45,7,46,7);
L(44,10,45,10);
L(39,6,46,6);
L(37,10,39,10);
L(38,11,39,11);
L(38,11,38,14);
L(37,14,38,14);
L(30,6,39,6);
L(45,7,45,10);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 20 ;
        NETWORK_BODY
B(B_COMMENT,,select sg speed,1,1,27,2,);
B(B_VARIN,,X23_sg_speed,9,5,11,7,);
B(B_FB,R_TRIG,R_TRIG1,11,4,18,7,);
B(B_F,@AND-2,,20,5,25,9,);
B(B_VARIN,,sg_speed_3,16,7,18,9,);
B(B_F,@AND-2,,20,9,25,13,);
B(B_VARIN,,sg_speed_1,16,11,18,13,);
B(B_F,@AND-2,,20,15,25,19,);
B(B_VARIN,,sg_speed_2,16,17,18,19,);
B(B_FB,RS,RS3,42,9,47,13,);
B(B_FB,RS,RS4,42,15,47,19,);
B(B_F,@OR-2,,35,12,40,16,);
B(B_FB,RS,RS2,42,4,47,8,);
B(B_VARIN,,force_sg_speed_1,24,3,26,5,);
B(B_F,@OR-2,,27,4,32,8,);
B(B_VAROUT,,sg_speed_2,48,10,50,12,);
B(B_VAROUT,,sg_speed_3,48,16,50,18,);
B(B_VAROUT,,sg_speed_1,48,5,50,7,);
B(B_VAROUT,,MXsgSpeed1Memory,48,6,50,8,);
B(B_VAROUT,,MXsgSpeed2Memory,48,11,50,13,);
B(B_VAROUT,,MXsgSpeed3Memory,48,17,50,19,);
B(B_COMMENT,,ACHTUNG: diese drei FlipFlop werden auch im init-Teil gesetzt!!!,36,2,60,3,);
L(18,8,20,8);
L(19,7,20,7);
L(18,6,19,6);
L(18,12,20,12);
L(19,11,20,11);
L(18,18,20,18);
L(19,17,20,17);
L(19,6,19,17);
L(25,11,42,11);
L(25,17,42,17);
L(33,18,42,18);
L(41,12,41,14);
L(41,12,42,12);
L(34,15,35,15);
L(34,15,34,17);
L(33,14,35,14);
L(41,7,41,11);
L(41,7,42,7);
L(40,14,41,14);
L(25,7,27,7);
L(26,6,27,6);
L(26,4,26,6);
L(33,6,33,18);
L(32,6,42,6);
L(47,17,48,17);
L(48,17,48,18);
L(47,11,48,11);
L(48,11,48,12);
L(47,6,48,6);
L(48,6,48,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 35 ;
        NETWORK_BODY
B(B_COMMENT,,select moment regulator,1,1,27,2,);
B(B_FB,RS,RS6,41,18,46,22,0N);
B(B_FB,RS,RS7,51,25,56,29,);
B(B_FB,RS,RS5,51,11,56,15,);
B(B_VAROUT,,X23_led_mom_reg,56,26,58,28,);
B(B_VAROUT,,stop_free_turn,56,31,58,33,);
B(B_FB,RS,RS8,51,30,56,34,0N);
B(B_VARIN,,enable_pump,45,22,47,24,);
B(B_F,@AND-4,,51,18,56,24,0NNN);
B(B_VARIN,,analog_sign_neg,47,24,49,26,);
B(B_VARIN,,analog_sign_pos,46,23,48,25,);
B(B_F,@AND-2,,34,18,39,22,);
B(B_VARIN,,stop_all_functio,17,21,19,23,);
B(B_VARIN,,presel_mom_reg,17,20,19,22,);
B(B_VARIN,,presel_mom_reg,9,12,11,14,);
B(B_F,@AND-2,,11,11,16,15,);
B(B_VARIN,,X23_sg_mom_reg,9,13,11,15,);
B(B_FB,R_TRIG,R_TRIG2,17,11,24,14,);
B(B_VARIN,,brake,22,14,24,16,);
B(B_F,@AND-4,,27,12,32,18,0NN);
B(B_VARIN,,press_diff_high,22,15,24,17,);
B(B_F,@AND-4,,27,5,32,11,0NN);
B(B_VARIN,,brake,25,7,27,9,);
B(B_VARIN,,press_diff_high,25,8,27,10,);
B(B_VARIN,,joy_sg_mom_reg,25,6,27,8,);
B(B_F,@OR-2,,34,11,39,15,);
B(B_VAROUT,,LXmomRegByJoyst,40,6,42,8,);
B(B_VARIN,,mom_reg_enabled,32,3,34,5,);
B(B_F,@OR-3,,27,18,32,23,0N);
B(B_VARIN,,mom_reg_enabled,31,32,33,34,);
B(B_VAROUT,,mom_reg_enabled,56,12,58,14,);
B(B_FB,SR,SR1,35,5,40,9,0N);
B(B_VARIN,,error_press_indi,17,22,19,24,);
B(B_VARIN,,local_stop_right,17,23,19,25,);
B(B_F,@AND-2,,19,27,24,31,0N);
B(B_VARIN,,joy_sg_mom_reg,17,29,19,31,);
B(B_VARIN,,LXmomRegByJoyst,17,28,19,30,);
B(B_F,@AND-6,,19,19,24,27,0NNNNN);
B(B_VARIN,,error_joystick,17,25,19,27,);
B(B_VARIN,,local_stop_left,17,24,19,26,);
B(B_COMMENT,,http://jira.zdv.liebherr.i:8080/browse/LWNTBEHSHSSW10511521-32,57,21,89,22,);
L(50,14,51,14);
L(39,20,41,20);
L(50,17,57,17);
L(57,17,57,20);
L(50,20,50,28);
L(47,21,51,21);
L(50,28,51,28);
L(47,27,51,27);
L(40,21,40,27);
L(40,27,47,27);
L(40,21,41,21);
L(50,14,50,17);
L(40,27,40,33);
L(50,28,50,32);
L(50,32,51,32);
L(47,21,47,23);
L(48,22,51,22);
L(48,22,48,24);
L(46,20,51,20);
L(56,20,57,20);
L(49,23,51,23);
L(49,23,49,25);
L(33,21,34,21);
L(24,15,27,15);
L(24,13,26,13);
L(16,13,17,13);
L(24,16,27,16);
L(26,14,27,14);
L(25,17,27,17);
L(25,10,27,10);
L(25,10,25,21);
L(26,13,26,20);
L(39,13,51,13);
L(32,14,34,14);
L(33,13,34,13);
L(33,7,33,13);
L(34,8,35,8);
L(34,4,34,8);
L(26,20,27,20);
L(32,20,34,20);
L(25,22,27,22);
L(33,21,33,33);
L(33,33,51,33);
L(32,7,35,7);
L(25,22,25,29);
L(24,29,25,29);
L(24,21,27,21);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_VARIN,,brake,9,5,11,7,);
B(B_COMMENT,,enable leak oil,1,1,27,2,);
B(B_FB,TOF,TOF1,11,4,16,8,);
B(B_VAROUT,,en_leakoil_comp,16,5,18,7,);
B(B_VARIN,,T#0.2s,9,6,11,8,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_COMMENT,,enable power stage,1,1,27,2,);
B(B_VAROUT,,enable_pump,16,4,18,6,);
B(B_VARIN,,en_leakoil_comp,9,4,11,6,);
B(B_VARIN,,pump_in_zero,9,5,11,7,);
B(B_FB,SR,SR2,11,3,16,7,);
B(B_COMMENT,,SR damit die Freigabe Leistungsstufeø^bleibt solange die Leckölkompensationø^läuft.,27,4,43,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,exit slewing gear program,1,1,27,2,);
B(B_VARIN,,TRUE,9,3,11,5,);
B(B_RETURN,,,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL := init: ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,init slewing gear program,1,1,27,2,);
B(B_VARIN,,TRUE,9,3,11,5,);
B(B_VAROUT,,LXinitOk,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_COMMENT,,init sg speed,1,1,27,2,);
B(B_VARIN,,FALSE,23,10,25,12,);
B(B_F,@AND-3,,11,3,16,8,NNN);
B(B_F,@OR-2,,18,6,23,10,);
B(B_VARIN,,MXsgSpeed1Memory,16,8,18,10,);
B(B_VARIN,,MXsgSpeed1Memory,9,4,11,6,);
B(B_VARIN,,MXsgSpeed2Memory,9,5,11,7,);
B(B_VARIN,,MXsgSpeed3Memory,9,6,11,8,);
B(B_FB,RS,RS2,25,8,30,12,);
B(B_VAROUT,,sg_speed_1,30,9,32,11,);
L(17,8,18,8);
L(17,5,17,8);
L(16,5,17,5);
L(23,8,24,8);
L(24,8,24,10);
L(24,10,25,10);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_FB,RS,RS3,11,2,16,6,);
B(B_VARIN,,MXsgSpeed2Memory,9,3,11,5,);
B(B_VAROUT,,sg_speed_2,16,3,18,5,);
B(B_VARIN,,FALSE,9,4,11,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_FB,RS,RS4,11,2,16,6,);
B(B_VARIN,,MXsgSpeed3Memory,9,3,11,5,);
B(B_VAROUT,,sg_speed_3,16,3,18,5,);
B(B_VARIN,,FALSE,9,4,11,6,);
        END_NETWORK_BODY
    END_NET_WORK
END_BODY
END_FUNCTION_BLOCK

FUNCTION_BLOCK SGleakoilComV010
	VAR_INPUT 
		en_leakoil_comp: BOOL:=FALSE;
			(*enable leakoil compeansation*)
		analog_sig_pos: BOOL:=FALSE;
			(*analog signal pump lifting*)
		analog_sig_neg: BOOL:=FALSE;
			(*analog signal pump lowering*)
		analog_signal_pu: REAL:=0.0;
			(*analog signal pump*)
		system_pressure: REAL:=0.0;
			(*system pressure*)
		max_comp_signal: REAL:=0.0;
			(*maximum compensation signal*)
		ludv_system: BOOL:=FALSE;
			(*sg by ludv system*)
	END_VAR
	VAR_OUTPUT
		leakoil_anal_sig: REAL:=0.0;
			(*leakoil analog signal*)
	END_VAR
	VAR 
		LXrightSigMem: BOOL:=FALSE;
		LXleftSigMem: BOOL:=FALSE;
		LXanalogSigZero: BOOL:=FALSE;
		LDstorePress: REAL:=0.0;
		LDmaxCompSig: REAL:=0.0;
		LD1: REAL:=0.0;
		LD2: REAL:=0.0;
		LD3: REAL:=0.0;
		RS1: RS;
		RS2: RS;
	END_VAR
'FBD'
BODY
    WORKSPACE
        NETWORK_LIST_TYPE := NWTYPEFBD ;
        ACTIVE_NETWORK := 0 ;
    END_WORKSPACE
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_FB,RS,RS1,15,3,20,7,);
B(B_FB,RS,RS2,15,7,20,11,);
B(B_VAROUT,,LXrightSigMem,20,4,22,6,);
B(B_VAROUT,,LXleftSigMem,20,8,22,10,);
B(B_VARIN,,analog_sig_pos,11,4,13,6,);
B(B_VARIN,,analog_sig_neg,10,8,12,10,);
B(B_COMMENT,,store last direction ,1,1,27,2,);
L(14,6,14,9);
L(14,6,15,6);
L(13,5,13,10);
L(13,10,15,10);
L(13,5,15,5);
L(12,9,15,9);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 17 ;
        NETWORK_BODY
B(B_COMMENT,,system pressure signal,1,1,27,2,);
B(B_VARIN,,system_pressure,11,11,13,13,);
B(B_F,@GT-2,,15,8,20,12,);
B(B_F,sel,,37,9,42,14,);
B(B_F,@LT-2,,30,6,35,10,);
B(B_F,sel,,44,8,49,13,);
B(B_F,@AND-3,,37,3,42,8,);
B(B_F,@AND-3,,22,5,27,10,);
B(B_VARIN,,LXrightSigMem,20,7,22,9,);
B(B_VARIN,,LXleftSigMem,35,5,37,7,);
B(B_VARIN,,LDstorePress,12,12,14,14,);
B(B_VAROUT,,LDstorePress,49,9,51,11,);
B(B_COMMENT,,Damit bei Leckölnachförder (nach stehenbleiben)~ dieø^Leckölkomp nicht mehr erhöht werden kann!,45,3,66,5,);
B(B_VARIN,,analog_signal_pu,13,4,15,6,);
B(B_VARIN,,0.0,13,5,15,7,);
B(B_F,EQ_R,,15,3,20,7,);
L(21,5,21,7);
L(14,11,14,13);
L(14,11,15,11);
L(13,10,13,12);
L(13,10,15,10);
L(28,11,37,11);
L(13,12,37,12);
L(28,7,28,11);
L(20,5,21,5);
L(30,9,30,13);
L(29,8,29,12);
L(29,8,30,8);
L(21,5,36,5);
L(43,5,43,10);
L(43,10,44,10);
L(30,15,43,15);
L(43,12,43,15);
L(43,12,44,12);
L(42,11,44,11);
L(30,13,37,13);
L(36,5,37,5);
L(42,5,43,5);
L(21,7,22,7);
L(27,7,28,7);
L(21,9,21,10);
L(20,10,21,10);
L(21,9,22,9);
L(35,8,36,8);
L(36,7,37,7);
L(36,7,36,8);
L(30,13,30,15);
L(14,13,30,13);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 17 ;
        NETWORK_BODY
B(B_VARIN,,0.0,19,6,21,8,);
B(B_VARIN,,1.0,19,7,21,9,);
B(B_VARIN,,100.0,19,8,21,10,);
B(B_VARIN,,0.0,19,9,21,11,);
B(B_VARIN,,0.0,19,11,21,13,);
B(B_VARIN,,1.0,19,12,21,14,);
B(B_F,GPkx_dV010,,21,5,30,14,);
B(B_F,abs,,12,9,17,12,);
B(B_VARIN,,analog_signal_pu,10,10,12,12,);
B(B_VAROUT,,LD2,30,6,32,8,);
B(B_F,@MUL-2,,30,2,35,6,);
B(B_VARIN,,max_comp_signal,28,3,30,5,);
B(B_COMMENT,,reduction compensation signal depend on analog signal,1,1,27,2,);
B(B_VAROUT,,LDmaxCompSig,35,3,37,5,);
B(B_F,EQ_R,,12,13,17,17,);
B(B_VARIN,,0.0,10,15,12,17,);
B(B_VAROUT,,LXanalogSigZero,17,14,19,16,);
B(B_COMMENT,,Rücknahme des Signales wegen ø^Überkompensation,40,8,55,10,);
L(17,11,21,11);
L(30,5,30,7);
L(12,11,12,15);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 19 ;
        NETWORK_BODY
B(B_COMMENT,,counter current for slow down ,1,1,27,2,);
B(B_F,sel,,22,13,27,18,);
B(B_COMMENT,,Gegenstrom um Pumpe nicht aus demø^Null zu drücken; Gegenmoment ,37,5,53,7,);
B(B_F,sel,,31,12,36,17,);
B(B_VARIN,,0.001,29,15,31,17,);
B(B_VAROUT,,LD3,36,13,38,15,);
B(B_F,@AND-3,,26,8,31,13,);
B(B_VARIN,,LXleftSigMem,23,6,25,8,);
B(B_VARIN,,LXanalogSigZero,22,7,24,9,);
B(B_VARIN,,system_pressure,19,4,21,6,);
B(B_VARIN,,0.0,19,5,21,7,);
B(B_F,@GT-2,,21,3,26,7,);
B(B_VARIN,,LXrightSigMem,15,12,17,14,);
B(B_F,@AND-3,,17,10,22,15,);
B(B_VARIN,,LXanalogSigZero,15,13,17,15,);
B(B_VARIN,,0.0,10,11,12,13,);
B(B_VARIN,,system_pressure,10,10,12,12,);
B(B_F,@LT-2,,12,9,17,13,);
B(B_VARIN,,0.0,20,15,22,17,);
B(B_VARIN,,-0.001,20,16,22,18,);
L(27,15,31,15);
L(25,11,26,11);
L(25,7,25,11);
L(24,8,24,12);
L(24,12,26,12);
L(26,5,26,10);
L(31,10,31,14);
L(17,11,17,12);
L(22,12,22,15);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 33 ;
        NETWORK_BODY
B(B_COMMENT,,leakoil compensation,1,1,27,2,);
B(B_F,@MUL-2,,23,19,28,23,);
B(B_F,sel,,28,15,33,20,);
B(B_VARIN,,LD3,26,17,28,19,);
B(B_F,@AND-2,,23,13,28,17,);
B(B_VARIN,,LXrightSigMem,21,15,23,17,);
B(B_F,@MUL-2,,23,24,28,28,);
B(B_F,sel,,33,14,38,19,);
B(B_F,@OR-2,,18,11,23,15,);
B(B_F,@OR-2,,18,6,23,10,);
B(B_F,@AND-2,,23,3,28,7,);
B(B_VARIN,,LXleftSigMem,21,4,23,6,);
B(B_F,@GT-2,,13,12,18,16,);
B(B_VARIN,,0.0,11,14,13,16,);
B(B_VARIN,,system_pressure,11,13,13,15,);
B(B_VARIN,,system_pressure,11,7,13,9,);
B(B_VARIN,,0.0,11,8,13,10,);
B(B_F,@LT-2,,13,6,18,10,);
B(B_VARIN,,ludv_system,16,10,18,12,);
B(B_COMMENT,,ludv_system: Bei DW im offenen System soll derø^Anfangsstrom der gefahrenen Richtung stehenbleiben~ø^und nicht auf Gegenstrom geschalten werden.,48,6,68,9,);
B(B_F,@DIV,,16,19,21,23,);
B(B_F,@DIV,,16,24,21,28,);
B(B_F,limit,,8,19,14,24,);
B(B_VARIN,,1.0,6,20,8,22,);
B(B_F,limit,,8,24,14,29,);
B(B_VARIN,,-1.0,6,27,8,29,);
B(B_VARIN,,365.0,13,29,15,31,);
B(B_VARIN,,LDstorePress,6,24,8,26,);
B(B_VARIN,,LDmaxCompSig,20,30,22,32,);
B(B_VAROUT,,LD1,50,13,52,15,);
B(B_F,sel,,45,12,50,17,);
B(B_VARIN,,en_leakoil_comp,43,13,45,15,);
B(B_VARIN,,0.0,43,14,45,16,);
L(28,19,28,21);
L(28,15,28,17);
L(38,16,45,16);
L(33,18,33,26);
L(28,26,33,26);
L(23,13,23,15);
L(33,5,33,16);
L(23,6,23,8);
L(28,5,33,5);
L(18,9,18,13);
L(21,21,23,21);
L(21,26,23,26);
L(15,22,16,22);
L(15,22,15,30);
L(15,27,16,27);
L(14,26,16,26);
L(14,21,16,21);
L(8,22,8,27);
L(22,22,22,31);
L(22,22,23,22);
L(22,27,23,27);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,output signal,1,1,27,2,);
B(B_F,limit,,17,5,23,10,);
B(B_VAROUT,,leakoil_anal_sig,23,6,25,8,);
B(B_VARIN,,LD1,15,7,17,9,);
B(B_VARIN,,max_comp_signal,15,8,17,10,);
B(B_F,@MUL-2,,12,3,17,7,);
B(B_VARIN,,max_comp_signal,10,4,12,6,);
B(B_VARIN,,-1.0,10,5,12,7,);
L(17,5,17,7);
        END_NETWORK_BODY
    END_NET_WORK
END_BODY
END_FUNCTION_BLOCK

FUNCTION_BLOCK SGmomRegulatV030
	VAR_INPUT 
		analog_signal_in: REAL:=0.0;
			(*analog signal input*)
		speed_red_sig: REAL:=0.0;
			(*speed reduction signal*)
		stop_free_turn: BOOL:=FALSE;
			(*stop free turn operation*)
		int_time_up: REAL:=0.0;
			(*integration time rising signal sg*)
		int_time_down: REAL:=0.0;
			(*integration time falling signal sg*)
		sys_press_right: REAL:=0.0;
			(*system pressure right*)
		sys_press_left: REAL:=0.0;
			(*system pressure left*)
		max_press_diff: REAL:=0.0;
			(*maximum pressure difference for moment regulator*)
		corr_sg_reg_p_fa: REAL:=0.0;
			(*correction value lower limitation p-factor*)
		corr_sg_reg_i_fa: REAL:=0.0;
			(*correction value lower limitation i-factor*)
		corr_sg_reg_d_fa: REAL:=0.0;
			(*correction value lower limitation d-factor*)
		max_sped_red_sig: REAL:=0.0;
			(*maximum speed reduction signal*)
	END_VAR
	VAR_OUTPUT
		analog_signal_pu: REAL:=0.0;
			(*analog signal pump*)
		pump_in_zero: BOOL:=FALSE;
			(*pump in zero*)
	END_VAR
	VAR 
		LXsgLimActive: BOOL:=FALSE;
		LDlimited: REAL:=0.0;
			(*analog signal after slewing gear limitation*)
		LDreduct: REAL:=0.0;
		LDpresPresDifBar: REAL:=0.0;
			(*present pressure difference in bar*)
		LDpresPresDifPro: REAL:=0.0;
			(*present pressure difference in %*)
		LDanalSignalReg: REAL:=0.0;
		PID1: GPpidV010;
		Integrator1: Integrator;
		Integrator2: Integrator;
	END_VAR
'FBD'
BODY
    WORKSPACE
        NETWORK_LIST_TYPE := NWTYPEFBD ;
        ACTIVE_NETWORK := 0 ;
    END_WORKSPACE
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_COMMENT,,present pressure difference in bar,1,1,27,2,);
B(B_F,@SUB,,11,3,16,7,);
B(B_VAROUT,,LDpresPresDifBar,16,4,18,6,);
B(B_VARIN,,sys_press_left,9,5,11,7,);
B(B_VARIN,,sys_press_right,9,4,11,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_COMMENT,,present pressure difference in %,1,1,27,2,);
B(B_F,@DIV,,11,5,16,9,);
B(B_VARIN,,LDpresPresDifBar,9,6,11,8,);
B(B_VARIN,,max_press_diff,9,7,11,9,);
B(B_F,limit,,18,4,24,9,);
B(B_VARIN,,-1.0,15,3,17,5,);
B(B_VARIN,,1.0,15,9,17,11,);
B(B_F,@MUL-2,,26,4,31,8,);
B(B_VARIN,,100.0,23,9,25,11,);
B(B_VAROUT,,LDpresPresDifPro,31,5,33,7,);
L(16,7,18,7);
L(17,6,18,6);
L(17,8,18,8);
L(17,8,17,10);
L(17,4,17,6);
L(24,6,26,6);
L(25,7,26,7);
L(25,7,25,10);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 14 ;
        NETWORK_BODY
B(B_COMMENT,,moment regulation,1,1,27,2,);
B(B_VARIN,,corr_sg_reg_p_fa,9,7,11,9,);
B(B_VARIN,,corr_sg_reg_i_fa,9,8,11,10,);
B(B_VARIN,,corr_sg_reg_i_fa,9,9,11,11,);
B(B_VARIN,,corr_sg_reg_d_fa,9,10,11,12,);
B(B_F,@MUL-2,,38,4,43,8,);
B(B_VARIN,,100.0,36,6,38,8,);
B(B_F,limit,,45,3,51,8,);
B(B_VAROUT,,LDanalSignalReg,51,4,53,6,);
B(B_VARIN,,100.0,42,8,44,10,);
B(B_VARIN,,-100.0,42,2,44,4,);
B(B_VARIN,,LDpresPresDifPro,9,5,11,7,);
B(B_VARIN,,analog_signal_in,9,6,11,8,);
B(B_VARIN,,stop_free_turn,9,11,11,13,);
B(B_FB,GPpidV010,PID1,11,4,34,13,);
L(43,6,45,6);
L(44,5,45,5);
L(44,7,45,7);
L(44,7,44,9);
L(44,3,44,5);
L(34,6,38,6);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 15 ;
        NETWORK_BODY
B(B_COMMENT,,signal limitation,1,1,27,2,);
B(B_FB,Integrator,Integrator1,22,7,31,13,);
B(B_VARIN,,TRUE,20,8,22,10,);
B(B_F,@MUL-2,,32,3,37,7,);
B(B_VARIN,,LDanalSignalReg,30,4,32,6,);
B(B_VAROUT,,LDlimited,37,4,39,6,);
B(B_VARIN,,0.1,20,10,22,12,);
B(B_VARIN,,0.1,20,11,22,13,);
B(B_F,SigMin4,,11,8,18,14,);
B(B_VARIN,,1.0,9,11,11,13,);
B(B_VARIN,,1.0,9,12,11,14,);
B(B_VARIN,,max_sped_red_sig,9,10,11,12,);
B(B_VARIN,,speed_red_sig,9,9,11,11,);
B(B_COMMENT,,http://jira.zdv.liebherr.i:8080/browse/LWNTBEHSHSSW10511521-58,30,1,62,2,);
L(18,10,22,10);
L(32,6,32,9);
L(31,9,32,9);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 16 ;
        NETWORK_BODY
B(B_COMMENT,,stop free turn,1,1,27,2,);
B(B_F,sel,,14,5,19,10,);
B(B_FB,Integrator,Integrator2,22,4,31,10,);
B(B_F,sel,,14,10,19,15,);
B(B_VARIN,,TRUE,18,3,20,5,);
B(B_VAROUT,,analog_signal_pu,31,5,33,7,);
B(B_VARIN,,0.0,10,8,12,10,);
B(B_VARIN,,LDlimited,10,7,12,9,);
B(B_VARIN,,stop_free_turn,11,6,13,8,);
B(B_VARIN,,1000.0,12,12,14,14,);
B(B_VARIN,,int_time_down,12,13,14,15,);
L(20,4,20,6);
L(20,6,22,6);
L(19,7,22,7);
L(13,12,14,12);
L(19,12,21,12);
L(21,9,22,9);
L(12,8,14,8);
L(12,9,14,9);
L(13,7,14,7);
L(13,7,13,12);
L(21,8,22,8);
L(21,8,21,12);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_COMMENT,,check pump in zero,1,1,27,2,);
B(B_F,EQ_R,,11,3,16,7,);
B(B_VARIN,,analog_signal_pu,9,4,11,6,);
B(B_VARIN,,0.0,9,5,11,7,);
B(B_VAROUT,,pump_in_zero,16,4,18,6,);
        END_NETWORK_BODY
    END_NET_WORK
END_BODY
END_FUNCTION_BLOCK

FUNCTION_BLOCK SGscaleInputV014
(*name of author: Manfred Schapler
version: 1.0
date: 04/97
modification:*)
(*name of author: Manfred Schapler
version: 1.0
date: 04/97
modification:*)
	VAR_INPUT 
		en_start_engine: BOOL:=FALSE;
			(*enable start engine *)
		press_sen_600bar: BOOL:=FALSE;
			(*600bar pressure sensors for moment regulator*)
		press_input_ri_1: UINT:=0;
			(*system pressure input right 1*)
		press_input_ri_2: UINT:=0;
			(*system pressure input right 2*)
		press_input_le_1: UINT:=0;
			(*system pressure input left 1*)
		press_input_le_2: UINT:=0;
			(*system pressure input left 2*)
	END_VAR
	VAR_OUTPUT
		sys_press_right: REAL:=0.0;
			(*system pressure right*)
		sys_press_left: REAL:=0.0;
			(*system pressure left*)
		sys_press_diff: REAL:=0.0;
			(*system pressure difference*)
		error_press_indi: BOOL:=FALSE;
			(*error pressure indicator*)
		press_diff_high: BOOL:=FALSE;
			(*pressure difference high*)
	END_VAR
	VAR_EXTERNAL CONSTANT
		MSG_ERROR: UINT:=0;
	END_VAR
	VAR 
		LX1: BOOL:=FALSE;
		LX2: BOOL:=FALSE;
		LX3: BOOL:=FALSE;
		LX4: BOOL:=FALSE;
		LX5: BOOL:=FALSE;
		LX6: BOOL:=FALSE;
		LX7: BOOL:=FALSE;
		LX8: BOOL:=FALSE;
		LX9: BOOL:=FALSE;
		LX10: BOOL:=FALSE;
		LDpressureRi_1: REAL:=0.0;
			(*system pressure right 1*)
		LDpressureRi_2: REAL:=0.0;
			(*system pressure right 2*)
		LDpressureLe_1: REAL:=0.0;
			(*system pressure left 1*)
		LDpressureLe_2: REAL:=0.0;
			(*system pressure left 2*)
		LDscaleFactor: REAL:=0.0;
		ScaleAI1: ScaleAI;
		ScaleAI2: ScaleAI;
		ScaleAI3: ScaleAI;
		ScaleAI4: ScaleAI;
		TON1: TON;
		TON2: TON;
		SR1: SR;
		SR2: SR;
		SR3: SR;
		SR4: SR;
		Error1: MsgRealReal;
		Error2: MsgRealReal;
		Error3: MsgRealReal;
		Error4: MsgRealReal;
		Error5: MsgRealReal;
		Error6: MsgRealReal;
		Error7: MsgRealReal;
		Error8: MsgRealReal;
		Error9: MsgRealReal;
		Error10: MsgRealReal;
	END_VAR
'FBD'
BODY
    WORKSPACE
        NETWORK_LIST_TYPE := NWTYPEFBD ;
        ACTIVE_NETWORK := 0 ;
    END_WORKSPACE
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_COMMENT,,select scaling factor depend on preselection ,1,1,27,2,);
B(B_F,sel,,11,3,16,8,);
B(B_VARIN,,press_sen_600bar,9,4,11,6,);
B(B_VARIN,,600.0,9,6,11,8,);
B(B_VARIN,,400.0,9,5,11,7,);
B(B_VAROUT,,LDscaleFactor ,16,4,18,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 24 ;
        NETWORK_BODY
B(B_VARIN,,press_input_ri_1,9,5,11,7,);
B(B_FB,ScaleAI,ScaleAI1,11,4,19,9,);
B(B_COMMENT,,scale system pressure right 1,1,1,27,2,);
B(B_VAROUT,,LDpressureRi_1,19,5,21,7,);
B(B_VAROUT,,LX1,22,6,24,8,);
B(B_FB,MsgRealReal,Error1,22,8,31,15,);
B(B_VARIN,,118,17,9,19,11,);
B(B_VARIN,,MSG_ERROR,17,11,19,13,);
B(B_VARIN,,LDscaleFactor ,9,6,11,8,);
B(B_VARIN,,en_start_engine,17,19,19,21,);
B(B_VARIN,,MSG_ERROR,36,19,38,21,);
B(B_VARIN,,117,36,17,38,19,);
B(B_FB,MsgRealReal,Error2,38,16,47,23,);
B(B_F,@AND-2,,21,17,26,21,0N);
B(B_FB,SR,SR1,26,17,31,21,0N);
B(B_VAROUT,,LX2,32,15,34,17,);
L(19,7,22,7);
L(21,11,22,11);
L(19,10,22,10);
L(19,12,22,12);
L(21,7,21,11);
L(26,20,26,22);
L(19,20,21,20);
L(20,19,21,19);
L(20,8,20,22);
L(20,22,26,22);
L(31,19,38,19);
L(19,8,20,8);
L(32,16,32,19);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 24 ;
        NETWORK_BODY
B(B_VARIN,,press_input_ri_2,9,5,11,7,);
B(B_FB,ScaleAI,ScaleAI2,11,4,19,9,);
B(B_COMMENT,,scale system pressure right 2,1,1,27,2,);
B(B_VAROUT,,LDpressureRi_2,19,5,21,7,);
B(B_VARIN,,LDscaleFactor ,9,6,11,8,);
B(B_FB,MsgRealReal,Error3,22,8,31,15,);
B(B_VARIN,,120,17,9,19,11,);
B(B_VARIN,,MSG_ERROR,17,11,19,13,);
B(B_VAROUT,,LX3,22,6,24,8,);
B(B_FB,MsgRealReal,Error4,38,16,47,23,);
B(B_VARIN,,119,36,17,38,19,);
B(B_VARIN,,MSG_ERROR,36,19,38,21,);
B(B_F,@AND-2,,21,17,26,21,0N);
B(B_VARIN,,en_start_engine,17,19,19,21,);
B(B_FB,SR,SR2,26,17,31,21,0N);
B(B_VAROUT,,LX4,32,15,34,17,);
L(21,11,22,11);
L(19,10,22,10);
L(19,12,22,12);
L(21,7,21,11);
L(19,7,22,7);
L(19,20,21,20);
L(20,19,21,19);
L(20,8,20,22);
L(20,22,26,22);
L(26,20,26,22);
L(31,19,38,19);
L(32,16,32,19);
L(19,8,20,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 24 ;
        NETWORK_BODY
B(B_VARIN,,press_input_le_1,9,5,11,7,);
B(B_FB,ScaleAI,ScaleAI3,11,4,19,9,);
B(B_COMMENT,,scale system pressure left 1,1,1,27,2,);
B(B_VAROUT,,LDpressureLe_1,19,5,21,7,);
B(B_VARIN,,LDscaleFactor ,9,6,11,8,);
B(B_FB,MsgRealReal,Error5,22,8,31,15,);
B(B_VARIN,,122,17,9,19,11,);
B(B_VARIN,,MSG_ERROR,17,11,19,13,);
B(B_VAROUT,,LX5,22,6,24,8,);
B(B_VARIN,,en_start_engine,17,19,19,21,);
B(B_FB,MsgRealReal,Error6,38,16,47,23,);
B(B_VARIN,,121,36,17,38,19,);
B(B_VARIN,,MSG_ERROR,36,19,38,21,);
B(B_F,@AND-2,,21,17,26,21,0N);
B(B_FB,SR,SR3,26,17,31,21,0N);
B(B_VAROUT,,LX6,32,15,34,17,);
L(21,11,22,11);
L(19,10,22,10);
L(19,12,22,12);
L(21,7,21,11);
L(19,7,22,7);
L(19,20,21,20);
L(20,8,20,22);
L(20,22,26,22);
L(26,20,26,22);
L(20,19,21,19);
L(31,19,38,19);
L(32,16,32,19);
L(19,8,20,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 24 ;
        NETWORK_BODY
B(B_VARIN,,press_input_le_2,9,5,11,7,);
B(B_FB,ScaleAI,ScaleAI4,11,4,19,9,);
B(B_COMMENT,,scale system pressure left 1,1,1,27,2,);
B(B_VAROUT,,LDpressureLe_2,19,5,21,7,);
B(B_VARIN,,LDscaleFactor ,9,6,11,8,);
B(B_FB,MsgRealReal,Error7,22,8,31,15,);
B(B_VARIN,,124,17,9,19,11,);
B(B_VARIN,,MSG_ERROR,17,11,19,13,);
B(B_VAROUT,,LX7,22,6,24,8,);
B(B_VARIN,,en_start_engine,17,19,19,21,);
B(B_FB,MsgRealReal,Error8,38,16,47,23,);
B(B_VARIN,,123,36,17,38,19,);
B(B_VARIN,,MSG_ERROR,36,19,38,21,);
B(B_F,@AND-2,,21,17,26,21,0N);
B(B_FB,SR,SR4,26,17,31,21,0N);
B(B_VAROUT,,LX8,32,15,34,17,);
L(21,11,22,11);
L(19,10,22,10);
L(19,12,22,12);
L(21,7,21,11);
L(19,7,22,7);
L(20,19,21,19);
L(19,20,21,20);
L(20,8,20,22);
L(20,22,26,22);
L(26,20,26,22);
L(31,19,38,19);
L(19,8,20,8);
L(32,16,32,19);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 14 ;
        NETWORK_BODY
B(B_COMMENT,,check pressure inputs and set outputs,1,1,27,2,);
B(B_F,sel,,39,8,44,13,);
B(B_VARIN,,LDpressureRi_1,37,10,39,12,);
B(B_VARIN,,0.0,37,11,39,13,);
B(B_VARIN,,LDpressureRi_1,9,4,11,6,);
B(B_F,@SUB,,11,3,16,7,);
B(B_VARIN,,LDpressureRi_2,9,5,11,7,);
B(B_F,abs,,18,3,23,6,);
B(B_VARIN,,20.0,22,6,24,8,);
B(B_F,@GT-2,,25,3,30,7,);
B(B_COMMENT,,5%,26,7,29,8,);
B(B_FB,MsgRealReal,Error9,47,2,56,9,);
B(B_VARIN,,T#1s,29,8,31,10,);
B(B_FB,TON,TON1,32,3,37,7,);
B(B_VARIN,,MSG_ERROR,45,5,47,7,);
B(B_VARIN,,195,45,3,47,5,);
B(B_VAROUT,,sys_press_right,44,9,46,11,);
B(B_VAROUT,,LX9,38,6,40,8,);
L(38,10,39,10);
L(38,5,38,10);
L(16,5,18,5);
L(23,5,25,5);
L(24,6,25,6);
L(24,6,24,7);
L(37,5,47,5);
L(30,5,32,5);
L(31,6,32,6);
L(31,6,31,9);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 14 ;
        NETWORK_BODY
B(B_VARIN,,LDpressureLe_1,9,4,11,6,);
B(B_F,@SUB,,11,3,16,7,);
B(B_VARIN,,LDpressureLe_2,9,5,11,7,);
B(B_F,abs,,18,3,23,6,);
B(B_VARIN,,20.0,22,6,24,8,);
B(B_F,@GT-2,,25,3,30,7,);
B(B_COMMENT,,5%,26,7,29,8,);
B(B_F,sel,,39,8,44,13,);
B(B_VARIN,,LDpressureLe_1,37,10,39,12,);
B(B_VARIN,,0.0,37,11,39,13,);
B(B_FB,MsgRealReal,Error10,47,2,56,9,);
B(B_FB,TON,TON2,32,3,37,7,);
B(B_VARIN,,196,45,3,47,5,);
B(B_VARIN,,MSG_ERROR,45,5,47,7,);
B(B_VAROUT,,sys_press_left,44,9,46,11,);
B(B_VAROUT,,LX10,38,6,40,8,);
B(B_VARIN,,T#1s,29,8,31,10,);
L(16,5,18,5);
L(23,5,25,5);
L(24,6,25,6);
L(24,6,24,7);
L(38,10,39,10);
L(38,5,38,10);
L(31,6,31,9);
L(31,6,32,6);
L(30,5,32,5);
L(37,5,47,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 15 ;
        NETWORK_BODY
B(B_COMMENT,,check pressure difference right - left,1,1,27,2,);
B(B_VARIN,,LDpressureRi_1,9,4,11,6,);
B(B_F,@SUB,,11,3,16,7,);
B(B_VARIN,,LDpressureLe_1,9,5,11,7,);
B(B_F,abs,,18,3,23,6,);
B(B_VARIN,,15.0,22,6,24,8,);
B(B_F,@GT-2,,25,3,30,7,);
B(B_COMMENT,,<4%,26,7,29,8,);
B(B_VAROUT,,press_diff_high,30,4,32,6,);
B(B_VAROUT,,sys_press_diff,23,10,25,12,);
B(B_F,sel,,18,9,23,14,);
B(B_VARIN,,0.0,16,12,18,14,);
B(B_VARIN,,error_press_indi,14,10,16,12,);
L(16,5,18,5);
L(23,5,25,5);
L(24,6,25,6);
L(24,6,24,7);
L(17,5,17,12);
L(17,12,18,12);
L(16,11,18,11);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 16 ;
        NETWORK_BODY
B(B_COMMENT,,error pressure indicator,1,1,27,2,);
B(B_VAROUT,,error_press_indi,16,4,18,6,);
B(B_VARIN,,LX1,9,4,11,6,);
B(B_VARIN,,LX2,9,5,11,7,);
B(B_VARIN,,LX3,9,6,11,8,);
B(B_VARIN,,LX4,9,7,11,9,);
B(B_VARIN,,LX5,9,8,11,10,);
B(B_VARIN,,LX6,9,9,11,11,);
B(B_VARIN,,LX7,9,10,11,12,);
B(B_VARIN,,LX8,9,11,11,13,);
B(B_VARIN,,LX9,9,12,11,14,);
B(B_VARIN,,LX10,9,13,11,15,);
B(B_F,@OR-10,,11,3,16,15,);
        END_NETWORK_BODY
    END_NET_WORK
END_BODY
END_FUNCTION_BLOCK

FUNCTION_BLOCK SPanalogOutV010
	VAR_INPUT 
		iwOutput: UINT:=0;
		iwFeedback: UINT:=0;
		idAdrOfFb: UDINT:=0;
	END_VAR
	VAR_OUTPUT
		qxOutputOk: BOOL:=FALSE;
		qxOutputErr: BOOL:=FALSE;
	END_VAR
	VAR_EXTERNAL CONSTANT
		MSG_WARNING: UINT:=0;
			(* message priority: "warning" *)
		MSG_ERROR: UINT:=0;
			(* message priority: "error" *)
		MSG_APP: UDINT:=0;
			(* message group "applicat" *)
		MSG_APP_SAFETY: UDINT:=0;
			(* message subgroup "safety" for group "applicat" *)
	END_VAR
	VAR 
		SR1: SR;
		SR2: SR;
		TON1: TON;
		TON2: TON;
		Feedback1: OA16_Feedback;
		Message1: MsgPut;
		Message2: MsgPut;
		Message3: MsgPut;
		Message4: MsgPut;
	END_VAR
'FBD'
BODY
    WORKSPACE
        NETWORK_LIST_TYPE := NWTYPEFBD ;
        ACTIVE_NETWORK := 0 ;
    END_WORKSPACE
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 44 ;
        NETWORK_BODY
B(B_FB,OA16_Feedback,Feedback1,15,8,36,16,);
B(B_VARIN,,iwFeedback,13,9,15,11,);
B(B_VARIN,,iwOutput,29,17,31,19,);
B(B_F,@GT-2,,31,16,36,20,);
B(B_VARIN,,0,29,18,31,20,);
B(B_COMMENT,,Current Error setzt keinen OutPut Error~ da hierbeiø^der Ausgang vom Modul selber abgeschalten wird.,15,26,35,28,);
B(B_F,@AND-2,,40,15,45,19,0N);
B(B_VARIN,,FALSE,53,19,55,21,);
B(B_FB,SR,SR1,55,15,60,19,);
B(B_FB,SR,SR2,55,35,60,39,);
B(B_VARIN,,FALSE,53,37,55,39,);
B(B_F,@AND-3,,41,10,46,15,0NN);
B(B_VARIN,,25,70,15,72,17,);
B(B_VARIN,,26,70,25,72,27,);
B(B_VARIN,,27,70,35,72,37,);
B(B_VARIN,,idAdrOfFb,34,40,36,42,);
B(B_VARIN,,MSG_WARNING,70,39,72,41,);
B(B_VARIN,,MSG_ERROR,70,29,72,31,);
B(B_VAROUT,,qxOutputErr,65,32,67,34,);
B(B_F,@OR-2,,60,31,65,35,);
B(B_VARIN,,MSG_WARNING,70,19,72,21,);
B(B_FB,MsgPut,Message2,74,14,81,23,);
B(B_VARIN,,MSG_APP,70,17,72,19,);
B(B_VARIN,,MSG_APP_SAFETY,70,18,72,20,);
B(B_FB,MsgPut,Message3,74,24,81,33,);
B(B_VARIN,,MSG_APP,70,27,72,29,);
B(B_VARIN,,MSG_APP_SAFETY,70,28,72,30,);
B(B_FB,MsgPut,Message4,74,34,81,43,);
B(B_VARIN,,MSG_APP,70,37,72,39,);
B(B_VARIN,,MSG_APP_SAFETY,70,38,72,40,);
B(B_VARIN,,24,70,5,72,7,);
B(B_VARIN,,MSG_APP,70,7,72,9,);
B(B_VARIN,,MSG_WARNING,70,9,72,11,);
B(B_VARIN,,MSG_APP_SAFETY,70,8,72,10,);
B(B_FB,MsgPut,Message1,74,4,81,13,);
B(B_VARIN,,T#0.15s,41,7,43,9,);
B(B_COMMENT,,feedback check for OA16,1,1,32,2,);
B(B_COMMENT,,Laut Sicherheitskonzept wird bei diesem Fehler keineø^Aktion gesetzt (also auch keine Message),37,1,57,3,);
B(B_FB,TON,TON1,43,5,48,9,);
B(B_F,@AND-2,,55,5,60,9,);
B(B_VARIN,,FALSE,53,7,55,9,);
B(B_FB,TON,TON2,49,15,54,19,);
B(B_VARIN,,T#0.15s,47,17,49,19,);
B(B_VAROUT,,qxOutputOk,46,11,48,13,);
B(B_COMMENT,,Die Fehler CurrentBelowBand und ø^CurrentAboveBand müssen verzögert werden~ø^da sich der Strom je nach Lastø^zeitlich verzögert einstellt,40,21,58,25,);
L(36,12,40,12);
L(39,27,74,27);
L(73,11,73,41);
L(36,14,41,14);
L(36,11,41,11);
L(40,12,40,17);
L(39,13,39,27);
L(38,14,38,37);
L(36,18,40,18);
L(55,18,55,20);
L(60,17,74,17);
L(60,34,60,37);
L(38,37,55,37);
L(60,37,74,37);
L(41,11,41,12);
L(36,13,41,13);
L(72,36,74,36);
L(72,26,74,26);
L(72,16,74,16);
L(36,41,74,41);
L(72,40,74,40);
L(72,30,74,30);
L(73,31,74,31);
L(60,17,60,33);
L(73,21,74,21);
L(72,20,74,20);
L(72,19,74,19);
L(72,18,74,18);
L(72,29,74,29);
L(72,28,74,28);
L(72,39,74,39);
L(72,38,74,38);
L(72,6,74,6);
L(72,8,74,8);
L(72,10,74,10);
L(72,9,74,9);
L(73,11,74,11);
L(36,7,36,10);
L(36,7,43,7);
L(60,7,74,7);
L(48,7,55,7);
L(54,17,55,17);
L(45,17,49,17);
        END_NETWORK_BODY
    END_NET_WORK
END_BODY
END_FUNCTION_BLOCK

FUNCTION_BLOCK SPdigitalOutV010
	VAR_INPUT 
		ixOutput: BOOL:=FALSE;
		ixFeedback: BOOL:=FALSE;
		idAdrOfFb: UDINT:=0;
	END_VAR
	VAR_OUTPUT
		qxOutputOk: BOOL:=FALSE;
		qxOutputErr: BOOL:=FALSE;
	END_VAR
	VAR_EXTERNAL CONSTANT
		MSG_WARNING: UINT:=0;
			(* message priority: "warning" *)
		MSG_APP: UDINT:=0;
			(* message group "applicat" *)
		MSG_APP_SAFETY: UDINT:=0;
			(* message subgroup "safety" for group "applicat" *)
	END_VAR
	VAR 
		SR1: SR;
		TON1: TON;
		TON2: TON;
		TON3: TON;
		Message1: MsgPut;
		Message2: MsgPut;
	END_VAR
'FBD'
BODY
    WORKSPACE
        NETWORK_LIST_TYPE := NWTYPEFBD ;
        ACTIVE_NETWORK := 0 ;
    END_WORKSPACE
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_VARIN,,ixOutput,11,4,13,6,);
B(B_VARIN,,ixFeedback,11,5,13,7,);
B(B_F,@XOR-2,,13,3,18,7,);
B(B_COMMENT,,feedback check for DA32,1,1,32,2,);
B(B_COMMENT,,Der Vergleich von Ansteuerung undø^Rückmessung muß verzögert werden~ø^da sich die Rückmessung nicht sofort anliegt.,45,4,62,7,);
B(B_FB,TON,TON1,22,3,27,7,00N);
B(B_VARIN,,T#0.1s,20,5,22,7,);
B(B_VAROUT,,qxOutputOk,27,4,29,6,);
L(18,5,22,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_VARIN,,ixOutput,11,3,13,5,);
B(B_VARIN,,ixFeedback,11,4,13,6,);
B(B_F,@AND-2,,13,2,18,6,N);
B(B_FB,TON,TON2,22,2,27,6,);
B(B_VARIN,,T#0.1s,20,4,22,6,);
B(B_VARIN,,28,42,2,44,4,);
B(B_FB,SR,SR1,28,2,33,6,);
B(B_VAROUT,,qxOutputErr,33,1,35,3,);
B(B_VARIN,,FALSE,26,6,28,8,);
B(B_FB,MsgPut,Message1,44,1,51,10,);
B(B_VARIN,,MSG_WARNING,42,6,44,8,);
B(B_VARIN,,idAdrOfFb,42,7,44,9,);
B(B_VARIN,,MSG_APP,42,4,44,6,);
B(B_VARIN,,MSG_APP_SAFETY,42,5,44,7,);
L(18,4,22,4);
L(33,4,44,4);
L(33,2,33,4);
L(28,5,28,7);
L(27,4,28,4);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_VARIN,,ixOutput,11,3,13,5,);
B(B_VARIN,,ixFeedback,11,4,13,6,);
B(B_F,@AND-2,,13,2,18,6,0N);
B(B_FB,TON,TON3,22,2,27,6,);
B(B_VARIN,,T#0.1s,20,4,22,6,);
B(B_VARIN,,29,41,2,43,4,);
B(B_FB,MsgPut,Message2,43,1,50,10,);
B(B_VARIN,,MSG_WARNING,41,6,43,8,);
B(B_VARIN,,idAdrOfFb,41,7,43,9,);
B(B_VARIN,,MSG_APP,41,4,43,6,);
B(B_VARIN,,MSG_APP_SAFETY,41,5,43,7,);
L(18,4,22,4);
L(27,4,43,4);
        END_NETWORK_BODY
    END_NET_WORK
END_BODY
END_FUNCTION_BLOCK

FUNCTION_BLOCK SPdigPowOutV010
	VAR_INPUT 
		ibOutput: BYTE:=0;
		ibFeedback: BYTE:=0;
		idAdrOfFb: UDINT:=0;
	END_VAR
	VAR_OUTPUT
		qxOutputOk: BOOL:=FALSE;
		qxOutputError: BOOL:=FALSE;
	END_VAR
	VAR_EXTERNAL CONSTANT
		MSG_WARNING: UINT:=0;
			(* message priority: "warning" *)
		MSG_ERROR: UINT:=0;
			(* message priority: "error" *)
		MSG_APP: UDINT:=0;
			(* message group "applicat" *)
		MSG_APP_SAFETY: UDINT:=0;
			(* message subgroup "safety" for group "applicat" *)
	END_VAR
	VAR 
		Feedback1: OD04_Feedback;
		Message1: MsgPut;
		Message2: MsgPut;
		Message3: MsgPut;
		Message4: MsgPut;
		Message5: MsgPut;
		SR1: SR;
		SR2: SR;
		TON1: TON;
		TON2: TON;
		TON3: TON;
		TON4: TON;
	END_VAR
'FBD'
BODY
    WORKSPACE
        NETWORK_LIST_TYPE := NWTYPEFBD ;
        ACTIVE_NETWORK := 0 ;
    END_WORKSPACE
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 63 ;
        NETWORK_BODY
B(B_F,@AND-2,,32,32,37,36,0N);
B(B_F,@AND-3,,32,42,37,47,0N);
B(B_VARIN,,FALSE,36,24,38,26,);
B(B_FB,SR,SR1,38,22,43,26,);
B(B_F,@GT-2,,24,33,29,37,);
B(B_VARIN,,ibOutput,22,34,24,36,);
B(B_VARIN,,0,22,35,24,37,);
B(B_F,@AND-3,,32,52,37,57,NN);
B(B_F,@XOR-2,,33,15,38,19,);
B(B_VARIN,,ibFeedback,11,12,13,14,);
B(B_FB,OD04_Feedback,Feedback1,13,11,29,17,);
B(B_VARIN,,26,62,12,64,14,);
B(B_VARIN,,27,62,22,64,24,);
B(B_VARIN,,28,62,32,64,34,);
B(B_VARIN,,29,62,42,64,44,);
B(B_VARIN,,30,62,52,64,54,);
B(B_VARIN,,idAdrOfFb,11,57,13,59,);
B(B_FB,MsgPut,Message1,66,11,73,20,);
B(B_VARIN,,MSG_APP_SAFETY,62,15,64,17,);
B(B_VARIN,,MSG_APP,62,14,64,16,);
B(B_FB,MsgPut,Message2,66,21,73,30,);
B(B_VARIN,,MSG_APP_SAFETY,62,25,64,27,);
B(B_VARIN,,MSG_APP,62,24,64,26,);
B(B_VARIN,,MSG_WARNING,62,26,64,28,);
B(B_FB,MsgPut,Message3,66,31,73,40,);
B(B_VARIN,,MSG_APP_SAFETY,62,35,64,37,);
B(B_VARIN,,MSG_APP,62,34,64,36,);
B(B_VARIN,,MSG_WARNING,62,36,64,38,);
B(B_FB,MsgPut,Message4,66,41,73,50,);
B(B_VARIN,,MSG_APP_SAFETY,62,45,64,47,);
B(B_VARIN,,MSG_APP,62,44,64,46,);
B(B_FB,MsgPut,Message5,66,51,73,60,);
B(B_VARIN,,MSG_APP_SAFETY,62,55,64,57,);
B(B_VARIN,,MSG_APP,62,54,64,56,);
B(B_VARIN,,MSG_WARNING,62,56,64,58,);
B(B_VARIN,,MSG_ERROR,62,16,64,18,);
B(B_VARIN,,MSG_ERROR,62,46,64,48,);
B(B_COMMENT,,feedback check for OD04,1,1,32,2,);
B(B_FB,SR,SR2,47,32,52,36,);
B(B_F,@OR-2,,52,27,57,31,);
B(B_VAROUT,,qxOutputError,57,28,59,30,);
B(B_COMMENT,,Der Vergleich von Ansteuerung undø^Rückmessung muß verzögert werden~ø^da die Rückmessung nicht sofort anliegt,7,43,22,46,);
B(B_FB,TON,TON1,42,7,47,11,);
B(B_VARIN,,T#0.1s,40,9,42,11,);
B(B_FB,TON,TON2,41,32,46,36,);
B(B_VARIN,,T#0.1s,39,34,41,36,);
B(B_FB,TON,TON3,41,42,46,46,);
B(B_VARIN,,T#0.1s,39,44,41,46,);
B(B_FB,TON,TON4,41,52,46,56,);
B(B_VARIN,,T#0.1s,39,54,41,56,);
B(B_VARIN,,FALSE,45,36,47,38,);
B(B_F,@AND-3,,47,3,52,8,NNN);
B(B_VAROUT,,qxOutputOk,52,4,54,6,);
L(30,34,32,34);
L(29,35,32,35);
L(29,46,32,46);
L(30,45,32,45);
L(31,44,32,44);
L(43,24,66,24);
L(32,24,38,24);
L(29,56,32,56);
L(30,55,32,55);
L(31,54,32,54);
L(31,13,31,54);
L(65,18,65,58);
L(29,13,31,13);
L(29,15,32,15);
L(29,14,66,14);
L(29,16,30,16);
L(32,5,32,24);
L(29,18,29,56);
L(29,18,33,18);
L(30,17,33,17);
L(37,6,37,14);
L(30,16,30,55);
L(64,13,66,13);
L(64,53,66,53);
L(64,43,66,43);
L(64,33,66,33);
L(64,23,66,23);
L(65,48,66,48);
L(65,38,66,38);
L(13,58,66,58);
L(65,28,66,28);
L(65,18,66,18);
L(64,16,66,16);
L(64,17,66,17);
L(64,15,66,15);
L(64,26,66,26);
L(64,27,66,27);
L(64,25,66,25);
L(64,36,66,36);
L(64,37,66,37);
L(64,35,66,35);
L(64,46,66,46);
L(64,47,66,47);
L(64,45,66,45);
L(64,56,66,56);
L(64,57,66,57);
L(64,55,66,55);
L(38,9,38,17);
L(47,35,47,37);
L(52,34,66,34);
L(52,30,52,34);
L(52,24,52,29);
L(38,9,42,9);
L(37,6,47,6);
L(32,5,47,5);
L(37,34,41,34);
L(37,44,41,44);
L(37,54,41,54);
L(47,7,47,9);
L(46,34,47,34);
L(46,44,66,44);
L(46,54,66,54);
        END_NETWORK_BODY
    END_NET_WORK
END_BODY
END_FUNCTION_BLOCK

PROGRAM ADaddHydrV100
(*name of author: Manfred Schapler
version: 1.0
date: 10/97
modification:*)
(*name of author: Manfred Schapler
version: 1.0
date: 04/97
modification:*)
	VAR_EXTERNAL 
		ITXaddHydr: BOOL:=FALSE;
			(*preselection additional hydraulic (oscillator) *)
		IXentrySwiClosed: BOOL:=FALSE;
			(*entry switch closed*)
		IWadHyLudv1Press: UINT:=0;
			(*additional hydraulics ludv pump 1 pressure*)
		IWadHyLudv2Press: UINT:=0;
			(*additional hydraulics ludv pump 2 pressure*)
		IWkeybX23Poti1: UINT:=0;
			(*keyboard X23 poti 1*)
		IWkeybX23Poti2: UINT:=0;
			(*keyboard X23 poti 2*)
		QTXaddHydr: BOOL:=FALSE;
			(*enable additional hydraulic (oscillator) *)
		QXaddHydrSwiOver: BOOL:=FALSE;
			(*additional hydraulics switch over*)
		QTXaddVolCtrl: BOOL:=FALSE;
			(*enable additional hydraulic volume control *)
		QTXaddPowCtrl: BOOL:=FALSE;
			(*enable additional hydraulic power control *)
		QWludv1: UINT:=0;
			(*LUDV pump 1*)
		QWludv2: UINT:=0;
			(*LUDV pump 2*)
		MXstopAllFunctio: BOOL:=FALSE;
			(*stop all excavator functions*)
		MXassemblyOperat: BOOL:=FALSE;
			(*assembly operation*)
		MXad1Working: BOOL:=FALSE;
			(*additional device 1 working*)
		MXludv1ExtAnaSig: BOOL:=FALSE;
			(*LUDV pump 1 other, external analog signal*)
		MXludv2ExtAnaSig: BOOL:=FALSE;
			(*LUDV pump 2 other, external analog signal*)
		MXhg1AnalSigPos: BOOL:=FALSE;
			(*hg1 analog signal positiv*)
		MXhg2AnalSigPos: BOOL:=FALSE;
			(*hg2 analog signal positiv*)
		MXaddHydrActive: BOOL:=FALSE;
			(*addittional hydraulics active*)
		MXadOilHeatAct: BOOL:=FALSE;
			(*additional device oil heating active*)
		MXexitAddHydr: BOOL:=FALSE;
			(*additional hydraulic exit programm*)
		MXadHydAdToLudv1: BOOL:=FALSE;
			(*added sig. to add.hyd.sig. LUDV pu1*)
		MXadHydAdToLudv2: BOOL:=FALSE;
			(*added sig. to add.hyd.sig. LUDV pu2*)
		MX600barPreTrans: BOOL:=FALSE;
			(*600bar pressure transmitter used*)
		MXengStarterActi: BOOL:=FALSE;
			(*engine starter activated*)
		MDludv1ExtAnaSig: REAL:=0.0;
			(*LUDV pump 1 external analog signal in %*)
		MDludv2ExtAnaSig: REAL:=0.0;
			(*LUDV pump 2 external analog signal in %*)
		MDadHyLudv1Press: REAL:=0.0;
			(*additional hydraulics ludv pump 1 pressure*)
		MDadHyLudv2Press: REAL:=0.0;
			(*additional hydraulics ludv pump 2 pressure*)
		MDadHydAdToLudv1: REAL:=0.0;
			(*added signal to add. hydr. signal for LUDV pu1*)
		MDadHydAdToLudv2: REAL:=0.0;
			(*added signal to add. hydr. signal for LUDV pu2*)
	END_VAR
	VAR_EXTERNAL CONSTANT
		MSG_ERROR: UINT:=0;
	END_VAR
	VAR_EXTERNAL RETAIN
		MXaddHydrPresel: BOOL:=FALSE;
			(*fast speed operation with one winch and two pumps*)
	END_VAR
	VAR_EXTERNAL CONSTANT RETAIN
		CXaddHydraulics: BOOL:=FALSE;
			(*additional hydraulics*)
		CDludv1MaxAnalSi: REAL:=0.0;
			(*ludv pump 1 maximum analog signal in %*)
		CDludv2MaxAnalSi: REAL:=0.0;
			(*ludv pump 2 maximum analog signal in %*)
		CDaddHydMaxPower: REAL:=0.0;
			(*additional hydraulic maximum power in % to the theoretical  maximum power*)
		CDaddHydrPotiLim: REAL:=0.0;
			(*additional hydraulic poti x23 limitation*)
	END_VAR
	VAR 
		LXinitOk: BOOL:=FALSE;
			(*init completed*)
		LXstart: BOOL:=FALSE;
			(*first scan completed*)
		LXaddHydrWorking: BOOL:=FALSE;
			(*additional hydraulics working*)
		LXludvSetToZero: BOOL:=FALSE;
			(*set ludv signal to zero *)
		LXludv1InZeroPos: BOOL:=FALSE;
		LXludv2InZeroPos: BOOL:=FALSE;
		LDx23Poti1: REAL:=0.0;
			(*analog signal x23 poti 1*)
		LDx23Poti2: REAL:=0.0;
			(*analog signal x23 poti 1*)
		LDpu1AnalSigPoti: REAL:=0.0;
			(*ludv pump 1 analog signal after poti limitation*)
		LDpu2AnalSigPoti: REAL:=0.0;
			(*ludv pump 2 analog signal after poti limitation*)
		LDredFactSumo: REAL:=0.0;
			(*reduction factor from the sum power regulaion for the analog signals*)
		LDpu1AnalSigSumo: REAL:=0.0;
			(*ludv pump 1 analog signal after sum power reg.*)
		LDpu2AnalSigSumo: REAL:=0.0;
			(*ludv pump 2 analog signal after sum power reg.*)
		LDscalePress: REAL:=0.0;
		RS2: RS;
		RS3: RS;
		RS4: RS;
		RS5: RS;
		SR1: SR;
		SR2: SR;
		R_TRIG1: R_TRIG;
		R_TRIG2: R_TRIG;
		F_TRIG1: F_TRIG;
		TOF1: TOF;
		Sumo1: ADaddHydSumoV010;
		Integrator1: Integrator;
		Integrator2: Integrator;
		ScaleAI1: ScaleAI;
		ScaleAI2: ScaleAI;
		Error1: MsgRealReal;
		Error2: MsgRealReal;
		Error3: MsgRealReal;
		Error4: MsgRealReal;
		CorrValue_Bool1: CorrValue_Bool;
		CorrValue_Real1: CorrValue_Real;
		CorrValue_Real2: CorrValue_Real;
		CorrValue_Real3: CorrValue_Real;
		CorrValue_Real4: CorrValue_Real;
	END_VAR
'FBD'
BODY
    WORKSPACE
        NETWORK_LIST_TYPE := NWTYPEFBD ;
        ACTIVE_NETWORK := 0 ;
    END_WORKSPACE
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_COMMENT,,init first time,1,1,27,2,);
B(B_VARIN,,LXinitOk,9,4,11,6,);
B(B_F,not,,11,3,16,6,);
B(B_JUMP,,init,16,4,18,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,protect correction value change while program activ,1,1,27,2,);
B(B_F,@OR-2,,11,3,16,7,NN);
B(B_VARIN,,LXstart,9,5,11,7,);
B(B_VARIN,,IXentrySwiClosed,9,4,11,6,);
B(B_F,sel,,18,5,23,10,);
B(B_VARIN,,CXaddHydraulics,16,8,18,10,);
B(B_VAROUT,,MXaddHydrPresel,23,6,25,8,);
B(B_VARIN,,MXaddHydrPresel,16,7,18,9,);
L(16,5,17,5);
L(17,5,17,7);
L(17,7,18,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,TRUE,9,1,11,3,);
B(B_VAROUT,,LXstart,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_COMMENT,,exit program when additional hydraulic not enabled,1,1,27,2,);
B(B_F,@AND-2,,18,5,23,9,0N);
B(B_RETURN,,,23,6,25,8,);
B(B_VARIN,,MXaddHydrActive,16,7,18,9,);
B(B_F,@OR-2,,11,3,16,7,N);
B(B_VARIN,,MXaddHydrPresel,9,4,11,6,);
B(B_VARIN,,MXexitAddHydr,9,5,11,7,);
L(17,7,18,7);
L(16,5,17,5);
L(17,5,17,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 16 ;
        NETWORK_BODY
B(B_COMMENT,,select additional hydraulics,1,1,27,2,);
B(B_F,@AND-2,,20,7,25,11,);
B(B_FB,RS,RS2,37,4,42,8,);
B(B_FB,R_TRIG,R_TRIG1,11,4,18,7,);
B(B_VARIN,,ITXaddHydr,9,5,11,7,);
B(B_VARIN,,MXaddHydrActive,18,9,20,11,);
B(B_VAROUT,,MXaddHydrActive,43,5,45,7,);
B(B_VARIN,,MXstopAllFunctio,24,11,26,13,);
B(B_VARIN,,MXassemblyOperat,25,12,27,14,);
B(B_VARIN,,MXadOilHeatAct,26,13,28,15,);
B(B_VAROUT,,MXad1Working,43,6,45,8,);
B(B_VAROUT,,QTXaddHydr,43,7,45,9,);
B(B_F,@OR-5,,30,7,35,14,);
B(B_VARIN,,MXexitAddHydr,27,14,29,16,);
L(36,7,36,9);
L(36,7,37,7);
L(18,6,37,6);
L(19,9,20,9);
L(19,6,19,9);
L(26,10,26,12);
L(42,6,43,6);
L(27,11,27,13);
L(28,12,28,14);
L(43,6,43,7);
L(43,7,43,8);
L(35,9,36,9);
L(25,9,30,9);
L(26,10,30,10);
L(27,11,30,11);
L(28,12,30,12);
L(29,13,30,13);
L(29,13,29,15);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_F,sel,,18,3,23,8,);
B(B_VARIN,,400.0,16,5,18,7,);
B(B_F,to_real,,11,6,18,9,);
B(B_VARIN,,600.0,9,7,11,9,);
B(B_VAROUT,,LDscalePress,23,4,25,6,);
B(B_VARIN,,MX600barPreTrans,16,4,18,6,);
B(B_COMMENT,,select scale of pressure transmitter,1,1,27,2,);
L(18,7,18,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 23 ;
        NETWORK_BODY
B(B_COMMENT,,scale system pressure,1,1,27,2,);
B(B_VARIN,,IWadHyLudv1Press,9,5,11,7,);
B(B_FB,ScaleAI,ScaleAI1,11,4,19,9,);
B(B_VARIN,,LDscalePress,9,6,11,8,);
B(B_VAROUT,,MDadHyLudv1Press,19,5,21,7,);
B(B_FB,MsgRealReal,Error1,22,8,31,15,);
B(B_VARIN,,MSG_ERROR,17,11,19,13,);
B(B_VARIN,,164,17,9,19,11,);
B(B_FB,SR,SR1,26,16,31,20,0N);
B(B_F,@AND-2,,21,16,26,20,0N);
B(B_VARIN,,MXengStarterActi,17,18,19,20,);
B(B_FB,MsgRealReal,Error2,38,15,47,22,);
B(B_VARIN,,163,36,16,38,18,);
B(B_VARIN,,MSG_ERROR,36,18,38,20,);
L(19,7,21,7);
L(19,8,20,8);
L(21,7,21,11);
L(21,11,22,11);
L(19,10,22,10);
L(19,12,22,12);
L(20,18,21,18);
L(19,19,21,19);
L(20,20,26,20);
L(26,19,26,20);
L(31,18,38,18);
L(20,8,20,20);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 21 ;
        NETWORK_BODY
B(B_VARIN,,IWadHyLudv2Press,9,3,11,5,);
B(B_FB,ScaleAI,ScaleAI2,11,2,19,7,);
B(B_VARIN,,LDscalePress,9,4,11,6,);
B(B_VAROUT,,MDadHyLudv2Press,19,3,21,5,);
B(B_FB,MsgRealReal,Error3,22,6,31,13,);
B(B_VARIN,,MSG_ERROR,17,9,19,11,);
B(B_VARIN,,166,17,7,19,9,);
B(B_FB,SR,SR2,26,14,31,18,0N);
B(B_F,@AND-2,,21,14,26,18,0N);
B(B_VARIN,,MXengStarterActi,17,16,19,18,);
B(B_FB,MsgRealReal,Error4,38,13,47,20,);
B(B_VARIN,,165,36,14,38,16,);
B(B_VARIN,,MSG_ERROR,36,16,38,18,);
L(19,5,21,5);
L(19,6,20,6);
L(21,5,21,9);
L(21,9,22,9);
L(19,8,22,8);
L(19,10,22,10);
L(20,16,21,16);
L(19,17,21,17);
L(20,18,26,18);
L(26,17,26,18);
L(31,16,38,16);
L(20,6,20,18);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,LXaddHydrWorking,9,1,11,3,);
B(B_VAROUT,,QTXaddVolCtrl,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_VAROUT,,LXludv1InZeroPos,18,4,20,6,);
B(B_VAROUT,,LXludv2InZeroPos,18,8,20,10,);
B(B_VARIN,,QWludv2,9,8,11,10,);
B(B_VARIN,,0,9,5,11,7,);
B(B_VARIN,,QWludv1,11,4,13,6,);
B(B_COMMENT,,pump zero ludv pump1 +2 ,1,1,27,2,);
B(B_F,@EQ-2,,13,3,18,7,);
B(B_F,@EQ-2,,13,7,18,11,);
L(12,6,12,10);
L(11,6,13,6);
L(11,9,13,9);
L(12,10,13,10);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_VARIN,,MXaddHydrActive,9,4,11,6,);
B(B_COMMENT,,jump to exit when additional hydraulic is not active,1,1,27,2,);
B(B_VARIN,,LXaddHydrWorking,9,5,11,7,);
B(B_F,@AND-2,,11,3,16,7,NN);
B(B_JUMP,,exit,16,4,18,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 16 ;
        NETWORK_BODY
B(B_FB,R_TRIG,R_TRIG2,12,4,19,7,);
B(B_FB,F_TRIG,F_TRIG1,12,8,19,11,);
B(B_VARIN,,MXaddHydrActive,9,5,11,7,);
B(B_F,@OR-2,,21,4,26,8,);
B(B_FB,RS,RS3,28,4,33,8,);
B(B_COMMENT,,switch over to oscillator and set ludv pump to zero,1,1,27,2,);
B(B_VAROUT,,LXludvSetToZero,40,5,42,7,);
B(B_FB,TOF,TOF1,35,4,40,8,);
B(B_VARIN,,T#1.5s,32,8,34,10,);
B(B_VARIN,,LXludv2InZeroPos,19,13,21,15,);
B(B_VARIN,,LXludv1InZeroPos,19,12,21,14,);
B(B_F,@AND-2,,21,11,26,15,);
L(11,6,12,6);
L(11,6,11,10);
L(11,10,12,10);
L(19,10,20,10);
L(20,7,20,10);
L(20,7,21,7);
L(19,6,21,6);
L(26,6,28,6);
L(27,7,27,13);
L(27,7,28,7);
L(34,7,34,9);
L(34,7,35,7);
L(33,6,35,6);
L(26,13,27,13);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_F,@AND-3,,14,1,19,6,);
B(B_F,@AND-3,,14,6,19,11,N);
B(B_VARIN,,MXaddHydrActive,9,2,11,4,);
B(B_VARIN,,LXludv2InZeroPos,9,4,11,6,);
B(B_VARIN,,LXludv1InZeroPos,9,3,11,5,);
B(B_FB,RS,RS4,21,1,26,5,);
B(B_VAROUT,,QXaddHydrSwiOver,26,2,28,4,);
L(11,5,11,10);
L(11,10,14,10);
L(12,4,12,9);
L(12,9,14,9);
L(13,3,13,8);
L(13,8,14,8);
L(11,5,14,5);
L(11,4,14,4);
L(11,3,14,3);
L(19,3,21,3);
L(19,8,20,8);
L(20,4,20,8);
L(20,4,21,4);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_COMMENT,,scale analog signals from x23 potis,1,1,27,2,);
B(B_VARIN,,IWkeybX23Poti1,9,4,11,6,);
B(B_F,uint_to_real,,11,3,22,6,);
B(B_F,@SUB,,24,7,29,11,);
B(B_VARIN,,CDaddHydrPotiLim,22,9,24,11,);
B(B_VARIN,,100.0,22,8,24,10,);
B(B_F,@DIV,,24,3,29,7,);
B(B_F,@MUL-2,,31,3,36,7,);
B(B_VAROUT,,LDx23Poti1,36,4,38,6,);
B(B_VARIN,,1000.0,21,6,23,8,);
L(22,5,24,5);
L(30,6,31,6);
L(30,6,30,9);
L(29,9,30,9);
L(29,5,31,5);
L(23,6,23,7);
L(23,6,24,6);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_F,@DIV,,24,1,29,5,);
B(B_VAROUT,,LDx23Poti2,29,2,31,4,);
B(B_VARIN,,IWkeybX23Poti2,9,2,11,4,);
B(B_VARIN,,10.0,21,4,23,6,);
B(B_F,uint_to_real,,11,1,22,4,);
L(23,4,23,5);
L(23,4,24,4);
L(22,3,24,3);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 14 ;
        NETWORK_BODY
B(B_COMMENT,,analog signal of the ludv pumps by maximum oil amount for the add.ø^hydraulics and limitation by X23 Poti 1,1,1,27,3,);
B(B_F,@DIV,,18,7,23,11,);
B(B_VARIN,,CDludv1MaxAnalSi,23,5,25,7,);
B(B_F,@MUL-2,,25,4,30,8,);
B(B_VAROUT,,LDpu1AnalSigPoti,30,5,32,7,);
B(B_F,@MUL-2,,25,9,30,13,);
B(B_VAROUT,,LDpu2AnalSigPoti,30,10,32,12,);
B(B_F,@ADD-2,,11,5,16,9,);
B(B_VARIN,,100.0,16,9,18,11,);
B(B_VARIN,,CDludv2MaxAnalSi,23,11,25,13,);
B(B_VARIN,,LDx23Poti1,9,6,11,8,);
B(B_VARIN,,CDaddHydrPotiLim,9,7,11,9,);
L(23,9,24,9);
L(24,11,25,11);
L(24,7,24,11);
L(24,7,25,7);
L(16,7,17,7);
L(17,7,17,9);
L(17,9,18,9);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 16 ;
        NETWORK_BODY
B(B_COMMENT,,sum power regulation control,1,1,27,2,);
B(B_VARIN,,LDx23Poti2,16,8,18,10,);
B(B_VARIN,,MDadHyLudv1Press,16,9,18,11,);
B(B_VARIN,,MDadHyLudv2Press,16,10,18,12,);
B(B_VARIN,,LDpu1AnalSigPoti,16,11,18,13,);
B(B_VARIN,,LDpu2AnalSigPoti,16,12,18,14,);
B(B_VARIN,,CDaddHydMaxPower,16,13,18,15,);
B(B_VAROUT,,LDredFactSumo,34,7,36,9,);
B(B_VAROUT,,QTXaddPowCtrl,17,4,19,6,);
B(B_VARIN,,MXhg1AnalSigPos,9,4,11,6,);
B(B_VARIN,,MXhg2AnalSigPos,9,5,11,7,);
B(B_F,@OR-2,,11,3,16,7,);
B(B_FB,ADaddHydSumoV010,Sumo1,18,6,34,15,);
L(17,5,17,8);
L(16,5,17,5);
L(17,8,18,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_F,@MUL-2,,12,1,17,5,);
B(B_F,@MUL-2,,12,5,17,9,);
B(B_VAROUT,,LDpu1AnalSigSumo,17,2,19,4,);
B(B_VAROUT,,LDpu2AnalSigSumo,17,6,19,8,);
B(B_VARIN,,LDredFactSumo,9,4,11,6,);
B(B_VARIN,,LDpu1AnalSigPoti,10,2,12,4,);
B(B_VARIN,,LDpu2AnalSigPoti,10,7,12,9,);
L(11,7,12,7);
L(11,4,11,7);
L(11,4,12,4);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 22 ;
        NETWORK_BODY
B(B_COMMENT,,set outputs ludv pumps,1,1,27,2,);
B(B_F,sel,,20,8,25,13,);
B(B_F,@ADD-2,,18,17,23,21,);
B(B_F,limit,,26,16,32,21,);
B(B_VARIN,,100.0,24,19,26,21,);
B(B_VARIN,,0.0,24,17,26,19,);
B(B_F,sel,,27,7,32,12,);
B(B_VARIN,,100.0,35,9,37,11,);
B(B_VARIN,,100.0,35,10,37,12,);
B(B_VAROUT,,MDludv1ExtAnaSig,46,7,48,9,);
B(B_FB,Integrator,Integrator1,37,6,46,12,);
B(B_VARIN,,TRUE,35,7,37,9,);
B(B_VARIN,,0.0,24,13,26,15,);
B(B_VARIN,,MDadHydAdToLudv1,9,19,11,21,);
B(B_F,abs,,11,18,16,21,);
B(B_VARIN,,LDpu1AnalSigSumo,15,10,17,12,);
B(B_F,@OR-2,,20,3,25,7,N);
B(B_VARIN,,LXludvSetToZero,18,5,20,7,);
B(B_VARIN,,MXaddHydrActive,18,4,20,6,);
B(B_VARIN,,MXadHydAdToLudv1,18,9,20,11,);
L(19,12,20,12);
L(17,20,18,20);
L(17,19,18,19);
L(23,19,26,19);
L(19,12,19,15);
L(33,15,33,18);
L(32,18,33,18);
L(26,9,27,9);
L(32,9,37,9);
L(25,10,27,10);
L(19,15,33,15);
L(26,11,26,14);
L(26,11,27,11);
L(17,11,17,19);
L(16,20,17,20);
L(17,11,20,11);
L(25,5,26,5);
L(26,5,26,9);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 19 ;
        NETWORK_BODY
B(B_F,sel,,20,5,25,10,);
B(B_F,@ADD-2,,18,14,23,18,);
B(B_F,limit,,26,13,32,18,);
B(B_VARIN,,100.0,24,16,26,18,);
B(B_VARIN,,0.0,24,14,26,16,);
B(B_VARIN,,0.0,24,10,26,12,);
B(B_F,sel,,27,4,32,9,);
B(B_FB,Integrator,Integrator2,37,3,46,9,);
B(B_VARIN,,100.0,35,6,37,8,);
B(B_VARIN,,100.0,35,7,37,9,);
B(B_VAROUT,,MDludv2ExtAnaSig,46,4,48,6,);
B(B_VARIN,,TRUE,35,4,37,6,);
B(B_F,@OR-2,,20,1,25,5,N);
B(B_VARIN,,LXludvSetToZero,18,3,20,5,);
B(B_VARIN,,MXaddHydrActive,18,2,20,4,);
B(B_F,abs,,11,15,16,18,);
B(B_VARIN,,MDadHydAdToLudv2,9,16,11,18,);
B(B_VARIN,,LDpu2AnalSigSumo,15,7,17,9,);
B(B_VARIN,,MXadHydAdToLudv2,18,6,20,8,);
L(19,9,20,9);
L(17,17,18,17);
L(17,16,18,16);
L(23,16,26,16);
L(19,12,33,12);
L(33,12,33,15);
L(32,15,33,15);
L(19,9,19,12);
L(26,6,27,6);
L(32,6,37,6);
L(25,7,27,7);
L(26,8,26,11);
L(26,8,27,8);
L(25,3,26,3);
L(26,3,26,6);
L(17,8,17,16);
L(16,17,17,17);
L(17,8,20,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_FB,RS,RS5,27,3,32,7,);
B(B_F,@AND-3,,20,6,25,11,);
B(B_VARIN,,MXaddHydrActive,9,1,11,3,);
B(B_VARIN,,QXaddHydrSwiOver,11,4,13,6,);
B(B_VARIN,,LXludvSetToZero,11,5,13,7,);
B(B_F,@AND-3,,13,2,18,7,NNN);
B(B_VAROUT,,LXaddHydrWorking,33,4,35,6,);
B(B_VAROUT,,MXludv1ExtAnaSig,33,5,35,7,);
B(B_VAROUT,,MXludv2ExtAnaSig,33,6,35,8,);
B(B_VARIN,,LXludv1InZeroPos,18,8,20,10,);
B(B_VARIN,,LXludv2InZeroPos,18,9,20,11,);
L(19,4,19,8);
L(26,6,26,8);
L(26,6,27,6);
L(26,5,27,5);
L(19,8,20,8);
L(25,8,26,8);
L(18,4,19,4);
L(11,2,26,2);
L(26,2,26,5);
L(12,2,12,4);
L(12,4,13,4);
L(32,5,33,5);
L(33,5,33,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL := exit: ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,exit program,1,1,27,2,);
B(B_VARIN,,TRUE,9,3,11,5,);
B(B_RETURN,,,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL := init: ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,init additional device program,1,1,27,2,);
B(B_VARIN,,TRUE,9,3,11,5,);
B(B_VAROUT,,LXinitOk,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value additional hydraulics,1,1,27,2,);
B(B_FB,CorrValue_Bool,CorrValue_Bool1,11,4,23,10,);
B(B_VARIN,,CXaddHydraulics,9,8,11,10,);
B(B_VARIN,,FALSE,9,5,11,7,);
B(B_VARIN,,FALSE,9,6,11,8,);
B(B_VARIN,,TRUE,9,7,11,9,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,maximum analog signal of the ludv pumps in %,1,1,27,2,);
B(B_FB,CorrValue_Real,CorrValue_Real1,11,4,23,10,);
B(B_VARIN,,83.3,9,5,11,7,);
B(B_VARIN,,0.0,9,6,11,8,);
B(B_VARIN,,100.0,9,7,11,9,);
B(B_VARIN,,CDludv1MaxAnalSi,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_FB,CorrValue_Real,CorrValue_Real2,11,2,23,8,);
B(B_VARIN,,83.3,9,3,11,5,);
B(B_VARIN,,0.0,9,4,11,6,);
B(B_VARIN,,100.0,9,5,11,7,);
B(B_VARIN,,CDludv2MaxAnalSi,9,6,11,8,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,maximum power of the additional hydraulic to the theoretical in %,1,1,27,2,);
B(B_FB,CorrValue_Real,CorrValue_Real3,11,4,23,10,);
B(B_VARIN,,66.5,9,5,11,7,);
B(B_VARIN,,0.0,9,6,11,8,);
B(B_VARIN,,100.0,9,7,11,9,);
B(B_VARIN,,CDaddHydMaxPower,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,maximum poti 1 X23 limitation of the analog signal in %,1,1,27,2,);
B(B_FB,CorrValue_Real,CorrValue_Real4,11,4,23,10,);
B(B_VARIN,,70.0,9,5,11,7,);
B(B_VARIN,,0.0,9,6,11,8,);
B(B_VARIN,,100.0,9,7,11,9,);
B(B_VARIN,,CDaddHydrPotiLim,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
END_BODY
END_PROGRAM

PROGRAM ADcustomProgV030
	VAR_EXTERNAL 
		IXentrySwiClosed: BOOL:=FALSE;
			(*entry switch closed*)
		ITXspecLiftOper: BOOL:=FALSE;
			(*preselection special lift operation *)
		IXhgRelFreefall: BOOL:=FALSE;
			(*clutch valve release freefall*)
		ITXaddOilSupply: BOOL:=FALSE;
			(*preselection magnetic unit generator/add. oil supply *)
		QTXaddOilSupply: BOOL:=FALSE;
			(*enable magnetic unit generator/add. oil supply  *)
		QTXspecLiftOp: BOOL:=FALSE;
			(*enable special lift operation *)
		QTXhg1FastSpeed: BOOL:=FALSE;
			(*enable hg1 fast speed operation *)
		QTXhg2FastSpeed: BOOL:=FALSE;
			(*enable hg2 fast speed operation *)
		QXhg1BrakeNormal: BOOL:=FALSE;
			(*HG 1 brake normal speed operation*)
		QXhg2BrakeNormal: BOOL:=FALSE;
			(*HG 2 brake normal speed operation*)
		QXhg1BrakeFastSp: BOOL:=FALSE;
			(*HG 1 brake fast speed operation*)
		QXhg2BrakeFastSp: BOOL:=FALSE;
			(*HG 2 brake fast speed operation*)
		QXaddOilSupply: BOOL:=FALSE;
			(*add. generator/oil supply on *)
		MXhgSpecialLift: BOOL:=FALSE;
			(*hg special sensitive lifting function active*)
		MXhg1SpeedRedAct: BOOL:=FALSE;
			(*hg 1 speed reduction is active*)
		MXhg2SpeedRedAct: BOOL:=FALSE;
			(*hg 1 speed reduction is active*)
		MXspeLifLockTrim: BOOL:=FALSE;
			(*special lifting function lock hg trimot*)
		MXspeLifLockFaSp: BOOL:=FALSE;
			(*special lifting function lock hg fast speed*)
		MXhg1EnabFastSpe: BOOL:=FALSE;
			(*enable fast speed operation hg1*)
		MXhg2EnabFastSpe: BOOL:=FALSE;
			(*enable fast speed operation hg2*)
		MXad2LockFreefal: BOOL:=FALSE;
			(*ad 2 lock freefall*)
		MXpresAddOilSupp: BOOL:=FALSE;
			(*add. hydr. oil supply preselected*)
		MXexitAddOilSupp: BOOL:=FALSE;
			(*exit add. hydr. oil supply*)
		MXenabAddOilSupp: BOOL:=FALSE;
			(*enable additional oil supply *)
		MXstopAllFunctio: BOOL:=FALSE;
			(*stop all excavator functions*)
		MXflashSignal: BOOL:=FALSE;
			(*flash signal [1,66 Hz]*)
		MXminEngineSpeed: BOOL:=FALSE;
			(*minimum engine speed reached*)
		MDhgSpeedReduct: REAL:=0.0;
			(*hg speed reduction factor*)
		MDratedEngSpeed: REAL:=0.0;
			(*rated engine speed in rpm*)
		MDpresenEngSpeed: REAL:=0.0;
			(*present engine speed in rpm*)
	END_VAR
	VAR_EXTERNAL CONSTANT
		MSG_INFO: UINT:=0;
			(* message priority: "info" *)
	END_VAR
	VAR_EXTERNAL CONSTANT RETAIN
		CXhgSpecialLift: BOOL:=FALSE;
			(*ad hg special sensitive lifting function*)
		CXaddHydrOilSupp: BOOL:=FALSE;
			(*additional hydraulic oil supply ludv pump*)
		CDhgSpeLiftMaxSi: REAL:=0.0;
			(*ad hg special lift maximum analog signal*)
	END_VAR
	VAR 
		LXinitOk: BOOL:=FALSE;
		LXstart: BOOL:=FALSE;
		LXstart1: BOOL:=FALSE;
		LXhgSpeLiftPrese: BOOL:=FALSE;
		LXhgSpecialLift: BOOL:=FALSE;
		LXhgSpeLiftWork: BOOL:=FALSE;
		RS1: RS;
		RS2: RS;
		RS3: RS;
		R_TRIG1: R_TRIG;
		R_TRIG2: R_TRIG;
		TON1: TON;
		Message1: MsgUDintUDint;
		CorrValue_Bool1: CorrValue_Bool;
		CorrValue_Real1: CorrValue_Real;
	END_VAR
'FBD'
BODY
    WORKSPACE
        NETWORK_LIST_TYPE := NWTYPEFBD ;
        ACTIVE_NETWORK := 0 ;
    END_WORKSPACE
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_COMMENT,,init first time,1,1,27,2,);
B(B_VARIN,,LXinitOk,9,4,11,6,);
B(B_F,not,,11,3,16,6,);
B(B_JUMP,,init,16,4,18,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,protect correction value change while program activ,1,1,27,2,);
B(B_F,@OR-2,,11,3,16,7,NN);
B(B_VARIN,,LXstart1,9,5,11,7,);
B(B_VARIN,,IXentrySwiClosed,9,4,11,6,);
B(B_F,sel,,18,5,23,10,);
B(B_VAROUT,,MXpresAddOilSupp,23,6,25,8,);
B(B_VARIN,,MXpresAddOilSupp,16,7,18,9,);
B(B_VARIN,,CXaddHydrOilSupp,16,8,18,10,);
L(16,5,17,5);
L(17,5,17,7);
L(17,7,18,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,TRUE,9,1,11,3,);
B(B_VAROUT,,LXstart1,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_COMMENT,,exit program when additional hydraulic not enabled,1,1,27,2,);
B(B_F,@AND-2,,18,5,23,9,0N);
B(B_F,@OR-2,,11,3,16,7,N);
B(B_VARIN,,MXpresAddOilSupp,9,4,11,6,);
B(B_VARIN,,MXexitAddOilSupp,9,5,11,7,);
B(B_VARIN,,MXenabAddOilSupp,16,7,18,9,);
B(B_JUMP,,ad1,23,6,25,8,);
L(17,7,18,7);
L(16,5,17,5);
L(17,5,17,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 16 ;
        NETWORK_BODY
B(B_COMMENT,,enable add. hydr. oil supply ,1,1,29,2,);
B(B_VARIN,,MXpresAddOilSupp,18,4,20,6,);
B(B_F,@AND-2,,20,9,25,13,);
B(B_FB,RS,RS1,30,3,35,7,);
B(B_VAROUT,,MXenabAddOilSupp,35,4,37,6,);
B(B_VARIN,,MXenabAddOilSupp,18,5,20,7,);
B(B_F,@AND-3,,20,3,25,8,0N);
B(B_FB,R_TRIG,R_TRIG1,11,7,18,10,);
B(B_VARIN,,ITXaddOilSupply,9,8,11,10,);
B(B_VARIN,,MXenabAddOilSupp,18,11,20,13,);
B(B_F,@OR-2,,25,9,30,13,);
B(B_VARIN,,MXstopAllFunctio,23,13,25,15,);
L(19,7,20,7);
L(19,7,19,11);
L(18,9,19,9);
L(19,11,20,11);
L(30,6,30,11);
L(25,12,25,14);
L(25,5,30,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 17 ;
        NETWORK_BODY
B(B_F,@GE-2,,11,8,16,12,);
B(B_VARIN,,MDratedEngSpeed,9,10,11,12,);
B(B_VARIN,,MDpresenEngSpeed,9,9,11,11,);
B(B_FB,TON,TON1,11,4,16,8,);
B(B_VARIN,,MXenabAddOilSupp,9,5,11,7,);
B(B_VARIN,,T#0.5s,9,6,11,8,);
B(B_COMMENT,,set output hydr. oil supply or Generator ,1,1,27,2,);
B(B_F,@AND-3,,18,7,23,12,);
B(B_VARIN,,MXminEngineSpeed,15,12,17,14,);
B(B_FB,RS,RS2,25,7,30,11,0N);
B(B_VAROUT,,QXaddOilSupply,30,8,32,10,);
B(B_VARIN,,MXenabAddOilSupp,22,14,24,16,);
L(16,10,18,10);
L(16,6,17,6);
L(17,6,17,9);
L(17,9,18,9);
L(23,9,25,9);
L(24,10,25,10);
L(24,10,24,15);
L(17,11,17,13);
L(17,11,18,11);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_VAROUT,,QTXaddOilSupply,24,4,26,6,);
B(B_F,@OR-2,,19,3,24,7,);
B(B_F,@AND-3,,12,6,17,11,N);
B(B_VARIN,,MXflashSignal,10,9,12,11,);
B(B_VARIN,,QXaddOilSupply,9,4,11,6,);
B(B_VARIN,,MXenabAddOilSupp,10,8,12,10,);
B(B_COMMENT,,flashing signal until rated engine speed not reached,1,1,27,2,);
L(18,6,19,6);
L(18,6,18,8);
L(17,8,18,8);
L(11,5,19,5);
L(11,5,11,8);
L(11,8,12,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL := ad1: ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,protect correction value change while program activ,1,1,27,2,);
B(B_F,@OR-2,,11,3,16,7,NN);
B(B_VARIN,,IXentrySwiClosed,9,4,11,6,);
B(B_F,sel,,18,5,23,10,);
B(B_VAROUT,,LXhgSpeLiftPrese,23,6,25,8,);
B(B_VARIN,,LXhgSpeLiftPrese,16,7,18,9,);
B(B_VARIN,,CXhgSpecialLift,16,8,18,10,);
B(B_VARIN,,LXstart,9,5,11,7,);
L(16,5,17,5);
L(17,5,17,7);
L(17,7,18,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_COMMENT,,exit program in case of no additional device,1,1,27,2,);
B(B_VARIN,,LXhgSpeLiftPrese,9,4,11,6,);
B(B_JUMP,,ad2,16,4,18,6,);
B(B_F,@AND-2,,11,3,16,7,NN);
B(B_VARIN,,LXhgSpeLiftWork,9,5,11,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 20 ;
        NETWORK_BODY
B(B_COMMENT,,Diese Seegangsfolge funktioniert nur mit zwei Kreuzmeisterschalter.ø^Verwendet wird der Klinkentaster des rechten MS (HW1).ø^Bei Doppel T Meisterschalter fehlt dieser Taster.ø^Es muß nichts verriegelt werden~ ein Nichtfunktionieren wird beimø,0,0,0,0,0,0,0,);
B(B_FB,R_TRIG,R_TRIG2,11,10,18,13,);
B(B_VARIN,,ITXspecLiftOper,9,11,11,13,);
B(B_VARIN,,LXhgSpecialLift,16,15,18,17,);
B(B_FB,RS,RS3,23,9,28,13,);
B(B_VAROUT,,QTXspecLiftOp,28,10,30,12,);
B(B_VAROUT,,LXhgSpecialLift,28,11,30,13,);
B(B_VARIN,,QXhg2BrakeNormal,16,6,18,8,);
B(B_VARIN,,QXhg2BrakeFastSp,16,7,18,9,);
B(B_VARIN,,LXhgSpeLiftPrese,16,2,18,4,);
B(B_F,@AND-7,,18,1,23,10,0NNNNN);
B(B_VARIN,,QXhg1BrakeFastSp,16,5,18,7,);
B(B_VARIN,,QXhg1BrakeNormal,16,4,18,6,);
B(B_VARIN,,IXhgRelFreefall,16,3,18,5,);
B(B_F,@AND-4,,18,13,23,19,00NN);
B(B_VARIN,,QXhg1BrakeNormal,16,16,18,18,);
B(B_VARIN,,QXhg2BrakeNormal,16,17,18,19,);
B(B_VAROUT,,MXad2LockFreefal,28,12,30,14,);
L(23,12,23,15);
L(18,9,18,15);
L(23,3,23,11);
L(28,11,28,13);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 15 ;
        NETWORK_BODY
B(B_VAROUT,,MXhg2SpeedRedAct,11,2,13,4,);
B(B_VAROUT,,MXhg1SpeedRedAct,11,1,13,3,);
B(B_VAROUT,,MXspeLifLockTrim,11,3,13,5,);
B(B_VAROUT,,MXspeLifLockFaSp,11,4,13,6,);
B(B_VARIN,,LXhgSpecialLift,9,1,11,3,);
B(B_VARIN,,MXhg1EnabFastSpe,9,8,11,10,);
B(B_VARIN,,MXhg2EnabFastSpe,9,9,11,11,);
B(B_VARIN,,QTXhg1FastSpeed,9,10,11,12,);
B(B_VARIN,,QTXhg2FastSpeed,9,11,11,13,);
B(B_F,@AND-5,,11,6,16,13,0NNNN);
B(B_VAROUT,,MXhgSpecialLift,16,7,18,9,);
B(B_COMMENT,,Bei Schnellgang wird die Winde gesperrt. Der Schnellgang fällt heraus.ø^Dann erst erscheint das Symbol und die Funktion ist freigegeben.,35,10,68,12,);
B(B_COMMENT,,mit MXhgSpecialLift wird auch das Symbol am Bildschirm angesteuert.ø^Wenn Freifall vorgewählt ist soll das Symbol erscheinen. Die Winden sind gesperrt.ø^(in diesem Fall blinkt auch das FF Signal und man erkennt~ warum die Winden gesperrt sind,0,0,0,0,0,0,0,);
L(11,2,11,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 17 ;
        NETWORK_BODY
B(B_VARIN,,MXhg1EnabFastSpe,9,5,11,7,);
B(B_VARIN,,MXhg2EnabFastSpe,9,6,11,8,);
B(B_VARIN,,QTXhg1FastSpeed,9,7,11,9,);
B(B_VARIN,,QTXhg2FastSpeed,9,8,11,10,);
B(B_F,sel,,21,1,26,6,);
B(B_VAROUT,,MDhgSpeedReduct,26,2,28,4,);
B(B_VARIN,,1.0,19,3,21,5,);
B(B_VARIN,,LXhgSpecialLift,19,2,21,4,);
B(B_F,@OR-4,,11,4,16,10,);
B(B_F,sel,,16,9,21,14,);
B(B_F,@DIV,,11,10,16,14,);
B(B_VARIN,,100.0,9,12,11,14,);
B(B_VARIN,,CDhgSpeLiftMaxSi,9,11,11,13,);
B(B_VARIN,,0.0,14,14,16,16,);
L(21,5,21,11);
L(16,6,16,11);
L(16,13,16,15);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_FB,MsgUDintUDint,Message1,11,2,21,9,);
B(B_VARIN,,MSG_INFO,9,5,11,7,);
B(B_VARIN,,LXhgSpecialLift,9,4,11,6,);
B(B_VARIN,,624,9,3,11,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,LXhgSpecialLift,9,1,11,3,);
B(B_VAROUT,,LXhgSpeLiftWork,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL := ad2: ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,exit program,1,1,27,2,);
B(B_VARIN,,TRUE,9,3,11,5,);
B(B_JUMP,,exit,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL := exit: ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_VARIN,,TRUE,9,3,11,5,);
B(B_VAROUT,,LXstart,11,3,13,5,);
B(B_COMMENT,,exit program,1,1,27,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,TRUE,9,1,11,3,);
B(B_RETURN,,,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL := init: ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,init program,1,1,27,2,);
B(B_VARIN,,TRUE,9,3,11,5,);
B(B_VAROUT,,LXinitOk,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value hg special lifting function,1,1,27,2,);
B(B_FB,CorrValue_Bool,CorrValue_Bool1,11,4,23,10,);
B(B_VARIN,,CXhgSpecialLift,9,8,11,10,);
B(B_VARIN,,FALSE,9,5,11,7,);
B(B_VARIN,,FALSE,9,6,11,8,);
B(B_VARIN,,TRUE,9,7,11,9,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value hg special lifting function,1,1,27,2,);
B(B_VARIN,,CDhgSpeLiftMaxSi,9,8,11,10,);
B(B_VARIN,,50.0,9,5,11,7,);
B(B_VARIN,,0.0,9,6,11,8,);
B(B_VARIN,,100.0,9,7,11,9,);
B(B_FB,CorrValue_Real,CorrValue_Real1,11,4,23,10,);
        END_NETWORK_BODY
    END_NET_WORK
END_BODY
END_PROGRAM

PROGRAM ADdynGrouComV050
(*name of author: Manfred Schapler
version: 1.0
date: 10/97
modification:*)
(*name of author: Manfred Schapler
version: 1.0
date: 04/97
modification:*)
	VAR_EXTERNAL 
		ITXfreefallOper: BOOL:=FALSE;
			(*preselection freefall operation *)
		IXentrySwiClosed: BOOL:=FALSE;
			(*entry switch closed*)
		IXadDynGrouCoHg1: BOOL:=FALSE;
			(*ad dynamic ground compaction HG1*)
		IXadDynGrouCoHg2: BOOL:=FALSE;
			(*ad dynamic ground compaction HG2*)
		IXhg1StandStInd: BOOL:=FALSE;
			(*standstill indicator winch HG 1*)
		IXhg2StandStInd: BOOL:=FALSE;
			(*standstillindicator winch HG 2*)
		IXhgRelFreefall: BOOL:=FALSE;
			(*clutch valve release freefall*)
		IDadCounterHg1: DINT:=0;
			(*additional counter rope lenght hg1*)
		IDadCounterHg2: DINT:=0;
			(*additional counter rope lenght hg2*)
		IDcounterHg1: DINT:=0;
			(*counter rope lenght hg1*)
		IDcounterHg2: DINT:=0;
			(*counter rope lenght hg2*)
		QTXfreefallOper: BOOL:=FALSE;
			(*enable freefall operation *)
		QTXhg1FastSpeed: BOOL:=FALSE;
			(*enable hg1 fast speed operation *)
		QTXhg2FastSpeed: BOOL:=FALSE;
			(*enable hg2 fast speed operation *)
		QXhg1BrakeNormal: BOOL:=FALSE;
			(*HG 1 brake normal speed operation*)
		QXhg2BrakeNormal: BOOL:=FALSE;
			(*HG 2 brake normal speed operation*)
		QXhg1BrakeFastSp: BOOL:=FALSE;
			(*HG 1 brake fast speed operation*)
		QXhg2BrakeFastSp: BOOL:=FALSE;
			(*HG 2 brake fast speed operation*)
		QXhg1_2connectio: BOOL:=FALSE;
			(*connection hg 1 & 2*)
		QXconBrakePedals: BOOL:=FALSE;
			(*add output: conect brake pedals hg1 + hg2*)
		QWhgDynGrouComp: UINT:=0;
			(*HG dynamic ground compaction*)
		MXstopAllFunctio: BOOL:=FALSE;
			(*stop all excavator functions*)
		MXassemblyOperat: BOOL:=FALSE;
			(*assembly operation*)
		MXadDynGCPresel: BOOL:=FALSE;
			(*ad dynamic ground compaction preselected*)
		MXjoyDgcPresel: BOOL:=FALSE;
			(*ad dyn. ground comp. preselection on joystick*)
		MXhg1LocStopRapU: BOOL:=FALSE;
			(*HG 1 local stop rapid lifting*)
		MXhg1LocStopRapD: BOOL:=FALSE;
			(*HG 1 local stop rapid lowering*)
		MXhg2LocStopRapU: BOOL:=FALSE;
			(*HG 2 local stop rapid lifting*)
		MXhg2LocStopRapD: BOOL:=FALSE;
			(*HG 2 local stop rapid lowering*)
		MXhg1ExtAnalSign: BOOL:=FALSE;
			(*HG 1 other, external analog signal*)
		MXhg2ExtAnalSign: BOOL:=FALSE;
			(*HG 2 other, external analog signal*)
		MXad2Working: BOOL:=FALSE;
			(*additional device 2 working*)
		MXdgcActiveHg1: BOOL:=FALSE;
			(*ad dynamic ground compaction hg1 active*)
		MXdgcActiveHg2: BOOL:=FALSE;
			(*ad dynamic ground compaction hg2 active*)
		MXhg1ErrPressInd: BOOL:=FALSE;
			(*hg 1 error system pressure indicator*)
		MXhg2ErrPressInd: BOOL:=FALSE;
			(*hg 2 error system pressure indicator*)
		MXhg1pselFreefal: BOOL:=FALSE;
			(*HG 1 preselected freefall*)
		MXhg2pselFreefal: BOOL:=FALSE;
			(*HG 2 preselected freefall*)
		MXdgcHg1GtPoToRo: BOOL:=FALSE;
			(*ad dynamic ground compaction hg1 get pounder to Rope*)
		MXdgcHg2GtPoToRo: BOOL:=FALSE;
			(*ad dynamic ground compaction hg2 get pounder to Rope*)
		MXdgcHg1PouOnRop: BOOL:=FALSE;
			(*ad dynamic ground compaction hg1 pounder is on the Rope*)
		MXdgcHg2PouOnRop: BOOL:=FALSE;
			(*ad dynamic ground compaction hg2 pounder is on the Rope*)
		MXdgcHg1SlipFall: BOOL:=FALSE;
			(*ad dynamic ground compaction hg1 slipping fall*)
		MXdgcHg2SlipFall: BOOL:=FALSE;
			(*ad dynamic ground compaction hg2 slipping fall*)
		MXdgcHg1FreeFall: BOOL:=FALSE;
			(*ad dynamic ground compaction hg1 free fall*)
		MXdgcHg2FreeFall: BOOL:=FALSE;
			(*ad dynamic ground compaction hg2 free fall*)
		MXdgcHg1SlowDown: BOOL:=FALSE;
			(*ad dynamic ground compaction hg1 slow down fall*)
		MXdgcHg2SlowDown: BOOL:=FALSE;
			(*ad dynamic ground compaction hg2 slow down fall*)
		MXhg1ClutchExt: BOOL:=FALSE;
			(*ad dgc hg1 clutch external control*)
		MXhg2ClutchExt: BOOL:=FALSE;
			(*ad dgc hg2 clutch external control*)
		MXadGrabCoWork: BOOL:=FALSE;
			(*ad grab control working*)
		MXadWinSynWork: BOOL:=FALSE;
			(*ad winch synchronize working*)
		MXad1LockFreefal: BOOL:=FALSE;
			(*ad 1 lock freefall*)
		MXdgcBlockLml: BOOL:=FALSE;
			(*ad 1 block lml*)
		MXexitDynGndComp: BOOL:=FALSE;
			(*ad dyn. ground comp. exit programm*)
		MXdgcAutomStart: BOOL:=FALSE;
			(*ad dynamic ground compaction automatic start*)
		MXhg1EnabFastSpe: BOOL:=FALSE;
			(*enable fast speed operation hg1*)
		MXhg2EnabFastSpe: BOOL:=FALSE;
			(*enable fast speed operation hg2*)
		MXdgcResRopeHg1: BOOL:=FALSE;
			(*external reset rope length measuring hg1 by DGC*)
		MXdgcResRopeHg2: BOOL:=FALSE;
			(*external reset rope length measuring hg2 by DGC*)
		MXpdeDgcActive: BOOL:=FALSE;
			(*pde dgc activated*)
		MXminEngineSpeed: BOOL:=FALSE;
			(*minimum engine speed reached*)
		MXdgcNewPoint: BOOL:=FALSE;
			(*add. dgc new compaction point*)
		MXhg1PumpInZero: BOOL:=FALSE;
			(*HG 1 pump in zero*)
		MXhg2PumpInZero: BOOL:=FALSE;
			(*HG 2 pump in zero*)
		MXenabDgcOperat: BOOL:=FALSE;
			(*add. dynamic ground compaction enable*)
		MXdgcPointFinish: BOOL:=FALSE;
			(*add. dgc compaction point finished*)
		MXdgcLockHg1Trim: BOOL:=FALSE;
			(*dyn. ground comp. lock trimot hg1*)
		MXdgcLockHg2Trim: BOOL:=FALSE;
			(*dyn. ground comp. lock trimot hg1*)
		MDhg1JoySignal: REAL:=0.0;
			(*HG 1 joystick signal in +/- [%]*)
		MDhg2JoySignal: REAL:=0.0;
			(*HG 2 joystick signal in +/-[%]*)
		MDdgcBeats: REAL:=0.0;
			(*ad dynamic ground compaction actual beats*)
		MDdgcCompaction: REAL:=0.0;
			(*ad dynamic ground compaction actual compaction*)
		MDdgcHg1RelHight: REAL:=0.0;
			(*ad dynamic ground compaction hg1 realtive hight*)
		MDdgcHg2RelHight: REAL:=0.0;
			(*ad dynamic ground compaction hg2 realtive hight*)
		MDdgcHgCluchSig: REAL:=0.0;
			(*ad dynamic ground compaction hg clutch analog signal*)
		MDhg1RopeLenWin: REAL:=0.0;
			(*rope lenght hg 1 on the winch in m*)
		MDhg2RopeLenWin: REAL:=0.0;
			(*rope lenght hg 2 on the winch in m*)
		MDhg1ExtAnalSign: REAL:=0.0;
			(*HG 1 external analog signal in [%]*)
		MDhg2ExtAnalSign: REAL:=0.0;
			(*HG 2 external analog signal in [%]*)
		MDhg1SystemPress: REAL:=0.0;
			(*HG 1 system pressure in bar*)
		MDhg2SystemPress: REAL:=0.0;
			(*HG 2 system pressure in bar*)
		MDdeltaTime: REAL:=0.001;
			(*time to the last scan in sec.*)
		MDdgcRopeLenHG1: REAL:=0.0;
			(*dgc redundant rope length measuring HG1*)
		MDdgcRopeLenHG2: REAL:=0.0;
			(*dgc redundant rope length measuring HG2*)
		MDdgcAdRopLenHG1: REAL:=0.0;
			(*dgc additional redundant rope length measuring HG1*)
		MDdgcAdRopLenHG2: REAL:=0.0;
			(*dgc additional redundant rope length measuring HG2*)
		MDdgcRlmDiffHg1: REAL:=0.0;
			(*dgc redundant rope length measuring difference HG1*)
		MDdgcRlmDiffHg2: REAL:=0.0;
			(*dgc redundant rope length measuring difference HG2*)
		MDdgcRlmDiffHg: REAL:=0.0;
			(*dgc rope length measuring difference HG1&HG2*)
	END_VAR
	VAR_EXTERNAL CONSTANT
		MSG_ERROR: UINT:=0;
	END_VAR
	VAR_EXTERNAL RETAIN
		MXlmlFix_LuffJib: BOOL:=FALSE;
			(*lml fixed or luffing jib enabled*)
		MXhg1Preselect: BOOL:=FALSE;
			(*hg1  preselected*)
		MXhg2Preselect: BOOL:=FALSE;
			(*hg2  preselected*)
		MDhg1PressMemory: REAL:=0.0;
			(*HG 1 pressure memory*)
		MDhg2PressMemory: REAL:=0.0;
			(*HG 2 pressure memory*)
		MDdgcGivenBeats: REAL:=0.0;
			(*ad dynamic ground compaction given beats*)
		MDdgcGivenCompac: REAL:=0.0;
			(*ad dynamic ground compaction given compaction*)
		MDdgcGivenHight: REAL:=0.0;
			(*ad dynamic ground compaction given hoisting hight*)
		MDdgcGivSlowDown: REAL:=0.0;
			(*ad dynamic ground compaction given slown down lenght*)
		MDhg1CircumfLay1: REAL:=0.0;
			(*hg 1 rlm: circumf. of the layer 1 in the middle of the rope*)
		MDhg2CircumfLay1: REAL:=0.0;
			(*hg 2 rlm: circumf. of the layer 1 in the middle of the rope*)
	END_VAR
	VAR_EXTERNAL CONSTANT RETAIN
		CXadDynGrouComp: BOOL:=FALSE;
			(*additional device dynamic ground compaction*)
		CXdgcSlipFallOff: BOOL:=FALSE;
			(*ad dgc: release slipping fall in the beginning*)
		CXdgcBlockLml: BOOL:=FALSE;
			(*dgc block lml on dgc screen page*)
		CDdgcHgSlipClut: REAL:=0.0;
			(*dgc, analog signal for slipping clutch hg*)
		CDdgcHgPresPoOnR: REAL:=0.0;
			(*ad dynamic ground compaction hg pressure for pounder on the rope*)
		CDdgcHgPresPORFS: REAL:=0.0;
			(*dgc, fast speed hg pressure for pounder on the rope*)
		CDhg1GearRatio: REAL:=0.0;
			(*hg 1 gear ratio from the winch to the incrementalsensor*)
		CDhg1ImpIncSen: REAL:=0.0;
			(*hg 1 impulses per rotation of the incrementalsenor*)
		CDhg2GearRatio: REAL:=0.0;
			(*hg 2 gear ratio from the winch to the incrementalsensor*)
		CDhg2ImpIncSen: REAL:=0.0;
			(*hg 2 impulses per rotation of the incrementalsesor*)
		CDhg1ImpAdCount: REAL:=0.0;
			(*hg 1 impulses per rotation of additional counter*)
		CDhg2ImpAdCount: REAL:=0.0;
			(*hg 2 impulses per rotation of additional counter*)
		CDwinchWait: REAL:=0.0;
		CWdgcMinCurrClu: UINT:=0;
			(*ad dynamic ground compaction HG minimum current clutch valve*)
		CWdgcMaxCurrClu: UINT:=0;
			(*ad dynamic ground compaction HG maximum current clutch valve*)
	END_VAR
	VAR 
		LXinitOk: BOOL:=FALSE;
			(*init completed*)
		LXstart: BOOL:=FALSE;
			(*first scan completed*)
		LXdgcActive: BOOL:=FALSE;
		LXbothWinches: BOOL:=FALSE;
		LXadDynGCWorking: BOOL:=FALSE;
			(*ad dynamic ground compaction working*)
		LXstopByHgError: BOOL:=FALSE;
		LXhg1ErrorRopeMe: BOOL:=FALSE;
		LXhg2ErrorRopeMe: BOOL:=FALSE;
		LXhg1WinchWorkin: BOOL:=FALSE;
		LXhg2WinchWorkin: BOOL:=FALSE;
		LXbeatsReached: BOOL:=FALSE;
		LXcompactReached: BOOL:=FALSE;
		LXhg1AutomError: BOOL:=FALSE;
		LXhg2AutomError: BOOL:=FALSE;
		LX1work: BOOL:=FALSE;
		LX2work: BOOL:=FALSE;
		LXhg1Brake: BOOL:=FALSE;
		LXhg2Brake: BOOL:=FALSE;
		LXpouStartFallin: BOOL:=FALSE;
		LXhg1ClutchExt: BOOL:=FALSE;
		LXhg2ClutchExt: BOOL:=FALSE;
		LXcompacCheckHg1: BOOL:=FALSE;
		LXcompacCheckHg2: BOOL:=FALSE;
		LXhg1ExtAnalSign: BOOL:=FALSE;
		LXhg2ExtAnalSign: BOOL:=FALSE;
		LXhg1WinchStand: BOOL:=FALSE;
		LXhg2WinchStand: BOOL:=FALSE;
		LXhg1WinchNoWait: BOOL:=FALSE;
		LXhg2WinchNoWait: BOOL:=FALSE;
		LXhg1ErrorPoToRo: BOOL:=FALSE;
		LXhg2ErrorPoToRo: BOOL:=FALSE;
		LXrlmDiffStopHg1: BOOL:=FALSE;
		LXrlmDiffStopHg2: BOOL:=FALSE;
		LXresetBeatsComp: BOOL:=FALSE;
		LXresetDgcByPres: BOOL:=FALSE;
		LXrlmDiffStopHg: BOOL:=FALSE;
		LXsetPouFallin: BOOL:=FALSE;
		LDcounterHg1_t0: DINT:=0;
		LDcounterHg2_t0: DINT:=0;
		LDhg1SigPouToRop: REAL:=0.0;
		LDhg2SigPouToRop: REAL:=0.0;
		LDhg1CluSigSliCl: REAL:=0.0;
		LDhg2CluSigSliCl: REAL:=0.0;
		LDhg1Beats: REAL:=0.0;
		LDhg2Beats: REAL:=0.0;
		LDhg1Compaction: REAL:=0.0;
		LDhg2Compaction: REAL:=0.0;
		LDcheckTime: REAL:=0.0;
		LDhg1RopLeMeaOld: REAL:=0.0;
		LDhg2RopLeMeaOld: REAL:=0.0;
		LDhgPresPouOnRop: REAL:=0.0;
		LDhg1TaraCycle: REAL:=0.0;
		LDhg2TaraCycle: REAL:=0.0;
		LDtaraCountHG1: DINT:=0;
		LDtaraCountHG2: DINT:=0;
		LDtaraAdCountHG1: DINT:=0;
		LDtaraAdCountHG2: DINT:=0;
		SR1: SR;
		SR2: SR;
		SR3: SR;
		SR4: SR;
		SR5: SR;
		RS1: RS;
		RS2: RS;
		RS3: RS;
		RS4: RS;
		RS5: RS;
		RS6: RS;
		RS7: RS;
		RS8: RS;
		RS9: RS;
		RS10: RS;
		RS11: RS;
		RS12: RS;
		R_TRIG1: R_TRIG;
		R_TRIG2: R_TRIG;
		R_TRIG3: R_TRIG;
		R_TRIG4: R_TRIG;
		R_TRIG5: R_TRIG;
		R_TRIG6: R_TRIG;
		R_TRIG7: R_TRIG;
		R_TRIG8: R_TRIG;
		R_TRIG9: R_TRIG;
		R_TRIG10: R_TRIG;
		R_TRIG11: R_TRIG;
		R_TRIG12: R_TRIG;
		F_TRIG1: F_TRIG;
		F_TRIG2: F_TRIG;
		F_TRIG3: F_TRIG;
		F_TRIG4: F_TRIG;
		F_TRIG5: F_TRIG;
		F_TRIG6: F_TRIG;
		F_TRIG7: F_TRIG;
		TON1: TON;
		TON2: TON;
		TON3: TON;
		TON4: TON;
		TOF1: TOF;
		TOF2: TOF;
		TOF3: TOF;
		TOF4: TOF;
		PowerStage1: PowerStage;
		automatic1: ADdynGCAutomV015;
		automatic2: ADdynGCAutomV015;
		set_winch_sig1: ADdynGCWinchV024;
		Error1: MsgRealReal;
		Error2: MsgRealReal;
		Error3: MsgRealReal;
		Error4: MsgRealReal;
		Error5: MsgRealReal;
		Error6: MsgRealReal;
		Error7: MsgRealReal;
		CorrValue_Bool1: CorrValue_Bool;
		CorrValue_Bool2: CorrValue_Bool;
		CorrValue_Bool3: CorrValue_Bool;
		CorrValue_Real1: CorrValue_Real;
		CorrValue_Real2: CorrValue_Real;
		CorrValue_Real3: CorrValue_Real;
		CorrValue_Real4: CorrValue_Real;
		CorrValue_Real5: CorrValue_Real;
		CorrValue_Real6: CorrValue_Real;
		CorrValue_UInt1: CorrValue_UInt;
		CorrValue_UInt2: CorrValue_UInt;
		calculation1: ADropeLeCalcV011;
		calculation2: ADropeLeCalcV011;
		calculation3: ADropeLeCalcV011;
		calculation4: ADropeLeCalcV011;
	END_VAR
'FBD'
BODY
    WORKSPACE
        NETWORK_LIST_TYPE := NWTYPEFBD ;
        ACTIVE_NETWORK := 0 ;
    END_WORKSPACE
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_COMMENT,,init first time,1,1,27,2,);
B(B_F,not,,11,3,16,6,);
B(B_JUMP,,init,16,4,18,6,);
B(B_VARIN,,LXinitOk,9,4,11,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 17 ;
        NETWORK_BODY
B(B_COMMENT,,protect correction value change while program activ,1,1,27,2,);
B(B_FB,RS,RS1,34,3,39,7,);
B(B_VAROUT,,MXadDynGCPresel,39,4,41,6,);
B(B_VARIN,,CXadDynGrouComp,25,4,27,6,);
B(B_F,@OR-2,,11,4,16,8,NN);
B(B_VARIN,,LXstart,9,6,11,8,);
B(B_VARIN,,MXlmlFix_LuffJib,25,6,27,8,);
B(B_VARIN,,MXadWinSynWork,25,7,27,9,);
B(B_VARIN,,MXadGrabCoWork,25,8,27,10,);
B(B_F,@OR-2,,27,11,32,15,);
B(B_F,@AND-2,,20,12,25,16,0N);
B(B_VARIN,,CXadDynGrouComp,18,14,20,16,);
B(B_VARIN,,MXexitDynGndComp,24,9,26,11,);
B(B_F,@AND-6,,27,3,32,11,00NNNN);
B(B_VARIN,,IXentrySwiClosed,9,5,11,7,);
L(33,6,34,6);
L(33,6,33,13);
L(16,6,27,6);
L(32,13,33,13);
L(17,14,20,14);
L(17,6,17,14);
L(25,14,27,14);
L(26,10,26,13);
L(26,13,27,13);
L(26,10,27,10);
L(32,5,34,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,TRUE,9,1,11,3,);
B(B_VAROUT,,LXstart,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_COMMENT,,exit program when dynamic ground compaction not enabled,1,1,27,2,);
B(B_VARIN,,MXadDynGCPresel,9,4,11,6,);
B(B_VARIN,,LXdgcActive,9,5,11,7,);
B(B_VARIN,,LXadDynGCWorking,9,6,11,8,);
B(B_F,@AND-3,,11,3,16,8,NNN);
B(B_JUMP,,exit,16,4,18,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_COMMENT,,block lml stop when dgc is preselected,1,1,29,2,);
B(B_VARIN,,CXdgcBlockLml,9,4,11,6,);
B(B_F,@AND-2,,11,3,16,7,);
B(B_VARIN,,MXenabDgcOperat,9,5,11,7,);
B(B_VAROUT,,MXdgcBlockLml,16,4,18,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_COMMENT,,lock freefall when dgc is active,1,1,29,2,);
B(B_VARIN,,LXadDynGCWorking,9,4,11,6,);
B(B_VARIN,,LXdgcActive,9,5,11,7,);
B(B_F,@OR-2,,11,3,16,7,);
B(B_VAROUT,,MXad1LockFreefal,16,4,18,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 17 ;
        NETWORK_BODY
B(B_COMMENT,,set analog clutch and exit program when dgc is not active,1,1,27,2,);
B(B_F,@OR-2,,22,3,27,7,);
B(B_JUMP,,notwork,27,4,29,6,);
B(B_F,@AND-4,,17,3,22,9,0NNN);
B(B_VARIN,,MXenabDgcOperat,15,5,17,7,);
B(B_VARIN,,LXdgcActive,15,6,17,8,);
B(B_VARIN,,LXadDynGCWorking,15,7,17,9,);
B(B_VARIN,,MXadDynGCPresel,15,4,17,6,);
B(B_VARIN,,ITXfreefallOper,9,10,11,12,);
B(B_VARIN,,QTXfreefallOper,9,11,11,13,);
B(B_F,@OR-2,,11,9,16,13,);
B(B_VARIN,,LXdgcActive,14,13,16,15,);
B(B_F,@AND-3,,17,9,22,14,0NN);
B(B_VARIN,,LXadDynGCWorking,15,14,17,16,);
L(17,13,17,15);
L(16,12,16,14);
L(16,12,17,12);
L(16,11,17,11);
L(22,6,22,11);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_F,@OR-2,,11,3,16,7,);
B(B_VAROUT,,LXadDynGCWorking,16,4,18,6,);
B(B_COMMENT,,set ad working,1,1,27,2,);
B(B_VARIN,,LX1work,9,4,11,6,);
B(B_VARIN,,LX2work,9,5,11,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_FB,F_TRIG,F_TRIG1,11,3,18,6,);
B(B_FB,F_TRIG,F_TRIG2,11,6,18,9,);
B(B_VARIN,,IXadDynGrouCoHg1,9,4,11,6,);
B(B_VARIN,,IXadDynGrouCoHg2,9,7,11,9,);
B(B_F,@OR-2,,20,3,25,7,);
B(B_VAROUT,,LXresetDgcByPres,25,4,27,6,);
B(B_COMMENT,,reset dgc by dgc winch preselection,1,1,27,2,);
L(18,5,20,5);
L(18,8,19,8);
L(19,6,19,8);
L(19,6,20,6);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 38 ;
        NETWORK_BODY
B(B_COMMENT,,select DGC hg 1 automatic on,1,1,27,2,);
B(B_FB,R_TRIG,R_TRIG1,11,6,18,9,);
B(B_VARIN,,MXjoyDgcPresel,9,7,11,9,);
B(B_F,@AND-2,,20,11,25,15,);
B(B_FB,RS,RS2,43,5,48,9,);
B(B_VAROUT,,MXdgcActiveHg1,49,6,51,8,);
B(B_VARIN,,MXstopAllFunctio,27,15,29,17,);
B(B_VARIN,,IXadDynGrouCoHg1,17,3,19,5,);
B(B_F,@AND-2,,20,33,25,37,);
B(B_FB,RS,RS3,43,27,48,31,);
B(B_VAROUT,,MXdgcActiveHg2,49,28,51,30,);
B(B_VARIN,,MXdgcActiveHg2,18,35,20,37,);
B(B_VARIN,,MXassemblyOperat,27,16,29,18,);
B(B_VARIN,,LXbeatsReached,27,17,29,19,);
B(B_VARIN,,LXcompactReached,27,18,29,20,);
B(B_VARIN,,LXstopByHgError,27,19,29,21,);
B(B_F,@OR-2,,36,11,41,15,);
B(B_FB,R_TRIG,R_TRIG2,57,13,64,16,);
B(B_VAROUT,,MXdgcAutomStart,64,14,66,16,);
B(B_F,@OR-2,,50,13,55,17,);
B(B_VARIN,,MXadDynGCPresel,27,20,29,22,);
B(B_VAROUT,,LXdgcActive,56,19,58,21,);
B(B_VARIN,,IXadDynGrouCoHg2,15,28,17,30,);
B(B_VARIN,,MXdgcActiveHg1,15,13,17,15,);
B(B_VARIN,,LXdgcActive,16,19,18,21,);
B(B_VARIN,,MXlmlFix_LuffJib,27,21,29,23,);
B(B_VARIN,,MXadWinSynWork,27,22,29,24,);
B(B_VARIN,,MXadGrabCoWork,27,23,29,25,);
B(B_F,@AND-4,,20,5,25,11,00N);
B(B_VARIN,,MXhg1Preselect,15,9,17,11,);
B(B_F,@OR-2,,36,32,41,36,);
B(B_VARIN,,MXhg2Preselect,16,31,18,33,);
B(B_F,@AND-4,,20,27,25,33,00N);
B(B_VARIN,,LXresetDgcByPres,27,24,29,26,);
B(B_F,@OR-10,,29,14,34,26,00000N);
L(19,13,20,13);
L(18,8,20,8);
L(42,8,42,13);
L(42,8,43,8);
L(48,7,49,7);
L(19,4,19,7);
L(19,35,20,35);
L(42,30,42,34);
L(42,30,43,30);
L(48,29,49,29);
L(19,8,19,35);
L(19,30,20,30);
L(25,13,36,13);
L(41,13,42,13);
L(35,14,36,14);
L(35,14,35,34);
L(25,35,36,35);
L(55,15,57,15);
L(49,7,49,15);
L(49,15,50,15);
L(49,16,50,16);
L(49,16,49,29);
L(56,15,56,20);
L(18,31,20,31);
L(17,14,20,14);
L(18,9,18,31);
L(19,7,20,7);
L(25,7,43,7);
L(18,9,20,9);
L(17,10,20,10);
L(35,34,36,34);
L(41,34,42,34);
L(17,29,20,29);
L(25,29,43,29);
L(18,32,20,32);
L(34,16,35,16);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 15 ;
        NETWORK_BODY
B(B_COMMENT,,set external analog signal of the hoisting gear,1,1,27,2,);
B(B_F,@AND-2,,11,7,16,11,NN);
B(B_VARIN,,LX1work,9,9,11,11,);
B(B_VARIN,,MXdgcActiveHg1,8,5,10,7,);
B(B_FB,RS,RS4,18,4,23,8,);
B(B_F,sel,,25,7,30,12,);
B(B_VARIN,,MXhg1ExtAnalSign,23,9,25,11,);
B(B_VARIN,,TRUE,23,10,25,12,);
B(B_FB,F_TRIG,F_TRIG3,25,4,32,7,);
B(B_VARIN,,FALSE,30,12,32,14,);
B(B_F,sel,,33,6,38,11,);
B(B_VAROUT,,MXhg1ExtAnalSign,38,7,40,9,);
B(B_VAROUT,,LXhg1ExtAnalSign,24,2,26,4,);
L(10,6,18,6);
L(17,7,18,7);
L(17,7,17,9);
L(16,9,17,9);
L(10,9,11,9);
L(10,6,10,9);
L(24,9,25,9);
L(24,6,24,9);
L(32,6,32,8);
L(32,8,33,8);
L(30,9,33,9);
L(32,10,33,10);
L(32,10,32,13);
L(23,6,25,6);
L(24,3,24,6);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_F,@AND-2,,11,5,16,9,NN);
B(B_VARIN,,LX2work,9,7,11,9,);
B(B_FB,RS,RS5,18,2,23,6,);
B(B_VARIN,,MXdgcActiveHg2,8,3,10,5,);
B(B_F,sel,,25,5,30,10,);
B(B_VARIN,,MXhg2ExtAnalSign,23,7,25,9,);
B(B_VARIN,,TRUE,23,8,25,10,);
B(B_FB,F_TRIG,F_TRIG4,25,2,32,5,);
B(B_VARIN,,FALSE,30,10,32,12,);
B(B_F,sel,,33,4,38,9,);
B(B_VAROUT,,MXhg2ExtAnalSign,38,5,40,7,);
B(B_VAROUT,,LXhg2ExtAnalSign,24,0,26,2,);
L(17,5,18,5);
L(17,5,17,7);
L(16,7,17,7);
L(10,4,18,4);
L(10,4,10,7);
L(10,7,11,7);
L(24,7,25,7);
L(24,4,24,7);
L(32,4,32,6);
L(32,6,33,6);
L(30,7,33,7);
L(32,8,33,8);
L(32,8,32,11);
L(23,4,25,4);
L(24,1,24,4);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,set memory for engine speed automatic,1,1,27,2,);
B(B_VARIN,,LXadDynGCWorking,9,3,11,5,);
B(B_VAROUT,,MXad2Working,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,standstill indication hg1,1,1,27,2,);
B(B_VARIN,,IDcounterHg1,9,5,11,7,);
B(B_VARIN,,LDcounterHg1_t0,9,6,11,8,);
B(B_F,@EQ-2,,11,4,16,8,);
B(B_FB,TON,TON1,18,4,23,8,);
B(B_VARIN,,T#0.1s,15,8,17,10,);
B(B_VAROUT,,LXhg1WinchStand,23,5,25,7,);
L(17,7,18,7);
L(17,7,17,9);
L(16,6,18,6);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,IDcounterHg1,9,1,11,3,);
B(B_VAROUT,,LDcounterHg1_t0,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 16 ;
        NETWORK_BODY
B(B_COMMENT,,set error rope measuring system,1,1,27,2,);
B(B_FB,TON,TON2,18,4,23,8,);
B(B_VARIN,,T#0.25s,15,8,17,10,);
B(B_FB,TOF,TOF1,26,4,31,8,);
B(B_VAROUT,,LXhg1ErrorRopeMe,31,5,33,7,);
B(B_FB,MsgRealReal,Error1,28,8,37,15,);
B(B_VARIN,,MSG_ERROR,26,11,28,13,);
B(B_VARIN,,304,26,9,28,11,);
B(B_VARIN,,MXhg1Preselect,9,7,11,9,);
B(B_F,@AND-3,,11,4,16,9,N);
B(B_VARIN,,IXhg1StandStInd,9,5,11,7,);
B(B_VARIN,,LXhg1WinchStand,9,6,11,8,);
L(17,7,18,7);
L(17,7,17,9);
L(24,6,24,11);
L(24,11,28,11);
L(17,9,25,9);
L(25,7,25,9);
L(25,7,26,7);
L(23,6,26,6);
L(16,6,18,6);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,standstill indication hg2,1,1,27,2,);
B(B_VARIN,,IDcounterHg2,9,5,11,7,);
B(B_VARIN,,LDcounterHg2_t0,9,6,11,8,);
B(B_F,@EQ-2,,11,4,16,8,);
B(B_FB,TON,TON3,18,4,23,8,);
B(B_VARIN,,T#0.1s,15,8,17,10,);
B(B_VAROUT,,LXhg2WinchStand,23,5,25,7,);
L(17,7,18,7);
L(17,7,17,9);
L(16,6,18,6);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,IDcounterHg2,9,1,11,3,);
B(B_VAROUT,,LDcounterHg2_t0,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_VARIN,,IXhg2StandStInd,9,2,11,4,);
B(B_VARIN,,LXhg2WinchStand,9,3,11,5,);
B(B_FB,MsgRealReal,Error2,28,5,37,12,);
B(B_VARIN,,MSG_ERROR,26,8,28,10,);
B(B_VARIN,,305,26,6,28,8,);
B(B_FB,TON,TON4,18,1,23,5,);
B(B_VARIN,,T#0.25s,15,5,17,7,);
B(B_FB,TOF,TOF2,26,1,31,5,);
B(B_VAROUT,,LXhg2ErrorRopeMe,31,2,33,4,);
B(B_F,@AND-3,,11,1,16,6,N);
B(B_VARIN,,MXhg2Preselect,9,4,11,6,);
L(24,8,28,8);
L(24,3,24,8);
L(17,4,18,4);
L(17,4,17,6);
L(23,3,26,3);
L(25,4,26,4);
L(25,4,25,6);
L(17,6,25,6);
L(16,3,18,3);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_COMMENT,,check if the winch is standing or moving slowly or if it is working,1,1,27,2,);
B(B_F,@ADD-2,,11,3,16,7,);
B(B_VARIN,,MDdeltaTime,9,4,11,6,);
B(B_VARIN,,LDcheckTime,9,5,11,7,);
B(B_VAROUT,,LDcheckTime,16,4,18,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 15 ;
        NETWORK_BODY
B(B_VARIN,,MDhg1RopeLenWin,9,8,11,10,);
B(B_VARIN,,LDhg1RopLeMeaOld,9,9,11,11,);
B(B_F,@SUB,,11,7,16,11,);
B(B_F,abs,,16,7,21,10,);
B(B_F,@GT-2,,23,7,28,11,);
B(B_F,@GE-2,,23,2,28,6,);
B(B_VARIN,,0.25,21,4,23,6,);
B(B_VARIN,,LDcheckTime,21,3,23,5,);
B(B_F,@AND-2,,31,2,36,6,);
B(B_FB,RS,RS6,38,2,43,6,);
B(B_F,@AND-2,,31,6,36,10,0N);
B(B_VAROUT,,LXhg1WinchWorkin,43,3,45,5,);
B(B_VARIN,,0.01,20,10,22,12,);
B(B_COMMENT,,Eine Aenderung von groesser 10mm in 250msecø^wird als drehende Winde angenommen!,23,11,42,13,);
L(21,9,23,9);
L(22,10,23,10);
L(28,4,31,4);
L(29,5,31,5);
L(36,4,38,4);
L(37,5,38,5);
L(37,5,37,8);
L(36,8,37,8);
L(30,8,31,8);
L(29,5,29,9);
L(28,9,31,9);
L(22,10,22,11);
L(30,4,30,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 15 ;
        NETWORK_BODY
B(B_VARIN,,MDhg2RopeLenWin,8,8,10,10,);
B(B_VARIN,,LDhg2RopLeMeaOld,8,9,10,11,);
B(B_F,@SUB,,10,7,15,11,);
B(B_F,abs,,15,7,20,10,);
B(B_F,@GT-2,,22,7,27,11,);
B(B_F,@GE-2,,22,2,27,6,);
B(B_VARIN,,0.25,20,4,22,6,);
B(B_VARIN,,LDcheckTime,20,3,22,5,);
B(B_F,@AND-2,,30,2,35,6,);
B(B_FB,RS,RS7,37,2,42,6,);
B(B_VAROUT,,LXhg2WinchWorkin,42,3,44,5,);
B(B_F,@AND-2,,30,6,35,10,0N);
B(B_VARIN,,0.01,19,10,21,12,);
B(B_COMMENT,,Eine Aenderung von groesser 10mm in 250msecø^wird als drehende Winde angenommen!,22,11,41,13,);
L(20,9,22,9);
L(21,10,22,10);
L(27,4,30,4);
L(35,4,37,4);
L(36,5,37,5);
L(36,5,36,8);
L(35,8,36,8);
L(27,9,30,9);
L(29,8,30,8);
L(28,5,30,5);
L(28,5,28,9);
L(29,4,29,8);
L(21,10,21,11);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 19 ;
        NETWORK_BODY
B(B_F,@GE-2,,10,1,15,5,);
B(B_VARIN,,0.25,8,3,10,5,);
B(B_VARIN,,LDcheckTime,8,2,10,4,);
B(B_F,sel,,17,3,22,8,);
B(B_F,sel,,17,8,22,13,);
B(B_VARIN,,LDhg1RopLeMeaOld,13,5,15,7,);
B(B_VARIN,,LDhg2RopLeMeaOld,13,10,15,12,);
B(B_F,sel,,17,13,22,18,);
B(B_VAROUT,,LDhg1RopLeMeaOld,22,4,24,6,);
B(B_VAROUT,,LDhg2RopLeMeaOld,22,9,24,11,);
B(B_VARIN,,MDhg1RopeLenWin,13,6,15,8,);
B(B_VARIN,,MDhg2RopeLenWin,13,11,15,13,);
B(B_VAROUT,,LDcheckTime,22,14,24,16,);
B(B_VARIN,,0.0,15,16,17,18,);
B(B_VARIN,,LDcheckTime,15,15,17,17,);
L(16,10,17,10);
L(16,5,17,5);
L(15,3,16,3);
L(15,6,17,6);
L(15,7,17,7);
L(16,15,17,15);
L(16,3,16,15);
L(15,11,17,11);
L(15,12,17,12);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 36 ;
        NETWORK_BODY
B(B_COMMENT,,check RLM winch 1,1,1,27,2,);
B(B_COMMENT,,reset redundant RLM on "Pounder on Rope",1,3,18,4,);
B(B_FB,SR,SR4,31,24,36,28,);
B(B_F,sel,,46,25,51,30,);
B(B_VAROUT,,LDtaraCountHG1,51,26,53,28,);
B(B_F,sel,,46,30,51,35,);
B(B_VAROUT,,LDtaraAdCountHG1,51,31,53,33,);
B(B_VARIN,,IDcounterHg1,42,28,44,30,);
B(B_VARIN,,LDtaraCountHG1,42,27,44,29,);
B(B_VARIN,,LDtaraAdCountHG1,42,32,44,34,);
B(B_VARIN,,IDadCounterHg1,42,33,44,35,);
B(B_VARIN,,MXdgcHg1PouOnRop,15,9,17,11,);
B(B_VARIN,,MXdgcHg2PouOnRop,15,10,17,12,);
B(B_FB,SR,SR2,31,7,36,11,);
B(B_FB,R_TRIG,R_TRIG9,22,5,29,8,);
B(B_VARIN,,MXdgcHg1GtPoToRo,20,6,22,8,);
B(B_F,@EQ-2,,10,12,15,16,);
B(B_VARIN,,MDdgcHgCluchSig,8,13,10,15,);
B(B_VARIN,,0.0,8,14,10,16,);
B(B_F,@AND-3,,17,8,22,13,);
B(B_F,@AND-3,,17,14,22,19,00N);
B(B_VARIN,,LXbothWinches,15,17,17,19,);
B(B_VARIN,,MXdgcHg1PouOnRop,15,16,17,18,);
B(B_F,@AND-2,,24,24,29,28,);
B(B_VARIN,,MXhg1PumpInZero,28,28,30,30,);
B(B_VARIN,,MXdgcActiveHg1,22,26,24,28,);
B(B_COMMENT,,reset redundant RLM on "Slipping fall",1,19,16,20,);
B(B_F,@OR-3,,39,22,44,27,);
B(B_FB,F_TRIG,F_TRIG6,10,21,17,24,);
B(B_VARIN,,MXdgcHg1PouOnRop,8,22,10,24,);
B(B_FB,R_TRIG,R_TRIG11,10,24,17,27,);
B(B_VARIN,,LXsetPouFallin,8,25,10,27,);
B(B_F,@OR-2,,18,23,23,27,);
B(B_F,@OR-2,,24,8,29,12,);
B(B_VARIN,,MXdgcAutomStart,35,21,37,23,);
L(36,26,39,26);
L(38,9,38,24);
L(38,24,39,24);
L(37,25,39,25);
L(44,24,45,24);
L(45,24,45,32);
L(45,27,46,27);
L(44,28,46,28);
L(44,29,46,29);
L(44,33,46,33);
L(44,34,46,34);
L(45,32,46,32);
L(23,11,23,16);
L(23,11,24,11);
L(30,7,30,9);
L(30,9,31,9);
L(29,7,30,7);
L(36,9,38,9);
L(15,14,16,14);
L(16,12,17,12);
L(16,12,16,16);
L(30,27,31,27);
L(16,16,17,16);
L(22,16,23,16);
L(29,26,31,26);
L(30,27,30,29);
L(23,26,24,26);
L(17,23,17,25);
L(17,25,18,25);
L(17,26,18,26);
L(23,25,23,26);
L(22,10,24,10);
L(29,10,31,10);
L(37,22,37,25);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_VARIN,,CDhg1GearRatio,16,6,18,8,);
B(B_VARIN,,MDhg1CircumfLay1,16,5,18,7,);
B(B_FB,ADropeLeCalcV011,calculation1,18,3,39,9,);
B(B_F,@MUL-2,,11,8,16,12,);
B(B_VARIN,,4.0,9,10,11,12,);
B(B_VARIN,,CDhg1ImpIncSen,9,9,11,11,);
B(B_F,@SUB,,11,1,16,5,);
B(B_VARIN,,LDtaraCountHG1,9,3,11,5,);
B(B_VARIN,,IDcounterHg1,9,2,11,4,);
B(B_F,abs,,40,3,45,6,);
B(B_VAROUT,,MDdgcRopeLenHG1,45,4,47,6,);
L(17,8,17,10);
L(17,8,18,8);
L(16,10,17,10);
L(17,5,18,5);
L(16,3,17,3);
L(17,3,17,5);
L(39,5,40,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_VARIN,,1.0,16,6,18,8,);
B(B_VARIN,,MDhg1CircumfLay1,16,5,18,7,);
B(B_VAROUT,,MDdgcAdRopLenHG1,39,4,41,6,);
B(B_FB,ADropeLeCalcV011,calculation2,18,3,39,9,);
B(B_VARIN,,CDhg1ImpAdCount,16,7,18,9,);
B(B_VARIN,,IDadCounterHg1,9,2,11,4,);
B(B_F,@SUB,,11,1,16,5,);
B(B_VARIN,,LDtaraAdCountHG1,9,3,11,5,);
L(16,3,17,3);
L(17,3,17,5);
L(17,5,18,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 15 ;
        NETWORK_BODY
B(B_F,@SUB,,11,3,16,7,);
B(B_VARIN,,MDdgcAdRopLenHG1,9,5,11,7,);
B(B_VARIN,,MDdgcRopeLenHG1,9,4,11,6,);
B(B_F,abs,,16,3,21,6,);
B(B_F,@GT-2,,23,3,28,7,);
B(B_VAROUT,,MDdgcRlmDiffHg1,22,1,24,3,);
B(B_FB,MsgRealReal,Error5,37,7,46,14,);
B(B_VARIN,,414,33,8,35,10,);
B(B_VARIN,,MSG_ERROR,35,10,37,12,);
B(B_VAROUT,,LXrlmDiffStopHg1,36,4,38,6,);
B(B_VARIN,,0.5,20,6,22,8,);
B(B_VARIN,,MXdgcActiveHg1,27,7,29,9,);
B(B_F,@AND-2,,30,3,35,7,);
B(B_COMMENT,,MXdgcActiveHg1,21,9,29,10,);
L(21,5,23,5);
L(22,6,23,6);
L(22,2,22,5);
L(36,5,36,10);
L(36,10,37,10);
L(35,9,37,9);
L(22,6,22,7);
L(28,5,30,5);
L(35,5,36,5);
L(29,6,29,8);
L(29,6,30,6);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 38 ;
        NETWORK_BODY
B(B_COMMENT,,check RLM winch 2,1,1,27,2,);
B(B_COMMENT,,reset redundant RLM on "Pounder on Rope",1,3,18,4,);
B(B_F,sel,,46,26,51,31,);
B(B_VAROUT,,LDtaraCountHG2,51,27,53,29,);
B(B_F,sel,,46,31,51,36,);
B(B_VAROUT,,LDtaraAdCountHG2,51,32,53,34,);
B(B_VARIN,,IDcounterHg2,42,29,44,31,);
B(B_VARIN,,LDtaraCountHG2,42,28,44,30,);
B(B_VARIN,,LDtaraAdCountHG2,42,33,44,35,);
B(B_VARIN,,IDadCounterHg2,42,34,44,36,);
B(B_F,@OR-2,,24,8,29,12,);
B(B_VARIN,,MXdgcHg1PouOnRop,15,9,17,11,);
B(B_VARIN,,MXdgcHg2PouOnRop,15,10,17,12,);
B(B_FB,SR,SR3,31,7,36,11,);
B(B_FB,R_TRIG,R_TRIG10,22,5,29,8,);
B(B_VARIN,,MXdgcHg2GtPoToRo,20,6,22,8,);
B(B_VARIN,,LXbothWinches,15,17,17,19,);
B(B_VARIN,,MXdgcHg2PouOnRop,15,16,17,18,);
B(B_F,@EQ-2,,10,12,15,16,);
B(B_VARIN,,MDdgcHgCluchSig,8,13,10,15,);
B(B_VARIN,,0.0,8,14,10,16,);
B(B_F,@AND-3,,17,8,22,13,);
B(B_F,@AND-3,,17,14,22,19,00N);
B(B_FB,SR,SR5,31,25,36,29,);
B(B_F,@AND-2,,24,25,29,29,);
B(B_VARIN,,MXhg2PumpInZero,28,29,30,31,);
B(B_VARIN,,MXdgcActiveHg2,22,27,24,29,);
B(B_F,@OR-3,,39,23,44,28,);
B(B_FB,F_TRIG,F_TRIG7,10,21,17,24,);
B(B_VARIN,,MXdgcHg2PouOnRop,8,22,10,24,);
B(B_COMMENT,,reset redundant RLM on "Slipping fall",1,19,16,20,);
B(B_FB,R_TRIG,R_TRIG12,10,24,17,27,);
B(B_VARIN,,LXsetPouFallin,8,25,10,27,);
B(B_F,@OR-2,,18,23,23,27,);
B(B_VARIN,,MXdgcAutomStart,35,22,37,24,);
L(38,9,38,25);
L(45,25,45,33);
L(45,28,46,28);
L(44,29,46,29);
L(44,30,46,30);
L(44,34,46,34);
L(44,35,46,35);
L(45,33,46,33);
L(23,11,23,16);
L(23,11,24,11);
L(29,10,31,10);
L(30,7,30,9);
L(30,9,31,9);
L(29,7,30,7);
L(36,9,38,9);
L(15,14,16,14);
L(16,12,17,12);
L(22,10,24,10);
L(22,16,23,16);
L(16,12,16,16);
L(16,16,17,16);
L(30,28,31,28);
L(36,27,39,27);
L(37,26,39,26);
L(29,27,31,27);
L(30,28,30,30);
L(23,27,24,27);
L(38,25,39,25);
L(44,25,45,25);
L(17,23,17,25);
L(17,25,18,25);
L(17,26,18,26);
L(23,25,23,27);
L(37,23,37,26);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_VARIN,,CDhg2GearRatio,16,6,18,8,);
B(B_VARIN,,MDhg2CircumfLay1,16,5,18,7,);
B(B_FB,ADropeLeCalcV011,calculation3,18,3,39,9,);
B(B_F,@MUL-2,,11,8,16,12,);
B(B_VARIN,,4.0,9,10,11,12,);
B(B_VARIN,,CDhg2ImpIncSen,9,9,11,11,);
B(B_F,@SUB,,11,1,16,5,);
B(B_VARIN,,LDtaraCountHG2,9,3,11,5,);
B(B_VARIN,,IDcounterHg2,9,2,11,4,);
B(B_F,abs,,40,3,45,6,);
B(B_VAROUT,,MDdgcRopeLenHG2,45,4,47,6,);
L(17,8,17,10);
L(17,8,18,8);
L(16,10,17,10);
L(17,5,18,5);
L(16,3,17,3);
L(17,3,17,5);
L(39,5,40,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_VARIN,,1.0,16,6,18,8,);
B(B_VARIN,,MDhg2CircumfLay1,16,5,18,7,);
B(B_VAROUT,,MDdgcAdRopLenHG2,39,4,41,6,);
B(B_FB,ADropeLeCalcV011,calculation4,18,3,39,9,);
B(B_VARIN,,CDhg2ImpAdCount,16,7,18,9,);
B(B_F,@SUB,,11,1,16,5,);
B(B_VARIN,,IDadCounterHg2,9,2,11,4,);
B(B_VARIN,,LDtaraAdCountHG2,9,3,11,5,);
L(16,3,17,3);
L(17,3,17,5);
L(17,5,18,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 14 ;
        NETWORK_BODY
B(B_F,@SUB,,11,3,16,7,);
B(B_F,abs,,16,3,21,6,);
B(B_VARIN,,MDdgcAdRopLenHG2,9,5,11,7,);
B(B_VARIN,,MDdgcRopeLenHG2,9,4,11,6,);
B(B_F,@GT-2,,23,3,28,7,);
B(B_VAROUT,,MDdgcRlmDiffHg2,22,1,24,3,);
B(B_F,@AND-2,,30,3,35,7,);
B(B_FB,MsgRealReal,Error6,37,7,46,14,);
B(B_VARIN,,415,33,8,35,10,);
B(B_VARIN,,MSG_ERROR,35,10,37,12,);
B(B_VAROUT,,LXrlmDiffStopHg2,36,4,38,6,);
B(B_VARIN,,MXdgcActiveHg2,27,7,29,9,);
B(B_VARIN,,0.5,20,6,22,8,);
B(B_COMMENT,,MXdgcActiveHg2,21,9,29,10,);
L(21,5,23,5);
L(22,2,22,5);
L(28,5,30,5);
L(29,6,30,6);
L(35,5,36,5);
L(36,5,36,10);
L(36,10,37,10);
L(35,9,37,9);
L(29,6,29,8);
L(22,6,23,6);
L(22,6,22,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 16 ;
        NETWORK_BODY
B(B_F,sel,,20,4,25,9,);
B(B_VARIN,,LDhg1TaraCycle,18,6,20,8,);
B(B_VARIN,,MDhg1RopeLenWin,18,7,20,9,);
B(B_F,@SUB,,27,8,32,12,);
B(B_FB,R_TRIG,R_TRIG7,11,3,18,6,);
B(B_VARIN,,MXdgcHg1PouOnRop,9,4,11,6,);
B(B_VAROUT,,LDhg1TaraCycle,26,5,28,7,);
B(B_COMMENT,,check winch 1 are waiting (on pounder on rope),1,1,27,2,);
B(B_F,@GT-2,,40,8,45,12,);
B(B_COMMENT,,Eine Aenderung von groesser 10cm bei pounder on rope unterø^Verwendung beider Winden wird als nicht wartende Winde angenommen!,29,1,57,3,);
B(B_F,@AND-3,,48,6,53,11,);
B(B_VAROUT,,LXhg1WinchNoWait,53,7,55,9,);
B(B_VARIN,,MXdgcHg1PouOnRop,45,5,47,7,);
B(B_VARIN,,LXbothWinches,44,6,46,8,);
B(B_F,@DIV,,33,11,38,15,);
B(B_VARIN,,CDwinchWait,31,12,33,14,);
B(B_VARIN,,100.0,31,13,33,15,);
B(B_F,abs,,33,8,38,11,);
L(19,5,19,6);
L(19,6,20,6);
L(26,6,26,11);
L(20,8,20,10);
L(26,11,27,11);
L(20,10,27,10);
L(18,5,19,5);
L(25,6,26,6);
L(47,6,47,8);
L(47,8,48,8);
L(46,7,46,9);
L(46,9,48,9);
L(45,10,48,10);
L(39,11,39,13);
L(38,13,39,13);
L(32,10,33,10);
L(38,10,40,10);
L(39,11,40,11);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_FB,MsgRealReal,Error3,19,5,28,12,);
B(B_VARIN,,MSG_ERROR,17,8,19,10,);
B(B_VAROUT,,LXhg1ErrorPoToRo,18,2,20,4,);
B(B_VARIN,,LXhg1WinchNoWait,9,2,11,4,);
B(B_VARIN,,MXdgcHg2GtPoToRo,9,3,11,5,);
B(B_F,@AND-2,,11,1,16,5,);
B(B_VARIN,,412,15,6,17,8,);
L(18,8,19,8);
L(18,3,18,8);
L(16,3,18,3);
L(17,7,19,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 16 ;
        NETWORK_BODY
B(B_F,sel,,20,4,25,9,);
B(B_VARIN,,LDhg2TaraCycle,18,6,20,8,);
B(B_VARIN,,MDhg2RopeLenWin,18,7,20,9,);
B(B_F,@SUB,,27,8,32,12,);
B(B_FB,R_TRIG,R_TRIG8,11,3,18,6,);
B(B_VARIN,,MXdgcHg2PouOnRop,9,4,11,6,);
B(B_VAROUT,,LDhg2TaraCycle,26,5,28,7,);
B(B_COMMENT,,check winch 2 are waiting (on pounder on rope),1,1,27,2,);
B(B_F,@GT-2,,40,8,45,12,);
B(B_COMMENT,,Eine Aenderung von groesser 10cm bei pounder on rope unterø^Verwendung beider Winden wird als nicht wartende Winde angenommen!,29,1,57,3,);
B(B_F,@DIV,,33,11,38,15,);
B(B_VARIN,,CDwinchWait,31,12,33,14,);
B(B_VARIN,,100.0,31,13,33,15,);
B(B_F,abs,,33,8,38,11,);
B(B_F,@AND-3,,48,6,53,11,);
B(B_VARIN,,MXdgcHg2PouOnRop,45,5,47,7,);
B(B_VARIN,,LXbothWinches,44,6,46,8,);
B(B_VAROUT,,LXhg2WinchNoWait,53,7,55,9,);
L(19,5,19,6);
L(19,6,20,6);
L(26,6,26,11);
L(20,8,20,10);
L(26,11,27,11);
L(20,10,27,10);
L(39,11,40,11);
L(18,5,19,5);
L(25,6,26,6);
L(39,11,39,13);
L(38,13,39,13);
L(32,10,33,10);
L(38,10,40,10);
L(47,6,47,8);
L(47,8,48,8);
L(46,7,46,9);
L(46,9,48,9);
L(45,10,48,10);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_VARIN,,LXhg2WinchNoWait,9,2,11,4,);
B(B_VARIN,,MXdgcHg1GtPoToRo,9,3,11,5,);
B(B_F,@AND-2,,11,1,16,5,);
B(B_FB,MsgRealReal,Error4,19,5,28,12,);
B(B_VARIN,,413,15,6,17,8,);
B(B_VARIN,,MSG_ERROR,17,8,19,10,);
B(B_VAROUT,,LXhg2ErrorPoToRo,18,2,20,4,);
L(17,7,19,7);
L(18,3,18,8);
L(18,8,19,8);
L(16,3,18,3);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 17 ;
        NETWORK_BODY
B(B_F,@SUB,,11,2,16,6,);
B(B_F,abs,,16,2,21,5,);
B(B_VARIN,,MDdgcRopeLenHG2,9,4,11,6,);
B(B_VARIN,,MDdgcRopeLenHG1,9,3,11,5,);
B(B_F,@GT-2,,22,2,27,6,);
B(B_VAROUT,,MDdgcRlmDiffHg,21,0,23,2,);
B(B_VARIN,,1.5,19,5,21,7,);
B(B_F,@AND-3,,28,4,33,9,);
B(B_FB,MsgRealReal,Error7,36,8,45,15,);
B(B_VARIN,,576,32,9,34,11,);
B(B_VARIN,,MSG_ERROR,34,11,36,13,);
B(B_VAROUT,,LXrlmDiffStopHg,35,5,37,7,);
B(B_VARIN,,LXbothWinches,26,6,28,8,);
B(B_VARIN,,MXdgcHg1PouOnRop,19,9,21,11,);
B(B_VARIN,,MXdgcHg2PouOnRop,19,10,21,12,);
B(B_F,@OR-2,,21,8,26,12,);
L(21,1,21,4);
L(21,5,22,5);
L(21,5,21,6);
L(21,4,22,4);
L(27,4,27,6);
L(27,6,28,6);
L(35,6,35,11);
L(35,11,36,11);
L(34,10,36,10);
L(33,6,35,6);
L(26,10,27,10);
L(27,8,27,10);
L(27,8,28,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 44 ;
        NETWORK_BODY
B(B_COMMENT,,set error hoisting gear,1,1,27,2,);
B(B_VARIN,,IXhgRelFreefall,30,3,32,5,);
B(B_F,@AND-2,,25,5,30,9,);
B(B_VARIN,,MDhg1JoySignal,9,25,11,27,);
B(B_VARIN,,0.0,9,26,11,28,);
B(B_VARIN,,MXhg1ErrPressInd,16,15,18,17,);
B(B_VARIN,,MXhg1pselFreefal,16,16,18,18,);
B(B_VARIN,,LXhg1ErrorRopeMe,16,17,18,19,);
B(B_VARIN,,MXhg1LocStopRapU,16,19,18,21,);
B(B_VARIN,,LXhg1AutomError,16,18,18,20,);
B(B_VARIN,,MXhg1LocStopRapD,16,20,18,22,);
B(B_F,@NE,,11,24,16,28,);
B(B_VARIN,,LXhg1ErrorPoToRo,16,21,18,23,);
B(B_VARIN,,LXrlmDiffStopHg1,16,22,18,24,);
B(B_F,@OR-9,,18,14,23,25,);
B(B_F,@AND-2,,25,13,30,17,);
B(B_VARIN,,IXadDynGrouCoHg1,22,12,24,14,);
B(B_VAROUT,,LXstopByHgError,38,12,40,14,);
B(B_F,@OR-4,,33,11,38,17,N);
B(B_VARIN,,MXhg2ErrPressInd,16,30,18,32,);
B(B_VARIN,,MXhg2pselFreefal,16,31,18,33,);
B(B_VARIN,,LXhg2ErrorRopeMe,16,32,18,34,);
B(B_VARIN,,MXhg2LocStopRapU,16,34,18,36,);
B(B_VARIN,,LXhg2AutomError,16,33,18,35,);
B(B_VARIN,,MXhg2LocStopRapD,16,35,18,37,);
B(B_VARIN,,LXhg2ErrorPoToRo,16,36,18,38,);
B(B_VARIN,,MDhg2JoySignal,9,40,11,42,);
B(B_VARIN,,0.0,9,41,11,43,);
B(B_F,@NE,,11,39,16,43,);
B(B_VARIN,,LXrlmDiffStopHg2,16,37,18,39,);
B(B_F,@OR-9,,18,29,23,40,);
B(B_F,@AND-2,,25,28,30,32,);
B(B_VARIN,,IXadDynGrouCoHg2,22,27,24,29,);
B(B_VARIN,,MXhg1EnabFastSpe,9,7,11,9,);
B(B_VARIN,,MXhg2EnabFastSpe,9,8,11,10,);
B(B_F,@XOR-2,,11,6,16,10,);
B(B_F,@OR-2,,18,6,23,10,);
B(B_VARIN,,LXrlmDiffStopHg,15,10,17,12,);
B(B_VARIN,,LXbothWinches,22,4,24,6,);
L(30,7,31,7);
L(31,7,31,14);
L(32,4,32,13);
L(23,8,25,8);
L(24,7,25,7);
L(24,5,24,7);
L(17,24,17,26);
L(16,26,17,26);
L(17,24,18,24);
L(24,13,24,15);
L(24,15,25,15);
L(23,16,25,16);
L(31,14,33,14);
L(32,13,33,13);
L(17,39,17,41);
L(16,41,17,41);
L(17,39,18,39);
L(24,28,24,30);
L(24,30,25,30);
L(23,31,25,31);
L(30,30,31,30);
L(31,16,31,30);
L(30,15,33,15);
L(31,16,33,16);
L(16,8,18,8);
L(17,9,18,9);
L(17,9,17,11);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_VARIN,,IXadDynGrouCoHg2,9,6,11,8,);
B(B_VARIN,,IXadDynGrouCoHg1,9,5,11,7,);
B(B_COMMENT,,check dgc with both winches or with one winch,1,1,27,2,);
B(B_VAROUT,,LXbothWinches,23,5,25,7,);
B(B_FB,SR,SR1,18,4,23,8,0N);
B(B_VARIN,,LXdgcActive,15,10,17,12,);
B(B_F,@AND-4,,11,4,16,10,);
B(B_VARIN,,MXhg2Preselect,9,8,11,10,);
B(B_VARIN,,MXhg1Preselect,9,7,11,9,);
L(17,7,18,7);
L(17,7,17,11);
L(16,6,18,6);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_COMMENT,,check the beates per cycles,1,1,27,2,);
B(B_F,sel,,12,5,17,10,);
B(B_VARIN,,MDdgcBeats,10,7,12,9,);
B(B_F,sel,,19,4,24,9,);
B(B_VARIN,,MXdgcActiveHg1,16,3,18,5,);
B(B_VARIN,,LDhg2Beats,10,8,12,10,);
B(B_VARIN,,LDhg1Beats,16,10,18,12,);
B(B_VARIN,,MXdgcActiveHg2,9,4,11,6,);
B(B_VAROUT,,MDdgcBeats,24,5,26,7,);
L(18,8,19,8);
L(18,8,18,11);
L(17,7,19,7);
L(18,6,19,6);
L(18,4,18,6);
L(11,7,12,7);
L(11,5,11,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 15 ;
        NETWORK_BODY
B(B_COMMENT,,reset beats,1,1,27,2,);
B(B_F,@AND-2,,27,8,32,12,);
B(B_VAROUT,,MXdgcNewPoint,32,9,34,11,);
B(B_FB,F_TRIG,F_TRIG5,12,9,19,12,);
B(B_VARIN,,LXcompactReached,11,6,13,8,);
B(B_VARIN,,LXbeatsReached,11,5,13,7,);
B(B_VARIN,,MXdgcAutomStart,9,12,11,14,);
B(B_FB,RS,RS12,20,8,25,12,);
B(B_F,@OR-3,,13,3,18,8,);
B(B_VARIN,,LXresetBeatsComp,11,4,13,6,);
B(B_VAROUT,,MXdgcPointFinish,19,4,21,6,);
L(26,11,27,11);
L(19,11,20,11);
L(26,11,26,13);
L(19,5,19,10);
L(11,11,12,11);
L(11,11,11,13);
L(11,13,26,13);
L(19,10,20,10);
L(25,10,27,10);
L(18,5,19,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_VARIN,,MXpdeDgcActive,15,6,17,8,);
B(B_VARIN,,MDdgcBeats,10,9,12,11,);
B(B_F,@GE-2,,12,8,17,12,);
B(B_VARIN,,MDdgcGivenBeats,10,10,12,12,);
B(B_VAROUT,,LXbeatsReached,34,8,36,10,);
B(B_F,@AND-2,,22,7,27,11,);
B(B_FB,R_TRIG,R_TRIG3,27,7,34,10,);
B(B_F,sel,,12,1,17,6,);
B(B_F,@OR-2,,17,1,22,5,0N);
B(B_VARIN,,MXdgcActiveHg1,10,2,12,4,);
B(B_VARIN,,LXcompacCheckHg2,10,3,12,5,);
B(B_VARIN,,LXcompacCheckHg1,10,4,12,6,);
L(17,10,22,10);
L(22,3,22,9);
L(17,4,17,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_VARIN,,MDdgcCompaction,9,3,11,5,);
B(B_F,@GE-2,,11,2,16,6,);
B(B_VARIN,,MDdgcGivenCompac,9,4,11,6,);
B(B_FB,R_TRIG,R_TRIG4,18,2,25,5,);
B(B_VAROUT,,LXcompactReached,25,3,27,5,);
L(16,4,18,4);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,select pressure for normal and fast speed,1,1,27,2,);
B(B_F,sel,,18,5,23,10,);
B(B_VARIN,,CDdgcHgPresPoOnR,16,7,18,9,);
B(B_VARIN,,CDdgcHgPresPORFS,16,8,18,10,);
B(B_VAROUT,,LDhgPresPouOnRop,23,6,25,8,);
B(B_F,@OR-2,,11,3,16,7,);
B(B_VARIN,,QTXhg1FastSpeed,9,4,11,6,);
B(B_VARIN,,QTXhg2FastSpeed,9,5,11,7,);
L(17,7,18,7);
L(16,5,17,5);
L(17,5,17,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 35 ;
        NETWORK_BODY
B(B_VAROUT,,MXdgcHg1SlipFall,43,12,45,14,);
B(B_VAROUT,,MXdgcHg1FreeFall,43,13,45,15,);
B(B_VAROUT,,MXdgcHg1SlowDown,43,14,45,16,);
B(B_VAROUT,,LDhg1SigPouToRop,43,16,45,18,);
B(B_VAROUT,,LXhg1ClutchExt,43,15,45,17,);
B(B_COMMENT,,hg1 automatic,1,1,27,2,);
B(B_VAROUT,,MDdgcHg1RelHight,43,18,45,20,);
B(B_VAROUT,,LDhg1Beats,43,19,45,21,);
B(B_VAROUT,,LDhg1Compaction,43,20,45,22,);
B(B_VAROUT,,LDhg1CluSigSliCl,43,17,45,19,);
B(B_VAROUT,,MXdgcHg1PouOnRop,44,11,46,13,);
B(B_VAROUT,,MXdgcHg1GtPoToRo,45,10,47,12,);
B(B_VARIN,,MXdgcActiveHg1,17,4,19,6,);
B(B_VAROUT,,LXhg1AutomError,43,22,45,24,);
B(B_VARIN,,MDhg1JoySignal,36,29,38,31,);
B(B_VARIN,,0.0,36,30,38,32,);
B(B_F,@EQ-2,,38,28,43,32,);
B(B_VAROUT,,LX1work,57,27,59,29,);
B(B_FB,RS,RS9,52,26,57,30,);
B(B_VAROUT,,LXcompacCheckHg1,43,21,45,23,);
B(B_F,@OR-2,,45,6,50,10,N);
B(B_FB,RS,RS8,52,3,57,7,);
B(B_VAROUT,,MXdgcResRopeHg1,57,4,59,6,);
B(B_FB,R_TRIG,R_TRIG5,45,3,52,6,);
B(B_F,@AND-3,,45,27,50,32,N0N);
B(B_VARIN,,MXhg1ClutchExt,42,32,44,34,);
B(B_VARIN,,MDhg1PressMemory,18,16,20,18,);
B(B_VARIN,,MDhg1SystemPress,18,15,20,17,);
B(B_VARIN,,LXhg1WinchWorkin,18,14,20,16,);
B(B_VARIN,,MDhg1RopeLenWin,18,20,20,22,);
B(B_VARIN,,MDdgcGivenHight,18,18,20,20,);
B(B_VARIN,,MDdgcGivSlowDown,18,19,20,21,);
B(B_VARIN,,LDhgPresPouOnRop,18,17,20,19,);
B(B_VARIN,,CDdgcHgSlipClut,18,21,20,23,);
B(B_VARIN,,LXpouStartFallin,18,22,20,24,);
B(B_VAROUT,,LXhg1Brake,19,28,21,30,);
B(B_VARIN,,1,18,24,20,26,);
B(B_VARIN,,CXdgcSlipFallOff,18,23,20,25,);
B(B_F,@AND-2,,10,10,15,14,);
B(B_VARIN,,IXhg1StandStInd,8,12,10,14,);
B(B_VARIN,,LXhg1WinchStand,8,11,10,13,);
B(B_VARIN,,MXdgcAutomStart,16,5,18,7,);
B(B_VARIN,,MXdgcNewPoint,15,8,17,10,);
B(B_FB,ADdynGCAutomV015,automatic1,20,9,43,28,);
B(B_F,@OR-2,,13,27,18,31,);
B(B_VARIN,,QXhg1BrakeNormal,11,28,13,30,);
B(B_VARIN,,QXhg1BrakeFastSp,11,29,13,31,);
B(B_VARIN,,LXsetPouFallin,18,25,20,27,);
L(19,5,19,11);
L(44,9,44,12);
L(43,30,45,30);
L(44,24,44,29);
L(51,24,51,28);
L(51,28,52,28);
L(44,9,45,9);
L(51,6,52,6);
L(51,6,51,8);
L(50,8,51,8);
L(19,5,45,5);
L(44,5,44,8);
L(44,8,45,8);
L(44,29,45,29);
L(50,29,52,29);
L(44,31,45,31);
L(44,31,44,33);
L(19,27,19,29);
L(19,27,20,27);
L(15,12,16,12);
L(16,12,16,14);
L(18,6,18,12);
L(17,9,17,13);
L(19,11,20,11);
L(43,11,45,11);
L(18,12,20,12);
L(43,12,44,12);
L(17,13,20,13);
L(16,14,20,14);
L(43,24,51,24);
L(18,29,19,29);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 34 ;
        NETWORK_BODY
B(B_COMMENT,,hg2 automatic,1,1,27,2,);
B(B_VAROUT,,MXdgcHg2SlipFall,43,11,45,13,);
B(B_VAROUT,,MXdgcHg2FreeFall,43,12,45,14,);
B(B_VAROUT,,MXdgcHg2SlowDown,43,13,45,15,);
B(B_VAROUT,,LDhg2SigPouToRop,43,15,45,17,);
B(B_VARIN,,MXdgcActiveHg2,17,3,19,5,);
B(B_VAROUT,,MDdgcHg2RelHight,43,17,45,19,);
B(B_VAROUT,,LDhg2Beats,43,18,45,20,);
B(B_VAROUT,,LDhg2Compaction,43,19,45,21,);
B(B_VAROUT,,LDhg2CluSigSliCl,43,16,45,18,);
B(B_VAROUT,,LXhg2ClutchExt,43,14,45,16,);
B(B_VAROUT,,MXdgcHg2GtPoToRo,45,9,47,11,);
B(B_VAROUT,,MXdgcHg2PouOnRop,44,10,46,12,);
B(B_VAROUT,,LX2work,57,26,59,28,);
B(B_F,@EQ-2,,38,27,43,31,);
B(B_VARIN,,MDhg2JoySignal,36,28,38,30,);
B(B_VARIN,,0.0,36,29,38,31,);
B(B_VAROUT,,LXhg2AutomError,43,21,45,23,);
B(B_VAROUT,,LXcompacCheckHg2,43,20,45,22,);
B(B_VAROUT,,MXdgcResRopeHg2,57,3,59,5,);
B(B_FB,RS,RS10,52,2,57,6,);
B(B_F,@OR-2,,45,5,50,9,N);
B(B_FB,R_TRIG,R_TRIG6,45,2,52,5,);
B(B_F,@AND-3,,45,26,50,31,N0N);
B(B_VARIN,,MXhg2ClutchExt,42,31,44,33,);
B(B_VARIN,,MDhg2PressMemory,18,15,20,17,);
B(B_VARIN,,MDhg2SystemPress,18,14,20,16,);
B(B_VARIN,,LXhg2WinchWorkin,18,13,20,15,);
B(B_VARIN,,MDhg2RopeLenWin,18,19,20,21,);
B(B_VARIN,,MDdgcGivenHight,18,17,20,19,);
B(B_VARIN,,MDdgcGivSlowDown,18,18,20,20,);
B(B_VARIN,,LDhgPresPouOnRop,18,16,20,18,);
B(B_VARIN,,CDdgcHgSlipClut,18,20,20,22,);
B(B_VARIN,,LXpouStartFallin,18,21,20,23,);
B(B_VARIN,,2,18,23,20,25,);
B(B_VARIN,,CXdgcSlipFallOff,18,22,20,24,);
B(B_F,@AND-2,,10,9,15,13,);
B(B_VARIN,,IXhg2StandStInd,8,11,10,13,);
B(B_VARIN,,LXhg2WinchStand,8,10,10,12,);
B(B_VARIN,,MXdgcAutomStart,16,4,18,6,);
B(B_VARIN,,MXdgcNewPoint,15,7,17,9,);
B(B_FB,ADdynGCAutomV015,automatic2,20,8,43,27,);
B(B_VARIN,,QXhg2BrakeNormal,11,27,13,29,);
B(B_VARIN,,QXhg2BrakeFastSp,11,28,13,30,);
B(B_F,@OR-2,,13,26,18,30,);
B(B_VAROUT,,LXhg2Brake,19,27,21,29,);
B(B_VARIN,,LXsetPouFallin,18,24,20,26,);
B(B_FB,RS,RS11,52,25,57,29,);
L(19,4,19,10);
L(44,8,44,11);
L(44,23,44,28);
L(51,23,51,27);
L(44,23,51,23);
L(43,29,45,29);
L(44,8,45,8);
L(51,5,51,7);
L(50,7,51,7);
L(51,5,52,5);
L(44,7,45,7);
L(19,4,45,4);
L(44,4,44,7);
L(44,28,45,28);
L(50,28,52,28);
L(44,30,45,30);
L(44,30,44,32);
L(15,11,16,11);
L(16,11,16,13);
L(18,5,18,11);
L(17,8,17,12);
L(19,10,20,10);
L(43,10,45,10);
L(18,11,20,11);
L(43,11,44,11);
L(17,12,20,12);
L(16,13,20,13);
L(43,23,44,23);
L(18,28,19,28);
L(19,26,19,28);
L(19,26,20,26);
L(51,27,52,27);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 34 ;
        NETWORK_BODY
B(B_COMMENT,,set winch signals,1,1,27,2,);
B(B_VAROUT,,MDdgcHgCluchSig,35,10,37,12,);
B(B_VARIN,,MXdgcActiveHg1,9,9,11,11,);
B(B_VARIN,,MXdgcActiveHg2,9,10,11,12,);
B(B_VARIN,,QTXhg1FastSpeed,9,11,11,13,);
B(B_VARIN,,QTXhg2FastSpeed,9,12,11,14,);
B(B_VARIN,,MXdgcHg1GtPoToRo,9,15,11,17,);
B(B_VARIN,,MXdgcHg2GtPoToRo,9,16,11,18,);
B(B_VARIN,,MXdgcHg1PouOnRop,9,17,11,19,);
B(B_VARIN,,MXdgcHg2PouOnRop,9,18,11,20,);
B(B_VARIN,,MXdgcHg1SlipFall,9,19,11,21,);
B(B_VARIN,,MXdgcHg2SlipFall,9,20,11,22,);
B(B_VARIN,,MXdgcHg1FreeFall,9,21,11,23,);
B(B_VARIN,,MXdgcHg2FreeFall,9,22,11,24,);
B(B_VARIN,,MXdgcHg1SlowDown,9,23,11,25,);
B(B_VARIN,,LXhg1Brake,9,13,11,15,);
B(B_VARIN,,LXhg2Brake,9,14,11,16,);
B(B_VARIN,,LXbothWinches,9,8,11,10,);
B(B_VAROUT,,LXpouStartFallin,35,11,37,13,);
B(B_VARIN,,LDhg1SigPouToRop,9,25,11,27,);
B(B_VARIN,,MXdgcHg2SlowDown,9,24,11,26,);
B(B_VARIN,,CDdgcHgSlipClut,9,27,11,29,);
B(B_VARIN,,LDhg1CluSigSliCl,9,28,11,30,);
B(B_VARIN,,LDhg2SigPouToRop,9,26,11,28,);
B(B_VARIN,,LDhg2CluSigSliCl,9,29,11,31,);
B(B_F,sel,,47,1,52,6,);
B(B_VAROUT,,MDhg1ExtAnalSign,52,2,54,4,);
B(B_F,sel,,47,6,52,11,);
B(B_VAROUT,,MDhg2ExtAnalSign,52,7,54,9,);
B(B_VARIN,,MDhg1ExtAnalSign,45,3,47,5,);
B(B_VARIN,,MDhg2ExtAnalSign,45,8,47,10,);
B(B_VARIN,,LXhg1ExtAnalSign,45,2,47,4,);
B(B_VARIN,,LXhg2ExtAnalSign,45,7,47,9,);
B(B_VAROUT,,MXdgcLockHg1Trim,52,12,54,14,);
B(B_FB,TOF,TOF3,47,11,52,15,);
B(B_FB,TOF,TOF4,47,15,52,19,);
B(B_VAROUT,,MXdgcLockHg2Trim,52,16,54,18,);
B(B_VARIN,,T#1s,44,17,46,19,);
B(B_VAROUT,,MXhg2ClutchExt,34,15,36,17,);
B(B_VAROUT,,MXhg1ClutchExt,34,14,36,16,);
B(B_VARIN,,LXhg2ClutchExt,9,31,11,33,);
B(B_VARIN,,LXhg1ClutchExt,9,30,11,32,);
B(B_FB,ADdynGCWinchV024,set_winch_sig1,11,7,34,33,);
B(B_VAROUT,,LXsetPouFallin,34,16,36,18,);
L(35,5,35,9);
L(35,5,47,5);
L(46,14,46,18);
L(46,14,47,14);
L(46,18,47,18);
L(45,14,45,17);
L(45,17,47,17);
L(34,9,35,9);
L(34,10,47,10);
L(34,11,35,11);
L(34,12,35,12);
L(34,13,47,13);
L(34,14,45,14);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 14 ;
        NETWORK_BODY
B(B_COMMENT,,check the compaction,1,1,27,2,);
B(B_F,sel,,12,6,17,11,);
B(B_VARIN,,MDdgcCompaction,10,8,12,10,);
B(B_F,sel,,19,5,24,10,);
B(B_VARIN,,MXdgcActiveHg1,16,4,18,6,);
B(B_VARIN,,LDhg1Compaction,16,11,18,13,);
B(B_VARIN,,LDhg2Compaction,10,9,12,11,);
B(B_VARIN,,MXdgcActiveHg2,9,5,11,7,);
B(B_F,abs,,26,5,31,8,);
B(B_VAROUT,,MDdgcCompaction,31,6,33,8,);
L(18,9,19,9);
L(18,9,18,12);
L(17,8,19,8);
L(18,7,19,7);
L(18,5,18,7);
L(11,8,12,8);
L(11,6,11,8);
L(24,7,26,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_COMMENT,,power stage hg1 clutch,1,1,27,2,);
B(B_VARIN,,TRUE,9,5,11,7,);
B(B_VARIN,,MDdgcHgCluchSig,9,6,11,8,);
B(B_FB,PowerStage,PowerStage1,11,4,20,12,);
B(B_VAROUT,,QWhgDynGrouComp,20,5,22,7,);
B(B_VARIN,,CWdgcMinCurrClu,9,9,11,11,);
B(B_VARIN,,CWdgcMaxCurrClu,9,10,11,12,);
B(B_VARIN,,0.0,9,7,11,9,);
B(B_VARIN,,100.0,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_COMMENT,,set hydraulical connection winch 1 and 2 ,1,1,27,2,);
B(B_F,@AND-2,,11,3,16,7,);
B(B_VARIN,,MXdgcHg2PouOnRop,9,5,11,7,);
B(B_VARIN,,MXdgcHg1PouOnRop,9,4,11,6,);
B(B_VAROUT,,QXhg1_2connectio,16,4,18,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_COMMENT,,set hydraulical connection brake pedal winch 1 and 2,1,1,27,2,);
B(B_F,@AND-2,,11,3,16,7,);
B(B_VARIN,,MXdgcActiveHg1,9,4,11,6,);
B(B_VARIN,,MXdgcActiveHg2,9,5,11,7,);
B(B_VAROUT,,QXconBrakePedals,16,4,18,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,reset beat counter when dgc page not active (preselected),1,1,27,2,);
B(B_VAROUT,,LXresetBeatsComp,11,3,13,5,);
B(B_VARIN,,FALSE,9,3,11,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL := exit: ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,exit program,1,1,27,2,);
B(B_VARIN,,TRUE,9,3,11,5,);
B(B_RETURN,,,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL := notwork: ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_COMMENT,,set the analog clutch valve when dgc not running,1,1,27,2,);
B(B_VARIN,,MXminEngineSpeed,9,5,11,7,);
B(B_VARIN,,100.0,9,6,11,8,);
B(B_FB,PowerStage,PowerStage1,11,4,20,12,);
B(B_VAROUT,,QWhgDynGrouComp,20,5,22,7,);
B(B_VARIN,,CWdgcMinCurrClu,9,9,11,11,);
B(B_VARIN,,CWdgcMaxCurrClu,9,10,11,12,);
B(B_VARIN,,0.0,9,7,11,9,);
B(B_VARIN,,100.0,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 5 ;
        NETWORK_BODY
B(B_COMMENT,,reset beat counter and compaction when dgc page not preselected,1,1,27,2,);
B(B_VARIN,,TRUE,8,3,10,5,);
B(B_VAROUT,,LXresetBeatsComp,10,3,12,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,0.0,8,1,10,3,);
B(B_VAROUT,,MDdgcBeats,10,1,12,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,0.0,8,1,10,3,);
B(B_VAROUT,,MDdgcCompaction,10,1,12,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,exit program,1,1,27,2,);
B(B_VARIN,,TRUE,9,3,11,5,);
B(B_RETURN,,,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL := init: ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,init additional device program,1,1,27,2,);
B(B_VARIN,,TRUE,9,3,11,5,);
B(B_VAROUT,,LXinitOk,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,reset beat counter and compaction,1,1,27,2,);
B(B_VARIN,,TRUE,8,3,10,5,);
B(B_VAROUT,,LXresetBeatsComp,10,3,12,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value dynamic ground compaction,1,1,27,2,);
B(B_FB,CorrValue_Bool,CorrValue_Bool1,11,4,23,10,);
B(B_VARIN,,CXadDynGrouComp,9,8,11,10,);
B(B_VARIN,,FALSE,9,5,11,7,);
B(B_VARIN,,FALSE,9,6,11,8,);
B(B_VARIN,,TRUE,9,7,11,9,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value dynamic ground compaction,1,1,27,2,);
B(B_FB,CorrValue_Bool,CorrValue_Bool2,11,4,23,10,);
B(B_VARIN,,CXdgcSlipFallOff,9,8,11,10,);
B(B_VARIN,,FALSE,9,5,11,7,);
B(B_VARIN,,FALSE,9,6,11,8,);
B(B_VARIN,,TRUE,9,7,11,9,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value dynamic ground compaction,1,1,27,2,);
B(B_FB,CorrValue_Bool,CorrValue_Bool3,11,4,23,10,);
B(B_VARIN,,CXdgcBlockLml,9,8,11,10,);
B(B_VARIN,,FALSE,9,5,11,7,);
B(B_VARIN,,FALSE,9,6,11,8,);
B(B_VARIN,,TRUE,9,7,11,9,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,ad dynamic ground compaction analog signal for slipping clutch hg,1,1,27,2,);
B(B_FB,CorrValue_Real,CorrValue_Real1,11,4,23,10,);
B(B_VARIN,,50.0,9,5,11,7,);
B(B_VARIN,,0.0,9,6,11,8,);
B(B_VARIN,,100.0,9,7,11,9,);
B(B_VARIN,,CDdgcHgSlipClut,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,ad dynamic ground compaction rope tension at rubbing clutch,1,1,27,2,);
B(B_FB,CorrValue_Real,CorrValue_Real2,11,4,23,10,);
B(B_VARIN,,80.0,9,5,11,7,);
B(B_VARIN,,0.0,9,6,11,8,);
B(B_VARIN,,400.0,9,7,11,9,);
B(B_VARIN,,CDdgcHgPresPoOnR,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,ad dynamic ground compaction rope tension at rubbing clutch,1,1,27,2,);
B(B_FB,CorrValue_Real,CorrValue_Real3,11,4,23,10,);
B(B_VARIN,,90.0,9,5,11,7,);
B(B_VARIN,,0.0,9,6,11,8,);
B(B_VARIN,,400.0,9,7,11,9,);
B(B_VARIN,,CDdgcHgPresPORFS,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,ad counter hg1 impulse per rotation,1,1,27,2,);
B(B_FB,CorrValue_Real,CorrValue_Real4,11,4,23,10,);
B(B_VARIN,,24.0,9,5,11,7,);
B(B_VARIN,,0.0,9,6,11,8,);
B(B_VARIN,,500.0,9,7,11,9,);
B(B_VARIN,,CDhg1ImpAdCount,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,ad counter hg2 impulse per rotation,1,1,27,2,);
B(B_FB,CorrValue_Real,CorrValue_Real5,11,4,23,10,);
B(B_VARIN,,24.0,9,5,11,7,);
B(B_VARIN,,0.0,9,6,11,8,);
B(B_VARIN,,500.0,9,7,11,9,);
B(B_VARIN,,CDhg2ImpAdCount,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,winch waiting cm,1,1,27,2,);
B(B_FB,CorrValue_Real,CorrValue_Real6,11,4,23,10,);
B(B_VARIN,,25.0,9,5,11,7,);
B(B_VARIN,,5.0,9,6,11,8,);
B(B_VARIN,,50.0,9,7,11,9,);
B(B_VARIN,,CDwinchWait,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value minimum current clutch valve,1,1,27,2,);
B(B_FB,CorrValue_UInt,CorrValue_UInt1,11,4,23,10,);
B(B_VARIN,,70,9,5,11,7,);
B(B_VARIN,,0,9,6,11,8,);
B(B_VARIN,,300,9,7,11,9,);
B(B_VARIN,,CWdgcMinCurrClu,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value maximum current clutch valve,1,1,27,2,);
B(B_FB,CorrValue_UInt,CorrValue_UInt2,11,4,23,10,);
B(B_VARIN,,450,9,5,11,7,);
B(B_VARIN,,300,9,6,11,8,);
B(B_VARIN,,1000,9,7,11,9,);
B(B_VARIN,,CWdgcMaxCurrClu,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
END_BODY
END_PROGRAM

PROGRAM ADgrabContV050
(*name of author: Manfred Schapler
version: 1.0
date: 03/99
modification:*)
(*name of author: Manfred Schapler
version: 1.0
date: 04/97
modification:*)
	VAR_EXTERNAL 
		IXentrySwiClosed: BOOL:=FALSE;
			(*entry switch closed*)
		ITXgrabCtrl: BOOL:=FALSE;
			(*preselection grab control (winch synchronisation) *)
		QXhg1_2connectio: BOOL:=FALSE;
			(*connection hg 1 & 2*)
		QXhg1BrakeNormal: BOOL:=FALSE;
			(*HG 1 brake normal speed operation*)
		QXhg1BrakeFastSp: BOOL:=FALSE;
			(*HG 1 brake fast speed operation*)
		QXhg1Clutch: BOOL:=FALSE;
			(*HG 1 clutch*)
		QXhg2BrakeNormal: BOOL:=FALSE;
			(*HG 2 brake normal speed operation*)
		QXhg2BrakeFastSp: BOOL:=FALSE;
			(*HG 2 brake fast speed operation*)
		QXhg2Clutch: BOOL:=FALSE;
			(*HG 2 clutch*)
		QTXgrabCtrl: BOOL:=FALSE;
			(*enable grab control (winch synchronisation) *)
		QTXhg1FastSpeed: BOOL:=FALSE;
			(*enable hg1 fast speed operation *)
		QTXhg2FastSpeed: BOOL:=FALSE;
			(*enable hg2 fast speed operation *)
		MXadGrabCoWork: BOOL:=FALSE;
			(*ad grab control working*)
		MXhg2ExtAnalSign: BOOL:=FALSE;
			(*HG 2 other, external analog signal*)
		MXhg1LocStopInt: BOOL:=FALSE;
			(*HG 1 local stop integrated*)
		MXhg1LocStopRapU: BOOL:=FALSE;
			(*HG 1 local stop rapid lifting*)
		MXhg1LocStopRapD: BOOL:=FALSE;
			(*HG 1 local stop rapid lowering*)
		MXhg2LocStopInt: BOOL:=FALSE;
			(*HG 2 local stop integrated*)
		MXhg2LocStopRapU: BOOL:=FALSE;
			(*HG 2 local stop rapid lifting*)
		MXhg2LocStopRapD: BOOL:=FALSE;
			(*HG 2 local stop rapid lowering*)
		MXadStopHg1Up: BOOL:=FALSE;
			(*additional device stop hg1 lifting*)
		MXadStopHg2Up: BOOL:=FALSE;
			(*additional device stop hg2 lifting*)
		MXadStopHg1Dn: BOOL:=FALSE;
			(*additional device stop hg1 lowering*)
		MXadStopHg2Dn: BOOL:=FALSE;
			(*additional device stop hg2 lowering*)
		MXdgcActiveHg1: BOOL:=FALSE;
			(*ad dynamic ground compaction hg1 active*)
		MXdgcActiveHg2: BOOL:=FALSE;
			(*ad dynamic ground compaction hg2 active*)
		MXjoyWinchSyn: BOOL:=FALSE;
			(*ad winch synchronization preselection on joystick*)
		MXjoyGrapCont: BOOL:=FALSE;
			(*ad grap control preselection on joystick*)
		MXad3Hg1LockClut: BOOL:=FALSE;
			(*add.3 HG 1 global lock clutch*)
		MXad3Hg2LockClut: BOOL:=FALSE;
			(*add.3 HG 2 global lock clutch*)
		MXgrabContrByX23: BOOL:=FALSE;
			(*grab control by X23 switch preselect*)
		MXgrabCtrlPres: BOOL:=FALSE;
			(*grab control preselected *)
		MDhg1JoySignal: REAL:=0.0;
			(*HG 1 joystick signal in +/-[%]*)
		MDhg2ExtAnalSign: REAL:=0.0;
			(*HG 2 external analog signal in [%]*)
	END_VAR
	VAR_EXTERNAL CONSTANT RETAIN
		CXadGrabControl: BOOL:=FALSE;
			(*additional device winch synchronization*)
		CXadWinchSynchro: BOOL:=FALSE;
		CXgrabContrByX23: BOOL:=FALSE;
			(*add. grab control preselect by X23*)
		CXconTensWinch: BOOL:=FALSE;
			(*constant tension winch (fixed const tension, lowering)*)
	END_VAR
	VAR 
		LXadGrabControl: BOOL:=FALSE;
			(*additional device grab control preselceted*)
		LXenabGrabCont: BOOL:=FALSE;
		LXinitOk: BOOL:=FALSE;
		LXstart: BOOL:=FALSE;
		LX1: BOOL:=FALSE;
		LX2: BOOL:=FALSE;
		LX3: BOOL:=FALSE;
		LX4: BOOL:=FALSE;
		LXhg1Clutch: BOOL:=FALSE;
		LXhg2Clutch: BOOL:=FALSE;
		RS1: RS;
		RS2: RS;
		RS3: RS;
		RS4: RS;
		RS5: RS;
		RS6: RS;
		RS7: RS;
		RS8: RS;
		F_TRIG1: F_TRIG;
		F_TRIG2: F_TRIG;
		F_TRIG3: F_TRIG;
		F_TRIG4: F_TRIG;
		CorrValue_Bool1: CorrValue_Bool;
		CorrValue_Bool2: CorrValue_Bool;
	END_VAR
'FBD'
BODY
    WORKSPACE
        NETWORK_LIST_TYPE := NWTYPEFBD ;
        ACTIVE_NETWORK := 0 ;
    END_WORKSPACE
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_COMMENT,,init first time,1,1,27,2,);
B(B_VARIN,,LXinitOk,9,4,11,6,);
B(B_F,not,,11,3,16,6,);
B(B_JUMP,,init,16,4,18,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 17 ;
        NETWORK_BODY
B(B_F,sel,,18,11,23,16,);
B(B_VARIN,,LXadGrabControl,16,14,18,16,);
B(B_VARIN,,CXadGrabControl,16,13,18,15,);
B(B_VARIN,,IXentrySwiClosed,9,10,11,12,);
B(B_VARIN,,LXstart,9,11,11,13,);
B(B_COMMENT,,protect correction value change while program activ,1,1,27,2,);
B(B_F,@AND-2,,11,9,16,13,);
B(B_VARIN,,CXadWinchSynchro,22,7,24,9,);
B(B_F,@AND-3,,26,9,31,14,NN);
B(B_VAROUT,,LXenabGrabCont,31,10,33,12,);
B(B_F,@OR-2,,19,3,24,7,);
B(B_VARIN,,MXdgcActiveHg1,17,4,19,6,);
B(B_VARIN,,MXdgcActiveHg2,17,5,19,7,);
B(B_VAROUT,,LXadGrabControl,24,14,26,16,);
L(17,11,17,13);
L(17,13,18,13);
L(16,11,17,11);
L(23,13,26,13);
L(24,8,24,12);
L(24,12,26,12);
L(25,11,26,11);
L(24,5,25,5);
L(25,5,25,11);
L(24,13,24,15);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VAROUT,,LXstart,11,1,13,3,);
B(B_VARIN,,TRUE,9,1,11,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_COMMENT,,jump if no "grab control by X23" is preselected,1,1,27,2,);
B(B_VARIN,,CXgrabContrByX23,9,4,11,6,);
B(B_F,not,,16,3,21,6,);
B(B_VARIN,,MXgrabContrByX23,9,5,11,7,);
B(B_F,@OR-2,,11,3,16,7,);
B(B_JUMP,,nogrco,21,4,23,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 17 ;
        NETWORK_BODY
B(B_COMMENT,,preselection grab control by switch 22 of X23,1,1,27,2,);
B(B_VARIN,,ITXgrabCtrl,9,7,11,9,);
B(B_FB,F_TRIG,F_TRIG4,11,6,18,9,);
B(B_VARIN,,CXgrabContrByX23,17,3,19,5,);
B(B_F,@AND-2,,21,5,26,9,);
B(B_F,@AND-3,,21,9,26,14,);
B(B_VARIN,,MXgrabContrByX23,19,12,21,14,);
B(B_FB,RS,RS8,36,5,41,9,);
B(B_VAROUT,,QTXgrabCtrl,42,6,44,8,);
B(B_VAROUT,,MXgrabContrByX23,42,7,44,9,);
B(B_VARIN,,CXgrabContrByX23,25,14,27,16,);
B(B_F,@OR-3,,29,9,34,14,0N);
B(B_VARIN,,CXconTensWinch,26,15,28,17,);
L(18,8,21,8);
L(19,7,21,7);
L(19,4,19,7);
L(20,8,20,11);
L(20,11,21,11);
L(19,7,19,12);
L(19,12,21,12);
L(41,7,42,7);
L(42,7,42,8);
L(35,8,35,11);
L(35,8,36,8);
L(27,12,29,12);
L(26,7,36,7);
L(26,11,29,11);
L(34,11,35,11);
L(27,12,27,15);
L(28,13,28,16);
L(28,13,29,13);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL := nogrco: ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 17 ;
        NETWORK_BODY
B(B_VAROUT,,MXad3Hg2LockClut,42,6,44,8,);
B(B_VAROUT,,MXad3Hg1LockClut,42,5,44,7,);
B(B_FB,RS,RS7,36,4,41,8,);
B(B_COMMENT,,lock clutch ,1,1,27,2,);
B(B_F,@AND-2,,29,11,34,15,N);
B(B_F,@AND-2,,29,4,34,8,);
B(B_VARIN,,MXjoyWinchSyn,20,6,22,8,);
B(B_VARIN,,MXjoyGrapCont,20,7,22,9,);
B(B_VARIN,,LXenabGrabCont,26,3,28,5,);
B(B_F,@OR-3,,22,5,27,10,);
B(B_F,EQ_R,,11,12,16,16,);
B(B_VARIN,,0.0,9,14,11,16,);
B(B_VARIN,,MDhg1JoySignal,9,13,11,15,);
B(B_VARIN,,MXgrabContrByX23,15,10,17,12,);
B(B_F,@AND-2,,17,9,22,13,0N);
L(41,6,42,6);
L(42,6,42,7);
L(35,7,35,13);
L(35,7,36,7);
L(28,13,29,13);
L(34,13,35,13);
L(34,6,36,6);
L(28,7,28,13);
L(28,4,28,6);
L(28,6,29,6);
L(27,7,29,7);
L(16,14,29,14);
L(17,12,17,14);
L(22,9,22,11);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 15 ;
        NETWORK_BODY
B(B_VARIN,,MXjoyWinchSyn,9,4,11,6,);
B(B_VARIN,,MXjoyGrapCont,9,5,11,7,);
B(B_VARIN,,MXgrabContrByX23,9,6,11,8,);
B(B_F,@OR-3,,11,3,16,8,);
B(B_VARIN,,QTXhg1FastSpeed,9,9,11,11,);
B(B_VARIN,,QTXhg2FastSpeed,9,10,11,12,);
B(B_F,@XOR-2,,11,8,16,12,);
B(B_F,@AND-3,,18,3,23,8,0N);
B(B_VARIN,,LXenabGrabCont,16,12,18,14,);
B(B_COMMENT,,preselection grab control ,1,1,27,2,);
B(B_VAROUT,,MXgrabCtrlPres,23,4,25,6,);
L(16,5,18,5);
L(17,6,18,6);
L(17,6,17,10);
L(16,10,17,10);
L(18,7,18,13);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 28 ;
        NETWORK_BODY
B(B_COMMENT,,exit program when grab control not enabled or not active,1,1,27,2,);
B(B_RETURN,,,46,4,48,6,);
B(B_COMMENT,,make shure that all stop bits areø^reseted when the program willø^not be scaned.,41,11,54,14,);
B(B_F,@AND-6,,41,3,46,11,0NNNNN);
B(B_FB,F_TRIG,F_TRIG2,13,19,20,22,);
B(B_VARIN,,QXhg1Clutch,10,17,12,19,);
B(B_F,@OR-2,,21,16,26,20,);
B(B_COMMENT,,um einen Durchlauf verz.,1,19,11,20,);
B(B_COMMENT,,um einen Durchlauf verz.,1,25,11,26,);
B(B_FB,F_TRIG,F_TRIG3,13,24,20,27,);
B(B_VARIN,,QXhg2Clutch,10,22,12,24,);
B(B_F,@OR-2,,21,21,26,25,);
B(B_VARIN,,LX1,34,11,36,13,);
B(B_VARIN,,LX2,35,12,37,14,);
B(B_VARIN,,LX3,36,13,38,15,);
B(B_VARIN,,LX4,37,14,39,16,);
B(B_VARIN,,MXadGrabCoWork,38,15,40,17,);
B(B_VAROUT,,LXhg1Clutch,28,17,30,19,);
B(B_VAROUT,,LXhg2Clutch,27,22,29,24,);
B(B_VARIN,,MXjoyWinchSyn,17,6,19,8,);
B(B_VARIN,,MXjoyGrapCont,17,7,19,9,);
B(B_F,@OR-3,,19,4,24,9,);
B(B_VARIN,,MXgrabContrByX23,17,5,19,7,);
B(B_F,@XOR-2,,19,9,24,13,);
B(B_VARIN,,QTXhg2FastSpeed,17,11,19,13,);
B(B_VARIN,,QTXhg1FastSpeed,17,10,19,12,);
B(B_F,@OR-5,,30,3,35,10,NN);
B(B_VARIN,,LXenabGrabCont,27,2,29,4,);
L(36,6,41,6);
L(37,7,41,7);
L(38,8,41,8);
L(39,9,41,9);
L(40,10,41,10);
L(25,7,25,11);
L(26,8,26,18);
L(12,18,12,21);
L(12,21,13,21);
L(20,21,21,21);
L(12,18,21,18);
L(21,19,21,21);
L(12,23,12,26);
L(12,26,13,26);
L(20,26,21,26);
L(21,24,21,26);
L(12,23,21,23);
L(27,9,27,23);
L(26,23,27,23);
L(36,6,36,12);
L(37,7,37,13);
L(38,8,38,14);
L(39,9,39,15);
L(40,10,40,16);
L(26,18,28,18);
L(25,7,30,7);
L(26,8,30,8);
L(27,9,30,9);
L(24,6,30,6);
L(24,11,25,11);
L(29,5,30,5);
L(35,5,41,5);
L(29,3,29,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 30 ;
        NETWORK_BODY
B(B_F,@OR-2,,13,7,18,11,);
B(B_VARIN,,MXhg1LocStopInt,10,9,12,11,);
B(B_F,@OR-2,,13,12,18,16,);
B(B_VARIN,,MXhg1LocStopRapU,11,8,13,10,);
B(B_VARIN,,MXhg1LocStopRapD,11,14,13,16,);
B(B_F,@OR-2,,13,18,18,22,);
B(B_VARIN,,MXhg2LocStopInt,10,20,12,22,);
B(B_F,@OR-2,,13,23,18,27,);
B(B_VARIN,,MXhg2LocStopRapU,11,19,13,21,);
B(B_VARIN,,MXhg2LocStopRapD,11,25,13,27,);
B(B_FB,RS,RS1,27,7,32,11,);
B(B_FB,RS,RS2,27,12,32,16,);
B(B_FB,RS,RS3,27,18,32,22,);
B(B_FB,RS,RS4,27,23,32,27,);
B(B_VAROUT,,MXadStopHg2Up,33,8,35,10,);
B(B_VAROUT,,MXadStopHg2Dn,33,13,35,15,);
B(B_VAROUT,,MXadStopHg1Up,33,19,35,21,);
B(B_VAROUT,,MXadStopHg1Dn,33,24,35,26,);
B(B_VAROUT,,LX1,33,9,35,11,);
B(B_VAROUT,,LX2,33,14,35,16,);
B(B_VAROUT,,LX3,33,20,35,22,);
B(B_VAROUT,,LX4,33,25,35,27,);
B(B_COMMENT,,stop both winches in case of one winch stop (release other direction),1,1,27,2,);
B(B_F,EQ_R,,20,3,25,7,);
B(B_F,@AND-2,,20,7,25,11,0N);
B(B_F,@AND-2,,20,12,25,16,0N);
B(B_VARIN,,0.0,18,5,20,7,);
B(B_VARIN,,MDhg1JoySignal,18,4,20,6,);
B(B_VARIN,,LXhg1Clutch,17,16,19,18,);
B(B_F,@AND-2,,20,18,25,22,0N);
B(B_F,@AND-2,,20,23,25,27,0N);
B(B_VARIN,,LXhg2Clutch,17,27,19,29,);
L(12,14,13,14);
L(12,10,12,14);
L(12,10,13,10);
L(12,25,13,25);
L(12,21,12,25);
L(12,21,13,21);
L(26,26,27,26);
L(26,21,27,21);
L(26,15,27,15);
L(26,10,27,10);
L(26,5,26,26);
L(32,9,33,9);
L(33,9,33,10);
L(32,14,33,14);
L(33,14,33,15);
L(32,20,33,20);
L(33,20,33,21);
L(32,25,33,25);
L(33,25,33,26);
L(25,5,26,5);
L(25,9,27,9);
L(18,9,20,9);
L(18,14,20,14);
L(25,14,27,14);
L(19,10,20,10);
L(19,10,19,17);
L(19,15,20,15);
L(18,20,20,20);
L(25,20,27,20);
L(18,25,20,25);
L(25,25,27,25);
L(19,21,19,28);
L(19,21,20,21);
L(19,26,20,26);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 35 ;
        NETWORK_BODY
B(B_VARIN,,LXenabGrabCont,17,9,19,11,);
B(B_VARIN,,MXhg1LocStopInt,17,10,19,12,);
B(B_COMMENT,,activate grab control,1,1,27,2,);
B(B_VARIN,,LXenabGrabCont,17,24,19,26,);
B(B_VARIN,,MXhg1LocStopInt,17,25,19,27,);
B(B_VARIN,,MXhg1LocStopRapU,17,12,19,14,);
B(B_VARIN,,MXhg2LocStopRapU,17,13,19,15,);
B(B_VARIN,,MXhg1LocStopRapD,17,27,19,29,);
B(B_VARIN,,MXhg2LocStopRapD,17,28,19,30,);
B(B_VARIN,,MXhg2LocStopInt,17,11,19,13,);
B(B_VARIN,,MXhg2LocStopInt,17,26,19,28,);
B(B_F,@OR-2,,33,9,38,13,);
B(B_VAROUT,,MXadGrabCoWork,38,10,40,12,);
B(B_VARIN,,MXjoyWinchSyn,10,5,12,7,);
B(B_VARIN,,MXjoyGrapCont,10,6,12,8,);
B(B_FB,RS,RS5,26,4,31,8,);
B(B_VARIN,,MXjoyWinchSyn,10,20,12,22,);
B(B_VARIN,,MXjoyGrapCont,10,21,12,23,);
B(B_FB,RS,RS6,26,19,31,23,);
B(B_VARIN,,MXgrabContrByX23,10,7,12,9,);
B(B_F,@OR-3,,12,4,17,9,);
B(B_VARIN,,MXgrabContrByX23,10,22,12,24,);
B(B_F,@OR-3,,12,19,17,24,);
B(B_VARIN,,QTXhg1FastSpeed,10,16,12,18,);
B(B_VARIN,,QTXhg2FastSpeed,10,17,12,19,);
B(B_F,@XOR-2,,12,15,17,19,);
B(B_VARIN,,QTXhg1FastSpeed,10,31,12,33,);
B(B_VARIN,,QTXhg2FastSpeed,10,32,12,34,);
B(B_F,@XOR-2,,12,30,17,34,);
B(B_F,@OR-7,,19,7,24,16,NN);
B(B_F,@OR-7,,19,22,24,31,NN);
L(25,7,25,9);
L(25,22,25,24);
L(32,12,33,12);
L(32,12,32,21);
L(32,11,33,11);
L(32,6,32,11);
L(17,30,17,32);
L(17,30,19,30);
L(18,6,18,9);
L(25,7,26,7);
L(31,6,32,6);
L(18,21,18,24);
L(25,22,26,22);
L(31,21,32,21);
L(17,6,26,6);
L(17,21,26,21);
L(18,15,19,15);
L(18,15,18,17);
L(17,17,18,17);
L(18,9,19,9);
L(24,9,25,9);
L(18,24,19,24);
L(24,24,25,24);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,control winch 2 by analog signal of winch 1,1,1,27,2,);
B(B_VARIN,,MXadGrabCoWork,9,3,11,5,);
B(B_F,sel,,12,5,17,10,);
B(B_VAROUT,,MXhg2ExtAnalSign,11,3,13,5,);
B(B_VAROUT,,MDhg2ExtAnalSign,17,6,19,8,);
B(B_VARIN,,MDhg2ExtAnalSign,10,7,12,9,);
B(B_VARIN,,MDhg1JoySignal,10,8,12,10,);
L(11,4,11,7);
L(11,7,12,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,set External analog signal of hg 2 to zero,1,1,27,2,);
B(B_FB,F_TRIG,F_TRIG1,11,4,18,7,);
B(B_VARIN,,MXadGrabCoWork,9,5,11,7,);
B(B_F,sel,,20,5,25,10,);
B(B_VAROUT,,MDhg2ExtAnalSign,25,6,27,8,);
B(B_VARIN,,MDhg2ExtAnalSign,18,7,20,9,);
B(B_VARIN,,0.0,18,8,20,10,);
L(19,7,20,7);
L(19,6,19,7);
L(18,6,19,6);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 18 ;
        NETWORK_BODY
B(B_COMMENT,,set hydraulical connection winch 1 and 2,1,1,27,2,);
B(B_F,@AND-2,,11,5,16,9,0N);
B(B_VARIN,,MXjoyGrapCont,9,7,11,9,);
B(B_VARIN,,MXadGrabCoWork,9,6,11,8,);
B(B_F,@OR-2,,18,4,23,8,);
B(B_VARIN,,MXgrabContrByX23,15,3,17,5,);
B(B_F,@AND-3,,25,8,30,13,);
B(B_VAROUT,,QXhg1_2connectio,30,9,32,11,);
B(B_VARIN,,QXhg1BrakeNormal,16,10,18,12,);
B(B_VARIN,,QXhg1BrakeFastSp,16,11,18,13,);
B(B_F,@OR-2,,18,9,23,13,);
B(B_F,@OR-2,,18,13,23,17,);
B(B_VARIN,,QXhg2BrakeNormal,16,14,18,16,);
B(B_VARIN,,QXhg2BrakeFastSp,16,15,18,17,);
L(16,7,18,7);
L(17,6,18,6);
L(17,4,17,6);
L(23,6,24,6);
L(24,6,24,10);
L(24,10,25,10);
L(24,12,24,15);
L(23,11,25,11);
L(24,12,25,12);
L(23,15,24,15);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,exit program,1,1,27,2,);
B(B_VARIN,,TRUE,9,3,11,5,);
B(B_RETURN,,,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL := init: ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,init additional device program,1,1,27,2,);
B(B_VARIN,,TRUE,9,3,11,5,);
B(B_VAROUT,,LXinitOk,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value grab control,1,1,27,2,);
B(B_FB,CorrValue_Bool,CorrValue_Bool1,11,4,23,10,);
B(B_VARIN,,CXadGrabControl,9,8,11,10,);
B(B_VARIN,,FALSE,9,5,11,7,);
B(B_VARIN,,FALSE,9,6,11,8,);
B(B_VARIN,,TRUE,9,7,11,9,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value grab control by X23,1,1,27,2,);
B(B_FB,CorrValue_Bool,CorrValue_Bool2,11,4,23,10,);
B(B_VARIN,,CXgrabContrByX23,9,8,11,10,);
B(B_VARIN,,FALSE,9,5,11,7,);
B(B_VARIN,,FALSE,9,6,11,8,);
B(B_VARIN,,TRUE,9,7,11,9,);
        END_NETWORK_BODY
    END_NET_WORK
END_BODY
END_PROGRAM

PROGRAM ADhammerV170
	VAR_EXTERNAL 
		IXextPreHammer: BOOL:=FALSE;
			(*ad hammer external preselection*)
		ITXhammer: BOOL:=FALSE;
			(*preselection hammer/vibrator*)
		ITXclampOpen: BOOL:=FALSE;
			(*preselection clamping jaw open*)
		ITXclampClose: BOOL:=FALSE;
			(*preselection clamping jaw close*)
		ITXexDriveOut: BOOL:=FALSE;
			(*preselection excenter drive out*)
		ITXexDriveIn: BOOL:=FALSE;
			(*preselection excenter drive in*)
		IWkeybX23Poti1: UINT:=0;
			(*keyboard X23 poti 1*)
		IWkeybX23Poti2: UINT:=0;
			(*keyboard X23 poti 2*)
		IWhamExtSignal: UINT:=0;
			(*ext. hammer signal or vibrator amplitude*)
		IWhamSysPresP2: UINT:=0;
			(*P2 sys.press.vibrator/hammer/hydr.grab*)
		IWhamSysPressDir: UINT:=0;
			(*system pressure vibrator/hammer pump direct*)
		QTXhammer: BOOL:=FALSE;
			(*enable hammer/vibrator on*)
		QTXclampOpen: BOOL:=FALSE;
			(*enable clamping jaw open*)
		QTXclampClose: BOOL:=FALSE;
			(*enable clamping jaw close*)
		QTXexDriveOut: BOOL:=FALSE;
			(*enable excenter drive out*)
		QTXexDriveIn: BOOL:=FALSE;
			(*enable excenter drive in*)
		QTXaddVolCtrl: BOOL:=FALSE;
			(*enable additional hydraulic volume control *)
		QXexcentDriveOut: BOOL:=FALSE;
			(*excentric drive out *)
		QXexcentDriveIn: BOOL:=FALSE;
			(*excentric drive in*)
		QXclampJawClose: BOOL:=FALSE;
			(*clamping jaw vibrator close*)
		QXclampJawOpen: BOOL:=FALSE;
			(*clamping jaw vibrator open*)
		QXrelClampJaw: BOOL:=FALSE;
			(*release clamping jaw vibrator*)
		QXretFlowVibrHam: BOOL:=FALSE;
			(*additional device return flow vibrator hammer*)
		QXrelVibHamDirec: BOOL:=FALSE;
			(*release vibrator/hammer direct at pump*)
		QWludv1: UINT:=0;
			(*LUDV pump 1*)
		QWludv2: UINT:=0;
			(*LUDV pump 2*)
		MXstopAllFunctio: BOOL:=FALSE;
			(*stop all excavator functions*)
		MXflashSignal: BOOL:=FALSE;
			(*flash signal*)
		MXenablHamOperat: BOOL:=FALSE;
			(*enable hammer operation*)
		MXexDrWorking: BOOL:=FALSE;
			(*excentric drive not working*)
		MXclampWorking: BOOL:=FALSE;
			(*clamping jaw not working*)
		MXaddHydrActive: BOOL:=FALSE;
			(*addittional hydraulics active*)
		MXpreHammerOn: BOOL:=FALSE;
			(*preselection hammer on *)
		MXhammerWorking: BOOL:=FALSE;
			(*hammer working*)
		MXpreHam_VibJoy: BOOL:=FALSE;
			(*preselection vibrator/hammer with joystick*)
		MXassemblyOperat: BOOL:=FALSE;
			(*assembly operation*)
		MXadOilHeatAct: BOOL:=FALSE;
			(*additional device oil heating active*)
		MXhamExitProgram: BOOL:=FALSE;
			(*hammer exit programm*)
		MXludv1ExtAnaSig: BOOL:=FALSE;
			(*LUDV pump 1 other, external analog signal*)
		MXludv2ExtAnaSig: BOOL:=FALSE;
			(*LUDV pump 2 other, external analog signal*)
		MXexDrPreJoy: BOOL:=FALSE;
			(*preselection excetric drive with joy stick*)
		MXjoyExcentDrOut: BOOL:=FALSE;
			(*excetric drive out with joy stick*)
		MXjoyExcentDrIn: BOOL:=FALSE;
			(*excetric drive in with joy stick*)
		MX1LudvWorkSect: BOOL:=FALSE;
			(*only one ludv working section *)
		MX600barPreTrans: BOOL:=FALSE;
			(*600bar pressure transmitter used*)
		MXengStarterActi: BOOL:=FALSE;
			(*engine starter activated*)
		MXminEngineSpeed: BOOL:=FALSE;
			(*minimum engine speed reached*)
		MWludvExtPresSig: UINT:=0;
			(*LUDV pump external pressure signal in %*)
		MDhamSysPress: REAL:=0.0;
			(*hammer system pressure*)
		MDpowerLimReduct: REAL:=0.0;
			(*maximum engine power regulator reduction to x [%]*)
		MDratedEngSpeed: REAL:=0.0;
			(*rated engine speed in rpm*)
		MDludv1ExtAnaSig: REAL:=0.0;
			(*LUDV pump 1 external analog signal in %*)
		MDludv2ExtAnaSig: REAL:=0.0;
			(*LUDV pump 2 external analog signal in %*)
		MDhamPump1Signal: REAL:=0.0;
			(*hammer analog signal pump 1 [%]*)
		MDhamPump2Signal: REAL:=0.0;
			(*hammer analog signal pump 2 [%]*)
	END_VAR
	VAR_EXTERNAL CONSTANT
		MSG_ERROR: UINT:=0;
	END_VAR
	VAR_EXTERNAL RETAIN
		MRham1Volume: REAL:=0.0;
			(*hammer 1 volume*)
		MRham1Press: REAL:=0.0;
			(*hammer 1 pressure*)
		MWscaleExtHamSig: UINT:=0;
			(*scale extern Hammersignal*)
	END_VAR
	VAR_EXTERNAL CONSTANT RETAIN
		CXadHamOperat: BOOL:=FALSE;
			(*additional device hammer operation *)
		CXadVibOperat: BOOL:=FALSE;
			(*additional device vibrator operation*)
		CXhamVibDirect: BOOL:=FALSE;
			(*add. vibrator/hammer direct on pump *)
		CWp1MinCurValveB: UINT:=0;
			(*p1 ludv section min.current (B side) main*)
		CWp1MaxCurValveB: UINT:=0;
			(*p1 ludv section max.current (B side) main*)
		CWp2MinCurValveB: UINT:=0;
			(*p1 ludv section min.current (B side) main*)
		CWp2MaxCurValveB: UINT:=0;
			(*p1 ludv section max.current (B side) main*)
		CWp1MaxValue: UINT:=0;
			(*ludv pump 1 max. value [l/min]*)
		CWp1cur50liter: UINT:=0;
			(*ludv pump 1 current for 50l/min*)
		CWp1cur100liter: UINT:=0;
			(*ludv pump 1 current for 100l/min*)
		CWp1cur150liter: UINT:=0;
			(*ludv pump 1 current for 150l/min*)
		CWp1cur200liter: UINT:=0;
			(*ludv pump 1 current for 200l/min*)
		CWp1cur250liter: UINT:=0;
			(*ludv pump 1 current for 250l/min*)
		CWp1cur300liter: UINT:=0;
			(*ludv pump 1 current for 300l/min*)
		CWp2MaxValue: UINT:=0;
			(*ludv pump 2 max. value [l/min]*)
		CWp2cur50liter: UINT:=0;
			(*ludv pump 2 current for 50l/min*)
		CWp2cur100liter: UINT:=0;
			(*ludv pump 2 current for 100l/min*)
		CWp2cur150liter: UINT:=0;
			(*ludv pump 2 current for 150l/min*)
		CWp2cur200liter: UINT:=0;
			(*ludv pump 2 current for 200l/min*)
		CWp2cur250liter: UINT:=0;
			(*ludv pump 2 current for 250l/min*)
		CWp2cur300liter: UINT:=0;
			(*ludv pump 2 current for 300l/min*)
		CWp1PumpMaxValue: UINT:=0;
			(*p1 pump max. value [l/min]*)
		CWp1Pump50liter: UINT:=0;
			(*p1 pump current for 50l/min*)
		CWp1Pump100liter: UINT:=0;
			(*p1 pump current for 100l/min*)
		CWp1Pump150liter: UINT:=0;
			(*p1 pump current for 150l/min*)
		CWp1Pump200liter: UINT:=0;
			(*p1 pump current for 200l/min*)
		CWp1Pump250liter: UINT:=0;
			(*p1 pump current for 250l/min*)
		CWp1Pump300liter: UINT:=0;
			(*p1 pump current for 300l/min*)
		CWp1Pump350liter: UINT:=0;
			(*p1 pump current for 350l/min*)
		CWp1Pump400liter: UINT:=0;
			(*p1 pump current for 400l/min*)
		CWp1Pump450liter: UINT:=0;
			(*p1 pump current for 450l/min*)
		CWp1Pump500liter: UINT:=0;
			(*p1 pump current for 500l/min*)
		CWp2PumpMaxValue: UINT:=0;
			(*p2 pump max. value [l/min]*)
		CWp2Pump50liter: UINT:=0;
			(*p2 pump current for 50l/min*)
		CWp2Pump100liter: UINT:=0;
			(*p2 pump current for 100l/min*)
		CWp2Pump150liter: UINT:=0;
			(*p2 pump current for 150l/min*)
		CWp2Pump200liter: UINT:=0;
			(*p2 pump current for 200l/min*)
		CWp2Pump250liter: UINT:=0;
			(*p2 pump current for 250l/min*)
		CWp2Pump300liter: UINT:=0;
			(*p2 pump current for 300l/min*)
		CWp2Pump350liter: UINT:=0;
			(*p2 pump current for 350l/min*)
		CWp2Pump400liter: UINT:=0;
			(*p2 pump current for 400l/min*)
		CWp2Pump450liter: UINT:=0;
			(*p2 pump current for 450l/min*)
		CWp2Pump500liter: UINT:=0;
			(*p2 pump current for 500l/min*)
		CWludv1MinCurPum: UINT:=0;
			(*LUDV 1 minimum current pump*)
		CWludv1MaxCurPum: UINT:=0;
			(*LUDV 1 maximum current pump*)
		CWludv2MinCurPum: UINT:=0;
			(*LUDV 2 minimum current pump*)
		CWludv2MaxCurPum: UINT:=0;
			(*LUDV 2 maximum current pump*)
		CWludvPressure: UINT:=0;
			(*ludv pump pressure [bar]*)
		CDhamIntTimeUp: REAL:=0.0;
			(*hammer integrator time rising signal*)
		CDhamIntTimeDn: REAL:=0.0;
			(*hammer integrator time falling signal*)
		CDludvLeakOilSig: REAL:=0.0;
			(*ludv leakoil or pressure comp. signal*)
		CDengSpPumpRed: REAL:=0.0;
			(*engine speed for pump reduction [U/min]*)
	END_VAR
	VAR 
		LXinitOk: BOOL:=FALSE;
		LXenabPumpSig: BOOL:=FALSE;
		LXhamFunkWorking: BOOL:=FALSE;
		LXexDrWorking: BOOL:=FALSE;
		LXclampWorking: BOOL:=FALSE;
		LXfirstCycle: BOOL:=FALSE;
		LXhamOff: BOOL:=FALSE;
		LXSignInZero: BOOL:=FALSE;
		LXludvInZeroPos: BOOL:=FALSE;
		LXexDrPreOut: BOOL:=FALSE;
		LXexDrPreIn: BOOL:=FALSE;
		LXhammer1Sect: BOOL:=FALSE;
		LWhamStorePress: UINT:=0;
		LDhamExtSignal: REAL:=0.0;
		LDhammerSignal: REAL:=0.0;
		LDanalogSignal: REAL:=0.0;
		LDanalSigPumpLim: REAL:=0.0;
		LDx23Poti1: REAL:=0.0;
		LDx23Poti2: REAL:=0.0;
		LDanalSigPumpInt: REAL:=0.0;
		LDcalcCurrent1: REAL:=0.0;
		LDcalcCurrent2: REAL:=0.0;
		LDcalcComp1: REAL:=0.0;
		LDcalcComp2: REAL:=0.0;
		LDcalcVol1: REAL:=0.0;
		LDcalcVol2: REAL:=0.0;
		LDhamStoreVolume: REAL:=0.0;
		LDp1MaxValue: REAL:=0.0;
		LDp2MaxValue: REAL:=0.0;
		LDp1PumpMaxValue: REAL:=0.0;
		LDp2PumpMaxValue: REAL:=0.0;
		LDscalePress: REAL:=0.0;
		CorrValue_Bool1: CorrValue_Bool;
		CorrValue_Bool2: CorrValue_Bool;
		CorrValue_Real1: CorrValue_Real;
		CorrValue_Real2: CorrValue_Real;
		RS1: RS;
		RS2: RS;
		RS3: RS;
		RS4: RS;
		RS5: RS;
		SR1: SR;
		SR2: SR;
		R_TRIG1: R_TRIG;
		R_TRIG2: R_TRIG;
		R_TRIG3: R_TRIG;
		R_TRIG4: R_TRIG;
		F_TRIG1: F_TRIG;
		F_TRIG2: F_TRIG;
		F_TRIG3: F_TRIG;
		F_TRIG4: F_TRIG;
		TON1: TON;
		TON2: TON;
		Integrator1: Integrator;
		ScaleAI2: ScaleAI;
		ScaleAI3: ScaleAI;
		Message1: MsgRealReal;
		Message2: MsgRealReal;
		Message3: MsgRealReal;
		Message4: MsgRealReal;
		ADcalculateQ1: ADcalculateQV024;
		ADcalculateQ2: ADcalculateQV024;
		ADcalculateQ3: ADcalculateQV024;
		ADcalculateQ4: ADcalculateQV024;
	END_VAR
'FBD'
BODY
    WORKSPACE
        NETWORK_LIST_TYPE := NWTYPEFBD ;
        ACTIVE_NETWORK := 0 ;
    END_WORKSPACE
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_COMMENT,,init first time,1,1,27,2,);
B(B_VARIN,,LXinitOk,9,4,11,6,);
B(B_F,not,,11,3,16,6,);
B(B_JUMP,,init,16,4,18,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_COMMENT,,set scale to 7.5V,1,1,27,2,);
B(B_VARIN,,MXenablHamOperat,9,4,11,6,);
B(B_COMMENT,,Skalierung auf 16mA setzen wenn ø^Hammerbetrieb ausgeschaltet wird.,29,1,48,3,);
B(B_VARIN,,MXminEngineSpeed,9,5,11,7,);
B(B_F,@AND-2,,11,3,16,7,N);
B(B_F,sel,,16,6,21,11,);
B(B_VAROUT,,MWscaleExtHamSig,21,7,23,9,);
B(B_VARIN,,MWscaleExtHamSig,14,8,16,10,);
B(B_VARIN,,16000,14,9,16,11,);
L(16,5,16,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,select only 1 ludv section ,1,1,27,2,);
B(B_VARIN,,MX1LudvWorkSect,9,3,11,5,);
B(B_VAROUT,,LXhammer1Sect,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_COMMENT,,jump to exit when hammer is not activ,1,1,27,2,);
B(B_VARIN,,LXhamFunkWorking,16,7,18,9,);
B(B_F,@AND-2,,18,5,23,9,0N);
B(B_RETURN,,,23,6,25,8,);
B(B_VARIN,,MXhamExitProgram,9,4,11,6,);
B(B_VARIN,,MXenablHamOperat,9,5,11,7,);
B(B_F,@OR-2,,11,3,16,7,0N);
L(16,5,17,5);
L(17,5,17,7);
L(17,7,18,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_F,sel,,18,3,23,8,);
B(B_VARIN,,400.0,16,5,18,7,);
B(B_F,to_real,,11,6,18,9,);
B(B_VARIN,,600.0,9,7,11,9,);
B(B_VAROUT,,LDscalePress,23,4,25,6,);
B(B_VARIN,,MX600barPreTrans,16,4,18,6,);
B(B_COMMENT,,select scale of pressure transmitter,1,1,27,2,);
L(18,7,18,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_FB,R_TRIG,R_TRIG1,11,3,18,6,);
B(B_VAROUT,,LXfirstCycle,18,4,20,6,);
B(B_VARIN,,TRUE,9,4,11,6,);
B(B_COMMENT,,first cycle,1,1,27,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 22 ;
        NETWORK_BODY
B(B_F,sel,,18,11,23,16,);
B(B_F,@GT-2,,13,9,18,13,);
B(B_F,limit,,12,15,18,20,);
B(B_VARIN,,20000,10,18,12,20,);
B(B_VARIN,,MWscaleExtHamSig,9,11,11,13,);
B(B_VARIN,,IWhamExtSignal,10,10,12,12,);
B(B_F,@SUB,,25,11,30,15,);
B(B_VARIN,,4000,23,15,25,17,);
B(B_F,uint_to_real,,30,11,41,14,);
B(B_F,@MUL-2,,47,3,52,7,);
B(B_F,@DIV,,42,10,47,14,);
B(B_VARIN,,100.0,40,9,42,11,);
B(B_F,@LT-2,,52,10,57,14,);
B(B_VARIN,,5.0,50,12,52,14,);
B(B_COMMENT,,bis 5% unterdrücken,49,14,58,15,);
B(B_F,sel,,60,2,65,7,);
B(B_VARIN,,0.0,58,5,60,7,);
B(B_VAROUT,,LDhamExtSignal,65,3,67,5,);
B(B_VAROUT,,MWscaleExtHamSig,23,9,25,11,);
B(B_COMMENT,,BSP-Hammer liefert nur 8V. Wennø^mehr kommt z.B. Menk dann wirdø^der Wert erhöht,19,17,33,20,);
B(B_COMMENT,, select extern hammer signal,1,1,27,2,);
B(B_COMMENT,,Schleppzeiger aufziehen ,3,9,13,10,);
B(B_F,limit,,39,3,45,8,);
B(B_VARIN,,0.0,37,4,39,6,);
B(B_F,@SUB,,31,4,36,8,);
B(B_VARIN,,IWhamExtSignal,12,6,14,8,);
B(B_F,limit,,14,4,20,9,);
B(B_VARIN,,20000,12,7,14,9,);
B(B_F,uint_to_real,,20,4,31,7,);
B(B_VARIN,,4000.0,29,7,31,9,);
L(18,11,18,13);
L(13,12,13,14);
L(13,14,18,14);
L(12,11,13,11);
L(18,15,18,17);
L(12,11,12,18);
L(11,12,13,12);
L(23,13,25,13);
L(25,14,25,16);
L(42,10,42,12);
L(52,5,52,12);
L(57,4,57,12);
L(52,5,60,5);
L(57,4,60,4);
L(41,13,42,13);
L(47,6,47,12);
L(23,10,23,13);
L(45,5,47,5);
L(39,6,39,7);
L(36,6,39,6);
L(14,6,14,7);
L(31,7,31,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_COMMENT,,scale analog signals from x23 potis,1,1,27,2,);
B(B_VARIN,,IWkeybX23Poti1,9,4,11,6,);
B(B_F,uint_to_real,,11,3,22,6,);
B(B_F,@DIV,,24,3,29,7,);
B(B_VARIN,,10.0,21,6,23,8,);
B(B_VAROUT,,LDx23Poti1,29,4,31,6,);
B(B_COMMENT,,0-100%,30,6,37,7,);
L(22,5,24,5);
L(23,6,23,7);
L(23,6,24,6);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_F,uint_to_real,,11,1,22,4,);
B(B_F,@DIV,,24,1,29,5,);
B(B_VARIN,,10.0,21,4,23,6,);
B(B_COMMENT,,0-100%,30,4,37,5,);
B(B_VARIN,,IWkeybX23Poti2,9,2,11,4,);
B(B_VAROUT,,LDx23Poti2,29,2,31,4,);
L(22,3,24,3);
L(23,4,23,5);
L(23,4,24,4);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_VARIN,,MRham1Volume,9,3,11,5,);
B(B_VAROUT,,LDhamStoreVolume,11,3,13,5,);
B(B_COMMENT,,adjusted working volume,1,1,27,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_F,real_to_uint,,11,3,22,6,);
B(B_VARIN,,MRham1Press,9,4,11,6,);
B(B_VAROUT,,LWhamStorePress,22,4,24,6,);
B(B_COMMENT,,adjusted working pressure,1,1,27,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_VARIN,,CWp1MaxValue,9,4,11,6,);
B(B_F,uint_to_real,,11,3,22,6,);
B(B_VAROUT,,LDp1MaxValue,22,4,24,6,);
B(B_COMMENT,,maximum oil value over ludv section ,1,1,27,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 5 ;
        NETWORK_BODY
B(B_VARIN,,CWp2MaxValue,9,2,11,4,);
B(B_F,uint_to_real,,11,1,22,4,);
B(B_VAROUT,,LDp2MaxValue,22,2,24,4,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_VARIN,,CWp1PumpMaxValue,9,4,11,6,);
B(B_F,uint_to_real,,11,3,22,6,);
B(B_VAROUT,,LDp1PumpMaxValue,22,4,24,6,);
B(B_COMMENT,,maximum oil value pump direct,1,1,27,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 5 ;
        NETWORK_BODY
B(B_VARIN,,CWp2PumpMaxValue,9,2,11,4,);
B(B_F,uint_to_real,,11,1,22,4,);
B(B_VAROUT,,LDp2PumpMaxValue,22,2,24,4,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_F,@GT-2,,13,3,18,7,);
B(B_F,sel,,20,5,25,10,);
B(B_VARIN,,LDhamExtSignal,9,4,11,6,);
B(B_VARIN,,LDx23Poti1,9,5,11,7,);
B(B_VAROUT,,LDhammerSignal,25,6,27,8,);
B(B_COMMENT,, select higher hammer signal (extern or X23),1,1,27,2,);
L(18,5,19,5);
L(19,5,19,7);
L(19,7,20,7);
L(12,5,12,9);
L(12,9,20,9);
L(11,6,11,8);
L(11,8,20,8);
L(11,5,13,5);
L(11,6,13,6);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 24 ;
        NETWORK_BODY
B(B_VARIN,,MXstopAllFunctio,35,18,37,20,);
B(B_VARIN,,MXenablHamOperat,34,17,36,19,);
B(B_VARIN,,MXaddHydrActive,36,19,38,21,);
B(B_VARIN,,MXassemblyOperat,37,20,39,22,);
B(B_VARIN,,MXadOilHeatAct,38,21,40,23,);
B(B_F,@OR-6,,41,13,46,21,0N);
B(B_F,@AND-2,,34,12,39,16,);
B(B_VARIN,,MXpreHammerOn,31,16,33,18,);
B(B_F,@OR-2,,27,12,32,16,);
B(B_F,@OR-2,,27,8,32,12,);
B(B_FB,R_TRIG,R_TRIG2,18,5,25,8,);
B(B_VARIN,,ITXhammer,10,7,12,9,);
B(B_VARIN,,MXpreHam_VibJoy,10,6,12,8,);
B(B_F,@OR-2,,12,5,17,9,);
B(B_FB,R_TRIG,R_TRIG3,18,9,25,12,);
B(B_VARIN,,IXextPreHammer,15,10,17,12,);
B(B_FB,F_TRIG,F_TRIG1,18,13,25,16,);
B(B_F,@AND-3,,35,6,40,11,N);
B(B_VARIN,,LXfirstCycle,32,2,34,4,);
B(B_VAROUT,,MXpreHammerOn,53,7,55,9,);
B(B_FB,RS,RS1,48,6,53,10,);
B(B_COMMENT,,preselect hammer,1,1,27,2,);
B(B_VARIN,,MXenablHamOperat,31,3,33,5,);
B(B_COMMENT,,Damit Hammer nicht läuft falls externe VW =1,36,2,54,3,);
L(36,16,36,18);
L(37,17,37,19);
L(38,18,38,20);
L(39,19,39,21);
L(46,15,47,15);
L(36,16,41,16);
L(37,17,41,17);
L(38,18,41,18);
L(39,19,41,19);
L(40,20,40,22);
L(40,20,41,20);
L(40,14,40,15);
L(40,15,41,15);
L(39,14,40,14);
L(33,15,33,17);
L(33,15,34,15);
L(26,14,27,14);
L(32,14,34,14);
L(47,9,47,15);
L(26,10,27,10);
L(17,7,18,7);
L(25,7,26,7);
L(26,7,26,14);
L(17,11,18,11);
L(17,15,18,15);
L(25,15,27,15);
L(25,11,27,11);
L(17,11,17,15);
L(33,9,35,9);
L(32,10,35,10);
L(34,8,35,8);
L(34,3,34,8);
L(40,8,48,8);
L(47,9,48,9);
L(33,4,33,9);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_VAROUT,,QTXhammer,30,4,32,6,);
B(B_F,@OR-2,,25,3,30,7,);
B(B_VARIN,,MXpreHammerOn,23,4,25,6,);
B(B_VARIN,,MXflashSignal,15,10,17,12,);
B(B_F,@AND-2,,11,6,16,10,0N);
B(B_VARIN,,MXhammerWorking,9,7,11,9,);
B(B_VARIN,,MXpreHammerOn,9,8,11,10,);
B(B_F,@AND-2,,18,6,23,10,);
B(B_COMMENT,,led control hammer,1,1,27,2,);
L(24,6,25,6);
L(17,9,17,11);
L(16,8,18,8);
L(17,9,18,9);
L(23,8,24,8);
L(24,6,24,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_VARIN,,QWludv2,9,8,11,10,);
B(B_VARIN,,0,9,5,11,7,);
B(B_VARIN,,0,9,9,11,11,);
B(B_VARIN,,QWludv1,9,4,11,6,);
B(B_COMMENT,,Ludv pumps in zero position,1,1,27,2,);
B(B_F,@AND-2,,18,3,23,7,);
B(B_VAROUT,,LXludvInZeroPos,23,4,25,6,);
B(B_F,@EQ-2,,11,3,16,7,);
B(B_F,@EQ-2,,11,7,16,11,);
L(17,6,17,9);
L(17,6,18,6);
L(16,5,18,5);
L(16,9,17,9);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 18 ;
        NETWORK_BODY
B(B_FB,RS,RS2,33,8,38,12,);
B(B_VAROUT,,LXenabPumpSig,39,9,41,11,);
B(B_VAROUT,,QTXaddVolCtrl,39,10,41,12,);
B(B_COMMENT,,select hammer valve and pump signal,1,1,27,2,);
B(B_F,@AND-2,,27,8,32,12,);
B(B_VARIN,,MXpreHammerOn,25,10,27,12,);
B(B_F,@OR-2,,22,6,27,10,0N);
B(B_F,@AND-3,,17,4,22,9,);
B(B_VARIN,,LXludvInZeroPos,15,3,17,5,);
B(B_FB,TON,TON1,11,5,16,9,);
B(B_VARIN,,T#0.3s,9,7,11,9,);
B(B_VARIN,,MXpreHammerOn,9,6,11,8,);
B(B_VARIN,,CXhamVibDirect,15,9,17,11,);
B(B_F,@AND-2,,27,12,32,16,N);
B(B_VARIN,,LXenabPumpSig,25,14,27,16,);
B(B_COMMENT,,Damit Öl erst freigegeben wird wenn der ø^Schieber geschaltet hat.(nur bei Direkt),23,3,40,5,);
B(B_F,sel,,40,12,45,17,);
B(B_VARIN,,LDhammerSignal,38,15,40,17,);
B(B_VARIN,,0.0,38,14,40,16,);
B(B_VAROUT,,LDanalogSignal,45,13,47,15,);
L(38,10,39,10);
L(39,10,39,14);
L(32,10,33,10);
L(27,8,27,10);
L(22,6,22,8);
L(17,9,22,9);
L(16,7,17,7);
L(17,8,17,10);
L(17,4,17,6);
L(27,11,27,14);
L(33,11,33,14);
L(32,14,33,14);
L(39,14,40,14);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 15 ;
        NETWORK_BODY
B(B_VARIN,,900.0,9,4,11,6,);
B(B_VARIN,,0.5,9,5,11,7,);
B(B_VARIN,,CDengSpPumpRed,9,6,11,8,);
B(B_VARIN,,1.0,9,7,11,9,);
B(B_VARIN,,MDratedEngSpeed,9,8,11,10,);
B(B_VARIN,,0.5,9,9,11,11,);
B(B_VARIN,,1.0,9,10,11,12,);
B(B_F,GPkx_dV010,,11,3,20,12,);
B(B_COMMENT,,900 U/min 50% limitationø^1400 U/min 0% limitation,29,1,44,3,);
B(B_COMMENT,,signal limitation in consideration to the engine speed,1,1,27,2,);
B(B_VAROUT,,LDanalSigPumpLim,27,4,29,6,);
B(B_F,@MUL-2,,22,3,27,7,);
B(B_VARIN,,LDanalogSignal,19,12,21,14,);
L(21,6,22,6);
L(20,5,22,5);
L(21,6,21,13);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_FB,Integrator,Integrator1,11,2,20,8,);
B(B_VARIN,,TRUE,9,3,11,5,);
B(B_VARIN,,CDhamIntTimeUp,9,5,11,7,);
B(B_VARIN,,LDanalSigPumpLim,9,4,11,6,);
B(B_VARIN,,CDhamIntTimeDn,9,6,11,8,);
B(B_F,real_to_uint,,21,2,32,5,);
B(B_VAROUT,,LXSignInZero,38,2,40,4,);
B(B_VARIN,,0,31,0,33,2,);
B(B_F,@EQ-2,,33,1,38,5,);
B(B_VAROUT,,LDanalSigPumpInt,20,5,22,7,);
L(20,4,21,4);
L(32,4,33,4);
L(33,1,33,3);
L(20,4,20,6);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 18 ;
        NETWORK_BODY
B(B_COMMENT,,set vibrator working signal,1,1,27,2,);
B(B_F,@AND-2,,11,8,16,12,N);
B(B_FB,RS,RS3,22,3,27,7,);
B(B_FB,TON,TON2,17,8,22,12,);
B(B_VAROUT,,LXhamOff,16,6,18,8,);
B(B_F,sel,,11,12,16,17,);
B(B_VARIN,,CXhamVibDirect,9,13,11,15,);
B(B_VARIN,,T#0.5s,9,15,11,17,);
B(B_VARIN,,T#0.0s,9,14,11,16,);
B(B_COMMENT,,Damit Schieber schalten kann (ohne Öl)ø^wird Signal noch eine 1/2 Sekunde ø^gehalten. ,19,13,36,16,);
B(B_VAROUT,,MXhammerWorking,27,4,29,6,);
B(B_VARIN,,MXpreHammerOn,9,4,11,6,);
B(B_VARIN,,LXSignInZero,9,10,11,12,);
L(11,5,11,10);
L(11,5,22,5);
L(16,10,17,10);
L(16,7,16,10);
L(22,6,22,10);
L(17,11,17,14);
L(16,14,17,14);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_VARIN,,LXenabPumpSig,9,4,11,6,);
B(B_FB,F_TRIG,F_TRIG2,11,3,18,6,);
B(B_FB,RS,RS4,20,3,25,7,);
B(B_VAROUT,,QXretFlowVibrHam,25,4,27,6,);
B(B_VARIN,,MXpreHammerOn,17,6,19,8,);
B(B_COMMENT,,return flow back pressure valve  (Optional),1,1,27,2,);
L(18,5,20,5);
L(19,6,19,7);
L(19,6,20,6);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,CXhamVibDirect,9,1,11,3,);
B(B_JUMP,,puDi,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 25 ;
        NETWORK_BODY
B(B_COMMENT,,input system pressure hammer,1,1,27,2,);
B(B_VARIN,,IWhamSysPresP2,9,5,11,7,);
B(B_FB,ScaleAI,ScaleAI2,11,4,19,9,);
B(B_VARIN,,LDscalePress,9,6,11,8,);
B(B_VARIN,,MSG_ERROR,17,13,19,15,);
B(B_VARIN,,178,17,11,19,13,);
B(B_FB,MsgRealReal,Message1,22,10,31,17,);
B(B_VAROUT,,MDhamSysPress,19,5,21,7,);
B(B_VARIN,,177,36,18,38,20,);
B(B_VARIN,,MSG_ERROR,36,20,38,22,);
B(B_FB,MsgRealReal,Message2,38,17,47,24,);
B(B_FB,SR,SR1,26,18,31,22,0N);
B(B_F,@AND-2,,21,18,26,22,0N);
B(B_VARIN,,MXengStarterActi,17,20,19,22,);
L(19,12,22,12);
L(19,14,22,14);
L(21,7,21,13);
L(21,13,22,13);
L(19,7,21,7);
L(19,8,20,8);
L(31,20,38,20);
L(20,20,21,20);
L(19,21,21,21);
L(20,22,26,22);
L(26,21,26,22);
L(20,8,20,22);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 28 ;
        NETWORK_BODY
B(B_F,sel,,16,1,21,6,N);
B(B_F,@DIV,,11,4,16,8,);
B(B_VARIN,,2.0,9,6,11,8,);
B(B_VARIN,,LDhamStoreVolume,9,3,11,5,);
B(B_VARIN,,LXhammer1Sect,14,2,16,4,);
B(B_VARIN,,CWp2cur50liter,20,11,22,13,);
B(B_VARIN,,CWp2cur100liter,20,12,22,14,);
B(B_VARIN,,CWp2cur150liter,20,13,22,15,);
B(B_VARIN,,CWp2cur200liter,20,14,22,16,);
B(B_VARIN,,CWp2cur250liter,20,15,22,17,);
B(B_VARIN,,CWp2cur300liter,20,16,22,18,);
B(B_VARIN,,CWp2MinCurValveB,20,10,22,12,);
B(B_VARIN,,LDp2MaxValue,20,8,22,10,);
B(B_VARIN,,LDanalSigPumpInt,20,9,22,11,);
B(B_VAROUT,,LDcalcCurrent2,40,7,42,9,);
B(B_VAROUT,,MDhamPump2Signal,40,8,42,10,);
B(B_VAROUT,,LDcalcComp2,40,9,42,11,);
B(B_VARIN,,CWp2MaxCurValveB,20,21,22,23,);
B(B_VARIN,,MDhamSysPress,20,22,22,24,);
B(B_VARIN,,CDludvLeakOilSig,20,23,22,25,);
B(B_VAROUT,,LDcalcVol2,40,10,42,12,);
B(B_VARIN,,MDpowerLimReduct,20,24,22,26,);
B(B_VARIN,,CDhamIntTimeUp,20,25,22,27,);
B(B_FB,ADcalculateQV024,ADcalculateQ1,22,6,40,27,);
L(16,5,16,6);
L(11,4,16,4);
L(11,4,11,6);
L(21,3,21,8);
L(22,18,22,22);
L(21,8,22,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_VARIN,,LXhammer1Sect,9,3,11,5,);
B(B_COMMENT,,jump to next if only 1 ludv section is used for hammer,1,1,27,2,);
B(B_JUMP,,next,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 25 ;
        NETWORK_BODY
B(B_F,@DIV,,11,1,16,5,);
B(B_VARIN,,LDhamStoreVolume,9,2,11,4,);
B(B_VARIN,,2.0,9,3,11,5,);
B(B_VARIN,,CWp1cur50liter,15,8,17,10,);
B(B_VARIN,,CWp1cur100liter,15,9,17,11,);
B(B_VARIN,,CWp1cur150liter,15,10,17,12,);
B(B_VARIN,,CWp1cur200liter,15,11,17,13,);
B(B_VARIN,,CWp1cur250liter,15,12,17,14,);
B(B_VARIN,,CWp1cur300liter,15,13,17,15,);
B(B_VARIN,,CWp1MinCurValveB,15,7,17,9,);
B(B_VARIN,,LDanalSigPumpInt,15,6,17,8,);
B(B_VARIN,,LDp1MaxValue,15,5,17,7,);
B(B_VAROUT,,LDcalcCurrent1,35,4,37,6,);
B(B_VAROUT,,MDhamPump1Signal,35,5,37,7,);
B(B_VAROUT,,LDcalcComp1,35,6,37,8,);
B(B_VARIN,,CWp1MaxCurValveB,15,18,17,20,);
B(B_VARIN,,MDhamSysPress,15,19,17,21,);
B(B_VARIN,,CDludvLeakOilSig,15,20,17,22,);
B(B_VAROUT,,LDcalcVol1,35,7,37,9,);
B(B_VARIN,,MDpowerLimReduct,15,21,17,23,);
B(B_VARIN,,CDhamIntTimeUp,15,22,17,24,);
B(B_FB,ADcalculateQV024,ADcalculateQ2,17,3,35,24,);
L(17,3,17,5);
L(16,3,17,3);
L(17,15,17,19);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,TRUE,9,1,11,3,);
B(B_JUMP,,next,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL := puDi: ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 23 ;
        NETWORK_BODY
B(B_COMMENT,,input system pressure hammer pump direct,1,1,27,2,);
B(B_VARIN,,MSG_ERROR,17,11,19,13,);
B(B_VARIN,,180,17,9,19,11,);
B(B_FB,MsgRealReal,Message3,22,8,31,15,);
B(B_VARIN,,179,35,16,37,18,);
B(B_VARIN,,MSG_ERROR,35,18,37,20,);
B(B_FB,MsgRealReal,Message4,37,15,46,22,);
B(B_VAROUT,,MDhamSysPress,19,5,21,7,);
B(B_VARIN,,IWhamSysPressDir,9,5,11,7,);
B(B_FB,ScaleAI,ScaleAI3,11,4,19,9,);
B(B_VARIN,,LDscalePress,9,6,11,8,);
B(B_FB,SR,SR2,26,16,31,20,0N);
B(B_F,@AND-2,,21,16,26,20,0N);
B(B_VARIN,,MXengStarterActi,17,18,19,20,);
L(19,10,22,10);
L(19,12,22,12);
L(21,7,21,11);
L(21,11,22,11);
L(19,8,20,8);
L(19,7,21,7);
L(31,18,37,18);
L(20,18,21,18);
L(19,19,21,19);
L(20,20,26,20);
L(26,19,26,20);
L(20,8,20,20);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 20 ;
        NETWORK_BODY
B(B_FB,F_TRIG,F_TRIG3,12,4,19,7,);
B(B_VARIN,,MXhammerWorking,10,5,12,7,);
B(B_F,sel,,21,6,26,11,);
B(B_VAROUT,,MXludv1ExtAnaSig,26,7,28,9,);
B(B_F,sel,,13,7,18,12,);
B(B_F,sel,,21,11,26,16,);
B(B_F,sel,,13,12,18,17,);
B(B_VARIN,,FALSE,17,17,19,19,);
B(B_VARIN,,TRUE,9,15,11,17,);
B(B_VARIN,,MXludv1ExtAnaSig,9,9,11,11,);
B(B_VAROUT,,MXludv2ExtAnaSig,26,12,28,14,);
B(B_VARIN,,MXludv2ExtAnaSig,8,14,10,16,);
B(B_COMMENT,,switch over to extern control ludv pumps ,1,1,27,2,);
L(12,9,13,9);
L(20,8,21,8);
L(18,9,21,9);
L(19,10,21,10);
L(18,14,21,14);
L(19,10,19,18);
L(19,15,21,15);
L(20,6,20,13);
L(20,13,21,13);
L(19,6,20,6);
L(11,11,13,11);
L(11,16,13,16);
L(11,11,11,16);
L(12,6,12,14);
L(12,14,13,14);
L(11,10,13,10);
L(10,15,13,15);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 27 ;
        NETWORK_BODY
B(B_COMMENT,,calculation volume ludv pump1,1,1,27,2,);
B(B_VARIN,,CWludv1MinCurPum,16,9,18,11,);
B(B_VARIN,,LDanalSigPumpInt,16,8,18,10,);
B(B_VARIN,,CWp1Pump100liter,16,11,18,13,);
B(B_VARIN,,CWp1Pump50liter,16,10,18,12,);
B(B_VARIN,,LDp1PumpMaxValue,16,7,18,9,);
B(B_VARIN,,CWludv1MaxCurPum,16,20,18,22,);
B(B_F,@DIV,,11,3,16,7,);
B(B_VARIN,,2.0,9,5,11,7,);
B(B_VARIN,,LDhamStoreVolume,9,4,11,6,);
B(B_VAROUT,,LDcalcCurrent1,36,6,38,8,);
B(B_VAROUT,,LDcalcComp1,36,8,38,10,);
B(B_VARIN,,CWp1Pump150liter,16,12,18,14,);
B(B_VARIN,,CWp1Pump250liter,16,14,18,16,);
B(B_VARIN,,CWp1Pump300liter,16,15,18,17,);
B(B_VARIN,,CWp1Pump350liter,16,16,18,18,);
B(B_VARIN,,CWp1Pump400liter,16,17,18,19,);
B(B_VARIN,,CWp1Pump200liter,16,13,18,15,);
B(B_VARIN,,CWp1Pump450liter,16,18,18,20,);
B(B_VARIN,,CWp1Pump500liter,16,19,18,21,);
B(B_VARIN,,MDhamSysPress,16,21,18,23,);
B(B_VARIN,,CDludvLeakOilSig,16,22,18,24,);
B(B_VAROUT,,MDludv1ExtAnaSig,36,7,38,9,);
B(B_VARIN,,MDpowerLimReduct,16,23,18,25,);
B(B_VARIN,,CDhamIntTimeUp,16,24,18,26,);
B(B_FB,ADcalculateQV024,ADcalculateQ3,18,5,36,26,);
L(17,5,17,7);
L(16,5,17,5);
L(17,7,18,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 27 ;
        NETWORK_BODY
B(B_COMMENT,,calculation volume ludv pump1,1,1,27,2,);
B(B_VARIN,,CWludv2MinCurPum,16,9,18,11,);
B(B_VARIN,,LDanalSigPumpInt,16,8,18,10,);
B(B_VARIN,,CWp2Pump100liter,16,11,18,13,);
B(B_VARIN,,CWp2Pump50liter,16,10,18,12,);
B(B_VARIN,,LDp2PumpMaxValue,16,7,18,9,);
B(B_VARIN,,CWludv2MaxCurPum,16,20,18,22,);
B(B_F,@DIV,,11,3,16,7,);
B(B_VARIN,,2.0,9,5,11,7,);
B(B_VARIN,,LDhamStoreVolume,9,4,11,6,);
B(B_VARIN,,CWp2Pump150liter,16,12,18,14,);
B(B_VARIN,,CWp2Pump250liter,16,14,18,16,);
B(B_VARIN,,CWp2Pump300liter,16,15,18,17,);
B(B_VARIN,,CWp2Pump350liter,16,16,18,18,);
B(B_VARIN,,CWp2Pump400liter,16,17,18,19,);
B(B_VARIN,,CWp2Pump200liter,16,13,18,15,);
B(B_VARIN,,CWp2Pump450liter,16,18,18,20,);
B(B_VARIN,,CWp2Pump500liter,16,19,18,21,);
B(B_VARIN,,MDhamSysPress,16,21,18,23,);
B(B_VARIN,,CDludvLeakOilSig,16,22,18,24,);
B(B_VAROUT,,LDcalcCurrent2,36,6,38,8,);
B(B_VAROUT,,LDcalcComp2,36,8,38,10,);
B(B_VAROUT,,MDludv2ExtAnaSig,36,7,38,9,);
B(B_VARIN,,MDpowerLimReduct,16,23,18,25,);
B(B_VARIN,,CDhamIntTimeUp,16,24,18,26,);
B(B_FB,ADcalculateQV024,ADcalculateQ4,18,5,36,26,);
L(17,5,17,7);
L(16,5,17,5);
L(17,7,18,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_COMMENT,,release enable vibrator valve (pump direct),1,1,27,2,);
B(B_FB,RS,RS5,11,4,16,8,);
B(B_VAROUT,,QXrelVibHamDirec,16,5,18,7,);
B(B_VARIN,,LXhamOff,9,6,11,8,);
B(B_VARIN,,LXenabPumpSig,9,5,11,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL := next: ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 17 ;
        NETWORK_BODY
B(B_COMMENT,,activate vibrator pressure ,1,1,27,2,);
B(B_VARIN,,MXhammerWorking,9,5,11,7,);
B(B_FB,R_TRIG,R_TRIG4,11,4,18,7,);
B(B_FB,F_TRIG,F_TRIG4,11,8,18,11,);
B(B_F,sel,,18,9,23,14,);
B(B_VARIN,,MWludvExtPresSig,16,11,18,13,);
B(B_F,sel,,24,8,29,13,);
B(B_VAROUT,,MWludvExtPresSig,29,9,31,11,);
B(B_VARIN,,LWhamStorePress,22,14,24,16,);
B(B_VARIN,,CWludvPressure,16,12,18,14,);
L(11,6,11,10);
L(18,6,24,6);
L(23,11,24,11);
L(24,12,24,15);
L(24,6,24,10);
L(18,10,18,11);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_VARIN,,CXadVibOperat,9,4,11,6,);
B(B_VARIN,,LXexDrWorking,9,5,11,7,);
B(B_VARIN,,LXclampWorking,9,6,11,8,);
B(B_F,@AND-3,,11,3,16,8,NNN);
B(B_JUMP,,exit,16,4,18,6,);
B(B_COMMENT,,jump to exit when no vibrator (that means no valves) are mounted,1,1,27,2,);
B(B_COMMENT,,jusing the vibrator valves for hammer~preselected the vibrator bit ,1,2,27,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 20 ;
        NETWORK_BODY
B(B_COMMENT,,preselection excentric drive,1,1,27,2,);
B(B_F,@AND-2,,11,3,16,7,);
B(B_F,@AND-2,,11,7,16,11,N);
B(B_F,@OR-2,,18,3,23,7,);
B(B_VARIN,,MXjoyExcentDrOut,9,4,11,6,);
B(B_VARIN,,MXexDrPreJoy,8,5,10,7,);
B(B_VAROUT,,LXexDrPreOut,23,4,25,6,);
B(B_VARIN,,ITXexDriveOut,7,9,9,11,);
B(B_F,@AND-2,,11,11,16,15,);
B(B_F,@AND-2,,11,15,16,19,N);
B(B_F,@OR-2,,18,11,23,15,);
B(B_VAROUT,,LXexDrPreIn,23,12,25,14,);
B(B_VARIN,,MXjoyExcentDrIn,7,12,9,14,);
B(B_VARIN,,ITXexDriveIn,9,17,11,19,);
L(16,5,18,5);
L(17,6,18,6);
L(17,6,17,9);
L(16,9,17,9);
L(10,9,11,9);
L(10,6,11,6);
L(9,10,11,10);
L(16,13,18,13);
L(17,14,18,14);
L(17,14,17,17);
L(16,17,17,17);
L(10,17,11,17);
L(10,14,11,14);
L(9,13,11,13);
L(10,6,10,17);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 16 ;
        NETWORK_BODY
B(B_COMMENT,,excentric drive,1,1,27,2,);
B(B_VAROUT,,QXexcentDriveOut,25,5,27,7,);
B(B_VAROUT,,QTXexDriveOut,25,4,27,6,);
B(B_F,@AND-3,,19,3,24,8,0NN);
B(B_VARIN,,MXclampWorking,16,13,18,15,);
B(B_F,@AND-3,,19,8,24,13,0NN);
B(B_VAROUT,,QXexcentDriveIn,25,9,27,11,);
B(B_VAROUT,,QTXexDriveIn,25,10,27,12,);
B(B_VARIN,,MXstopAllFunctio,15,12,17,14,);
B(B_F,@AND-2,,11,8,16,12,0N);
B(B_VARIN,,QXexcentDriveOut,9,10,11,12,);
B(B_VARIN,,LXexDrPreIn,9,9,11,11,);
B(B_F,@AND-2,,11,3,16,7,0N);
B(B_VARIN,,LXexDrPreOut,9,4,11,6,);
B(B_VARIN,,QXexcentDriveIn,9,5,11,7,);
L(18,7,19,7);
L(17,6,19,6);
L(25,5,25,6);
L(24,5,25,5);
L(16,5,19,5);
L(17,11,19,11);
L(18,12,19,12);
L(24,10,25,10);
L(25,10,25,11);
L(16,10,19,10);
L(18,7,18,14);
L(17,6,17,13);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_F,@OR-2,,11,3,16,7,);
B(B_VARIN,,QXexcentDriveOut,9,4,11,6,);
B(B_VARIN,,QXexcentDriveIn,9,5,11,7,);
B(B_COMMENT,,set exDr cylinder working,1,1,27,2,);
B(B_VAROUT,,MXexDrWorking,17,4,19,6,);
B(B_VAROUT,,LXexDrWorking,17,5,19,7,);
L(16,5,17,5);
L(17,5,17,6);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 16 ;
        NETWORK_BODY
B(B_COMMENT,,clamping jaw,1,1,27,2,);
B(B_F,@AND-3,,19,3,24,8,0NN);
B(B_F,@AND-2,,11,3,16,7,0N);
B(B_VARIN,,MXexDrWorking,16,13,18,15,);
B(B_F,@AND-3,,19,8,24,13,0NN);
B(B_VAROUT,,QTXclampClose,25,9,27,11,);
B(B_VAROUT,,QXclampJawClose,25,10,27,12,);
B(B_F,@AND-2,,11,8,16,12,0N);
B(B_VARIN,,MXstopAllFunctio,15,12,17,14,);
B(B_VAROUT,,QXclampJawOpen,25,5,27,7,);
B(B_VAROUT,,QTXclampOpen,25,4,27,6,);
B(B_VARIN,,QXclampJawOpen,9,10,11,12,);
B(B_VARIN,,ITXclampClose,9,9,11,11,);
B(B_VARIN,,QXclampJawClose,9,5,11,7,);
B(B_VARIN,,ITXclampOpen,9,4,11,6,);
L(18,7,19,7);
L(17,6,19,6);
L(24,5,25,5);
L(16,5,19,5);
L(17,11,19,11);
L(18,12,19,12);
L(24,10,25,10);
L(25,10,25,11);
L(16,10,19,10);
L(18,7,18,14);
L(17,6,17,13);
L(25,5,25,6);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_F,@OR-2,,11,3,16,7,);
B(B_VARIN,,QXclampJawClose,9,4,11,6,);
B(B_VARIN,,QXclampJawOpen,9,5,11,7,);
B(B_COMMENT,,set clamp cylinder working,1,1,27,2,);
B(B_VAROUT,,QXrelClampJaw,17,5,19,7,);
B(B_VAROUT,,MXclampWorking,17,4,19,6,);
B(B_VAROUT,,LXclampWorking,17,6,19,8,);
L(16,5,17,5);
L(17,5,17,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL := exit: ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_VARIN,,MXhammerWorking,9,4,11,6,);
B(B_VARIN,,LXexDrWorking,9,5,11,7,);
B(B_VARIN,,LXclampWorking,9,6,11,8,);
B(B_F,@OR-3,,11,3,16,8,);
B(B_VAROUT,,LXhamFunkWorking,16,4,18,6,);
B(B_COMMENT,,hammer funktions working,1,1,27,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_VARIN,,TRUE,9,3,11,5,);
B(B_COMMENT,,jump to exit ,1,1,27,2,);
B(B_RETURN,,,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL := init: ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,init program,1,1,27,2,);
B(B_VARIN,,TRUE,9,3,11,5,);
B(B_VAROUT,,LXinitOk,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value additional hydraulics hammer,1,1,27,2,);
B(B_FB,CorrValue_Bool,CorrValue_Bool1,11,4,23,10,);
B(B_VARIN,,CXadHamOperat,9,8,11,10,);
B(B_VARIN,,FALSE,9,5,11,7,);
B(B_VARIN,,FALSE,9,6,11,8,);
B(B_VARIN,,TRUE,9,7,11,9,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value vibrator/hammer pump direct (without ludv section),1,1,27,2,);
B(B_FB,CorrValue_Bool,CorrValue_Bool2,11,4,23,10,);
B(B_VARIN,,FALSE,9,5,11,7,);
B(B_VARIN,,FALSE,9,6,11,8,);
B(B_VARIN,,TRUE,9,7,11,9,);
B(B_VARIN,,CXhamVibDirect,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value integrator time hammer up,1,1,27,2,);
B(B_VARIN,,100.0,9,5,11,7,);
B(B_VARIN,,10.0,9,6,11,8,);
B(B_VARIN,,500.0,9,7,11,9,);
B(B_VARIN,,CDhamIntTimeUp,9,8,11,10,);
B(B_FB,CorrValue_Real,CorrValue_Real1,11,4,23,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value integrator time hammer down,1,1,27,2,);
B(B_VARIN,,100.0,9,5,11,7,);
B(B_VARIN,,10.0,9,6,11,8,);
B(B_VARIN,,500.0,9,7,11,9,);
B(B_VARIN,,CDhamIntTimeDn,9,8,11,10,);
B(B_FB,CorrValue_Real,CorrValue_Real2,11,4,23,10,);
        END_NETWORK_BODY
    END_NET_WORK
END_BODY
END_PROGRAM

PROGRAM ADhangLeadV030
	VAR_EXTERNAL 
		IXentrySwiClosed: BOOL:=FALSE;
			(*entry switch closed*)
		ITXx25LeCursLeDn: BOOL:=FALSE;
			(*keyboard X25 left cursor, left/down*)
		ITXx25LeCursRiUp: BOOL:=FALSE;
			(*keyboard X25 left cursor,  right/up *)
		ITXz17leadFun: BOOL:=FALSE;
			(*preselection Z17 leader function *)
		ITXz6leadFun: BOOL:=FALSE;
			(*preselection Z6 leader function*)
		ITXz3leadFun: BOOL:=FALSE;
			(*preselection Z3 leader function*)
		ITXz4leadFun: BOOL:=FALSE;
			(*preselection Z4 leader function*)
		ITXpileGuideFun: BOOL:=FALSE;
			(*preselection pile guide leader function*)
		ITXz2leadFun: BOOL:=FALSE;
			(*preselection Z2 leader function*)
		ITXx25RiCursClDn: BOOL:=FALSE;
			(*keyboard X25 right cursor, close/down*)
		ITXx25RiCursOpUp: BOOL:=FALSE;
			(*keyboard X25 right cursor, open/up*)
		ITXleadHiAdWinch: BOOL:=FALSE;
			(*preselection leader hight adjustment winch *)
		IXslidTableLimOk: BOOL:=FALSE;
			(*lg 2 luffing jib flap is out (ready) / sliding table (pivot piece) limit switch o.k.*)
		ITXleadAutoInc: BOOL:=FALSE;
			(*preselection leader automatic inclination *)
		IWkeybX25Poti1: UINT:=0;
			(*keyboard X25 poti 1*)
		IWkeybX25Poti2: UINT:=0;
			(*keyboard X25 poti 2*)
		IWkeybX25Poti3: UINT:=0;
			(*keyboard X25 poti 3*)
		IWkeybX25Poti4: UINT:=0;
			(*keyboard X25 poti 4*)
		IWleadAngleX: UINT:=0;
			(*add wind speed luffing jib/leader incl. x-axis*)
		IWleadAngleY: UINT:=0;
			(*add lml press. 2 luff. jib fall back supp/leader incl. y-axis*)
		IWslideTableAnge: UINT:=0;
			(*ad angle sliding table hanging leader*)
		QTXx25LeCursLeDn: BOOL:=FALSE;
			(*keyboard X25 left cursor, left/down*)
		QTXx25LeCursRiUp: BOOL:=FALSE;
			(*keyboard X25 left cursor,  right/up *)
		QTXz17leadFun: BOOL:=FALSE;
			(*enable Z17 leader function *)
		QTXz6leadFun: BOOL:=FALSE;
			(*enable Z6 leader function*)
		QTXz3leadFun: BOOL:=FALSE;
			(*enable Z3 leader function*)
		QTXz4leadFun: BOOL:=FALSE;
			(*enable Z4 leader function*)
		QTXpileGuideFun: BOOL:=FALSE;
			(*enable pile guide leader function*)
		QTXz2leadFun: BOOL:=FALSE;
			(*enable Z2 leader function*)
		QTXx25RiCursClDn: BOOL:=FALSE;
			(*keyboard X25 right cursor, close/down*)
		QTXx25RiCursOpUp: BOOL:=FALSE;
			(*keyboard X25 right cursor, open/up*)
		QXlg2Brake: BOOL:=FALSE;
			(*LG 2 brake*)
		QTXleadHiAdWinch: BOOL:=FALSE;
			(*enable leader hight adjustment winch *)
		QTXleadAutoInc: BOOL:=FALSE;
			(*enable leader automatic inclination *)
		MXengStarterActi: BOOL:=FALSE;
			(*engine starter activated*)
		MXhg1UpLimBridge: BOOL:=FALSE;
			(*upper limit switch brigde hoisting gear 1*)
		MXhg2UpLimBridge: BOOL:=FALSE;
			(*upper limit switch brigde hoisting gear 2*)
		MXmoorUpLimBridg: BOOL:=FALSE;
			(*upper limit switch brigde mooring*)
		MXmoorLoLimBridg: BOOL:=FALSE;
			(*lower limit switch brigde mooring*)
		MXadwUpLimOk: BOOL:=FALSE;
			(*additional winch: upper limit switch o.k.*)
		MXaxwAnalSigPos: BOOL:=FALSE;
			(*aux winch analog signal positiv*)
		MXaxwAnalSigNeg: BOOL:=FALSE;
			(*aux winch analog signal negativ*)
		MXexitHangLeader: BOOL:=FALSE;
			(*exit hanging leader programm *)
		MXpresHangLeader: BOOL:=FALSE;
			(*add. preselection hanging leader*)
		MXenabHangLeader: BOOL:=FALSE;
			(*add. enable hanging leader*)
		MXdgcBlockLml: BOOL:=FALSE;
			(*dgc block lml*)
		MXlmlDerrickEnab: BOOL:=FALSE;
			(*lml derrick enabled*)
		MXlimitSwBridged: BOOL:=FALSE;
			(*X23 limit switches bridged for assembly operation*)
		MXassemblyOperat: BOOL:=FALSE;
			(*assembly operation*)
		MXaFrameSensorEr: BOOL:=FALSE;
			(*a frame load sensor error*)
		MXleaderInZero: BOOL:=FALSE;
			(*leader in zero position*)
		MXpresLeaderZero: BOOL:=FALSE;
			(*preselection set leader to zero*)
		MXsetLeaderZero: BOOL:=FALSE;
			(*enable set leader to zero*)
		MXsetCursorOn: BOOL:=FALSE;
			(*set cursor graph. window on*)
		MXleaderStopBack: BOOL:=FALSE;
			(*leader stop backward*)
		MXstopAllFunctio: BOOL:=FALSE;
			(*stop all excavator functions*)
		MXaxwActive: BOOL:=FALSE;
			(*auxiliary winch 2 active*)
		MXaxwUpLimOk: BOOL:=FALSE;
			(*auxiliary winch 2: upper limit switch o.k.*)
		MXadSetLg2AuxWin: BOOL:=FALSE;
			(*ad set lg2 as auxiliary winch*)
		MXz6LocStopOut: BOOL:=FALSE;
			(*Z6 local stop out (left)*)
		MXz6LocStopIn: BOOL:=FALSE;
			(*Z6 local stop in (right)*)
		MXz6GlobalStop: BOOL:=FALSE;
			(*Z6 cylinder global stop*)
		MXz2LocStopOut: BOOL:=FALSE;
			(*Z2 local stop out*)
		MXz2LocStopIn: BOOL:=FALSE;
			(*Z2 local stop in *)
		MXz2GlobalStop: BOOL:=FALSE;
			(*Z2 cylinder global stop*)
		MXz4LocStopOut: BOOL:=FALSE;
			(*Z4 local stop out*)
		MXz4LocStopIn: BOOL:=FALSE;
			(*Z4 local stop in *)
		MXz4GlobalStop: BOOL:=FALSE;
			(*Z4 cylinder global stop*)
		MXz4EnJoySig: BOOL:=FALSE;
			(*Z4 enable joystick signal*)
		MXz3LocStopOut: BOOL:=FALSE;
			(*Z3 local stop out*)
		MXz3LocStopIn: BOOL:=FALSE;
			(*Z3 local stop in *)
		MXz3GlobalStop: BOOL:=FALSE;
			(*Z3 cylinder global stop*)
		MXz17LocStopIn: BOOL:=FALSE;
			(*Z17 local stop in *)
		MXz17LocStopOut: BOOL:=FALSE;
			(*Z17 local stop out*)
		MXz17GlobalStop: BOOL:=FALSE;
			(*Z17 cylinder global stop*)
		MXplGuiLocStopIn: BOOL:=FALSE;
			(*pile guide cylinder local stop in*)
		MXplGuiLocStopOu: BOOL:=FALSE;
			(*pile guide cylinder local stop out*)
		MXplGuidGlobStop: BOOL:=FALSE;
			(*pile guide cylinder global stop*)
		MXjoyLeadAdjust1: BOOL:=FALSE;
			(*leader adjustment 1 on joystick*)
		MXjoyLeadAdjust2: BOOL:=FALSE;
			(*leader adjustment 2 on joystick*)
		MXrelLeaderPump: BOOL:=FALSE;
			(*release pump for leader valves*)
		MXsetMooringEnab: BOOL:=FALSE;
			(*set enable mooring for cyl. adjust.*)
		MXlgEnPowStage: BOOL:=FALSE;
			(*LG enable power stage lifting or lowering*)
		MXaxwEnPowStage: BOOL:=FALSE;
			(*aux winch enable power stage*)
		MXslidTabStopUp: BOOL:=FALSE;
			(*stop sliding table up when crashes with pivot piece *)
		MXslidTablePrese: BOOL:=FALSE;
			(*preselection leader high adjusting winch*)
		MXslidTablAutoUp: BOOL:=FALSE;
			(*sliding table automatic up when table changes angle *)
		MXslidTablAutEna: BOOL:=FALSE;
			(*add. angle indication sliding table enable*)
		MXadSlidTabLiSwi: BOOL:=FALSE;
			(*add. limit switch sliding table (pievote piece)*)
		MXleadHighWinPre: BOOL:=FALSE;
			(*preselection leader high adjusting winch*)
		MXflashSignal: BOOL:=FALSE;
			(*flash signal*)
		MXlmlDataTimeout: BOOL:=FALSE;
			(*lml timeout data update*)
		MXlmlBridged: BOOL:=FALSE;
			(*X23 lml bridged*)
		MXz6PreJoySig: BOOL:=FALSE;
			(*Z6 preselect joystick signal*)
		MXz6EnJoySig: BOOL:=FALSE;
			(*Z6 enable joystick signal*)
		MXz6anaSigOut: BOOL:=FALSE;
			(*Z6 analog signal positiv*)
		MXz6anaSigIn: BOOL:=FALSE;
			(*Z6 analog signal negativ*)
		MXz6ExtAnalSign: BOOL:=FALSE;
			(*Z6 external analog Signal*)
		MXz6PumpInZero: BOOL:=FALSE;
			(*Z6 cyl. valve in zero*)
		MXz6EnabPowStage: BOOL:=FALSE;
			(*Z6 enable power stage*)
		MXz4PreJoySig: BOOL:=FALSE;
			(*Z4 preselect joystick signal*)
		MXz4anaSigOut: BOOL:=FALSE;
			(*Z4 analog signal positiv*)
		MXz4anaSigIn: BOOL:=FALSE;
			(*Z4 analog signal negativ*)
		MXz4ExtAnalSign: BOOL:=FALSE;
			(*Z4 external analog Signal*)
		MXz4PumpInZero: BOOL:=FALSE;
			(*Z4 cyl. valve in zero*)
		MXz4EnabPowStage: BOOL:=FALSE;
			(*Z4 enable power stage*)
		MXz2PreJoySig: BOOL:=FALSE;
			(*Z2 preselect joystick signal*)
		MXz2anaSigOut: BOOL:=FALSE;
			(*Z2 analog signal positiv*)
		MXz2anaSigIn: BOOL:=FALSE;
			(*Z2 analog signal negativ*)
		MXz2ExtAnalSign: BOOL:=FALSE;
			(*Z2 external analog Signal*)
		MXz2PumpInZero: BOOL:=FALSE;
			(*Z2 cyl. valve in zero*)
		MXz2EnabPowStage: BOOL:=FALSE;
			(*Z2 enable power stage*)
		MXz2EnJoySig: BOOL:=FALSE;
			(*Z2 enable joystick signal*)
		MXz3PreJoySig: BOOL:=FALSE;
			(*Z3 preselect jostick signal*)
		MXz3anaSigOut: BOOL:=FALSE;
			(*Z3 analog signal positiv*)
		MXz3anaSigIn: BOOL:=FALSE;
			(*Z3 analog signal negativ*)
		MXz3ExtAnalSign: BOOL:=FALSE;
			(*Z3 external analog Signal*)
		MXz3PumpInZero: BOOL:=FALSE;
			(*Z3 cyl. valve in zero*)
		MXz3EnabPowStage: BOOL:=FALSE;
			(*Z3 enable power stage*)
		MXz3EnJoySig: BOOL:=FALSE;
			(*Z3 enable jostick signal*)
		MXz17anaSigOut: BOOL:=FALSE;
			(*Z17 analog signal positiv*)
		MXz17anaSigIn: BOOL:=FALSE;
			(*Z17 analog signal negativ*)
		MXz17PumpInZero: BOOL:=FALSE;
			(*Z17 cyl. valve in zero*)
		MXz17EnabPowStag: BOOL:=FALSE;
			(*Z17 enable power stage*)
		MXplGuiAnaSigIn: BOOL:=FALSE;
			(*pile guide cyl. analog signal negativ*)
		MXplGuiAnaSigOut: BOOL:=FALSE;
			(*pile guide cyl. analog signal positiv*)
		MXplGuiPumpIn0: BOOL:=FALSE;
			(*pile guide cyl. valve in zero*)
		MXplGuiEnabPowSt: BOOL:=FALSE;
			(*pile guide cyl. enable power stage*)
		MDkeybx25Poti1: REAL:=0.0;
			(*Keyboard X25 Poti1*)
		MDkeybx25Poti2: REAL:=0.0;
			(*Keyboard X25 Poti2*)
		MDkeybx25Poti3: REAL:=0.0;
			(*Keyboard X25 Poti3*)
		MDkeybx25Poti4: REAL:=0.0;
			(*Keyboard X25 Poti4*)
		MDz6CursorSign: REAL:=0.0;
			(*Z6 analog signal cursor +/-[%]*)
		MDz6ExtAnalSign: REAL:=0.0;
			(*Z6 external analog signal +/-[%]*)
		MDz6JoySignal: REAL:=0.0;
			(*Z6 analog signal joystick +/-[%]*)
		MDz6PumpSignal: REAL:=0.0;
			(*Z6 analog pump signal*)
		MDz4CursorSign: REAL:=0.0;
			(*Z4 analog signal cursor +/-[%]*)
		MDz4ExtAnalSign: REAL:=0.0;
			(*Z4 external analog signal +/-[%]*)
		MDz4JoySignal: REAL:=0.0;
			(*Z4 analog signal joystick +/-[%]*)
		MDz4PumpSignal: REAL:=0.0;
			(*Z4 analog pump signal*)
		MDz2CursorSign: REAL:=0.0;
			(*Z2 analog signal cursor +/-[%]*)
		MDz2ExtAnalSign: REAL:=0.0;
			(*Z2 external analog signal +/-[%]*)
		MDz2JoySignal: REAL:=0.0;
			(*Z2 analog signal joystick +/-[%]*)
		MDz2PumpSignal: REAL:=0.0;
			(*Z2 analog pump signal*)
		MDz2PressSignal: REAL:=0.0;
			(*Z2 pressure signal [%]*)
		MDz3CursorSign: REAL:=0.0;
			(*Z3 analog signal cursor +/-[%]*)
		MDz3ExtAnalSign: REAL:=0.0;
			(*Z3 external analog signal +/-[%]*)
		MDz3JoySignal: REAL:=0.0;
			(*Z3 analog signal joystick +/-[%]*)
		MDz3PumpSignal: REAL:=0.0;
			(*Z3 analog pump signal*)
		MDz17PumpSignal: REAL:=0.0;
			(*Z17 analog pump signal*)
		MDz17CursorSign: REAL:=0.0;
			(*Z17 analog signal cursor +/-[%]*)
		MDplGuiCursorSig: REAL:=0.0;
			(*pile guide cylidner analog signal cursor +/-[%]*)
		MDplGuiPumpSig: REAL:=0.0;
			(*pile guide cylidner analog pump signal*)
		MDleadAngleX: REAL:=0.0;
			(*hanging leader angle x*)
		MDleadAngleY: REAL:=0.0;
			(*hanging leader angle y*)
		MDaFrameLoadSens: REAL:=0.0;
			(*a frame load sensor in to*)
		MDslidTableAngel: REAL:=0.0;
			(*hanging leader sliding table angle*)
	END_VAR
	VAR_EXTERNAL CONSTANT
		MSG_ERROR: UINT:=0;
	END_VAR
	VAR_EXTERNAL RETAIN
		MXlmlLuffJibEnab: BOOL:=FALSE;
			(*lml luffing jib enabled*)
		MXleaderOper: BOOL:=FALSE;
			(*leader operation active*)
		MDoffsetXaxis: REAL:=0.0;
			(*offset leader x axis*)
		MDoffsetYaxis: REAL:=0.0;
			(*offset leader y axis*)
	END_VAR
	VAR_EXTERNAL CONSTANT RETAIN
		CXadHangLeader: BOOL:=FALSE;
			(*add. device hanging leader*)
		CXleadAngleIndic: BOOL:=FALSE;
			(*add. leader angle indication*)
		CXautoSlideTable: BOOL:=FALSE;
			(*add. automatic sliding table for leader inclination *)
		CXslidTabLimSwit: BOOL:=FALSE;
			(*add. limit switch sliding table (pievote piece)*)
		CXpileGuideCyl: BOOL:=FALSE;
			(*add. pile giude cylinder (leader) *)
		CXleadSlewCylZ3: BOOL:=FALSE;
			(*add. leader slewing cylinder Z3*)
		CXleadGallCylZ17: BOOL:=FALSE;
			(*add. gallows cylinder Z17*)
		CDleadThreshBack: REAL:=0.0;
			(*ad leader fall back threshold in tones*)
		CDangSlidTabOffs: REAL:=0.0;
			(*sliding table angle offset*)
		CDslidTablAngInt: REAL:=0.0;
			(*sliding table angle filter int. time up/down hanging leader*)
		CDslidTablAngLim: REAL:=0.0;
			(*sliding table angle limit hi-low for automatic hanging leader*)
		CDslidTablAngSca: REAL:=0.0;
			(*sliding table angle scale, hanging leader*)
		CDslidTablAngWin: REAL:=0.0;
			(*sliding table angle filter window value, hanging leader*)
		CDslidTablAngHys: REAL:=0.0;
			(*sliding table angle hysteria window value, hanging leader*)
		CDz6IntTimeDn: REAL:=0.0;
			(*Z6 left integrator time falling signal (% per s)*)
		CDz6IntTimeUp: REAL:=0.0;
			(*Z6 left integrator time rising signal (% per s)*)
		CDz4IntTimeDn: REAL:=0.0;
			(*Z4 left integrator time falling signal (% per s)*)
		CDz4IntTimeUp: REAL:=0.0;
			(*Z4 left integrator time rising signal (% per s)*)
		CDz2IntTimeDn: REAL:=0.0;
			(*Z2 left integrator time falling signal (% per s)*)
		CDz2IntTimeUp: REAL:=0.0;
			(*Z2 left integrator time rising signal (% per s)*)
		CDz2PresSigOut: REAL:=0.0;
			(*Z2 pressure signal out [%]*)
		CDz2PresSigIn: REAL:=0.0;
			(*Z2 pressure signal in [%]*)
		CDz3IntTimeDn: REAL:=0.0;
			(*Z3 left integrator time falling signal (% per s)*)
		CDz3IntTimeUp: REAL:=0.0;
			(*Z3 left integrator time rising signal (% per s)*)
		CDz6limitOut: REAL:=0.0;
			(*Z6 limitation out/left*)
		CDz6limitIn: REAL:=0.0;
			(*Z6 limitation in/right*)
		CDz6limitManual: REAL:=0.0;
			(*Z6 limitation manual*)
		CDz4limitOut: REAL:=0.0;
			(*Z4 limitation out*)
		CDz4limitIn: REAL:=0.0;
			(*Z4 limitation in*)
		CDz4limitManual: REAL:=0.0;
			(*Z4 limitation manual*)
		CDz2limitOut: REAL:=0.0;
			(*Z2 limitation out*)
		CDz2limitIn: REAL:=0.0;
			(*Z2 limitation in*)
		CDz2limitManual: REAL:=0.0;
			(*Z2 limitation manual*)
		CDz3limitOut: REAL:=0.0;
			(*Z3 limitation out/left*)
		CDz3limitIn: REAL:=0.0;
			(*Z3 limitation in/right*)
		CDz3limitManual: REAL:=0.0;
			(*Z3 limitation manual*)
		CDz17limitOut: REAL:=0.0;
			(*Z17 limitation out/left*)
		CDz17limitIn: REAL:=0.0;
			(*Z17 limitation in/right*)
		CDz17limitManual: REAL:=0.0;
			(*Z17 limitation manual*)
		CDplGuiLimitOut: REAL:=0.0;
			(*pile guide limitation out*)
		CDplGuiLimitIn: REAL:=0.0;
			(*pile guide limitation in*)
		CDplGuiLimitMan: REAL:=0.0;
			(*pile guide limitation manual*)
	END_VAR
	VAR 
		LXinitOk: BOOL:=FALSE;
		LXstarted: BOOL:=FALSE;
		LXhgUpperLimOk: BOOL:=FALSE;
		LXleaderAutoIncl: BOOL:=FALSE;
		LXx25KeySwitched: BOOL:=FALSE;
		LXleadHighWinAct: BOOL:=FALSE;
		LXslidTablAutoUp: BOOL:=FALSE;
		LXslidTablAutoDo: BOOL:=FALSE;
		LXangSliTablZero: BOOL:=FALSE;
		LXangSlidTablHig: BOOL:=FALSE;
		LXangSlidTablLow: BOOL:=FALSE;
		LXslidTabStopUp: BOOL:=FALSE;
		LXsliTabStopUpOk: BOOL:=FALSE;
		LXz6LimSwOutOk: BOOL:=FALSE;
		LXz6LimSwInOk: BOOL:=FALSE;
		LXz4LimSwOutOk: BOOL:=FALSE;
		LXz4LimSwInOk: BOOL:=FALSE;
		LXz2LimSwOutOk: BOOL:=FALSE;
		LXz2LimSwInOk: BOOL:=FALSE;
		LXz3LimSwOutOk: BOOL:=FALSE;
		LXz3LimSwInOk: BOOL:=FALSE;
		LXz17LimSwOutOk: BOOL:=FALSE;
		LXz17LimSwInOk: BOOL:=FALSE;
		LXreleaseFunct: BOOL:=FALSE;
			(*release functions*)
		LXpreselZ6: BOOL:=FALSE;
			(*Z6 preselected*)
		LXpreselZ4: BOOL:=FALSE;
			(*Z4 preselected*)
		LXpreselZ3: BOOL:=FALSE;
			(*Z3 preselected*)
		LXpreselZ2: BOOL:=FALSE;
			(*Z2 preselected*)
		LXpreselZ17: BOOL:=FALSE;
			(*Z17 preselected*)
		LXpresePileGuide: BOOL:=FALSE;
			(*pile guide preselected*)
		LXresetZ6: BOOL:=FALSE;
			(*Z6 reset*)
		LXresetZ4: BOOL:=FALSE;
			(*Z4 reset*)
		LXresetZ3: BOOL:=FALSE;
			(*Z3 reset*)
		LXresetZ2: BOOL:=FALSE;
			(*Z2 reset*)
		LXresetZ17: BOOL:=FALSE;
			(*Z17 reset*)
		LXresetPileGuide: BOOL:=FALSE;
			(*reset pile guide cyl.*)
		LXz6extern: BOOL:=FALSE;
			(*Z6 extern control*)
		LXz4extern: BOOL:=FALSE;
			(*Z4 extern control*)
		LXz2extern: BOOL:=FALSE;
			(*Z2 extern control*)
		LXz3extern: BOOL:=FALSE;
			(*Z3 extern control*)
		LXledInZ6: BOOL:=FALSE;
			(*Z6 led in*)
		LXledOutZ6: BOOL:=FALSE;
			(*Z6 led out*)
		LXledInZ4: BOOL:=FALSE;
			(*Z4 led in*)
		LXledOutZ4: BOOL:=FALSE;
			(*Z4 led out*)
		LXledInZ3: BOOL:=FALSE;
			(*Z3 led in*)
		LXledOutZ3: BOOL:=FALSE;
			(*Z3 led out*)
		LXledInZ2: BOOL:=FALSE;
			(*Z2 led in*)
		LXledOutZ2: BOOL:=FALSE;
			(*Z2 led out*)
		LXledInZ17: BOOL:=FALSE;
			(*Z17 led in*)
		LXledOutZ17: BOOL:=FALSE;
			(*Z17 led out*)
		LXledInPileGuide: BOOL:=FALSE;
			(*pile guide cylinder led in*)
		LXledOutPileGuid: BOOL:=FALSE;
			(*pile guide cylinder  led out*)
		LD1: REAL:=0.0;
		LDleadAngleX: REAL:=0.0;
		LDleadAngleY: REAL:=0.0;
		LDdefineXrange: REAL:=0.0;
		LDdefineYrangPos: REAL:=0.0;
		LDdefineYrangNeg: REAL:=0.0;
		LDlrAlphaZero: REAL:=0.0;
		LDslidTableAngel: REAL:=0.0;
			(*hanging leader sliding table angle*)
		LDz6AnalSignal: REAL:=0.0;
		LDz4AnalSignal: REAL:=0.0;
		LDz2AnalSignal: REAL:=0.0;
		LDz3AnalSignal: REAL:=0.0;
		LDz17AnalSignal: REAL:=0.0;
		LDplGuiAnalSig: REAL:=0.0;
		ScaleAI1: ScaleAI;
		ScaleAI2: ScaleAI;
		ScaleAI3: ScaleAI;
		Message1: MsgRealReal;
		Message2: MsgRealReal;
		Message5: MsgRealReal;
		Message6: MsgRealReal;
		CorrValue_Bool1: CorrValue_Bool;
		CorrValue_Bool2: CorrValue_Bool;
		CorrValue_Bool3: CorrValue_Bool;
		CorrValue_Bool4: CorrValue_Bool;
		CorrValue_Bool5: CorrValue_Bool;
		CorrValue_Bool6: CorrValue_Bool;
		CorrValue_Bool7: CorrValue_Bool;
		CorrValue_Real1: CorrValue_Real;
		CorrValue_Real2: CorrValue_Real;
		CorrValue_Real3: CorrValue_Real;
		CorrValue_Real4: CorrValue_Real;
		CorrValue_Real5: CorrValue_Real;
		CorrValue_Real6: CorrValue_Real;
		CorrValue_Real7: CorrValue_Real;
		CorrValue_Real8: CorrValue_Real;
		CorrValue_Real9: CorrValue_Real;
		CorrValue_Real10: CorrValue_Real;
		CorrValue_Real11: CorrValue_Real;
		CorrValue_Real12: CorrValue_Real;
		CorrValue_Real13: CorrValue_Real;
		CorrValue_Real14: CorrValue_Real;
		CorrValue_Real15: CorrValue_Real;
		CorrValue_Real16: CorrValue_Real;
		CorrValue_Real17: CorrValue_Real;
		CorrValue_Real18: CorrValue_Real;
		CorrValue_Real19: CorrValue_Real;
		CorrValue_Real20: CorrValue_Real;
		CorrValue_Real21: CorrValue_Real;
		CorrValue_Real22: CorrValue_Real;
		CorrValue_Real23: CorrValue_Real;
		CorrValue_Real24: CorrValue_Real;
		CorrValue_Real25: CorrValue_Real;
		CorrValue_Real26: CorrValue_Real;
		CorrValue_Real27: CorrValue_Real;
		CorrValue_Real28: CorrValue_Real;
		CorrValue_Real29: CorrValue_Real;
		CorrValue_Real30: CorrValue_Real;
		CorrValue_Real31: CorrValue_Real;
		CorrValue_Real32: CorrValue_Real;
		CorrValue_Real33: CorrValue_Real;
		CorrValue_Real34: CorrValue_Real;
		CorrValue_Real35: CorrValue_Real;
		digital1: FB_anaCylDigV010;
		digital2: FB_anaCylDigV010;
		digital3: FB_anaCylDigV010;
		digital4: FB_anaCylDigV010;
		digital5: FB_anaCylDigV010;
		digital6: FB_anaCylDigV010;
		analog1: FB_anaCylAnaV011;
		analog2: FB_anaCylAnaV011;
		analog3: FB_anaCylAnaV011;
		analog4: FB_anaCylAnaV011;
		analog5: FB_anaCylAnaV011;
		analog6: FB_anaCylAnaV011;
		Filter1: FilterTP4;
		Filter2: FilterTP4;
		WndComp1: WndComp;
		WndComp2: WndComp;
		WndComp3: WndComp;
		WndComp4: WndComp;
		WndComp5: WndComp;
		GPfilter101: GPfilter10V010;
		FBfilterUn1: FB_filterUnV010;
		SR1: SR;
		SR2: SR;
		SR3: SR;
		RS1: RS;
		RS2: RS;
		RS3: RS;
		RS4: RS;
		RS5: RS;
		RS6: RS;
		RS7: RS;
		RS8: RS;
		RS9: RS;
		RS10: RS;
		RS11: RS;
		RS12: RS;
		RS13: RS;
		RS14: RS;
		RS15: RS;
		R_TRIG8: R_TRIG;
		R_TRIG9: R_TRIG;
		FB_functX25_2: FB_functX25V010;
		FB_functX25_3: FB_functX25V010;
		FB_functX25_4: FB_functX25V010;
		FB_functX25_5: FB_functX25V010;
		FB_functX25_6: FB_functX25V010;
		FB_functX25_7: FB_functX25V010;
		FB_functX25_8: FB_functX25V010;
		FB_functX25_9: FB_functX25V010;
		FB_functX25_11: FB_functX25V010;
		FB_functX25_12: FB_functX25V010;
		FB_functX25_13: FB_functX25V010;
		FB_functX25_15: FB_functX25V010;
		FB_functX25_16: FB_functX25V010;
		FB_functX25_17: FB_functX25V010;
		FB_functX25_18: FB_functX25V010;
		FB_functX25_20: FB_functX25V010;
		FB_functX25_24: FB_functX25V010;
		FB_functX25_25: FB_functX25V010;
		FB_functX25_26: FB_functX25V010;
		FB_cursX25_2: FB_cursX25V011;
		FB_cursX25_3: FB_cursX25V012;
		FB_cursX25_4: FB_cursX25V012;
		FB_cursX25_5: FB_cursX25V012;
		FB_cursX25_6: FB_cursX25V012;
		FB_cursX25_7: FB_cursX25V012;
		FB_cursX25_8: FB_cursX25V011;
		FB_cursX25_12: FB_cursX25V012;
		FB_cursX25_13: FB_cursX25V012;
		FB_cursX25_15: FB_cursX25V011;
		FB_cursX25_16: FB_cursX25V012;
		FB_cursX25_17: FB_cursX25V011;
		FB_cursX25_18: FB_cursX25V011;
		FB_cursX25_20: FB_cursX25V011;
	END_VAR
'FBD'
BODY
    WORKSPACE
        NETWORK_LIST_TYPE := NWTYPEFBD ;
        ACTIVE_NETWORK := 0 ;
    END_WORKSPACE
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_COMMENT,,init first time,1,1,27,2,);
B(B_VARIN,,LXinitOk,9,4,11,6,);
B(B_F,not,,11,3,16,6,);
B(B_JUMP,,init,16,4,18,6,);
B(B_COMMENT,,Programm für Hänge-Schwingmäkler: ø^,42,0,68,1,);
B(B_COMMENT,,- Bühnenverstellwinde anstatt Zylinder wird s/w gefahren,42,2,68,3,);
B(B_COMMENT,,- Mäklerneigungsautomatik. Bühnenwinde in Abhängigkeit der Mäk-ø^  lerhöhenverstellwinde. Mäklerwinkel bleibt konstant.,42,3,68,5,);
B(B_COMMENT,,- Endschalter zwischen Bühne und Anlenkstück,42,5,68,6,);
B(B_COMMENT,,- Neigungsmessung der Bühne (90° Winkelgeber),42,1,68,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,protect correction value change while program is activ,1,1,27,2,);
B(B_F,sel,,18,5,23,10,);
B(B_VAROUT,,MXpresHangLeader,23,6,25,8,);
B(B_VARIN,,MXpresHangLeader,16,7,18,9,);
B(B_VARIN,,CXadHangLeader,16,8,18,10,);
B(B_VARIN,,IXentrySwiClosed,9,4,11,6,);
B(B_VARIN,,LXstarted,9,5,11,7,);
B(B_F,@OR-2,,11,3,16,7,NN);
L(17,7,18,7);
L(16,5,17,5);
L(17,5,17,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_COMMENT,,enable hanging leader; block lml when X25 (hanging leader) is mounted ,1,1,27,2,);
B(B_VARIN,,MXlmlLuffJibEnab,9,6,11,8,);
B(B_VARIN,,MXlmlDerrickEnab,9,7,11,9,);
B(B_VARIN,,MXpresHangLeader,9,5,11,7,);
B(B_VARIN,,MXexitHangLeader,9,8,11,10,);
B(B_VARIN,,MXleaderOper,9,4,11,6,);
B(B_VAROUT,,MXdgcBlockLml,17,4,19,6,);
B(B_VAROUT,,MXenabHangLeader,17,5,19,7,);
B(B_F,@AND-5,,11,3,16,10,00NNN);
L(17,5,17,6);
L(16,5,17,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_VAROUT,,MXslidTablAutEna,23,6,25,8,);
B(B_F,sel,,18,5,23,10,);
B(B_VARIN,,MXslidTablAutEna,16,8,18,10,);
B(B_VARIN,,IXentrySwiClosed,9,4,11,6,);
B(B_VARIN,,LXstarted,9,5,11,7,);
B(B_F,@AND-2,,11,3,16,7,);
B(B_VARIN,,CXautoSlideTable,16,7,18,9,);
B(B_COMMENT,,angle indication oft sliding table,1,1,27,2,);
L(17,5,17,7);
L(17,7,18,7);
L(16,5,17,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_VARIN,,CXslidTabLimSwit,16,7,18,9,);
B(B_VARIN,,IXentrySwiClosed,9,4,11,6,);
B(B_VARIN,,LXstarted,9,5,11,7,);
B(B_F,@AND-2,,11,3,16,7,);
B(B_F,sel,,18,5,23,10,);
B(B_VAROUT,,MXadSlidTabLiSwi,23,6,25,8,);
B(B_VARIN,,MXadSlidTabLiSwi,16,8,18,10,);
B(B_COMMENT,,sliding table limit switch,1,1,27,2,);
L(17,5,17,7);
L(17,7,18,7);
L(16,5,17,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,TRUE,9,1,11,3,);
B(B_VAROUT,,LXstarted,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_COMMENT,,release functions,1,1,26,2,);
B(B_VARIN,,MXstopAllFunctio,9,4,11,6,);
B(B_VAROUT,,LXreleaseFunct,16,4,18,6,);
B(B_VARIN,,MXleaderOper,9,5,11,7,);
B(B_F,@AND-2,,11,3,16,7,N);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,exit program in case of no additional device,1,1,27,2,);
B(B_VARIN,,MXenabHangLeader,9,3,11,5,);
B(B_RETURN,,,11,3,13,5,N);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_COMMENT,,analog input poti1 from X25 keyboard,1,1,26,2,);
B(B_VARIN,,IWkeybX25Poti1,9,4,11,6,);
B(B_F,uint_to_real,,11,3,22,6,);
B(B_VAROUT,,MDkeybx25Poti1,28,4,30,6,);
B(B_F,@DIV,,23,3,28,7,);
B(B_VARIN,,10.0,21,6,23,8,);
L(23,6,23,7);
L(22,5,23,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_COMMENT,,analog input poti2 from X25 keyboard,1,1,26,2,);
B(B_VARIN,,IWkeybX25Poti2,9,4,11,6,);
B(B_F,uint_to_real,,11,3,22,6,);
B(B_VAROUT,,MDkeybx25Poti2,28,4,30,6,);
B(B_F,@DIV,,23,3,28,7,);
B(B_VARIN,,10.0,21,6,23,8,);
L(23,6,23,7);
L(22,5,23,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_COMMENT,,analog input poti3 from X25 keyboard,1,1,26,2,);
B(B_F,uint_to_real,,11,3,22,6,);
B(B_VARIN,,IWkeybX25Poti3,9,4,11,6,);
B(B_VAROUT,,MDkeybx25Poti3,28,4,30,6,);
B(B_F,@DIV,,23,3,28,7,);
B(B_VARIN,,10.0,21,6,23,8,);
L(23,6,23,7);
L(22,5,23,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_COMMENT,,analog input poti4 from X25 keyboard,1,1,26,2,);
B(B_VARIN,,IWkeybX25Poti4,9,4,11,6,);
B(B_F,uint_to_real,,11,3,22,6,);
B(B_VAROUT,,MDkeybx25Poti4,28,4,30,6,);
B(B_F,@DIV,,23,3,28,7,);
B(B_VARIN,,10.0,21,6,23,8,);
L(23,6,23,7);
L(22,5,23,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_COMMENT,,set mooring by active leader adjustment,1,1,27,2,);
B(B_VAROUT,,MXsetMooringEnab,16,4,18,6,);
B(B_VARIN,,MXaxwEnPowStage,9,5,11,7,);
B(B_VARIN,,MXz3EnabPowStage,9,6,11,8,);
B(B_VARIN,,MXz2EnabPowStage,9,7,11,9,);
B(B_VARIN,,MXz4EnabPowStage,9,8,11,10,);
B(B_VARIN,,MXz6EnabPowStage,9,9,11,11,);
B(B_F,@OR-6,,11,3,16,11,);
B(B_VARIN,,MXlgEnPowStage,9,4,11,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,bridge upper limit switch hg,1,1,27,2,);
B(B_VARIN,,MXhg2UpLimBridge,9,5,11,7,);
B(B_VARIN,,MXhg1UpLimBridge,9,4,11,6,);
B(B_VARIN,,MXmoorUpLimBridg,9,6,11,8,);
B(B_VARIN,,MXaxwUpLimOk,9,7,11,9,);
B(B_VAROUT,,LXhgUpperLimOk,16,4,18,6,);
B(B_VARIN,,MXadwUpLimOk,9,8,11,10,);
B(B_F,@AND-5,,11,3,16,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,security stop of leader fall back,1,1,27,2,);
B(B_VARIN,,MDaFrameLoadSens,9,4,11,6,);
B(B_F,@LT-2,,11,3,16,7,);
B(B_VARIN,,CDleadThreshBack,9,5,11,7,);
B(B_F,@OR-2,,16,3,21,7,);
B(B_F,@AND-2,,21,3,26,7,0N);
B(B_VAROUT,,MXleaderStopBack,26,4,28,6,);
B(B_VARIN,,MXassemblyOperat,19,8,21,10,);
B(B_VARIN,,MXaFrameSensorEr,14,7,16,9,);
L(16,6,16,8);
L(21,6,21,9);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 15 ;
        NETWORK_BODY
B(B_COMMENT,,check limit switch sliding table and piot piece,1,1,27,2,);
B(B_VARIN,,IXslidTableLimOk,9,4,11,6,);
B(B_VARIN,,MXlimitSwBridged,9,5,11,7,);
B(B_F,@AND-3,,14,3,19,8,NN);
B(B_VARIN,,MXadSlidTabLiSwi,9,6,11,8,);
B(B_F,@OR-2,,14,8,19,12,);
B(B_VAROUT,,LXsliTabStopUpOk,26,11,28,13,);
B(B_F,@OR-2,,21,10,26,14,0N);
B(B_VAROUT,,LXslidTabStopUp,19,4,21,6,);
B(B_VAROUT,,MXslidTabStopUp,19,5,21,7,);
L(11,5,14,5);
L(11,7,14,7);
L(13,5,13,10);
L(13,10,14,10);
L(12,11,14,11);
L(12,6,12,11);
L(11,6,14,6);
L(11,7,11,13);
L(11,13,21,13);
L(20,10,20,12);
L(19,10,20,10);
L(20,12,21,12);
L(19,5,19,6);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_VARIN,,MXjoyLeadAdjust2,9,5,11,7,);
B(B_F,@AND-2,,13,3,18,7,0N);
B(B_F,@AND-2,,13,7,18,11,N);
B(B_VARIN,,MXjoyLeadAdjust1,10,4,12,6,);
B(B_VAROUT,,MXz2PreJoySig,18,4,20,6,);
B(B_VAROUT,,MXz6PreJoySig,18,5,20,7,);
B(B_VAROUT,,MXz3PreJoySig,18,8,20,10,);
B(B_VAROUT,,MXz4PreJoySig,18,9,20,11,);
B(B_COMMENT,,joystick button preselection,1,1,27,2,);
L(12,5,12,9);
L(12,9,13,9);
L(11,6,11,10);
L(11,10,13,10);
L(12,5,13,5);
L(11,6,13,6);
L(18,5,18,6);
L(18,9,18,10);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_COMMENT,,Z6 function~ button 3,1,1,26,2,);
B(B_VAROUT,,LXresetZ6,16,4,18,6,);
B(B_F,@OR-2,,11,3,16,7,);
B(B_VARIN,,LXpreselZ3,9,4,11,6,);
B(B_VARIN,,LXpreselZ17,9,5,11,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_VAROUT,,LXz6extern,16,2,18,4,);
B(B_VARIN,,MXz6EnJoySig,9,2,11,4,);
B(B_VARIN,,MXz6ExtAnalSign,9,3,11,5,);
B(B_F,@OR-2,,11,1,16,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_VARIN,,LXresetZ6,9,5,11,7,);
B(B_VAROUT,,LXpreselZ6,27,3,29,5,);
B(B_VAROUT,,QTXz6leadFun,27,2,29,4,);
B(B_VARIN,,ITXz6leadFun,9,2,11,4,);
B(B_VARIN,,LXreleaseFunct,9,4,11,6,);
B(B_FB,FB_functX25V010,FB_functX25_3,11,1,27,7,);
B(B_VARIN,,LXz6extern,9,3,11,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 15 ;
        NETWORK_BODY
B(B_VARIN,,QTXz6leadFun,9,3,11,5,);
B(B_VARIN,,MXz6LocStopIn,9,7,11,9,);
B(B_VARIN,,MXz6LocStopOut,9,8,11,10,);
B(B_VARIN,,MXz6anaSigIn,9,9,11,11,);
B(B_VARIN,,MXz6anaSigOut,9,10,11,12,);
B(B_VARIN,,LXz6extern,9,6,11,8,);
B(B_FB,FB_cursX25V012,FB_cursX25_3,11,2,30,14,);
B(B_VARIN,,CDz6limitManual,9,11,11,13,);
B(B_VARIN,,CDz6limitManual,9,12,11,14,);
B(B_VAROUT,,LXledInZ6,30,6,32,8,);
B(B_VAROUT,,LXledOutZ6,30,7,32,9,);
B(B_VAROUT,,MDz6CursorSign,30,5,32,7,);
B(B_VARIN,,ITXx25LeCursLeDn,9,5,11,7,);
B(B_VARIN,,ITXx25LeCursRiUp,9,4,11,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 25 ;
        NETWORK_BODY
B(B_COMMENT,,analog signal selector and stop z6 cylinder,1,1,27,2,);
B(B_VARIN,,0.0,23,14,25,16,);
B(B_F,@GT-2,,25,16,30,20,);
B(B_F,@LT-2,,25,20,30,24,);
B(B_VARIN,,0.0,23,18,25,20,);
B(B_VARIN,,0.0,23,22,25,24,);
B(B_F,sel,,25,11,30,16,);
B(B_VAROUT,,LDz6AnalSignal,30,12,32,14,);
B(B_F,sel,,17,12,22,17,);
B(B_F,sel,,11,13,16,18,);
B(B_VARIN,,MDz6CursorSign,9,15,11,17,);
B(B_VARIN,,MDz6ExtAnalSign,9,16,11,18,);
B(B_VARIN,,MXz6ExtAnalSign,9,14,11,16,);
B(B_VAROUT,,MXz6anaSigIn,30,17,32,19,);
B(B_VAROUT,,MXz6anaSigOut,30,21,32,23,);
B(B_F,@OR-2,,18,6,23,10,);
B(B_F,@AND-2,,11,7,16,11,0N);
B(B_F,@AND-2,,11,3,16,7,0N);
B(B_VARIN,,MXz6LocStopOut,9,4,11,6,);
B(B_VARIN,,MXz6LocStopIn,9,8,11,10,);
B(B_VARIN,,MXz6anaSigIn,9,5,11,7,);
B(B_VARIN,,MXz6anaSigOut,9,9,11,11,);
B(B_VARIN,,MXz6EnJoySig,15,11,17,13,);
B(B_VARIN,,MDz6JoySignal,15,18,17,20,);
L(22,14,22,22);
L(22,18,25,18);
L(22,22,25,22);
L(24,13,25,13);
L(22,14,25,14);
L(16,15,17,15);
L(23,8,24,8);
L(16,5,17,5);
L(17,5,17,8);
L(17,8,18,8);
L(16,9,18,9);
L(24,8,24,13);
L(17,12,17,14);
L(17,16,17,19);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_VAROUT,,LXz6LimSwOutOk,12,3,14,5,);
B(B_VAROUT,,LXz6LimSwInOk,12,4,14,6,);
B(B_VARIN,,TRUE,10,3,12,5,);
B(B_COMMENT,,limit switch Z6,1,1,27,2,);
L(12,4,12,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_COMMENT,,digital logic z6 cylinder,1,1,27,2,);
B(B_VARIN,,MXz6anaSigOut,9,4,11,6,);
B(B_VARIN,,MXz6anaSigIn,9,5,11,7,);
B(B_VARIN,,MXz6GlobalStop,9,6,11,8,);
B(B_VARIN,,LXz6LimSwOutOk,9,7,11,9,);
B(B_VARIN,,LXz6LimSwInOk,9,8,11,10,);
B(B_VAROUT,,MXz6EnabPowStage,34,4,36,6,);
B(B_VAROUT,,MXz6LocStopOut,34,5,36,7,);
B(B_VAROUT,,MXz6LocStopIn,34,6,36,8,);
B(B_VARIN,,MXz6PumpInZero,9,10,11,12,);
B(B_VARIN,,MXstopAllFunctio,9,9,11,11,);
B(B_FB,FB_anaCylDigV010,digital1,11,3,34,12,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_COMMENT,,analog part z6 cylinder,1,1,27,2,);
B(B_VAROUT,,MDz6PumpSignal,34,5,36,7,);
B(B_VARIN,,LDz6AnalSignal,9,5,11,7,);
B(B_VAROUT,,MXz6PumpInZero,34,6,36,8,);
B(B_VARIN,,100.0,9,6,11,8,);
B(B_VARIN,,CDz6limitOut,9,7,11,9,);
B(B_VARIN,,CDz6limitIn,9,8,11,10,);
B(B_VARIN,,CDz6IntTimeUp,9,9,11,11,);
B(B_VARIN,,CDz6IntTimeDn,9,10,11,12,);
B(B_FB,FB_anaCylAnaV011,analog1,11,4,34,12,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_COMMENT,,Z4 function~ button 6,1,1,26,2,);
B(B_VARIN,,LXpresePileGuide,9,5,11,7,);
B(B_VAROUT,,LXresetZ4,16,4,18,6,);
B(B_VARIN,,LXpreselZ2,9,4,11,6,);
B(B_F,@OR-2,,11,3,16,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_F,@OR-2,,11,1,16,5,);
B(B_VAROUT,,LXz4extern,16,2,18,4,);
B(B_VARIN,,MXz4EnJoySig,9,2,11,4,);
B(B_VARIN,,MXz4ExtAnalSign,9,3,11,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_VARIN,,LXresetZ4,9,5,11,7,);
B(B_VAROUT,,LXpreselZ4,27,3,29,5,);
B(B_VAROUT,,QTXz4leadFun,27,2,29,4,);
B(B_VARIN,,ITXz4leadFun,9,2,11,4,);
B(B_VARIN,,LXreleaseFunct,9,4,11,6,);
B(B_VARIN,,LXz4extern,9,3,11,5,);
B(B_FB,FB_functX25V010,FB_functX25_6,11,1,27,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 14 ;
        NETWORK_BODY
B(B_VARIN,,QTXz4leadFun,9,2,11,4,);
B(B_VARIN,,ITXx25RiCursOpUp,9,4,11,6,);
B(B_VARIN,,ITXx25RiCursClDn,9,3,11,5,);
B(B_VAROUT,,LXledInZ4,30,5,32,7,);
B(B_VAROUT,,LXledOutZ4,30,6,32,8,);
B(B_VARIN,,MXz4LocStopIn,9,6,11,8,);
B(B_VARIN,,MXz4LocStopOut,9,7,11,9,);
B(B_VAROUT,,MDz4CursorSign,30,4,32,6,);
B(B_VARIN,,LXz4extern,9,5,11,7,);
B(B_VARIN,,MXz4anaSigIn,9,8,11,10,);
B(B_VARIN,,MXz4anaSigOut,9,9,11,11,);
B(B_FB,FB_cursX25V012,FB_cursX25_6,11,1,30,13,);
B(B_VARIN,,CDz4limitManual,9,10,11,12,);
B(B_VARIN,,CDz4limitManual,9,11,11,13,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 25 ;
        NETWORK_BODY
B(B_F,@OR-2,,18,6,23,10,);
B(B_F,@AND-2,,11,7,16,11,0N);
B(B_F,@AND-2,,11,3,16,7,0N);
B(B_VARIN,,MXz4LocStopOut,9,4,11,6,);
B(B_VARIN,,MXz4anaSigIn,9,5,11,7,);
B(B_VARIN,,MXz4LocStopIn,9,8,11,10,);
B(B_VARIN,,MXz4anaSigOut,9,9,11,11,);
B(B_VARIN,,0.0,25,14,27,16,);
B(B_F,sel,,27,11,32,16,);
B(B_F,@GT-2,,27,16,32,20,);
B(B_F,@LT-2,,27,20,32,24,);
B(B_VARIN,,0.0,25,18,27,20,);
B(B_VARIN,,0.0,25,22,27,24,);
B(B_VAROUT,,LDz4AnalSignal,32,12,34,14,);
B(B_VAROUT,,MXz4anaSigIn,32,17,34,19,);
B(B_VAROUT,,MXz4anaSigOut,32,21,34,23,);
B(B_F,sel,,18,12,23,17,);
B(B_F,sel,,11,13,16,18,);
B(B_VARIN,,MXz4EnJoySig,15,11,17,13,);
B(B_VARIN,,MDz4CursorSign,9,15,11,17,);
B(B_VARIN,,MXz4ExtAnalSign,9,14,11,16,);
B(B_VARIN,,MDz4ExtAnalSign,9,16,11,18,);
B(B_VARIN,,MDz4JoySignal,15,18,17,20,);
B(B_COMMENT,,analog signal selector and stop z4 cylinder,1,1,27,2,);
L(16,5,17,5);
L(17,5,17,8);
L(17,8,18,8);
L(16,9,18,9);
L(24,14,24,22);
L(24,18,27,18);
L(24,22,27,22);
L(26,8,26,13);
L(26,13,27,13);
L(23,8,26,8);
L(23,14,27,14);
L(16,15,18,15);
L(17,16,18,16);
L(17,12,17,14);
L(17,14,18,14);
L(17,16,17,19);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,limit switch Z4 in,1,1,27,2,);
B(B_VARIN,,LXhgUpperLimOk,9,3,11,5,);
B(B_VAROUT,,LXz4LimSwInOk,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,limit switch Z4 out,1,1,27,2,);
B(B_VAROUT,,LXz4LimSwOutOk,11,3,13,5,);
B(B_VARIN,,TRUE,9,3,11,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_COMMENT,,digital logic z4 cylinder,1,1,27,2,);
B(B_VARIN,,MXz4anaSigOut,9,4,11,6,);
B(B_VARIN,,MXz4anaSigIn,9,5,11,7,);
B(B_VARIN,,MXz4GlobalStop,9,6,11,8,);
B(B_VARIN,,LXz4LimSwOutOk,9,7,11,9,);
B(B_VARIN,,LXz4LimSwInOk,9,8,11,10,);
B(B_VAROUT,,MXz4EnabPowStage,34,4,36,6,);
B(B_VAROUT,,MXz4LocStopOut,34,5,36,7,);
B(B_VAROUT,,MXz4LocStopIn,34,6,36,8,);
B(B_VARIN,,MXz4PumpInZero,9,10,11,12,);
B(B_VARIN,,MXstopAllFunctio,9,9,11,11,);
B(B_FB,FB_anaCylDigV010,digital2,11,3,34,12,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_COMMENT,,analog part z4 cylinder,1,1,27,2,);
B(B_VAROUT,,MDz4PumpSignal,34,5,36,7,);
B(B_VARIN,,LDz4AnalSignal,9,5,11,7,);
B(B_VAROUT,,MXz4PumpInZero,34,6,36,8,);
B(B_VARIN,,100.0,9,6,11,8,);
B(B_VARIN,,CDz4IntTimeDn,9,10,11,12,);
B(B_VARIN,,CDz4limitOut,9,7,11,9,);
B(B_VARIN,,CDz4limitIn,9,8,11,10,);
B(B_VARIN,,CDz4IntTimeUp,9,9,11,11,);
B(B_FB,FB_anaCylAnaV011,analog2,11,4,34,12,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_COMMENT,,Z2 function~ button 7,1,1,26,2,);
B(B_VAROUT,,LXresetZ2,16,4,18,6,);
B(B_F,@OR-2,,11,3,16,7,);
B(B_VARIN,,LXpresePileGuide,9,5,11,7,);
B(B_VARIN,,LXpreselZ4,9,4,11,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_VAROUT,,LXz2extern,16,2,18,4,);
B(B_VARIN,,MXz2EnJoySig,9,2,11,4,);
B(B_VARIN,,MXz2ExtAnalSign,9,3,11,5,);
B(B_F,@OR-2,,11,1,16,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_VARIN,,LXresetZ2,9,5,11,7,);
B(B_VAROUT,,LXpreselZ2,27,3,29,5,);
B(B_VAROUT,,QTXz2leadFun,27,2,29,4,);
B(B_VARIN,,ITXz2leadFun,9,2,11,4,);
B(B_VARIN,,LXreleaseFunct,9,4,11,6,);
B(B_VARIN,,LXz2extern,9,3,11,5,);
B(B_FB,FB_functX25V010,FB_functX25_7,11,1,27,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 14 ;
        NETWORK_BODY
B(B_VARIN,,QTXz2leadFun,9,2,11,4,);
B(B_VARIN,,ITXx25RiCursOpUp,9,4,11,6,);
B(B_VARIN,,ITXx25RiCursClDn,9,3,11,5,);
B(B_VAROUT,,LXledInZ2,30,5,32,7,);
B(B_VAROUT,,LXledOutZ2,30,6,32,8,);
B(B_VARIN,,MXz2LocStopIn,9,6,11,8,);
B(B_VARIN,,MXz2LocStopOut,9,7,11,9,);
B(B_VARIN,,LXz2extern,9,5,11,7,);
B(B_VARIN,,MXz2anaSigIn,9,8,11,10,);
B(B_VARIN,,MXz2anaSigOut,9,9,11,11,);
B(B_FB,FB_cursX25V012,FB_cursX25_7,11,1,30,13,);
B(B_VARIN,,CDz2limitManual,9,11,11,13,);
B(B_VARIN,,CDz2limitManual,9,10,11,12,);
B(B_VARIN,,-1.0,38,5,40,7,);
B(B_F,@MUL-2,,40,3,45,7,);
B(B_VAROUT,,MDz2CursorSign,45,4,47,6,);
L(30,5,40,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 25 ;
        NETWORK_BODY
B(B_COMMENT,,analog signal selector and stop z2 cylinder,3,1,29,2,);
B(B_F,@OR-2,,18,6,23,10,);
B(B_F,@AND-2,,11,7,16,11,0N);
B(B_F,@AND-2,,11,3,16,7,0N);
B(B_VARIN,,MXz2LocStopOut,9,4,11,6,);
B(B_VARIN,,MXz2LocStopIn,9,8,11,10,);
B(B_VARIN,,MXz2anaSigIn,9,5,11,7,);
B(B_VARIN,,MXz2anaSigOut,9,9,11,11,);
B(B_F,sel,,17,12,22,17,);
B(B_F,sel,,11,13,16,18,);
B(B_VARIN,,MDz2CursorSign,9,15,11,17,);
B(B_VARIN,,MDz2ExtAnalSign,9,16,11,18,);
B(B_VARIN,,MXz2ExtAnalSign,9,14,11,16,);
B(B_VARIN,,0.0,23,14,25,16,);
B(B_F,sel,,25,11,30,16,);
B(B_F,@GT-2,,25,16,30,20,);
B(B_F,@LT-2,,25,20,30,24,);
B(B_VARIN,,0.0,23,18,25,20,);
B(B_VARIN,,0.0,23,22,25,24,);
B(B_VAROUT,,LDz2AnalSignal,30,12,32,14,);
B(B_VAROUT,,MXz2anaSigIn,30,17,32,19,);
B(B_VAROUT,,MXz2anaSigOut,30,21,32,23,);
B(B_VARIN,,MXz2EnJoySig,15,11,17,13,);
B(B_VARIN,,-1.0,9,20,11,22,);
B(B_F,@MUL-2,,11,18,16,22,);
B(B_VARIN,,MDz2JoySignal,9,19,11,21,);
L(23,8,24,8);
L(24,8,24,11);
L(16,5,17,5);
L(17,5,17,8);
L(17,8,18,8);
L(16,9,18,9);
L(16,15,17,15);
L(22,14,22,22);
L(22,18,25,18);
L(22,22,25,22);
L(24,13,25,13);
L(22,14,25,14);
L(24,11,24,13);
L(17,12,17,14);
L(16,20,17,20);
L(17,16,17,20);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_COMMENT,,limit switch Z2 out,1,1,27,2,);
B(B_VARIN,,LXhgUpperLimOk,9,4,11,6,);
B(B_F,@AND-2,,11,3,16,7,);
B(B_VARIN,,LXsliTabStopUpOk,9,5,11,7,);
B(B_VAROUT,,LXz2LimSwOutOk,16,4,18,6,);
B(B_COMMENT,,IX2.33.27,4,7,10,8,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,limit switch Z2 in,1,1,27,2,);
B(B_VARIN,,MXmoorLoLimBridg,9,3,11,5,);
B(B_VAROUT,,LXz2LimSwInOk,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_COMMENT,,digital logic z2 cylinder,1,1,27,2,);
B(B_VARIN,,MXz2anaSigOut,9,4,11,6,);
B(B_VARIN,,MXz2anaSigIn,9,5,11,7,);
B(B_VARIN,,MXz2GlobalStop,9,6,11,8,);
B(B_VARIN,,LXz2LimSwOutOk,9,7,11,9,);
B(B_VARIN,,LXz2LimSwInOk,9,8,11,10,);
B(B_VAROUT,,MXz2EnabPowStage,34,4,36,6,);
B(B_VAROUT,,MXz2LocStopOut,34,5,36,7,);
B(B_VAROUT,,MXz2LocStopIn,34,6,36,8,);
B(B_VARIN,,MXz2PumpInZero,9,10,11,12,);
B(B_VARIN,,MXstopAllFunctio,9,9,11,11,);
B(B_FB,FB_anaCylDigV010,digital3,11,3,34,12,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_COMMENT,,analog part z2 cylinder,1,1,27,2,);
B(B_VAROUT,,MDz2PumpSignal,34,5,36,7,);
B(B_VARIN,,LDz2AnalSignal,9,5,11,7,);
B(B_VAROUT,,MXz2PumpInZero,34,6,36,8,);
B(B_VARIN,,100.0,9,6,11,8,);
B(B_VARIN,,CDz2limitOut,9,7,11,9,);
B(B_VARIN,,CDz2limitIn,9,8,11,10,);
B(B_VARIN,,CDz2IntTimeDn,9,10,11,12,);
B(B_VARIN,,CDz2IntTimeUp,9,9,11,11,);
B(B_FB,FB_anaCylAnaV011,analog3,11,4,34,12,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 16 ;
        NETWORK_BODY
B(B_COMMENT,,pressure control signal z2 cylinder,1,1,27,2,);
B(B_F,@GT-2,,13,3,18,7,);
B(B_F,@LT-2,,13,7,18,11,);
B(B_VARIN,,MDz2PumpSignal,10,4,12,6,);
B(B_VARIN,,0.0,9,9,11,11,);
B(B_VARIN,,CDz2PresSigOut,18,11,20,13,);
B(B_VARIN,,0.0,18,10,20,12,);
B(B_F,sel,,20,8,25,13,);
B(B_VARIN,,CDz2PresSigIn,24,13,26,15,);
B(B_F,sel,,26,7,31,12,);
B(B_VAROUT,,MDz2PressSignal,31,8,33,10,);
L(12,5,13,5);
L(12,5,12,9);
L(12,9,13,9);
L(11,6,13,6);
L(11,6,11,10);
L(11,10,13,10);
L(25,10,26,10);
L(19,9,19,10);
L(18,9,19,9);
L(19,10,20,10);
L(18,5,26,5);
L(26,5,26,9);
L(26,11,26,14);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_COMMENT,,pile guide function ~ button 16 (Optional),1,1,26,2,);
B(B_VAROUT,,LXresetPileGuide,16,4,18,6,);
B(B_VARIN,,LXpreselZ2,9,4,11,6,);
B(B_F,@OR-3,,11,3,16,8,00N);
B(B_VARIN,,CXpileGuideCyl,9,6,11,8,);
B(B_VARIN,,LXpreselZ4,9,5,11,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_VAROUT,,LXpresePileGuide,34,4,36,6,);
B(B_VAROUT,,QTXpileGuideFun,34,3,36,5,);
B(B_FB,FB_functX25V010,FB_functX25_16,18,2,34,8,);
B(B_VARIN,,ITXpileGuideFun,15,1,17,3,);
B(B_VARIN,,LXresetPileGuide,15,8,17,10,);
B(B_F,@AND-2,,11,4,16,8,);
B(B_VARIN,,LXreleaseFunct,9,5,11,7,);
B(B_VARIN,,CXpileGuideCyl,9,6,11,8,);
B(B_VARIN,,FALSE,14,2,16,4,);
L(17,2,17,4);
L(17,4,18,4);
L(17,7,17,9);
L(17,7,18,7);
L(16,6,18,6);
L(16,3,16,5);
L(16,5,18,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 15 ;
        NETWORK_BODY
B(B_VARIN,,QTXpileGuideFun,9,3,11,5,);
B(B_VARIN,,MXplGuiAnaSigIn,9,9,11,11,);
B(B_VARIN,,MXplGuiAnaSigOut,9,10,11,12,);
B(B_VARIN,,FALSE,9,6,11,8,);
B(B_FB,FB_cursX25V012,FB_cursX25_16,11,2,30,14,);
B(B_VARIN,,CDplGuiLimitMan,9,11,11,13,);
B(B_VARIN,,CDplGuiLimitMan,9,12,11,14,);
B(B_VAROUT,,MDplGuiCursorSig,30,5,32,7,);
B(B_VARIN,,ITXx25RiCursClDn,9,5,11,7,);
B(B_VARIN,,ITXx25RiCursOpUp,9,4,11,6,);
B(B_VARIN,,MXplGuiLocStopIn,9,7,11,9,);
B(B_VARIN,,MXplGuiLocStopOu,9,8,11,10,);
B(B_VAROUT,,LXledInPileGuide,30,6,32,8,);
B(B_VAROUT,,LXledOutPileGuid,30,7,32,9,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 23 ;
        NETWORK_BODY
B(B_F,@OR-2,,18,6,23,10,);
B(B_F,@AND-2,,11,7,16,11,0N);
B(B_F,@AND-2,,11,3,16,7,0N);
B(B_COMMENT,,analog signal selector and stop pile guide cylinder,1,1,27,2,);
B(B_VARIN,,MXplGuiLocStopOu,9,4,11,6,);
B(B_VARIN,,MXplGuiLocStopIn,9,8,11,10,);
B(B_VARIN,,MXplGuiAnaSigIn,9,9,11,11,);
B(B_VARIN,,MXplGuiAnaSigOut,9,5,11,7,);
B(B_VARIN,,0.0,23,12,25,14,);
B(B_F,@GT-2,,25,14,30,18,);
B(B_F,@LT-2,,25,18,30,22,);
B(B_VARIN,,0.0,23,16,25,18,);
B(B_VARIN,,0.0,23,20,25,22,);
B(B_F,sel,,25,9,30,14,);
B(B_VAROUT,,MXplGuiAnaSigIn,30,15,32,17,);
B(B_VAROUT,,MXplGuiAnaSigOut,30,19,32,21,);
B(B_VAROUT,,LDplGuiAnalSig,30,10,32,12,);
B(B_VARIN,,MDplGuiCursorSig,20,11,22,13,);
L(23,8,24,8);
L(24,8,24,11);
L(16,5,17,5);
L(17,5,17,8);
L(17,8,18,8);
L(16,9,18,9);
L(24,11,25,11);
L(22,12,22,20);
L(22,16,25,16);
L(22,20,25,20);
L(22,12,25,12);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_COMMENT,,digital logic pile guide cylinder,1,1,27,2,);
B(B_VARIN,,MXplGuiAnaSigOut,9,4,11,6,);
B(B_VARIN,,MXplGuiAnaSigIn,9,5,11,7,);
B(B_VARIN,,TRUE,9,7,11,9,);
B(B_VARIN,,TRUE,9,8,11,10,);
B(B_VAROUT,,MXplGuiEnabPowSt,34,4,36,6,);
B(B_VARIN,,MXplGuiPumpIn0,9,10,11,12,);
B(B_VARIN,,MXstopAllFunctio,9,9,11,11,);
B(B_FB,FB_anaCylDigV010,digital4,11,3,34,12,);
B(B_VAROUT,,MXplGuiLocStopOu,34,5,36,7,);
B(B_VAROUT,,MXplGuiLocStopIn,34,6,36,8,);
B(B_VARIN,,MXplGuidGlobStop,9,6,11,8,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_COMMENT,,analog part pile guide cylinder,1,1,27,2,);
B(B_VAROUT,,MDplGuiPumpSig,34,5,36,7,);
B(B_VARIN,,LDplGuiAnalSig,9,5,11,7,);
B(B_VARIN,,100.0,9,6,11,8,);
B(B_VARIN,,CDplGuiLimitOut,9,7,11,9,);
B(B_VARIN,,CDplGuiLimitIn,9,8,11,10,);
B(B_VARIN,,100.0,9,9,11,11,);
B(B_VARIN,,100.0,9,10,11,12,);
B(B_VAROUT,,MXplGuiPumpIn0,34,6,36,8,);
B(B_FB,FB_anaCylAnaV011,analog4,11,4,34,12,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_COMMENT,,Z17 function~ button 12,1,1,26,2,);
B(B_VAROUT,,LXresetZ17,16,4,18,6,);
B(B_VARIN,,LXpreselZ3,9,4,11,6,);
B(B_VARIN,,FALSE,9,5,11,7,);
B(B_VARIN,,CXleadGallCylZ17,9,6,11,8,);
B(B_F,@OR-4,,11,3,16,9,00N);
B(B_VARIN,,LXpreselZ6,9,7,11,9,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_VAROUT,,LXpreselZ17,34,4,36,6,);
B(B_VAROUT,,QTXz17leadFun,34,3,36,5,);
B(B_FB,FB_functX25V010,FB_functX25_12,18,2,34,8,);
B(B_VARIN,,ITXz17leadFun,15,1,17,3,);
B(B_VARIN,,LXresetZ17,15,8,17,10,);
B(B_F,@AND-2,,11,4,16,8,);
B(B_VARIN,,LXreleaseFunct,9,5,11,7,);
B(B_VARIN,,CXleadGallCylZ17,9,6,11,8,);
B(B_VARIN,,FALSE,14,2,16,4,);
L(17,2,17,4);
L(17,4,18,4);
L(17,7,17,9);
L(17,7,18,7);
L(16,6,18,6);
L(16,3,16,5);
L(16,5,18,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 15 ;
        NETWORK_BODY
B(B_VARIN,,QTXz17leadFun,9,3,11,5,);
B(B_VARIN,,MXz17LocStopIn,9,7,11,9,);
B(B_VARIN,,MXz17LocStopOut,9,8,11,10,);
B(B_VARIN,,MXz17anaSigIn,9,9,11,11,);
B(B_VARIN,,MXz17anaSigOut,9,10,11,12,);
B(B_VARIN,,FALSE,9,6,11,8,);
B(B_FB,FB_cursX25V012,FB_cursX25_12,11,2,30,14,);
B(B_VARIN,,CDz17limitManual,9,11,11,13,);
B(B_VARIN,,CDz17limitManual,9,12,11,14,);
B(B_VAROUT,,MDz17CursorSign,30,5,32,7,);
B(B_VARIN,,ITXx25LeCursRiUp,9,5,11,7,);
B(B_VARIN,,ITXx25LeCursLeDn,9,4,11,6,);
B(B_VAROUT,,LXledOutZ17,30,7,32,9,);
B(B_VAROUT,,LXledInZ17,30,6,32,8,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 23 ;
        NETWORK_BODY
B(B_F,@OR-2,,18,6,23,10,);
B(B_F,@AND-2,,11,7,16,11,0N);
B(B_F,@AND-2,,11,3,16,7,0N);
B(B_COMMENT,,analog signal selector and stop z17 cylinder,1,1,27,2,);
B(B_VARIN,,MXz17LocStopOut,9,4,11,6,);
B(B_VARIN,,MXz17LocStopIn,9,8,11,10,);
B(B_VARIN,,MXz17anaSigIn,9,9,11,11,);
B(B_VARIN,,MXz17anaSigOut,9,5,11,7,);
B(B_VARIN,,0.0,23,12,25,14,);
B(B_F,@GT-2,,25,14,30,18,);
B(B_F,@LT-2,,25,18,30,22,);
B(B_VARIN,,0.0,23,16,25,18,);
B(B_VARIN,,0.0,23,20,25,22,);
B(B_F,sel,,25,9,30,14,);
B(B_VAROUT,,MXz17anaSigIn,30,15,32,17,);
B(B_VAROUT,,MXz17anaSigOut,30,19,32,21,);
B(B_VAROUT,,LDz17AnalSignal,30,10,32,12,);
B(B_VARIN,,MDz17CursorSign,20,11,22,13,);
L(23,8,24,8);
L(24,8,24,11);
L(16,5,17,5);
L(17,5,17,8);
L(17,8,18,8);
L(16,9,18,9);
L(24,11,25,11);
L(22,12,22,20);
L(22,16,25,16);
L(22,20,25,20);
L(22,12,25,12);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,limit switch Z17 out,1,1,27,2,);
B(B_VARIN,,LXhgUpperLimOk,9,3,11,5,);
B(B_VAROUT,,LXz17LimSwOutOk,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,limit switch Z17 in,1,1,27,2,);
B(B_VARIN,,TRUE,9,3,11,5,);
B(B_VAROUT,,LXz17LimSwInOk,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_COMMENT,,digital logic z17 cylinder,1,1,27,2,);
B(B_VARIN,,MXz17anaSigOut,9,4,11,6,);
B(B_VARIN,,MXz17anaSigIn,9,5,11,7,);
B(B_VARIN,,MXz17GlobalStop,9,6,11,8,);
B(B_VARIN,,LXz17LimSwOutOk,9,7,11,9,);
B(B_VARIN,,LXz17LimSwInOk,9,8,11,10,);
B(B_VAROUT,,MXz17EnabPowStag,34,4,36,6,);
B(B_VAROUT,,MXz17LocStopOut,34,5,36,7,);
B(B_VAROUT,,MXz17LocStopIn,34,6,36,8,);
B(B_VARIN,,MXz17PumpInZero,9,10,11,12,);
B(B_VARIN,,MXstopAllFunctio,9,9,11,11,);
B(B_FB,FB_anaCylDigV010,digital5,11,3,34,12,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_COMMENT,,analog part z17 cylinder,1,1,27,2,);
B(B_VAROUT,,MDz17PumpSignal,34,5,36,7,);
B(B_VARIN,,LDz17AnalSignal,9,5,11,7,);
B(B_VARIN,,100.0,9,6,11,8,);
B(B_VARIN,,CDz17limitOut,9,7,11,9,);
B(B_VARIN,,CDz17limitIn,9,8,11,10,);
B(B_VARIN,,100.0,9,9,11,11,);
B(B_VARIN,,100.0,9,10,11,12,);
B(B_VAROUT,,MXz17PumpInZero,34,6,36,8,);
B(B_FB,FB_anaCylAnaV011,analog5,11,4,34,12,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_COMMENT,,Z3 function~ button 13,1,1,26,2,);
B(B_VAROUT,,LXresetZ3,16,4,18,6,);
B(B_VARIN,,CXleadSlewCylZ3,9,6,11,8,);
B(B_F,@OR-4,,11,3,16,9,00N);
B(B_VARIN,,LXpreselZ6,9,5,11,7,);
B(B_VARIN,,LXpreselZ17,9,7,11,9,);
B(B_VARIN,,FALSE,9,4,11,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_VAROUT,,LXz3extern,16,2,18,4,);
B(B_VARIN,,MXz3EnJoySig,9,2,11,4,);
B(B_VARIN,,MXz3ExtAnalSign,9,3,11,5,);
B(B_F,@OR-2,,11,1,16,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_VAROUT,,LXpreselZ3,34,4,36,6,);
B(B_VAROUT,,QTXz3leadFun,34,3,36,5,);
B(B_FB,FB_functX25V010,FB_functX25_13,18,2,34,8,);
B(B_VARIN,,ITXz3leadFun,15,1,17,3,);
B(B_VARIN,,LXresetZ3,15,8,17,10,);
B(B_F,@AND-2,,11,4,16,8,);
B(B_VARIN,,LXreleaseFunct,9,5,11,7,);
B(B_VARIN,,CXleadSlewCylZ3,9,6,11,8,);
B(B_VARIN,,MXz3EnJoySig,14,2,16,4,);
L(17,2,17,4);
L(17,4,18,4);
L(17,7,17,9);
L(17,7,18,7);
L(16,6,18,6);
L(16,3,16,5);
L(16,5,18,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 15 ;
        NETWORK_BODY
B(B_VARIN,,QTXz3leadFun,9,3,11,5,);
B(B_VARIN,,MXz3LocStopIn,9,7,11,9,);
B(B_VARIN,,MXz3LocStopOut,9,8,11,10,);
B(B_VARIN,,MXz3anaSigIn,9,9,11,11,);
B(B_VARIN,,MXz3anaSigOut,9,10,11,12,);
B(B_VARIN,,LXz3extern,9,6,11,8,);
B(B_FB,FB_cursX25V012,FB_cursX25_13,11,2,30,14,);
B(B_VARIN,,CDz3limitManual,9,11,11,13,);
B(B_VARIN,,CDz3limitManual,9,12,11,14,);
B(B_VARIN,,ITXx25LeCursRiUp,9,5,11,7,);
B(B_VARIN,,ITXx25LeCursLeDn,9,4,11,6,);
B(B_VAROUT,,LXledInZ3,30,6,32,8,);
B(B_VAROUT,,LXledOutZ3,30,7,32,9,);
B(B_VAROUT,,MDz3CursorSign,44,5,46,7,);
B(B_VARIN,,-1.0,37,6,39,8,);
B(B_F,@MUL-2,,39,4,44,8,);
L(30,6,39,6);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 25 ;
        NETWORK_BODY
B(B_VARIN,,0.0,25,14,27,16,);
B(B_F,@GT-2,,27,16,32,20,);
B(B_F,@LT-2,,27,20,32,24,);
B(B_VARIN,,0.0,25,18,27,20,);
B(B_VARIN,,0.0,25,22,27,24,);
B(B_F,@OR-2,,20,6,25,10,);
B(B_F,@AND-2,,13,7,18,11,0N);
B(B_F,@AND-2,,13,3,18,7,0N);
B(B_COMMENT,,analog signal selector and stop z3 cylinder,1,1,27,2,);
B(B_F,sel,,27,11,32,16,);
B(B_VARIN,,MXz3LocStopOut,11,4,13,6,);
B(B_VARIN,,MXz3LocStopIn,11,8,13,10,);
B(B_VAROUT,,MXz3anaSigIn,32,17,34,19,);
B(B_VAROUT,,MXz3anaSigOut,32,21,34,23,);
B(B_VARIN,,MXz3anaSigIn,11,9,13,11,);
B(B_VARIN,,MXz3anaSigOut,11,5,13,7,);
B(B_VAROUT,,LDz3AnalSignal,32,12,34,14,);
B(B_F,sel,,18,12,23,17,);
B(B_F,sel,,11,13,16,18,);
B(B_VARIN,,MDz3CursorSign,9,15,11,17,);
B(B_VARIN,,MDz3ExtAnalSign,9,16,11,18,);
B(B_VARIN,,MXz3ExtAnalSign,9,14,11,16,);
B(B_VARIN,,MXz3EnJoySig,15,11,17,13,);
B(B_VARIN,,MDz3JoySignal,15,18,17,20,);
L(24,14,24,22);
L(24,18,27,18);
L(24,22,27,22);
L(25,8,26,8);
L(26,8,26,13);
L(18,5,19,5);
L(19,5,19,8);
L(19,8,20,8);
L(18,9,20,9);
L(26,13,27,13);
L(24,14,27,14);
L(16,15,18,15);
L(17,16,18,16);
L(17,14,18,14);
L(17,12,17,14);
L(23,14,24,14);
L(17,16,17,19);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_COMMENT,,limit switch Z3,1,1,27,2,);
B(B_VARIN,,MXleaderInZero,9,4,11,6,);
B(B_VARIN,,MXlimitSwBridged,9,5,11,7,);
B(B_F,@OR-2,,11,3,16,7,);
B(B_VAROUT,,LXz3LimSwOutOk,16,4,18,6,);
B(B_VAROUT,,LXz3LimSwInOk,16,5,18,7,);
L(16,5,16,6);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_COMMENT,,digital logic z3 cylinder,1,1,27,2,);
B(B_VARIN,,MXz3anaSigOut,9,4,11,6,);
B(B_VARIN,,MXz3anaSigIn,9,5,11,7,);
B(B_VARIN,,MXz3GlobalStop,9,6,11,8,);
B(B_VARIN,,LXz3LimSwOutOk,9,7,11,9,);
B(B_VARIN,,LXz3LimSwInOk,9,8,11,10,);
B(B_VAROUT,,MXz3EnabPowStage,34,4,36,6,);
B(B_VAROUT,,MXz3LocStopOut,34,5,36,7,);
B(B_VAROUT,,MXz3LocStopIn,34,6,36,8,);
B(B_FB,FB_anaCylDigV010,digital6,11,3,34,12,);
B(B_VARIN,,MXz3PumpInZero,9,10,11,12,);
B(B_VARIN,,MXstopAllFunctio,9,9,11,11,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_COMMENT,,analog part z3 cylinder,1,1,27,2,);
B(B_VAROUT,,MDz3PumpSignal,34,5,36,7,);
B(B_VARIN,,LDz3AnalSignal,9,5,11,7,);
B(B_VARIN,,100.0,9,6,11,8,);
B(B_VARIN,,CDz3limitOut,9,7,11,9,);
B(B_VARIN,,CDz3limitIn,9,8,11,10,);
B(B_VARIN,,CDz3IntTimeUp,9,9,11,11,);
B(B_VARIN,,CDz3IntTimeDn,9,10,11,12,);
B(B_VAROUT,,MXz3PumpInZero,34,6,36,8,);
B(B_FB,FB_anaCylAnaV011,analog6,11,4,34,12,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_COMMENT,,led cursor button left out,1,1,26,2,);
B(B_VARIN,,LXledOutZ3,9,4,11,6,);
B(B_VARIN,,LXledOutZ6,9,5,11,7,);
B(B_VAROUT,,QTXx25LeCursRiUp,16,4,18,6,);
B(B_VARIN,,FALSE,9,6,11,8,);
B(B_VARIN,,LXledOutZ17,9,7,11,9,);
B(B_F,@OR-4,,11,3,16,9,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_COMMENT,,led cursor button left in,1,1,26,2,);
B(B_VARIN,,LXledInZ3,9,4,11,6,);
B(B_VARIN,,LXledInZ6,9,5,11,7,);
B(B_VAROUT,,QTXx25LeCursLeDn,16,4,18,6,);
B(B_VARIN,,FALSE,9,6,11,8,);
B(B_VARIN,,LXledInZ17,9,7,11,9,);
B(B_F,@OR-4,,11,3,16,9,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_COMMENT,,led cursor button right out,1,1,26,2,);
B(B_VARIN,,LXledOutZ2,9,4,11,6,);
B(B_VARIN,,FALSE,9,6,11,8,);
B(B_VAROUT,,QTXx25RiCursOpUp,16,4,18,6,);
B(B_VARIN,,FALSE,9,7,11,9,);
B(B_VARIN,,LXledOutPileGuid,9,8,11,10,);
B(B_F,@OR-6,,11,3,16,11,);
B(B_VARIN,,FALSE,9,9,11,11,);
B(B_VARIN,,LXledOutZ4,9,5,11,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_COMMENT,,led cursor button right in,1,1,26,2,);
B(B_VARIN,,LXledInZ2,9,4,11,6,);
B(B_VARIN,,FALSE,9,6,11,8,);
B(B_VAROUT,,QTXx25RiCursClDn,16,4,18,6,);
B(B_VARIN,,FALSE,9,7,11,9,);
B(B_VARIN,,LXledInPileGuide,9,8,11,10,);
B(B_F,@OR-6,,11,3,16,11,);
B(B_VARIN,,FALSE,9,9,11,11,);
B(B_VARIN,,LXledInZ4,9,5,11,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_COMMENT,,auxiliary winch 2 (leader hight adjustment) ,1,1,26,2,);
B(B_FB,R_TRIG,R_TRIG8,11,4,18,7,);
B(B_VAROUT,,MXadSetLg2AuxWin,18,5,20,7,);
B(B_VARIN,,ITXleadHiAdWinch,9,5,11,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_VARIN,,MXaxwActive,9,3,11,5,);
B(B_COMMENT,,enable auxiliary winch 2,1,1,26,2,);
B(B_VAROUT,,QTXleadHiAdWinch,11,3,13,5,);
B(B_VAROUT,,MXleadHighWinPre,11,4,13,6,);
L(11,4,11,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_COMMENT,,release leader adjustment for digital valves,1,1,27,2,);
B(B_VAROUT,,MXrelLeaderPump,16,4,18,6,);
B(B_VARIN,,MXz3EnabPowStage,9,4,11,6,);
B(B_VARIN,,MXz6EnabPowStage,9,5,11,7,);
B(B_VARIN,,MXz4EnabPowStage,9,6,11,8,);
B(B_VARIN,,MXz2EnabPowStage,9,7,11,9,);
B(B_VARIN,,MXz17EnabPowStag,9,8,11,10,);
B(B_VARIN,,MXplGuiEnabPowSt,9,9,11,11,);
B(B_F,@OR-6,,11,3,16,11,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_VARIN,,ITXz2leadFun,9,3,11,5,);
B(B_VAROUT,,MXslidTablePrese,11,3,13,5,);
B(B_COMMENT,,preselction slide table cylinder key 7,1,1,27,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_COMMENT,,exit program in case of no leader angle indication,1,1,27,2,);
B(B_VARIN,,CXleadAngleIndic,9,4,11,6,);
B(B_RETURN,,,16,4,18,6,);
B(B_F,not,,11,3,16,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 16 ;
        NETWORK_BODY
B(B_VARIN,,IWleadAngleX,9,6,11,8,);
B(B_FB,ScaleAI,ScaleAI1,11,5,19,10,);
B(B_VARIN,,60.0,9,7,11,9,);
B(B_COMMENT,,scale inputs of the inclinometer,1,1,27,2,);
B(B_FB,FilterTP4,Filter1,25,5,34,9,);
B(B_VARIN,,0.2,23,7,25,9,);
B(B_VAROUT,,LDleadAngleX,34,6,36,8,);
B(B_FB,SR,SR1,26,9,31,13,0N);
B(B_F,@AND-2,,21,9,26,13,0N);
B(B_VARIN,,MXengStarterActi,17,11,19,13,);
B(B_FB,MsgRealReal,Message1,38,8,47,15,);
B(B_VARIN,,234,36,9,38,11,);
B(B_VARIN,,MSG_ERROR,36,11,38,13,);
L(19,9,20,9);
L(20,9,20,13);
L(19,7,25,7);
L(20,11,21,11);
L(19,12,21,12);
L(20,13,26,13);
L(26,12,26,13);
L(31,11,38,11);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_VARIN,,IWleadAngleY,9,3,11,5,);
B(B_FB,ScaleAI,ScaleAI2,11,2,19,7,);
B(B_VARIN,,90.0,9,4,11,6,);
B(B_FB,FilterTP4,Filter2,26,2,35,6,);
B(B_VARIN,,0.2,24,4,26,6,);
B(B_VAROUT,,LDleadAngleY,35,3,37,5,);
B(B_FB,MsgRealReal,Message2,38,5,47,12,);
B(B_VARIN,,MSG_ERROR,36,8,38,10,);
B(B_VARIN,,236,36,6,38,8,);
B(B_FB,SR,SR2,26,6,31,10,0N);
B(B_F,@AND-2,,21,6,26,10,0N);
B(B_VARIN,,MXengStarterActi,17,8,19,10,);
L(19,4,26,4);
L(19,6,20,6);
L(20,6,20,10);
L(20,8,21,8);
L(19,9,21,9);
L(20,10,26,10);
L(26,9,26,10);
L(31,8,38,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 27 ;
        NETWORK_BODY
B(B_F,@AND-2,,11,3,16,7,);
B(B_VARIN,,MXsetLeaderZero,9,5,11,7,);
B(B_VARIN,,MXpresLeaderZero,9,4,11,6,);
B(B_F,sel,,33,3,38,8,);
B(B_VAROUT,,MDoffsetXaxis,38,4,40,6,);
B(B_VARIN,,0.0,24,8,26,10,);
B(B_VARIN,,LDleadAngleX,23,9,25,11,);
B(B_VARIN,,MDoffsetXaxis,31,5,33,7,);
B(B_VAROUT,,MDleadAngleX,31,12,33,14,);
B(B_F,sel,,33,14,38,19,);
B(B_VAROUT,,MDoffsetYaxis,38,15,40,17,);
B(B_VARIN,,0.0,24,19,26,21,);
B(B_VARIN,,LDleadAngleY,23,20,25,22,);
B(B_VARIN,,MDoffsetYaxis,24,24,26,26,);
B(B_VARIN,,MDoffsetYaxis,31,16,33,18,);
B(B_VAROUT,,MDleadAngleY,31,23,33,25,);
B(B_VARIN,,MDoffsetXaxis,24,13,26,15,);
B(B_COMMENT,,set cursor in zero position ,1,1,28,2,);
B(B_F,@ADD-2,,26,7,31,11,);
B(B_F,@SUB,,26,11,31,15,);
B(B_F,@ADD-2,,26,18,31,22,);
B(B_F,@SUB,,26,22,31,26,);
L(32,7,32,9);
L(32,7,33,7);
L(25,10,26,10);
L(32,18,32,20);
L(32,18,33,18);
L(25,21,26,21);
L(25,21,25,24);
L(16,5,33,5);
L(17,16,33,16);
L(17,5,17,16);
L(25,10,25,13);
L(31,9,32,9);
L(25,13,26,13);
L(31,20,32,20);
L(25,24,26,24);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 18 ;
        NETWORK_BODY
B(B_COMMENT,,analog indication x ~y axis for graph. window and cursor on/off,1,1,28,2,);
B(B_FB,WndComp,WndComp1,27,4,34,10,);
B(B_VARIN,,0.0,25,8,27,10,);
B(B_FB,WndComp,WndComp2,27,11,34,17,);
B(B_F,@AND-2,,36,4,41,8,);
B(B_VAROUT,,MXsetCursorOn,41,5,43,7,);
B(B_VARIN,,LDdefineXrange,9,9,11,11,);
B(B_VARIN,,2.0,9,10,11,12,);
B(B_F,@DIV,,11,8,16,12,);
B(B_F,@MUL-2,,17,5,22,9,);
B(B_VARIN,,-1.0,15,6,17,8,);
B(B_VARIN,,0.0,25,15,27,17,);
B(B_VARIN,,LDdefineYrangNeg,25,13,27,15,);
B(B_VARIN,,LDdefineYrangPos,25,14,27,16,);
B(B_VARIN,,MDleadAngleX,24,3,26,5,);
B(B_VARIN,,MDleadAngleY,25,12,27,14,);
L(26,6,27,6);
L(34,6,36,6);
L(34,13,35,13);
L(35,7,35,13);
L(35,7,36,7);
L(16,10,17,10);
L(17,8,17,10);
L(22,7,27,7);
L(17,10,23,10);
L(23,8,23,10);
L(23,8,27,8);
L(26,4,26,6);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 20 ;
        NETWORK_BODY
B(B_FB,WndComp,WndComp3,23,6,30,12,);
B(B_F,@SUB,,14,4,19,8,);
B(B_F,@ADD-2,,14,8,19,12,);
B(B_VARIN,,0.0,10,5,12,7,);
B(B_VARIN,,LDlrAlphaZero,10,6,12,8,);
B(B_COMMENT,,calculation leader in zero position,1,1,29,2,);
B(B_VARIN,,MDleadAngleX,20,2,22,4,);
B(B_FB,WndComp,WndComp4,23,13,30,19,);
B(B_VARIN,,MDleadAngleY,17,14,19,16,);
B(B_VARIN,,0.0,20,17,22,19,);
B(B_VAROUT,,MXleaderInZero,37,7,39,9,);
B(B_F,@AND-2,,32,6,37,10,);
L(19,10,23,10);
L(21,9,23,9);
L(12,6,14,6);
L(12,7,14,7);
L(12,7,12,11);
L(12,11,14,11);
L(22,8,23,8);
L(13,10,14,10);
L(13,6,13,10);
L(22,3,22,8);
L(21,6,21,9);
L(19,6,21,6);
L(22,11,22,18);
L(21,9,21,16);
L(20,10,20,17);
L(19,15,23,15);
L(21,16,23,16);
L(20,17,23,17);
L(22,18,23,18);
L(22,11,23,11);
L(30,8,32,8);
L(30,15,31,15);
L(31,9,31,15);
L(31,9,32,9);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_JUMP,,exit,11,3,13,5,N);
B(B_VARIN,,MXslidTablAutEna,9,3,11,5,);
B(B_COMMENT,,check leader inclination preselected,1,1,27,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 23 ;
        NETWORK_BODY
B(B_FB,R_TRIG,R_TRIG9,11,4,18,7,);
B(B_VARIN,,ITXleadAutoInc,9,5,11,7,);
B(B_FB,RS,RS15,40,4,45,8,);
B(B_COMMENT,,preselection automatic mode leader constant inclination,1,1,27,2,);
B(B_VAROUT,,LXleaderAutoIncl,46,5,48,7,);
B(B_VARIN,,LXleaderAutoIncl,18,9,20,11,);
B(B_F,@AND-2,,20,7,25,11,);
B(B_VARIN,,MXenabHangLeader,24,11,26,13,);
B(B_F,@AND-2,,47,7,52,11,);
B(B_VAROUT,,QTXleadAutoInc,52,8,54,10,);
B(B_VARIN,,MXassemblyOperat,25,12,27,14,);
B(B_VARIN,,MXslidTablePrese,31,3,33,5,);
B(B_VARIN,,MXleadHighWinPre,31,4,33,6,);
B(B_F,@AND-3,,33,2,38,7,);
B(B_VARIN,,LXx25KeySwitched,38,18,40,20,);
B(B_VARIN,,MXflashSignal,38,19,40,21,);
B(B_F,@OR-2,,40,17,45,21,N);
B(B_VARIN,,MXlmlDataTimeout,24,18,26,20,);
B(B_VARIN,,MXlmlBridged,24,19,26,21,);
B(B_F,@AND-2,,26,17,31,21,0N);
B(B_VARIN,,MXstopAllFunctio,26,13,28,15,);
B(B_F,@OR-5,,33,7,38,14,0N);
L(19,6,19,9);
L(39,7,39,9);
L(39,7,40,7);
L(45,6,46,6);
L(19,9,20,9);
L(27,11,27,13);
L(28,12,28,14);
L(28,12,33,12);
L(27,11,33,11);
L(26,10,26,12);
L(26,10,33,10);
L(46,10,47,10);
L(46,9,47,9);
L(46,6,46,9);
L(18,6,33,6);
L(39,6,40,6);
L(39,4,39,6);
L(38,4,39,4);
L(45,19,46,19);
L(46,10,46,19);
L(31,13,31,19);
L(31,13,33,13);
L(25,9,33,9);
L(38,9,39,9);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 26 ;
        NETWORK_BODY
B(B_VARIN,,IWslideTableAnge,9,7,11,9,);
B(B_FB,ScaleAI,ScaleAI3,11,6,19,11,);
B(B_VARIN,,CDslidTablAngSca,9,8,11,10,);
B(B_FB,MsgRealReal,Message5,22,11,31,18,);
B(B_VARIN,,594,17,12,19,14,);
B(B_VARIN,,MSG_ERROR,17,14,19,16,);
B(B_COMMENT,,check sliding table in horicontal position,1,1,27,2,);
B(B_VAROUT,,LD1,20,5,22,7,);
B(B_FB,GPfilter10V010,GPfilter101,24,6,38,10,);
B(B_FB,FB_filterUnV010,FBfilterUn1,39,6,54,11,);
B(B_VARIN,,CDslidTablAngInt,37,11,39,13,);
B(B_F,@ADD-2,,56,5,61,9,);
B(B_VARIN,,CDangSlidTabOffs,53,3,55,5,);
B(B_VAROUT,,MDslidTableAngel,69,5,71,7,);
B(B_F,limit,,63,4,69,9,);
B(B_VARIN,,0.0,60,3,62,5,);
B(B_VARIN,,CDslidTablAngSca,60,10,62,12,);
B(B_VARIN,,CDslidTablAngWin,21,3,23,5,);
B(B_FB,SR,SR3,26,19,31,23,0N);
B(B_F,@AND-2,,21,19,26,23,0N);
B(B_VARIN,,MXengStarterActi,17,21,19,23,);
B(B_FB,MsgRealReal,Message6,38,18,47,25,);
B(B_VARIN,,593,36,19,38,21,);
B(B_VARIN,,MSG_ERROR,36,21,38,23,);
L(19,9,21,9);
L(21,9,21,14);
L(21,14,22,14);
L(19,10,20,10);
L(19,13,22,13);
L(19,15,22,15);
L(20,6,20,8);
L(19,8,24,8);
L(23,9,24,9);
L(38,8,39,8);
L(39,9,39,12);
L(55,7,56,7);
L(55,4,55,7);
L(54,8,56,8);
L(61,7,63,7);
L(62,8,63,8);
L(62,4,62,6);
L(62,6,63,6);
L(62,8,62,11);
L(23,4,23,9);
L(20,21,21,21);
L(19,22,21,22);
L(20,23,26,23);
L(26,22,26,23);
L(31,21,38,21);
L(20,10,20,23);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_VARIN,,QXlg2Brake,9,4,11,6,);
B(B_F,@AND-2,,11,3,16,7,);
B(B_F,sel,,18,6,23,11,);
B(B_VAROUT,,LXleadHighWinAct,17,4,19,6,);
B(B_VAROUT,,LDslidTableAngel,23,7,25,9,);
B(B_VARIN,,LDslidTableAngel,16,9,18,11,);
B(B_VARIN,,MDslidTableAngel,16,8,18,10,);
B(B_COMMENT,,Angel sliding table ,1,1,28,2,);
B(B_VARIN,,QTXleadHiAdWinch,9,5,11,7,);
L(16,5,17,5);
L(17,5,17,8);
L(17,8,18,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 17 ;
        NETWORK_BODY
B(B_COMMENT,,Angle value sliding table lower or above the storage value ,1,1,29,2,);
B(B_F,@ADD-2,,13,10,18,14,);
B(B_VARIN,,LDslidTableAngel,9,11,11,13,);
B(B_F,@SUB,,13,5,18,9,);
B(B_VARIN,,CDslidTablAngLim,10,7,12,9,);
B(B_VARIN,,LDslidTableAngel,9,6,11,8,);
B(B_FB,WndComp,WndComp5,21,6,28,12,);
B(B_VAROUT,,LXangSliTablZero,28,7,30,9,);
B(B_VAROUT,,LXangSlidTablLow,28,8,30,10,);
B(B_VAROUT,,LXangSlidTablHig,28,9,30,11,);
B(B_VARIN,,CDslidTablAngHys,18,14,20,16,);
B(B_VARIN,,MDslidTableAngel,18,3,20,5,);
L(12,13,13,13);
L(11,12,13,12);
L(18,12,19,12);
L(19,10,19,12);
L(12,8,13,8);
L(11,7,13,7);
L(18,7,19,7);
L(12,8,12,13);
L(19,7,19,9);
L(19,9,21,9);
L(19,10,21,10);
L(20,8,21,8);
L(20,11,21,11);
L(20,11,20,15);
L(20,4,20,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_COMMENT,,Sliding table lowering depend on leader winch lifting and table angle,1,1,29,2,);
B(B_VARIN,,LXleaderAutoIncl,9,4,11,6,);
B(B_VAROUT,,LXslidTablAutoDo,16,4,18,6,);
B(B_VARIN,,MXaxwAnalSigPos,9,5,11,7,);
B(B_VARIN,,LXangSlidTablHig,9,6,11,8,);
B(B_F,@AND-3,,11,3,16,8,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_COMMENT,,Sliding table lifting depend on leader winch lowering and table angle ,1,1,29,2,);
B(B_VARIN,,LXleaderAutoIncl,9,4,11,6,);
B(B_VAROUT,,LXslidTablAutoUp,17,4,19,6,);
B(B_VAROUT,,MXslidTablAutoUp,17,3,19,5,);
B(B_VARIN,,MXaxwAnalSigNeg,9,5,11,7,);
B(B_VARIN,,LXangSlidTablLow,9,6,11,8,);
B(B_F,@AND-3,,11,3,16,8,);
L(17,4,17,5);
L(16,5,17,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL := exit: ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,exit program,1,1,27,2,);
B(B_VARIN,,TRUE,9,3,11,5,);
B(B_RETURN,,,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL := init: ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,init program,1,1,27,2,);
B(B_VARIN,,TRUE,9,3,11,5,);
B(B_VAROUT,,LXinitOk,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value hanging leader,1,1,27,2,);
B(B_FB,CorrValue_Bool,CorrValue_Bool1,11,4,23,10,);
B(B_VARIN,,CXadHangLeader,9,8,11,10,);
B(B_VARIN,,FALSE,9,5,11,7,);
B(B_VARIN,,FALSE,9,6,11,8,);
B(B_VARIN,,TRUE,9,7,11,9,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value leader angle indication,1,1,27,2,);
B(B_FB,CorrValue_Bool,CorrValue_Bool2,11,4,23,10,);
B(B_VARIN,,CXleadAngleIndic,9,8,11,10,);
B(B_VARIN,,FALSE,9,5,11,7,);
B(B_VARIN,,FALSE,9,6,11,8,);
B(B_VARIN,,TRUE,9,7,11,9,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_COMMENT,,correction value lead inclination,1,1,27,2,);
B(B_VARIN,,CXautoSlideTable,9,8,11,10,);
B(B_VARIN,,FALSE,9,5,11,7,);
B(B_VARIN,,FALSE,9,6,11,8,);
B(B_VARIN,,TRUE,9,7,11,9,);
B(B_FB,CorrValue_Bool,CorrValue_Bool3,11,4,23,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_COMMENT,,correction value sliding table limit switch,1,1,27,2,);
B(B_VARIN,,CXslidTabLimSwit,9,8,11,10,);
B(B_VARIN,,FALSE,9,5,11,7,);
B(B_VARIN,,FALSE,9,6,11,8,);
B(B_VARIN,,TRUE,9,7,11,9,);
B(B_FB,CorrValue_Bool,CorrValue_Bool4,11,4,23,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value pile guide cylinder,1,1,27,2,);
B(B_FB,CorrValue_Bool,CorrValue_Bool5,11,4,23,10,);
B(B_VARIN,,CXpileGuideCyl,9,8,11,10,);
B(B_VARIN,,FALSE,9,5,11,7,);
B(B_VARIN,,FALSE,9,6,11,8,);
B(B_VARIN,,TRUE,9,7,11,9,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value leader slewing cylinder Z3,1,1,27,2,);
B(B_FB,CorrValue_Bool,CorrValue_Bool6,11,4,23,10,);
B(B_VARIN,,CXleadSlewCylZ3,9,8,11,10,);
B(B_VARIN,,FALSE,9,5,11,7,);
B(B_VARIN,,FALSE,9,6,11,8,);
B(B_VARIN,,TRUE,9,7,11,9,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value leader gallows cylinder Z17,1,1,27,2,);
B(B_FB,CorrValue_Bool,CorrValue_Bool7,11,4,23,10,);
B(B_VARIN,,CXleadGallCylZ17,9,8,11,10,);
B(B_VARIN,,FALSE,9,5,11,7,);
B(B_VARIN,,FALSE,9,6,11,8,);
B(B_VARIN,,TRUE,9,7,11,9,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value leader fall back threshold ,1,1,27,2,);
B(B_VARIN,,CDleadThreshBack,9,8,11,10,);
B(B_VARIN,,5.0,9,5,11,7,);
B(B_VARIN,,0.0,9,6,11,8,);
B(B_VARIN,,20.0,9,7,11,9,);
B(B_FB,CorrValue_Real,CorrValue_Real1,11,4,23,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_FB,CorrValue_Real,CorrValue_Real2,11,4,23,10,);
B(B_COMMENT,,correction value angle sliding table off set ,1,1,27,2,);
B(B_VARIN,,0.0,9,5,11,7,);
B(B_VARIN,,-20.0,9,6,11,8,);
B(B_VARIN,,20.0,9,7,11,9,);
B(B_VARIN,,CDangSlidTabOffs,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_FB,CorrValue_Real,CorrValue_Real3,11,4,23,10,);
B(B_COMMENT,,correction value integrater angle filter sliding table,1,1,27,2,);
B(B_VARIN,,0.1,9,5,11,7,);
B(B_VARIN,,0.0,9,6,11,8,);
B(B_VARIN,,5.0,9,7,11,9,);
B(B_VARIN,,CDslidTablAngInt,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_FB,CorrValue_Real,CorrValue_Real4,11,4,23,10,);
B(B_COMMENT,,correction value angle sliding table lower and higher limit ,1,1,27,2,);
B(B_VARIN,,0.0,9,5,11,7,);
B(B_VARIN,,0.0,9,6,11,8,);
B(B_VARIN,,2.0,9,7,11,9,);
B(B_VARIN,,CDslidTablAngLim,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_FB,CorrValue_Real,CorrValue_Real5,11,4,23,10,);
B(B_COMMENT,,correction value sliding table scale factor,1,1,27,2,);
B(B_VARIN,,90.0,9,5,11,7,);
B(B_VARIN,,0.0,9,6,11,8,);
B(B_VARIN,,180.0,9,7,11,9,);
B(B_VARIN,,CDslidTablAngSca,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_FB,CorrValue_Real,CorrValue_Real6,11,4,23,10,);
B(B_COMMENT,,correction value sliding table filter factor,1,1,27,2,);
B(B_VARIN,,0.0,9,5,11,7,);
B(B_VARIN,,0.0,9,6,11,8,);
B(B_VARIN,,1.0,9,7,11,9,);
B(B_VARIN,,CDslidTablAngWin,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_FB,CorrValue_Real,CorrValue_Real7,11,4,23,10,);
B(B_COMMENT,,correction value angle active hysteria sliding table,1,1,27,2,);
B(B_VARIN,,0.0,9,5,11,7,);
B(B_VARIN,,0.0,9,6,11,8,);
B(B_VARIN,,1.0,9,7,11,9,);
B(B_VARIN,,CDslidTablAngHys,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value z6 integrator time down,1,1,27,2,);
B(B_VARIN,,100.0,9,5,11,7,);
B(B_VARIN,,10.0,9,6,11,8,);
B(B_VARIN,,200.0,9,7,11,9,);
B(B_VARIN,,CDz6IntTimeDn,9,8,11,10,);
B(B_FB,CorrValue_Real,CorrValue_Real8,11,4,23,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value z6 integrator time up,1,1,27,2,);
B(B_VARIN,,100.0,9,5,11,7,);
B(B_VARIN,,10.0,9,6,11,8,);
B(B_VARIN,,200.0,9,7,11,9,);
B(B_VARIN,,CDz6IntTimeUp,9,8,11,10,);
B(B_FB,CorrValue_Real,CorrValue_Real9,11,4,23,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value z6 limitation In,1,1,27,2,);
B(B_VARIN,,100.0,9,5,11,7,);
B(B_VARIN,,1.0,9,6,11,8,);
B(B_VARIN,,100.0,9,7,11,9,);
B(B_VARIN,,CDz6limitIn,9,8,11,10,);
B(B_FB,CorrValue_Real,CorrValue_Real10,11,4,23,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value z6 limitation out,1,1,27,2,);
B(B_VARIN,,100.0,9,5,11,7,);
B(B_VARIN,,1.0,9,6,11,8,);
B(B_VARIN,,100.0,9,7,11,9,);
B(B_VARIN,,CDz6limitOut,9,8,11,10,);
B(B_FB,CorrValue_Real,CorrValue_Real11,11,4,23,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value z6 limitation manual,1,1,27,2,);
B(B_VARIN,,50.0,9,5,11,7,);
B(B_VARIN,,1.0,9,6,11,8,);
B(B_VARIN,,100.0,9,7,11,9,);
B(B_VARIN,,CDz6limitManual,9,8,11,10,);
B(B_FB,CorrValue_Real,CorrValue_Real12,11,4,23,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value z4 integrator time down,1,1,27,2,);
B(B_VARIN,,100.0,9,5,11,7,);
B(B_VARIN,,10.0,9,6,11,8,);
B(B_VARIN,,200.0,9,7,11,9,);
B(B_VARIN,,CDz4IntTimeDn,9,8,11,10,);
B(B_FB,CorrValue_Real,CorrValue_Real13,11,4,23,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value z4 integrator time up,1,1,27,2,);
B(B_VARIN,,100.0,9,5,11,7,);
B(B_VARIN,,10.0,9,6,11,8,);
B(B_VARIN,,200.0,9,7,11,9,);
B(B_VARIN,,CDz4IntTimeUp,9,8,11,10,);
B(B_FB,CorrValue_Real,CorrValue_Real14,11,4,23,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value z4 limitation In,1,1,27,2,);
B(B_VARIN,,100.0,9,5,11,7,);
B(B_VARIN,,1.0,9,6,11,8,);
B(B_VARIN,,100.0,9,7,11,9,);
B(B_VARIN,,CDz4limitIn,9,8,11,10,);
B(B_FB,CorrValue_Real,CorrValue_Real15,11,4,23,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value z4 limitation out,1,1,27,2,);
B(B_VARIN,,100.0,9,5,11,7,);
B(B_VARIN,,1.0,9,6,11,8,);
B(B_VARIN,,100.0,9,7,11,9,);
B(B_VARIN,,CDz4limitOut,9,8,11,10,);
B(B_FB,CorrValue_Real,CorrValue_Real16,11,4,23,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value z4 limitation manual,1,1,27,2,);
B(B_VARIN,,50.0,9,5,11,7,);
B(B_VARIN,,1.0,9,6,11,8,);
B(B_VARIN,,100.0,9,7,11,9,);
B(B_VARIN,,CDz4limitManual,9,8,11,10,);
B(B_FB,CorrValue_Real,CorrValue_Real17,11,4,23,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value z2 integrator time down,1,1,27,2,);
B(B_VARIN,,100.0,9,5,11,7,);
B(B_VARIN,,10.0,9,6,11,8,);
B(B_VARIN,,200.0,9,7,11,9,);
B(B_VARIN,,CDz2IntTimeDn,9,8,11,10,);
B(B_FB,CorrValue_Real,CorrValue_Real18,11,4,23,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value z2 integrator time up,1,1,27,2,);
B(B_VARIN,,100.0,9,5,11,7,);
B(B_VARIN,,10.0,9,6,11,8,);
B(B_VARIN,,200.0,9,7,11,9,);
B(B_VARIN,,CDz2IntTimeUp,9,8,11,10,);
B(B_FB,CorrValue_Real,CorrValue_Real19,11,4,23,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value z2 limitation In,1,1,27,2,);
B(B_VARIN,,100.0,9,5,11,7,);
B(B_VARIN,,1.0,9,6,11,8,);
B(B_VARIN,,100.0,9,7,11,9,);
B(B_VARIN,,CDz2limitIn,9,8,11,10,);
B(B_FB,CorrValue_Real,CorrValue_Real20,11,4,23,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value z2 limitation out,1,1,27,2,);
B(B_VARIN,,100.0,9,5,11,7,);
B(B_VARIN,,1.0,9,6,11,8,);
B(B_VARIN,,100.0,9,7,11,9,);
B(B_VARIN,,CDz2limitOut,9,8,11,10,);
B(B_FB,CorrValue_Real,CorrValue_Real21,11,4,23,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value z2 limitation manual,1,1,27,2,);
B(B_VARIN,,50.0,9,5,11,7,);
B(B_VARIN,,1.0,9,6,11,8,);
B(B_VARIN,,100.0,9,7,11,9,);
B(B_VARIN,,CDz2limitManual,9,8,11,10,);
B(B_FB,CorrValue_Real,CorrValue_Real22,11,4,23,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value z3 integrator time down,1,1,27,2,);
B(B_VARIN,,100.0,9,5,11,7,);
B(B_VARIN,,10.0,9,6,11,8,);
B(B_VARIN,,200.0,9,7,11,9,);
B(B_VARIN,,CDz3IntTimeDn,9,8,11,10,);
B(B_FB,CorrValue_Real,CorrValue_Real23,11,4,23,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value z3 integrator time up,1,1,27,2,);
B(B_VARIN,,100.0,9,5,11,7,);
B(B_VARIN,,10.0,9,6,11,8,);
B(B_VARIN,,200.0,9,7,11,9,);
B(B_VARIN,,CDz3IntTimeUp,9,8,11,10,);
B(B_FB,CorrValue_Real,CorrValue_Real24,11,4,23,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value z3 limitation In,1,1,27,2,);
B(B_VARIN,,100.0,9,5,11,7,);
B(B_VARIN,,1.0,9,6,11,8,);
B(B_VARIN,,100.0,9,7,11,9,);
B(B_VARIN,,CDz3limitIn,9,8,11,10,);
B(B_FB,CorrValue_Real,CorrValue_Real25,11,4,23,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value z3 limitation out,1,1,27,2,);
B(B_VARIN,,100.0,9,5,11,7,);
B(B_VARIN,,1.0,9,6,11,8,);
B(B_VARIN,,100.0,9,7,11,9,);
B(B_VARIN,,CDz3limitOut,9,8,11,10,);
B(B_FB,CorrValue_Real,CorrValue_Real26,11,4,23,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value z3 limitation manual,1,1,27,2,);
B(B_VARIN,,50.0,9,5,11,7,);
B(B_VARIN,,1.0,9,6,11,8,);
B(B_VARIN,,100.0,9,7,11,9,);
B(B_VARIN,,CDz3limitManual,9,8,11,10,);
B(B_FB,CorrValue_Real,CorrValue_Real27,11,4,23,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value z17 limitation In,1,1,27,2,);
B(B_VARIN,,100.0,9,5,11,7,);
B(B_VARIN,,1.0,9,6,11,8,);
B(B_VARIN,,100.0,9,7,11,9,);
B(B_VARIN,,CDz17limitIn,9,8,11,10,);
B(B_FB,CorrValue_Real,CorrValue_Real28,11,4,23,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value z17 limitation out,1,1,27,2,);
B(B_VARIN,,100.0,9,5,11,7,);
B(B_VARIN,,1.0,9,6,11,8,);
B(B_VARIN,,100.0,9,7,11,9,);
B(B_VARIN,,CDz17limitOut,9,8,11,10,);
B(B_FB,CorrValue_Real,CorrValue_Real29,11,4,23,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value z17 limitation manual,1,1,27,2,);
B(B_VARIN,,100.0,9,5,11,7,);
B(B_VARIN,,1.0,9,6,11,8,);
B(B_VARIN,,100.0,9,7,11,9,);
B(B_VARIN,,CDz17limitManual,9,8,11,10,);
B(B_FB,CorrValue_Real,CorrValue_Real30,11,4,23,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value pile guide limitation In,1,1,27,2,);
B(B_VARIN,,100.0,9,5,11,7,);
B(B_VARIN,,1.0,9,6,11,8,);
B(B_VARIN,,100.0,9,7,11,9,);
B(B_VARIN,,CDplGuiLimitIn,9,8,11,10,);
B(B_FB,CorrValue_Real,CorrValue_Real31,11,4,23,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value pile guide limitation out,1,1,27,2,);
B(B_VARIN,,100.0,9,5,11,7,);
B(B_VARIN,,1.0,9,6,11,8,);
B(B_VARIN,,100.0,9,7,11,9,);
B(B_VARIN,,CDplGuiLimitOut,9,8,11,10,);
B(B_FB,CorrValue_Real,CorrValue_Real32,11,4,23,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value pile guide limitation manual,1,1,27,2,);
B(B_VARIN,,100.0,9,5,11,7,);
B(B_VARIN,,1.0,9,6,11,8,);
B(B_VARIN,,100.0,9,7,11,9,);
B(B_VARIN,,CDplGuiLimitMan,9,8,11,10,);
B(B_FB,CorrValue_Real,CorrValue_Real33,11,4,23,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value z2 pressure signal In,1,1,27,2,);
B(B_VARIN,,100.0,9,5,11,7,);
B(B_VARIN,,1.0,9,6,11,8,);
B(B_VARIN,,100.0,9,7,11,9,);
B(B_FB,CorrValue_Real,CorrValue_Real34,11,4,23,10,);
B(B_VARIN,,CDz2PresSigIn,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value z2 pressure signal out,1,1,27,2,);
B(B_VARIN,,100.0,9,5,11,7,);
B(B_VARIN,,1.0,9,6,11,8,);
B(B_VARIN,,100.0,9,7,11,9,);
B(B_FB,CorrValue_Real,CorrValue_Real35,11,4,23,10,);
B(B_VARIN,,CDz2PresSigOut,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_VAROUT,,LDdefineXrange,11,3,13,5,);
B(B_VARIN,,10.0,9,3,11,5,);
B(B_COMMENT,,defines inclinometer program,1,1,27,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VAROUT,,LDdefineYrangPos,11,1,13,3,);
B(B_VARIN,,18.0,9,1,11,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VAROUT,,LDdefineYrangNeg,11,1,13,3,);
B(B_VARIN,,-18.0,9,1,11,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VARIN,,1.0,9,1,11,3,);
B(B_VAROUT,,LDlrAlphaZero,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
END_BODY
END_PROGRAM

PROGRAM ADhg1RopeMeaV030
(*name of author: Manfred Schapler
version: 1.0
date: 11/97
modification:*)
(*name of author: Manfred Schapler
version: 1.0
date: 11/97
modification:*)
	VAR_EXTERNAL 
		IXentrySwiClosed: BOOL:=FALSE;
			(*entry switch closed*)
		IDcounterHg1: DINT:=0;
			(*counter rope lenght hg1*)
		MXresRopeLenHg1: BOOL:=FALSE;
			(*reset rope lenght hg 1*)
		MXextResRopeHg1: BOOL:=FALSE;
			(*set change layer 1 to 2*)
		MXchangeLayer1_2: BOOL:=FALSE;
			(*set change layer 1 to 2*)
		MXchangeLayer3_4: BOOL:=FALSE;
			(*set change layer 3 to 4*)
		MXchangeLayer5_6: BOOL:=FALSE;
			(*set change layer 5 to 6*)
		MXhg1EnChangeLay: BOOL:=FALSE;
			(*enable hg 1 change layer*)
		MDropeLenghtHg1: REAL:=0.0;
			(*rope lenght hg 1*)
		MDhg1RopeSpeed: REAL:=0.0;
			(*hg 1 rope speed in  m/min*)
		MDhg1RopeLenWin: REAL:=0.0;
			(*rope lenght hg 1 on the winch in m*)
	END_VAR
	VAR_EXTERNAL CONSTANT
		PI: REAL:=3.141592653;
	END_VAR
	VAR_EXTERNAL RETAIN
		MXhg1RopeLenMeas: BOOL:=FALSE;
			(*rope lenght measuring hg 1 enabled*)
		MDhg1ImpulsValue: DINT:=0;
			(*present counter value hg1 (impulses)*)
		MDropLenTaraHg1: REAL:=0.0;
			(*hg 1 tara rope lenght*)
		MDhg1CircumfLay1: REAL:=0.0;
			(*hg 1 rope lenght measuring: circumference of the layer 1 in the middle of the rope*)
		MDhg1CircumfLay2: REAL:=0.0;
			(*hg 1 rope lenght measuring: circumference of the layer 2 in the middle of the rope*)
		MDhg1CircumfLay3: REAL:=0.0;
			(*hg 1 rope lenght measuring: circumference of the layer 3 in the middle of the rope*)
		MDhg1CircumfLay4: REAL:=0.0;
			(*hg 1 rope lenght measuring: circumference of the layer 4 in the middle of the rope*)
		MDhg1CircumfLay5: REAL:=0.0;
			(*hg 1 rope lenght measuring: circumference of the layer 5 in the middle of the rope*)
		MDhg1CircumfLay6: REAL:=0.0;
			(*hg 1 rope lenght measuring: circumference of the layer 6 in the middle of the rope*)
		MDhg1CircumfLay7: REAL:=0.0;
			(*hg 1 rope lenght measuring: circumference of the layer 7 in the middle of the rope*)
	END_VAR
	VAR_EXTERNAL CONSTANT RETAIN
		CXhg1RopeLenMeas: BOOL:=FALSE;
			(*rope lenght measuring hg 1*)
		CDhg1GearRatio: REAL:=0.0;
			(*hg 1 gear ratio from the winch to the incrementalsensor*)
		CDhg1ImPIncSen: REAL:=0.0;
			(*hg 1 impulses per rotation of the incrementalsenor*)
		CDhg1RopeDiamete: REAL:=0.0;
			(*hg 1 rope lenght measuring: diameter of the rope*)
		CDhg1Layer1Diame: REAL:=0.0;
			(*hg 1 rope lenght measuring: diameter of the layer 1 in the middle of the rope*)
		CDhg1ImpLayJu1_2: DINT:=0;
			(*hg 1 impulses to layer jump 1 to 2*)
		CDhg1ImpLayJu2_3: DINT:=0;
			(*hg 1 impulses to layer jump 2 to 3*)
		CDhg1ImpLayJu3_4: DINT:=0;
			(*hg 1 impulses to layer jump 3 to 4*)
		CDhg1ImpLayJu4_5: DINT:=0;
			(*hg 1 impulses to layer jump 4 to 5*)
		CDhg1ImpLayJu5_6: DINT:=0;
			(*hg 1 impulses to layer jump 5 to 6*)
		CDhg1ImpLayJu6_7: DINT:=0;
			(*hg 1 impulses to layer jump 6 to 7*)
	END_VAR
	VAR 
		LXinitOk: BOOL:=FALSE;
			(*init completed*)
		LXstart: BOOL:=FALSE;
			(*first scan completed*)
		LDvalueChaLay: DINT:=0;
			(*counter value by changing the layer x*)
		LDropeLenLay1: REAL:=0.0;
			(*rope lenght layer 1*)
		LDropeLenLay2: REAL:=0.0;
			(*rope lenght layer 2*)
		LDropeLenLay3: REAL:=0.0;
			(*rope lenght layer 3*)
		LDropeLenLay4: REAL:=0.0;
			(*rope lenght layer 4*)
		LDropeLenLay5: REAL:=0.0;
			(*rope lenght layer 5*)
		LDropeLenLay6: REAL:=0.0;
			(*rope lenght layer 6*)
		LDropeLenLay7: REAL:=0.0;
			(*rope lenght layer 7*)
		LDimpulsPerMeter: REAL:=0.0;
			(*impulses per meter*)
		LDdiameterLayer1: REAL:=0.0;
			(*diameter of the layer 1 in the middle of the rope*)
		LDdiameterLayer2: REAL:=0.0;
			(*diameter of the layer 2 in the middle of the rope*)
		LDdiameterLayer3: REAL:=0.0;
			(*diameter of the layer 3 in the middle of the rope*)
		LDdiameterLayer4: REAL:=0.0;
			(*diameter of the layer 4 in the middle of the rope*)
		LDdiameterLayer5: REAL:=0.0;
			(*diameter of the layer 5 in the middle of the rope*)
		LDdiameterLayer6: REAL:=0.0;
			(*diameter of the layer 6 in the middle of the rope*)
		LDdiameterLayer7: REAL:=0.0;
			(*diameter of the layer 7 in the middle of the rope*)
		LD_x: REAL:=0.0;
		CountSave1: CountSave;
		calculation1: ADropeLeCalcV011;
		calculation2: ADropeLeCalcV011;
		calculation3: ADropeLeCalcV011;
		calculation4: ADropeLeCalcV011;
		calculation5: ADropeLeCalcV011;
		calculation6: ADropeLeCalcV011;
		calculation7: ADropeLeCalcV011;
		Frequ1: Count2FreqFilt;
		CorrValue_Bool1: CorrValue_Bool;
		CorrValue_Real1: CorrValue_Real;
		CorrValue_Real2: CorrValue_Real;
		CorrValue_Real3: CorrValue_Real;
		CorrValue_Real4: CorrValue_Real;
		CorrValue_DInt1: CorrValue_DInt;
		CorrValue_DInt2: CorrValue_DInt;
		CorrValue_DInt3: CorrValue_DInt;
		CorrValue_DInt4: CorrValue_DInt;
		CorrValue_DInt5: CorrValue_DInt;
		CorrValue_DInt6: CorrValue_DInt;
	END_VAR
'FBD'
BODY
    WORKSPACE
        NETWORK_LIST_TYPE := NWTYPEFBD ;
        ACTIVE_NETWORK := 0 ;
    END_WORKSPACE
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_COMMENT,,init first time,1,1,27,2,);
B(B_VARIN,,LXinitOk,9,4,11,6,);
B(B_F,not,,11,3,16,6,);
B(B_JUMP,,init,16,4,18,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,protect correction value change while program activ,1,1,27,2,);
B(B_VAROUT,,MXhg1RopeLenMeas,23,6,25,8,);
B(B_F,sel,,18,5,23,10,);
B(B_VARIN,,CXhg1RopeLenMeas,16,7,18,9,);
B(B_VARIN,,MXhg1RopeLenMeas,16,8,18,10,);
B(B_VARIN,,IXentrySwiClosed,9,4,11,6,);
B(B_VARIN,,LXstart,9,5,11,7,);
B(B_F,@AND-2,,11,3,16,7,);
L(17,5,17,7);
L(17,7,18,7);
L(16,5,17,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VAROUT,,LXstart,11,1,13,3,);
B(B_VARIN,,TRUE,9,1,11,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_VARIN,,MXhg1RopeLenMeas,9,4,11,6,);
B(B_F,not,,11,3,16,6,);
B(B_COMMENT,,exit program when program not enabled,1,1,27,2,);
B(B_RETURN,,,16,4,18,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_COMMENT,,set impuls by changing layer,1,1,27,2,);
B(B_F,sel,,18,3,23,8,);
B(B_VAROUT,,LDvalueChaLay,23,4,25,6,);
B(B_VARIN,,MXchangeLayer1_2,16,4,18,6,);
B(B_VARIN,,LDvalueChaLay,16,5,18,7,);
B(B_F,@MUL-2,,11,7,16,11,);
B(B_VARIN,,CDhg1ImpLayJu1_2,9,8,11,10,);
B(B_VARIN,,4,9,9,11,11,);
L(16,9,17,9);
L(17,7,17,9);
L(17,7,18,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_F,sel,,18,1,23,6,);
B(B_VAROUT,,LDvalueChaLay,23,2,25,4,);
B(B_VARIN,,LDvalueChaLay,16,3,18,5,);
B(B_VARIN,,MXchangeLayer3_4,16,2,18,4,);
B(B_F,@MUL-2,,11,5,16,9,);
B(B_VARIN,,CDhg1ImpLayJu3_4,9,6,11,8,);
B(B_VARIN,,4,9,7,11,9,);
L(16,7,17,7);
L(17,5,17,7);
L(17,5,18,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_F,sel,,18,1,23,6,);
B(B_VAROUT,,LDvalueChaLay,23,2,25,4,);
B(B_VARIN,,LDvalueChaLay,16,3,18,5,);
B(B_VARIN,,MXchangeLayer5_6,16,2,18,4,);
B(B_F,@MUL-2,,11,5,16,9,);
B(B_VARIN,,CDhg1ImpLayJu5_6,9,6,11,8,);
B(B_VARIN,,4,9,7,11,9,);
L(16,7,17,7);
L(17,5,17,7);
L(17,5,18,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_VARIN,,MXchangeLayer1_2,9,8,11,10,);
B(B_VARIN,,MXchangeLayer3_4,9,9,11,11,);
B(B_VARIN,,MXchangeLayer5_6,9,10,11,12,);
B(B_F,@OR-3,,11,7,16,12,);
B(B_F,@AND-2,,18,6,23,10,);
B(B_VARIN,,MDhg1ImpulsValue,30,9,32,11,);
B(B_VARIN,,LDvalueChaLay,30,8,32,10,);
B(B_VARIN,,MXhg1EnChangeLay,15,5,17,7,);
B(B_COMMENT,,set rope lenght by changing layer,1,1,27,2,);
B(B_FB,CountSave,CountSave1,32,5,43,11,);
B(B_VARIN,,IDcounterHg1,30,6,32,8,);
B(B_VAROUT,,MDhg1ImpulsValue,43,6,45,8,);
L(16,9,18,9);
L(23,8,32,8);
L(17,8,18,8);
L(17,6,17,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 18 ;
        NETWORK_BODY
B(B_VARIN,,CDhg1GearRatio,25,10,27,12,);
B(B_VARIN,,MDhg1CircumfLay1,25,9,27,11,);
B(B_VAROUT,,LDimpulsPerMeter,55,13,57,15,);
B(B_F,sel,,50,12,55,17,);
B(B_VAROUT,,LDropeLenLay1,48,8,50,10,);
B(B_VARIN,,LDimpulsPerMeter,46,14,48,16,);
B(B_F,@LE-2,,19,12,24,16,);
B(B_F,@MUL-2,,11,10,16,14,);
B(B_FB,ADropeLeCalcV011,calculation1,27,7,48,13,);
B(B_F,limit,,19,3,25,8,);
B(B_F,@MUL-2,,11,5,16,9,);
B(B_VARIN,,CDhg1ImpLayJu1_2,9,6,11,8,);
B(B_VARIN,,MDhg1ImpulsValue,16,3,18,5,);
B(B_COMMENT,,layer 1,1,1,27,2,);
B(B_VARIN,,4.0,9,12,11,14,);
B(B_VARIN,,CDhg1ImPIncSen,9,11,11,13,);
B(B_VARIN,,4,9,7,11,9,);
L(26,5,26,9);
L(49,10,49,16);
L(49,16,50,16);
L(24,14,50,14);
L(48,15,50,15);
L(17,7,17,15);
L(17,15,19,15);
L(18,14,19,14);
L(16,12,27,12);
L(26,9,27,9);
L(48,10,49,10);
L(25,5,26,5);
L(18,5,19,5);
L(18,6,19,6);
L(18,4,18,14);
L(16,7,19,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 21 ;
        NETWORK_BODY
B(B_F,limit,,18,6,24,11,);
B(B_F,@SUB,,26,6,31,10,);
B(B_VARIN,,MDhg1ImpulsValue,16,8,18,10,);
B(B_VAROUT,,LDropeLenLay2,54,10,56,12,);
B(B_VARIN,,MDhg1CircumfLay2,29,11,31,13,);
B(B_VARIN,,CDhg1GearRatio,29,12,31,14,);
B(B_F,@GT-2,,33,15,38,19,);
B(B_VARIN,,0,31,17,33,19,);
B(B_F,sel,,56,15,61,20,);
B(B_VARIN,,LDimpulsPerMeter,52,17,54,19,);
B(B_VAROUT,,LDimpulsPerMeter,61,16,63,18,);
B(B_VARIN,,CDhg1ImPIncSen,23,16,25,18,);
B(B_F,@MUL-2,,25,15,30,19,);
B(B_FB,ADropeLeCalcV011,calculation2,33,9,54,15,);
B(B_F,@MUL-2,,11,3,16,7,);
B(B_VARIN,,CDhg1ImpLayJu1_2,9,4,11,6,);
B(B_VARIN,,4,9,5,11,7,);
B(B_COMMENT,,layer 2,1,1,27,2,);
B(B_VARIN,,4.0,23,17,25,19,);
B(B_VARIN,,CDhg1ImpLayJu2_3,9,11,11,13,);
B(B_F,@MUL-2,,11,10,16,14,);
B(B_VARIN,,4,9,12,11,14,);
L(31,8,32,8);
L(24,8,26,8);
L(25,9,26,9);
L(17,8,18,8);
L(25,5,25,9);
L(17,5,17,8);
L(31,13,33,13);
L(32,8,32,17);
L(32,17,33,17);
L(55,19,56,19);
L(54,18,56,18);
L(55,12,55,19);
L(38,17,56,17);
L(31,14,33,14);
L(31,14,31,17);
L(30,17,31,17);
L(32,11,33,11);
L(31,12,33,12);
L(54,12,55,12);
L(16,5,25,5);
L(17,10,17,12);
L(17,10,18,10);
L(16,12,17,12);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 22 ;
        NETWORK_BODY
B(B_COMMENT,,layer 3,1,1,27,2,);
B(B_F,@SUB,,26,7,31,11,);
B(B_F,limit,,18,7,24,12,);
B(B_VARIN,,MDhg1ImpulsValue,16,9,18,11,);
B(B_VAROUT,,LDropeLenLay3,54,11,56,13,);
B(B_F,sel,,56,16,61,21,);
B(B_VARIN,,LDimpulsPerMeter,52,18,54,20,);
B(B_VAROUT,,LDimpulsPerMeter,61,17,63,19,);
B(B_F,@GT-2,,33,16,38,20,);
B(B_VARIN,,MDhg1CircumfLay3,29,12,31,14,);
B(B_VARIN,,CDhg1GearRatio,29,13,31,15,);
B(B_VARIN,,0,31,18,33,20,);
B(B_VARIN,,CDhg1ImPIncSen,23,17,25,19,);
B(B_F,@MUL-2,,25,16,30,20,);
B(B_VARIN,,4.0,23,18,25,20,);
B(B_FB,ADropeLeCalcV011,calculation3,33,10,54,16,);
B(B_F,@MUL-2,,11,4,16,8,);
B(B_VARIN,,4,9,6,11,8,);
B(B_VARIN,,CDhg1ImpLayJu2_3,9,5,11,7,);
B(B_VARIN,,CDhg1ImpLayJu3_4,9,12,11,14,);
B(B_F,@MUL-2,,11,11,16,15,);
B(B_VARIN,,4,9,13,11,15,);
L(31,9,32,9);
L(25,10,26,10);
L(24,9,26,9);
L(17,9,18,9);
L(17,6,17,9);
L(25,6,25,10);
L(55,20,56,20);
L(54,19,56,19);
L(55,13,55,20);
L(38,18,56,18);
L(31,14,33,14);
L(31,15,33,15);
L(32,9,32,18);
L(32,18,33,18);
L(31,15,31,18);
L(30,18,31,18);
L(32,12,33,12);
L(31,13,33,13);
L(54,13,55,13);
L(16,6,25,6);
L(16,13,17,13);
L(17,11,17,13);
L(17,11,18,11);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 22 ;
        NETWORK_BODY
B(B_COMMENT,,layer 4,1,1,27,2,);
B(B_F,limit,,18,6,24,11,);
B(B_F,@SUB,,26,6,31,10,);
B(B_VARIN,,MDhg1ImpulsValue,16,8,18,10,);
B(B_VAROUT,,LDropeLenLay4,54,10,56,12,);
B(B_F,sel,,56,15,61,20,);
B(B_VARIN,,LDimpulsPerMeter,52,17,54,19,);
B(B_VAROUT,,LDimpulsPerMeter,61,16,63,18,);
B(B_F,@GT-2,,33,15,38,19,);
B(B_VARIN,,0,31,17,33,19,);
B(B_VARIN,,CDhg1GearRatio,29,12,31,14,);
B(B_VARIN,,MDhg1CircumfLay4,29,11,31,13,);
B(B_VARIN,,CDhg1ImPIncSen,23,16,25,18,);
B(B_F,@MUL-2,,25,15,30,19,);
B(B_VARIN,,4.0,23,17,25,19,);
B(B_FB,ADropeLeCalcV011,calculation4,33,9,54,15,);
B(B_F,@MUL-2,,11,3,16,7,);
B(B_VARIN,,4,9,5,11,7,);
B(B_F,@MUL-2,,11,10,16,14,);
B(B_VARIN,,4,9,12,11,14,);
B(B_VARIN,,CDhg1ImpLayJu3_4,9,4,11,6,);
B(B_VARIN,,CDhg1ImpLayJu4_5,9,11,11,13,);
L(31,8,32,8);
L(24,8,26,8);
L(25,9,26,9);
L(25,5,25,9);
L(17,8,18,8);
L(17,5,17,8);
L(55,19,56,19);
L(54,18,56,18);
L(38,17,56,17);
L(55,12,55,19);
L(32,17,33,17);
L(32,8,32,17);
L(31,13,33,13);
L(31,14,33,14);
L(31,14,31,17);
L(30,17,31,17);
L(32,11,33,11);
L(31,12,33,12);
L(54,12,55,12);
L(16,12,17,12);
L(17,10,17,12);
L(17,10,18,10);
L(16,5,25,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 22 ;
        NETWORK_BODY
B(B_COMMENT,,layer 5,1,1,27,2,);
B(B_VARIN,,MDhg1ImpulsValue,16,8,18,10,);
B(B_F,limit,,18,6,24,11,);
B(B_F,@SUB,,26,6,31,10,);
B(B_VAROUT,,LDropeLenLay5,54,11,56,13,);
B(B_F,sel,,56,16,61,21,);
B(B_VARIN,,LDimpulsPerMeter,52,18,54,20,);
B(B_VAROUT,,LDimpulsPerMeter,61,17,63,19,);
B(B_F,@GT-2,,33,16,38,20,);
B(B_VARIN,,0,31,18,33,20,);
B(B_VARIN,,MDhg1CircumfLay5,29,12,31,14,);
B(B_VARIN,,CDhg1GearRatio,29,13,31,15,);
B(B_VARIN,,CDhg1ImPIncSen,23,17,25,19,);
B(B_F,@MUL-2,,25,16,30,20,);
B(B_VARIN,,4.0,23,18,25,20,);
B(B_FB,ADropeLeCalcV011,calculation5,33,10,54,16,);
B(B_F,@MUL-2,,11,3,16,7,);
B(B_VARIN,,4,9,5,11,7,);
B(B_VARIN,,CDhg1ImpLayJu4_5,9,4,11,6,);
B(B_F,@MUL-2,,11,10,16,14,);
B(B_VARIN,,4,9,12,11,14,);
B(B_VARIN,,CDhg1ImpLayJu5_6,9,11,11,13,);
L(31,8,32,8);
L(24,8,26,8);
L(25,9,26,9);
L(25,5,25,9);
L(17,5,17,8);
L(17,8,18,8);
L(55,20,56,20);
L(54,19,56,19);
L(55,13,55,20);
L(38,18,56,18);
L(32,8,32,18);
L(32,18,33,18);
L(31,15,33,15);
L(31,14,33,14);
L(31,15,31,18);
L(30,18,31,18);
L(32,12,33,12);
L(31,13,33,13);
L(54,13,55,13);
L(16,5,25,5);
L(16,12,17,12);
L(17,10,17,12);
L(17,10,18,10);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 22 ;
        NETWORK_BODY
B(B_COMMENT,,layer 6,1,1,27,2,);
B(B_F,limit,,18,6,24,11,);
B(B_VARIN,,MDhg1ImpulsValue,16,8,18,10,);
B(B_F,@SUB,,26,6,31,10,);
B(B_VAROUT,,LDropeLenLay6,54,11,56,13,);
B(B_F,sel,,56,16,61,21,);
B(B_VARIN,,LDimpulsPerMeter,52,18,54,20,);
B(B_VAROUT,,LDimpulsPerMeter,61,17,63,19,);
B(B_F,@GT-2,,33,16,38,20,);
B(B_VARIN,,MDhg1CircumfLay6,29,12,31,14,);
B(B_VARIN,,CDhg1GearRatio,29,13,31,15,);
B(B_VARIN,,0,31,18,33,20,);
B(B_VARIN,,CDhg1ImPIncSen,23,17,25,19,);
B(B_F,@MUL-2,,25,16,30,20,);
B(B_VARIN,,4.0,23,18,25,20,);
B(B_FB,ADropeLeCalcV011,calculation6,33,10,54,16,);
B(B_F,@MUL-2,,11,3,16,7,);
B(B_VARIN,,4,9,5,11,7,);
B(B_VARIN,,CDhg1ImpLayJu5_6,9,4,11,6,);
B(B_VARIN,,CDhg1ImpLayJu6_7,9,11,11,13,);
B(B_F,@MUL-2,,11,10,16,14,);
B(B_VARIN,,4,9,12,11,14,);
L(31,8,32,8);
L(17,5,17,8);
L(17,8,18,8);
L(25,9,26,9);
L(25,5,25,9);
L(24,8,26,8);
L(55,20,56,20);
L(54,19,56,19);
L(55,13,55,20);
L(38,18,56,18);
L(32,18,33,18);
L(32,8,32,18);
L(31,14,33,14);
L(31,15,33,15);
L(31,15,31,18);
L(30,18,31,18);
L(32,12,33,12);
L(31,13,33,13);
L(54,13,55,13);
L(16,5,25,5);
L(16,12,17,12);
L(17,10,17,12);
L(17,10,18,10);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 22 ;
        NETWORK_BODY
B(B_COMMENT,,layer 7,1,1,27,2,);
B(B_F,@SUB,,26,6,31,10,);
B(B_F,limit,,18,6,24,11,);
B(B_VARIN,,MDhg1ImpulsValue,15,8,17,10,);
B(B_VAROUT,,LDropeLenLay7,54,11,56,13,);
B(B_F,sel,,56,16,61,21,);
B(B_VARIN,,LDimpulsPerMeter,52,18,54,20,);
B(B_VAROUT,,LDimpulsPerMeter,61,17,63,19,);
B(B_F,@GT-2,,33,16,38,20,);
B(B_VARIN,,0,31,18,33,20,);
B(B_VARIN,,CDhg1GearRatio,29,13,31,15,);
B(B_VARIN,,MDhg1CircumfLay7,29,12,31,14,);
B(B_VARIN,,CDhg1ImPIncSen,23,17,25,19,);
B(B_F,@MUL-2,,25,16,30,20,);
B(B_VARIN,,4.0,23,18,25,20,);
B(B_FB,ADropeLeCalcV011,calculation7,33,10,54,16,);
B(B_F,@MUL-2,,11,3,16,7,);
B(B_VARIN,,4,9,5,11,7,);
B(B_VARIN,,CDhg1ImpLayJu6_7,9,4,11,6,);
L(31,8,32,8);
L(24,8,26,8);
L(25,9,26,9);
L(25,5,25,9);
L(17,5,17,8);
L(17,9,18,9);
L(17,9,17,10);
L(17,10,18,10);
L(55,20,56,20);
L(54,19,56,19);
L(55,13,55,20);
L(38,18,56,18);
L(31,14,33,14);
L(31,15,33,15);
L(32,8,32,18);
L(32,18,33,18);
L(31,15,31,18);
L(30,18,31,18);
L(32,12,33,12);
L(31,13,33,13);
L(54,13,55,13);
L(17,8,18,8);
L(16,5,25,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_COMMENT,,rope on the winch,1,1,27,2,);
B(B_VARIN,,LDropeLenLay1,11,4,13,6,);
B(B_VARIN,,LDropeLenLay2,11,5,13,7,);
B(B_VARIN,,LDropeLenLay3,11,6,13,8,);
B(B_VARIN,,LDropeLenLay4,11,7,13,9,);
B(B_VARIN,,LDropeLenLay5,11,8,13,10,);
B(B_VARIN,,LDropeLenLay6,11,9,13,11,);
B(B_VARIN,,LDropeLenLay7,11,10,13,12,);
B(B_F,@ADD-7,,13,3,18,12,);
B(B_VAROUT,,MDhg1RopeLenWin,18,4,20,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 18 ;
        NETWORK_BODY
B(B_VARIN,,MDropLenTaraHg1,18,12,20,14,);
B(B_VARIN,,MDhg1RopeLenWin,18,13,20,15,);
B(B_VARIN,,0.0,24,15,26,17,);
B(B_F,@AND-2,,20,2,25,6,);
B(B_F,@OR-3,,13,3,18,8,);
B(B_VARIN,,MXchangeLayer1_2,11,4,13,6,);
B(B_VARIN,,MXchangeLayer3_4,11,5,13,7,);
B(B_VARIN,,MXchangeLayer5_6,11,6,13,8,);
B(B_VARIN,,MXhg1EnChangeLay,17,1,19,3,);
B(B_VARIN,,MXresRopeLenHg1,11,9,13,11,);
B(B_F,sel,,20,10,25,15,);
B(B_F,sel,,27,9,32,14,);
B(B_VAROUT,,MDropLenTaraHg1,32,10,34,12,);
B(B_F,@OR-2,,13,8,18,12,);
B(B_VARIN,,MXextResRopeHg1,11,10,13,12,);
L(26,4,26,11);
L(25,12,27,12);
L(26,13,27,13);
L(26,13,26,16);
L(25,4,26,4);
L(18,5,20,5);
L(19,4,20,4);
L(19,2,19,4);
L(26,11,27,11);
L(18,10,19,10);
L(19,10,19,12);
L(19,12,20,12);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_F,@SUB,,11,1,16,5,);
B(B_VARIN,,MDhg1RopeLenWin,9,2,11,4,);
B(B_VARIN,,MDropLenTaraHg1,9,3,11,5,);
B(B_VAROUT,,MDropeLenghtHg1,16,2,18,4,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,calculation of the speed of the rope in m/min,1,1,27,2,);
B(B_VARIN,,IDcounterHg1,9,5,11,7,);
B(B_VARIN,,T#0.2s,9,6,11,8,);
B(B_FB,Count2FreqFilt,Frequ1,11,4,23,8,);
B(B_F,@DIV,,25,4,30,8,);
B(B_F,@MUL-2,,32,4,37,8,);
B(B_VAROUT,,MDhg1RopeSpeed,37,5,39,7,);
B(B_VARIN,,60.0,29,8,31,10,);
B(B_VARIN,,LDimpulsPerMeter,22,8,24,10,);
L(30,6,32,6);
L(23,6,25,6);
L(24,7,25,7);
L(31,7,32,7);
L(31,7,31,9);
L(24,7,24,9);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 19 ;
        NETWORK_BODY
B(B_COMMENT,,calculation of the circumference of the layers in the middle of the rope,1,1,56,3,);
B(B_F,@MUL-2,,19,4,24,8,);
B(B_F,@MUL-2,,19,8,24,12,);
B(B_F,@DIV,,26,8,31,12,);
B(B_VARIN,,4.0,23,12,25,14,);
B(B_F,sqrt,,40,4,45,7,);
B(B_F,@SUB,,33,4,38,8,);
B(B_COMMENT,,A = Wrz ( d_qdr - P_qdr / 4 ),47,6,59,7,);
B(B_F,@MUL-2,,47,8,52,12,);
B(B_VARIN,,11.0,45,10,47,12,);
B(B_F,@ADD-2,,54,8,59,12,);
B(B_VARIN,,CDhg1RopeDiamete,51,12,53,14,);
B(B_F,@DIV,,61,8,66,12,);
B(B_VAROUT,,LD_x,66,9,68,11,);
B(B_VARIN,,6.0,58,12,60,14,);
B(B_COMMENT,,D_2 = ( ( ( D_1 + 2 * A ) * 330 ) / 360 ) + ( ( ( D_1 + 2 * d ) * 30 ) / 360 ),30,14,58,15,);
B(B_COMMENT,,D_2 = D_1 + ( ( ( 11 * A ) + d ) / 6 ),30,16,45,17,);
B(B_COMMENT,,therefore:,24,16,29,17,);
B(B_COMMENT,,LD_x = ( ( ( 11 * A ) + d ) / 6),57,16,69,17,);
B(B_F,@MUL-2,,12,8,17,12,);
B(B_VARIN,,CDhg1RopeDiamete,9,5,11,7,);
B(B_VARIN,,1.05,10,10,12,12,);
B(B_COMMENT,,105% = Pitch,11,12,18,13,);
L(18,6,18,7);
L(18,7,19,7);
L(18,10,18,11);
L(18,11,19,11);
L(24,10,26,10);
L(25,11,26,11);
L(25,11,25,13);
L(32,7,33,7);
L(32,7,32,10);
L(31,10,32,10);
L(24,6,33,6);
L(38,6,40,6);
L(45,6,46,6);
L(46,6,46,10);
L(46,10,47,10);
L(52,10,54,10);
L(53,11,54,11);
L(53,11,53,13);
L(59,10,61,10);
L(60,11,61,11);
L(60,11,60,13);
L(17,10,19,10);
L(11,6,19,6);
L(11,6,11,10);
L(11,10,12,10);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_VARIN,,CDhg1Layer1Diame,9,3,11,5,);
B(B_COMMENT,,layer 1,1,1,27,2,);
B(B_VAROUT,,LDdiameterLayer1,11,3,13,5,);
B(B_F,@MUL-2,,12,5,17,9,);
B(B_VARIN,,PI,10,7,12,9,);
B(B_F,@DIV,,19,5,24,9,);
B(B_VARIN,,1000.0,16,9,18,11,);
B(B_VAROUT,,MDhg1CircumfLay1,24,6,26,8,);
L(11,4,11,7);
L(11,7,12,7);
L(18,8,19,8);
L(18,8,18,10);
L(17,7,19,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_COMMENT,,layer 2,1,1,27,2,);
B(B_VARIN,,LDdiameterLayer1,9,4,11,6,);
B(B_F,@ADD-2,,11,3,16,7,);
B(B_VARIN,,LD_x,9,5,11,7,);
B(B_VAROUT,,LDdiameterLayer2,17,4,19,6,);
B(B_F,@MUL-2,,18,6,23,10,);
B(B_VARIN,,PI,16,8,18,10,);
B(B_F,@DIV,,25,6,30,10,);
B(B_VARIN,,1000.0,22,10,24,12,);
B(B_VAROUT,,MDhg1CircumfLay2,30,7,32,9,);
L(16,5,17,5);
L(17,5,17,8);
L(17,8,18,8);
L(24,9,25,9);
L(24,9,24,11);
L(23,8,25,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_COMMENT,,layer 3,1,1,27,2,);
B(B_VARIN,,LDdiameterLayer2,9,4,11,6,);
B(B_F,@ADD-2,,11,3,16,7,);
B(B_VARIN,,LD_x,9,5,11,7,);
B(B_VAROUT,,LDdiameterLayer3,17,4,19,6,);
B(B_F,@MUL-2,,18,6,23,10,);
B(B_VARIN,,PI,16,8,18,10,);
B(B_VAROUT,,MDhg1CircumfLay3,30,7,32,9,);
B(B_F,@DIV,,25,6,30,10,);
B(B_VARIN,,1000.0,22,10,24,12,);
L(16,5,17,5);
L(17,5,17,8);
L(17,8,18,8);
L(24,9,25,9);
L(24,9,24,11);
L(23,8,25,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_COMMENT,,layer 4,1,1,27,2,);
B(B_VARIN,,LDdiameterLayer3,9,4,11,6,);
B(B_F,@ADD-2,,11,3,16,7,);
B(B_VARIN,,LD_x,9,5,11,7,);
B(B_VAROUT,,LDdiameterLayer4,17,4,19,6,);
B(B_F,@MUL-2,,18,6,23,10,);
B(B_VARIN,,PI,16,8,18,10,);
B(B_VAROUT,,MDhg1CircumfLay4,30,7,32,9,);
B(B_F,@DIV,,25,6,30,10,);
B(B_VARIN,,1000.0,22,10,24,12,);
L(16,5,17,5);
L(17,5,17,8);
L(17,8,18,8);
L(24,9,25,9);
L(24,9,24,11);
L(23,8,25,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_COMMENT,,layer 5,1,1,27,2,);
B(B_VARIN,,LDdiameterLayer4,9,4,11,6,);
B(B_F,@ADD-2,,11,3,16,7,);
B(B_VARIN,,LD_x,9,5,11,7,);
B(B_VAROUT,,LDdiameterLayer5,17,4,19,6,);
B(B_F,@MUL-2,,18,6,23,10,);
B(B_VARIN,,PI,16,8,18,10,);
B(B_VAROUT,,MDhg1CircumfLay5,30,7,32,9,);
B(B_F,@DIV,,25,6,30,10,);
B(B_VARIN,,1000.0,22,10,24,12,);
L(16,5,17,5);
L(17,5,17,8);
L(17,8,18,8);
L(24,9,25,9);
L(24,9,24,11);
L(23,8,25,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 14 ;
        NETWORK_BODY
B(B_COMMENT,,layer 6,1,1,27,2,);
B(B_VARIN,,LDdiameterLayer5,9,4,11,6,);
B(B_F,@ADD-2,,11,3,16,7,);
B(B_VARIN,,LD_x,9,5,11,7,);
B(B_VAROUT,,LDdiameterLayer6,17,4,19,6,);
B(B_F,@MUL-2,,18,6,23,10,);
B(B_VARIN,,PI,16,8,18,10,);
B(B_VAROUT,,MDhg1CircumfLay6,30,7,32,9,);
B(B_F,@DIV,,25,6,30,10,);
B(B_VARIN,,1000.0,22,10,24,12,);
L(16,5,17,5);
L(17,5,17,8);
L(17,8,18,8);
L(24,9,25,9);
L(24,9,24,11);
L(23,8,25,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_COMMENT,,layer 7,1,1,27,2,);
B(B_VARIN,,LDdiameterLayer6,9,4,11,6,);
B(B_F,@ADD-2,,11,3,16,7,);
B(B_VARIN,,LD_x,9,5,11,7,);
B(B_VAROUT,,LDdiameterLayer7,17,4,19,6,);
B(B_F,@MUL-2,,18,6,23,10,);
B(B_VARIN,,PI,16,8,18,10,);
B(B_VAROUT,,MDhg1CircumfLay7,30,7,32,9,);
B(B_F,@DIV,,25,6,30,10,);
B(B_VARIN,,1000.0,22,10,24,12,);
L(16,5,17,5);
L(17,5,17,8);
L(17,8,18,8);
L(24,9,25,9);
L(24,9,24,11);
L(23,8,25,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,set the impuls per layer or exit program!,1,1,27,2,);
B(B_VARIN,,IXentrySwiClosed,9,3,11,5,);
B(B_RETURN,,,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_COMMENT,,layer 1,1,3,28,4,);
B(B_FB,CorrValue_DInt,CorrValue_DInt1,11,6,23,12,);
B(B_VARIN,,CDhg1ImpLayJu1_2,9,10,11,12,);
B(B_VARIN,,13500,9,7,11,9,);
B(B_VARIN,,10000000,9,9,11,11,);
B(B_VARIN,,0,9,8,11,10,);
B(B_COMMENT,,set impulses of the winch,1,1,28,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 15 ;
        NETWORK_BODY
B(B_COMMENT,,layer 2,1,1,28,2,);
B(B_VARIN,,28503,9,5,11,7,);
B(B_F,sel,,20,5,25,10,);
B(B_F,@LT-2,,13,3,18,7,);
B(B_FB,CorrValue_DInt,CorrValue_DInt2,27,8,39,14,);
B(B_VARIN,,CDhg1ImpLayJu2_3,25,12,27,14,);
B(B_VARIN,,10000000,25,11,27,13,);
B(B_VARIN,,CDhg1ImpLayJu1_2,10,4,12,6,);
L(19,7,20,7);
L(19,5,19,7);
L(11,6,13,6);
L(12,8,20,8);
L(11,6,11,9);
L(11,9,20,9);
L(18,5,19,5);
L(26,10,27,10);
L(26,7,26,10);
L(25,7,26,7);
L(12,11,27,11);
L(12,5,12,11);
L(12,5,13,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 15 ;
        NETWORK_BODY
B(B_COMMENT,,layer 3,1,1,28,2,);
B(B_VARIN,,43508,9,5,11,7,);
B(B_F,sel,,20,5,25,10,);
B(B_F,@LT-2,,13,3,18,7,);
B(B_VARIN,,CDhg1ImpLayJu2_3,10,4,12,6,);
B(B_FB,CorrValue_DInt,CorrValue_DInt3,27,8,39,14,);
B(B_VARIN,,CDhg1ImpLayJu3_4,25,12,27,14,);
B(B_VARIN,,10000000,25,11,27,13,);
L(19,7,20,7);
L(19,5,19,7);
L(11,6,13,6);
L(12,8,20,8);
L(11,6,11,9);
L(11,9,20,9);
L(18,5,19,5);
L(26,10,27,10);
L(26,7,26,10);
L(25,7,26,7);
L(12,11,27,11);
L(12,5,12,11);
L(12,5,13,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 15 ;
        NETWORK_BODY
B(B_COMMENT,,layer 4,1,1,28,2,);
B(B_F,sel,,20,5,25,10,);
B(B_F,@LT-2,,13,3,18,7,);
B(B_VARIN,,58515,9,5,11,7,);
B(B_VARIN,,CDhg1ImpLayJu3_4,10,4,12,6,);
B(B_FB,CorrValue_DInt,CorrValue_DInt4,27,8,39,14,);
B(B_VARIN,,CDhg1ImpLayJu4_5,25,12,27,14,);
B(B_VARIN,,10000000,25,11,27,13,);
L(19,7,20,7);
L(19,5,19,7);
L(11,6,13,6);
L(12,8,20,8);
L(11,6,11,9);
L(11,9,20,9);
L(18,5,19,5);
L(26,10,27,10);
L(26,7,26,10);
L(25,7,26,7);
L(12,11,27,11);
L(12,5,12,11);
L(12,5,13,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 15 ;
        NETWORK_BODY
B(B_COMMENT,,layer 5,1,1,28,2,);
B(B_F,sel,,20,5,25,10,);
B(B_F,@LT-2,,13,3,18,7,);
B(B_VARIN,,73524,9,5,11,7,);
B(B_VARIN,,CDhg1ImpLayJu4_5,10,4,12,6,);
B(B_FB,CorrValue_DInt,CorrValue_DInt5,27,8,39,14,);
B(B_VARIN,,CDhg1ImpLayJu5_6,25,12,27,14,);
B(B_VARIN,,10000000,25,11,27,13,);
L(19,7,20,7);
L(19,5,19,7);
L(11,6,13,6);
L(12,8,20,8);
L(11,6,11,9);
L(11,9,20,9);
L(18,5,19,5);
L(26,10,27,10);
L(26,7,26,10);
L(25,7,26,7);
L(12,11,27,11);
L(12,5,12,11);
L(12,5,13,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 15 ;
        NETWORK_BODY
B(B_COMMENT,,layer 6,1,1,28,2,);
B(B_F,sel,,20,5,25,10,);
B(B_F,@LT-2,,13,3,18,7,);
B(B_VARIN,,88535,9,5,11,7,);
B(B_VARIN,,CDhg1ImpLayJu5_6,10,4,12,6,);
B(B_FB,CorrValue_DInt,CorrValue_DInt6,27,8,39,14,);
B(B_VARIN,,CDhg1ImpLayJu6_7,25,12,27,14,);
B(B_VARIN,,10000000,25,11,27,13,);
L(19,7,20,7);
L(19,5,19,7);
L(11,6,13,6);
L(12,8,20,8);
L(11,6,11,9);
L(11,9,20,9);
L(18,5,19,5);
L(26,10,27,10);
L(26,7,26,10);
L(25,7,26,7);
L(12,11,27,11);
L(12,5,12,11);
L(12,5,13,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,exit program,1,1,27,2,);
B(B_VARIN,,LXinitOk,9,3,11,5,);
B(B_RETURN,,,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL := init: ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_COMMENT,,init program,1,1,56,3,);
B(B_VARIN,,TRUE,9,4,11,6,);
B(B_VAROUT,,LXinitOk,11,4,13,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value rope lenght measuring hg 1 enabled,1,1,27,2,);
B(B_FB,CorrValue_Bool,CorrValue_Bool1,11,4,23,10,);
B(B_VARIN,,FALSE,9,5,11,7,);
B(B_VARIN,,FALSE,9,6,11,8,);
B(B_VARIN,,TRUE,9,7,11,9,);
B(B_VARIN,,CXhg1RopeLenMeas,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,set ratio from the winch to the incrementalsensor,1,1,27,2,);
B(B_FB,CorrValue_Real,CorrValue_Real1,11,4,23,10,);
B(B_VARIN,,CDhg1GearRatio,9,8,11,10,);
B(B_VARIN,,100.0,9,7,11,9,);
B(B_VARIN,,1.0,9,5,11,7,);
B(B_VARIN,,1.0,9,6,11,8,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,set impuls per rotation of the incrementalsensor,1,1,27,2,);
B(B_FB,CorrValue_Real,CorrValue_Real2,11,4,23,10,);
B(B_VARIN,,CDhg1ImPIncSen,9,8,11,10,);
B(B_VARIN,,5000.0,9,7,11,9,);
B(B_VARIN,,500.0,9,5,11,7,);
B(B_VARIN,,10.0,9,6,11,8,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,rope diameter,1,1,27,2,);
B(B_FB,CorrValue_Real,CorrValue_Real3,11,4,23,10,);
B(B_VARIN,,CDhg1RopeDiamete,9,8,11,10,);
B(B_VARIN,,100.0,9,7,11,9,);
B(B_VARIN,,28.0,9,5,11,7,);
B(B_VARIN,,1.0,9,6,11,8,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_FB,CorrValue_Real,CorrValue_Real4,11,4,23,10,);
B(B_VARIN,,CDhg1Layer1Diame,9,8,11,10,);
B(B_VARIN,,2000.0,9,7,11,9,);
B(B_VARIN,,100.0,9,6,11,8,);
B(B_VARIN,,730.0,9,5,11,7,);
B(B_COMMENT,,diameter in layer 1 in the middle of the rope,1,1,27,2,);
        END_NETWORK_BODY
    END_NET_WORK
END_BODY
END_PROGRAM

PROGRAM ADhg2RopeMeaV030
(*name of author: Manfred Schapler
version: 1.0
date: 11/97
modification:*)
(*name of author: Manfred Schapler
version: 1.0
date: 11/97
modification:*)
	VAR_EXTERNAL 
		IXentrySwiClosed: BOOL:=FALSE;
			(*entry switch closed*)
		IDcounterHg2: DINT:=0;
			(*counter rope lenght hg2*)
		MXresRopeLenHg2: BOOL:=FALSE;
			(*reset rope lenght hg 2*)
		MXextResRopeHg2: BOOL:=FALSE;
			(*external reset rope lenght hg2*)
		MXchangeLayer1_2: BOOL:=FALSE;
			(*set change layer 1 to 2*)
		MXchangeLayer3_4: BOOL:=FALSE;
			(*set change layer 3 to 4*)
		MXchangeLayer5_6: BOOL:=FALSE;
			(*set change layer 5 to 6*)
		MXhg2EnChangeLay: BOOL:=FALSE;
			(*enable hg 1 change layer*)
		MDropeLenghtHg2: REAL:=0.0;
			(*rope lenght hg 2 in m*)
		MDhg2RopeSpeed: REAL:=0.0;
			(*hg 1 rope speed in  m/min*)
		MDhg2RopeLenWin: REAL:=0.0;
			(*rope lenght hg 2 on the winch in m*)
	END_VAR
	VAR_EXTERNAL CONSTANT
		PI: REAL:=3.141592653;
	END_VAR
	VAR_EXTERNAL RETAIN
		MXhg2RopeLenMeas: BOOL:=FALSE;
			(*rope lenght measuring hg 2 enabled*)
		MDhg2ImpulsValue: DINT:=0;
			(*present counter value hg2 (impulses)*)
		MDropLenTaraHg2: REAL:=0.0;
			(*hg 1 tara rope lenght*)
		MDhg2CircumfLay1: REAL:=0.0;
			(*hg 2 rope lenght measuring: circumference of the layer 1 in the middle of the rope*)
		MDhg2CircumfLay2: REAL:=0.0;
			(*hg 2 rope lenght measuring: circumference of the layer 2 in the middle of the rope*)
		MDhg2CircumfLay3: REAL:=0.0;
			(*hg 2 rope lenght measuring: circumference of the layer 3 in the middle of the rope*)
		MDhg2CircumfLay4: REAL:=0.0;
			(*hg 2 rope lenght measuring: circumference of the layer 4 in the middle of the rope*)
		MDhg2CircumfLay5: REAL:=0.0;
			(*hg 2 rope lenght measuring: circumference of the layer 5 in the middle of the rope*)
		MDhg2CircumfLay6: REAL:=0.0;
			(*hg 2 rope lenght measuring: circumference of the layer 6 in the middle of the rope*)
		MDhg2CircumfLay7: REAL:=0.0;
			(*hg 2 rope lenght measuring: circumference of the layer 7 in the middle of the rope*)
	END_VAR
	VAR_EXTERNAL CONSTANT RETAIN
		CXhg2RopeLenMeas: BOOL:=FALSE;
			(*rope lenght measuring hg 1*)
		CDhg2GearRatio: REAL:=0.0;
			(*hg 1 gear ratio from the winch to the incrementalsensor*)
		CDhg2RopeDiamete: REAL:=0.0;
			(*hg 2 rope lenght measuring: diameter of the rope*)
		CDhg2ImPIncSen: REAL:=0.0;
			(*hg 2 impulses per rotation of the incrementalsesor*)
		CDhg2Layer1Diame: REAL:=0.0;
			(*hg 2 rope lenght measuring: diameter of the layer 1 in the middle of the rope*)
		CDhg2ImpLayJu1_2: DINT:=0;
			(*hg 1 impulses to layer jump 1 to 2*)
		CDhg2ImpLayJu2_3: DINT:=0;
			(*hg 1 impulses to layer jump 2 to 3*)
		CDhg2ImpLayJu3_4: DINT:=0;
			(*hg 1 impulses to layer jump 3 to 4*)
		CDhg2ImpLayJu4_5: DINT:=0;
			(*hg 1 impulses to layer jump 4 to 5*)
		CDhg2ImpLayJu5_6: DINT:=0;
			(*hg 1 impulses to layer jump 5 to 6*)
		CDhg2ImpLayJu6_7: DINT:=0;
			(*hg 1 impulses to layer jump 6 to 7*)
	END_VAR
	VAR 
		LXinitOk: BOOL:=FALSE;
			(*init completed*)
		LXstart: BOOL:=FALSE;
			(*first scan completed*)
		LDvalueChaLay: DINT:=0;
			(*counter value by changing the layer x*)
		LDropeLenLay1: REAL:=0.0;
			(*rope lenght layer 1*)
		LDropeLenLay2: REAL:=0.0;
			(*rope lenght layer 2*)
		LDropeLenLay3: REAL:=0.0;
			(*rope lenght layer 3*)
		LDropeLenLay4: REAL:=0.0;
			(*rope lenght layer 4*)
		LDropeLenLay5: REAL:=0.0;
			(*rope lenght layer 5*)
		LDropeLenLay6: REAL:=0.0;
			(*rope lenght layer 6*)
		LDropeLenLay7: REAL:=0.0;
			(*rope lenght layer 7*)
		LDimpulsPerMeter: REAL:=0.0;
			(*impulses per meter*)
		LDdiameterLayer1: REAL:=0.0;
			(*diameter of the layer 1 in the middle of the rope*)
		LDdiameterLayer2: REAL:=0.0;
			(*diameter of the layer 2 in the middle of the rope*)
		LDdiameterLayer3: REAL:=0.0;
			(*diameter of the layer 3 in the middle of the rope*)
		LDdiameterLayer4: REAL:=0.0;
			(*diameter of the layer 4 in the middle of the rope*)
		LDdiameterLayer5: REAL:=0.0;
			(*diameter of the layer 5 in the middle of the rope*)
		LDdiameterLayer6: REAL:=0.0;
			(*diameter of the layer 6 in the middle of the rope*)
		LDdiameterLayer7: REAL:=0.0;
			(*diameter of the layer 7 in the middle of the rope*)
		LD_x: REAL:=0.0;
		CountSave1: CountSave;
		calculation1: ADropeLeCalcV011;
		calculation2: ADropeLeCalcV011;
		calculation3: ADropeLeCalcV011;
		calculation4: ADropeLeCalcV011;
		calculation5: ADropeLeCalcV011;
		calculation6: ADropeLeCalcV011;
		calculation7: ADropeLeCalcV011;
		Frequ1: Count2FreqFilt;
		CorrValue_Bool1: CorrValue_Bool;
		CorrValue_Real1: CorrValue_Real;
		CorrValue_Real2: CorrValue_Real;
		CorrValue_Real3: CorrValue_Real;
		CorrValue_Real4: CorrValue_Real;
		CorrValue_DInt1: CorrValue_DInt;
		CorrValue_DInt2: CorrValue_DInt;
		CorrValue_DInt3: CorrValue_DInt;
		CorrValue_DInt4: CorrValue_DInt;
		CorrValue_DInt5: CorrValue_DInt;
		CorrValue_DInt6: CorrValue_DInt;
	END_VAR
'FBD'
BODY
    WORKSPACE
        NETWORK_LIST_TYPE := NWTYPEFBD ;
        ACTIVE_NETWORK := 0 ;
    END_WORKSPACE
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_COMMENT,,init first time,1,1,27,2,);
B(B_VARIN,,LXinitOk,9,4,11,6,);
B(B_F,not,,11,3,16,6,);
B(B_JUMP,,init,16,4,18,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,protect correction value change while program activ,1,1,27,2,);
B(B_VAROUT,,MXhg2RopeLenMeas,23,6,25,8,);
B(B_F,sel,,18,5,23,10,);
B(B_VARIN,,CXhg2RopeLenMeas,16,7,18,9,);
B(B_VARIN,,MXhg2RopeLenMeas,16,8,18,10,);
B(B_VARIN,,IXentrySwiClosed,9,4,11,6,);
B(B_VARIN,,LXstart,9,5,11,7,);
B(B_F,@AND-2,,11,3,16,7,);
L(17,5,17,7);
L(17,7,18,7);
L(16,5,17,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VAROUT,,LXstart,11,1,13,3,);
B(B_VARIN,,TRUE,9,1,11,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_VARIN,,MXhg2RopeLenMeas,9,4,11,6,);
B(B_F,not,,11,3,16,6,);
B(B_COMMENT,,exit program when program not enabled,1,1,27,2,);
B(B_RETURN,,,16,4,18,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_COMMENT,,set impuls by changing layer,1,1,27,2,);
B(B_F,@MUL-2,,11,7,16,11,);
B(B_F,sel,,18,3,23,8,);
B(B_VAROUT,,LDvalueChaLay,23,4,25,6,);
B(B_VARIN,,MXchangeLayer1_2,16,4,18,6,);
B(B_VARIN,,LDvalueChaLay,16,5,18,7,);
B(B_VARIN,,CDhg2ImpLayJu1_2,9,8,11,10,);
B(B_VARIN,,4,9,9,11,11,);
L(17,7,18,7);
L(17,7,17,9);
L(16,9,17,9);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_F,sel,,18,1,23,6,);
B(B_VAROUT,,LDvalueChaLay,23,2,25,4,);
B(B_VARIN,,LDvalueChaLay,16,3,18,5,);
B(B_VARIN,,MXchangeLayer3_4,16,2,18,4,);
B(B_VARIN,,CDhg2ImpLayJu3_4,9,6,11,8,);
B(B_VARIN,,4,9,7,11,9,);
B(B_F,@MUL-2,,11,5,16,9,);
L(16,7,17,7);
L(17,5,17,7);
L(17,5,18,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_F,sel,,18,1,23,6,);
B(B_VAROUT,,LDvalueChaLay,23,2,25,4,);
B(B_VARIN,,LDvalueChaLay,16,3,18,5,);
B(B_VARIN,,MXchangeLayer5_6,16,2,18,4,);
B(B_VARIN,,CDhg2ImpLayJu5_6,9,6,11,8,);
B(B_VARIN,,4,9,7,11,9,);
B(B_F,@MUL-2,,11,5,16,9,);
L(16,7,17,7);
L(17,5,17,7);
L(17,5,18,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_VARIN,,MXchangeLayer1_2,9,8,11,10,);
B(B_VARIN,,MXchangeLayer3_4,9,9,11,11,);
B(B_VARIN,,MXchangeLayer5_6,9,10,11,12,);
B(B_F,@OR-3,,11,7,16,12,);
B(B_F,@AND-2,,18,6,23,10,);
B(B_VARIN,,MDhg2ImpulsValue,30,9,32,11,);
B(B_VARIN,,LDvalueChaLay,30,8,32,10,);
B(B_VARIN,,MXhg2EnChangeLay,15,5,17,7,);
B(B_COMMENT,,set rope lenght by changing layer,1,1,27,2,);
B(B_VARIN,,IDcounterHg2,30,6,32,8,);
B(B_FB,CountSave,CountSave1,32,5,43,11,);
B(B_VAROUT,,MDhg2ImpulsValue,43,6,45,8,);
L(16,9,18,9);
L(23,8,32,8);
L(17,8,18,8);
L(17,6,17,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 17 ;
        NETWORK_BODY
B(B_COMMENT,,layer 1,1,1,27,2,);
B(B_VARIN,,CDhg2GearRatio,25,9,27,11,);
B(B_VARIN,,MDhg2CircumfLay1,25,8,27,10,);
B(B_F,limit,,19,3,25,8,);
B(B_VAROUT,,LDimpulsPerMeter,55,12,57,14,);
B(B_F,sel,,50,11,55,16,);
B(B_VAROUT,,LDropeLenLay1,48,7,50,9,);
B(B_VARIN,,LDimpulsPerMeter,46,13,48,15,);
B(B_F,@LE-2,,19,11,24,15,);
B(B_FB,ADropeLeCalcV011,calculation1,27,6,48,12,);
B(B_F,@MUL-2,,11,9,16,13,);
B(B_VARIN,,CDhg2ImPIncSen,9,10,11,12,);
B(B_VARIN,,4.0,9,11,11,13,);
B(B_VARIN,,CDhg2ImpLayJu1_2,9,6,11,8,);
B(B_VARIN,,MDhg2ImpulsValue,16,3,18,5,);
B(B_F,@MUL-2,,11,5,16,9,);
B(B_VARIN,,4,9,7,11,9,);
L(26,5,26,8);
L(25,5,26,5);
L(18,6,19,6);
L(18,5,19,5);
L(49,9,49,15);
L(49,15,50,15);
L(24,13,50,13);
L(48,14,50,14);
L(17,7,17,14);
L(17,14,19,14);
L(18,5,18,13);
L(18,13,19,13);
L(17,7,19,7);
L(26,8,27,8);
L(48,9,49,9);
L(16,11,27,11);
L(16,7,17,7);
L(18,4,18,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 20 ;
        NETWORK_BODY
B(B_COMMENT,,layer 2,1,1,27,2,);
B(B_F,limit,,18,5,24,10,);
B(B_F,@SUB,,26,5,31,9,);
B(B_VARIN,,MDhg2ImpulsValue,16,7,18,9,);
B(B_VAROUT,,LDropeLenLay2,54,9,56,11,);
B(B_VARIN,,MDhg2CircumfLay2,29,10,31,12,);
B(B_VARIN,,CDhg2GearRatio,29,11,31,13,);
B(B_F,@GT-2,,33,14,38,18,);
B(B_VARIN,,0,31,16,33,18,);
B(B_F,sel,,56,14,61,19,);
B(B_VARIN,,LDimpulsPerMeter,52,16,54,18,);
B(B_VAROUT,,LDimpulsPerMeter,61,15,63,17,);
B(B_FB,ADropeLeCalcV011,calculation2,33,8,54,14,);
B(B_F,@MUL-2,,25,14,30,18,);
B(B_VARIN,,CDhg2ImPIncSen,23,15,25,17,);
B(B_VARIN,,4.0,23,16,25,18,);
B(B_F,@MUL-2,,13,9,18,13,);
B(B_VARIN,,CDhg2ImpLayJu2_3,11,10,13,12,);
B(B_VARIN,,4,11,11,13,13,);
B(B_F,@MUL-2,,13,3,18,7,);
B(B_VARIN,,4,11,5,13,7,);
B(B_VARIN,,CDhg2ImpLayJu1_2,11,4,13,6,);
L(31,7,32,7);
L(24,7,26,7);
L(25,8,26,8);
L(31,12,33,12);
L(31,13,33,13);
L(32,7,32,16);
L(32,16,33,16);
L(55,18,56,18);
L(54,17,56,17);
L(55,11,55,18);
L(38,16,56,16);
L(32,10,33,10);
L(31,11,33,11);
L(54,11,55,11);
L(31,13,31,16);
L(30,16,31,16);
L(18,9,18,11);
L(18,5,18,7);
L(18,5,25,5);
L(25,5,25,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 20 ;
        NETWORK_BODY
B(B_COMMENT,,layer 3,1,1,27,2,);
B(B_F,@SUB,,26,5,31,9,);
B(B_F,limit,,18,5,24,10,);
B(B_VARIN,,MDhg2ImpulsValue,16,7,18,9,);
B(B_VAROUT,,LDropeLenLay3,54,9,56,11,);
B(B_F,sel,,56,14,61,19,);
B(B_VARIN,,LDimpulsPerMeter,52,16,54,18,);
B(B_VAROUT,,LDimpulsPerMeter,61,15,63,17,);
B(B_F,@GT-2,,33,14,38,18,);
B(B_VARIN,,MDhg2CircumfLay3,29,10,31,12,);
B(B_VARIN,,CDhg2GearRatio,29,11,31,13,);
B(B_VARIN,,0,31,16,33,18,);
B(B_FB,ADropeLeCalcV011,calculation3,33,8,54,14,);
B(B_F,@MUL-2,,25,14,30,18,);
B(B_VARIN,,CDhg2ImPIncSen,23,15,25,17,);
B(B_VARIN,,4.0,23,16,25,18,);
B(B_F,@MUL-2,,13,9,18,13,);
B(B_F,@MUL-2,,13,3,18,7,);
B(B_VARIN,,CDhg2ImpLayJu2_3,11,4,13,6,);
B(B_VARIN,,CDhg2ImpLayJu3_4,11,10,13,12,);
B(B_VARIN,,4,11,11,13,13,);
B(B_VARIN,,4,11,5,13,7,);
L(31,7,32,7);
L(25,8,26,8);
L(24,7,26,7);
L(55,18,56,18);
L(54,17,56,17);
L(55,11,55,18);
L(38,16,56,16);
L(31,12,33,12);
L(31,13,33,13);
L(32,7,32,16);
L(32,16,33,16);
L(32,10,33,10);
L(31,11,33,11);
L(54,11,55,11);
L(31,13,31,16);
L(30,16,31,16);
L(18,9,18,11);
L(18,5,18,7);
L(18,5,25,5);
L(25,5,25,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 20 ;
        NETWORK_BODY
B(B_COMMENT,,layer 4,1,1,27,2,);
B(B_F,limit,,18,5,24,10,);
B(B_F,@SUB,,26,5,31,9,);
B(B_VARIN,,MDhg2ImpulsValue,16,7,18,9,);
B(B_VAROUT,,LDropeLenLay4,54,9,56,11,);
B(B_F,sel,,56,14,61,19,);
B(B_VARIN,,LDimpulsPerMeter,52,16,54,18,);
B(B_VAROUT,,LDimpulsPerMeter,61,15,63,17,);
B(B_F,@GT-2,,33,14,38,18,);
B(B_VARIN,,0,31,16,33,18,);
B(B_VARIN,,CDhg2GearRatio,29,11,31,13,);
B(B_VARIN,,MDhg2CircumfLay4,29,10,31,12,);
B(B_F,@MUL-2,,25,14,30,18,);
B(B_VARIN,,CDhg2ImPIncSen,23,15,25,17,);
B(B_VARIN,,4.0,23,16,25,18,);
B(B_FB,ADropeLeCalcV011,calculation4,33,8,54,14,);
B(B_F,@MUL-2,,13,3,18,7,);
B(B_F,@MUL-2,,13,9,18,13,);
B(B_VARIN,,4,11,5,13,7,);
B(B_VARIN,,CDhg2ImpLayJu3_4,11,4,13,6,);
B(B_VARIN,,CDhg2ImpLayJu4_5,11,10,13,12,);
B(B_VARIN,,4,11,11,13,13,);
L(31,7,32,7);
L(24,7,26,7);
L(25,8,26,8);
L(55,18,56,18);
L(54,17,56,17);
L(38,16,56,16);
L(55,11,55,18);
L(32,16,33,16);
L(32,7,32,16);
L(31,12,33,12);
L(31,13,33,13);
L(31,13,31,16);
L(30,16,31,16);
L(32,10,33,10);
L(31,11,33,11);
L(54,11,55,11);
L(18,5,18,7);
L(18,5,25,5);
L(25,5,25,8);
L(18,9,18,11);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 21 ;
        NETWORK_BODY
B(B_COMMENT,,layer 5,1,1,27,2,);
B(B_VARIN,,MDhg2ImpulsValue,16,7,18,9,);
B(B_F,limit,,18,5,24,10,);
B(B_F,@SUB,,26,5,31,9,);
B(B_VAROUT,,LDropeLenLay5,54,10,56,12,);
B(B_F,sel,,56,15,61,20,);
B(B_VARIN,,LDimpulsPerMeter,52,17,54,19,);
B(B_VAROUT,,LDimpulsPerMeter,61,16,63,18,);
B(B_F,@GT-2,,33,15,38,19,);
B(B_VARIN,,0,31,17,33,19,);
B(B_VARIN,,MDhg2CircumfLay5,29,11,31,13,);
B(B_VARIN,,CDhg2GearRatio,29,12,31,14,);
B(B_FB,ADropeLeCalcV011,calculation5,33,9,54,15,);
B(B_F,@MUL-2,,25,15,30,19,);
B(B_VARIN,,CDhg2ImPIncSen,23,16,25,18,);
B(B_VARIN,,4.0,23,17,25,19,);
B(B_F,@MUL-2,,13,9,18,13,);
B(B_F,@MUL-2,,13,3,18,7,);
B(B_VARIN,,CDhg2ImpLayJu4_5,11,4,13,6,);
B(B_VARIN,,CDhg2ImpLayJu5_6,11,10,13,12,);
B(B_VARIN,,4,11,11,13,13,);
B(B_VARIN,,4,11,5,13,7,);
L(31,7,32,7);
L(24,7,26,7);
L(25,8,26,8);
L(55,19,56,19);
L(54,18,56,18);
L(55,12,55,19);
L(38,17,56,17);
L(32,7,32,17);
L(32,17,33,17);
L(31,14,33,14);
L(31,13,33,13);
L(32,11,33,11);
L(31,12,33,12);
L(54,12,55,12);
L(31,14,31,17);
L(30,17,31,17);
L(25,5,25,8);
L(18,5,25,5);
L(18,5,18,7);
L(18,9,18,11);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 21 ;
        NETWORK_BODY
B(B_COMMENT,,layer 6,1,1,27,2,);
B(B_F,limit,,18,5,24,10,);
B(B_VARIN,,MDhg2ImpulsValue,16,7,18,9,);
B(B_F,@SUB,,26,5,31,9,);
B(B_VAROUT,,LDropeLenLay6,54,10,56,12,);
B(B_F,sel,,56,15,61,20,);
B(B_VARIN,,LDimpulsPerMeter,52,17,54,19,);
B(B_VAROUT,,LDimpulsPerMeter,61,16,63,18,);
B(B_F,@GT-2,,33,15,38,19,);
B(B_VARIN,,MDhg2CircumfLay6,29,11,31,13,);
B(B_VARIN,,CDhg2GearRatio,29,12,31,14,);
B(B_VARIN,,0,31,17,33,19,);
B(B_FB,ADropeLeCalcV011,calculation6,33,9,54,15,);
B(B_F,@MUL-2,,25,15,30,19,);
B(B_VARIN,,CDhg2ImPIncSen,23,16,25,18,);
B(B_VARIN,,4.0,23,17,25,19,);
B(B_F,@MUL-2,,13,9,18,13,);
B(B_F,@MUL-2,,13,3,18,7,);
B(B_VARIN,,CDhg2ImpLayJu5_6,11,4,13,6,);
B(B_VARIN,,4,11,5,13,7,);
B(B_VARIN,,4,11,11,13,13,);
B(B_VARIN,,CDhg2ImpLayJu6_7,11,10,13,12,);
L(31,7,32,7);
L(25,8,26,8);
L(24,7,26,7);
L(55,19,56,19);
L(54,18,56,18);
L(55,12,55,19);
L(38,17,56,17);
L(32,17,33,17);
L(32,7,32,17);
L(31,13,33,13);
L(31,14,33,14);
L(32,11,33,11);
L(31,12,33,12);
L(54,12,55,12);
L(31,14,31,17);
L(30,17,31,17);
L(18,9,18,11);
L(18,5,18,7);
L(18,5,25,5);
L(25,5,25,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 21 ;
        NETWORK_BODY
B(B_COMMENT,,layer 7,1,1,27,2,);
B(B_F,@SUB,,26,5,31,9,);
B(B_F,limit,,18,5,24,10,);
B(B_VARIN,,MDhg2ImpulsValue,15,7,17,9,);
B(B_VAROUT,,LDropeLenLay7,54,10,56,12,);
B(B_F,sel,,56,15,61,20,);
B(B_VARIN,,LDimpulsPerMeter,52,17,54,19,);
B(B_VAROUT,,LDimpulsPerMeter,61,16,63,18,);
B(B_F,@GT-2,,33,15,38,19,);
B(B_VARIN,,0,31,17,33,19,);
B(B_VARIN,,CDhg2GearRatio,29,12,31,14,);
B(B_VARIN,,MDhg2CircumfLay7,29,11,31,13,);
B(B_FB,ADropeLeCalcV011,calculation7,33,9,54,15,);
B(B_F,@MUL-2,,25,15,30,19,);
B(B_VARIN,,CDhg2ImPIncSen,23,16,25,18,);
B(B_VARIN,,4.0,23,17,25,19,);
B(B_F,@MUL-2,,13,3,18,7,);
B(B_VARIN,,CDhg2ImpLayJu6_7,11,4,13,6,);
B(B_VARIN,,4,11,5,13,7,);
L(31,7,32,7);
L(24,7,26,7);
L(25,8,26,8);
L(17,8,18,8);
L(17,8,17,9);
L(17,9,18,9);
L(55,19,56,19);
L(54,18,56,18);
L(55,12,55,19);
L(38,17,56,17);
L(31,13,33,13);
L(31,14,33,14);
L(32,7,32,17);
L(32,17,33,17);
L(32,11,33,11);
L(31,12,33,12);
L(54,12,55,12);
L(31,14,31,17);
L(30,17,31,17);
L(18,5,18,7);
L(18,5,25,5);
L(25,5,25,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_COMMENT,,rope on the winch,1,1,27,2,);
B(B_VARIN,,LDropeLenLay1,11,4,13,6,);
B(B_VARIN,,LDropeLenLay2,11,5,13,7,);
B(B_VARIN,,LDropeLenLay3,11,6,13,8,);
B(B_VARIN,,LDropeLenLay4,11,7,13,9,);
B(B_VARIN,,LDropeLenLay5,11,8,13,10,);
B(B_VARIN,,LDropeLenLay6,11,9,13,11,);
B(B_VARIN,,LDropeLenLay7,11,10,13,12,);
B(B_F,@ADD-7,,13,3,18,12,);
B(B_VAROUT,,MDhg2RopeLenWin,18,4,20,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 18 ;
        NETWORK_BODY
B(B_F,@OR-3,,13,3,18,8,);
B(B_VARIN,,MXchangeLayer1_2,11,4,13,6,);
B(B_VARIN,,MXchangeLayer3_4,11,5,13,7,);
B(B_VARIN,,MXchangeLayer5_6,11,6,13,8,);
B(B_F,@AND-2,,20,2,25,6,);
B(B_VARIN,,MXhg2EnChangeLay,17,1,19,3,);
B(B_F,sel,,20,10,25,15,);
B(B_VARIN,,MDropLenTaraHg2,18,12,20,14,);
B(B_VARIN,,MDhg2RopeLenWin,18,13,20,15,);
B(B_VAROUT,,MDropLenTaraHg2,32,10,34,12,);
B(B_VARIN,,0.0,24,15,26,17,);
B(B_F,sel,,27,9,32,14,);
B(B_F,@OR-2,,13,8,18,12,);
B(B_VARIN,,MXresRopeLenHg2,11,9,13,11,);
B(B_VARIN,,MXextResRopeHg2,11,10,13,12,);
L(18,5,20,5);
L(19,4,20,4);
L(19,2,19,4);
L(26,4,26,11);
L(25,4,26,4);
L(25,12,27,12);
L(26,13,27,13);
L(26,13,26,16);
L(26,11,27,11);
L(18,10,19,10);
L(19,10,19,12);
L(19,12,20,12);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_F,@SUB,,11,1,16,5,);
B(B_VARIN,,MDhg2RopeLenWin,9,2,11,4,);
B(B_VARIN,,MDropLenTaraHg2,9,3,11,5,);
B(B_VAROUT,,MDropeLenghtHg2,16,2,18,4,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,calculation of the speed of the rope in m/min,1,1,27,2,);
B(B_VARIN,,IDcounterHg2,9,5,11,7,);
B(B_VARIN,,T#0.2s,9,6,11,8,);
B(B_FB,Count2FreqFilt,Frequ1,11,4,23,8,);
B(B_F,@DIV,,25,4,30,8,);
B(B_F,@MUL-2,,32,4,37,8,);
B(B_VAROUT,,MDhg2RopeSpeed,37,5,39,7,);
B(B_VARIN,,60.0,29,8,31,10,);
B(B_VARIN,,LDimpulsPerMeter,22,8,24,10,);
L(30,6,32,6);
L(23,6,25,6);
L(24,7,25,7);
L(31,7,32,7);
L(31,7,31,9);
L(24,7,24,9);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_VARIN,,IXentrySwiClosed,9,3,11,5,);
B(B_COMMENT,,check if entry switch is opened,1,1,27,2,);
B(B_RETURN,,,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 19 ;
        NETWORK_BODY
B(B_COMMENT,,calculation of the circumference of the layers in the middle of the rope,1,1,56,3,);
B(B_F,@MUL-2,,19,4,24,8,);
B(B_F,@MUL-2,,19,8,24,12,);
B(B_F,@DIV,,26,8,31,12,);
B(B_VARIN,,4.0,23,12,25,14,);
B(B_F,sqrt,,40,4,45,7,);
B(B_F,@SUB,,33,4,38,8,);
B(B_COMMENT,,A = Wrz ( d_qdr - P_qdr / 4 ),47,6,59,7,);
B(B_F,@MUL-2,,47,8,52,12,);
B(B_VARIN,,11.0,45,10,47,12,);
B(B_F,@ADD-2,,54,8,59,12,);
B(B_VARIN,,CDhg2RopeDiamete,51,12,53,14,);
B(B_F,@DIV,,61,8,66,12,);
B(B_VAROUT,,LD_x,66,9,68,11,);
B(B_VARIN,,6.0,58,12,60,14,);
B(B_COMMENT,,D_2 = ( ( ( D_1 + 2 * A ) * 330 ) / 360 ) + ( ( ( D_1 + 2 * d ) * 30 ) / 360 ),30,14,58,15,);
B(B_COMMENT,,D_2 = D_1 + ( ( ( 11 * A ) + d ) / 6 ),30,16,45,17,);
B(B_COMMENT,,therefore:,24,16,29,17,);
B(B_COMMENT,,LD_x = ( ( ( 11 * A ) + d ) / 6),57,16,69,17,);
B(B_F,@MUL-2,,12,8,17,12,);
B(B_VARIN,,1.05,10,10,12,12,);
B(B_COMMENT,,105% = Pitch,11,12,18,13,);
B(B_VARIN,,CDhg2RopeDiamete,9,5,11,7,);
L(18,7,19,7);
L(18,10,18,11);
L(18,11,19,11);
L(24,10,26,10);
L(25,11,26,11);
L(25,11,25,13);
L(32,7,33,7);
L(32,7,32,10);
L(31,10,32,10);
L(24,6,33,6);
L(38,6,40,6);
L(45,6,46,6);
L(46,6,46,10);
L(46,10,47,10);
L(52,10,54,10);
L(53,11,54,11);
L(53,11,53,13);
L(59,10,61,10);
L(60,11,61,11);
L(60,11,60,13);
L(18,6,18,7);
L(11,10,12,10);
L(17,10,19,10);
L(11,6,11,10);
L(11,6,19,6);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_VARIN,,CDhg2Layer1Diame,9,3,11,5,);
B(B_COMMENT,,layer 1,1,1,27,2,);
B(B_VAROUT,,LDdiameterLayer1,11,3,13,5,);
B(B_F,@MUL-2,,12,5,17,9,);
B(B_VARIN,,PI,10,7,12,9,);
B(B_F,@DIV,,19,5,24,9,);
B(B_VARIN,,1000.0,16,9,18,11,);
B(B_VAROUT,,MDhg2CircumfLay1,24,6,26,8,);
L(11,4,11,7);
L(11,7,12,7);
L(18,8,19,8);
L(18,8,18,10);
L(17,7,19,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_COMMENT,,layer 2,1,1,27,2,);
B(B_VARIN,,LDdiameterLayer1,9,4,11,6,);
B(B_F,@ADD-2,,11,3,16,7,);
B(B_VARIN,,LD_x,9,5,11,7,);
B(B_VAROUT,,LDdiameterLayer2,17,4,19,6,);
B(B_F,@MUL-2,,18,6,23,10,);
B(B_VARIN,,PI,16,8,18,10,);
B(B_VAROUT,,MDhg2CircumfLay2,30,7,32,9,);
B(B_F,@DIV,,25,6,30,10,);
B(B_VARIN,,1000.0,22,10,24,12,);
L(16,5,17,5);
L(17,5,17,8);
L(17,8,18,8);
L(24,9,25,9);
L(24,9,24,11);
L(23,8,25,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_COMMENT,,layer 3,1,1,27,2,);
B(B_VARIN,,LDdiameterLayer2,9,4,11,6,);
B(B_F,@ADD-2,,11,3,16,7,);
B(B_VARIN,,LD_x,9,5,11,7,);
B(B_VAROUT,,LDdiameterLayer3,17,4,19,6,);
B(B_F,@MUL-2,,18,6,23,10,);
B(B_VARIN,,PI,16,8,18,10,);
B(B_VAROUT,,MDhg2CircumfLay3,30,7,32,9,);
B(B_F,@DIV,,25,6,30,10,);
B(B_VARIN,,1000.0,22,10,24,12,);
L(16,5,17,5);
L(17,5,17,8);
L(17,8,18,8);
L(24,9,25,9);
L(24,9,24,11);
L(23,8,25,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_COMMENT,,layer 4,1,1,27,2,);
B(B_VARIN,,LDdiameterLayer3,9,4,11,6,);
B(B_F,@ADD-2,,11,3,16,7,);
B(B_VARIN,,LD_x,9,5,11,7,);
B(B_VAROUT,,LDdiameterLayer4,17,4,19,6,);
B(B_F,@MUL-2,,18,6,23,10,);
B(B_VARIN,,PI,16,8,18,10,);
B(B_F,@DIV,,25,6,30,10,);
B(B_VARIN,,1000.0,22,10,24,12,);
B(B_VAROUT,,MDhg2CircumfLay4,30,7,32,9,);
L(16,5,17,5);
L(17,5,17,8);
L(17,8,18,8);
L(24,9,25,9);
L(24,9,24,11);
L(23,8,25,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_COMMENT,,layer 5,1,1,27,2,);
B(B_VARIN,,LDdiameterLayer4,9,4,11,6,);
B(B_F,@ADD-2,,11,3,16,7,);
B(B_VARIN,,LD_x,9,5,11,7,);
B(B_VAROUT,,LDdiameterLayer5,17,4,19,6,);
B(B_F,@MUL-2,,18,6,23,10,);
B(B_VARIN,,PI,16,8,18,10,);
B(B_F,@DIV,,25,6,30,10,);
B(B_VARIN,,1000.0,22,10,24,12,);
B(B_VAROUT,,MDhg2CircumfLay5,30,7,32,9,);
L(16,5,17,5);
L(17,5,17,8);
L(17,8,18,8);
L(24,9,25,9);
L(24,9,24,11);
L(23,8,25,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_COMMENT,,layer 6,1,1,27,2,);
B(B_VARIN,,LDdiameterLayer5,9,4,11,6,);
B(B_F,@ADD-2,,11,3,16,7,);
B(B_VARIN,,LD_x,9,5,11,7,);
B(B_VAROUT,,LDdiameterLayer6,17,4,19,6,);
B(B_F,@MUL-2,,18,6,23,10,);
B(B_VARIN,,PI,16,8,18,10,);
B(B_VAROUT,,MDhg2CircumfLay6,30,7,32,9,);
B(B_F,@DIV,,25,6,30,10,);
B(B_VARIN,,1000.0,22,10,24,12,);
L(16,5,17,5);
L(17,5,17,8);
L(17,8,18,8);
L(24,9,25,9);
L(24,9,24,11);
L(23,8,25,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 14 ;
        NETWORK_BODY
B(B_COMMENT,,layer 7,1,1,27,2,);
B(B_VARIN,,LDdiameterLayer6,9,4,11,6,);
B(B_F,@ADD-2,,11,3,16,7,);
B(B_VARIN,,LD_x,9,5,11,7,);
B(B_VAROUT,,LDdiameterLayer7,17,4,19,6,);
B(B_F,@MUL-2,,18,6,23,10,);
B(B_VARIN,,PI,16,8,18,10,);
B(B_VARIN,,1000.0,22,10,24,12,);
B(B_F,@DIV,,25,6,30,10,);
B(B_VAROUT,,MDhg2CircumfLay7,30,7,32,9,);
L(16,5,17,5);
L(17,5,17,8);
L(17,8,18,8);
L(24,9,25,9);
L(24,9,24,11);
L(23,8,25,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,set the impuls per layer or exit program!,1,1,27,2,);
B(B_VARIN,,IXentrySwiClosed,9,3,11,5,);
B(B_RETURN,,,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_COMMENT,,layer 1,1,3,28,4,);
B(B_FB,CorrValue_DInt,CorrValue_DInt1,11,6,23,12,);
B(B_VARIN,,CDhg2ImpLayJu1_2,9,10,11,12,);
B(B_VARIN,,10000000,9,9,11,11,);
B(B_VARIN,,0,9,8,11,10,);
B(B_VARIN,,13500,9,7,11,9,);
B(B_COMMENT,,set impulses of the winch,1,1,28,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 15 ;
        NETWORK_BODY
B(B_COMMENT,,layer 2,1,1,28,2,);
B(B_F,sel,,20,5,25,10,);
B(B_F,@LT-2,,13,3,18,7,);
B(B_VARIN,,28503,9,5,11,7,);
B(B_VARIN,,CDhg2ImpLayJu1_2,10,4,12,6,);
B(B_FB,CorrValue_DInt,CorrValue_DInt2,27,8,39,14,);
B(B_VARIN,,CDhg2ImpLayJu2_3,25,12,27,14,);
B(B_VARIN,,10000000,25,11,27,13,);
L(19,7,20,7);
L(19,5,19,7);
L(11,6,13,6);
L(12,8,20,8);
L(11,6,11,9);
L(11,9,20,9);
L(18,5,19,5);
L(26,10,27,10);
L(26,7,26,10);
L(25,7,26,7);
L(12,11,27,11);
L(12,5,12,11);
L(12,5,13,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 15 ;
        NETWORK_BODY
B(B_COMMENT,,layer 3,1,1,28,2,);
B(B_F,sel,,20,5,25,10,);
B(B_F,@LT-2,,13,3,18,7,);
B(B_VARIN,,43508,9,5,11,7,);
B(B_VARIN,,CDhg2ImpLayJu2_3,10,4,12,6,);
B(B_FB,CorrValue_DInt,CorrValue_DInt3,27,8,39,14,);
B(B_VARIN,,CDhg2ImpLayJu3_4,25,12,27,14,);
B(B_VARIN,,10000000,25,11,27,13,);
L(19,7,20,7);
L(19,5,19,7);
L(11,6,13,6);
L(12,8,20,8);
L(11,6,11,9);
L(11,9,20,9);
L(18,5,19,5);
L(26,10,27,10);
L(26,7,26,10);
L(25,7,26,7);
L(12,11,27,11);
L(12,5,12,11);
L(12,5,13,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 15 ;
        NETWORK_BODY
B(B_COMMENT,,layer 4,1,1,28,2,);
B(B_F,sel,,20,5,25,10,);
B(B_F,@LT-2,,13,3,18,7,);
B(B_VARIN,,58515,9,5,11,7,);
B(B_VARIN,,CDhg2ImpLayJu3_4,10,4,12,6,);
B(B_FB,CorrValue_DInt,CorrValue_DInt4,27,8,39,14,);
B(B_VARIN,,CDhg2ImpLayJu4_5,25,12,27,14,);
B(B_VARIN,,10000000,25,11,27,13,);
L(19,7,20,7);
L(19,5,19,7);
L(11,6,13,6);
L(12,8,20,8);
L(11,6,11,9);
L(11,9,20,9);
L(18,5,19,5);
L(26,10,27,10);
L(26,7,26,10);
L(25,7,26,7);
L(12,11,27,11);
L(12,5,12,11);
L(12,5,13,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 15 ;
        NETWORK_BODY
B(B_COMMENT,,layer 5,1,1,28,2,);
B(B_F,sel,,20,5,25,10,);
B(B_F,@LT-2,,13,3,18,7,);
B(B_VARIN,,73524,9,5,11,7,);
B(B_VARIN,,CDhg2ImpLayJu4_5,10,4,12,6,);
B(B_FB,CorrValue_DInt,CorrValue_DInt5,27,8,39,14,);
B(B_VARIN,,CDhg2ImpLayJu5_6,25,12,27,14,);
B(B_VARIN,,10000000,25,11,27,13,);
L(19,7,20,7);
L(19,5,19,7);
L(11,6,13,6);
L(12,8,20,8);
L(11,6,11,9);
L(11,9,20,9);
L(18,5,19,5);
L(26,10,27,10);
L(26,7,26,10);
L(25,7,26,7);
L(12,11,27,11);
L(12,5,12,11);
L(12,5,13,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 15 ;
        NETWORK_BODY
B(B_COMMENT,,layer 6,1,1,28,2,);
B(B_F,sel,,20,5,25,10,);
B(B_F,@LT-2,,13,3,18,7,);
B(B_VARIN,,88535,9,5,11,7,);
B(B_VARIN,,CDhg2ImpLayJu5_6,10,4,12,6,);
B(B_FB,CorrValue_DInt,CorrValue_DInt6,27,8,39,14,);
B(B_VARIN,,CDhg2ImpLayJu6_7,25,12,27,14,);
B(B_VARIN,,10000000,25,11,27,13,);
L(19,7,20,7);
L(19,5,19,7);
L(11,6,13,6);
L(12,8,20,8);
L(11,6,11,9);
L(11,9,20,9);
L(18,5,19,5);
L(26,10,27,10);
L(26,7,26,10);
L(25,7,26,7);
L(12,11,27,11);
L(12,5,12,11);
L(12,5,13,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,exit program,1,1,27,2,);
B(B_VARIN,,LXinitOk,9,3,11,5,);
B(B_RETURN,,,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL := init: ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_COMMENT,,init program,1,1,56,3,);
B(B_VARIN,,TRUE,9,4,11,6,);
B(B_VAROUT,,LXinitOk,11,4,13,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value rope lenght measuring hg 1 enabled,1,1,27,2,);
B(B_FB,CorrValue_Bool,CorrValue_Bool1,11,4,23,10,);
B(B_VARIN,,FALSE,9,5,11,7,);
B(B_VARIN,,FALSE,9,6,11,8,);
B(B_VARIN,,TRUE,9,7,11,9,);
B(B_VARIN,,CXhg2RopeLenMeas,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,set ratio from the winch to the incrementalsensor,1,1,27,2,);
B(B_FB,CorrValue_Real,CorrValue_Real1,11,4,23,10,);
B(B_VARIN,,CDhg2GearRatio,9,8,11,10,);
B(B_VARIN,,100.0,9,7,11,9,);
B(B_VARIN,,1.0,9,5,11,7,);
B(B_VARIN,,1.0,9,6,11,8,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,set impuls per rotation of the incrementalsensor,1,1,27,2,);
B(B_FB,CorrValue_Real,CorrValue_Real2,11,4,23,10,);
B(B_VARIN,,CDhg2ImPIncSen,9,8,11,10,);
B(B_VARIN,,5000.0,9,7,11,9,);
B(B_VARIN,,500.0,9,5,11,7,);
B(B_VARIN,,10.0,9,6,11,8,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_FB,CorrValue_Real,CorrValue_Real3,11,4,23,10,);
B(B_VARIN,,CDhg2RopeDiamete,9,8,11,10,);
B(B_VARIN,,100.0,9,7,11,9,);
B(B_VARIN,,28.0,9,5,11,7,);
B(B_VARIN,,1.0,9,6,11,8,);
B(B_COMMENT,,rope diameter,1,1,27,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_FB,CorrValue_Real,CorrValue_Real4,11,4,23,10,);
B(B_VARIN,,CDhg2Layer1Diame,9,8,11,10,);
B(B_VARIN,,2000.0,9,7,11,9,);
B(B_VARIN,,100.0,9,6,11,8,);
B(B_VARIN,,730.0,9,5,11,7,);
B(B_COMMENT,,diameter in layer 1 in the middle of the rope,1,1,27,2,);
        END_NETWORK_BODY
    END_NET_WORK
END_BODY
END_PROGRAM

PROGRAM ADhydrGrapV170
(*name of author: Manfred Schapler
version: 1.0
date: 10/97
modification:*)
(*name of author: Manfred Schapler
version: 1.0
date: 04/97
modification:*)
	VAR_EXTERNAL 
		ITXautoHoseWinch: BOOL:=FALSE;
			(*preselection automatic hose winch *)
		ITXleHoseWinchUp: BOOL:=FALSE;
			(*preselection left hose winch up*)
		ITXriHoseWinchUp: BOOL:=FALSE;
			(*preselection right hose winch up*)
		ITXleHoseWinchDn: BOOL:=FALSE;
			(*preselection left hose winch down*)
		ITXriHoseWinchDn: BOOL:=FALSE;
			(*preselection right hose winch down*)
		ITXgrabAdj1Out: BOOL:=FALSE;
			(*preselection grab adjustment 1 out*)
		ITXgrabAdj2Out: BOOL:=FALSE;
			(*preselection grab adjustment 2 out*)
		ITXgrabAdj1In: BOOL:=FALSE;
			(*preselection grab adjustment 1 in*)
		ITXgrabAdj2In: BOOL:=FALSE;
			(*preselection grab adjustment 2 in*)
		IWgrabSysPresP2: UINT:=0;
			(*P2 sys.press.vibrator/hammer/hydr.grab*)
		IWkeybX23Poti1: UINT:=0;
			(*keyboard X23 poti 1*)
		IWkeybX23Poti2: UINT:=0;
			(*keyboard X23 poti 2*)
		QTXautoHoseWinch: BOOL:=FALSE;
			(*enable automatic hose winch *)
		QTXleHoseWinchUp: BOOL:=FALSE;
			(*preselection left hose winch up*)
		QTXriHoseWinchUp: BOOL:=FALSE;
			(*preselection right hose winch up*)
		QTXleHoseWinchDn: BOOL:=FALSE;
			(*preselection left hose winch down*)
		QTXriHoseWinchDn: BOOL:=FALSE;
			(*preselection right hose winch down*)
		QTXgrabAdj1Out: BOOL:=FALSE;
			(*enable grab adjustment 1 out*)
		QTXgrabAdj2Out: BOOL:=FALSE;
			(*enable grab adjustment 2 out*)
		QTXgrabAdj1In: BOOL:=FALSE;
			(*enable grab adjustment 1 In*)
		QTXgrabAdj2In: BOOL:=FALSE;
			(*enable grab adjustment 2 In*)
		QTXaddVolCtrl: BOOL:=FALSE;
			(*enable additional hydraulic volume control *)
		QTXaddPowCtrl: BOOL:=FALSE;
			(*enable additional hydraulic power control *)
		QXlgBrake: BOOL:=FALSE;
			(*LG brake*)
		QXhoseDrumBrakRi: BOOL:=FALSE;
			(*release brake pressure / brake right hose winch LE*)
		QXhoseDrumBrakLe: BOOL:=FALSE;
			(*brake left hose winch LE*)
		QXhg1BrakeNormal: BOOL:=FALSE;
			(*HG 1 brake normal speed operation*)
		QXhg1BrakeFastSp: BOOL:=FALSE;
			(*HG 1 brake fast speed operation*)
		QXhg2BrakeNormal: BOOL:=FALSE;
			(*HG 2 brake normal speed operation*)
		QXhg2BrakeFastSp: BOOL:=FALSE;
			(*HG 2 brake fast speed operation*)
		QWgrabPressContr: UINT:=0;
			(*additional output: grab pressure control *)
		MXstopAllFunctio: BOOL:=FALSE;
			(*stop all excavator functions*)
		MXminEngineSpeed: BOOL:=FALSE;
			(*minimum engine speed reached*)
		MXassemblyOperat: BOOL:=FALSE;
			(*assembly operation*)
		MXengStarterActi: BOOL:=FALSE;
			(*engine starter activated*)
		MXaddHydrActive: BOOL:=FALSE;
			(*addittional hydraulics active*)
		MXjoyHyGrabPre: BOOL:=FALSE;
			(*ad hydraulic grab preselection on joystick*)
		MXenabGrabPresel: BOOL:=FALSE;
			(*ad polyp grab enable preselected*)
		MXgrabGlobalStop: BOOL:=FALSE;
			(*ad global stop polyp grab*)
		MXgrabSigClose: BOOL:=FALSE;
			(*ad grab close*)
		MXgrabSigOpen: BOOL:=FALSE;
			(*ad grab open*)
		MXgrabEnaPowStag: BOOL:=FALSE;
			(*enabel power stage hydr. grab*)
		MXjoyGrabSlewPre: BOOL:=FALSE;
			(*add. preselection polyp grab/conc. crusher slewing on Joystick *)
		MXexitHydrGrab: BOOL:=FALSE;
			(*exit add. hydraulic grab (concrete crusher)*)
		MXhydrGrabActive: BOOL:=FALSE;
			(*ad hydr. grab is active*)
		MXenabHyGrabOper: BOOL:=FALSE;
			(*enable hydr.Grab operation*)
		MXhydrGrab1Sect: BOOL:=FALSE;
			(*hydr. grab with only 1 ludv section*)
		MXenabHyGrabHose: BOOL:=FALSE;
			(*enable add. hydr. grab with hose winch *)
		MXhg1WinchStand: BOOL:=FALSE;
			(*HG 1 winch standing still*)
		MXhg2WinchStand: BOOL:=FALSE;
			(*HG 2 winch standing still*)
		MXhg1AnalSigPos: BOOL:=FALSE;
			(*hg1 analog signal positiv*)
		MXhg2AnalSigPos: BOOL:=FALSE;
			(*hg2 analog signal positiv*)
		MXlgAnalSigNeg: BOOL:=FALSE;
			(*lg analog signal negativ*)
		MXenabAutHoseWin: BOOL:=FALSE;
			(*add. hydraulic grab automatic hose winch*)
		MXjoyPolyGrOpen: BOOL:=FALSE;
			(*ad polyp grab open digital*)
		MXjoyPolyGrClose: BOOL:=FALSE;
			(*ad polyp grab close digital*)
		MXgrabPreJoySig: BOOL:=FALSE;
			(*preselection joy stick signal grab*)
		MXrelGrabValves: BOOL:=FALSE;
			(*release pumpe for grab valves*)
		MXpreGrabSlew: BOOL:=FALSE;
			(*preselection  polyp grab/conc. crusher slewing*)
		MXgrabEnJoySig: BOOL:=FALSE;
			(*grab enable joystick signal *)
		MX1LudvWorkSect: BOOL:=FALSE;
			(*only one ludv working section *)
		MWludvExtPresSig: UINT:=0;
			(*LUDV pump external pressure signal in %*)
		MDgrabJoySignal: REAL:=0.0;
			(*grab analog signal joystick +/-[%]*)
		MDratedEngSpeed: REAL:=0.0;
			(*rated engine speed in rpm*)
		MDpowerLimReduct: REAL:=0.0;
			(*maximum engine power regulator reduction to x [%]*)
		MDgrabSysPress: REAL:=0.0;
			(*hydraulic grab system pressure in bar*)
		MDgrJoySigSlew: REAL:=0.0;
			(*grab slewing analog signal joystick +/-[%]*)
		MDgrabPumpSignal: REAL:=0.0;
			(*hydraulic grab pump analog signal*)
		MDgrSlewPuSig: REAL:=0.0;
			(*grab slewing pump signal (joystick controlled) *)
		MDgrAd1PumpSig: REAL:=0.0;
			(*grab adjustment1 pump signal *)
		MDgrAd2PumpSig: REAL:=0.0;
			(*grab adjustment2 pump signal *)
		MDhoWiPumpSigOC: REAL:=0.0;
			(*hose winch pump signal (open circuit) *)
		MDhoWiPresSigOC: REAL:=0.0;
			(*hose winch pressure signal (open circuit) *)
		MDgrbPump1Signal: REAL:=0.0;
			(*grab analog signal pump 1 [%]*)
		MDgrbPump2Signal: REAL:=0.0;
			(*grab analog signal pump 2 [%]*)
	END_VAR
	VAR_EXTERNAL CONSTANT
		MSG_ERROR: UINT:=0;
	END_VAR
	VAR_EXTERNAL RETAIN
		MRgrab1VolOpen: REAL:=0.0;
			(*grab 1 volume open*)
		MRgrab1VolClose: REAL:=0.0;
			(*grab 1 volume close*)
	END_VAR
	VAR_EXTERNAL CONSTANT RETAIN
		CXadHydrGrab: BOOL:=FALSE;
			(*additional device hydraulic grab control*)
		CXadHydrGrabHose: BOOL:=FALSE;
			(*add. device hydraulic grab with hose winch*)
		CXhydrGrab1Sect: BOOL:=FALSE;
			(*hydr. grab with only 1 ludv section*)
		CXpolyGrabDigOCl: BOOL:=FALSE;
			(*poly grab digital open/close (no slewing possible)*)
		CWgrabPresMaxClo: UINT:=0;
			(*max. current pressure control grab close*)
		CWgrabPresMaxOpe: UINT:=0;
			(*max. current pressure control grab open*)
		CWgrabPresMinCur: UINT:=0;
			(*min. current pressure control grab open / close*)
		CWp1MaxValue: UINT:=0;
			(*p1 ludv section max. value [l/min]*)
		CWp1MinCurValveB: UINT:=0;
			(*p1 ludv section min.current (B side) main*)
		CWp1MaxCurValveB: UINT:=0;
			(*p1 ludv section max.current (B side) main*)
		CWp1cur50liter: UINT:=0;
			(*p1 ludv section current for 50l/min*)
		CWp1cur100liter: UINT:=0;
			(*p1 ludv section current for 100l/min*)
		CWp1cur150liter: UINT:=0;
			(*p1 ludv section current for 150l/min*)
		CWp1cur200liter: UINT:=0;
			(*p1 ludv section current for 200l/min*)
		CWp1cur250liter: UINT:=0;
			(*p1 ludv section current for 250l/min*)
		CWp1cur300liter: UINT:=0;
			(*p1 ludv section current for 300l/min*)
		CWp2MaxValue: UINT:=0;
			(*p2 ludv section max. value [l/min]*)
		CWp2MinCurValveB: UINT:=0;
			(*p1 ludv section min.current (B side) main*)
		CWp2MaxCurValveB: UINT:=0;
			(*p1 ludv section max.current (B side) main*)
		CWp2cur50liter: UINT:=0;
			(*p2 ludv section current for 50l/min*)
		CWp2cur100liter: UINT:=0;
			(*p2 ludv section current for 100l/min*)
		CWp2cur150liter: UINT:=0;
			(*p2 ludv section current for 150l/min*)
		CWp2cur200liter: UINT:=0;
			(*p2 ludv section current for 200l/min*)
		CWp2cur250liter: UINT:=0;
			(*p2 ludv section current for 250l/min*)
		CWp2cur300liter: UINT:=0;
			(*p2 ludv section current for 300l/min*)
		CWgrabCloStoPres: UINT:=0;
			(*grab close pressure [bar]*)
		CWgrabOpeStoPres: UINT:=0;
			(*grab open pressure [bar]*)
		CWludvPressure: UINT:=0;
			(*ludv pump pressure [bar]*)
		CDgrabIntTimeUp: REAL:=0.0;
			(*ad grab integrator rising time*)
		CDgrabIntTimeDn: REAL:=0.0;
			(*ad grab integrator falling time*)
		CDgrabPresLimOpe: REAL:=0.0;
			(*grab open  threshold pressure limit*)
		CDgrabFilterTime: REAL:=0.0;
			(*add. grab: delay time pressure limit open/close *)
		CDgrabPresIntUp: REAL:=0.0;
			(*grab open integrated signal LUDV*)
		CDgrabPresLimClo: REAL:=0.0;
			(*grab close threshold pressure limit*)
		CDludvLeakOilSig: REAL:=0.0;
			(*ludv leakoil or pressure comp. signal*)
		CDgrSlewLimitSig: REAL:=0.0;
			(*grab slewing limitation signal*)
		CDgrAd1LimitSig: REAL:=0.0;
			(*grab adjustment 1 limitation signal *)
		CDgrAd2LimitSig: REAL:=0.0;
			(*grab adjustment 2 limitation signal *)
		CDgrHoWiAutLiSig: REAL:=0.0;
			(*grab hose winch automatic limitation signal*)
		CDgrHoWiManLiSig: REAL:=0.0;
			(*grab hose winch manual limitation signal*)
		CDgrHoWiLoPreSig: REAL:=0.0;
			(*grab hose winch low pressure signal *)
		CDgrHoWiHiPreSig: REAL:=0.0;
			(*grab hose winch high pressure signal *)
		CDengSpPumpRed: REAL:=0.0;
			(*engine speed for pump reduction [U/min]*)
	END_VAR
	VAR 
		LXinitOk: BOOL:=FALSE;
			(*init completed*)
		LXstart: BOOL:=FALSE;
		LXSignInZero: BOOL:=FALSE;
		LXgrabLocStopOpe: BOOL:=FALSE;
		LXgrabLocStopClo: BOOL:=FALSE;
		LXgrabPumpOpen: BOOL:=FALSE;
		LXgrabPumpClose: BOOL:=FALSE;
		LXhydrGrabActive: BOOL:=FALSE;
		LXreleaGrabOpClo: BOOL:=FALSE;
		LXhoseWinManLift: BOOL:=FALSE;
		LXhoseWinManLow: BOOL:=FALSE;
		LXhoseWinHighPr: BOOL:=FALSE;
		LXhoseWinAutGrab: BOOL:=FALSE;
		LXgrSlewPumpAct: BOOL:=FALSE;
		LXgrSlewPumpZero: BOOL:=FALSE;
		LXgrAd1PumpAct: BOOL:=FALSE;
		LXgrAd2PumpAct: BOOL:=FALSE;
		LXgrAd1PumpZero: BOOL:=FALSE;
		LXgrAd2PumpZero: BOOL:=FALSE;
		LXgrHoWiPumpAct: BOOL:=FALSE;
		LXgrHoWiPumpZero: BOOL:=FALSE;
		LDanalogSignal: REAL:=0.0;
		LDanalSigPumpLim: REAL:=0.0;
		LDanaSigPresCont: REAL:=0.0;
		LDgrabPresIntSig: REAL:=0.0;
		LDgrabStoVolOpen: REAL:=0.0;
		LDgrabStoVolClos: REAL:=0.0;
		LDgrabPresLimOpe: REAL:=0.0;
		LDgrabPresLimClo: REAL:=0.0;
		LDx23Poti1: REAL:=0.0;
		LDx23Poti2: REAL:=0.0;
		LDp1MaxValue: REAL:=0.0;
		LDp2MaxValue: REAL:=0.0;
		LDgrabStoreVol: REAL:=0.0;
		LDcalcCurrent1: REAL:=0.0;
		LDcalcCurrent2: REAL:=0.0;
		LDcalcComp1: REAL:=0.0;
		LDcalcComp2: REAL:=0.0;
		LDcalcVol1: REAL:=0.0;
		LDcalcVol2: REAL:=0.0;
		LDgrAd1AnalSig: REAL:=0.0;
		LDgrAd2AnalSig: REAL:=0.0;
		LDgrHoWiLiSigOut: REAL:=0.0;
		LDgrHoWiAnalSig: REAL:=0.0;
		RS1: RS;
		RS2: RS;
		RS3: RS;
		RS4: RS;
		RS6: RS;
		SR1: SR;
		SR2: SR;
		R_TRIG1: R_TRIG;
		R_TRIG4: R_TRIG;
		F_TRIG1: F_TRIG;
		TON2: TON;
		TON3: TON;
		PowerStage1: PowerStage;
		ScaleAI1: ScaleAI;
		Message1: MsgRealReal;
		Message2: MsgRealReal;
		CorrValue_Bool1: CorrValue_Bool;
		CorrValue_Bool2: CorrValue_Bool;
		CorrValue_Bool3: CorrValue_Bool;
		CorrValue_Bool4: CorrValue_Bool;
		CorrValue_UInt1: CorrValue_UInt;
		CorrValue_UInt2: CorrValue_UInt;
		CorrValue_UInt3: CorrValue_UInt;
		CorrValue_UInt4: CorrValue_UInt;
		CorrValue_UInt5: CorrValue_UInt;
		CorrValue_Real1: CorrValue_Real;
		CorrValue_Real2: CorrValue_Real;
		CorrValue_Real3: CorrValue_Real;
		CorrValue_Real4: CorrValue_Real;
		CorrValue_Real5: CorrValue_Real;
		CorrValue_Real6: CorrValue_Real;
		CorrValue_Real7: CorrValue_Real;
		CorrValue_Real8: CorrValue_Real;
		CorrValue_Real9: CorrValue_Real;
		CorrValue_Real10: CorrValue_Real;
		CorrValue_Real11: CorrValue_Real;
		CorrValue_Real12: CorrValue_Real;
		CorrValue_Real13: CorrValue_Real;
		digital1: FB_anaCylDigV010;
		ADcalculateQ1: ADcalculateQV024;
		ADcalculateQ2: ADcalculateQV024;
		Integrator1: Integrator;
		Integrator2: Integrator;
		Integrator3: Integrator;
		analog1: FB_anaCylAnaV011;
		analog2: FB_anaCylAnaV011;
		analog3: FB_anaCylAnaV011;
		analog4: FB_anaCylAnaV011;
	END_VAR
'FBD'
BODY
    WORKSPACE
        NETWORK_LIST_TYPE := NWTYPEFBD ;
        ACTIVE_NETWORK := 0 ;
    END_WORKSPACE
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_COMMENT,,init first time,1,1,27,2,);
B(B_F,not,,11,3,16,6,);
B(B_JUMP,,init,16,4,18,6,);
B(B_VARIN,,LXinitOk,9,4,11,6,);
B(B_COMMENT,,Polypgreifer~ Betonbeißer ~ ,29,1,58,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,protect correction value change while program activ,1,1,27,2,);
B(B_F,sel,,11,5,16,10,);
B(B_VARIN,,CXhydrGrab1Sect,9,7,11,9,);
B(B_VARIN,,MXhydrGrab1Sect,9,8,11,10,);
B(B_VARIN,,LXstart,9,6,11,8,);
B(B_VAROUT,,MXhydrGrab1Sect,22,5,24,7,);
B(B_VARIN,,MX1LudvWorkSect,15,3,17,5,);
B(B_F,@OR-2,,17,4,22,8,);
L(16,7,17,7);
L(17,4,17,6);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_VARIN,,CXadHydrGrab,9,4,11,6,);
B(B_VARIN,,CXadHydrGrabHose,9,5,11,7,);
B(B_F,@AND-2,,11,3,16,7,NN);
B(B_RETURN,,,16,4,18,6,);
B(B_COMMENT,,exit programm when hydr. grab is not preselected,1,1,27,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VAROUT,,LXstart,11,1,13,3,);
B(B_VARIN,,TRUE,9,1,11,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_COMMENT,,jump to exit when hydr. grab is not activ,1,1,27,2,);
B(B_VARIN,,LXhydrGrabActive,21,9,23,11,);
B(B_F,@AND-2,,23,7,28,11,0N);
B(B_F,@OR-2,,16,5,21,9,N);
B(B_JUMP,,exit,28,8,30,10,);
B(B_VARIN,,MXexitHydrGrab,14,7,16,9,);
B(B_VARIN,,MXenabHyGrabOper,9,4,11,6,);
B(B_VARIN,,MXenabHyGrabHose,9,5,11,7,);
B(B_F,@OR-2,,11,3,16,7,);
L(21,7,22,7);
L(22,7,22,9);
L(22,9,23,9);
L(16,5,16,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 23 ;
        NETWORK_BODY
B(B_COMMENT,,scale system pressure,1,1,27,2,);
B(B_VARIN,,IWgrabSysPresP2,9,5,11,7,);
B(B_FB,ScaleAI,ScaleAI1,11,4,19,9,);
B(B_VARIN,,600.0,9,6,11,8,);
B(B_VARIN,,MSG_ERROR,17,11,19,13,);
B(B_VARIN,,178,17,9,19,11,);
B(B_FB,SR,SR1,26,16,31,20,0N);
B(B_F,@AND-2,,21,16,26,20,0N);
B(B_VARIN,,MXengStarterActi,17,18,19,20,);
B(B_VARIN,,177,36,16,38,18,);
B(B_VARIN,,MSG_ERROR,36,18,38,20,);
B(B_FB,MsgRealReal,Message1,22,8,31,15,);
B(B_FB,MsgRealReal,Message2,38,15,47,22,);
B(B_VAROUT,,MDgrabSysPress,19,5,21,7,);
L(19,7,21,7);
L(19,8,20,8);
L(21,7,21,11);
L(21,11,22,11);
L(19,10,22,10);
L(19,12,22,12);
L(20,18,21,18);
L(19,19,21,19);
L(20,20,26,20);
L(26,19,26,20);
L(31,18,38,18);
L(20,8,20,20);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 14 ;
        NETWORK_BODY
B(B_COMMENT,,scale analog signals from x23 potis:  ø^(1000/1000)*90+10=LDx23Poti1,1,1,27,3,);
B(B_VARIN,,IWkeybX23Poti1,9,5,11,7,);
B(B_F,uint_to_real,,11,4,22,7,);
B(B_F,@DIV,,24,4,29,8,);
B(B_VARIN,,1000.0,21,7,23,9,);
B(B_F,@SUB,,24,8,29,12,);
B(B_VARIN,,100.0,22,9,24,11,);
B(B_F,to_real,,13,9,20,12,);
B(B_VARIN,,10.0,11,10,13,12,);
B(B_F,@MUL-2,,31,4,36,8,);
B(B_F,@ADD-2,,38,4,43,8,);
B(B_VAROUT,,LDx23Poti1,43,5,45,7,);
B(B_COMMENT,,10-100%,44,7,51,8,);
L(22,6,24,6);
L(23,7,23,8);
L(23,7,24,7);
L(20,11,24,11);
L(29,10,30,10);
L(30,7,30,10);
L(30,7,31,7);
L(29,6,31,6);
L(37,7,38,7);
L(37,7,37,13);
L(22,13,37,13);
L(22,11,22,13);
L(36,6,38,6);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_F,uint_to_real,,11,1,22,4,);
B(B_F,@DIV,,24,1,29,5,);
B(B_VARIN,,1000.0,21,4,23,6,);
B(B_VARIN,,IWkeybX23Poti2,9,2,11,4,);
B(B_F,@SUB,,24,5,29,9,);
B(B_VARIN,,100.0,22,6,24,8,);
B(B_F,to_real,,13,6,20,9,);
B(B_VARIN,,10.0,11,7,13,9,);
B(B_F,@MUL-2,,31,1,36,5,);
B(B_F,@ADD-2,,38,1,43,5,);
B(B_VAROUT,,LDx23Poti2,43,2,45,4,);
B(B_COMMENT,,10-100%,44,4,51,5,);
L(22,3,24,3);
L(23,4,23,5);
L(23,4,24,4);
L(20,8,24,8);
L(29,7,30,7);
L(22,8,22,10);
L(29,3,31,3);
L(36,3,38,3);
L(30,4,31,4);
L(30,4,30,7);
L(22,10,37,10);
L(37,4,37,10);
L(37,4,38,4);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_VARIN,,MRgrab1VolOpen,9,3,11,5,);
B(B_VAROUT,,LDgrabStoVolOpen,11,3,13,5,);
B(B_COMMENT,,adjusted working volume ,1,1,27,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_VARIN,,MRgrab1VolClose,9,3,11,5,);
B(B_VAROUT,,LDgrabStoVolClos,11,3,13,5,);
B(B_COMMENT,,adjusted working volume,1,1,27,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_VARIN,,CWp1MaxValue,9,4,11,6,);
B(B_F,uint_to_real,,11,3,22,6,);
B(B_VAROUT,,LDp1MaxValue,22,4,24,6,);
B(B_COMMENT,,maximum oil value over ludv section ,1,1,27,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 5 ;
        NETWORK_BODY
B(B_VARIN,,CWp2MaxValue,9,2,11,4,);
B(B_F,uint_to_real,,11,1,22,4,);
B(B_VAROUT,,LDp2MaxValue,22,2,24,4,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 19 ;
        NETWORK_BODY
B(B_F,@AND-3,,24,3,29,8,N);
B(B_COMMENT,,enable grab preselection,1,1,27,2,);
B(B_FB,SR,SR2,37,3,42,7,);
B(B_F,@OR-4,,30,10,35,16,N00N);
B(B_VARIN,,LXSignInZero,21,13,23,15,);
B(B_F,@AND-2,,23,11,28,15,);
B(B_VARIN,,MXexitHydrGrab,27,15,29,17,);
B(B_VARIN,,MXgrabEnJoySig,28,16,30,18,);
B(B_VAROUT,,MXenabGrabPresel,42,4,44,6,);
B(B_VARIN,,MXenabGrabPresel,22,3,24,5,);
B(B_VARIN,,MXassemblyOperat,14,7,16,9,);
B(B_VARIN,,MXaddHydrActive,14,8,16,10,);
B(B_F,@OR-2,,11,4,16,8,);
B(B_VARIN,,MXenabHyGrabOper,9,5,11,7,);
B(B_VARIN,,MXenabHyGrabHose,9,6,11,8,);
B(B_F,@AND-3,,16,5,21,10,0NN);
B(B_FB,R_TRIG,R_TRIG1,14,11,21,14,);
B(B_VARIN,,MXjoyHyGrabPre,12,12,14,14,);
B(B_VAROUT,,MXgrabPreJoySig,42,5,44,7,);
L(22,6,24,6);
L(23,7,24,7);
L(29,11,29,12);
L(29,14,30,14);
L(36,6,36,12);
L(29,5,37,5);
L(36,6,37,6);
L(29,12,30,12);
L(35,12,36,12);
L(22,6,22,13);
L(22,13,23,13);
L(28,13,30,13);
L(29,14,29,16);
L(30,15,30,17);
L(23,7,23,11);
L(21,7,23,7);
L(16,6,16,7);
L(24,4,24,5);
L(21,13,22,13);
L(23,11,29,11);
L(42,5,42,6);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_VARIN,,MXgrabPreJoySig,9,4,11,6,);
B(B_VARIN,,MXgrabEnJoySig,9,5,11,7,);
B(B_F,@AND-2,,11,3,16,7,);
B(B_COMMENT,,enable drilling drive preselected,1,1,27,2,);
B(B_VAROUT,,LXreleaGrabOpClo,16,4,18,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 20 ;
        NETWORK_BODY
B(B_FB,F_TRIG,F_TRIG1,14,3,21,6,);
B(B_F,sel,,14,6,19,11,);
B(B_VAROUT,,QTXaddVolCtrl,27,6,29,8,);
B(B_COMMENT,,VRM verwendet die gleiche LED,30,3,46,4,);
B(B_VAROUT,,QTXaddPowCtrl,27,13,29,15,);
B(B_F,sel,,22,5,27,10,);
B(B_F,sel,,22,12,27,17,);
B(B_VARIN,,FALSE,18,17,20,19,);
B(B_F,sel,,14,13,19,18,);
B(B_VARIN,,TRUE,10,9,12,11,);
B(B_VARIN,,LXreleaGrabOpClo,11,4,13,6,);
B(B_VARIN,,QTXaddVolCtrl,10,8,12,10,);
B(B_VARIN,,QTXaddPowCtrl,9,15,11,17,);
B(B_COMMENT,,poti indication on keyboard X23,1,1,27,2,);
L(19,8,22,8);
L(21,5,21,14);
L(21,14,22,14);
L(21,7,22,7);
L(20,9,22,9);
L(20,16,22,16);
L(20,9,20,18);
L(19,15,22,15);
L(12,10,12,17);
L(12,17,14,17);
L(13,5,14,5);
L(13,5,13,15);
L(13,15,14,15);
L(13,8,14,8);
L(12,9,14,9);
L(12,10,14,10);
L(11,16,14,16);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 27 ;
        NETWORK_BODY
B(B_COMMENT,,analog signal selector and stop grab cylinder,3,1,29,2,);
B(B_F,sel,,32,9,37,14,);
B(B_F,@GT-2,,32,14,37,18,);
B(B_F,@LT-2,,32,18,37,22,);
B(B_VAROUT,,MXgrabSigClose,37,15,39,17,);
B(B_VAROUT,,MXgrabSigOpen,37,19,39,21,);
B(B_VARIN,,0.0,29,20,31,22,);
B(B_F,@OR-2,,25,6,30,10,);
B(B_F,@AND-2,,18,7,23,11,0N);
B(B_F,@AND-2,,18,3,23,7,0N);
B(B_VARIN,,MXgrabSigOpen,16,5,18,7,);
B(B_VARIN,,LXgrabLocStopOpe,16,4,18,6,);
B(B_VARIN,,LXgrabLocStopClo,16,8,18,10,);
B(B_VARIN,,MXgrabSigClose,16,9,18,11,);
B(B_VARIN,,LDx23Poti1,30,3,32,5,);
B(B_F,@DIV,,32,2,37,6,);
B(B_VARIN,,100.0,30,4,32,6,);
B(B_F,@MUL-2,,39,8,44,12,);
B(B_VAROUT,,LDanalogSignal,44,9,46,11,);
B(B_F,sel,,23,16,28,21,);
B(B_VARIN,,CXpolyGrabDigOCl,16,12,18,14,);
B(B_F,@AND-2,,18,11,23,15,);
B(B_VARIN,,MXjoyPolyGrClose,11,16,13,18,);
B(B_F,@XOR-2,,13,14,18,18,);
B(B_VARIN,,MXjoyPolyGrOpen,11,15,13,17,);
B(B_VARIN,,MDgrabJoySignal,21,18,23,20,);
B(B_F,sel,,18,20,23,25,);
B(B_VARIN,,100.0,16,22,18,24,);
B(B_VARIN,,MXjoyPolyGrOpen,16,21,18,23,);
B(B_F,to_real,,11,23,18,26,);
B(B_VARIN,,-100.0,9,24,11,26,);
L(30,20,32,20);
L(31,8,31,11);
L(31,11,32,11);
L(31,13,31,21);
L(31,21,32,21);
L(31,17,32,17);
L(31,13,32,13);
L(30,12,30,20);
L(30,16,32,16);
L(23,5,24,5);
L(24,5,24,8);
L(24,8,25,8);
L(23,9,25,9);
L(30,8,31,8);
L(37,4,38,4);
L(38,4,38,10);
L(37,11,39,11);
L(38,10,39,10);
L(18,14,18,16);
L(23,13,23,18);
L(30,12,32,12);
L(28,18,30,18);
L(18,24,18,25);
L(23,20,23,22);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_COMMENT,,digital logic grab cylinder,1,1,27,2,);
B(B_VARIN,,MXgrabSigClose,9,4,11,6,);
B(B_VARIN,,MXgrabSigOpen,9,5,11,7,);
B(B_VARIN,,MXgrabGlobalStop,9,6,11,8,);
B(B_VARIN,,TRUE,9,7,11,9,);
B(B_VARIN,,TRUE,9,8,11,10,);
B(B_VAROUT,,LXgrabLocStopClo,34,5,36,7,);
B(B_VAROUT,,LXgrabLocStopOpe,34,6,36,8,);
B(B_FB,FB_anaCylDigV010,digital1,11,3,34,12,);
B(B_VARIN,,LXSignInZero,9,10,11,12,);
B(B_VARIN,,MXstopAllFunctio,9,9,11,11,);
B(B_VAROUT,,MXgrabEnaPowStag,34,4,36,6,);
B(B_VAROUT,,MXhydrGrabActive,34,3,36,5,);
L(34,4,34,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 15 ;
        NETWORK_BODY
B(B_VARIN,,900.0,9,4,11,6,);
B(B_VARIN,,0.5,9,5,11,7,);
B(B_VARIN,,CDengSpPumpRed,9,6,11,8,);
B(B_VARIN,,1.0,9,7,11,9,);
B(B_VARIN,,MDratedEngSpeed,9,8,11,10,);
B(B_VARIN,,0.5,9,9,11,11,);
B(B_VARIN,,1.0,9,10,11,12,);
B(B_F,GPkx_dV010,,11,3,20,12,);
B(B_COMMENT,,900 U/min 50% limitationø^1400 U/min 0% limitation,29,1,44,3,);
B(B_COMMENT,,signal limitation in consideration to the engine speed,1,1,27,2,);
B(B_VAROUT,,LDanalSigPumpLim,27,4,29,6,);
B(B_F,@MUL-2,,22,3,27,7,);
B(B_VARIN,,LDanalogSignal,19,12,21,14,);
L(21,6,22,6);
L(20,5,22,5);
L(21,6,21,13);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_VAROUT,,MDgrabPumpSignal,20,6,22,8,);
B(B_FB,Integrator,Integrator1,11,3,20,9,);
B(B_VARIN,,TRUE,9,4,11,6,);
B(B_VARIN,,CDgrabIntTimeUp,9,6,11,8,);
B(B_VARIN,,LDanalSigPumpLim,9,5,11,7,);
B(B_VARIN,,CDgrabIntTimeDn,9,7,11,9,);
B(B_F,EQ_R,,20,2,25,6,);
B(B_VAROUT,,LXSignInZero,25,3,27,5,);
B(B_VARIN,,0.0,18,1,20,3,);
L(20,5,20,7);
L(20,2,20,4);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_F,@GT-2,,13,3,18,7,);
B(B_VARIN,,0.0,9,5,11,7,);
B(B_F,@LT-2,,13,7,18,11,);
B(B_COMMENT,,pump signal close or open,1,1,27,2,);
B(B_VAROUT,,LXgrabPumpClose,18,4,20,6,);
B(B_VAROUT,,LXgrabPumpOpen,18,8,20,10,);
B(B_VARIN,,MDgrabPumpSignal,10,4,12,6,);
L(11,6,13,6);
L(12,9,13,9);
L(11,10,13,10);
L(12,5,12,9);
L(11,6,11,10);
L(12,5,13,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_F,sel,,11,3,16,8,);
B(B_VARIN,,LXgrabPumpClose,9,4,11,6,);
B(B_VARIN,,LDgrabStoVolOpen,9,5,11,7,);
B(B_VARIN,,LDgrabStoVolClos,9,6,11,8,);
B(B_VAROUT,,LDgrabStoreVol,16,4,18,6,);
B(B_COMMENT,,volume control depend on open or close,1,1,27,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 28 ;
        NETWORK_BODY
B(B_VARIN,,CWp2cur50liter,19,11,21,13,);
B(B_VARIN,,CWp2cur100liter,19,12,21,14,);
B(B_VARIN,,CWp2cur150liter,19,13,21,15,);
B(B_VARIN,,CWp2cur200liter,19,14,21,16,);
B(B_VARIN,,CWp2cur250liter,19,15,21,17,);
B(B_VARIN,,CWp2cur300liter,19,16,21,18,);
B(B_VARIN,,CWp2MinCurValveB,19,10,21,12,);
B(B_VARIN,,LDp2MaxValue,19,8,21,10,);
B(B_VARIN,,MDgrabPumpSignal,19,9,21,11,);
B(B_VAROUT,,LDcalcCurrent2,39,7,41,9,);
B(B_VAROUT,,MDgrbPump2Signal,39,8,41,10,);
B(B_VAROUT,,LDcalcComp2,39,9,41,11,);
B(B_VARIN,,CWp2MaxCurValveB,19,21,21,23,);
B(B_VARIN,,MDgrabSysPress,19,22,21,24,);
B(B_VARIN,,CDludvLeakOilSig,19,23,21,25,);
B(B_VAROUT,,LDcalcVol2,39,10,41,12,);
B(B_F,sel,,16,1,21,6,N);
B(B_F,@DIV,,11,4,16,8,);
B(B_VARIN,,2.0,9,6,11,8,);
B(B_VARIN,,LDgrabStoreVol,9,3,11,5,);
B(B_VARIN,,MXhydrGrab1Sect,14,2,16,4,);
B(B_VARIN,,MDpowerLimReduct,19,24,21,26,);
B(B_VARIN,,CDgrabIntTimeUp,19,25,21,27,);
B(B_FB,ADcalculateQV024,ADcalculateQ1,21,6,39,27,);
L(16,5,16,6);
L(11,4,16,4);
L(11,4,11,6);
L(21,3,21,8);
L(21,18,21,22);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_VARIN,,MXhydrGrab1Sect,9,3,11,5,);
B(B_COMMENT,,jump to next if only 1 ludv section is used for hydr. grab,1,1,27,2,);
B(B_JUMP,,next,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 26 ;
        NETWORK_BODY
B(B_VAROUT,,LDcalcCurrent1,36,5,38,7,);
B(B_VAROUT,,MDgrbPump1Signal,36,6,38,8,);
B(B_VAROUT,,LDcalcComp1,36,7,38,9,);
B(B_VARIN,,CWp1cur50liter,16,9,18,11,);
B(B_VARIN,,CWp1cur100liter,16,10,18,12,);
B(B_VARIN,,CWp1cur150liter,16,11,18,13,);
B(B_VARIN,,CWp1cur200liter,16,12,18,14,);
B(B_VARIN,,CWp1cur250liter,16,13,18,15,);
B(B_VARIN,,CWp1cur300liter,16,14,18,16,);
B(B_VARIN,,CWp1MinCurValveB,16,8,18,10,);
B(B_VARIN,,MDgrabPumpSignal,16,7,18,9,);
B(B_VARIN,,LDp1MaxValue,16,6,18,8,);
B(B_F,@DIV,,11,2,16,6,);
B(B_VARIN,,2.0,9,4,11,6,);
B(B_VARIN,,LDgrabStoreVol,9,3,11,5,);
B(B_VARIN,,CWp1MaxCurValveB,16,19,18,21,);
B(B_VARIN,,MDgrabSysPress,16,20,18,22,);
B(B_VARIN,,CDludvLeakOilSig,16,21,18,23,);
B(B_VAROUT,,LDcalcVol1,36,8,38,10,);
B(B_VARIN,,MDpowerLimReduct,16,22,18,24,);
B(B_VARIN,,CDgrabIntTimeUp,16,23,18,25,);
B(B_FB,ADcalculateQV024,ADcalculateQ2,18,4,36,25,);
L(17,4,17,6);
L(16,4,17,4);
L(18,16,18,20);
L(17,6,18,6);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL := next: ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 14 ;
        NETWORK_BODY
B(B_VARIN,,CDgrabPresLimClo,11,4,13,6,);
B(B_F,@DIV,,13,3,18,7,);
B(B_F,@MUL-2,,19,3,24,7,);
B(B_VARIN,,LDx23Poti2,17,7,19,9,);
B(B_F,@MUL-2,,19,8,24,12,);
B(B_F,@DIV,,13,9,18,13,);
B(B_VARIN,,100.0,10,11,12,13,);
B(B_VARIN,,CDgrabPresLimOpe,9,10,11,12,);
B(B_COMMENT,,increase pressure threshold depend on poti 2 signal,1,1,27,2,);
B(B_VAROUT,,LDgrabPresLimClo,24,4,26,6,);
B(B_VAROUT,,LDgrabPresLimOpe,24,9,26,11,);
L(18,5,19,5);
L(18,11,19,11);
L(19,6,19,10);
L(12,6,12,12);
L(12,12,13,12);
L(12,6,13,6);
L(11,11,13,11);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 26 ;
        NETWORK_BODY
B(B_COMMENT,,pressure control grab open / close ,1,1,27,2,);
B(B_VARIN,,MDgrabSysPress,9,7,11,9,);
B(B_F,@GT-2,,11,6,16,10,);
B(B_F,@AND-2,,18,5,23,9,);
B(B_F,@AND-2,,18,17,23,21,);
B(B_FB,RS,RS3,36,5,41,9,);
B(B_FB,RS,RS4,36,17,41,21,);
B(B_VARIN,,1.0,61,6,63,8,);
B(B_VARIN,,LDx23Poti2,62,7,64,9,);
B(B_VAROUT,,LDanaSigPresCont,70,3,72,5,);
B(B_F,@AND-2,,50,2,55,6,);
B(B_F,@OR-2,,57,2,62,6,);
B(B_F,sel,,65,2,70,7,);
B(B_FB,TON,TON2,29,5,34,9,);
B(B_F,real_to_time,,16,13,27,16,);
B(B_F,@MUL-2,,11,13,16,17,);
B(B_FB,TON,TON3,29,17,34,21,);
B(B_F,@OR-2,,29,21,34,25,N);
B(B_VARIN,,MXgrabSigClose,27,23,29,25,);
B(B_F,@OR-2,,43,5,48,9,);
B(B_VARIN,,LDgrabPresLimClo,9,8,11,10,);
B(B_VARIN,,CDgrabFilterTime,9,14,11,16,);
B(B_VARIN,,1000.0,9,15,11,17,);
B(B_VARIN,,LXgrabPumpOpen,15,22,17,24,);
B(B_F,@GT-2,,11,17,16,21,);
B(B_VARIN,,LDgrabPresLimOpe,9,19,11,21,);
B(B_VARIN,,MDgrabSysPress,9,18,11,20,);
B(B_VARIN,,MXgrabSigClose,48,3,50,5,);
B(B_VARIN,,LXgrabPumpClose,15,4,17,6,);
B(B_F,@OR-2,,18,9,23,13,N);
B(B_VARIN,,MXgrabSigOpen,16,11,18,13,);
B(B_F,@AND-2,,50,19,55,23,);
B(B_VARIN,,MXgrabSigOpen,48,21,50,23,);
B(B_COMMENT,,Drucksteuerung sekundär (Optional),1,2,27,3,);
L(16,8,18,8);
L(17,7,18,7);
L(35,8,36,8);
L(35,20,36,20);
L(41,7,42,7);
L(35,20,35,23);
L(49,5,50,5);
L(56,5,57,5);
L(63,5,65,5);
L(64,6,65,6);
L(63,5,63,7);
L(64,6,64,8);
L(55,4,57,4);
L(62,4,65,4);
L(23,7,29,7);
L(34,7,36,7);
L(35,8,35,11);
L(27,15,28,15);
L(28,8,29,8);
L(23,19,29,19);
L(34,19,36,19);
L(34,23,35,23);
L(28,8,28,20);
L(28,20,29,20);
L(42,7,43,7);
L(48,7,49,7);
L(41,19,42,19);
L(17,23,29,23);
L(16,19,18,19);
L(17,20,18,20);
L(17,20,17,23);
L(17,5,17,11);
L(17,11,18,11);
L(23,11,35,11);
L(55,21,56,21);
L(49,21,50,21);
L(56,5,56,21);
L(42,8,43,8);
L(42,8,42,19);
L(49,5,49,21);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 16 ;
        NETWORK_BODY
B(B_COMMENT,,pressure control grab open / close ,1,1,27,2,);
B(B_FB,Integrator,Integrator2,26,3,35,9,);
B(B_VAROUT,,LDgrabPresIntSig,35,4,37,6,);
B(B_VARIN,,LDanaSigPresCont,24,5,26,7,);
B(B_VARIN,,CDgrabPresIntUp,24,6,26,8,);
B(B_F,sel,,19,8,24,13,);
B(B_F,@OR-2,,11,8,16,12,);
B(B_VARIN,,LXgrabPumpClose,9,9,11,11,);
B(B_VARIN,,LXgrabPumpOpen,9,10,11,12,);
B(B_VARIN,,10000.0,15,12,17,14,);
B(B_VARIN,,CDgrabIntTimeDn,16,13,18,15,);
B(B_VARIN,,TRUE,24,4,26,6,);
L(25,8,26,8);
L(24,10,25,10);
L(16,10,19,10);
L(18,12,19,12);
L(17,11,19,11);
L(17,11,17,13);
L(18,12,18,14);
L(25,8,25,10);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 17 ;
        NETWORK_BODY
B(B_COMMENT,,power stage pressure control grab,1,1,28,2,);
B(B_FB,PowerStage,PowerStage1,18,4,27,12,);
B(B_VAROUT,,QWgrabPressContr,27,5,29,7,);
B(B_VARIN,,0.0,16,7,18,9,);
B(B_VARIN,,100.0,16,8,18,10,);
B(B_VARIN,,CWgrabPresMinCur,16,9,18,11,);
B(B_VARIN,,LDgrabPresIntSig,16,6,18,8,);
B(B_VARIN,,CWgrabPresMaxClo,9,14,11,16,);
B(B_F,sel,,11,11,16,16,);
B(B_VARIN,,LXgrabPumpClose,9,12,11,14,);
B(B_VARIN,,CWgrabPresMaxOpe,9,13,11,15,);
B(B_VARIN,,MXminEngineSpeed,16,5,18,7,);
L(16,13,17,13);
L(17,11,17,13);
L(17,11,18,11);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_COMMENT,,activate pressure control grab open / close LUDV Pump ,1,1,27,2,);
B(B_F,sel,,11,5,16,10,);
B(B_VARIN,,CWludvPressure,9,7,11,9,);
B(B_F,sel,,18,4,23,9,);
B(B_VARIN,,LXgrabPumpOpen,9,6,11,8,);
B(B_VARIN,,CWgrabOpeStoPres,9,8,11,10,);
B(B_VARIN,,LXgrabPumpClose,15,3,17,5,);
B(B_VAROUT,,MWludvExtPresSig,23,5,25,7,);
B(B_VARIN,,CWgrabCloStoPres,15,10,17,12,);
L(17,6,18,6);
L(17,4,17,6);
L(17,8,18,8);
L(16,7,18,7);
L(17,8,17,11);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_COMMENT,,enable grab/concrete crusher slewing preselection,1,1,27,2,);
B(B_VARIN,,MXenabGrabPresel,9,5,11,7,);
B(B_VARIN,,MXjoyGrabSlewPre,9,4,11,6,);
B(B_VARIN,,CXpolyGrabDigOCl,9,6,11,8,);
B(B_F,@AND-3,,11,3,16,8,00N);
B(B_VAROUT,,MXpreGrabSlew,16,4,18,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_COMMENT,,analog part grab slewing cylinder,1,1,27,2,);
B(B_VAROUT,,MDgrSlewPuSig,34,4,36,6,);
B(B_VARIN,,MDgrJoySigSlew,9,4,11,6,);
B(B_VAROUT,,LXgrSlewPumpZero,34,5,36,7,);
B(B_VARIN,,100.0,9,5,11,7,);
B(B_VARIN,,300.0,9,9,11,11,);
B(B_VARIN,,300.0,9,8,11,10,);
B(B_FB,FB_anaCylAnaV011,analog1,11,3,34,11,);
B(B_F,NE_R,,34,0,39,4,);
B(B_VAROUT,,LXgrSlewPumpAct,39,1,41,3,);
B(B_VARIN,,0.0,32,1,34,3,);
B(B_VARIN,,CDgrSlewLimitSig,9,6,11,8,);
L(34,3,34,5);
L(11,7,11,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_COMMENT,,release grap valves,1,1,27,2,);
B(B_VARIN,,LXgrSlewPumpAct,9,4,11,6,);
B(B_VARIN,,LXgrHoWiPumpAct,9,5,11,7,);
B(B_VARIN,,LXgrAd1PumpAct,9,6,11,8,);
B(B_VARIN,,LXgrAd2PumpAct,9,7,11,9,);
B(B_F,@OR-4,,11,3,16,9,);
B(B_VAROUT,,MXrelGrabValves,16,4,18,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_COMMENT,,hydr. grab working,1,1,29,2,);
B(B_VARIN,,MXhydrGrabActive,9,4,11,6,);
B(B_VAROUT,,LXhydrGrabActive,16,4,18,6,);
B(B_VARIN,,MXrelGrabValves,9,5,11,7,);
B(B_F,@OR-2,,11,3,16,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,exit grab program in case of hydr. grab without hose winch,1,1,27,2,);
B(B_RETURN,,,11,3,13,5,N);
B(B_VARIN,,MXenabHyGrabHose,9,3,11,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 23 ;
        NETWORK_BODY
B(B_VAROUT,,QTXautoHoseWinch,46,4,48,6,);
B(B_FB,RS,RS6,41,3,46,7,);
B(B_VARIN,,ITXleHoseWinchUp,19,16,21,18,);
B(B_F,@OR-3,,29,7,34,12,0N);
B(B_VARIN,,ITXriHoseWinchUp,19,17,21,19,);
B(B_VARIN,,ITXleHoseWinchDn,19,18,21,20,);
B(B_VARIN,,ITXriHoseWinchDn,19,19,21,21,);
B(B_COMMENT,,preselection automatic hose winches and cable winch,1,1,27,2,);
B(B_F,@AND-2,,21,11,26,15,0N);
B(B_F,@AND-2,,21,7,26,11,);
B(B_VARIN,,MXstopAllFunctio,19,13,21,15,);
B(B_FB,R_TRIG,R_TRIG4,11,3,18,6,);
B(B_VARIN,,ITXautoHoseWinch,9,4,11,6,);
B(B_VARIN,,MXenabHyGrabHose,18,12,20,14,);
B(B_VARIN,,QTXautoHoseWinch,17,9,19,11,);
B(B_F,@AND-2,,21,3,26,7,);
B(B_F,@AND-3,,36,7,41,12,);
B(B_VARIN,,MXhg1WinchStand,33,17,35,19,);
B(B_VARIN,,MXhg2WinchStand,34,18,36,20,);
B(B_VAROUT,,MXenabAutHoseWin,46,6,48,8,);
B(B_VAROUT,,LXhoseWinAutGrab,46,5,48,7,);
B(B_VARIN,,MXexitHydrGrab,19,20,21,22,);
B(B_F,@OR-5,,21,15,26,22,);
L(27,10,29,10);
L(27,10,27,13);
L(28,11,29,11);
L(20,13,21,13);
L(26,13,27,13);
L(19,9,21,9);
L(26,9,29,9);
L(41,6,41,9);
L(28,11,28,17);
L(20,6,21,6);
L(20,6,20,13);
L(19,5,19,9);
L(19,10,21,10);
L(18,5,21,5);
L(26,5,41,5);
L(34,9,36,9);
L(35,10,35,18);
L(35,10,36,10);
L(36,11,36,19);
L(46,5,46,7);
L(26,17,28,17);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 20 ;
        NETWORK_BODY
B(B_VARIN,,ITXautoHoseWinch,10,8,12,10,);
B(B_F,@AND-2,,19,4,24,8,0N);
B(B_VARIN,,ITXleHoseWinchUp,17,5,19,7,);
B(B_VARIN,,ITXleHoseWinchDn,10,9,12,11,);
B(B_VARIN,,ITXriHoseWinchDn,10,10,12,12,);
B(B_F,@AND-2,,19,12,24,16,0N);
B(B_VARIN,,ITXriHoseWinchUp,15,13,17,15,);
B(B_VARIN,,MXstopAllFunctio,10,11,12,13,);
B(B_F,@OR-4,,12,7,17,13,);
B(B_F,@OR-2,,27,15,32,19,);
B(B_VAROUT,,LXhoseWinManLift,32,16,34,18,);
B(B_VARIN,,LXhoseWinAutGrab,24,3,26,5,);
B(B_VAROUT,,QTXriHoseWinchUp,32,12,34,14,);
B(B_F,@OR-2,,27,11,32,15,);
B(B_F,@OR-2,,27,3,32,7,);
B(B_VAROUT,,QTXleHoseWinchUp,32,4,34,6,);
B(B_COMMENT,,preselection hose winches manuell lifting,1,1,27,2,);
L(18,7,19,7);
L(18,15,19,15);
L(17,14,19,14);
L(26,14,26,17);
L(18,7,18,15);
L(17,9,18,9);
L(25,6,25,18);
L(26,17,27,17);
L(25,18,27,18);
L(26,4,26,13);
L(26,13,27,13);
L(24,14,27,14);
L(24,6,27,6);
L(26,5,27,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 17 ;
        NETWORK_BODY
B(B_F,@AND-2,,19,3,24,7,0N);
B(B_VARIN,,ITXleHoseWinchDn,17,4,19,6,);
B(B_F,@AND-2,,19,12,24,16,0N);
B(B_VARIN,,ITXriHoseWinchDn,15,13,17,15,);
B(B_COMMENT,,preselection hose winches and cable winch manuell lowering ,1,1,27,2,);
B(B_VAROUT,,QTXleHoseWinchDn,25,4,27,6,);
B(B_F,@OR-2,,26,7,31,11,);
B(B_VAROUT,,LXhoseWinManLow,31,8,33,10,);
B(B_VAROUT,,QTXriHoseWinchDn,25,13,27,15,);
B(B_VARIN,,ITXautoHoseWinch,10,7,12,9,);
B(B_VARIN,,ITXleHoseWinchUp,10,8,12,10,);
B(B_VARIN,,ITXriHoseWinchUp,10,9,12,11,);
B(B_VARIN,,MXstopAllFunctio,10,10,12,12,);
B(B_F,@OR-4,,12,6,17,12,);
L(18,6,19,6);
L(18,15,19,15);
L(17,14,19,14);
L(24,14,25,14);
L(25,10,25,14);
L(25,5,25,9);
L(24,5,25,5);
L(18,6,18,15);
L(25,10,26,10);
L(25,9,26,9);
L(17,8,18,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 15 ;
        NETWORK_BODY
B(B_F,sel,,18,5,23,10,);
B(B_F,sel,,24,4,29,9,);
B(B_VARIN,,0.0,16,7,18,9,);
B(B_VAROUT,,LDgrHoWiAnalSig,29,5,31,7,);
B(B_VARIN,,LXhoseWinManLow,22,3,24,5,);
B(B_F,@MUL-2,,18,10,23,14,);
B(B_VARIN,,-1.0,16,12,18,14,);
B(B_F,to_real,,11,10,18,13,);
B(B_VARIN,,100.0,9,11,11,13,);
B(B_COMMENT,,analog part grab hose winch control,1,1,27,2,);
B(B_F,@OR-2,,13,4,18,8,);
B(B_VARIN,,LXhoseWinAutGrab,11,5,13,7,);
B(B_VARIN,,LXhoseWinManLift,11,6,13,8,);
L(24,4,24,6);
L(23,7,24,7);
L(23,12,24,12);
L(24,8,24,12);
L(18,9,18,12);
L(18,6,18,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_F,sel,,11,3,16,8,);
B(B_VAROUT,,LDgrHoWiLiSigOut,16,4,18,6,);
B(B_VARIN,,CDgrHoWiManLiSig,9,5,11,7,);
B(B_VARIN,,CDgrHoWiAutLiSig,9,6,11,8,);
B(B_VARIN,,LXhoseWinAutGrab,9,4,11,6,);
B(B_COMMENT,,limitation signal out,1,1,27,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_COMMENT,,analog part grab hose winch control,1,1,27,2,);
B(B_VAROUT,,MDhoWiPumpSigOC,34,5,36,7,);
B(B_VARIN,,LDgrHoWiAnalSig,9,5,11,7,);
B(B_VAROUT,,LXgrHoWiPumpZero,34,6,36,8,);
B(B_VARIN,,100.0,9,6,11,8,);
B(B_VARIN,,300.0,9,10,11,12,);
B(B_VARIN,,300.0,9,9,11,11,);
B(B_FB,FB_anaCylAnaV011,analog2,11,4,34,12,);
B(B_F,NE_R,,34,1,39,5,);
B(B_VAROUT,,LXgrHoWiPumpAct,39,2,41,4,);
B(B_VARIN,,0.0,32,2,34,4,);
B(B_VARIN,,CDgrHoWiManLiSig,9,8,11,10,);
B(B_VARIN,,LDgrHoWiLiSigOut,9,7,11,9,);
L(34,4,34,6);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,control brakes left hose winches,1,1,27,2,);
B(B_FB,RS,RS1,22,3,27,7,);
B(B_VAROUT,,QXhoseDrumBrakLe,27,4,29,6,);
B(B_VARIN,,QTXleHoseWinchUp,9,4,11,6,);
B(B_VARIN,,QTXleHoseWinchDn,9,5,11,7,);
B(B_F,@OR-2,,11,3,16,7,);
B(B_F,@AND-2,,17,6,22,10,N);
B(B_VARIN,,LXgrHoWiPumpZero,15,8,17,10,);
L(22,6,22,8);
L(16,5,16,8);
L(16,5,22,5);
L(16,8,17,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,control brakes right hose winches,1,1,27,2,);
B(B_VARIN,,QTXriHoseWinchUp,10,4,12,6,);
B(B_VARIN,,QTXriHoseWinchDn,10,5,12,7,);
B(B_F,@OR-2,,12,3,17,7,);
B(B_FB,RS,RS2,23,3,28,7,);
B(B_F,@AND-2,,18,6,23,10,N);
B(B_VARIN,,LXgrHoWiPumpZero,16,8,18,10,);
B(B_VAROUT,,QXhoseDrumBrakRi,28,4,30,6,);
L(23,6,23,8);
L(17,5,17,8);
L(17,5,23,5);
L(17,8,18,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 20 ;
        NETWORK_BODY
B(B_COMMENT,,power stage pressure control hose pump,1,1,27,2,);
B(B_VARIN,,QXhg1BrakeNormal,10,7,12,9,);
B(B_VARIN,,QXhg1BrakeFastSp,10,8,12,10,);
B(B_F,@OR-2,,12,6,17,10,);
B(B_F,@AND-2,,19,3,24,7,);
B(B_VARIN,,MXhg1AnalSigPos,17,4,19,6,);
B(B_VARIN,,QXhg2BrakeNormal,10,13,12,15,);
B(B_VARIN,,QXhg2BrakeFastSp,10,14,12,16,);
B(B_F,@OR-2,,12,12,17,16,);
B(B_F,@AND-2,,19,9,24,13,);
B(B_VARIN,,MXhg2AnalSigPos,17,10,19,12,);
B(B_VAROUT,,LXhoseWinHighPr,32,4,34,6,);
B(B_VARIN,,MXlgAnalSigNeg,17,16,19,18,);
B(B_F,@AND-2,,19,15,24,19,);
B(B_VARIN,,QXlgBrake,17,17,19,19,);
B(B_F,@OR-3,,27,3,32,8,);
L(17,8,18,8);
L(18,6,18,8);
L(18,6,19,6);
L(17,14,18,14);
L(18,12,18,14);
L(18,12,19,12);
L(24,11,25,11);
L(25,6,25,11);
L(25,6,27,6);
L(24,5,27,5);
L(24,17,26,17);
L(26,7,26,17);
L(26,7,27,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,pressure control hose winch,1,1,27,2,);
B(B_F,sel,,12,5,17,10,);
B(B_VARIN,,LXhoseWinHighPr,10,6,12,8,);
B(B_F,sel,,19,3,24,8,);
B(B_VARIN,,0.0,17,5,19,7,);
B(B_VARIN,,LXgrHoWiPumpAct,17,4,19,6,);
B(B_VARIN,,CDgrHoWiLoPreSig,10,7,12,9,);
B(B_VARIN,,CDgrHoWiHiPreSig,10,8,12,10,);
B(B_VAROUT,,MDhoWiPresSigOC,24,4,26,6,);
L(17,7,19,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 17 ;
        NETWORK_BODY
B(B_F,@OR-2,,14,6,19,10,);
B(B_F,@OR-2,,14,12,19,16,);
B(B_VARIN,,ITXgrabAdj1In,9,7,11,9,);
B(B_VARIN,,MXstopAllFunctio,9,8,11,10,);
B(B_COMMENT,, grap adjustment 1left,1,1,27,2,);
B(B_VARIN,,ITXgrabAdj1Out,10,4,12,6,);
B(B_F,@AND-2,,20,3,25,7,0N);
B(B_F,@AND-2,,20,9,25,13,0N);
B(B_VAROUT,,QTXgrabAdj1In,25,10,27,12,);
B(B_VAROUT,,QTXgrabAdj1Out,25,4,27,6,);
L(19,8,20,8);
L(20,6,20,8);
L(19,14,20,14);
L(20,12,20,14);
L(11,8,14,8);
L(11,9,14,9);
L(13,8,13,11);
L(12,5,12,14);
L(12,14,14,14);
L(11,9,11,15);
L(11,15,14,15);
L(12,5,20,5);
L(13,11,20,11);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 15 ;
        NETWORK_BODY
B(B_F,sel,,18,5,23,10,);
B(B_F,sel,,24,4,29,9,);
B(B_VARIN,,0.0,16,7,18,9,);
B(B_VAROUT,,LDgrAd1AnalSig,29,5,31,7,);
B(B_VARIN,,QTXgrabAdj1Out,22,3,24,5,);
B(B_VARIN,,QTXgrabAdj1In,16,6,18,8,);
B(B_F,@MUL-2,,18,10,23,14,);
B(B_VARIN,,-1.0,16,12,18,14,);
B(B_F,to_real,,11,10,18,13,);
B(B_VARIN,,100.0,9,11,11,13,);
B(B_COMMENT,,analog part grab adjustment 1,1,1,27,2,);
L(24,4,24,6);
L(23,7,24,7);
L(23,12,24,12);
L(24,8,24,12);
L(18,9,18,12);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_COMMENT,,analog part grab adjustment 1,1,1,27,2,);
B(B_VAROUT,,MDgrAd1PumpSig,34,5,36,7,);
B(B_VARIN,,LDgrAd1AnalSig,9,5,11,7,);
B(B_VAROUT,,LXgrAd1PumpZero,34,6,36,8,);
B(B_VARIN,,100.0,9,6,11,8,);
B(B_VARIN,,CDgrAd1LimitSig,9,7,11,9,);
B(B_VARIN,,300.0,9,10,11,12,);
B(B_VARIN,,300.0,9,9,11,11,);
B(B_FB,FB_anaCylAnaV011,analog3,11,4,34,12,);
B(B_F,NE_R,,34,1,39,5,);
B(B_VAROUT,,LXgrAd1PumpAct,39,2,41,4,);
B(B_VARIN,,0.0,32,2,34,4,);
L(34,4,34,6);
L(11,8,11,9);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 17 ;
        NETWORK_BODY
B(B_COMMENT,, grap adjustment 2 right,1,1,27,2,);
B(B_F,@OR-2,,15,6,20,10,);
B(B_F,@OR-2,,15,12,20,16,);
B(B_VARIN,,ITXgrabAdj2Out,10,7,12,9,);
B(B_VARIN,,MXstopAllFunctio,10,8,12,10,);
B(B_VARIN,,ITXgrabAdj2In,11,4,13,6,);
B(B_F,@AND-2,,21,3,26,7,0N);
B(B_F,@AND-2,,21,9,26,13,0N);
B(B_VAROUT,,QTXgrabAdj2Out,26,10,28,12,);
B(B_VAROUT,,QTXgrabAdj2In,26,4,28,6,);
L(20,8,21,8);
L(20,14,21,14);
L(12,8,15,8);
L(12,9,15,9);
L(14,8,14,11);
L(13,5,13,14);
L(13,14,15,14);
L(12,9,12,15);
L(12,15,15,15);
L(21,6,21,8);
L(21,12,21,14);
L(13,5,21,5);
L(14,11,21,11);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 15 ;
        NETWORK_BODY
B(B_F,sel,,18,5,23,10,);
B(B_F,sel,,24,4,29,9,);
B(B_VARIN,,0.0,16,7,18,9,);
B(B_VAROUT,,LDgrAd2AnalSig,29,5,31,7,);
B(B_VARIN,,QTXgrabAdj2Out,22,3,24,5,);
B(B_VARIN,,QTXgrabAdj2In,16,6,18,8,);
B(B_F,@MUL-2,,18,10,23,14,);
B(B_VARIN,,-1.0,16,12,18,14,);
B(B_F,to_real,,11,10,18,13,);
B(B_VARIN,,100.0,9,11,11,13,);
B(B_COMMENT,,analog part grab adjustment 2,1,1,27,2,);
L(24,4,24,6);
L(23,7,24,7);
L(23,12,24,12);
L(24,8,24,12);
L(18,9,18,12);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_COMMENT,,analog part grab adjustment 2,1,1,27,2,);
B(B_VAROUT,,MDgrAd2PumpSig,34,5,36,7,);
B(B_VARIN,,LDgrAd2AnalSig,9,5,11,7,);
B(B_VAROUT,,LXgrAd2PumpZero,34,6,36,8,);
B(B_VARIN,,100.0,9,6,11,8,);
B(B_VARIN,,CDgrAd2LimitSig,9,7,11,9,);
B(B_VARIN,,300.0,9,9,11,11,);
B(B_FB,FB_anaCylAnaV011,analog4,11,4,34,12,);
B(B_F,NE_R,,34,1,39,5,);
B(B_VAROUT,,LXgrAd2PumpAct,39,2,41,4,);
B(B_VARIN,,0.0,32,2,34,4,);
B(B_VARIN,,300.0,9,10,11,12,);
L(34,4,34,6);
L(11,8,11,9);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,exit grab program,1,1,27,2,);
B(B_VARIN,,TRUE,9,3,11,5,);
B(B_RETURN,,,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL := exit: ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_FB,Integrator,Integrator3,13,5,22,11,);
B(B_VARIN,,1000.0,10,7,12,9,);
B(B_F,real_to_uint,,22,5,33,8,);
B(B_VARIN,,1000.0,11,8,13,10,);
B(B_VARIN,,MXminEngineSpeed,9,6,11,8,);
B(B_VARIN,,100000.0,11,9,13,11,);
B(B_F,EQ_R,,22,1,27,5,);
B(B_F,sel,,33,4,38,9,);
B(B_VAROUT,,QWgrabPressContr,38,5,40,7,);
B(B_COMMENT,,damit Ausgangsstufe nicht überschwingt,35,10,52,11,);
B(B_VARIN,,QWgrabPressContr,31,8,33,10,);
L(12,8,13,8);
L(12,3,12,8);
L(11,7,13,7);
L(22,4,22,7);
L(12,3,22,3);
L(27,3,33,3);
L(33,8,33,9);
L(33,3,33,6);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,exit grab program,1,1,27,2,);
B(B_VARIN,,TRUE,9,3,11,5,);
B(B_RETURN,,,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL := init: ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,init grab program,1,1,27,2,);
B(B_VARIN,,TRUE,9,3,11,5,);
B(B_VAROUT,,LXinitOk,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value additional hydraulics,1,1,27,2,);
B(B_FB,CorrValue_Bool,CorrValue_Bool1,11,4,23,10,);
B(B_VARIN,,CXadHydrGrab,9,8,11,10,);
B(B_VARIN,,FALSE,9,5,11,7,);
B(B_VARIN,,FALSE,9,6,11,8,);
B(B_VARIN,,TRUE,9,7,11,9,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value additional grab with only 1 Ludv section ,1,1,27,2,);
B(B_FB,CorrValue_Bool,CorrValue_Bool2,11,4,23,10,);
B(B_VARIN,,CXhydrGrab1Sect,9,8,11,10,);
B(B_VARIN,,FALSE,9,5,11,7,);
B(B_VARIN,,FALSE,9,6,11,8,);
B(B_VARIN,,TRUE,9,7,11,9,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value additional grab with hose winch,1,1,27,2,);
B(B_FB,CorrValue_Bool,CorrValue_Bool3,11,4,23,10,);
B(B_VARIN,,CXadHydrGrabHose,9,8,11,10,);
B(B_VARIN,,FALSE,9,5,11,7,);
B(B_VARIN,,FALSE,9,6,11,8,);
B(B_VARIN,,TRUE,9,7,11,9,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value digital open / close by joystick button,1,1,27,2,);
B(B_FB,CorrValue_Bool,CorrValue_Bool4,11,4,23,10,);
B(B_VARIN,,CXpolyGrabDigOCl,9,8,11,10,);
B(B_VARIN,,FALSE,9,5,11,7,);
B(B_VARIN,,FALSE,9,6,11,8,);
B(B_VARIN,,TRUE,9,7,11,9,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correchtion value min. current pressure control grab open / close,1,1,27,2,);
B(B_VARIN,,CWgrabPresMinCur,9,8,11,10,);
B(B_VARIN,,200,9,5,11,7,);
B(B_VARIN,,10,9,6,11,8,);
B(B_VARIN,,450,9,7,11,9,);
B(B_FB,CorrValue_UInt,CorrValue_UInt1,11,4,23,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value max. current pressure control grab close,1,1,27,2,);
B(B_VARIN,,CWgrabPresMaxClo,9,8,11,10,);
B(B_VARIN,,800,9,5,11,7,);
B(B_VARIN,,10,9,6,11,8,);
B(B_VARIN,,1000,9,7,11,9,);
B(B_FB,CorrValue_UInt,CorrValue_UInt2,11,4,23,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value max. current pressure control grab open,1,1,27,2,);
B(B_VARIN,,CWgrabPresMaxOpe,9,8,11,10,);
B(B_VARIN,,800,9,5,11,7,);
B(B_VARIN,,10,9,6,11,8,);
B(B_VARIN,,1000,9,7,11,9,);
B(B_FB,CorrValue_UInt,CorrValue_UInt3,11,4,23,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value ludv pressure for grab close [bar],1,1,27,2,);
B(B_FB,CorrValue_UInt,CorrValue_UInt4,11,4,23,10,);
B(B_VARIN,,330,9,5,11,7,);
B(B_VARIN,,100,9,6,11,8,);
B(B_VARIN,,400,9,7,11,9,);
B(B_VARIN,,CWgrabCloStoPres,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value ludv pressure for grab open [bar],1,1,27,2,);
B(B_FB,CorrValue_UInt,CorrValue_UInt5,11,4,23,10,);
B(B_VARIN,,330,9,5,11,7,);
B(B_VARIN,,100,9,6,11,8,);
B(B_VARIN,,400,9,7,11,9,);
B(B_VARIN,,CWgrabOpeStoPres,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value integrator time down grab control,1,1,27,2,);
B(B_VARIN,,100.0,9,5,11,7,);
B(B_VARIN,,10.0,9,6,11,8,);
B(B_VARIN,,300.0,9,7,11,9,);
B(B_VARIN,,CDgrabIntTimeDn,9,8,11,10,);
B(B_FB,CorrValue_Real,CorrValue_Real1,11,4,23,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value integrator time up grab control,1,1,27,2,);
B(B_VARIN,,100.0,9,5,11,7,);
B(B_VARIN,,10.0,9,6,11,8,);
B(B_VARIN,,300.0,9,7,11,9,);
B(B_VARIN,,CDgrabIntTimeUp,9,8,11,10,);
B(B_FB,CorrValue_Real,CorrValue_Real2,11,4,23,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value grab pressure limit open,1,1,27,2,);
B(B_VARIN,,CDgrabPresLimOpe,9,8,11,10,);
B(B_VARIN,,100.0,9,5,11,7,);
B(B_VARIN,,0.0,9,6,11,8,);
B(B_VARIN,,400.0,9,7,11,9,);
B(B_FB,CorrValue_Real,CorrValue_Real3,11,4,23,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value grab pressure limit close,1,1,27,2,);
B(B_VARIN,,CDgrabPresLimClo,9,8,11,10,);
B(B_VARIN,,100.0,9,5,11,7,);
B(B_VARIN,,0.0,9,6,11,8,);
B(B_VARIN,,400.0,9,7,11,9,);
B(B_FB,CorrValue_Real,CorrValue_Real4,11,4,23,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value filter time for grab pressure limit open / close,1,1,27,2,);
B(B_VARIN,,CDgrabFilterTime,9,8,11,10,);
B(B_VARIN,,1.0,9,5,11,7,);
B(B_VARIN,,0.0,9,6,11,8,);
B(B_VARIN,,5.0,9,7,11,9,);
B(B_FB,CorrValue_Real,CorrValue_Real5,11,4,23,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value integrator time up grab pressure control [msec.],1,1,27,2,);
B(B_VARIN,,50.0,9,5,11,7,);
B(B_VARIN,,10.0,9,6,11,8,);
B(B_VARIN,,300.0,9,7,11,9,);
B(B_VARIN,,CDgrabPresIntUp,9,8,11,10,);
B(B_FB,CorrValue_Real,CorrValue_Real6,11,4,23,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value grab slewing limitation signal,1,1,27,2,);
B(B_VARIN,,50.0,9,5,11,7,);
B(B_VARIN,,1.0,9,6,11,8,);
B(B_VARIN,,100.0,9,7,11,9,);
B(B_VARIN,,CDgrSlewLimitSig,9,8,11,10,);
B(B_FB,CorrValue_Real,CorrValue_Real7,11,4,23,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value grab adjustment 1 limitation signal,1,1,27,2,);
B(B_VARIN,,50.0,9,5,11,7,);
B(B_VARIN,,1.0,9,6,11,8,);
B(B_VARIN,,100.0,9,7,11,9,);
B(B_VARIN,,CDgrAd1LimitSig,9,8,11,10,);
B(B_FB,CorrValue_Real,CorrValue_Real8,11,4,23,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value grab adjustment 2 limitation signal,1,1,27,2,);
B(B_VARIN,,50.0,9,5,11,7,);
B(B_VARIN,,1.0,9,6,11,8,);
B(B_VARIN,,100.0,9,7,11,9,);
B(B_VARIN,,CDgrAd2LimitSig,9,8,11,10,);
B(B_FB,CorrValue_Real,CorrValue_Real9,11,4,23,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value grab hose winch manuell adjustment ,1,1,27,2,);
B(B_VARIN,,10.0,9,5,11,7,);
B(B_VARIN,,1.0,9,6,11,8,);
B(B_VARIN,,100.0,9,7,11,9,);
B(B_VARIN,,CDgrHoWiManLiSig,9,8,11,10,);
B(B_FB,CorrValue_Real,CorrValue_Real10,11,4,23,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value grab hose winch automatic adjustment ,1,1,27,2,);
B(B_VARIN,,50.0,9,5,11,7,);
B(B_VARIN,,1.0,9,6,11,8,);
B(B_VARIN,,100.0,9,7,11,9,);
B(B_VARIN,,CDgrHoWiAutLiSig,9,8,11,10,);
B(B_FB,CorrValue_Real,CorrValue_Real11,11,4,23,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value grab hose winch low pressure control ,1,1,27,2,);
B(B_VARIN,,50.0,9,5,11,7,);
B(B_VARIN,,1.0,9,6,11,8,);
B(B_VARIN,,100.0,9,7,11,9,);
B(B_VARIN,,CDgrHoWiLoPreSig,9,8,11,10,);
B(B_FB,CorrValue_Real,CorrValue_Real12,11,4,23,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value grab hose winch high pressure control ,1,1,27,2,);
B(B_VARIN,,50.0,9,5,11,7,);
B(B_VARIN,,1.0,9,6,11,8,);
B(B_VARIN,,100.0,9,7,11,9,);
B(B_VARIN,,CDgrHoWiHiPreSig,9,8,11,10,);
B(B_FB,CorrValue_Real,CorrValue_Real13,11,4,23,10,);
        END_NETWORK_BODY
    END_NET_WORK
END_BODY
END_PROGRAM

PROGRAM ADhydrGrapV180
(*name of author: Manfred Schapler
version: 1.0
date: 10/97
modification:*)
(*name of author: Manfred Schapler
version: 1.0
date: 04/97
modification:*)
	VAR_EXTERNAL 
		IXentrySwiClosed: BOOL:=FALSE;
			(*entry switch closed*)
		ITXgrabAutoMidd: BOOL:=FALSE;
			(*preselection grab automatic middle position*)
		ITXgrabCtrl: BOOL:=FALSE;
			(*preselection grab control (winch synchronisation) *)
		ITXautoHoseWinch: BOOL:=FALSE;
			(*preselection automatic hose winch *)
		ITXleHoseWinchUp: BOOL:=FALSE;
			(*preselection left hose winch up*)
		ITXriHoseWinchUp: BOOL:=FALSE;
			(*preselection right hose winch up*)
		ITXcableWinchUp: BOOL:=FALSE;
			(*preselection cable winch up*)
		ITXleHoseWinchDn: BOOL:=FALSE;
			(*preselection left hose winch down*)
		ITXriHoseWinchDn: BOOL:=FALSE;
			(*preselection right hose winch down*)
		ITXcableWinchDn: BOOL:=FALSE;
			(*preselection cable winch down*)
		IXpreselMooring: BOOL:=FALSE;
			(*preselection mooring key switch*)
		IXrelSlackRopPro: BOOL:=FALSE;
			(*add. hydr. grab slack rope protection*)
		IXhgRelFreefall: BOOL:=FALSE;
			(*clutch valve release freefall*)
		IWkeybX23Poti1: UINT:=0;
			(*keyboard X23 poti 1*)
		IWkeybX23Poti2: UINT:=0;
			(*keyboard X23 poti 2*)
		IWgrabSysPresP2: UINT:=0;
			(*P2 sys.press.vibrator/hammer/hydr.grab*)
		IWgrabInclX_axis: UINT:=0;
			(*grap inclinometer X-axis*)
		IWgrabInclY_axis: UINT:=0;
			(*grap inclination Y-axis*)
		QTXautoHoseWinch: BOOL:=FALSE;
			(*enable automatic hose winch *)
		QTXgrabAutoMiddl: BOOL:=FALSE;
			(*enable grab automatic middle position*)
		QTXleHoseWinchUp: BOOL:=FALSE;
			(*preselection left hose winch up*)
		QTXriHoseWinchUp: BOOL:=FALSE;
			(*preselection right hose winch up*)
		QTXcableWinchUp: BOOL:=FALSE;
			(*preselection cable winch up*)
		QTXleHoseWinchDn: BOOL:=FALSE;
			(*preselection left hose winch down*)
		QTXriHoseWinchDn: BOOL:=FALSE;
			(*preselection right hose winch down*)
		QTXcableWinchDn: BOOL:=FALSE;
			(*preselection cable winch down*)
		QXhoseDrumBrakLe: BOOL:=FALSE;
			(*add. hydr. grab brake le/ri hose drums*)
		QXhoseDrumBrakRi: BOOL:=FALSE;
			(*add. hydr. grab brake hose drums right  *)
		QXcableDrumLift: BOOL:=FALSE;
			(*add: cable drum lifting*)
		QXcableDrumLower: BOOL:=FALSE;
			(*add: cable drum lowering*)
		QXgrabAdjustS1: BOOL:=FALSE;
			(*add. hydr. grab adjustment S1 front/back*)
		QXgrabAdjustS2: BOOL:=FALSE;
			(*add. hydr. grab adjustment S2 front/back*)
		QXgrabAdjustS3: BOOL:=FALSE;
			(*add. hydr. grab adjustment S3 front/back*)
		QXgrabSlewLeft: BOOL:=FALSE;
			(*add. hydr. grab slewing left*)
		QXgrabSlewRight: BOOL:=FALSE;
			(*add. hydr. grab slewing right*)
		QXgrabAdjustS4: BOOL:=FALSE;
			(*add. hydr. grab Adjust S4 left/right*)
		QXgrabAdjustS5: BOOL:=FALSE;
			(*add. hydr. grab Adjust S4 left/right*)
		QXgrabAdjustS6: BOOL:=FALSE;
			(*add. hydr. grab Adjust S4 left/right*)
		QTXgrabCtrl: BOOL:=FALSE;
			(*enable grab control (winch synchronisation) *)
		QTXwinStopValue: BOOL:=FALSE;
			(*enable winch pre stop value*)
		QTXslackRopValue: BOOL:=FALSE;
			(*enable slack rope value*)
		QXlgBrake: BOOL:=FALSE;
			(*LG brake*)
		QXhg1BrakeNormal: BOOL:=FALSE;
			(*HG 1 brake normal speed operation*)
		QXhg1BrakeFastSp: BOOL:=FALSE;
			(*HG 1 brake fast speed operation*)
		QXhg1Clutch: BOOL:=FALSE;
			(*HG 1 clutch*)
		QXhg2BrakeNormal: BOOL:=FALSE;
			(*HG 2 brake normal speed operation*)
		QXhg2BrakeFastSp: BOOL:=FALSE;
			(*HG 2 brake fast speed operation*)
		QXhg2Clutch: BOOL:=FALSE;
			(*HG 2 clutch*)
		QXhg1_2connectio: BOOL:=FALSE;
			(*connection hg 1 & 2*)
		QWhg1Lifting: UINT:=0;
			(*HG 1 pump lifting*)
		QWhg1Trimot: UINT:=0;
			(*HG 1 pump trimot*)
		QWhg2Lifting: UINT:=0;
			(*HG 2 pump lifting*)
		QWhg2Trimot: UINT:=0;
			(*HG 2 pump trimot*)
		QWgrabPressContr: UINT:=0;
			(*grab pressure control *)
		MXstopAllFunctio: BOOL:=FALSE;
			(*stop all excavator functions*)
		MXassemblyOperat: BOOL:=FALSE;
			(*assembly operation*)
		MXengStarterActi: BOOL:=FALSE;
			(*engine starter activated*)
		MXpdeStart: BOOL:=FALSE;
			(*pde start*)
		MXgrabGlobalStop: BOOL:=FALSE;
			(*ad global stop polyp grab*)
		MXminEngineSpeed: BOOL:=FALSE;
			(*minimum engine speed reached*)
		MXhg1AnalSigPos: BOOL:=FALSE;
			(*hg1 analog signal positiv*)
		MXhg1ClutchExt: BOOL:=FALSE;
			(*ad dgc hg1 clutch external control*)
		MXhg1WinchStand: BOOL:=FALSE;
			(*HG 1 winch standing still*)
		MXhg1WinchLower: BOOL:=FALSE;
			(*hg2 winch is lowering*)
		MXhg1ExtAnalSign: BOOL:=FALSE;
			(*HG 1 other, external analog signal*)
		MXhg1SlacRoStopD: BOOL:=FALSE;
			(*add. hydr. grab slack hg1 rope stop down*)
		MXhg2AnalSigPos: BOOL:=FALSE;
			(*hg2 analog signal positiv*)
		MXhg2ClutchExt: BOOL:=FALSE;
			(*ad dgc hg2 clutch external control*)
		MXhg2WinchStand: BOOL:=FALSE;
			(*HG 2 winch standing still*)
		MXhg2PumpInZero: BOOL:=FALSE;
			(*HG 2 pump in zero*)
		MXhg2WinchLower: BOOL:=FALSE;
			(*hg2 winch is lowering*)
		MXhg2ExtAnalSign: BOOL:=FALSE;
			(*HG 2 other, external analog signal*)
		MXhg2SlacRoStopD: BOOL:=FALSE;
			(*add. hydr. grab slack hg2 rope stop down*)
		MXhydrGrabActive: BOOL:=FALSE;
			(*hydr. grap active*)
		MXhg1PumpInZero: BOOL:=FALSE;
			(*HG 1 pump in zero*)
		MXlgAnalSigNeg: BOOL:=FALSE;
			(*lg analog signal negativ*)
		MXpreSlackRopPro: BOOL:=FALSE;
			(*preselection slack rope protection *)
		MXpreSlackRoPres: BOOL:=FALSE;
			(*prese. slack rope protection pressure control*)
		MXpreSlackRoLml: BOOL:=FALSE;
			(*prese. slack rope protection LML control*)
		MXpreMooringGrab: BOOL:=FALSE;
			(*preselection grap mooring control*)
		MXpresGrabZero: BOOL:=FALSE;
			(*preselection grap zero*)
		MXsetGrabZero: BOOL:=FALSE;
			(*set grap zero*)
		MXgrabMooStopHg1: BOOL:=FALSE;
			(*stop hoisting gear 1 at grap mooring start*)
		MXgrabMooStopHg2: BOOL:=FALSE;
			(*stop hoisting gear 2 at grap mooring start*)
		MXJoyGrabMovBaRi: BOOL:=FALSE;
			(*LeJoyTopRi grap move back or right*)
		MXJoyGrabMovFoLe: BOOL:=FALSE;
			(*LeJoyFronTopRi grap move forward*)
		MXJoyPreSlewLeRi: BOOL:=FALSE;
			(*LeJoyFronTopRi preselection grab slewing or incline le/ri *)
		MXjoyGrabSlewLe: BOOL:=FALSE;
			(*add. hydr. grab slewing left at joy stick button*)
		MXjoyGrabSlewRi: BOOL:=FALSE;
			(*add. hydr. grab slewing right at joy stick button*)
		MXadWinSynWork: BOOL:=FALSE;
			(*ad winch synchronize working*)
		MXhg1LocStopInt: BOOL:=FALSE;
			(*HG 1 local stop integrated*)
		MXhg1LocStopRapU: BOOL:=FALSE;
			(*HG 1 local stop rapid lifting*)
		MXhg1LocStopRapD: BOOL:=FALSE;
			(*HG 1 local stop rapid lowering*)
		MXhg2LocStopInt: BOOL:=FALSE;
			(*HG 2 local stop integrated*)
		MXhg2LocStopRapU: BOOL:=FALSE;
			(*HG 2 local stop rapid lifting*)
		MXhg2LocStopRapD: BOOL:=FALSE;
			(*HG 2 local stop rapid lowering*)
		MXadStopHg1Up: BOOL:=FALSE;
			(*additional device stop hg1 lifting*)
		MXadStopHg2Up: BOOL:=FALSE;
			(*additional device stop hg2 lifting*)
		MXadStopHg1Dn: BOOL:=FALSE;
			(*additional device stop hg1 lowering*)
		MXadStopHg2Dn: BOOL:=FALSE;
			(*additional device stop hg2 lowering*)
		MXflashSignal: BOOL:=FALSE;
			(*flash signal*)
		MXadLEHydrGrab: BOOL:=FALSE;
			(*add. leffer hydraulic grab control*)
		MXenabGrabPresel: BOOL:=FALSE;
			(*ad polyp grab enable preselected*)
		MXexitLEHydrGrab: BOOL:=FALSE;
			(*exit add. Leffer hydraulic grab *)
		MXjoyGrabAssembl: BOOL:=FALSE;
			(*hydr. grab joystick grab assembly*)
		MXhg1ExtControl: BOOL:=FALSE;
			(*HG 1 external enable to all outputs*)
		MXhg2ExtControl: BOOL:=FALSE;
			(*HG 2 external enable to all outputs*)
		MXgrabEnaPowStag: BOOL:=FALSE;
			(*enable power stage hydr. grab*)
		MXgrabSigOpen: BOOL:=FALSE;
			(*ad grab open*)
		MXgrabSigClose: BOOL:=FALSE;
			(*ad grab close*)
		MXjoyGrMoorFreef: BOOL:=FALSE;
			(*ad. grab mooring freefall on joystick*)
		MXpumpRedSlacRop: BOOL:=FALSE;
			(*pump reduction at slack rope limitation*)
		MXenabAutHoseWin: BOOL:=FALSE;
			(*add. hydraulic grab automatic hose winch*)
		MXpdeGetInitOk: BOOL:=FALSE;
			(*get initialised O.K. from PDE*)
		MXpdeResRopeHg1: BOOL:=FALSE;
			(*external reset rope length measuring hg1 by PDE*)
		MXresRopeLenHg1: BOOL:=FALSE;
			(*reset rope lenght hg 1*)
		MXrelGrabValves: BOOL:=FALSE;
			(*release pumpe for grab valves*)
		MXgrabPreJoySig: BOOL:=FALSE;
			(*preselection joy stick signal grab*)
		MDhg1JoySignal: REAL:=0.0;
			(*HG 1 joystick signal in +/- [%]*)
		MDhg1SystemPress: REAL:=0.0;
			(*HG 1 system pressure in bar*)
		MDhg1ExtAnalSign: REAL:=0.0;
			(*HG 1 external analog signal in [%]*)
		MDhg2ExtAnalSign: REAL:=0.0;
			(*HG 2 external analog signal in [%]*)
		MDhg2SystemPress: REAL:=0.0;
			(*HG 2 system pressure in bar*)
		MDx23Poti1Moorin: REAL:=0.0;
			(*add. grab mooring, free fall limit*)
		MDgrabJoySignal: REAL:=0.0;
			(*grab analog signal joystick +/-[%]*)
		MDgrabInclinatiX: REAL:=0.0;
			(*grab inclination in X*)
		MDgrabInclinatiY: REAL:=0.0;
			(*grab inclination in Y*)
		MDhg1PumpSignal: REAL:=0.0;
			(*HG 1 analog signal pump in [%]*)
		MDhg2PumpSignal: REAL:=0.0;
			(*HG 2 analog signal pump in [%]*)
		MDlmlLoadBoom: REAL:=0.0;
			(*lml load main boom in to*)
		MDropeLenghtHg1: REAL:=0.0;
			(*rope lenght hg 1 in m*)
		MDslackRopThresh: REAL:=0.0;
			(*ad slack rope limit: Threshold in to*)
		MDgrabSysPress: REAL:=0.0;
			(*hydraulic grab system pressure in bar*)
		MDratedEngSpeed: REAL:=0.0;
			(*rated engine speed in rpm*)
		MDpowerLimReduct: REAL:=0.0;
			(*maximum engine power regulator reduction to x [%]*)
		MDpdeDepth: REAL:=0.0;
			(*pde depth*)
		MDhoWiPumpSigOC: REAL:=0.0;
			(*hose winch pump signal (open circuit) *)
		MDhoWiPresSigOC: REAL:=0.0;
			(*hose winch pressure signal (open circuit) *)
		MDgrbPump2Signal: REAL:=0.0;
			(*grab analog signal pump 2 [%]*)
		MXpdeIgnoreCycle: BOOL:=FALSE;
			(*pde hydr. grab ignore cycle*)
	END_VAR
	VAR_EXTERNAL CONSTANT
		MSG_ERROR: UINT:=0;
	END_VAR
	VAR_EXTERNAL RETAIN
		MDhg1Reeving: REAL:=0.0;
			(*hg1 reeving*)
		MDgrabOffsetXaxi: REAL:=0.0;
			(*offset grab X axis*)
		MDgrabOffsetYaxi: REAL:=0.0;
			(*offset grab Y axis*)
		MDhg1LastRopeLen: REAL:=0.0;
			(*add. grab last rope length hg1*)
		MRgrab1VolOpen: REAL:=0.0;
			(*grab 1 volume open*)
		MRgrab1VolClose: REAL:=0.0;
			(*grab 1 volume close*)
	END_VAR
	VAR_EXTERNAL CONSTANT RETAIN
		CXadLEHydrGrab: BOOL:=FALSE;
			(*add. leffer hydraulic grab control*)
		CXslackRopePress: BOOL:=FALSE;
			(*slack rope control by pressure limit hoisting gear*)
		CXslackRopeLml: BOOL:=FALSE;
			(*slack rope control by lml  limit luffing gear*)
		CXhg1RopeLenMeas: BOOL:=FALSE;
			(*rope lenght measuring hg 1*)
		CXhg2RopeLenMeas: BOOL:=FALSE;
			(*rope lenght measuring hg 2*)
		CWhg1maxCurPumUp: UINT:=0;
			(*HG 1 maximum current pump up*)
		CWhg1minCurPumUp: UINT:=0;
			(*HG 1 minimum current pump up*)
		CWhg2minCurPumUp: UINT:=0;
			(*HG 2 minimum current pump up*)
		CWhg2maxCurPumUp: UINT:=0;
			(*HG 2 maximum current pump up*)
		CWhg1minCurTrimo: UINT:=0;
			(*HG 1 minimum current trimot*)
		CWhg1maxCurTrimo: UINT:=0;
			(*HG 1 maximum current trimot*)
		CWhg2maxCurTrimo: UINT:=0;
			(*HG 2 maximum current trimot*)
		CWhg2minCurTrimo: UINT:=0;
			(*HG 2 minimum current trimot*)
		CWp2MinCurValveB: UINT:=0;
			(*p2 ludv section min.current (B side) main*)
		CWp2MaxCurValveB: UINT:=0;
			(*p2 ludv section max.current (B side) main*)
		CWp2MaxValue: UINT:=0;
			(*p2 ludv section max. value [l/min]*)
		CWp2cur50liter: UINT:=0;
			(*p2 ludv section current for 50l/min*)
		CWp2cur100liter: UINT:=0;
			(*p2 ludv section current for 100l/min*)
		CWp2cur150liter: UINT:=0;
			(*p2 ludv section current for 150l/min*)
		CWp2cur200liter: UINT:=0;
			(*p2 ludv section current for 200l/min*)
		CWp2cur250liter: UINT:=0;
			(*p2 ludv section current for 250l/min*)
		CWp2cur300liter: UINT:=0;
			(*p2 ludv section current for 300l/min*)
		CWLEgrabPresLiOC: UINT:=0;
			(*Leffer: grab open/close pressure limit*)
		CWLEgrabPresMaCu: UINT:=0;
			(*Leffer: max. current pres. control grab open / close*)
		CWLEgrabPresMiCu: UINT:=0;
			(*Leffer: min. current pres. control grab open / close*)
		CDhg1IntTimeUp: REAL:=0.0;
			(*HG 1 integrator time rising signal*)
		CDhg1IntTimeDn: REAL:=0.0;
			(*HG 1 integrator time falling signal*)
		CDhg2IntTimeUp: REAL:=0.0;
			(*HG 2 integrator time rising signal*)
		CDhg2IntTimeDn: REAL:=0.0;
			(*HG 2 integrator time down falling signal*)
		CDgrabIntTimeUp: REAL:=0.0;
			(*ad grab integrator rising time*)
		CDgrabIntTimeDn: REAL:=0.0;
			(*ad grab integrator falling time*)
		CDgrabFilterTime: REAL:=0.0;
			(*add. grab: delay time pressure limit open/close *)
		CDgrabPresIntUp: REAL:=0.0;
			(*grab open integrated signal LUDV*)
		CDludvLeakOilSig: REAL:=0.0;
			(*ludv leakoil or pressure comp. signal*)
		CDscaleSlaRopTre: REAL:=0.0;
			(*scale slack rope treshhold*)
		CDscaleFreFalLim: REAL:=0.0;
			(*scale mooring free fall limitation*)
		CDLEgrabAutMidTi: REAL:=0.0;
			(*timer grab automatic midle position*)
		CDLEgrabMooPumSi: REAL:=0.0;
			(*joy stick signal hoisting gear pump at grab mooring works*)
		CDLEgrabMooTriSi: REAL:=0.0;
			(*trimot signal hoisting gear pump at grab mooring works*)
		CDLEignorePhiTop: REAL:=0.0;
			(*ignore, from top, the grab inclination*)
		CDLEignorePhiBot: REAL:=0.0;
			(*ignore, from bootom the grab inclination*)
		CDLEgrabIncXscal: REAL:=0.0;
			(*scale faktor X grab inclination grap [X°]*)
		CDLEgrabIncYscal: REAL:=0.0;
			(*scale faktor Y grab inclination grap [Y°]*)
		CDLEgrabSitUpPre: REAL:=0.0;
			(*system pressure hoisting gear, grab sits up*)
		CDLEslackRoPumSi: REAL:=0.0;
			(*joy stick signal hoisting gear pump at slack rope works*)
		CDengSpPumpRed: REAL:=0.0;
			(*engine speed for pump reduction [U/min]*)
		CDLEHoWiLoPreSig: REAL:=0.0;
			(*Leffer: grab hose winch low pressure signal *)
		CDLEHoWiHiPreSig: REAL:=0.0;
			(*Leffer: grab hose winch high pressure signal *)
		CDLEHoWinAutSig: REAL:=0.0;
			(*Leffer: grab hose winch automatic limitation signal [%]*)
		CDLEhoWinManSigB: REAL:=0.0;
			(*Leffer: grab hose winch (both) manual limitation signal [%]*)
		CDLEhoWinManSigS: REAL:=0.0;
			(*Leffer: grab hose winch (single) manual limitation signal [%]*)
	END_VAR
	VAR 
		LXinitOk: BOOL:=FALSE;
			(*init completed*)
		LXstart: BOOL:=FALSE;
			(*first scan completed*)
		LXgrabAutoMidle: BOOL:=FALSE;
			(*automatic move grap in midle position*)
		LXbuttonWinchSyn: BOOL:=FALSE;
		LXhoseLeWinManLi: BOOL:=FALSE;
		LXhoseLeWinManLo: BOOL:=FALSE;
		LXhoseReWinManLi: BOOL:=FALSE;
		LXhoseRiWinManLo: BOOL:=FALSE;
		LXcablWinManLift: BOOL:=FALSE;
		LXcablWinManLow: BOOL:=FALSE;
		LXhoseWinAutGrab: BOOL:=FALSE;
			(*grap hose winch automatic lifting *)
		LXhoseWinHighPr: BOOL:=FALSE;
		LXhg1ZeroPos: BOOL:=FALSE;
		LXhg2ZeroPos: BOOL:=FALSE;
		LXinitPdeStart: BOOL:=FALSE;
			(*delay bit 1. round*)
		LXstartMoorFreef: BOOL:=FALSE;
		LXSignInZero: BOOL:=FALSE;
		LXgrabLocStopOpe: BOOL:=FALSE;
		LXgrabLocStopClo: BOOL:=FALSE;
		LXgrabPumpClose: BOOL:=FALSE;
		LXgrabPumpOpen: BOOL:=FALSE;
		LXhydGrabWorking: BOOL:=FALSE;
		LXhoseWinManLift: BOOL:=FALSE;
		LXhoseWinManLow: BOOL:=FALSE;
		LXgrHoWiPumpAct: BOOL:=FALSE;
		LXgrHoWiPumpZero: BOOL:=FALSE;
		LX1: BOOL:=FALSE;
		LX2: BOOL:=FALSE;
		LX3: BOOL:=FALSE;
		LX4: BOOL:=FALSE;
		LWgrabSysPress: UINT:=0;
		LDgrabInclinatiX: REAL:=0.0;
		LDgrabInclinatiY: REAL:=0.0;
		LDropeLenghtHg1: REAL:=0.0;
		LDgrabFreeFalLim: REAL:=0.0;
		LDanalogSignal: REAL:=0.0;
		LDanalSigPumpLim: REAL:=0.0;
		LDanalSigPumpInt: REAL:=0.0;
		LDgrabStoreVol: REAL:=0.0;
		LDgrabStoVolOpen: REAL:=0.0;
		LDgrabStoVolClos: REAL:=0.0;
		LDp2MaxValue: REAL:=0.0;
		LDcalcCurrent2: REAL:=0.0;
		LDcalcComp2: REAL:=0.0;
		LDcalcVol2: REAL:=0.0;
		LDanaSigPresCont: REAL:=0.0;
		LDgrabPresIntSig: REAL:=0.0;
		LDgrHoWiAnalSig: REAL:=0.0;
		LDgrHoWiLiSigOut: REAL:=0.0;
		LDgrHoWiLiSigIn: REAL:=0.0;
		RS1: RS;
		RS2: RS;
		RS4: RS;
		RS5: RS;
		RS6: RS;
		RS7: RS;
		RS8: RS;
		RS9: RS;
		RS10: RS;
		RS11: RS;
		RS12: RS;
		RS13: RS;
		RS14: RS;
		RS15: RS;
		RS16: RS;
		RS17: RS;
		RS18: RS;
		RS19: RS;
		RS20: RS;
		RS21: RS;
		RS22: RS;
		RS23: RS;
		RS24: RS;
		RS25: RS;
		SR1: SR;
		SR2: SR;
		SR3: SR;
		R_TRIG1: R_TRIG;
		R_TRIG2: R_TRIG;
		R_TRIG3: R_TRIG;
		R_TRIG4: R_TRIG;
		R_TRIG5: R_TRIG;
		R_TRIG6: R_TRIG;
		F_TRIG1: F_TRIG;
		TOF1: TOF;
		TON2: TON;
		TON3: TON;
		TON4: TON;
		PowerStage1: PowerStage;
		PowerStage2: PowerStage;
		PowerStage3: PowerStage;
		PowerStage4: PowerStage;
		PowerStage5: PowerStage;
		Integrator1: Integrator;
		Integrator2: Integrator;
		Integrator3: Integrator;
		Integrator4: Integrator;
		Integrator5: Integrator;
		ScaleAI1: ScaleAI;
		ScaleAI2: ScaleAI;
		ScaleAI3: ScaleAI;
		ADcalculateQ1: ADcalculateQV024;
		digital1: FB_anaCylDigV010;
		analog1: FB_anaCylAnaV011;
		Message1: MsgRealReal;
		Message2: MsgRealReal;
		Message3: MsgRealReal;
		Message4: MsgRealReal;
		CorrValue_Bool1: CorrValue_Bool;
		CorrValue_Bool2: CorrValue_Bool;
		CorrValue_Bool3: CorrValue_Bool;
		CorrValue_UInt7: CorrValue_UInt;
		CorrValue_UInt8: CorrValue_UInt;
		CorrValue_Real1: CorrValue_Real;
		CorrValue_Real2: CorrValue_Real;
		CorrValue_Real3: CorrValue_Real;
		CorrValue_Real4: CorrValue_Real;
		CorrValue_Real5: CorrValue_Real;
		CorrValue_Real6: CorrValue_Real;
		CorrValue_Real7: CorrValue_Real;
		CorrValue_Real8: CorrValue_Real;
		CorrValue_Real9: CorrValue_Real;
		CorrValue_Real10: CorrValue_Real;
		CorrValue_Real11: CorrValue_Real;
		CorrValue_Real12: CorrValue_Real;
		CorrValue_Real13: CorrValue_Real;
		CorrValue_Real14: CorrValue_Real;
		CorrValue_Real15: CorrValue_Real;
		CorrValue_Real16: CorrValue_Real;
		CorrValue_Real17: CorrValue_Real;
	END_VAR
'FBD'
BODY
    WORKSPACE
        NETWORK_LIST_TYPE := NWTYPEFBD ;
        ACTIVE_NETWORK := 0 ;
    END_WORKSPACE
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_COMMENT,, are indicate with the therm "grap". ,1,5,27,5,);
B(B_COMMENT,,init first time,1,4,27,5,);
B(B_F,not,,11,6,16,9,);
B(B_JUMP,,init,16,7,18,9,);
B(B_VARIN,,LXinitOk,9,7,11,9,);
B(B_COMMENT,,This program ist used for a Leffer Hydraulic Grap with hose and cable  drums,1,1,33,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_VARIN,,CXadLEHydrGrab,9,4,11,6,);
B(B_COMMENT,,exit programm when hydr. grab is not preselected,1,1,27,2,);
B(B_RETURN,,,11,4,13,6,N);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_COMMENT,,jump to exit when hydr. grab is not activ,1,1,27,2,);
B(B_VARIN,,LXhydGrabWorking,16,7,18,9,);
B(B_F,@AND-2,,18,5,23,9,0N);
B(B_VARIN,,MXexitLEHydrGrab,9,4,11,6,);
B(B_VARIN,,MXadLEHydrGrab,9,5,11,7,);
B(B_F,@OR-2,,11,3,16,7,0N);
B(B_JUMP,,exit,23,6,25,8,);
L(16,5,17,5);
L(17,5,17,7);
L(17,7,18,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 34 ;
        NETWORK_BODY
B(B_COMMENT,,protect correction value change while program activ,1,1,27,2,);
B(B_VARIN,,MXadLEHydrGrab,15,7,17,9,);
B(B_VARIN,,IXpreselMooring,15,8,17,10,);
B(B_FB,RS,RS1,36,5,41,9,);
B(B_F,@OR-2,,13,3,18,7,NN);
B(B_VARIN,,LXstart,11,5,13,7,);
B(B_VARIN,,IXentrySwiClosed,11,4,13,6,);
B(B_F,@OR-2,,22,14,27,18,NN);
B(B_F,@AND-2,,29,11,34,15,);
B(B_VARIN,,CXhg1RopeLenMeas,14,9,16,11,);
B(B_VARIN,,CXhg2RopeLenMeas,14,10,16,12,);
B(B_F,@AND-5,,22,5,27,12,);
B(B_F,@OR-2,,43,10,48,14,);
B(B_VAROUT,,QTXwinStopValue,48,11,50,13,);
B(B_F,@AND-6,,22,18,27,26,00000N);
B(B_VARIN,,IXrelSlackRopPro,15,21,17,23,);
B(B_VAROUT,,MXpreSlackRoLml,49,21,51,23,);
B(B_F,@OR-2,,19,29,24,33,NN);
B(B_F,@AND-2,,26,26,31,30,);
B(B_FB,RS,RS2,33,18,38,22,);
B(B_F,@AND-2,,43,20,48,24,);
B(B_VARIN,,CXslackRopeLml,39,22,41,24,);
B(B_F,@AND-2,,43,24,48,28,);
B(B_VAROUT,,MXpreSlackRoPres,48,25,50,27,);
B(B_VARIN,,CXslackRopePress,41,26,43,28,);
B(B_VAROUT,,MXpreSlackRopPro,42,19,44,21,);
B(B_VAROUT,,QTXslackRopValue,42,18,44,20,);
B(B_VAROUT,,MXpreMooringGrab,42,6,44,8,);
B(B_VARIN,,CXadLmlDisabled,14,24,16,26,);
L(17,8,22,8);
L(17,9,22,9);
L(18,16,22,16);
L(17,9,17,17);
L(17,17,22,17);
L(35,8,36,8);
L(18,5,19,5);
L(27,16,28,16);
L(28,14,28,16);
L(28,14,29,14);
L(35,8,35,13);
L(19,5,19,28);
L(18,21,22,21);
L(18,8,18,31);
L(19,13,29,13);
L(34,13,35,13);
L(17,22,17,32);
L(19,7,22,7);
L(27,7,36,7);
L(16,10,22,10);
L(16,11,22,11);
L(20,11,20,24);
L(42,12,43,12);
L(42,7,42,12);
L(42,13,42,22);
L(42,13,43,13);
L(21,10,21,23);
L(19,20,22,20);
L(17,22,22,22);
L(21,23,22,23);
L(20,24,22,24);
L(17,32,19,32);
L(18,31,19,31);
L(24,31,25,31);
L(25,29,25,31);
L(25,29,26,29);
L(19,28,26,28);
L(31,28,32,28);
L(32,21,32,28);
L(32,21,33,21);
L(27,20,33,20);
L(38,20,42,20);
L(42,22,43,22);
L(48,22,49,22);
L(42,22,42,26);
L(42,26,43,26);
L(41,23,43,23);
L(41,7,42,7);
L(16,25,22,25);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 23 ;
        NETWORK_BODY
B(B_COMMENT,,scale system pressure,1,1,27,2,);
B(B_VARIN,,IWgrabSysPresP2,9,5,11,7,);
B(B_FB,ScaleAI,ScaleAI1,11,4,19,9,);
B(B_VARIN,,600.0,9,6,11,8,);
B(B_VARIN,,MSG_ERROR,17,11,19,13,);
B(B_VARIN,,178,17,9,19,11,);
B(B_FB,SR,SR1,26,16,31,20,0N);
B(B_F,@AND-2,,21,16,26,20,0N);
B(B_VARIN,,MXengStarterActi,17,18,19,20,);
B(B_VARIN,,177,36,16,38,18,);
B(B_VARIN,,MSG_ERROR,36,18,38,20,);
B(B_FB,MsgRealReal,Message1,22,8,31,15,);
B(B_FB,MsgRealReal,Message2,38,15,47,22,);
B(B_VAROUT,,MDgrabSysPress,19,5,21,7,);
B(B_F,real_to_uint,,19,2,30,5,);
B(B_VAROUT,,LWgrabSysPress,30,3,32,5,);
L(19,7,21,7);
L(19,8,20,8);
L(21,7,21,11);
L(21,11,22,11);
L(19,10,22,10);
L(19,12,22,12);
L(20,18,21,18);
L(19,19,21,19);
L(20,20,26,20);
L(26,19,26,20);
L(31,18,38,18);
L(20,8,20,20);
L(19,4,19,6);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 15 ;
        NETWORK_BODY
B(B_COMMENT,,scale inputs of the inclinometer,1,1,27,2,);
B(B_FB,SR,SR2,26,8,31,12,0N);
B(B_F,@AND-2,,21,8,26,12,0N);
B(B_VARIN,,MXengStarterActi,17,10,19,12,);
B(B_FB,MsgRealReal,Message3,38,7,47,14,);
B(B_VARIN,,MSG_ERROR,36,10,38,12,);
B(B_VARIN,,230,36,8,38,10,);
B(B_FB,ScaleAI,ScaleAI2,11,4,19,9,);
B(B_VARIN,,CDLEgrabIncXscal,9,6,11,8,);
B(B_VARIN,,IWgrabInclX_axis,9,5,11,7,);
B(B_VAROUT,,LDgrabInclinatiX,19,5,21,7,);
L(20,8,20,12);
L(20,10,21,10);
L(19,11,21,11);
L(20,12,26,12);
L(26,11,26,12);
L(31,10,38,10);
L(19,8,20,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_FB,ScaleAI,ScaleAI3,11,2,19,7,);
B(B_VARIN,,CDLEgrabIncYscal,9,4,11,6,);
B(B_VARIN,,IWgrabInclY_axis,9,3,11,5,);
B(B_VAROUT,,LDgrabInclinatiY,19,3,21,5,);
B(B_FB,SR,SR3,26,6,31,10,0N);
B(B_F,@AND-2,,21,6,26,10,0N);
B(B_VARIN,,MXengStarterActi,17,8,19,10,);
B(B_FB,MsgRealReal,Message4,38,5,47,12,);
B(B_VARIN,,232,36,6,38,8,);
B(B_VARIN,,MSG_ERROR,36,8,38,10,);
L(19,6,20,6);
L(20,6,20,10);
L(20,8,21,8);
L(19,9,21,9);
L(20,10,26,10);
L(26,9,26,10);
L(31,8,38,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_COMMENT,,scale analog signals from x23 potis:  ,1,1,27,2,);
B(B_VARIN,,IWkeybX23Poti1,9,5,11,7,);
B(B_F,uint_to_real,,11,4,22,7,);
B(B_F,@DIV,,24,4,29,8,);
B(B_VARIN,,1000.0,21,7,23,9,);
B(B_F,@MUL-2,,31,4,36,8,);
B(B_VAROUT,,MDx23Poti1Moorin,36,5,38,7,);
B(B_VARIN,,CDscaleFreFalLim,28,9,30,11,);
B(B_COMMENT,,0 - 2.000m,37,7,43,8,);
B(B_COMMENT,,mooring control,1,2,27,3,);
L(22,6,24,6);
L(23,7,23,8);
L(23,7,24,7);
L(30,7,30,10);
L(30,7,31,7);
L(29,6,31,6);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_F,uint_to_real,,11,2,22,5,);
B(B_F,@DIV,,24,2,29,6,);
B(B_VARIN,,1000.0,21,5,23,7,);
B(B_VARIN,,IWkeybX23Poti2,9,3,11,5,);
B(B_F,@MUL-2,,31,2,36,6,);
B(B_COMMENT,,slack rope protection~ lml stop 0-40to,1,1,27,2,);
B(B_VAROUT,,MDslackRopThresh,36,3,38,5,);
B(B_COMMENT,,0-40.0 to,37,5,44,6,);
B(B_VARIN,,CDscaleSlaRopTre,28,7,30,9,);
L(22,4,24,4);
L(23,5,23,6);
L(23,5,24,5);
L(29,4,31,4);
L(30,5,31,5);
L(30,5,30,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_VARIN,,MRgrab1VolOpen,9,3,11,5,);
B(B_VAROUT,,LDgrabStoVolOpen,11,3,13,5,);
B(B_COMMENT,,adjusted working volume ,1,1,27,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_VARIN,,MRgrab1VolClose,9,3,11,5,);
B(B_VAROUT,,LDgrabStoVolClos,11,3,13,5,);
B(B_COMMENT,,adjusted working volume ,1,1,27,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 5 ;
        NETWORK_BODY
B(B_VARIN,,CWp2MaxValue,9,2,11,4,);
B(B_F,uint_to_real,,11,1,22,4,);
B(B_VAROUT,,LDp2MaxValue,22,2,24,4,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_COMMENT,,preselction Leffer grap ,1,1,27,2,);
B(B_VARIN,,MXjoyGrabAssembl,9,4,11,6,);
B(B_VAROUT,,MXgrabPreJoySig,16,4,18,6,);
B(B_VARIN,,MXadLEHydrGrab,9,5,11,7,);
B(B_VAROUT,,MXenabGrabPresel,16,5,18,7,);
B(B_COMMENT,,Für Anzeige Greifer,26,6,38,7,);
B(B_VARIN,,MXassemblyOperat,9,6,11,8,);
B(B_F,@AND-3,,11,3,16,8,N0N);
L(16,5,16,6);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,TRUE,9,1,11,3,);
B(B_VAROUT,,LXstart,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 24 ;
        NETWORK_BODY
B(B_COMMENT,,Grap preselect,1,1,27,2,);
B(B_F,@GT-2,,24,15,29,19,);
B(B_F,@LT-2,,24,19,29,23,);
B(B_VARIN,,0.0,21,21,23,23,);
B(B_VAROUT,,MXgrabSigOpen,29,20,31,22,);
B(B_VAROUT,,MXgrabSigClose,29,16,31,18,);
B(B_VAROUT,,LDanalogSignal,29,11,31,13,);
B(B_F,sel,,24,10,29,15,);
B(B_VARIN,,MXgrabSigOpen,9,5,11,7,);
B(B_VARIN,,LXgrabLocStopOpe,9,4,11,6,);
B(B_VARIN,,LXgrabLocStopClo,9,8,11,10,);
B(B_VARIN,,MXgrabSigClose,9,9,11,11,);
B(B_F,@OR-2,,18,6,23,10,);
B(B_F,@AND-2,,11,7,16,11,0N);
B(B_F,@AND-2,,11,3,16,7,0N);
B(B_VARIN,,MDgrabJoySignal,20,12,22,14,);
L(22,21,24,21);
L(23,14,23,22);
L(23,22,24,22);
L(23,18,24,18);
L(23,14,24,14);
L(22,13,22,21);
L(22,17,24,17);
L(23,8,23,12);
L(23,12,24,12);
L(16,5,17,5);
L(17,5,17,8);
L(17,8,18,8);
L(16,9,18,9);
L(22,13,24,13);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_COMMENT,,digital logic grab cylinder,1,1,27,2,);
B(B_VARIN,,MXgrabSigClose,9,4,11,6,);
B(B_VARIN,,MXgrabSigOpen,9,5,11,7,);
B(B_VARIN,,MXgrabGlobalStop,9,6,11,8,);
B(B_VARIN,,TRUE,9,7,11,9,);
B(B_VARIN,,TRUE,9,8,11,10,);
B(B_VAROUT,,LXgrabLocStopClo,34,5,36,7,);
B(B_VAROUT,,LXgrabLocStopOpe,34,6,36,8,);
B(B_FB,FB_anaCylDigV010,digital1,11,3,34,12,);
B(B_VARIN,,LXSignInZero,9,10,11,12,);
B(B_VARIN,,MXstopAllFunctio,9,9,11,11,);
B(B_VAROUT,,MXgrabEnaPowStag,34,4,36,6,);
B(B_VAROUT,,MXhydrGrabActive,34,3,36,5,);
L(34,4,34,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 15 ;
        NETWORK_BODY
B(B_VARIN,,900.0,9,4,11,6,);
B(B_VARIN,,0.5,9,5,11,7,);
B(B_VARIN,,CDengSpPumpRed,9,6,11,8,);
B(B_VARIN,,1.0,9,7,11,9,);
B(B_VARIN,,MDratedEngSpeed,9,8,11,10,);
B(B_VARIN,,0.5,9,9,11,11,);
B(B_VARIN,,1.0,9,10,11,12,);
B(B_F,GPkx_dV010,,11,3,20,12,);
B(B_COMMENT,,900 U/min 50% limitationø^1400 U/min 0% limitation,29,1,44,3,);
B(B_COMMENT,,signal limitation in consideration to the engine speed,1,1,27,2,);
B(B_VAROUT,,LDanalSigPumpLim,27,4,29,6,);
B(B_F,@MUL-2,,22,3,27,7,);
B(B_VARIN,,LDanalogSignal,19,12,21,14,);
L(21,6,22,6);
L(20,5,22,5);
L(21,6,21,13);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_VAROUT,,LDanalSigPumpInt,20,5,22,7,);
B(B_FB,Integrator,Integrator1,11,2,20,8,);
B(B_VARIN,,TRUE,9,3,11,5,);
B(B_VARIN,,CDgrabIntTimeUp,9,5,11,7,);
B(B_VARIN,,LDanalSigPumpLim,9,4,11,6,);
B(B_VARIN,,CDgrabIntTimeDn,9,6,11,8,);
B(B_VAROUT,,LXSignInZero,25,2,27,4,);
B(B_VARIN,,0.0,18,0,20,2,);
B(B_F,EQ_R,,20,1,25,5,);
L(20,4,20,6);
L(20,1,20,3);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_F,@GT-2,,13,3,18,7,);
B(B_VARIN,,0.0,9,5,11,7,);
B(B_F,@LT-2,,13,7,18,11,);
B(B_COMMENT,,pump signal close or open,1,1,27,2,);
B(B_VAROUT,,LXgrabPumpClose,18,4,20,6,);
B(B_VAROUT,,LXgrabPumpOpen,18,8,20,10,);
B(B_VARIN,,LDanalSigPumpInt,10,4,12,6,);
L(11,6,13,6);
L(12,9,13,9);
L(11,10,13,10);
L(12,5,12,9);
L(11,6,11,10);
L(12,5,13,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_F,sel,,11,3,16,8,);
B(B_VARIN,,LXgrabPumpClose,9,4,11,6,);
B(B_VARIN,,LDgrabStoVolOpen,9,5,11,7,);
B(B_VARIN,,LDgrabStoVolClos,9,6,11,8,);
B(B_VAROUT,,LDgrabStoreVol,16,4,18,6,);
B(B_COMMENT,,volume control depend on open or close,1,1,27,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 25 ;
        NETWORK_BODY
B(B_VARIN,,CWp2cur50liter,8,7,10,9,);
B(B_VARIN,,CWp2cur100liter,8,8,10,10,);
B(B_VARIN,,CWp2cur150liter,8,9,10,11,);
B(B_VARIN,,CWp2cur200liter,8,10,10,12,);
B(B_VARIN,,CWp2cur250liter,8,11,10,13,);
B(B_VARIN,,CWp2cur300liter,8,12,10,14,);
B(B_VARIN,,CWp2MinCurValveB,8,6,10,8,);
B(B_VARIN,,LDp2MaxValue,8,4,10,6,);
B(B_VARIN,,LDanalSigPumpInt,8,5,10,7,);
B(B_VAROUT,,LDcalcCurrent2,28,3,30,5,);
B(B_VAROUT,,MDgrbPump2Signal,28,4,30,6,);
B(B_VAROUT,,LDcalcComp2,28,5,30,7,);
B(B_VARIN,,CWp2MaxCurValveB,8,17,10,19,);
B(B_VARIN,,MDgrabSysPress,8,18,10,20,);
B(B_VARIN,,CDludvLeakOilSig,8,19,10,21,);
B(B_VAROUT,,LDcalcVol2,28,6,30,8,);
B(B_VARIN,,MDpowerLimReduct,8,20,10,22,);
B(B_VARIN,,CDgrabIntTimeUp,8,21,10,23,);
B(B_VARIN,,LDgrabStoreVol,8,3,10,5,);
B(B_FB,ADcalculateQV024,ADcalculateQ1,10,2,28,23,);
L(10,14,10,18);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 31 ;
        NETWORK_BODY
B(B_F,@AND-2,,11,3,16,7,);
B(B_VARIN,,MXsetGrabZero,9,5,11,7,);
B(B_VARIN,,MXpresGrabZero,9,4,11,6,);
B(B_F,sel,,33,3,38,8,);
B(B_VAROUT,,MDgrabOffsetXaxi,38,4,40,6,);
B(B_VARIN,,0.0,24,8,26,10,);
B(B_VARIN,,LDgrabInclinatiX,23,9,25,11,);
B(B_VARIN,,MDgrabOffsetXaxi,31,5,33,7,);
B(B_VAROUT,,MDgrabOffsetYaxi,38,18,40,20,);
B(B_VARIN,,0.0,24,22,26,24,);
B(B_VARIN,,LDgrabInclinatiY,23,23,25,25,);
B(B_VARIN,,MDgrabOffsetYaxi,24,27,26,29,);
B(B_VARIN,,MDgrabOffsetYaxi,31,19,33,21,);
B(B_VARIN,,MDgrabOffsetXaxi,24,13,26,15,);
B(B_COMMENT,,set cursor in zero position ,1,1,28,2,);
B(B_F,@ADD-2,,26,7,31,11,);
B(B_F,@SUB,,26,11,31,15,);
B(B_F,@ADD-2,,26,21,31,25,);
B(B_F,@SUB,,26,25,31,29,);
B(B_F,sel,,33,17,38,22,);
B(B_F,@MUL-2,,33,11,38,15,);
B(B_VAROUT,,MDgrabInclinatiX,38,12,40,14,);
B(B_VARIN,,-1.0,30,15,32,17,);
B(B_F,@MUL-2,,33,25,38,29,);
B(B_VARIN,,-1.0,30,29,32,31,);
B(B_VAROUT,,MDgrabInclinatiY,38,26,40,28,);
B(B_COMMENT,,global retain,39,20,45,21,);
B(B_COMMENT,,global retain,39,6,45,7,);
L(32,7,32,9);
L(32,7,33,7);
L(25,10,26,10);
L(32,21,32,23);
L(32,21,33,21);
L(25,24,26,24);
L(25,24,25,27);
L(16,5,33,5);
L(17,5,17,19);
L(25,10,25,13);
L(31,9,32,9);
L(25,13,26,13);
L(31,23,32,23);
L(25,27,26,27);
L(17,19,33,19);
L(31,13,33,13);
L(32,14,33,14);
L(32,14,32,16);
L(31,27,33,27);
L(32,28,33,28);
L(32,28,32,30);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 26 ;
        NETWORK_BODY
B(B_COMMENT,,pressure control grab open / close ,1,1,27,2,);
B(B_VARIN,,LWgrabSysPress,9,7,11,9,);
B(B_F,@GT-2,,11,6,16,10,);
B(B_F,@AND-2,,18,5,23,9,);
B(B_F,@AND-2,,18,17,23,21,);
B(B_FB,RS,RS4,36,5,41,9,);
B(B_FB,RS,RS5,36,17,41,21,);
B(B_VARIN,,1.0,61,6,63,8,);
B(B_VARIN,,100.0,62,7,64,9,);
B(B_VAROUT,,LDanaSigPresCont,70,3,72,5,);
B(B_F,@AND-2,,50,2,55,6,);
B(B_F,@OR-2,,57,2,62,6,);
B(B_F,sel,,65,2,70,7,);
B(B_FB,TON,TON2,29,5,34,9,);
B(B_F,real_to_time,,16,13,27,16,);
B(B_F,@MUL-2,,11,13,16,17,);
B(B_FB,TON,TON3,29,17,34,21,);
B(B_F,@OR-2,,29,21,34,25,N);
B(B_VARIN,,MXgrabSigClose,27,23,29,25,);
B(B_F,@OR-2,,43,5,48,9,);
B(B_VARIN,,CWLEgrabPresLiOC,9,8,11,10,);
B(B_VARIN,,CDgrabFilterTime,9,14,11,16,);
B(B_VARIN,,1000.0,9,15,11,17,);
B(B_VARIN,,LXgrabPumpOpen,15,22,17,24,);
B(B_F,@GT-2,,11,17,16,21,);
B(B_VARIN,,CWLEgrabPresLiOC,9,19,11,21,);
B(B_VARIN,,LWgrabSysPress,9,18,11,20,);
B(B_VARIN,,MXgrabSigClose,48,3,50,5,);
B(B_VARIN,,LXgrabPumpClose,15,4,17,6,);
B(B_F,@OR-2,,18,9,23,13,N);
B(B_VARIN,,MXgrabSigOpen,16,11,18,13,);
B(B_F,@AND-2,,50,19,55,23,);
B(B_VARIN,,MXgrabSigOpen,48,21,50,23,);
B(B_COMMENT,,Drucksteuerung sekundär (Optional),1,2,27,3,);
L(16,8,18,8);
L(17,7,18,7);
L(35,8,36,8);
L(35,20,36,20);
L(41,7,42,7);
L(35,20,35,23);
L(49,5,50,5);
L(56,5,57,5);
L(63,5,65,5);
L(64,6,65,6);
L(63,5,63,7);
L(64,6,64,8);
L(55,4,57,4);
L(62,4,65,4);
L(23,7,29,7);
L(34,7,36,7);
L(35,8,35,11);
L(27,15,28,15);
L(28,8,29,8);
L(23,19,29,19);
L(34,19,36,19);
L(34,23,35,23);
L(28,8,28,20);
L(28,20,29,20);
L(42,7,43,7);
L(48,7,49,7);
L(41,19,42,19);
L(17,23,29,23);
L(16,19,18,19);
L(17,20,18,20);
L(17,20,17,23);
L(17,5,17,11);
L(17,11,18,11);
L(23,11,35,11);
L(55,21,56,21);
L(49,21,50,21);
L(56,5,56,21);
L(42,8,43,8);
L(42,8,42,19);
L(49,5,49,21);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 16 ;
        NETWORK_BODY
B(B_COMMENT,,pressure control grab open / close ,1,1,27,2,);
B(B_FB,Integrator,Integrator2,26,3,35,9,);
B(B_VAROUT,,LDgrabPresIntSig,35,4,37,6,);
B(B_VARIN,,LDanaSigPresCont,24,5,26,7,);
B(B_VARIN,,CDgrabPresIntUp,24,6,26,8,);
B(B_F,sel,,19,8,24,13,);
B(B_F,@OR-2,,11,8,16,12,);
B(B_VARIN,,LXgrabPumpClose,9,9,11,11,);
B(B_VARIN,,LXgrabPumpOpen,9,10,11,12,);
B(B_VARIN,,10000.0,15,12,17,14,);
B(B_VARIN,,CDgrabIntTimeDn,16,13,18,15,);
B(B_VARIN,,TRUE,24,4,26,6,);
L(25,8,26,8);
L(24,10,25,10);
L(16,10,19,10);
L(18,12,19,12);
L(17,11,19,11);
L(17,11,17,13);
L(18,12,18,14);
L(25,8,25,10);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_COMMENT,,power stage pressure control grap,1,1,28,2,);
B(B_FB,PowerStage,PowerStage1,11,4,20,12,);
B(B_VAROUT,,QWgrabPressContr,20,5,22,7,);
B(B_VARIN,,0.0,9,7,11,9,);
B(B_VARIN,,100.0,9,8,11,10,);
B(B_VARIN,,CWLEgrabPresMaCu,9,10,11,12,);
B(B_VARIN,,CWLEgrabPresMiCu,9,9,11,11,);
B(B_VARIN,,LDgrabPresIntSig,9,6,11,8,);
B(B_VARIN,,MXminEngineSpeed,9,5,11,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 29 ;
        NETWORK_BODY
B(B_VARIN,,ITXleHoseWinchUp,19,20,21,22,);
B(B_F,@OR-3,,29,11,34,16,0N);
B(B_COMMENT,,preselection automatic hose winches and cable winch,1,1,27,2,);
B(B_F,@AND-2,,21,15,26,19,0N);
B(B_F,@AND-2,,21,11,26,15,);
B(B_VARIN,,MXhg1WinchStand,33,8,35,10,);
B(B_VARIN,,MXhg2WinchStand,33,9,35,11,);
B(B_VARIN,,MXstopAllFunctio,19,17,21,19,);
B(B_FB,R_TRIG,R_TRIG1,11,4,18,7,);
B(B_VARIN,,ITXautoHoseWinch,9,5,11,7,);
B(B_VARIN,,MXadLEHydrGrab,18,16,20,18,);
B(B_VARIN,,QTXautoHoseWinch,17,13,19,15,);
B(B_F,@AND-2,,21,4,26,8,);
B(B_VARIN,,ITXriHoseWinchUp,19,21,21,23,);
B(B_F,@AND-3,,35,7,40,12,);
B(B_FB,RS,RS6,42,4,47,8,);
B(B_VAROUT,,QTXautoHoseWinch,48,5,50,7,);
B(B_VARIN,,ITXleHoseWinchDn,19,22,21,24,);
B(B_VARIN,,ITXriHoseWinchDn,19,23,21,25,);
B(B_VAROUT,,LXhoseWinAutGrab,48,6,50,8,);
B(B_VARIN,,ITXcableWinchUp,19,24,21,26,);
B(B_VARIN,,ITXcableWinchDn,19,25,21,27,);
B(B_VAROUT,,MXenabAutHoseWin,48,7,50,9,);
B(B_F,@OR-7,,21,19,26,28,);
B(B_VARIN,,MXexitLEHydrGrab,19,26,21,28,);
L(27,14,29,14);
L(27,14,27,17);
L(28,15,29,15);
L(20,17,21,17);
L(26,17,27,17);
L(19,13,21,13);
L(26,13,29,13);
L(34,11,34,13);
L(34,11,35,11);
L(28,15,28,21);
L(20,7,21,7);
L(20,7,20,17);
L(19,6,19,13);
L(19,14,21,14);
L(18,6,21,6);
L(26,6,42,6);
L(40,9,41,9);
L(41,7,41,9);
L(41,7,42,7);
L(47,6,48,6);
L(48,6,48,7);
L(48,7,48,8);
L(26,21,28,21);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_F,@AND-2,,19,4,24,8,0N);
B(B_VAROUT,,QTXleHoseWinchUp,25,5,27,7,);
B(B_VARIN,,ITXleHoseWinchUp,10,5,12,7,);
B(B_COMMENT,,preselection left hose winches manuell or automatic  lifting,1,1,27,2,);
B(B_VAROUT,,LXhoseLeWinManLi,25,6,27,8,);
B(B_F,@OR-2,,12,3,17,7,);
B(B_VARIN,,LXhoseWinAutGrab,10,4,12,6,);
B(B_VARIN,,ITXleHoseWinchDn,10,8,12,10,);
B(B_VARIN,,MXstopAllFunctio,10,9,12,11,);
B(B_F,@OR-2,,12,7,17,11,);
L(18,7,19,7);
L(24,6,25,6);
L(18,7,18,9);
L(25,6,25,7);
L(17,5,18,5);
L(18,5,18,6);
L(18,6,19,6);
L(17,9,18,9);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_VARIN,,QTXautoHoseWinch,10,7,12,9,);
B(B_F,@AND-2,,19,3,24,7,0N);
B(B_VARIN,,ITXleHoseWinchDn,17,4,19,6,);
B(B_VARIN,,ITXleHoseWinchUp,10,8,12,10,);
B(B_COMMENT,,preselection left hose winches manuell lowering ,1,1,27,2,);
B(B_VAROUT,,QTXleHoseWinchDn,25,4,27,6,);
B(B_VARIN,,MXstopAllFunctio,10,9,12,11,);
B(B_VAROUT,,LXhoseLeWinManLo,25,5,27,7,);
B(B_F,@OR-3,,12,6,17,11,);
L(18,6,19,6);
L(24,5,25,5);
L(18,6,18,8);
L(25,5,25,6);
L(17,8,18,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_F,@AND-2,,19,4,24,8,0N);
B(B_VAROUT,,QTXriHoseWinchUp,25,5,27,7,);
B(B_VARIN,,ITXriHoseWinchUp,10,5,12,7,);
B(B_COMMENT,,preselection right  hose winches manuell or automatic lifting,1,1,27,2,);
B(B_VAROUT,,LXhoseReWinManLi,25,6,27,8,);
B(B_F,@OR-2,,12,3,17,7,);
B(B_VARIN,,LXhoseWinAutGrab,10,4,12,6,);
B(B_VARIN,,ITXriHoseWinchDn,10,8,12,10,);
B(B_VARIN,,MXstopAllFunctio,10,9,12,11,);
B(B_F,@OR-2,,12,7,17,11,);
L(18,7,19,7);
L(24,6,25,6);
L(18,7,18,9);
L(25,6,25,7);
L(17,5,18,5);
L(18,5,18,6);
L(18,6,19,6);
L(17,9,18,9);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_VARIN,,QTXautoHoseWinch,10,7,12,9,);
B(B_F,@AND-2,,19,3,24,7,0N);
B(B_VARIN,,ITXriHoseWinchDn,17,4,19,6,);
B(B_VARIN,,ITXriHoseWinchUp,10,8,12,10,);
B(B_COMMENT,,preselection right hose winches manuell lowering ,1,1,27,2,);
B(B_VAROUT,,QTXriHoseWinchDn,25,4,27,6,);
B(B_VARIN,,MXstopAllFunctio,10,9,12,11,);
B(B_VAROUT,,LXhoseRiWinManLo,25,5,27,7,);
B(B_F,@OR-3,,12,6,17,11,);
L(18,6,19,6);
L(24,5,25,5);
L(18,6,18,8);
L(25,5,25,6);
L(17,8,18,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_COMMENT,,preselection cable winch manuell and automatic lifting,1,1,27,2,);
B(B_F,@AND-2,,19,4,24,8,0N);
B(B_VARIN,,ITXcableWinchUp,10,5,12,7,);
B(B_F,@OR-2,,12,3,17,7,);
B(B_VARIN,,LXhoseWinAutGrab,10,4,12,6,);
B(B_VAROUT,,LXcablWinManLift,25,7,27,9,);
B(B_VAROUT,,QTXcableWinchUp,25,5,27,7,);
B(B_VAROUT,,QXcableDrumLift,25,6,27,8,);
B(B_VARIN,,ITXcableWinchDn,10,8,12,10,);
B(B_VARIN,,MXstopAllFunctio,10,9,12,11,);
B(B_F,@OR-2,,12,7,17,11,);
L(18,7,19,7);
L(18,7,18,9);
L(17,5,18,5);
L(18,5,18,6);
L(18,6,19,6);
L(24,6,25,6);
L(25,6,25,8);
L(17,9,18,9);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_COMMENT,,preselection cable winch manuell lowering,1,1,27,2,);
B(B_VARIN,,QTXautoHoseWinch,10,7,12,9,);
B(B_F,@AND-2,,19,3,24,7,0N);
B(B_VARIN,,ITXcableWinchDn,17,4,19,6,);
B(B_VARIN,,ITXcableWinchUp,10,8,12,10,);
B(B_VAROUT,,QTXcableWinchDn,25,4,27,6,);
B(B_VARIN,,MXstopAllFunctio,10,9,12,11,);
B(B_VAROUT,,QXcableDrumLower,25,5,27,7,);
B(B_VAROUT,,LXcablWinManLow,25,6,27,8,);
B(B_F,@OR-3,,12,6,17,11,);
L(18,6,19,6);
L(24,5,25,5);
L(18,6,18,8);
L(25,5,25,7);
L(17,8,18,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_COMMENT,,cable drum active valve  or feed action cylinder pressure drop valve,1,1,27,2,);
B(B_F,@OR-2,,12,3,17,7,);
B(B_VARIN,,QXcableDrumLift,10,4,12,6,);
B(B_VARIN,,QXcableDrumLower,10,5,12,7,);
B(B_VAROUT,,MXrelGrabValves,17,4,19,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_VARIN,,LXhoseReWinManLi,10,3,12,5,);
B(B_VARIN,,LXhoseLeWinManLi,10,2,12,4,);
B(B_F,@OR-2,,12,1,17,5,);
B(B_VAROUT,,LXhoseWinManLift,17,2,19,4,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_F,@OR-2,,12,1,17,5,);
B(B_VARIN,,LXhoseLeWinManLo,10,2,12,4,);
B(B_VARIN,,LXhoseRiWinManLo,10,3,12,5,);
B(B_VAROUT,,LXhoseWinManLow,17,2,19,4,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 15 ;
        NETWORK_BODY
B(B_F,sel,,18,5,23,10,);
B(B_F,sel,,24,4,29,9,);
B(B_VARIN,,0.0,16,7,18,9,);
B(B_VAROUT,,LDgrHoWiAnalSig,29,5,31,7,);
B(B_VARIN,,LXhoseWinManLow,22,3,24,5,);
B(B_F,@MUL-2,,18,10,23,14,);
B(B_VARIN,,-1.0,16,12,18,14,);
B(B_F,to_real,,11,10,18,13,);
B(B_VARIN,,100.0,9,11,11,13,);
B(B_COMMENT,,analog part grab hose winch control,1,1,27,2,);
B(B_F,@OR-2,,13,4,18,8,);
B(B_VARIN,,LXhoseWinAutGrab,11,5,13,7,);
B(B_VARIN,,LXhoseWinManLift,11,6,13,8,);
L(24,4,24,6);
L(23,7,24,7);
L(23,12,24,12);
L(24,8,24,12);
L(18,9,18,12);
L(18,6,18,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_COMMENT,,limitation signal out,1,1,27,2,);
B(B_F,sel,,17,6,22,11,);
B(B_VARIN,,CDLEhoWinManSigS,15,8,17,10,);
B(B_VARIN,,LXhoseLeWinManLi,9,5,11,7,);
B(B_VARIN,,LXhoseReWinManLi,9,6,11,8,);
B(B_F,@AND-2,,11,4,16,8,);
B(B_VARIN,,CDLEhoWinManSigB,15,9,17,11,);
B(B_F,sel,,23,5,28,10,);
B(B_VARIN,,CDLEHoWinAutSig,21,11,23,13,);
B(B_VARIN,,LXhoseWinAutGrab,21,3,23,5,);
B(B_VAROUT,,LDgrHoWiLiSigOut,28,6,30,8,);
L(16,6,16,8);
L(16,8,17,8);
L(23,9,23,12);
L(22,8,23,8);
L(23,4,23,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,limitation signal in,1,1,27,2,);
B(B_F,sel,,18,5,23,10,);
B(B_VAROUT,,LDgrHoWiLiSigIn,23,6,25,8,);
B(B_VARIN,,CDLEhoWinManSigS,16,7,18,9,);
B(B_VARIN,,CDLEhoWinManSigB,16,8,18,10,);
B(B_VARIN,,LXhoseLeWinManLo,9,4,11,6,);
B(B_VARIN,,LXhoseRiWinManLo,9,5,11,7,);
B(B_F,@AND-2,,11,3,16,7,);
L(17,5,17,7);
L(17,7,18,7);
L(16,5,17,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_COMMENT,,analog part grab hose winch control,1,1,27,2,);
B(B_VAROUT,,MDhoWiPumpSigOC,34,5,36,7,);
B(B_VARIN,,LDgrHoWiAnalSig,9,5,11,7,);
B(B_VAROUT,,LXgrHoWiPumpZero,34,6,36,8,);
B(B_VARIN,,100.0,9,6,11,8,);
B(B_VARIN,,300.0,9,10,11,12,);
B(B_VARIN,,300.0,9,9,11,11,);
B(B_FB,FB_anaCylAnaV011,analog1,11,4,34,12,);
B(B_F,NE_R,,34,1,39,5,);
B(B_VAROUT,,LXgrHoWiPumpAct,39,2,41,4,);
B(B_VARIN,,0.0,32,2,34,4,);
B(B_VARIN,,LDgrHoWiLiSigIn,9,8,11,10,);
B(B_VARIN,,LDgrHoWiLiSigOut,9,7,11,9,);
L(34,4,34,6);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,control brakes left hose winches,1,1,27,2,);
B(B_FB,RS,RS24,22,3,27,7,);
B(B_VAROUT,,QXhoseDrumBrakLe,27,4,29,6,);
B(B_F,@AND-2,,17,6,22,10,N);
B(B_VARIN,,LXgrHoWiPumpZero,15,8,17,10,);
B(B_VARIN,,QTXautoHoseWinch,9,4,11,6,);
B(B_VARIN,,QTXleHoseWinchUp,9,5,11,7,);
B(B_VARIN,,QTXleHoseWinchDn,9,6,11,8,);
B(B_F,@OR-3,,11,3,16,8,);
L(22,6,22,8);
L(16,5,16,8);
L(16,5,22,5);
L(16,8,17,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,control brakes right hose winches,1,1,27,2,);
B(B_FB,RS,RS25,23,3,28,7,);
B(B_F,@AND-2,,18,6,23,10,N);
B(B_VARIN,,LXgrHoWiPumpZero,16,8,18,10,);
B(B_VAROUT,,QXhoseDrumBrakRi,28,4,30,6,);
B(B_VARIN,,QTXautoHoseWinch,10,4,12,6,);
B(B_VARIN,,QTXriHoseWinchUp,10,5,12,7,);
B(B_VARIN,,QTXriHoseWinchDn,10,6,12,8,);
B(B_F,@OR-3,,12,3,17,8,);
L(23,6,23,8);
L(17,5,17,8);
L(17,5,23,5);
L(17,8,18,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 20 ;
        NETWORK_BODY
B(B_COMMENT,,analog signal pressure control hose pump,1,1,27,2,);
B(B_VARIN,,QXhg1BrakeNormal,9,7,11,9,);
B(B_VARIN,,QXhg1BrakeFastSp,9,8,11,10,);
B(B_F,@OR-2,,11,6,16,10,);
B(B_F,@AND-2,,18,3,23,7,);
B(B_VARIN,,MXhg1AnalSigPos,16,4,18,6,);
B(B_VARIN,,QXhg2BrakeNormal,9,13,11,15,);
B(B_VARIN,,QXhg2BrakeFastSp,9,14,11,16,);
B(B_F,@OR-2,,11,12,16,16,);
B(B_F,@AND-2,,18,9,23,13,);
B(B_VARIN,,MXhg2AnalSigPos,16,10,18,12,);
B(B_VAROUT,,LXhoseWinHighPr,31,4,33,6,);
B(B_VARIN,,MXlgAnalSigNeg,16,16,18,18,);
B(B_F,@AND-2,,18,15,23,19,);
B(B_VARIN,,QXlgBrake,16,17,18,19,);
B(B_F,@OR-3,,26,3,31,8,);
L(16,8,17,8);
L(17,6,17,8);
L(17,6,18,6);
L(16,14,17,14);
L(17,12,17,14);
L(17,12,18,12);
L(23,11,24,11);
L(24,6,24,11);
L(24,6,26,6);
L(23,5,26,5);
L(23,17,25,17);
L(25,7,25,17);
L(25,7,26,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_COMMENT,,pressure control hose winch,1,1,27,2,);
B(B_VARIN,,LXhoseWinHighPr,10,7,12,9,);
B(B_VARIN,,CDLEHoWiHiPreSig,10,9,12,11,);
B(B_VARIN,,CDLEHoWiLoPreSig,10,8,12,10,);
B(B_F,sel,,12,6,17,11,);
B(B_F,sel,,19,3,24,8,);
B(B_VARIN,,LXgrHoWiPumpAct,17,4,19,6,);
B(B_VARIN,,0.0,17,5,19,7,);
B(B_VAROUT,,MDhoWiPresSigOC,24,4,26,6,);
L(18,7,19,7);
L(18,7,18,8);
L(17,8,18,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 32 ;
        NETWORK_BODY
B(B_FB,R_TRIG,R_TRIG2,11,9,18,12,);
B(B_VARIN,,ITXgrabAutoMidd,9,10,11,12,);
B(B_VARIN,,MXadLEHydrGrab,16,12,18,14,);
B(B_VARIN,,QTXgrabAutoMiddl,18,16,20,18,);
B(B_FB,TOF,TOF1,31,20,36,24,);
B(B_F,@MUL-2,,12,27,17,31,);
B(B_F,real_to_time,,18,27,29,30,);
B(B_VARIN,,1000.0,9,27,11,29,);
B(B_VARIN,,CDLEgrabAutMidTi,10,29,12,31,);
B(B_F,@AND-2,,20,14,25,18,);
B(B_F,@AND-2,,21,9,26,13,);
B(B_FB,RS,RS7,28,9,33,13,);
B(B_F,@AND-3,,18,20,23,25,);
B(B_VARIN,,LDropeLenghtHg1,9,24,11,26,);
B(B_VARIN,,0.0,9,25,11,27,);
B(B_F,@GT-2,,11,23,16,27,);
B(B_VARIN,,MXgrabSigOpen,16,22,18,24,);
B(B_COMMENT,,grap iclination adjustment manual or automatic,1,1,27,2,);
B(B_F,@AND-2,,38,9,43,13,0N);
B(B_VAROUT,,LXgrabAutoMidle,37,21,39,23,);
B(B_F,@OR-2,,45,8,50,12,);
B(B_VAROUT,,QTXgrabAutoMiddl,50,9,52,11,);
B(B_VARIN,,MXflashSignal,36,5,38,7,);
B(B_F,@AND-2,,38,4,43,8,);
B(B_VARIN,,LXgrabAutoMidle,36,6,38,8,);
L(19,11,19,16);
L(11,28,11,29);
L(11,29,12,29);
L(17,29,18,29);
L(29,29,30,29);
L(30,23,31,23);
L(19,16,20,16);
L(18,11,21,11);
L(20,12,21,12);
L(20,12,20,13);
L(18,13,20,13);
L(27,12,28,12);
L(27,12,27,16);
L(34,11,34,14);
L(34,14,34,19);
L(25,16,27,16);
L(26,11,28,11);
L(16,25,17,25);
L(17,24,17,25);
L(17,24,18,24);
L(17,19,34,19);
L(17,19,17,22);
L(17,22,18,22);
L(30,23,30,29);
L(23,22,31,22);
L(36,22,37,22);
L(37,12,37,22);
L(37,12,38,12);
L(33,11,38,11);
L(44,10,45,10);
L(44,6,44,10);
L(43,6,44,6);
L(43,11,45,11);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 41 ;
        NETWORK_BODY
B(B_COMMENT,,grap inclination back/forward adjustment manual  by push button on joy stick,1,1,29,2,);
B(B_VARIN,,MXJoyGrabMovBaRi,10,9,12,11,);
B(B_VARIN,,MXadLEHydrGrab,10,8,12,10,);
B(B_VARIN,,MXJoyGrabMovFoLe,10,10,12,12,);
B(B_COMMENT,,valve 4T-Y36 (S2)-grap position in the midle,2,2,30,3,);
B(B_COMMENT,,valve 4T-V36(S2)+4T-Y37(S3)-grap move forward,3,3,31,4,);
B(B_COMMENT,,valve 4T-V35(S1)+4T-Y37(S3)-grap move back,4,4,32,5,);
B(B_F,@OR-2,,24,31,29,35,);
B(B_VAROUT,,QXgrabAdjustS3,29,32,31,34,);
B(B_F,@AND-2,,17,24,22,28,);
B(B_VARIN,,LXgrabAutoMidle,9,26,11,28,);
B(B_F,@AND-4,,17,6,22,12,N00N);
B(B_VAROUT,,QXgrabAdjustS1,22,7,24,9,);
B(B_VARIN,,MXJoyPreSlewLeRi,10,7,12,9,);
B(B_F,@AND-4,,17,12,22,18,N);
B(B_F,@AND-4,,17,18,22,24,N0N);
B(B_F,@OR-3,,24,17,29,22,);
B(B_VAROUT,,QXgrabAdjustS2,29,18,31,20,);
B(B_F,@AND-4,,17,28,22,34,N00N);
B(B_F,@AND-4,,17,34,22,40,N0N);
L(15,9,15,15);
L(15,15,15,21);
L(12,10,17,10);
L(12,11,17,11);
L(14,10,14,16);
L(14,16,17,16);
L(13,11,13,17);
L(13,17,17,17);
L(14,16,14,22);
L(14,22,17,22);
L(13,17,13,23);
L(13,23,17,23);
L(15,31,15,37);
L(23,33,24,33);
L(23,34,24,34);
L(14,32,17,32);
L(13,33,17,33);
L(14,32,14,38);
L(14,38,17,38);
L(13,33,13,39);
L(13,39,17,39);
L(15,21,15,31);
L(14,22,14,32);
L(13,23,13,33);
L(15,26,17,26);
L(11,27,17,27);
L(22,26,23,26);
L(12,9,17,9);
L(12,8,17,8);
L(15,15,17,15);
L(16,14,17,14);
L(16,8,16,14);
L(22,14,23,14);
L(15,21,17,21);
L(22,20,24,20);
L(23,14,23,19);
L(23,19,24,19);
L(23,21,24,21);
L(23,21,23,26);
L(16,14,16,20);
L(16,20,17,20);
L(15,31,17,31);
L(16,20,16,30);
L(16,30,17,30);
L(22,30,23,30);
L(23,30,23,33);
L(15,37,17,37);
L(16,30,16,36);
L(16,36,17,36);
L(22,36,23,36);
L(23,34,23,36);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 42 ;
        NETWORK_BODY
B(B_COMMENT,,grab inclination left right adjustment manual by push button on joy stick,2,1,28,2,);
B(B_COMMENT,,valve S5 grab position in the midle,3,2,29,3,);
B(B_COMMENT,,valve S4+S6 grab position left,4,3,30,4,);
B(B_COMMENT,,valve S5+S6 grab position right,5,4,31,5,);
B(B_VARIN,,MXadLEHydrGrab,10,9,12,11,);
B(B_VARIN,,MXJoyPreSlewLeRi,10,8,12,10,);
B(B_COMMENT,,grab moves in back or right position,24,10,38,11,);
B(B_F,@AND-4,,17,7,22,13,000N);
B(B_VARIN,,LXgrabAutoMidle,9,27,11,29,);
B(B_COMMENT,,grab moves forward or in left position,31,35,46,36,);
B(B_COMMENT,,grab moves in midle position,31,21,42,22,);
B(B_F,@OR-2,,24,32,29,36,);
B(B_F,@AND-2,,17,25,22,29,);
B(B_F,@AND-4,,17,13,22,19,);
B(B_F,@AND-4,,17,19,22,25,00N);
B(B_VAROUT,,QXgrabAdjustS5,29,19,31,21,);
B(B_F,@OR-3,,24,18,29,23,);
B(B_F,@AND-4,,17,29,22,35,000N);
B(B_F,@AND-4,,17,35,22,41,00N);
B(B_VAROUT,,QXgrabAdjustS4,22,8,24,10,);
B(B_VAROUT,,QXgrabAdjustS6,29,33,31,35,);
B(B_VARIN,,MXJoyGrabMovBaRi,10,11,12,13,);
B(B_VARIN,,MXJoyGrabMovFoLe,10,10,12,12,);
L(12,9,17,9);
L(12,10,17,10);
L(12,11,17,11);
L(12,12,17,12);
L(15,16,15,22);
L(14,17,14,23);
L(13,18,13,24);
L(15,32,15,38);
L(14,33,14,39);
L(13,34,13,40);
L(15,22,15,32);
L(14,23,14,33);
L(13,24,13,34);
L(11,28,17,28);
L(15,27,17,27);
L(14,17,17,17);
L(13,18,17,18);
L(15,16,17,16);
L(16,15,17,15);
L(14,23,17,23);
L(13,24,17,24);
L(15,22,17,22);
L(16,21,17,21);
L(14,33,17,33);
L(13,34,17,34);
L(15,32,17,32);
L(16,31,17,31);
L(14,39,17,39);
L(13,40,17,40);
L(15,38,17,38);
L(16,37,17,37);
L(23,34,24,34);
L(23,35,24,35);
L(22,27,23,27);
L(22,15,23,15);
L(23,22,24,22);
L(23,20,24,20);
L(23,21,24,21);
L(23,15,23,20);
L(22,21,23,21);
L(23,22,23,27);
L(22,31,23,31);
L(23,31,23,34);
L(23,35,23,37);
L(22,37,23,37);
L(16,15,16,21);
L(16,21,16,31);
L(16,31,16,37);
L(16,9,16,15);
L(15,10,15,16);
L(14,11,14,17);
L(13,12,13,18);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 16 ;
        NETWORK_BODY
B(B_COMMENT,,grab slewing left or right by push ,1,1,27,2,);
B(B_VARIN,,MXjoyGrabSlewLe,10,7,12,9,);
B(B_VARIN,,MXjoyGrabSlewRi,10,6,12,8,);
B(B_VARIN,,MXadLEHydrGrab,10,5,12,7,);
B(B_VARIN,,MXJoyPreSlewLeRi,10,4,12,6,);
B(B_F,@AND-4,,16,3,21,9,00N);
B(B_F,@AND-4,,16,9,21,15,000N);
B(B_VAROUT,,QXgrabSlewLeft,21,4,23,6,);
B(B_VAROUT,,QXgrabSlewRight,21,10,23,12,);
L(15,11,16,11);
L(12,5,16,5);
L(12,6,16,6);
L(12,7,16,7);
L(12,8,16,8);
L(15,5,15,11);
L(14,12,16,12);
L(14,6,14,12);
L(13,13,16,13);
L(13,7,13,13);
L(12,8,12,14);
L(12,14,16,14);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_FB,RS,RS8,27,5,32,9,);
B(B_VARIN,,LXbuttonWinchSyn,18,10,20,12,);
B(B_F,@AND-2,,20,8,25,12,);
B(B_FB,R_TRIG,R_TRIG3,11,5,18,8,);
B(B_COMMENT,,winch synchronization,1,1,27,2,);
B(B_VAROUT,,LXbuttonWinchSyn,32,6,34,8,);
B(B_VARIN,,ITXgrabCtrl,9,6,11,8,);
B(B_VAROUT,,QTXgrabCtrl,32,7,34,9,);
L(26,8,27,8);
L(26,8,26,10);
L(19,10,20,10);
L(25,10,26,10);
L(18,7,27,7);
L(19,7,19,10);
L(32,7,32,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 27 ;
        NETWORK_BODY
B(B_COMMENT,,stop both winches in case of one winch stop (release other direction),1,1,27,2,);
B(B_F,@OR-2,,12,7,17,11,);
B(B_VARIN,,MXhg1LocStopInt,9,9,11,11,);
B(B_F,@OR-2,,12,12,17,16,);
B(B_VARIN,,MXhg1LocStopRapU,10,8,12,10,);
B(B_VARIN,,MXhg1LocStopRapD,10,14,12,16,);
B(B_F,@OR-2,,12,17,17,21,);
B(B_VARIN,,MXhg2LocStopInt,9,19,11,21,);
B(B_F,@OR-2,,12,22,17,26,);
B(B_VARIN,,MXhg2LocStopRapU,10,18,12,20,);
B(B_VARIN,,MXhg2LocStopRapD,10,24,12,26,);
B(B_F,EQ_R,,12,3,17,7,);
B(B_VARIN,,0.0,10,5,12,7,);
B(B_VARIN,,MDhg1JoySignal,10,4,12,6,);
B(B_FB,RS,RS9,19,7,24,11,);
B(B_FB,RS,RS10,19,12,24,16,);
B(B_FB,RS,RS11,19,17,24,21,);
B(B_FB,RS,RS12,19,22,24,26,);
B(B_VAROUT,,MXadStopHg2Up,25,8,27,10,);
B(B_VAROUT,,MXadStopHg2Dn,25,13,27,15,);
B(B_VAROUT,,MXadStopHg1Up,25,18,27,20,);
B(B_VAROUT,,MXadStopHg1Dn,25,23,27,25,);
B(B_VAROUT,,LX1,25,9,27,11,);
B(B_VAROUT,,LX2,25,14,27,16,);
B(B_VAROUT,,LX3,25,19,27,21,);
B(B_VAROUT,,LX4,25,24,27,26,);
L(11,14,12,14);
L(11,10,11,14);
L(11,10,12,10);
L(11,24,12,24);
L(11,20,11,24);
L(11,20,12,20);
L(17,5,18,5);
L(18,25,19,25);
L(18,20,19,20);
L(18,15,19,15);
L(18,10,19,10);
L(18,5,18,25);
L(17,24,19,24);
L(17,19,19,19);
L(17,14,19,14);
L(17,9,19,9);
L(24,9,25,9);
L(25,9,25,10);
L(24,14,25,14);
L(25,14,25,15);
L(24,19,25,19);
L(25,19,25,20);
L(24,24,25,24);
L(25,24,25,25);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 35 ;
        NETWORK_BODY
B(B_VARIN,,LXbuttonWinchSyn,9,7,11,9,);
B(B_VARIN,,MXhg2PumpInZero,10,6,12,8,);
B(B_FB,RS,RS13,28,4,33,8,);
B(B_COMMENT,,activate winch synchronization,1,1,27,2,);
B(B_VARIN,,LXbuttonWinchSyn,9,22,11,24,);
B(B_VARIN,,MXhg2PumpInZero,10,21,12,23,);
B(B_FB,RS,RS14,28,19,33,23,);
B(B_VARIN,,MXhg1LocStopInt,19,29,21,31,);
B(B_VARIN,,MXhg1LocStopRapD,19,31,21,33,);
B(B_VARIN,,MXhg2LocStopRapD,19,32,21,34,);
B(B_VARIN,,MXhg2LocStopInt,19,30,21,32,);
B(B_F,@OR-5,,21,27,26,34,);
B(B_VARIN,,MXhg1LocStopInt,19,14,21,16,);
B(B_VARIN,,MXhg1LocStopRapU,19,16,21,18,);
B(B_VARIN,,MXhg2LocStopRapU,19,17,21,19,);
B(B_VARIN,,MXhg2LocStopInt,19,15,21,17,);
B(B_F,@OR-5,,21,12,26,19,);
B(B_F,@AND-3,,14,9,19,14,00N);
B(B_F,@AND-3,,14,4,19,9,);
B(B_F,@AND-3,,14,19,19,24,);
B(B_VARIN,,MXhg1PumpInZero,11,5,13,7,);
B(B_VARIN,,MXhg1PumpInZero,11,20,13,22,);
B(B_F,@AND-3,,14,24,19,29,00N);
B(B_F,@OR-2,,34,4,39,8,);
B(B_VAROUT,,MXadWinSynWork,39,5,41,7,);
L(27,7,28,7);
L(27,7,27,14);
L(27,22,28,22);
L(27,22,27,29);
L(34,7,34,21);
L(33,21,34,21);
L(26,14,27,14);
L(26,29,27,29);
L(20,14,21,14);
L(19,11,20,11);
L(20,11,20,14);
L(11,8,11,13);
L(11,13,14,13);
L(11,8,14,8);
L(19,6,28,6);
L(12,7,12,12);
L(12,12,14,12);
L(13,6,13,11);
L(13,11,14,11);
L(12,7,14,7);
L(19,21,28,21);
L(13,6,14,6);
L(13,21,14,21);
L(12,22,14,22);
L(11,23,14,23);
L(19,26,20,26);
L(20,26,20,29);
L(20,29,21,29);
L(13,21,13,26);
L(13,26,14,26);
L(12,22,12,27);
L(12,27,14,27);
L(11,23,11,28);
L(11,28,14,28);
L(33,6,34,6);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 21 ;
        NETWORK_BODY
B(B_COMMENT,,control winch 2 by analog signal of winch 1,1,1,27,2,);
B(B_F,sel,,12,9,17,14,);
B(B_VARIN,,MDhg2ExtAnalSign,10,11,12,13,);
B(B_VARIN,,MXadWinSynWork,9,4,11,6,);
B(B_VAROUT,,MXhg2ExtAnalSign,11,4,13,6,);
B(B_F,@LT-2,,19,5,24,9,);
B(B_VARIN,,0.0,15,7,17,9,);
B(B_F,@AND-2,,26,4,31,8,);
B(B_VARIN,,MXpumpRedSlacRop,23,3,25,5,);
B(B_F,sel,,33,8,38,13,);
B(B_VAROUT,,MDhg2ExtAnalSign,38,9,40,11,);
B(B_F,@DIV,,19,14,24,18,);
B(B_VARIN,,100.0,17,16,19,18,);
B(B_F,@MUL-2,,26,14,31,18,);
B(B_VARIN,,CDLEslackRoPumSi,23,18,25,20,);
B(B_VARIN,,MDhg1JoySignal,10,12,12,14,);
L(11,11,12,11);
L(11,5,11,11);
L(17,8,19,8);
L(18,7,19,7);
L(25,4,25,6);
L(25,6,26,6);
L(24,7,26,7);
L(32,12,33,12);
L(31,6,32,6);
L(32,6,32,10);
L(32,10,33,10);
L(17,11,33,11);
L(32,12,32,16);
L(24,16,26,16);
L(25,17,26,17);
L(25,17,25,18);
L(25,18,25,19);
L(31,16,32,16);
L(18,16,19,16);
L(18,11,18,16);
L(18,7,18,11);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,set External analog signal of hg 2 to zero,1,1,27,2,);
B(B_FB,F_TRIG,F_TRIG1,11,4,18,7,);
B(B_VARIN,,MXadWinSynWork,9,5,11,7,);
B(B_F,sel,,20,5,25,10,);
B(B_VAROUT,,MDhg2ExtAnalSign,25,6,27,8,);
B(B_VARIN,,MDhg2ExtAnalSign,18,7,20,9,);
B(B_VARIN,,0.0,18,8,20,10,);
L(19,7,20,7);
L(19,6,19,7);
L(18,6,19,6);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 18 ;
        NETWORK_BODY
B(B_COMMENT,,release extern joy stick sig. hg1 at slack rope operating,1,1,28,2,);
B(B_F,@LT-2,,13,5,18,9,);
B(B_VARIN,,0.0,9,7,11,9,);
B(B_F,@AND-2,,20,4,25,8,);
B(B_VARIN,,MXpumpRedSlacRop,17,3,19,5,);
B(B_F,@DIV,,13,11,18,15,);
B(B_VARIN,,100.0,11,13,13,15,);
B(B_F,@MUL-2,,20,11,25,15,);
B(B_VARIN,,CDLEslackRoPumSi,17,15,19,17,);
B(B_VARIN,,MDhg1JoySignal,10,12,12,14,);
B(B_F,sel,,27,7,32,12,);
B(B_VAROUT,,MXhg1ExtAnalSign,26,5,28,7,);
B(B_VARIN,,MDhg1ExtAnalSign,25,9,27,11,);
B(B_VAROUT,,MDhg1ExtAnalSign,32,8,34,10,);
L(11,8,13,8);
L(12,7,13,7);
L(19,4,19,6);
L(19,6,20,6);
L(18,7,20,7);
L(18,13,20,13);
L(19,14,20,14);
L(19,14,19,15);
L(19,15,19,16);
L(12,13,13,13);
L(12,7,12,13);
L(25,6,26,6);
L(26,6,26,9);
L(26,9,27,9);
L(25,13,26,13);
L(26,11,26,13);
L(26,11,27,11);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,set External analog signal of hg 1 to zero,1,1,27,2,);
B(B_F,sel,,27,5,32,10,);
B(B_VAROUT,,MDhg1ExtAnalSign,32,6,34,8,);
B(B_VARIN,,MDhg1ExtAnalSign,25,7,27,9,);
B(B_VARIN,,0.0,25,8,27,10,);
B(B_F,@GE-2,,13,3,18,7,);
B(B_VARIN,,MDhg1JoySignal,11,4,13,6,);
B(B_VARIN,,0.0,11,5,13,7,);
B(B_FB,R_TRIG,R_TRIG4,18,3,25,6,);
L(26,7,27,7);
L(26,5,26,7);
L(25,5,26,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 15 ;
        NETWORK_BODY
B(B_COMMENT,,set hydraulical connection winch 1 and 2,1,1,27,2,);
B(B_VARIN,,QXhg1BrakeNormal,9,7,11,9,);
B(B_VARIN,,QXhg1BrakeFastSp,9,8,11,10,);
B(B_F,@OR-2,,11,10,16,14,);
B(B_VARIN,,QXhg2BrakeNormal,9,11,11,13,);
B(B_VARIN,,QXhg2BrakeFastSp,9,12,11,14,);
B(B_F,@OR-2,,11,6,16,10,);
B(B_F,@AND-3,,19,3,24,8,);
B(B_VAROUT,,QXhg1_2connectio,24,4,26,6,);
B(B_VARIN,,MXadWinSynWork,17,4,19,6,);
L(17,6,19,6);
L(17,6,17,8);
L(16,8,17,8);
L(16,12,18,12);
L(18,7,18,12);
L(18,7,19,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_COMMENT,,rope lenght measuring with correction,1,1,28,2,);
B(B_F,@DIV,,20,5,25,9,);
B(B_F,limit,,12,6,18,11,);
B(B_VARIN,,MDhg1Reeving,9,8,11,10,);
B(B_VARIN,,1.0,10,7,12,9,);
B(B_VARIN,,MDropeLenghtHg1,17,4,19,6,);
B(B_VAROUT,,LDropeLenghtHg1,25,6,27,8,);
B(B_VAROUT,,MDpdeDepth,25,7,27,9,);
L(19,7,20,7);
L(11,9,11,10);
L(11,10,12,10);
L(11,9,12,9);
L(18,8,20,8);
L(19,5,19,7);
L(25,7,25,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 27 ;
        NETWORK_BODY
B(B_F,@LT-2,,18,16,23,20,);
B(B_F,sel,,25,18,30,23,);
B(B_VARIN,,LDropeLenghtHg1,16,17,18,19,);
B(B_VARIN,,MDhg1LastRopeLen,16,18,18,20,);
B(B_VARIN,,LDropeLenghtHg1,23,21,25,23,);
B(B_VARIN,,MDhg1LastRopeLen,23,20,25,22,);
B(B_F,sel,,33,19,38,24,);
B(B_VARIN,,0.0,31,22,33,24,);
B(B_VAROUT,,MDhg1LastRopeLen,39,20,41,22,);
B(B_F,@AND-2,,18,12,23,16,);
B(B_VARIN,,LXinitPdeStart,16,14,18,16,);
B(B_FB,R_TRIG,R_TRIG5,11,12,18,15,);
B(B_VARIN,,MXpdeStart,9,13,11,15,);
B(B_F,@AND-2,,11,8,16,12,0N);
B(B_VARIN,,MXpdeGetInitOk,9,7,11,9,);
B(B_F,@OR-2,,16,6,21,10,N);
B(B_F,@AND-2,,21,3,26,7,);
B(B_VARIN,,MXresRopeLenHg1,19,4,21,6,);
B(B_F,@OR-2,,26,11,31,15,);
B(B_COMMENT,,the last depth,1,1,28,2,);
B(B_VAROUT,,MXpdeResRopeHg1,23,15,25,17,);
B(B_COMMENT,,Schleppzeiger nullen wenn keine ø^PDE aktiv oder vorhanden ,28,4,42,6,);
B(B_F,@ADD-2,,39,22,44,26,);
B(B_VARIN,,MDx23Poti1Moorin,37,24,39,26,);
B(B_VAROUT,,LDgrabFreeFalLim,44,23,46,25,);
L(23,18,24,18);
L(24,18,24,20);
L(24,20,25,20);
L(32,21,33,21);
L(30,20,31,20);
L(31,20,31,22);
L(31,22,33,22);
L(32,13,32,21);
L(39,21,39,24);
L(38,21,39,21);
L(11,11,11,14);
L(11,8,11,10);
L(11,8,16,8);
L(16,9,16,10);
L(21,6,21,8);
L(23,14,26,14);
L(26,5,26,13);
L(31,13,32,13);
L(23,14,23,16);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 36 ;
        NETWORK_BODY
B(B_COMMENT,,start grap mooring control (grap free fall) hg1 ,1,1,29,2,);
B(B_VARIN,,LDropeLenghtHg1,11,5,13,7,);
B(B_VARIN,,LDgrabFreeFalLim,11,6,13,8,);
B(B_F,@LT-2,,15,4,20,8,);
B(B_F,@LT-2,,15,9,20,13,);
B(B_VARIN,,0.0,13,11,15,13,);
B(B_F,@AND-2,,22,6,27,10,);
B(B_VARIN,,MXpreMooringGrab,29,10,31,12,);
B(B_VARIN,,MXjoyGrMoorFreef,29,11,31,13,);
B(B_COMMENT,,grap in slot~ s < 0 m,13,13,21,14,);
B(B_COMMENT,,1 winch operating,2,2,30,3,);
B(B_VARIN,,IXhgRelFreefall,29,12,31,14,);
B(B_F,@AND-6,,31,8,36,16,0000N);
B(B_VARIN,,MXassemblyOperat,29,13,31,15,);
B(B_F,@LT-2,,24,15,29,19,);
B(B_VARIN,,MDhg1PumpSignal,22,16,24,18,);
B(B_VARIN,,0.0,22,17,24,19,);
B(B_F,@AND-3,,26,24,31,29,0NN);
B(B_F,@AND-4,,26,29,31,35,00NN);
B(B_COMMENT,,2 winch operating,31,32,41,33,);
B(B_F,@OR-2,,33,24,38,28,);
B(B_VARIN,,MXadWinSynWork,22,26,24,28,);
B(B_VARIN,,MXhg1WinchLower,21,27,23,29,);
B(B_VARIN,,MXhg2WinchLower,24,33,26,35,);
B(B_F,@OR-4,,19,19,24,25,0NN);
B(B_F,@GT-2,,10,19,15,23,);
B(B_VARIN,,MDhg1JoySignal,8,20,10,22,);
B(B_VARIN,,0.0,8,21,10,23,);
B(B_VARIN,,IXhgRelFreefall,14,23,16,25,);
B(B_VARIN,,MXjoyGrMoorFreef,15,24,17,26,);
B(B_VARIN,,MXassemblyOperat,16,25,18,27,);
B(B_FB,RS,RS15,40,8,45,12,);
B(B_VAROUT,,LXstartMoorFreef,45,9,47,11,);
L(13,6,15,6);
L(13,7,15,7);
L(14,6,14,11);
L(14,11,15,11);
L(20,6,21,6);
L(21,6,21,8);
L(21,8,22,8);
L(20,11,21,11);
L(21,9,22,9);
L(21,9,21,11);
L(27,8,28,8);
L(28,8,28,10);
L(28,10,29,10);
L(39,11,39,26);
L(30,15,30,17);
L(30,15,31,15);
L(29,10,31,10);
L(29,17,30,17);
L(32,27,32,31);
L(31,31,32,31);
L(25,21,25,31);
L(25,31,26,31);
L(32,27,33,27);
L(31,26,33,26);
L(24,32,26,32);
L(23,33,26,33);
L(23,28,26,28);
L(24,27,24,32);
L(23,28,23,33);
L(17,23,19,23);
L(16,22,19,22);
L(16,22,16,24);
L(17,23,17,25);
L(15,21,19,21);
L(18,24,18,26);
L(24,21,25,21);
L(25,26,26,26);
L(24,27,26,27);
L(18,24,19,24);
L(38,26,39,26);
L(39,11,40,11);
L(36,10,40,10);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 16 ;
        NETWORK_BODY
B(B_COMMENT,,stop down hg1and hg2,1,1,29,2,);
B(B_VARIN,,0.0,9,9,11,11,);
B(B_F,EQ_R,,13,7,18,11,);
B(B_F,@GT-2,,13,11,18,15,);
B(B_VARIN,,0.0,11,13,13,15,);
B(B_FB,RS,RS16,27,4,32,8,);
B(B_VARIN,,LXstartMoorFreef,25,5,27,7,);
B(B_F,@OR-2,,20,7,25,11,);
B(B_F,@AND-2,,41,7,46,11,);
B(B_VAROUT,,MXgrabMooStopHg1,40,5,42,7,);
B(B_VAROUT,,MXgrabMooStopHg2,46,8,48,10,);
B(B_VARIN,,MXadWinSynWork,39,9,41,11,);
B(B_VARIN,,MDhg1JoySignal,10,8,12,10,);
B(B_FB,TON,TON4,34,4,39,8,);
B(B_VARIN,,T#0.5s,31,8,33,10,);
B(B_COMMENT,,Verzögerung da Kupplungsventil zu spät reagiertø^und dadurch Winde vor Freifall stoppt,33,1,53,3,);
L(11,10,13,10);
L(12,13,13,13);
L(12,9,12,13);
L(26,7,27,7);
L(18,9,20,9);
L(19,10,20,10);
L(19,10,19,13);
L(18,13,19,13);
L(25,9,26,9);
L(26,7,26,9);
L(40,6,40,9);
L(40,9,41,9);
L(39,6,40,6);
L(12,9,13,9);
L(32,6,34,6);
L(33,7,34,7);
L(33,7,33,9);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 16 ;
        NETWORK_BODY
B(B_COMMENT,,extern control hg1~  grap mooring operating,1,1,27,2,);
B(B_VAROUT,,MXhg1ClutchExt,18,3,20,5,);
B(B_FB,RS,RS17,27,5,32,9,);
B(B_VAROUT,,MXhg1ExtControl,32,6,34,8,);
B(B_COMMENT,,1 winch operating,33,8,41,9,);
B(B_VARIN,,MXhg1PumpInZero,15,7,17,9,);
B(B_F,@AND-2,,20,11,25,15,N);
B(B_F,EQ_R,,11,9,16,13,);
B(B_VARIN,,MDhg1PumpSignal,9,10,11,12,);
B(B_VARIN,,0.0,9,11,11,13,);
B(B_F,@AND-3,,20,5,25,10,);
B(B_VARIN,,LXhg1ZeroPos,18,13,20,15,);
B(B_VARIN,,LXstartMoorFreef,16,3,18,5,);
L(18,5,18,7);
L(18,4,18,5);
L(26,8,27,8);
L(26,8,26,13);
L(17,8,20,8);
L(18,7,18,13);
L(18,13,20,13);
L(25,13,26,13);
L(18,7,20,7);
L(25,7,27,7);
L(16,11,17,11);
L(17,9,20,9);
L(17,9,17,11);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 21 ;
        NETWORK_BODY
B(B_COMMENT,,extern control hg2~ grab mooring operating,1,1,27,2,);
B(B_FB,RS,RS18,28,6,33,10,);
B(B_VAROUT,,MXhg2ExtControl,33,7,35,9,);
B(B_COMMENT,,2 winch operating,34,9,42,10,);
B(B_VAROUT,,MXhg2ClutchExt,19,4,21,6,);
B(B_VARIN,,MXhg2PumpInZero,16,8,18,10,);
B(B_F,EQ_R,,12,10,17,14,);
B(B_VARIN,,MDhg2PumpSignal,10,11,12,13,);
B(B_F,@AND-2,,21,16,26,20,N);
B(B_VARIN,,LXhg2ZeroPos,19,18,21,20,);
B(B_VARIN,,LXstartMoorFreef,11,4,13,6,);
B(B_VARIN,,MXadWinSynWork,11,5,13,7,);
B(B_F,@AND-2,,13,3,18,7,);
B(B_VARIN,,0.0,10,12,12,14,);
B(B_F,@AND-4,,21,6,26,12,);
B(B_F,EQ_R,,12,14,17,18,);
B(B_VARIN,,MDhg1PumpSignal,10,15,12,17,);
B(B_VARIN,,0.0,10,16,12,18,);
L(18,9,21,9);
L(18,10,21,10);
L(17,12,18,12);
L(18,10,18,12);
L(19,18,21,18);
L(26,18,27,18);
L(27,9,27,18);
L(27,9,28,9);
L(19,5,19,18);
L(18,5,19,5);
L(19,8,21,8);
L(26,8,28,8);
L(17,16,20,16);
L(20,11,20,16);
L(20,11,21,11);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 26 ;
        NETWORK_BODY
B(B_COMMENT,,jump no mooring operating,1,1,28,2,);
B(B_F,@AND-3,,16,3,21,8,N0N);
B(B_F,@AND-3,,16,8,21,13,0NN);
B(B_F,@OR-4,,25,3,30,9,);
B(B_JUMP,,no_moor,30,4,32,6,);
B(B_VARIN,,MXhg1ExtControl,14,11,16,13,);
B(B_F,@AND-4,,16,13,21,19,N);
B(B_F,@AND-4,,16,19,21,25,0NN);
B(B_VARIN,,MXhg1ExtControl,11,21,13,23,);
B(B_VARIN,,MXhg2ExtControl,11,22,13,24,);
B(B_VARIN,,MXadWinSynWork,12,17,14,19,);
B(B_VARIN,,LXstartMoorFreef,13,14,15,16,);
B(B_VARIN,,LXhg2ZeroPos,12,16,14,18,);
B(B_VARIN,,LXhg1ZeroPos,12,15,14,17,);
B(B_VARIN,,MXadWinSynWork,12,6,14,8,);
B(B_VARIN,,LXhg1ZeroPos,12,5,14,7,);
B(B_VARIN,,LXstartMoorFreef,13,4,15,6,);
L(15,5,15,10);
L(15,10,16,10);
L(14,11,16,11);
L(15,15,15,21);
L(14,24,16,24);
L(21,10,22,10);
L(22,6,22,10);
L(23,7,23,15);
L(24,8,24,21);
L(24,8,25,8);
L(23,7,25,7);
L(22,6,25,6);
L(21,5,25,5);
L(14,7,14,11);
L(21,15,23,15);
L(15,21,16,21);
L(21,21,24,21);
L(14,18,14,24);
L(13,22,16,22);
L(13,23,16,23);
L(14,18,16,18);
L(15,15,16,15);
L(14,16,16,16);
L(14,17,16,17);
L(14,7,16,7);
L(14,6,16,6);
L(15,5,16,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 25 ;
        NETWORK_BODY
B(B_COMMENT,,joy stick signal hoisting gear 1 pump at grap mooring works,1,1,27,2,);
B(B_FB,Integrator,Integrator3,28,4,37,10,);
B(B_F,sel,,18,5,23,10,);
B(B_VARIN,,CDhg1IntTimeDn,25,11,27,13,);
B(B_VARIN,,LXstartMoorFreef,9,4,11,6,);
B(B_F,@AND-2,,11,3,16,7,0N);
B(B_VARIN,,MXhg1WinchLower,9,5,11,7,);
B(B_FB,PowerStage,PowerStage2,51,3,60,11,);
B(B_VAROUT,,QWhg1Lifting,60,4,62,6,);
B(B_VARIN,,CWhg1minCurPumUp,49,8,51,10,);
B(B_VARIN,,CWhg1maxCurPumUp,49,9,51,11,);
B(B_VARIN,,100.0,49,7,51,9,);
B(B_VARIN,,0.0,49,6,51,8,);
B(B_F,EQ_R,,39,11,44,15,);
B(B_VARIN,,0.0,37,13,39,15,);
B(B_VAROUT,,LXhg1ZeroPos,44,12,46,14,);
B(B_VARIN,,0.0,14,7,16,9,);
B(B_VARIN,,CDLEgrabMooPumSi,14,8,16,10,);
B(B_VARIN,,CDhg1IntTimeUp,24,10,26,12,);
B(B_F,sel,,18,16,23,21,);
B(B_FB,PowerStage,PowerStage3,28,15,37,23,);
B(B_VAROUT,,QWhg1Trimot,37,16,39,18,);
B(B_VARIN,,0.0,26,18,28,20,);
B(B_VARIN,,100.0,26,19,28,21,);
B(B_VARIN,,CWhg1maxCurTrimo,25,22,27,24,);
B(B_VARIN,,CWhg1minCurTrimo,24,21,26,23,);
B(B_VARIN,,0.0,16,18,18,20,);
B(B_VARIN,,CDLEgrabMooTriSi,16,19,18,21,);
B(B_VARIN,,QXhg1Clutch,25,14,27,16,);
B(B_VARIN,,QXhg1Clutch,49,4,51,6,);
B(B_VARIN,,TRUE,26,5,28,7,);
L(26,8,26,11);
L(26,8,28,8);
L(27,9,27,12);
L(27,9,28,9);
L(16,5,17,5);
L(17,7,18,7);
L(37,6,51,6);
L(38,13,39,13);
L(38,6,38,13);
L(16,8,18,8);
L(16,9,18,9);
L(17,5,17,18);
L(23,7,28,7);
L(23,18,28,18);
L(27,22,27,23);
L(27,22,28,22);
L(26,21,26,22);
L(26,21,28,21);
L(17,18,18,18);
L(27,15,27,17);
L(27,17,28,17);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_COMMENT,,hg1 clutch and brake at grab mooring operating,1,1,28,2,);
B(B_VAROUT,,QXhg1BrakeNormal,17,4,19,6,);
B(B_VARIN,,LXhg1ZeroPos,10,4,12,6,);
B(B_F,not,,12,3,17,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,hg1 clutch and brake at grap mooring operating,1,1,28,2,);
B(B_F,@AND-2,,12,6,17,10,N);
B(B_VARIN,,LXhg1ZeroPos,10,8,12,10,);
B(B_FB,RS,RS19,19,3,24,7,);
B(B_VARIN,,LXstartMoorFreef,9,4,11,6,);
B(B_VAROUT,,QXhg1Clutch,24,4,26,6,);
L(17,8,18,8);
L(18,6,18,8);
L(18,6,19,6);
L(11,5,19,5);
L(11,5,11,8);
L(11,8,12,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 27 ;
        NETWORK_BODY
B(B_COMMENT,,joy stick signal hoisting gear 2 pump at grap mooring works,1,1,27,2,);
B(B_VARIN,,LXstartMoorFreef,9,5,11,7,);
B(B_VARIN,,MXhg2WinchLower,9,6,11,8,);
B(B_VARIN,,MXadWinSynWork,9,4,11,6,);
B(B_F,@AND-3,,11,3,16,8,00N);
B(B_F,sel,,18,6,23,11,);
B(B_FB,Integrator,Integrator4,29,5,38,11,);
B(B_FB,PowerStage,PowerStage4,52,4,61,12,);
B(B_VAROUT,,QWhg2Lifting,61,5,63,7,);
B(B_VARIN,,CWhg2minCurPumUp,50,9,52,11,);
B(B_VARIN,,CWhg2maxCurPumUp,50,10,52,12,);
B(B_VARIN,,100.0,50,8,52,10,);
B(B_VARIN,,0.0,50,7,52,9,);
B(B_VARIN,,QXhg2Clutch,50,5,52,7,);
B(B_F,EQ_R,,40,12,45,16,);
B(B_VARIN,,0.0,38,14,40,16,);
B(B_VAROUT,,LXhg2ZeroPos,45,13,47,15,);
B(B_VARIN,,0.0,14,8,16,10,);
B(B_VARIN,,CDLEgrabMooPumSi,14,9,16,11,);
B(B_F,sel,,18,18,23,23,);
B(B_VARIN,,0.0,16,20,18,22,);
B(B_VARIN,,CDLEgrabMooTriSi,16,21,18,23,);
B(B_FB,PowerStage,PowerStage5,29,17,38,25,);
B(B_VARIN,,100.0,27,21,29,23,);
B(B_VARIN,,0.0,27,20,29,22,);
B(B_VAROUT,,QWhg2Trimot,38,18,40,20,);
B(B_VARIN,,CWhg2minCurTrimo,25,23,27,25,);
B(B_VARIN,,CWhg2maxCurTrimo,26,24,28,26,);
B(B_VARIN,,QXhg2Clutch,26,16,28,18,);
B(B_VARIN,,CDhg2IntTimeDn,26,12,28,14,);
B(B_VARIN,,CDhg2IntTimeUp,25,11,27,13,);
B(B_VARIN,,TRUE,27,6,29,8,);
L(16,5,17,5);
L(17,5,17,8);
L(17,8,18,8);
L(23,8,29,8);
L(16,9,18,9);
L(16,10,18,10);
L(17,8,17,20);
L(17,20,18,20);
L(23,20,24,20);
L(24,20,29,20);
L(28,19,29,19);
L(28,17,28,19);
L(28,24,29,24);
L(28,24,28,25);
L(27,23,29,23);
L(27,23,27,24);
L(38,7,52,7);
L(39,7,39,14);
L(39,14,40,14);
L(28,10,29,10);
L(28,10,28,13);
L(27,9,29,9);
L(27,9,27,12);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_COMMENT,,hg2 clutch and brake at grap mooring operating,1,1,28,2,);
B(B_F,@AND-2,,12,3,17,7,0N);
B(B_VAROUT,,QXhg2BrakeNormal,17,4,19,6,);
B(B_VARIN,,MXadWinSynWork,10,4,12,6,);
B(B_VARIN,,LXhg2ZeroPos,10,5,12,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,hg2 clutch and brake at grab mooring operating,1,1,28,2,);
B(B_F,@AND-2,,18,6,23,10,N);
B(B_VARIN,,LXhg2ZeroPos,16,8,18,10,);
B(B_FB,RS,RS20,25,3,30,7,);
B(B_F,@AND-2,,12,3,17,7,);
B(B_VARIN,,LXstartMoorFreef,10,4,12,6,);
B(B_VARIN,,MXadWinSynWork,10,5,12,7,);
B(B_VAROUT,,QXhg2Clutch,30,4,32,6,);
L(23,8,24,8);
L(24,6,24,8);
L(24,6,25,6);
L(17,5,25,5);
L(17,5,17,8);
L(17,8,18,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL := no_moor: ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 19 ;
        NETWORK_BODY
B(B_COMMENT,,the begin of slack rope operation,1,1,28,2,);
B(B_VARIN,,LDropeLenghtHg1,9,8,11,10,);
B(B_VARIN,,LDgrabFreeFalLim,9,9,11,11,);
B(B_F,@LT-2,,13,7,18,11,);
B(B_F,@LT-2,,13,12,18,16,);
B(B_VARIN,,0.0,11,14,13,16,);
B(B_COMMENT,,grap in slot~ s < 0 m,11,16,19,17,);
B(B_F,@AND-2,,20,9,25,13,);
B(B_VARIN,,MXpreSlackRoPres,18,4,20,6,);
B(B_F,@OR-2,,20,3,25,7,);
B(B_VARIN,,MXpreSlackRoLml,18,5,20,7,);
B(B_VAROUT,,MXpumpRedSlacRop,32,9,34,11,);
B(B_F,@AND-2,,27,8,32,12,);
L(11,9,13,9);
L(11,10,13,10);
L(12,9,12,14);
L(12,14,13,14);
L(18,9,19,9);
L(18,14,19,14);
L(19,12,19,14);
L(19,9,19,11);
L(19,11,20,11);
L(19,12,20,12);
L(25,5,26,5);
L(26,5,26,10);
L(26,10,27,10);
L(25,11,27,11);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 37 ;
        NETWORK_BODY
B(B_COMMENT,,stop down hg1~ hg2,1,1,28,2,);
B(B_COMMENT,,StopDown gleich bei Auslösung setzen~ ohne MSø^Richtungsabfrag. Könnte sonst zu Durchlaufprob.ø^im HW1 führen. (DWSP Laden),1,3,21,6,);
B(B_F,@LT-2,,14,11,19,15,);
B(B_F,@LT-2,,14,17,19,21,);
B(B_VARIN,,MDhg2SystemPress,9,18,11,20,);
B(B_VARIN,,MDhg1SystemPress,12,12,14,14,);
B(B_VARIN,,CDLEgrabSitUpPre,9,13,11,15,);
B(B_VARIN,,MDlmlLoadBoom,12,27,14,29,);
B(B_VARIN,,MDslackRopThresh,12,28,14,30,);
B(B_F,@LT-2,,14,26,19,30,);
B(B_VARIN,,MXadWinSynWork,27,34,29,36,);
B(B_COMMENT,,lml controlled,1,25,10,26,);
B(B_COMMENT,,pressure controlled,1,10,10,11,);
B(B_VARIN,,CXslackRopePress,25,9,27,11,);
B(B_VARIN,,CXslackRopeLml,25,24,27,26,);
B(B_FB,RS,RS21,21,11,26,15,);
B(B_VARIN,,MXhg1AnalSigPos,18,15,20,17,);
B(B_FB,RS,RS22,21,26,26,30,);
B(B_VARIN,,MXhg1AnalSigPos,18,30,20,32,);
B(B_FB,RS,RS23,21,17,26,21,);
B(B_VARIN,,MXpreSlackRopPro,26,7,28,9,);
B(B_F,@AND-3,,29,9,34,14,);
B(B_F,@OR-2,,36,9,41,13,);
B(B_VAROUT,,MXhg1SlacRoStopD,41,10,43,12,);
B(B_F,@OR-2,,37,16,42,20,);
B(B_VAROUT,,MXhg2SlacRoStopD,42,17,44,19,);
B(B_VARIN,,MXadWinSynWork,25,21,27,23,);
B(B_F,@AND-4,,29,16,34,22,);
B(B_F,@AND-3,,29,24,34,29,);
B(B_F,@AND-4,,29,30,34,36,);
L(11,19,14,19);
L(11,14,14,14);
L(27,10,27,12);
L(27,25,27,27);
L(27,12,27,20);
L(27,20,29,20);
L(27,21,29,21);
L(27,27,27,33);
L(26,28,26,34);
L(26,34,29,34);
L(26,13,29,13);
L(19,13,21,13);
L(20,14,21,14);
L(20,14,20,16);
L(19,28,21,28);
L(26,28,29,28);
L(20,29,21,29);
L(20,29,20,31);
L(19,19,21,19);
L(20,20,21,20);
L(12,14,12,20);
L(12,20,14,20);
L(20,16,20,20);
L(27,12,29,12);
L(28,8,28,11);
L(28,11,29,11);
L(35,12,36,12);
L(34,11,36,11);
L(26,19,29,19);
L(28,11,28,18);
L(36,19,37,19);
L(27,27,29,27);
L(28,18,28,26);
L(35,12,35,26);
L(27,33,29,33);
L(28,26,28,32);
L(36,19,36,32);
L(27,21,27,22);
L(28,18,29,18);
L(34,18,37,18);
L(28,26,29,26);
L(34,26,35,26);
L(28,32,29,32);
L(34,32,36,32);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 27 ;
        NETWORK_BODY
B(B_COMMENT,,recording grap inclination and deviation,1,1,28,2,);
B(B_F,@GT-2,,27,9,32,13,);
B(B_F,@ADD-2,,18,12,23,16,);
B(B_F,@OR-3,,27,4,32,9,);
B(B_VARIN,,QXgrabAdjustS1,25,5,27,7,);
B(B_VARIN,,QXgrabAdjustS2,25,6,27,8,);
B(B_VARIN,,QXgrabAdjustS3,25,7,27,9,);
B(B_VARIN,,CDLEignorePhiTop,9,21,11,23,);
B(B_F,@DIV,,11,20,16,24,);
B(B_VARIN,,100.0,9,22,11,24,);
B(B_VARIN,,CDLEignorePhiBot,9,16,11,18,);
B(B_F,@DIV,,11,15,16,19,);
B(B_VARIN,,100.0,9,17,11,19,);
B(B_F,@SUB,,18,18,23,22,);
B(B_VARIN,,0.0,16,19,18,21,);
B(B_VARIN,,MDhg1LastRopeLen,16,13,18,15,);
B(B_VARIN,,LDropeLenghtHg1,24,10,26,12,);
B(B_F,@LT-2,,27,17,32,21,);
B(B_F,@AND-3,,34,8,39,13,);
B(B_COMMENT,,Umrechnung von [cm] in [m],3,19,15,20,);
B(B_COMMENT,,Umrechnung von [cm] in [m],3,24,15,25,);
B(B_VAROUT,,MXpdeIgnoreCycle,39,9,41,11,);
B(B_COMMENT,,Ignore Funktion für die Igno-ø^rierung einer Aufzeichnung!,39,11,51,13,);
L(32,6,33,6);
L(33,6,33,10);
L(16,22,17,22);
L(16,17,17,17);
L(17,21,18,21);
L(17,21,17,22);
L(17,15,17,17);
L(17,15,18,15);
L(26,11,27,11);
L(23,14,24,14);
L(24,12,24,14);
L(24,12,27,12);
L(26,11,26,19);
L(26,19,27,19);
L(23,20,27,20);
L(33,10,34,10);
L(32,11,34,11);
L(32,19,33,19);
L(33,12,33,19);
L(33,12,34,12);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 19 ;
        NETWORK_BODY
B(B_COMMENT,,hydr. grab working,1,1,29,2,);
B(B_VARIN,,MXhydrGrabActive,9,4,11,6,);
B(B_VARIN,,LXgrHoWiPumpAct,9,5,11,7,);
B(B_VARIN,,QXgrabAdjustS1,9,6,11,8,);
B(B_VAROUT,,LXhydGrabWorking,16,4,18,6,);
B(B_VARIN,,QXgrabAdjustS2,9,7,11,9,);
B(B_VARIN,,QXgrabAdjustS3,9,8,11,10,);
B(B_VARIN,,MXadWinSynWork,9,9,11,11,);
B(B_VARIN,,LXhg1ZeroPos,9,10,11,12,);
B(B_VARIN,,LXhg2ZeroPos,9,11,11,13,);
B(B_VARIN,,QXgrabAdjustS4,9,12,11,14,);
B(B_VARIN,,QXgrabAdjustS5,9,13,11,15,);
B(B_VARIN,,QXgrabAdjustS6,9,14,11,16,);
B(B_VARIN,,QXgrabSlewLeft,9,15,11,17,);
B(B_VARIN,,QXgrabSlewRight,9,16,11,18,);
B(B_F,@OR-13,,11,3,16,18,000000NN);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,delay bit for calculate the last depth,1,1,27,2,);
B(B_VARIN,,MXpdeGetInitOk,9,3,11,5,);
B(B_VAROUT,,LXinitPdeStart,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,exit grab program,1,1,27,2,);
B(B_VARIN,,TRUE,9,3,11,5,);
B(B_RETURN,,,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL := exit: ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_FB,Integrator,Integrator5,13,5,22,11,);
B(B_VARIN,,1000.0,10,7,12,9,);
B(B_F,real_to_uint,,22,5,33,8,);
B(B_VARIN,,1000.0,11,8,13,10,);
B(B_VARIN,,MXminEngineSpeed,9,6,11,8,);
B(B_VARIN,,100000.0,11,9,13,11,);
B(B_F,EQ_R,,22,1,27,5,);
B(B_F,sel,,33,4,38,9,);
B(B_VAROUT,,QWgrabPressContr,38,5,40,7,);
B(B_COMMENT,,damit Ausgangsstufe nicht überschwingt,35,10,52,11,);
B(B_VARIN,,QWgrabPressContr,31,8,33,10,);
L(12,8,13,8);
L(12,3,12,8);
L(11,7,13,7);
L(22,4,22,7);
L(12,3,22,3);
L(27,3,33,3);
L(33,8,33,9);
L(33,3,33,6);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 16 ;
        NETWORK_BODY
B(B_COMMENT,,exit program and set defined values ,1,1,27,2,);
B(B_VARIN,,MXexitLEHydrGrab,9,5,11,7,);
B(B_FB,R_TRIG,R_TRIG6,11,4,18,7,);
B(B_F,sel,,19,10,24,15,);
B(B_VAROUT,,QTXslackRopValue,24,11,26,13,);
B(B_F,sel,,19,5,24,10,);
B(B_VAROUT,,QTXwinStopValue,24,6,26,8,);
B(B_VARIN,,QTXwinStopValue,15,7,17,9,);
B(B_VARIN,,QTXslackRopValue,14,12,16,14,);
B(B_VARIN,,FALSE,15,13,17,15,);
L(18,12,19,12);
L(18,7,19,7);
L(17,8,19,8);
L(17,9,19,9);
L(17,14,19,14);
L(16,13,19,13);
L(17,9,17,14);
L(18,6,18,12);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,exit program,1,1,27,2,);
B(B_VARIN,,TRUE,9,3,11,5,);
B(B_RETURN,,,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL := init: ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,init additional device program,1,1,27,2,);
B(B_VARIN,,TRUE,9,3,11,5,);
B(B_VAROUT,,LXinitOk,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value additional hydraulics,1,1,27,2,);
B(B_FB,CorrValue_Bool,CorrValue_Bool1,11,4,23,10,);
B(B_VARIN,,CXadLEHydrGrab,9,8,11,10,);
B(B_VARIN,,FALSE,9,5,11,7,);
B(B_VARIN,,FALSE,9,6,11,8,);
B(B_VARIN,,TRUE,9,7,11,9,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_FB,CorrValue_Bool,CorrValue_Bool2,11,4,23,10,);
B(B_COMMENT,,correction value additional slack rope control by pressure limit,1,1,27,2,);
B(B_VARIN,,FALSE,9,5,11,7,);
B(B_VARIN,,FALSE,9,6,11,8,);
B(B_VARIN,,TRUE,9,7,11,9,);
B(B_VARIN,,CXslackRopePress,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_FB,CorrValue_Bool,CorrValue_Bool3,11,4,23,10,);
B(B_COMMENT,,correction value additional slack rope control by lml limit,1,1,27,2,);
B(B_VARIN,,TRUE,9,5,11,7,);
B(B_VARIN,,FALSE,9,6,11,8,);
B(B_VARIN,,TRUE,9,7,11,9,);
B(B_VARIN,,CXslackRopeLml,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correchtion value max. current pressure control grap open / close,1,1,27,2,);
B(B_VARIN,,CWLEgrabPresMaCu,9,8,11,10,);
B(B_VARIN,,800,9,5,11,7,);
B(B_VARIN,,0,9,6,11,8,);
B(B_VARIN,,1000,9,7,11,9,);
B(B_FB,CorrValue_UInt,CorrValue_UInt7,11,4,23,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value grap pressure limit open / close,1,1,27,2,);
B(B_VARIN,,CWLEgrabPresLiOC,9,8,11,10,);
B(B_VARIN,,200,9,5,11,7,);
B(B_VARIN,,0,9,6,11,8,);
B(B_VARIN,,400,9,7,11,9,);
B(B_FB,CorrValue_UInt,CorrValue_UInt8,11,4,23,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value integrator time down grab control,1,1,27,2,);
B(B_VARIN,,100.0,9,5,11,7,);
B(B_VARIN,,10.0,9,6,11,8,);
B(B_VARIN,,300.0,9,7,11,9,);
B(B_VARIN,,CDgrabIntTimeDn,9,8,11,10,);
B(B_FB,CorrValue_Real,CorrValue_Real1,11,4,23,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value integrator time up grab control,1,1,27,2,);
B(B_VARIN,,100.0,9,5,11,7,);
B(B_VARIN,,10.0,9,6,11,8,);
B(B_VARIN,,300.0,9,7,11,9,);
B(B_VARIN,,CDgrabIntTimeUp,9,8,11,10,);
B(B_FB,CorrValue_Real,CorrValue_Real2,11,4,23,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value integrator time up grap pressure control [msec.],1,1,27,2,);
B(B_VARIN,,50.0,9,5,11,7,);
B(B_VARIN,,10.0,9,6,11,8,);
B(B_VARIN,,300.0,9,7,11,9,);
B(B_VARIN,,CDgrabPresIntUp,9,8,11,10,);
B(B_FB,CorrValue_Real,CorrValue_Real3,11,4,23,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value filter time for grap pressure limit open / close,1,1,27,2,);
B(B_VARIN,,CDgrabFilterTime,9,8,11,10,);
B(B_VARIN,,1.0,9,5,11,7,);
B(B_VARIN,,0.0,9,6,11,8,);
B(B_VARIN,,5.0,9,7,11,9,);
B(B_FB,CorrValue_Real,CorrValue_Real4,11,4,23,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value timer for grap automatic midle position,1,1,28,2,);
B(B_VARIN,,5.0,9,5,11,7,);
B(B_VARIN,,1.0,9,6,11,8,);
B(B_VARIN,,10.0,9,7,11,9,);
B(B_FB,CorrValue_Real,CorrValue_Real5,11,4,23,10,);
B(B_VARIN,,CDLEgrabAutMidTi,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value pressure hoisting gear if grap sit up the botton ,1,1,27,2,);
B(B_FB,CorrValue_Real,CorrValue_Real6,11,4,23,10,);
B(B_VARIN,,40.0,9,5,11,7,);
B(B_VARIN,,0.0,9,6,11,8,);
B(B_VARIN,,400.0,9,7,11,9,);
B(B_VARIN,,CDLEgrabSitUpPre,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,analog signal pump hoisting gear at mooring works in %,1,1,27,2,);
B(B_FB,CorrValue_Real,CorrValue_Real7,11,4,23,10,);
B(B_VARIN,,20.0,9,5,11,7,);
B(B_VARIN,,0.0,9,6,11,8,);
B(B_VARIN,,100.0,9,7,11,9,);
B(B_VARIN,,CDLEgrabMooPumSi,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,analog signal trimot hoisting gear at mooring works in %,1,1,27,2,);
B(B_FB,CorrValue_Real,CorrValue_Real8,11,4,23,10,);
B(B_VARIN,,100.0,9,5,11,7,);
B(B_VARIN,,0.0,9,6,11,8,);
B(B_VARIN,,100.0,9,7,11,9,);
B(B_VARIN,,CDLEgrabMooTriSi,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,analog signal pump 1 or 2  hoisting gear at slack rope operating in %,1,1,27,2,);
B(B_FB,CorrValue_Real,CorrValue_Real9,11,4,23,10,);
B(B_VARIN,,100.0,9,5,11,7,);
B(B_VARIN,,0.0,9,6,11,8,);
B(B_VARIN,,100.0,9,7,11,9,);
B(B_VARIN,,CDLEslackRoPumSi,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,rope lengt from the top to ignore the grap inclination for PDE rec. [cm],1,1,27,2,);
B(B_FB,CorrValue_Real,CorrValue_Real10,11,4,23,10,);
B(B_VARIN,,100.0,9,5,11,7,);
B(B_VARIN,,0.0,9,6,11,8,);
B(B_VARIN,,500.0,9,7,11,9,);
B(B_VARIN,,CDLEignorePhiTop,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,rope lengt from the bottom to ignore the grap inclination for PDE rec. [cm],1,1,27,2,);
B(B_FB,CorrValue_Real,CorrValue_Real11,11,4,23,10,);
B(B_VARIN,,100.0,9,5,11,7,);
B(B_VARIN,,0.0,9,6,11,8,);
B(B_VARIN,,500.0,9,7,11,9,);
B(B_VARIN,,CDLEignorePhiBot,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,scale faktor for X grap inclination,1,1,27,2,);
B(B_FB,CorrValue_Real,CorrValue_Real12,11,4,23,10,);
B(B_VARIN,,10.0,9,5,11,7,);
B(B_VARIN,,0.0,9,6,11,8,);
B(B_VARIN,,180.0,9,7,11,9,);
B(B_VARIN,,CDLEgrabIncXscal,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,scale faktor for Y grap inclination,1,1,27,2,);
B(B_FB,CorrValue_Real,CorrValue_Real13,11,4,23,10,);
B(B_VARIN,,10.0,9,5,11,7,);
B(B_VARIN,,0.0,9,6,11,8,);
B(B_VARIN,,180.0,9,7,11,9,);
B(B_VARIN,,CDLEgrabIncYscal,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,,1,1,27,2,);
B(B_FB,CorrValue_Real,CorrValue_Real14,11,4,23,10,);
B(B_VARIN,,40.0,9,5,11,7,);
B(B_VARIN,,1.0,9,6,11,8,);
B(B_VARIN,,100.0,9,7,11,9,);
B(B_VARIN,,CDscaleSlaRopTre,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,,1,1,27,2,);
B(B_FB,CorrValue_Real,CorrValue_Real15,11,4,23,10,);
B(B_VARIN,,2.0,9,5,11,7,);
B(B_VARIN,,1.0,9,6,11,8,);
B(B_VARIN,,10.0,9,7,11,9,);
B(B_VARIN,,CDscaleFreFalLim,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value grab hose winch low pressure control ,1,1,27,2,);
B(B_VARIN,,50.0,9,5,11,7,);
B(B_VARIN,,1.0,9,6,11,8,);
B(B_VARIN,,100.0,9,7,11,9,);
B(B_VARIN,,CDLEHoWiLoPreSig,9,8,11,10,);
B(B_FB,CorrValue_Real,CorrValue_Real16,11,4,23,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value grab hose winch high pressure control ,1,1,27,2,);
B(B_VARIN,,50.0,9,5,11,7,);
B(B_VARIN,,1.0,9,6,11,8,);
B(B_VARIN,,100.0,9,7,11,9,);
B(B_VARIN,,CDLEHoWiHiPreSig,9,8,11,10,);
B(B_FB,CorrValue_Real,CorrValue_Real17,11,4,23,10,);
        END_NETWORK_BODY
    END_NET_WORK
END_BODY
END_PROGRAM

PROGRAM ADhydrGrapV190
(*name of author: Manfred Schapler
version: 1.0
date: 10/97
modification:*)
(*name of author: Manfred Schapler
version: 1.0
date: 04/97
modification:*)
	VAR_EXTERNAL 
		ITXautoHoseWinch: BOOL:=FALSE;
			(*preselection automatic hose winch *)
		ITXleHoseWinchUp: BOOL:=FALSE;
			(*preselection left hose winch up*)
		ITXriHoseWinchUp: BOOL:=FALSE;
			(*preselection right hose winch up*)
		ITXcableWinchUp: BOOL:=FALSE;
			(*preselection cable winch up*)
		ITXleHoseWinchDn: BOOL:=FALSE;
			(*preselection left hose winch down*)
		ITXriHoseWinchDn: BOOL:=FALSE;
			(*preselection right hose winch down*)
		ITXcableWinchDn: BOOL:=FALSE;
			(*preselection cable winch down*)
		ITXgrabAdj1Out: BOOL:=FALSE;
			(*preselection grab adjustment 1 out*)
		ITXgrabAdj2Out: BOOL:=FALSE;
			(*preselection grab adjustment 2 out*)
		ITXgrabAdj1In: BOOL:=FALSE;
			(*preselection grab adjustment 1 in*)
		ITXgrabAdj2In: BOOL:=FALSE;
			(*preselection grab adjustment 2 in*)
		IWgrabSysPresP2: UINT:=0;
			(*P2 sys.press.vibrator/hammer/hydr.grab*)
		IWkeybX23Poti1: UINT:=0;
			(*keyboard X23 poti 1*)
		IWleftJoystThum: INT:=0;
			(*left joystick analog signal thumb wheel*)
		QTXautoHoseWinch: BOOL:=FALSE;
			(*enable automatic hose winch *)
		QTXleHoseWinchUp: BOOL:=FALSE;
			(*preselection left hose winch up*)
		QTXriHoseWinchUp: BOOL:=FALSE;
			(*preselection right hose winch up*)
		QTXcableWinchUp: BOOL:=FALSE;
			(*preselection cable winch up*)
		QTXleHoseWinchDn: BOOL:=FALSE;
			(*preselection left hose winch down*)
		QTXriHoseWinchDn: BOOL:=FALSE;
			(*preselection right hose winch down*)
		QTXcableWinchDn: BOOL:=FALSE;
			(*preselection cable winch down*)
		QTXgrabAdj1Out: BOOL:=FALSE;
			(*enable grab adjustment 1 out*)
		QTXgrabAdj2Out: BOOL:=FALSE;
			(*enable grab adjustment 2 out*)
		QTXgrabAdj1In: BOOL:=FALSE;
			(*enable grab adjustment 1 In*)
		QTXgrabAdj2In: BOOL:=FALSE;
			(*enable grab adjustment 2 In*)
		QTXaddVolCtrl: BOOL:=FALSE;
			(*enable additional hydraulic volume control *)
		QXlgBrake: BOOL:=FALSE;
			(*LG brake*)
		QXgrabOpen: BOOL:=FALSE;
			(*add. grab open *)
		QXgrabClose: BOOL:=FALSE;
			(*add. grab close*)
		QXrelBrakePress: BOOL:=FALSE;
			(*release brake pressure / brake right hose winch LE*)
		QXcableDrumLower: BOOL:=FALSE;
			(*cable drum lowering*)
		QXcableDrumLift: BOOL:=FALSE;
			(*cable drum lifting*)
		QXcableWinBrake: BOOL:=FALSE;
			(*Z17 cylinder in / brake cable winch*)
		QXhoseBrakeLeft: BOOL:=FALSE;
			(*pile guide cylinder open/ brake left hose winch SB*)
		QXhoseBrakeRight: BOOL:=FALSE;
			(*pile guide cylinder close/ brake right hose winch SB*)
		QXhg1BrakeNormal: BOOL:=FALSE;
			(*HG 1 brake normal speed operation*)
		QXhg2BrakeNormal: BOOL:=FALSE;
			(*HG 2 brake normal speed operation*)
		QXhg1BrakeFastSp: BOOL:=FALSE;
			(*HG 1 brake fast speed operation*)
		QXhg2BrakeFastSp: BOOL:=FALSE;
			(*HG 2 brake fast speed operation*)
		QXhg1_2connectio: BOOL:=FALSE;
			(*connection hg 1 & 2*)
		MXstopAllFunctio: BOOL:=FALSE;
			(*stop all excavator functions*)
		MXengStarterActi: BOOL:=FALSE;
			(*engine starter activated*)
		MXassemblyOperat: BOOL:=FALSE;
			(*assembly operation*)
		MXadSBHydrGrab: BOOL:=FALSE;
			(*add. soletanche bachy hydraulic grab control*)
		MXadSMHydrGrab: BOOL:=FALSE;
			(*add. soilmec hydraulic grab control*)
		MXgrabGlobalStop: BOOL:=FALSE;
			(*ad global stop polyp grab*)
		MXgrabSigClose: BOOL:=FALSE;
			(*ad grab close*)
		MXgrabSigOpen: BOOL:=FALSE;
			(*ad grab open*)
		MXexitSSHydrGrab: BOOL:=FALSE;
			(*exit add. SM/SB hydraulic grab *)
		MXjoySSGrabOpCl: BOOL:=FALSE;
			(*SM/SB: hydr. grab joystick open / close*)
		MXhg1WinchStand: BOOL:=FALSE;
			(*HG 1 winch standing still*)
		MXhg2WinchStand: BOOL:=FALSE;
			(*HG 2 winch standing still*)
		MXjoyGrabAssembl: BOOL:=FALSE;
			(*hydr. grab joystick grab assembly*)
		MXhg1AnalSigPos: BOOL:=FALSE;
			(*hg1 analog signal positiv*)
		MXhg1AnalSigNeg: BOOL:=FALSE;
			(*hg1 analog signal negativ*)
		MXhg2AnalSigPos: BOOL:=FALSE;
			(*hg2 analog signal positiv*)
		MXhg2AnalSigNeg: BOOL:=FALSE;
			(*hg2 analog signal negativ*)
		MXlgAnalSigNeg: BOOL:=FALSE;
			(*lg analog signal negativ*)
		MXjoyHyGrabTurnR: BOOL:=FALSE;
			(*SM/SB: hydr. grab joystick turn right*)
		MXjoyHyGrabTurnL: BOOL:=FALSE;
			(*SM/SB: hydr. grab joystick turn left*)
		MXenabAutHoseWin: BOOL:=FALSE;
			(*add. hydraulic grab automatic hose winch*)
		MXenabGrabPresel: BOOL:=FALSE;
			(*ad polyp grab enable preselected*)
		MXhydrGrabActive: BOOL:=FALSE;
			(*ad hydr. grab is active*)
		MXrelGrabValves: BOOL:=FALSE;
			(*release pumpe for grab valves*)
		MXgrAdPreJoySig: BOOL:=FALSE;
			(*preselection joy stick signal grab adjustment *)
		MXgrabStopLg: BOOL:=FALSE;
			(*grab operation stopp Luffing gear*)
		MXSShyGrabPresel: BOOL:=FALSE;
			(*SM/SB: hydr. grab preselect*)
		MWludvExtPresSig: UINT:=0;
			(*LUDV pump external pressure signal in %*)
		MDratedEngSpeed: REAL:=0.0;
			(*rated engine speed in rpm*)
		MDpowerLimReduct: REAL:=0.0;
			(*maximum engine power regulator reduction to x [%]*)
		MDgrabSysPress: REAL:=0.0;
			(*hydraulic grab system pressure in bar*)
		MDgrAdJoySignal: REAL:=0.0;
			(*grab adjustment joystick signal*)
		MDgrabAdPuSig: REAL:=0.0;
			(*grab adjustment analog pump signal*)
		MDgrSlewPuSigB: REAL:=0.0;
			(*grab slewing pump signal (button controlled) *)
		MDgrLockCylPuSig: REAL:=0.0;
			(*grab lock cylinder pump signal*)
		MDgrHoAdCylPuSig: REAL:=0.0;
			(*grab hose adjust cylinder pump signal*)
		MDhoWiPumpSigCC: REAL:=0.0;
			(*hose winch pump signal (closed circuit) *)
		MDhoWiPresSigCC: REAL:=0.0;
			(*hose winch pressure signal (closed circuit) *)
		MDgrLockCylPrSig: REAL:=0.0;
			(*grab lock cylinder pressure signal [%]*)
		MDgrbPump2Signal: REAL:=0.0;
			(*grab analog signal pump 2 [%]*)
	END_VAR
	VAR_EXTERNAL CONSTANT
		MSG_ERROR: UINT:=0;
	END_VAR
	VAR_EXTERNAL RETAIN
		MRgrab1VolOpen: REAL:=0.0;
			(*grab 1 volume open*)
		MRgrab1VolClose: REAL:=0.0;
			(*grab 1 volume close*)
		MRgrab1PresOpen: REAL:=0.0;
			(*grab 1 pressure open*)
		MRgrab1PresClose: REAL:=0.0;
			(*grab 1 pressure close*)
	END_VAR
	VAR_EXTERNAL CONSTANT RETAIN
		CXadSMHydrGrab: BOOL:=FALSE;
			(*add. soilmec hydraulic grab control*)
		CXadSBHydrGrab: BOOL:=FALSE;
			(*add. soletanche bachy hydraulic grab control*)
		CWp2MaxValue: UINT:=0;
			(*p2 ludv section max. value [l/min]*)
		CWp2MinCurValveB: UINT:=0;
			(*p1 ludv section min.current (B side) main*)
		CWp2MaxCurValveB: UINT:=0;
			(*p1 ludv section max.current (B side) main*)
		CWp2cur50liter: UINT:=0;
			(*p2 ludv section current for 50l/min*)
		CWp2cur100liter: UINT:=0;
			(*p2 ludv section current for 100l/min*)
		CWp2cur150liter: UINT:=0;
			(*p2 ludv section current for 150l/min*)
		CWp2cur200liter: UINT:=0;
			(*p2 ludv section current for 200l/min*)
		CWp2cur250liter: UINT:=0;
			(*p2 ludv section current for 250l/min*)
		CWp2cur300liter: UINT:=0;
			(*p2 ludv section current for 300l/min*)
		CWludvPressure: UINT:=0;
			(*ludv pump pressure [bar]*)
		CDgrabIntTimeUp: REAL:=0.0;
			(*ad grab integrator rising time*)
		CDgrabIntTimeDn: REAL:=0.0;
			(*ad grab integrator falling time*)
		CDludvLeakOilSig: REAL:=0.0;
			(*ludv leakoil or pressure comp. signal*)
		CDdelayRelGrab: REAL:=0.0;
			(*SM/SB grab: delay time release grab open/close*)
		CDgrSlewAnaSigSB: REAL:=0.0;
			(*SB grab: grap slewing analog signal *)
		CDgrSlewAnaSigSM: REAL:=0.0;
			(*SM grab: grap slewing analog signal *)
		CDgrSlewTimeUp: REAL:=0.0;
			(*SB/SM grab: slewing integrator time rising signal*)
		CDgrSlewTimeDn: REAL:=0.0;
			(*SB/SM grab: slewing integrator time falling signal*)
		CDgrabAdLimitSig: REAL:=0.0;
			(*grab adjustment limitation signal*)
		CDgrLockLimitSig: REAL:=0.0;
			(*grab lock cylinder limitation signal*)
		CDgrHoAdLimitSig: REAL:=0.0;
			(*grab hose adjust cylinder limitation signal*)
		CDgrLockCPSigOut: REAL:=0.0;
			(*grab lock cyl. pressure signal out [%]*)
		CDgrLockCPSigIn: REAL:=0.0;
			(*grab lock cyl. pressure signal in [%]*)
		CDengSpPumpRed: REAL:=0.0;
			(*engine speed for pump reduction [U/min]*)
		CDSBhoWiManPuSi: REAL:=0.0;
			(*Soletanche grab: hose winch manual pump signal [%]*)
		CDSBhoWiAutPuSi: REAL:=0.0;
			(*Soletanche grab: hose winch automatic pump signal [%]*)
		CDSMhoWiManPuSi: REAL:=0.0;
			(*Soilmec grab: hose winch manual pump signal [%]*)
		CDSMhoWiAutPuSi: REAL:=0.0;
			(*Soilmec grab: hose winch automatic pump signal [%]*)
		CDSBhoWiLoPresSi: REAL:=0.0;
			(*Soletanche: hose winch low pressure signal [%]*)
		CDSBhoWiHiPresSi: REAL:=0.0;
			(*Soletanche: hose winch high pressure signal [%]*)
		CDSMhoWiLoPresSi: REAL:=0.0;
			(*Soilmec: hose winch low pressure signal [%]*)
		CDSMhoWiHiPresSi: REAL:=0.0;
			(*Soilmec: hose winch high pressure signal [%]*)
	END_VAR
	VAR 
		LXinitOk: BOOL:=FALSE;
			(*init completed*)
		LXlastFunkClose: BOOL:=FALSE;
		LXreleaGrabOpClo: BOOL:=FALSE;
		LXpreGrTurnRight: BOOL:=FALSE;
		LXpreGrTurnLeft: BOOL:=FALSE;
		LXhoseWinManLift: BOOL:=FALSE;
		LXhoseWinManLow: BOOL:=FALSE;
		LXhoseWinEnPowSt: BOOL:=FALSE;
		LXhoseWinHighPr: BOOL:=FALSE;
		LXhydGrabWorking: BOOL:=FALSE;
		LXhoseWinAutGrab: BOOL:=FALSE;
		LXgrAdPumpZero: BOOL:=FALSE;
		LXgrSlewPumpZero: BOOL:=FALSE;
		LXgrHoAdPumpZero: BOOL:=FALSE;
		LXgrLockCylZero: BOOL:=FALSE;
		LXgrLockCylAct: BOOL:=FALSE;
		LXgrHoAdPumpAct: BOOL:=FALSE;
		LXgrAdPumpAct: BOOL:=FALSE;
		LXgrSlewPumpAct: BOOL:=FALSE;
		LWgrabStoPreOpen: UINT:=0;
		LWgrabStoPreClos: UINT:=0;
		LDanalogSignal: REAL:=0.0;
		LDanalSigPumpLim: REAL:=0.0;
		LDgrabStoVolOpen: REAL:=0.0;
		LDgrabStoVolClos: REAL:=0.0;
		LDx23Poti1: REAL:=0.0;
		LDleJoyPoti: REAL:=0.0;
		LDp2MaxValue: REAL:=0.0;
		LDgrabStoreVol: REAL:=0.0;
		LDanalSigPumpInt: REAL:=0.0;
		LDcalcCurrent2: REAL:=0.0;
		LDcalcComp2: REAL:=0.0;
		LDcalcVol2: REAL:=0.0;
		LDgrabSlewAnaSig: REAL:=0.0;
		LDgrAdAnalSignal: REAL:=0.0;
		LDgrSlewAnalSig: REAL:=0.0;
		LDgrAd1AnalSig: REAL:=0.0;
		LDgrAd2AnalSig: REAL:=0.0;
		RS3: RS;
		RS7: RS;
		SR1: SR;
		R_TRIG1: R_TRIG;
		R_TRIG2: R_TRIG;
		R_TRIG3: R_TRIG;
		R_TRIG4: R_TRIG;
		F_TRIG1: F_TRIG;
		F_TRIG2: F_TRIG;
		TOF1: TOF;
		ScaleAI1: ScaleAI;
		Message1: MsgRealReal;
		Message2: MsgRealReal;
		CorrValue_Bool1: CorrValue_Bool;
		CorrValue_Bool2: CorrValue_Bool;
		CorrValue_Real1: CorrValue_Real;
		CorrValue_Real2: CorrValue_Real;
		CorrValue_Real3: CorrValue_Real;
		CorrValue_Real4: CorrValue_Real;
		CorrValue_Real5: CorrValue_Real;
		CorrValue_Real6: CorrValue_Real;
		CorrValue_Real7: CorrValue_Real;
		CorrValue_Real8: CorrValue_Real;
		CorrValue_Real9: CorrValue_Real;
		CorrValue_Real10: CorrValue_Real;
		CorrValue_Real11: CorrValue_Real;
		CorrValue_Real12: CorrValue_Real;
		CorrValue_Real13: CorrValue_Real;
		CorrValue_Real14: CorrValue_Real;
		CorrValue_Real15: CorrValue_Real;
		CorrValue_Real16: CorrValue_Real;
		CorrValue_Real17: CorrValue_Real;
		CorrValue_Real18: CorrValue_Real;
		CorrValue_Real19: CorrValue_Real;
		CorrValue_Real20: CorrValue_Real;
		ADcalculateQ1: ADcalculateQV024;
		Integrator1: Integrator;
		analog1: FB_anaCylAnaV011;
		analog2: FB_anaCylAnaV011;
		analog3: FB_anaCylAnaV011;
		analog4: FB_anaCylAnaV011;
	END_VAR
'FBD'
BODY
    WORKSPACE
        NETWORK_LIST_TYPE := NWTYPEFBD ;
        ACTIVE_NETWORK := 0 ;
    END_WORKSPACE
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_COMMENT,,init first time,1,1,27,2,);
B(B_VARIN,,LXinitOk,9,4,11,6,);
B(B_F,not,,11,3,16,6,);
B(B_JUMP,,init,16,4,18,6,);
B(B_COMMENT,,SB = Soletanche Bachy ,27,1,44,2,);
B(B_COMMENT,,SM = Soilmec,27,2,44,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_VARIN,,CXadSBHydrGrab,9,4,11,6,);
B(B_VARIN,,CXadSMHydrGrab,9,5,11,7,);
B(B_F,@AND-2,,11,3,16,7,NN);
B(B_RETURN,,,16,4,18,6,);
B(B_COMMENT,,exit programm when hydr. grab is not preselected,1,1,27,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_COMMENT,,jump to exit when hydr. grab is not activ,1,1,27,2,);
B(B_F,@OR-2,,16,4,21,8,0N);
B(B_VARIN,,MXexitSSHydrGrab,14,3,16,5,);
B(B_F,@OR-2,,11,5,16,9,);
B(B_VARIN,,MXadSBHydrGrab,9,6,11,8,);
B(B_VARIN,,MXadSMHydrGrab,9,7,11,9,);
B(B_VARIN,,LXhydGrabWorking,19,9,21,11,);
B(B_F,@AND-2,,21,7,26,11,0N);
B(B_JUMP,,exit,26,8,28,10,);
L(16,4,16,6);
L(21,6,21,9);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 23 ;
        NETWORK_BODY
B(B_COMMENT,,scale system pressure,1,1,27,2,);
B(B_VARIN,,IWgrabSysPresP2,9,5,11,7,);
B(B_FB,ScaleAI,ScaleAI1,11,4,19,9,);
B(B_VARIN,,600.0,9,6,11,8,);
B(B_VARIN,,MSG_ERROR,17,11,19,13,);
B(B_VARIN,,178,17,9,19,11,);
B(B_FB,SR,SR1,26,16,31,20,0N);
B(B_F,@AND-2,,21,16,26,20,0N);
B(B_VARIN,,MXengStarterActi,17,18,19,20,);
B(B_VARIN,,177,36,16,38,18,);
B(B_VARIN,,MSG_ERROR,36,18,38,20,);
B(B_FB,MsgRealReal,Message1,22,8,31,15,);
B(B_FB,MsgRealReal,Message2,38,15,47,22,);
B(B_VAROUT,,MDgrabSysPress,19,5,21,7,);
L(19,7,21,7);
L(19,8,20,8);
L(21,7,21,11);
L(21,11,22,11);
L(19,10,22,10);
L(19,12,22,12);
L(20,18,21,18);
L(19,19,21,19);
L(20,20,26,20);
L(26,19,26,20);
L(31,18,38,18);
L(20,8,20,20);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 14 ;
        NETWORK_BODY
B(B_COMMENT,,scale analog signals from x23 potis:  ø^(1000/1000)*90+10=LDx23Poti1,1,1,27,3,);
B(B_VARIN,,IWkeybX23Poti1,9,5,11,7,);
B(B_F,uint_to_real,,11,4,22,7,);
B(B_F,@DIV,,24,4,29,8,);
B(B_VARIN,,1000.0,21,7,23,9,);
B(B_F,@SUB,,24,8,29,12,);
B(B_VARIN,,100.0,22,9,24,11,);
B(B_F,to_real,,13,9,20,12,);
B(B_VARIN,,10.0,11,10,13,12,);
B(B_F,@MUL-2,,31,4,36,8,);
B(B_F,@ADD-2,,38,4,43,8,);
B(B_VAROUT,,LDx23Poti1,43,5,45,7,);
B(B_COMMENT,,10-100%,44,7,51,8,);
L(22,6,24,6);
L(23,7,23,8);
L(23,7,24,7);
L(20,11,24,11);
L(29,10,30,10);
L(30,7,30,10);
L(30,7,31,7);
L(29,6,31,6);
L(37,7,38,7);
L(37,7,37,13);
L(22,13,37,13);
L(22,11,22,13);
L(36,6,38,6);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_F,@DIV,,24,1,29,5,);
B(B_VARIN,,1000.0,21,4,23,6,);
B(B_VARIN,,IWleftJoystThum,9,2,11,4,);
B(B_F,@SUB,,24,5,29,9,);
B(B_VARIN,,100.0,22,6,24,8,);
B(B_F,to_real,,13,6,20,9,);
B(B_VARIN,,10.0,11,7,13,9,);
B(B_F,@MUL-2,,31,1,36,5,);
B(B_F,@ADD-2,,38,1,43,5,);
B(B_VAROUT,,LDleJoyPoti,43,2,45,4,);
B(B_COMMENT,,10-100%,44,4,51,5,);
B(B_F,int_to_real,,11,1,21,4,);
L(23,4,23,5);
L(23,4,24,4);
L(20,8,24,8);
L(29,7,30,7);
L(22,8,22,10);
L(29,3,31,3);
L(36,3,38,3);
L(30,4,31,4);
L(30,4,30,7);
L(22,10,37,10);
L(37,4,37,10);
L(37,4,38,4);
L(21,3,24,3);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_VARIN,,MRgrab1VolOpen,9,3,11,5,);
B(B_VAROUT,,LDgrabStoVolOpen,11,3,13,5,);
B(B_COMMENT,,adjusted working volume ,1,1,27,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_VARIN,,MRgrab1VolClose,9,3,11,5,);
B(B_VAROUT,,LDgrabStoVolClos,11,3,13,5,);
B(B_COMMENT,,adjusted working volume ,1,1,27,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_F,real_to_uint,,11,3,22,6,);
B(B_VARIN,,MRgrab1PresOpen,9,4,11,6,);
B(B_VAROUT,,LWgrabStoPreOpen,22,4,24,6,);
B(B_COMMENT,,adjusted working pressure,1,1,27,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_F,real_to_uint,,11,3,22,6,);
B(B_VARIN,,MRgrab1PresClose,9,4,11,6,);
B(B_VAROUT,,LWgrabStoPreClos,22,4,24,6,);
B(B_COMMENT,,adjusted working pressure,1,1,27,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_VARIN,,CWp2MaxValue,9,4,11,6,);
B(B_F,uint_to_real,,11,3,22,6,);
B(B_VAROUT,,LDp2MaxValue,22,4,24,6,);
B(B_COMMENT,,maximum oil value over ludv section ,1,1,27,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_COMMENT,,protect correction value change while program activ,1,1,27,2,);
B(B_F,@AND-2,,17,3,22,7,0N);
B(B_VARIN,,MXassemblyOperat,14,7,16,9,);
B(B_F,@OR-2,,11,3,16,7,);
B(B_VARIN,,MXadSBHydrGrab,9,4,11,6,);
B(B_VARIN,,MXadSMHydrGrab,9,5,11,7,);
B(B_VAROUT,,MXSShyGrabPresel,22,4,24,6,);
L(16,6,16,8);
L(16,6,17,6);
L(16,5,17,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_VARIN,,MXjoyGrabAssembl,9,4,11,6,);
B(B_VAROUT,,MXgrabStopLg,16,4,18,6,);
B(B_COMMENT,,stopp lg in case of no assembly operation ,1,1,27,2,);
B(B_VARIN,,MXadSBHydrGrab,9,5,11,7,);
B(B_F,@AND-2,,11,3,16,7,N);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_COMMENT,,preselction Soilmec grap adjustment ,1,1,27,2,);
B(B_VARIN,,MXjoyGrabAssembl,9,4,11,6,);
B(B_VAROUT,,MXgrAdPreJoySig,16,4,18,6,);
B(B_VARIN,,MXadSMHydrGrab,9,5,11,7,);
B(B_F,@AND-2,,11,3,16,7,N);
B(B_VAROUT,,MXenabGrabPresel,16,5,18,7,);
B(B_COMMENT,,Für Anzeige Greifer,26,6,38,7,);
L(16,5,16,6);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 30 ;
        NETWORK_BODY
B(B_COMMENT,,grap open/close ,1,1,27,2,);
B(B_F,@AND-2,,21,5,26,9,0N);
B(B_FB,RS,RS3,28,5,33,9,);
B(B_F,@AND-2,,21,9,26,13,);
B(B_VAROUT,,LXlastFunkClose,33,6,35,8,);
B(B_F,@AND-2,,21,13,26,17,);
B(B_F,@AND-2,,21,19,26,23,N);
B(B_VARIN,,LXlastFunkClose,17,7,19,9,);
B(B_FB,R_TRIG,R_TRIG1,12,4,19,7,);
B(B_F,@OR-2,,28,16,33,20,);
B(B_VAROUT,,MXgrabSigClose,27,14,29,16,);
B(B_VAROUT,,MXgrabSigOpen,27,20,29,22,);
B(B_VARIN,,MXjoySSGrabOpCl,9,5,11,7,);
B(B_FB,TOF,TOF1,35,16,40,20,);
B(B_VAROUT,,LXreleaGrabOpClo,40,17,42,19,);
B(B_F,real_to_time,,24,23,35,26,);
B(B_F,sel,,19,23,24,28,);
B(B_VARIN,,CDdelayRelGrab,11,25,13,27,);
B(B_F,@MUL-2,,13,24,18,28,);
B(B_VARIN,,1000.0,11,26,13,28,);
B(B_VARIN,,1.0,17,28,19,30,);
B(B_COMMENT,,Abfallverz. Sektion,37,20,45,21,);
B(B_VARIN,,MXSShyGrabPresel,10,15,12,17,);
B(B_VAROUT,,QXgrabOpen,27,21,29,23,);
B(B_VAROUT,,MXhydrGrabActive,40,16,42,18,);
B(B_VARIN,,MXgrabGlobalStop,10,16,12,18,);
B(B_VARIN,,MXstopAllFunctio,10,17,12,19,);
B(B_F,@AND-4,,12,13,17,19,00NN);
B(B_VAROUT,,QXgrabClose,27,13,29,15,);
L(26,7,28,7);
L(27,8,28,8);
L(20,11,21,11);
L(27,8,27,11);
L(26,11,27,11);
L(19,8,19,12);
L(19,8,21,8);
L(19,12,21,12);
L(19,16,19,21);
L(19,12,19,16);
L(20,7,20,11);
L(19,16,21,16);
L(20,7,21,7);
L(11,6,12,6);
L(19,6,20,6);
L(20,6,20,7);
L(18,15,21,15);
L(18,15,18,22);
L(27,19,27,21);
L(27,19,28,19);
L(27,15,27,18);
L(27,18,28,18);
L(26,15,27,15);
L(26,21,27,21);
L(11,6,11,15);
L(33,18,35,18);
L(35,19,35,25);
L(19,24,19,25);
L(18,26,19,26);
L(19,27,19,29);
L(12,24,19,24);
L(27,21,27,22);
L(40,17,40,18);
L(12,18,12,24);
L(11,15,12,15);
L(17,15,18,15);
L(27,14,27,15);
L(19,21,21,21);
L(18,22,21,22);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_VARIN,,LXreleaGrabOpClo,9,3,11,5,);
B(B_FB,F_TRIG,F_TRIG1,11,2,18,5,);
B(B_F,sel,,11,5,16,10,);
B(B_F,sel,,18,4,23,9,);
B(B_VARIN,,TRUE,9,8,11,10,);
B(B_VAROUT,,QTXaddVolCtrl,23,5,25,7,);
B(B_VARIN,,QTXaddVolCtrl,9,7,11,9,);
B(B_VARIN,,FALSE,16,10,18,12,);
B(B_COMMENT,,VRM verwendet die gleiche LED,26,2,42,3,);
L(11,4,11,7);
L(18,4,18,6);
L(16,7,18,7);
L(18,8,18,11);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_COMMENT,,analog signal grab open close limitation by X23 Poti 1,1,1,27,2,);
B(B_F,sel,,11,3,16,8,);
B(B_VARIN,,0.0,9,5,11,7,);
B(B_VARIN,,LDx23Poti1,9,6,11,8,);
B(B_VAROUT,,LDanalogSignal,16,4,18,6,);
B(B_VARIN,,LXreleaGrabOpClo,9,4,11,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 15 ;
        NETWORK_BODY
B(B_VARIN,,900.0,9,4,11,6,);
B(B_VARIN,,0.5,9,5,11,7,);
B(B_VARIN,,CDengSpPumpRed,9,6,11,8,);
B(B_VARIN,,1.0,9,7,11,9,);
B(B_VARIN,,MDratedEngSpeed,9,8,11,10,);
B(B_VARIN,,0.5,9,9,11,11,);
B(B_VARIN,,1.0,9,10,11,12,);
B(B_F,GPkx_dV010,,11,3,20,12,);
B(B_COMMENT,,900 U/min 50% limitationø^1400 U/min 0% limitation,29,1,44,3,);
B(B_COMMENT,,signal limitation in consideration to the engine speed,1,1,27,2,);
B(B_VAROUT,,LDanalSigPumpLim,27,4,29,6,);
B(B_F,@MUL-2,,22,3,27,7,);
B(B_VARIN,,LDanalogSignal,19,12,21,14,);
L(21,6,22,6);
L(20,5,22,5);
L(21,6,21,13);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_FB,Integrator,Integrator1,11,2,20,8,);
B(B_VARIN,,TRUE,9,3,11,5,);
B(B_VARIN,,CDgrabIntTimeUp,9,5,11,7,);
B(B_VARIN,,LDanalSigPumpLim,9,4,11,6,);
B(B_VARIN,,CDgrabIntTimeDn,9,6,11,8,);
B(B_VAROUT,,LDanalSigPumpInt,20,3,22,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_F,sel,,11,3,16,8,);
B(B_VARIN,,MXgrabSigClose,9,4,11,6,);
B(B_VARIN,,LDgrabStoVolOpen,9,5,11,7,);
B(B_VARIN,,LDgrabStoVolClos,9,6,11,8,);
B(B_VAROUT,,LDgrabStoreVol,16,4,18,6,);
B(B_COMMENT,,volume control depend on open or close,1,1,27,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 25 ;
        NETWORK_BODY
B(B_VARIN,,CWp2cur50liter,9,8,11,10,);
B(B_VARIN,,CWp2cur100liter,9,9,11,11,);
B(B_VARIN,,CWp2cur150liter,9,10,11,12,);
B(B_VARIN,,CWp2cur200liter,9,11,11,13,);
B(B_VARIN,,CWp2cur250liter,9,12,11,14,);
B(B_VARIN,,CWp2cur300liter,9,13,11,15,);
B(B_VARIN,,CWp2MinCurValveB,9,7,11,9,);
B(B_VARIN,,LDp2MaxValue,9,5,11,7,);
B(B_VARIN,,LDanalSigPumpInt,9,6,11,8,);
B(B_VAROUT,,LDcalcCurrent2,29,4,31,6,);
B(B_VAROUT,,MDgrbPump2Signal,29,5,31,7,);
B(B_VAROUT,,LDcalcComp2,29,6,31,8,);
B(B_VARIN,,CWp2MaxCurValveB,9,18,11,20,);
B(B_VARIN,,MDgrabSysPress,9,19,11,21,);
B(B_VARIN,,CDludvLeakOilSig,9,20,11,22,);
B(B_VAROUT,,LDcalcVol2,29,7,31,9,);
B(B_VARIN,,LDgrabStoreVol,9,4,11,6,);
B(B_VARIN,,CDgrabIntTimeUp,9,22,11,24,);
B(B_VARIN,,MDpowerLimReduct,9,21,11,23,);
B(B_FB,ADcalculateQV024,ADcalculateQ1,11,3,29,24,);
L(11,15,11,19);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 20 ;
        NETWORK_BODY
B(B_COMMENT,,activate pressure control grab open / close LUDV Pump ,1,1,27,2,);
B(B_FB,F_TRIG,F_TRIG2,11,10,18,13,);
B(B_F,sel,,18,11,23,16,);
B(B_VARIN,,MWludvExtPresSig,16,13,18,15,);
B(B_F,sel,,24,10,29,15,);
B(B_VARIN,,LWgrabStoPreOpen,22,16,24,18,);
B(B_VARIN,,CWludvPressure,16,14,18,16,);
B(B_VARIN,,MXgrabSigOpen,14,7,16,9,);
B(B_FB,R_TRIG,R_TRIG2,16,6,23,9,);
B(B_F,sel,,30,9,35,14,);
B(B_VARIN,,LWgrabStoPreClos,28,17,30,19,);
B(B_FB,R_TRIG,R_TRIG3,23,3,30,6,);
B(B_VARIN,,MXgrabSigClose,21,4,23,6,);
B(B_VAROUT,,MWludvExtPresSig,35,10,37,12,);
B(B_VARIN,,MXhydrGrabActive,9,11,11,13,);
L(23,13,24,13);
L(24,14,24,17);
L(24,8,24,12);
L(18,12,18,13);
L(23,8,24,8);
L(29,12,30,12);
L(30,13,30,18);
L(30,5,30,11);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 25 ;
        NETWORK_BODY
B(B_VAROUT,,QTXautoHoseWinch,46,4,48,6,);
B(B_FB,RS,RS7,41,3,46,7,);
B(B_VARIN,,ITXleHoseWinchUp,19,16,21,18,);
B(B_F,@OR-3,,29,7,34,12,0N);
B(B_VARIN,,ITXriHoseWinchUp,19,17,21,19,);
B(B_VARIN,,ITXleHoseWinchDn,19,18,21,20,);
B(B_VARIN,,ITXriHoseWinchDn,19,19,21,21,);
B(B_VARIN,,ITXcableWinchUp,19,20,21,22,);
B(B_VARIN,,ITXcableWinchDn,19,21,21,23,);
B(B_COMMENT,,preselection automatic hose winches and cable winch,1,1,27,2,);
B(B_F,@AND-2,,21,11,26,15,0N);
B(B_F,@AND-2,,21,7,26,11,);
B(B_VARIN,,MXstopAllFunctio,19,13,21,15,);
B(B_FB,R_TRIG,R_TRIG4,11,3,18,6,);
B(B_VARIN,,ITXautoHoseWinch,9,4,11,6,);
B(B_VARIN,,MXSShyGrabPresel,18,12,20,14,);
B(B_VARIN,,QTXautoHoseWinch,17,9,19,11,);
B(B_F,@AND-2,,21,3,26,7,);
B(B_F,@AND-3,,36,7,41,12,);
B(B_VARIN,,MXhg1WinchStand,33,17,35,19,);
B(B_VARIN,,MXhg2WinchStand,34,18,36,20,);
B(B_VAROUT,,MXenabAutHoseWin,46,6,48,8,);
B(B_VAROUT,,LXhoseWinAutGrab,46,5,48,7,);
B(B_F,@OR-7,,21,15,26,24,);
B(B_VARIN,,MXexitSSHydrGrab,19,22,21,24,);
L(27,10,29,10);
L(27,10,27,13);
L(28,11,29,11);
L(20,13,21,13);
L(26,13,27,13);
L(19,9,21,9);
L(26,9,29,9);
L(41,6,41,9);
L(28,11,28,17);
L(20,6,21,6);
L(20,6,20,13);
L(19,5,19,9);
L(19,10,21,10);
L(18,5,21,5);
L(26,5,41,5);
L(34,9,36,9);
L(35,10,35,18);
L(35,10,36,10);
L(36,11,36,19);
L(46,5,46,7);
L(26,17,28,17);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,jump to soil when Soilmec grap is preselected,1,1,27,2,);
B(B_VARIN,,MXadSMHydrGrab,9,3,11,5,);
B(B_JUMP,,soil,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 28 ;
        NETWORK_BODY
B(B_VARIN,,ITXautoHoseWinch,9,9,11,11,);
B(B_F,@AND-2,,18,5,23,9,0N);
B(B_VARIN,,ITXleHoseWinchUp,16,6,18,8,);
B(B_VARIN,,ITXleHoseWinchDn,9,10,11,12,);
B(B_VARIN,,ITXriHoseWinchDn,9,11,11,13,);
B(B_VARIN,,ITXcableWinchDn,9,12,11,14,);
B(B_VARIN,,MXstopAllFunctio,9,13,11,15,);
B(B_F,@AND-2,,18,14,23,18,0N);
B(B_VARIN,,ITXriHoseWinchUp,14,15,16,17,);
B(B_F,@AND-2,,18,18,23,22,0N);
B(B_VARIN,,ITXcableWinchUp,14,19,16,21,);
B(B_COMMENT,,preselection hose winches and cable winch manuell lifting,1,2,27,3,);
B(B_COMMENT,,Soletanche Grap,1,1,27,2,);
B(B_F,@OR-5,,11,8,16,15,);
B(B_F,@OR-3,,27,22,32,27,);
B(B_VAROUT,,LXhoseWinManLift,32,23,34,25,);
B(B_F,@OR-2,,27,17,32,21,);
B(B_VAROUT,,QTXcableWinchUp,32,18,34,20,);
B(B_F,@OR-2,,27,13,32,17,);
B(B_VAROUT,,QTXriHoseWinchUp,32,14,34,16,);
B(B_F,@OR-2,,27,4,32,8,);
B(B_VAROUT,,QTXleHoseWinchUp,32,5,34,7,);
B(B_VARIN,,LXhoseWinAutGrab,24,4,26,6,);
L(17,8,18,8);
L(17,17,18,17);
L(16,16,18,16);
L(17,21,18,21);
L(16,20,18,20);
L(17,8,17,21);
L(26,20,26,24);
L(25,16,25,25);
L(16,10,17,10);
L(26,24,27,24);
L(25,25,27,25);
L(24,7,24,26);
L(24,26,27,26);
L(23,20,27,20);
L(23,16,27,16);
L(26,6,27,6);
L(23,7,27,7);
L(26,5,26,19);
L(26,19,27,19);
L(26,15,27,15);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 21 ;
        NETWORK_BODY
B(B_VARIN,,ITXautoHoseWinch,9,7,11,9,);
B(B_F,@AND-2,,18,3,23,7,0N);
B(B_VARIN,,ITXleHoseWinchDn,16,4,18,6,);
B(B_VARIN,,ITXleHoseWinchUp,9,8,11,10,);
B(B_VARIN,,ITXriHoseWinchUp,9,9,11,11,);
B(B_VARIN,,ITXcableWinchUp,9,10,11,12,);
B(B_VARIN,,MXstopAllFunctio,9,11,11,13,);
B(B_F,@AND-2,,18,12,23,16,0N);
B(B_VARIN,,ITXriHoseWinchDn,14,13,16,15,);
B(B_F,@AND-2,,18,16,23,20,0N);
B(B_VARIN,,ITXcableWinchDn,14,17,16,19,);
B(B_COMMENT,,preselection hose winches and cable winch manuell lowering ,1,1,27,2,);
B(B_F,@OR-3,,26,7,31,12,);
B(B_VAROUT,,LXhoseWinManLow,31,8,33,10,);
B(B_VAROUT,,QTXriHoseWinchDn,26,13,28,15,);
B(B_VAROUT,,QTXcableWinchDn,25,17,27,19,);
B(B_VAROUT,,QTXleHoseWinchDn,24,4,26,6,);
B(B_F,@OR-5,,11,6,16,13,);
L(17,6,18,6);
L(17,15,18,15);
L(16,14,18,14);
L(17,19,18,19);
L(16,18,18,18);
L(17,6,17,19);
L(25,11,26,11);
L(25,11,25,18);
L(23,14,24,14);
L(24,10,24,14);
L(24,10,26,10);
L(24,9,26,9);
L(23,18,25,18);
L(24,14,26,14);
L(24,5,24,9);
L(23,5,24,5);
L(16,8,17,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 19 ;
        NETWORK_BODY
B(B_COMMENT,,control brakes hose winches and cable winch,1,1,27,2,);
B(B_F,@OR-3,,20,4,25,9,);
B(B_VAROUT,,QXhoseBrakeRight,20,10,22,12,);
B(B_VAROUT,,QXcableWinBrake,19,15,21,17,);
B(B_VAROUT,,QXhoseBrakeLeft,18,2,20,4,);
B(B_VAROUT,,LXhoseWinEnPowSt,25,5,27,7,);
B(B_VARIN,,QTXcableWinchUp,10,15,12,17,);
B(B_VARIN,,QTXcableWinchDn,10,16,12,18,);
B(B_VARIN,,QTXleHoseWinchUp,10,5,12,7,);
B(B_VARIN,,QTXleHoseWinchDn,10,6,12,8,);
B(B_VARIN,,QTXriHoseWinchUp,10,10,12,12,);
B(B_VARIN,,QTXriHoseWinchDn,10,11,12,13,);
B(B_F,@OR-2,,12,4,17,8,);
B(B_F,@OR-2,,12,9,17,13,);
B(B_F,@OR-2,,12,14,17,18,);
L(19,8,20,8);
L(18,7,20,7);
L(19,8,19,16);
L(18,7,18,11);
L(18,3,18,6);
L(17,6,20,6);
L(17,11,20,11);
L(17,16,19,16);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 18 ;
        NETWORK_BODY
B(B_COMMENT,,Soletanche grap adjustment ,1,1,27,2,);
B(B_COMMENT,,lock zylinder,1,2,27,3,);
B(B_F,@OR-2,,15,7,20,11,);
B(B_F,@OR-2,,15,13,20,17,);
B(B_VARIN,,ITXgrabAdj2Out,10,8,12,10,);
B(B_VARIN,,MXstopAllFunctio,10,9,12,11,);
B(B_VARIN,,ITXgrabAdj2In,11,5,13,7,);
B(B_F,@AND-2,,21,4,26,8,0N);
B(B_F,@AND-2,,21,10,26,14,0N);
B(B_VAROUT,,QTXgrabAdj2Out,26,11,28,13,);
B(B_VAROUT,,QTXgrabAdj2In,26,5,28,7,);
L(20,9,21,9);
L(20,15,21,15);
L(12,9,15,9);
L(12,10,15,10);
L(14,9,14,12);
L(13,6,13,15);
L(13,15,15,15);
L(12,10,12,16);
L(12,16,15,16);
L(21,7,21,9);
L(21,13,21,15);
L(13,6,21,6);
L(14,12,21,12);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 15 ;
        NETWORK_BODY
B(B_F,sel,,18,5,23,10,);
B(B_F,sel,,24,4,29,9,);
B(B_VARIN,,0.0,16,7,18,9,);
B(B_VAROUT,,LDgrAd2AnalSig,29,5,31,7,);
B(B_F,@MUL-2,,18,10,23,14,);
B(B_VARIN,,-1.0,16,12,18,14,);
B(B_F,to_real,,11,10,18,13,);
B(B_VARIN,,100.0,9,11,11,13,);
B(B_COMMENT,,analog part grab lock cylinder,1,1,27,2,);
B(B_VARIN,,QTXgrabAdj2Out,16,6,18,8,);
B(B_VARIN,,QTXgrabAdj2In,22,3,24,5,);
L(24,4,24,6);
L(23,7,24,7);
L(23,12,24,12);
L(24,8,24,12);
L(18,9,18,12);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_COMMENT,,analog part grab lock cylinder,1,1,27,2,);
B(B_VAROUT,,MDgrLockCylPuSig,34,5,36,7,);
B(B_VARIN,,LDgrAd2AnalSig,9,5,11,7,);
B(B_VAROUT,,LXgrLockCylZero,34,6,36,8,);
B(B_VARIN,,100.0,9,6,11,8,);
B(B_VARIN,,CDgrLockLimitSig,9,7,11,9,);
B(B_VARIN,,300.0,9,9,11,11,);
B(B_FB,FB_anaCylAnaV011,analog1,11,4,34,12,);
B(B_F,NE_R,,34,1,39,5,);
B(B_VAROUT,,LXgrLockCylAct,39,2,41,4,);
B(B_VARIN,,0.0,32,2,34,4,);
B(B_VARIN,,300.0,9,10,11,12,);
L(34,4,34,6);
L(11,8,11,9);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 16 ;
        NETWORK_BODY
B(B_COMMENT,,pressure control signal grab lock cylinder,1,1,27,2,);
B(B_F,@GT-2,,13,3,18,7,);
B(B_F,@LT-2,,13,7,18,11,);
B(B_VARIN,,MDgrLockCylPuSig,10,4,12,6,);
B(B_VARIN,,0.0,9,9,11,11,);
B(B_VARIN,,CDgrLockCPSigIn,18,11,20,13,);
B(B_VARIN,,0.0,18,10,20,12,);
B(B_F,sel,,20,8,25,13,);
B(B_VARIN,,CDgrLockCPSigOut,24,13,26,15,);
B(B_F,sel,,26,7,31,12,);
B(B_VAROUT,,MDgrLockCylPrSig,31,8,33,10,);
L(12,5,13,5);
L(12,5,12,9);
L(12,9,13,9);
L(11,6,13,6);
L(11,6,11,10);
L(11,10,13,10);
L(25,10,26,10);
L(19,9,19,10);
L(18,9,19,9);
L(19,10,20,10);
L(18,5,26,5);
L(26,5,26,9);
L(26,11,26,14);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 17 ;
        NETWORK_BODY
B(B_F,@OR-2,,14,6,19,10,);
B(B_F,@OR-2,,14,12,19,16,);
B(B_VARIN,,ITXgrabAdj1In,9,7,11,9,);
B(B_VARIN,,MXstopAllFunctio,9,8,11,10,);
B(B_COMMENT,,hose winch adjustment,1,1,27,2,);
B(B_VARIN,,ITXgrabAdj1Out,10,4,12,6,);
B(B_F,@AND-2,,20,3,25,7,0N);
B(B_F,@AND-2,,20,9,25,13,0N);
B(B_VAROUT,,QTXgrabAdj1In,25,10,27,12,);
B(B_VAROUT,,QTXgrabAdj1Out,25,4,27,6,);
L(19,8,20,8);
L(20,6,20,8);
L(19,14,20,14);
L(20,12,20,14);
L(11,8,14,8);
L(11,9,14,9);
L(13,8,13,11);
L(12,5,12,14);
L(12,14,14,14);
L(11,9,11,15);
L(11,15,14,15);
L(12,5,20,5);
L(13,11,20,11);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 15 ;
        NETWORK_BODY
B(B_F,sel,,18,5,23,10,);
B(B_F,sel,,24,4,29,9,);
B(B_VARIN,,0.0,16,7,18,9,);
B(B_VAROUT,,LDgrAd1AnalSig,29,5,31,7,);
B(B_VARIN,,QTXgrabAdj1Out,22,3,24,5,);
B(B_VARIN,,QTXgrabAdj1In,16,6,18,8,);
B(B_F,@MUL-2,,18,10,23,14,);
B(B_VARIN,,-1.0,16,12,18,14,);
B(B_F,to_real,,11,10,18,13,);
B(B_VARIN,,100.0,9,11,11,13,);
B(B_COMMENT,,analog part hose adjust cylinder,1,1,27,2,);
L(24,4,24,6);
L(23,7,24,7);
L(23,12,24,12);
L(24,8,24,12);
L(18,9,18,12);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_COMMENT,,analog part hose adjust cylinder,1,1,27,2,);
B(B_VAROUT,,MDgrHoAdCylPuSig,34,5,36,7,);
B(B_VARIN,,LDgrAd1AnalSig,9,5,11,7,);
B(B_VAROUT,,LXgrHoAdPumpZero,34,6,36,8,);
B(B_VARIN,,100.0,9,6,11,8,);
B(B_VARIN,,CDgrHoAdLimitSig,9,7,11,9,);
B(B_VARIN,,300.0,9,10,11,12,);
B(B_VARIN,,300.0,9,9,11,11,);
B(B_FB,FB_anaCylAnaV011,analog2,11,4,34,12,);
B(B_F,NE_R,,34,1,39,5,);
B(B_VAROUT,,LXgrHoAdPumpAct,39,2,41,4,);
B(B_VARIN,,0.0,32,2,34,4,);
L(34,4,34,6);
L(11,8,11,9);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_VARIN,,TRUE,10,3,12,5,);
B(B_JUMP,,allgrap,12,3,14,5,);
B(B_COMMENT,,jump to all grap,1,1,27,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL := soil: ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 21 ;
        NETWORK_BODY
B(B_VARIN,,ITXautoHoseWinch,10,9,12,11,);
B(B_F,@AND-2,,19,5,24,9,0N);
B(B_VARIN,,ITXleHoseWinchUp,17,6,19,8,);
B(B_VARIN,,ITXleHoseWinchDn,10,10,12,12,);
B(B_VARIN,,ITXriHoseWinchDn,10,11,12,13,);
B(B_F,@AND-2,,19,13,24,17,0N);
B(B_VARIN,,ITXriHoseWinchUp,15,14,17,16,);
B(B_COMMENT,,preselection hose winches manuell lifting,1,2,27,3,);
B(B_VARIN,,MXstopAllFunctio,10,12,12,14,);
B(B_F,@OR-4,,12,8,17,14,);
B(B_COMMENT,,Soilmec Grap,1,1,27,2,);
B(B_F,@OR-2,,27,16,32,20,);
B(B_VAROUT,,LXhoseWinManLift,32,17,34,19,);
B(B_VARIN,,LXhoseWinAutGrab,24,4,26,6,);
B(B_VAROUT,,QTXriHoseWinchUp,32,13,34,15,);
B(B_F,@OR-2,,27,12,32,16,);
B(B_F,@OR-2,,27,4,32,8,);
B(B_VAROUT,,QTXleHoseWinchUp,32,5,34,7,);
L(18,8,19,8);
L(18,16,19,16);
L(17,15,19,15);
L(26,15,26,18);
L(18,8,18,16);
L(17,10,18,10);
L(25,7,25,19);
L(26,18,27,18);
L(25,19,27,19);
L(26,5,26,14);
L(26,14,27,14);
L(24,15,27,15);
L(24,7,27,7);
L(26,6,27,6);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 17 ;
        NETWORK_BODY
B(B_F,@AND-2,,19,3,24,7,0N);
B(B_VARIN,,ITXleHoseWinchDn,17,4,19,6,);
B(B_F,@AND-2,,19,12,24,16,0N);
B(B_VARIN,,ITXriHoseWinchDn,15,13,17,15,);
B(B_COMMENT,,preselection hose winches and cable winch manuell lowering ,1,1,27,2,);
B(B_VAROUT,,QTXleHoseWinchDn,25,4,27,6,);
B(B_F,@OR-2,,26,7,31,11,);
B(B_VAROUT,,LXhoseWinManLow,31,8,33,10,);
B(B_VAROUT,,QTXriHoseWinchDn,25,13,27,15,);
B(B_VARIN,,ITXautoHoseWinch,10,7,12,9,);
B(B_VARIN,,ITXleHoseWinchUp,10,8,12,10,);
B(B_VARIN,,ITXriHoseWinchUp,10,9,12,11,);
B(B_VARIN,,MXstopAllFunctio,10,10,12,12,);
B(B_F,@OR-4,,12,6,17,12,);
L(18,6,19,6);
L(18,15,19,15);
L(17,14,19,14);
L(24,14,25,14);
L(25,10,25,14);
L(25,5,25,9);
L(24,5,25,5);
L(18,6,18,15);
L(25,10,26,10);
L(25,9,26,9);
L(17,8,18,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_VARIN,,ITXautoHoseWinch,10,8,12,10,);
B(B_F,@AND-2,,19,4,24,8,0N);
B(B_VARIN,,ITXcableWinchUp,17,5,19,7,);
B(B_VARIN,,ITXcableWinchDn,10,9,12,11,);
B(B_VARIN,,MXstopAllFunctio,10,10,12,12,);
B(B_COMMENT,,preselection cable winches manuell lifting,1,1,27,2,);
B(B_F,@OR-3,,12,7,17,12,);
B(B_F,@OR-2,,25,3,30,7,);
B(B_VAROUT,,QTXcableWinchUp,30,4,32,6,);
B(B_VARIN,,LXhoseWinAutGrab,23,3,25,5,);
L(18,7,19,7);
L(18,7,18,9);
L(17,9,18,9);
L(24,6,25,6);
L(25,4,25,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_VARIN,,ITXautoHoseWinch,10,7,12,9,);
B(B_F,@AND-2,,19,3,24,7,0N);
B(B_VARIN,,ITXcableWinchDn,17,4,19,6,);
B(B_VARIN,,ITXcableWinchUp,10,8,12,10,);
B(B_VARIN,,MXstopAllFunctio,10,9,12,11,);
B(B_COMMENT,,preselection cable winches manuell lowering,1,1,27,2,);
B(B_VAROUT,,QTXcableWinchDn,24,4,26,6,);
B(B_F,@OR-3,,12,6,17,11,);
L(18,6,19,6);
L(18,6,18,8);
L(17,8,18,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 14 ;
        NETWORK_BODY
B(B_COMMENT,,control brakes hose winches,1,1,27,2,);
B(B_VAROUT,,QXhoseBrakeLeft,18,2,20,4,);
B(B_VAROUT,,QXhoseBrakeRight,18,10,20,12,);
B(B_VAROUT,,LXhoseWinEnPowSt,24,5,26,7,);
B(B_F,@OR-2,,19,4,24,8,);
B(B_VAROUT,,QXrelBrakePress,24,6,26,8,);
B(B_VARIN,,QTXleHoseWinchUp,10,5,12,7,);
B(B_VARIN,,QTXleHoseWinchDn,10,6,12,8,);
B(B_VARIN,,QTXriHoseWinchUp,10,10,12,12,);
B(B_VARIN,,QTXriHoseWinchDn,10,11,12,13,);
B(B_F,@OR-2,,12,4,17,8,);
B(B_F,@OR-2,,12,9,17,13,);
L(18,7,18,11);
L(18,3,18,6);
L(18,7,19,7);
L(24,6,24,7);
L(17,6,19,6);
L(17,11,18,11);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_COMMENT,,control brakes cable winch,1,1,27,2,);
B(B_VAROUT,,QXcableDrumLift,12,3,14,5,);
B(B_F,@OR-2,,13,5,18,9,);
B(B_VARIN,,QTXcableWinchDn,10,9,12,11,);
B(B_VAROUT,,QXcableDrumLower,12,9,14,11,);
B(B_VAROUT,,QXcableWinBrake,18,6,20,8,);
B(B_VARIN,,QTXcableWinchUp,10,3,12,5,);
L(12,4,12,7);
L(12,7,13,7);
L(12,8,13,8);
L(12,8,12,10);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_COMMENT,,,1,1,27,2,);
B(B_VARIN,,0.0,10,6,12,8,);
B(B_F,sel,,12,3,17,8,);
B(B_VAROUT,,LDgrAdAnalSignal,17,4,19,6,);
B(B_VARIN,,MXstopAllFunctio,10,4,12,6,);
B(B_VARIN,,MDgrAdJoySignal,10,5,12,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_COMMENT,,analog part grab adjustment cylinder,1,1,27,2,);
B(B_VAROUT,,MDgrabAdPuSig,34,5,36,7,);
B(B_VARIN,,LDgrAdAnalSignal,9,5,11,7,);
B(B_VAROUT,,LXgrAdPumpZero,34,6,36,8,);
B(B_VARIN,,100.0,9,6,11,8,);
B(B_VARIN,,CDgrabAdLimitSig,9,7,11,9,);
B(B_VARIN,,300.0,9,9,11,11,);
B(B_VARIN,,300.0,9,10,11,12,);
B(B_FB,FB_anaCylAnaV011,analog3,11,4,34,12,);
B(B_F,NE_R,,34,1,39,5,);
B(B_VAROUT,,LXgrAdPumpAct,39,2,41,4,);
B(B_VARIN,,0.0,32,2,34,4,);
L(34,4,34,6);
L(11,8,11,9);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL := allgrap: ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 20 ;
        NETWORK_BODY
B(B_F,sel,,22,6,27,11,);
B(B_F,sel,,29,5,34,10,);
B(B_F,to_real,,15,7,22,10,);
B(B_VARIN,,0.0,13,8,15,10,);
B(B_F,sel,,36,4,41,9,);
B(B_VARIN,,LXhoseWinAutGrab,33,3,35,5,);
B(B_VARIN,,LXhoseWinManLift,26,4,28,6,);
B(B_VARIN,,LXhoseWinManLow,20,5,22,7,);
B(B_F,@MUL-2,,17,10,22,14,);
B(B_VARIN,,-1.0,15,11,17,13,);
B(B_COMMENT,,hose winch analog output signal pump ,1,1,27,2,);
B(B_F,limit,,45,3,51,8,);
B(B_VARIN,,-100.0,43,4,45,6,);
B(B_VARIN,,100.0,43,6,45,8,);
B(B_VAROUT,,MDhoWiPumpSigCC,51,4,53,6,);
B(B_VARIN,,MXadSMHydrGrab,10,13,12,15,);
B(B_F,sel,,12,12,17,17,);
B(B_VARIN,,CDSBhoWiManPuSi,10,14,12,16,);
B(B_VARIN,,CDSMhoWiManPuSi,10,15,12,17,);
B(B_F,sel,,29,14,34,19,);
B(B_VARIN,,CDSBhoWiAutPuSi,27,16,29,18,);
B(B_VARIN,,CDSMhoWiAutPuSi,27,17,29,19,);
B(B_VARIN,,MXadSMHydrGrab,27,15,29,17,);
L(28,9,29,9);
L(27,8,29,8);
L(28,7,29,7);
L(28,5,28,7);
L(22,6,22,8);
L(35,8,36,8);
L(34,7,36,7);
L(35,6,36,6);
L(35,4,35,6);
L(22,10,22,12);
L(17,14,28,14);
L(28,9,28,14);
L(17,13,17,14);
L(41,6,45,6);
L(34,16,35,16);
L(35,8,35,16);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 20 ;
        NETWORK_BODY
B(B_COMMENT,,power stage pressure control hose pump,1,1,27,2,);
B(B_VARIN,,QXhg1BrakeNormal,10,7,12,9,);
B(B_VARIN,,QXhg1BrakeFastSp,10,8,12,10,);
B(B_F,@OR-2,,12,6,17,10,);
B(B_F,@AND-2,,19,3,24,7,);
B(B_VARIN,,MXhg1AnalSigPos,17,4,19,6,);
B(B_VARIN,,QXhg2BrakeNormal,10,13,12,15,);
B(B_VARIN,,QXhg2BrakeFastSp,10,14,12,16,);
B(B_F,@OR-2,,12,12,17,16,);
B(B_F,@AND-2,,19,9,24,13,);
B(B_VARIN,,MXhg2AnalSigPos,17,10,19,12,);
B(B_VAROUT,,LXhoseWinHighPr,32,4,34,6,);
B(B_VARIN,,MXlgAnalSigNeg,17,16,19,18,);
B(B_F,@AND-2,,19,15,24,19,);
B(B_VARIN,,QXlgBrake,17,17,19,19,);
B(B_F,@OR-3,,27,3,32,8,);
L(17,8,18,8);
L(18,6,18,8);
L(18,6,19,6);
L(17,14,18,14);
L(18,12,18,14);
L(18,12,19,12);
L(24,11,25,11);
L(25,6,25,11);
L(25,6,27,6);
L(24,5,27,5);
L(24,17,26,17);
L(26,7,26,17);
L(26,7,27,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 19 ;
        NETWORK_BODY
B(B_COMMENT,,hose winch output signal pressure control valve ,1,1,27,2,);
B(B_F,limit,,35,2,41,7,);
B(B_VARIN,,0.0,33,3,35,5,);
B(B_VARIN,,100.0,33,5,35,7,);
B(B_VAROUT,,MDhoWiPresSigCC,41,3,43,5,);
B(B_F,sel,,20,5,25,10,);
B(B_VARIN,,LXhoseWinHighPr,18,6,20,8,);
B(B_F,sel,,27,3,32,8,);
B(B_VARIN,,0.0,25,5,27,7,);
B(B_VARIN,,LXhoseWinEnPowSt,25,4,27,6,);
B(B_F,sel,,14,8,19,13,);
B(B_VARIN,,MXadSMHydrGrab,11,9,13,11,);
B(B_F,sel,,14,13,19,18,);
B(B_VARIN,,CDSMhoWiLoPresSi,10,11,12,13,);
B(B_VARIN,,CDSBhoWiLoPresSi,10,10,12,12,);
B(B_VARIN,,CDSBhoWiHiPresSi,12,15,14,17,);
B(B_VARIN,,CDSMhoWiHiPresSi,12,16,14,18,);
L(25,7,27,7);
L(32,5,35,5);
L(19,8,20,8);
L(20,9,20,15);
L(19,8,19,10);
L(19,15,20,15);
L(12,11,14,11);
L(12,12,14,12);
L(13,10,14,10);
L(13,10,13,15);
L(13,15,14,15);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 17 ;
        NETWORK_BODY
B(B_F,@OR-2,,15,6,20,10,);
B(B_F,@OR-2,,15,12,20,16,);
B(B_VARIN,,MXjoyHyGrabTurnL,10,7,12,9,);
B(B_VARIN,,MXstopAllFunctio,10,8,12,10,);
B(B_COMMENT,,grap slewing ,1,1,27,2,);
B(B_F,@AND-2,,20,3,25,7,0N);
B(B_VAROUT,,LXpreGrTurnRight,25,4,27,6,);
B(B_F,@AND-2,,20,9,25,13,0N);
B(B_VAROUT,,LXpreGrTurnLeft,25,10,27,12,);
B(B_VARIN,,MXjoyHyGrabTurnR,11,4,13,6,);
L(12,8,15,8);
L(12,9,15,9);
L(14,8,14,11);
L(13,5,13,14);
L(13,14,15,14);
L(12,9,12,15);
L(12,15,15,15);
L(20,6,20,8);
L(20,12,20,14);
L(14,11,20,11);
L(13,5,20,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_COMMENT,,analog signal of grap slewing ,1,1,27,2,);
B(B_F,@DIV,,12,3,17,7,);
B(B_VARIN,,100.0,10,5,12,7,);
B(B_VARIN,,LDleJoyPoti,10,4,12,6,);
B(B_F,@MUL-2,,19,5,24,9,);
B(B_VAROUT,,LDgrabSlewAnaSig,24,6,26,8,);
B(B_VARIN,,100.0,17,7,19,9,);
L(17,5,18,5);
L(18,5,18,7);
L(18,7,19,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 15 ;
        NETWORK_BODY
B(B_F,sel,,12,5,17,10,);
B(B_F,sel,,18,4,23,9,);
B(B_VARIN,,0.0,10,7,12,9,);
B(B_VAROUT,,LDgrSlewAnalSig,23,5,25,7,);
B(B_F,@MUL-2,,12,10,17,14,);
B(B_VARIN,,-1.0,10,12,12,14,);
B(B_COMMENT,,analog part grab slewing cylinder,1,1,27,2,);
B(B_VARIN,,LXpreGrTurnLeft,16,3,18,5,);
B(B_VARIN,,LXpreGrTurnRight,10,6,12,8,);
B(B_VARIN,,LDgrabSlewAnaSig,10,8,12,10,);
L(18,4,18,6);
L(17,7,18,7);
L(17,12,18,12);
L(18,8,18,12);
L(12,9,12,12);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_COMMENT,,analog part grab slewing cylinder,1,1,27,2,);
B(B_VAROUT,,MDgrSlewPuSigB,47,4,49,6,);
B(B_VARIN,,LDgrSlewAnalSig,22,4,24,6,);
B(B_VAROUT,,LXgrSlewPumpZero,47,5,49,7,);
B(B_VARIN,,100.0,22,5,24,7,);
B(B_VARIN,,CDgrSlewTimeDn,22,9,24,11,);
B(B_VARIN,,CDgrSlewTimeUp,22,8,24,10,);
B(B_FB,FB_anaCylAnaV011,analog4,24,3,47,11,);
B(B_F,NE_R,,47,0,52,4,);
B(B_VAROUT,,LXgrSlewPumpAct,52,1,54,3,);
B(B_VARIN,,0.0,45,1,47,3,);
B(B_F,sel,,11,5,16,10,);
B(B_VARIN,,CDgrSlewAnaSigSM,9,8,11,10,);
B(B_VARIN,,CDgrSlewAnaSigSB,9,7,11,9,);
B(B_VARIN,,MXadSMHydrGrab,9,6,11,8,);
L(47,3,47,5);
L(16,7,24,7);
L(24,7,24,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_VAROUT,,MXrelGrabValves,16,4,18,6,);
B(B_COMMENT,,release grap valves,1,1,27,2,);
B(B_VARIN,,QXcableDrumLift,9,4,11,6,);
B(B_VARIN,,QXcableDrumLower,9,5,11,7,);
B(B_VARIN,,LXgrSlewPumpAct,9,6,11,8,);
B(B_VARIN,,LXgrAdPumpAct,9,7,11,9,);
B(B_VARIN,,LXgrHoAdPumpAct,9,8,11,10,);
B(B_VARIN,,LXgrLockCylAct,9,9,11,11,);
B(B_F,@OR-6,,11,3,16,11,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_COMMENT,,hydr. grab working,1,1,29,2,);
B(B_VARIN,,MXhydrGrabActive,9,4,11,6,);
B(B_VARIN,,LXhoseWinEnPowSt,9,5,11,7,);
B(B_VARIN,,MXrelGrabValves,9,6,11,8,);
B(B_VAROUT,,LXhydGrabWorking,16,4,18,6,);
B(B_VARIN,,QXhg1_2connectio,9,7,11,9,);
B(B_F,@OR-4,,11,3,16,9,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 19 ;
        NETWORK_BODY
B(B_COMMENT,,set hydraulical connection winch 1 and 2,1,1,27,2,);
B(B_VARIN,,QXhg1BrakeNormal,9,7,11,9,);
B(B_VARIN,,QXhg1BrakeFastSp,9,8,11,10,);
B(B_F,@OR-2,,11,10,16,14,);
B(B_VARIN,,QXhg2BrakeNormal,9,11,11,13,);
B(B_VARIN,,QXhg2BrakeFastSp,9,12,11,14,);
B(B_F,@OR-2,,11,6,16,10,);
B(B_F,@AND-4,,19,4,24,10,);
B(B_VARIN,,MXhg1AnalSigPos,16,3,18,5,);
B(B_VARIN,,MXhg2AnalSigPos,15,4,17,6,);
B(B_F,@AND-4,,19,12,24,18,);
B(B_VARIN,,MXhg1AnalSigNeg,17,15,19,17,);
B(B_VARIN,,MXhg2AnalSigNeg,17,16,19,18,);
B(B_F,@OR-2,,26,4,31,8,);
B(B_VAROUT,,QXhg1_2connectio,31,5,33,7,);
L(16,8,17,8);
L(16,12,18,12);
L(18,9,18,12);
L(18,9,19,9);
L(17,8,19,8);
L(18,4,18,6);
L(18,6,19,6);
L(17,5,17,7);
L(17,7,19,7);
L(18,12,18,14);
L(18,14,19,14);
L(17,8,17,15);
L(17,15,19,15);
L(24,6,26,6);
L(25,7,26,7);
L(25,7,25,14);
L(24,14,25,14);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,exit grab program,1,1,27,2,);
B(B_VARIN,,TRUE,9,3,11,5,);
B(B_RETURN,,,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL := exit: ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 5 ;
        NETWORK_BODY
B(B_VARIN,,MXstopAllFunctio,9,2,11,4,);
B(B_F,not,,11,1,16,4,);
B(B_VAROUT,,QXgrabOpen,16,2,18,4,);
B(B_COMMENT,,Damit Öl für andere Verbraucher zur Schottplatte ø^geleitet wird.,27,2,47,4,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,exit grab program,1,1,27,2,);
B(B_VARIN,,TRUE,9,3,11,5,);
B(B_RETURN,,,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL := init: ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,init grab program,1,1,27,2,);
B(B_VARIN,,TRUE,9,3,11,5,);
B(B_VAROUT,,LXinitOk,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value additional hydraulics,1,1,27,2,);
B(B_FB,CorrValue_Bool,CorrValue_Bool1,11,4,23,10,);
B(B_VARIN,,CXadSBHydrGrab,9,8,11,10,);
B(B_VARIN,,FALSE,9,5,11,7,);
B(B_VARIN,,FALSE,9,6,11,8,);
B(B_VARIN,,TRUE,9,7,11,9,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value additional hydraulics,1,1,27,2,);
B(B_FB,CorrValue_Bool,CorrValue_Bool2,11,4,23,10,);
B(B_VARIN,,CXadSMHydrGrab,9,8,11,10,);
B(B_VARIN,,FALSE,9,5,11,7,);
B(B_VARIN,,FALSE,9,6,11,8,);
B(B_VARIN,,TRUE,9,7,11,9,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value integrator time down grab control,1,1,27,2,);
B(B_VARIN,,100.0,9,5,11,7,);
B(B_VARIN,,10.0,9,6,11,8,);
B(B_VARIN,,300.0,9,7,11,9,);
B(B_VARIN,,CDgrabIntTimeDn,9,8,11,10,);
B(B_FB,CorrValue_Real,CorrValue_Real1,11,4,23,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value integrator time up grab control,1,1,27,2,);
B(B_VARIN,,100.0,9,5,11,7,);
B(B_VARIN,,10.0,9,6,11,8,);
B(B_VARIN,,300.0,9,7,11,9,);
B(B_VARIN,,CDgrabIntTimeUp,9,8,11,10,);
B(B_FB,CorrValue_Real,CorrValue_Real2,11,4,23,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,delay release grap open/close,1,1,27,2,);
B(B_VARIN,,3.0,9,5,11,7,);
B(B_VARIN,,0.0,9,6,11,8,);
B(B_VARIN,,10.0,9,7,11,9,);
B(B_VARIN,,CDdelayRelGrab,9,8,11,10,);
B(B_FB,CorrValue_Real,CorrValue_Real3,11,4,23,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value analog signal grap slewing Soletanche,1,1,27,2,);
B(B_VARIN,,10.0,9,5,11,7,);
B(B_VARIN,,1.0,9,6,11,8,);
B(B_VARIN,,100.0,9,7,11,9,);
B(B_VARIN,,CDgrSlewAnaSigSB,9,8,11,10,);
B(B_FB,CorrValue_Real,CorrValue_Real4,11,4,23,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value analog signal grap slewing Soilmec,1,1,27,2,);
B(B_VARIN,,25.0,9,5,11,7,);
B(B_VARIN,,1.0,9,6,11,8,);
B(B_VARIN,,100.0,9,7,11,9,);
B(B_VARIN,,CDgrSlewAnaSigSM,9,8,11,10,);
B(B_FB,CorrValue_Real,CorrValue_Real5,11,4,23,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value integrator time up grap slewing control,1,1,27,2,);
B(B_VARIN,,100.0,9,5,11,7,);
B(B_VARIN,,10.0,9,6,11,8,);
B(B_VARIN,,300.0,9,7,11,9,);
B(B_VARIN,,CDgrSlewTimeUp,9,8,11,10,);
B(B_FB,CorrValue_Real,CorrValue_Real6,11,4,23,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value integrator time down grap slewing control,1,1,27,2,);
B(B_VARIN,,100.0,9,5,11,7,);
B(B_VARIN,,10.0,9,6,11,8,);
B(B_VARIN,,300.0,9,7,11,9,);
B(B_VARIN,,CDgrSlewTimeDn,9,8,11,10,);
B(B_FB,CorrValue_Real,CorrValue_Real7,11,4,23,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value grab adjustment limitation signal,1,1,27,2,);
B(B_VARIN,,50.0,9,5,11,7,);
B(B_VARIN,,1.0,9,6,11,8,);
B(B_VARIN,,100.0,9,7,11,9,);
B(B_VARIN,,CDgrabAdLimitSig,9,8,11,10,);
B(B_FB,CorrValue_Real,CorrValue_Real8,11,4,23,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value grab lock cylinder limitation signal,1,1,27,2,);
B(B_VARIN,,50.0,9,5,11,7,);
B(B_VARIN,,1.0,9,6,11,8,);
B(B_VARIN,,100.0,9,7,11,9,);
B(B_VARIN,,CDgrLockLimitSig,9,8,11,10,);
B(B_FB,CorrValue_Real,CorrValue_Real9,11,4,23,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value grab hose adjust cylinder limitation signal,1,1,27,2,);
B(B_VARIN,,50.0,9,5,11,7,);
B(B_VARIN,,1.0,9,6,11,8,);
B(B_VARIN,,100.0,9,7,11,9,);
B(B_VARIN,,CDgrHoAdLimitSig,9,8,11,10,);
B(B_FB,CorrValue_Real,CorrValue_Real10,11,4,23,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value grab lock cylinder pressure limitation In,1,1,27,2,);
B(B_VARIN,,100.0,9,5,11,7,);
B(B_VARIN,,1.0,9,6,11,8,);
B(B_VARIN,,100.0,9,7,11,9,);
B(B_FB,CorrValue_Real,CorrValue_Real11,11,4,23,10,);
B(B_VARIN,,CDgrLockCPSigIn,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value grab lock cylinder pressure limitation out,1,1,27,2,);
B(B_VARIN,,100.0,9,5,11,7,);
B(B_VARIN,,1.0,9,6,11,8,);
B(B_VARIN,,100.0,9,7,11,9,);
B(B_FB,CorrValue_Real,CorrValue_Real12,11,4,23,10,);
B(B_VARIN,,CDgrLockCPSigOut,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_VARIN,,100.0,9,5,11,7,);
B(B_VARIN,,1.0,9,6,11,8,);
B(B_VARIN,,100.0,9,7,11,9,);
B(B_FB,CorrValue_Real,CorrValue_Real13,11,4,23,10,);
B(B_VARIN,,CDSBhoWiAutPuSi,9,8,11,10,);
B(B_COMMENT,,SB correction value hose winch automatic lift [%],1,1,27,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,SB correction value hose winch manual [%],1,1,27,2,);
B(B_VARIN,,50.0,9,5,11,7,);
B(B_VARIN,,1.0,9,6,11,8,);
B(B_VARIN,,100.0,9,7,11,9,);
B(B_FB,CorrValue_Real,CorrValue_Real14,11,4,23,10,);
B(B_VARIN,,CDSBhoWiManPuSi,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_VARIN,,20.0,9,5,11,7,);
B(B_VARIN,,1.0,9,6,11,8,);
B(B_VARIN,,100.0,9,7,11,9,);
B(B_FB,CorrValue_Real,CorrValue_Real15,11,4,23,10,);
B(B_VARIN,,CDSBhoWiLoPresSi,9,8,11,10,);
B(B_COMMENT,,SB correction value low pres. signal hose winch [%],1,1,28,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,SB correction value high pres. signal hose winch [%],1,1,27,2,);
B(B_VARIN,,50.0,9,5,11,7,);
B(B_VARIN,,1.0,9,6,11,8,);
B(B_VARIN,,100.0,9,7,11,9,);
B(B_FB,CorrValue_Real,CorrValue_Real16,11,4,23,10,);
B(B_VARIN,,CDSBhoWiHiPresSi,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_VARIN,,100.0,9,5,11,7,);
B(B_VARIN,,1.0,9,6,11,8,);
B(B_VARIN,,100.0,9,7,11,9,);
B(B_FB,CorrValue_Real,CorrValue_Real17,11,4,23,10,);
B(B_VARIN,,CDSMhoWiAutPuSi,9,8,11,10,);
B(B_COMMENT,,SM correction value hose winch automatic lift [%],1,1,27,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,SM correction value hose winch manual [%],1,1,27,2,);
B(B_VARIN,,50.0,9,5,11,7,);
B(B_VARIN,,1.0,9,6,11,8,);
B(B_VARIN,,100.0,9,7,11,9,);
B(B_FB,CorrValue_Real,CorrValue_Real18,11,4,23,10,);
B(B_VARIN,,CDSMhoWiManPuSi,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_VARIN,,20.0,9,5,11,7,);
B(B_VARIN,,1.0,9,6,11,8,);
B(B_VARIN,,100.0,9,7,11,9,);
B(B_FB,CorrValue_Real,CorrValue_Real19,11,4,23,10,);
B(B_VARIN,,CDSMhoWiLoPresSi,9,8,11,10,);
B(B_COMMENT,,SM correction value low pres. signal hose winch [%],1,1,28,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,SM correction value high pres. signal hose winch [%],1,1,27,2,);
B(B_VARIN,,50.0,9,5,11,7,);
B(B_VARIN,,1.0,9,6,11,8,);
B(B_VARIN,,100.0,9,7,11,9,);
B(B_FB,CorrValue_Real,CorrValue_Real20,11,4,23,10,);
B(B_VARIN,,CDSMhoWiHiPresSi,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
END_BODY
END_PROGRAM

PROGRAM ADhydrGrapV210
(*name of author: Manfred Schapler
version: 1.0
date: 10/97
modification:*)
(*name of author: Manfred Schapler
version: 1.0
date: 04/97
modification:*)
	VAR_EXTERNAL 
		ITXautoHoseWinch: BOOL:=FALSE;
			(*preselection automatic hose winch *)
		ITXleHoseWinchUp: BOOL:=FALSE;
			(*preselection left hose winch up*)
		ITXriHoseWinchUp: BOOL:=FALSE;
			(*preselection right hose winch up*)
		ITXcableWinchUp: BOOL:=FALSE;
			(*preselection cable winch up*)
		ITXleHoseWinchDn: BOOL:=FALSE;
			(*preselection left hose winch down*)
		ITXriHoseWinchDn: BOOL:=FALSE;
			(*preselection right hose winch down*)
		ITXcableWinchDn: BOOL:=FALSE;
			(*preselection cable winch down*)
		ITXgrabAdj1Out: BOOL:=FALSE;
			(*preselection grab adjustment 1 out*)
		ITXgrabAdj2Out: BOOL:=FALSE;
			(*preselection grab adjustment 2 out*)
		ITXgrabAdj1In: BOOL:=FALSE;
			(*preselection grab adjustment 1 in*)
		ITXgrabAdj2In: BOOL:=FALSE;
			(*preselection grab adjustment 2 in*)
		IWleftJoystThum: INT:=0;
			(*left joystick analog signal thumb wheel*)
		IWgrabSysPresP2: UINT:=0;
			(*P2 sys.press.vibrator/hammer/hydr.grab*)
		QTXautoHoseWinch: BOOL:=FALSE;
			(*enable automatic hose winch *)
		QTXleHoseWinchUp: BOOL:=FALSE;
			(*preselection left hose winch up*)
		QTXriHoseWinchUp: BOOL:=FALSE;
			(*preselection right hose winch up*)
		QTXcableWinchUp: BOOL:=FALSE;
			(*preselection cable winch up*)
		QTXleHoseWinchDn: BOOL:=FALSE;
			(*preselection left hose winch down*)
		QTXriHoseWinchDn: BOOL:=FALSE;
			(*preselection right hose winch down*)
		QTXcableWinchDn: BOOL:=FALSE;
			(*preselection cable winch down*)
		QTXgrabAdj1Out: BOOL:=FALSE;
			(*enable grab adjustment 1 out*)
		QTXgrabAdj2Out: BOOL:=FALSE;
			(*enable grab adjustment 2 out*)
		QTXgrabAdj1In: BOOL:=FALSE;
			(*enable grab adjustment 1 In*)
		QTXgrabAdj2In: BOOL:=FALSE;
			(*enable grab adjustment 2 In*)
		QXlgBrake: BOOL:=FALSE;
			(*LG brake*)
		QXcableWinBrake: BOOL:=FALSE;
			(*Z17 cylinder in / brake cable winch*)
		QXhoseBrakeLeft: BOOL:=FALSE;
			(*pile guide cylinder open/ brake left hose winch SB*)
		QXhoseBrakeRight: BOOL:=FALSE;
			(*pile guide cylinder close/ brake right hose winch SB*)
		QXhg1BrakeNormal: BOOL:=FALSE;
			(*HG 1 brake normal speed operation*)
		QXhg2BrakeNormal: BOOL:=FALSE;
			(*HG 2 brake normal speed operation*)
		QXhg1BrakeFastSp: BOOL:=FALSE;
			(*HG 1 brake fast speed operation*)
		QXhg2BrakeFastSp: BOOL:=FALSE;
			(*HG 2 brake fast speed operation*)
		QXhg1_2connectio: BOOL:=FALSE;
			(*connection hg 1 & 2*)
		QXrelBrakePress: BOOL:=FALSE;
			(*release brake pressure*)
		QXcableDrumLift: BOOL:=FALSE;
			(*cable drum lifting/passenger winch lifting*)
		QXcableDrumLower: BOOL:=FALSE;
			(*cable drum lowering/passenger winch lowering*)
		QWgrabPressContr: UINT:=0;
			(*pressure control grab / drilling*)
		MXstopAllFunctio: BOOL:=FALSE;
			(*stop all excavator functions*)
		MXengStarterActi: BOOL:=FALSE;
			(*engine starter activated*)
		MXassemblyOperat: BOOL:=FALSE;
			(*assembly operation*)
		MXgrabGlobalStop: BOOL:=FALSE;
			(*ad global stop polyp grab*)
		MXgrabSigClose: BOOL:=FALSE;
			(*ad grab close*)
		MXgrabSigOpen: BOOL:=FALSE;
			(*ad grab open*)
		MXhg1WinchStand: BOOL:=FALSE;
			(*HG 1 winch standing still*)
		MXhg2WinchStand: BOOL:=FALSE;
			(*HG 2 winch standing still*)
		MXhg1AnalSigPos: BOOL:=FALSE;
			(*hg1 analog signal positiv*)
		MXhg1AnalSigNeg: BOOL:=FALSE;
			(*hg1 analog signal negativ*)
		MXhg2AnalSigPos: BOOL:=FALSE;
			(*hg2 analog signal positiv*)
		MXhg2AnalSigNeg: BOOL:=FALSE;
			(*hg2 analog signal negativ*)
		MXlgAnalSigNeg: BOOL:=FALSE;
			(*lg analog signal negativ*)
		MXenabAutHoseWin: BOOL:=FALSE;
			(*add. hydraulic grab automatic hose winch*)
		MXenabGrabPresel: BOOL:=FALSE;
			(*ad polyp grab enable preselected*)
		MXminEngineSpeed: BOOL:=FALSE;
			(*minimum engine speed reached*)
		MXhydrGrabActive: BOOL:=FALSE;
			(*ad hydr. grab is active*)
		MXenabKelGrabOpe: BOOL:=FALSE;
			(*enable add. kelly grab operation*)
		MXexitKelHyGrab: BOOL:=FALSE;
			(*exit add. kelly grab operation*)
		MXhydrGrab1Sect: BOOL:=FALSE;
			(*add. hydraulic grab with 1 section*)
		MXjoyHyGrabPre: BOOL:=FALSE;
			(*ad hydraulic grab preselection on joystick*)
		MXgrabEnaPowStag: BOOL:=FALSE;
			(*enable power stage hydr. grab*)
		MXaddHydrActive: BOOL:=FALSE;
			(*addittional hydraulics active*)
		MXrelGrabValves: BOOL:=FALSE;
			(*release pumpe for grab valves*)
		MXgrabEnJoySig: BOOL:=FALSE;
			(*grab enable joystick signal *)
		MXgrabPreJoySig: BOOL:=FALSE;
			(*preselection joy stick signal grab*)
		MXjoyHyGrabTurnL: BOOL:=FALSE;
			(*hydr. grab joystick turn left*)
		MXjoyHyGrabTurnR: BOOL:=FALSE;
			(*hydr. grab joystick turn right*)
		MX1LudvWorkSect: BOOL:=FALSE;
			(*only one ludv working section *)
		MDratedEngSpeed: REAL:=0.0;
			(*rated engine speed in rpm*)
		MDpowerLimReduct: REAL:=0.0;
			(*maximum engine power regulator reduction to x [%]*)
		MDgrabSysPress: REAL:=0.0;
			(*hydraulic grab system pressure in bar*)
		MDgrabPumpSignal: REAL:=0.0;
			(*hydraulic grab pump analog signal*)
		MDgrabJoySignal: REAL:=0.0;
			(*grab analog signal joystick +/-[%]*)
		MDgrAd1PumpSig: REAL:=0.0;
			(*grab adjustment1 pump signal *)
		MDgrAd2PumpSig: REAL:=0.0;
			(*grab adjustment2 pump signal *)
		MDgrSlewPuSigB: REAL:=0.0;
			(*grab slewing pump signal (button controlled) *)
		MDhoWiPumpSigCC: REAL:=0.0;
			(*hose winch pump signal (closed circuit) *)
		MDhoWiPresSigCC: REAL:=0.0;
			(*hose winch pressure signal (closed circuit) *)
		MDgrbPump1Signal: REAL:=0.0;
			(*grab analog signal pump 1 [%]*)
		MDgrbPump2Signal: REAL:=0.0;
			(*grab analog signal pump 2 [%]*)
	END_VAR
	VAR_EXTERNAL CONSTANT
		MSG_ERROR: UINT:=0;
			(* message priority: "error" *)
	END_VAR
	VAR_EXTERNAL RETAIN
		MRgrab1VolOpen: REAL:=0.0;
			(*grab 1 volume open*)
		MRgrab1VolClose: REAL:=0.0;
			(*grab 1 volume close*)
	END_VAR
	VAR_EXTERNAL CONSTANT RETAIN
		CXadKellyHydGrab: BOOL:=FALSE;
			(*add. device hydraulic kelly grab operation*)
		CXhydrGrab1Sect: BOOL:=FALSE;
			(*hydr. grab with only 1 ludv section*)
		CWp1MaxValue: UINT:=0;
			(*p1 ludv section max. value [l/min]*)
		CWp1MinCurValveB: UINT:=0;
			(*p1 ludv section min.current (B side) main*)
		CWp1MaxCurValveB: UINT:=0;
			(*p1 ludv section max.current (B side) main*)
		CWp1cur50liter: UINT:=0;
			(*p1 ludv section current for 50l/min*)
		CWp1cur100liter: UINT:=0;
			(*p1 ludv section current for 100l/min*)
		CWp1cur150liter: UINT:=0;
			(*p1 ludv section current for 150l/min*)
		CWp1cur200liter: UINT:=0;
			(*p1 ludv section current for 200l/min*)
		CWp1cur250liter: UINT:=0;
			(*p1 ludv section current for 250l/min*)
		CWp1cur300liter: UINT:=0;
			(*p1 ludv section current for 300l/min*)
		CWp2MaxValue: UINT:=0;
			(*p2 ludv section max. value [l/min]*)
		CWp2MinCurValveB: UINT:=0;
			(*p2 ludv section min.current (B side) main*)
		CWp2MaxCurValveB: UINT:=0;
			(*p2 ludv section max.current (B side) main*)
		CWp2cur50liter: UINT:=0;
			(*p2 ludv section current for 50l/min*)
		CWp2cur100liter: UINT:=0;
			(*p2 ludv section current for 100l/min*)
		CWp2cur150liter: UINT:=0;
			(*p2 ludv section current for 150l/min*)
		CWp2cur200liter: UINT:=0;
			(*p2 ludv section current for 200l/min*)
		CWp2cur250liter: UINT:=0;
			(*p2 ludv section current for 250l/min*)
		CWp2cur300liter: UINT:=0;
			(*p2 ludv section current for 300l/min*)
		CWKeGrabPreMaxOp: UINT:=0;
			(*add. kelly grab: max. current press. control open*)
		CWKeGrabPreMaxCl: UINT:=0;
			(*add. kelly grab: max. current press. control close*)
		CWKeGrabPreMinCu: UINT:=0;
			(*add. kelly grab: min. curr. press. control open/close*)
		CDludvLeakOilSig: REAL:=0.0;
			(*ludv leakoil or pressure comp. signal*)
		CDKeGrabIntTimUp: REAL:=0.0;
			(*add. kelly grab integrator rising time*)
		CDKeGrabIntTimDn: REAL:=0.0;
			(*add. kelly grab integrator falling time*)
		CDKeGrabPresLiCl: REAL:=0.0;
			(*add. kelly grab close threshold pressure limit*)
		CDKeGrabPresLiOp: REAL:=0.0;
			(*add. kelly grab open  threshold pressure limit*)
		CDKeGrabFiltTime: REAL:=0.0;
			(*add. kelly grab: delay time press. limit open/close *)
		CDKeGrabPreIntUp: REAL:=0.0;
			(*add. kelly grab integrator rising time*)
		CDKeAd1LimitSig: REAL:=0.0;
			(*kelly grab adjustment 1 limitation signal *)
		CDKeAd2LimitSig: REAL:=0.0;
			(*kelly grab adjustment 2 limitation signal *)
		CDKeSlewAnaSig: REAL:=0.0;
			(*Kelly grab: grap slewing analog signal *)
		CDengSpPumpRed: REAL:=0.0;
			(*engine speed for pump reduction [U/min]*)
		CDgrSlewTimeUp: REAL:=0.0;
			(*SB/SM grab: slewing integrator time rising signal*)
		CDgrSlewTimeDn: REAL:=0.0;
			(*SB/SM grab: slewing integrator time falling signal*)
		CDKeHoWiManPuSig: REAL:=0.0;
			(*kelly grab: hose winch manual pump signal [%]*)
		CDKeHoWiAutPuSig: REAL:=0.0;
			(*kelly grab: hose winch automatic pump signal [%]*)
		CDKeHoWiLoPresSi: REAL:=0.0;
			(*kelly grab: hose winch low pressure signal [%]*)
		CDKeHoWiHiPresSi: REAL:=0.0;
			(*kelly grab: hose winch high pressure signal [%]*)
	END_VAR
	VAR 
		LXinitOk: BOOL:=FALSE;
			(*init completed*)
		LXstart: BOOL:=FALSE;
		LXhoseWinManLift: BOOL:=FALSE;
		LXhoseWinManLow: BOOL:=FALSE;
		LXhoseWinEnPowSt: BOOL:=FALSE;
		LXhoseWinHighPr: BOOL:=FALSE;
		LXhydGrabWorking: BOOL:=FALSE;
		LXhoseWinAutGrab: BOOL:=FALSE;
		LXgrabLocStopOpe: BOOL:=FALSE;
		LXgrabLocStopClo: BOOL:=FALSE;
		LXSignInZero: BOOL:=FALSE;
		LXgrabPumpClose: BOOL:=FALSE;
		LXgrabPumpOpen: BOOL:=FALSE;
		LXreleaGrabOpClo: BOOL:=FALSE;
		LXgrAd1PumpAct: BOOL:=FALSE;
		LXgrAd2PumpAct: BOOL:=FALSE;
		LXgrSlewPumpZero: BOOL:=FALSE;
		LXgrAd1PumpZero: BOOL:=FALSE;
		LXgrAd2PumpZero: BOOL:=FALSE;
		LXgrSlewPumpAct: BOOL:=FALSE;
		LXpreGrTurnRight: BOOL:=FALSE;
		LXpreGrTurnLeft: BOOL:=FALSE;
		LDanalogSignal: REAL:=0.0;
		LDanalSigPumpLim: REAL:=0.0;
		LDgrabStoVolOpen: REAL:=0.0;
		LDgrabStoVolClos: REAL:=0.0;
		LDp1MaxValue: REAL:=0.0;
		LDp2MaxValue: REAL:=0.0;
		LDgrabStoreVol: REAL:=0.0;
		LDcalcCurrent1: REAL:=0.0;
		LDcalcComp1: REAL:=0.0;
		LDcalcVol1: REAL:=0.0;
		LDcalcCurrent2: REAL:=0.0;
		LDcalcComp2: REAL:=0.0;
		LDcalcVol2: REAL:=0.0;
		LDanaSigPresCont: REAL:=0.0;
		LDgrabPresIntSig: REAL:=0.0;
		LDgrAd1AnalSig: REAL:=0.0;
		LDgrAd2AnalSig: REAL:=0.0;
		LDgrSlewAnalSig: REAL:=0.0;
		LDgrabSlewAnaSig: REAL:=0.0;
		LDleJoyPoti: REAL:=0.0;
		SR1: SR;
		SR2: SR;
		RS1: RS;
		RS2: RS;
		RS3: RS;
		R_TRIG1: R_TRIG;
		R_TRIG2: R_TRIG;
		TON1: TON;
		TON2: TON;
		PowerStage1: PowerStage;
		ScaleAI1: ScaleAI;
		Message1: MsgRealReal;
		Message2: MsgRealReal;
		CorrValue_Bool1: CorrValue_Bool;
		CorrValue_Bool2: CorrValue_Bool;
		CorrValue_UInt1: CorrValue_UInt;
		CorrValue_UInt2: CorrValue_UInt;
		CorrValue_UInt3: CorrValue_UInt;
		CorrValue_Real1: CorrValue_Real;
		CorrValue_Real2: CorrValue_Real;
		CorrValue_Real3: CorrValue_Real;
		CorrValue_Real4: CorrValue_Real;
		CorrValue_Real5: CorrValue_Real;
		CorrValue_Real6: CorrValue_Real;
		CorrValue_Real7: CorrValue_Real;
		CorrValue_Real8: CorrValue_Real;
		CorrValue_Real9: CorrValue_Real;
		CorrValue_Real10: CorrValue_Real;
		CorrValue_Real11: CorrValue_Real;
		CorrValue_Real12: CorrValue_Real;
		CorrValue_Real13: CorrValue_Real;
		ADcalculateQ1: ADcalculateQV024;
		ADcalculateQ2: ADcalculateQV024;
		Integrator1: Integrator;
		Integrator2: Integrator;
		Integrator3: Integrator;
		digital1: FB_anaCylDigV010;
		analog1: FB_anaCylAnaV011;
		analog2: FB_anaCylAnaV011;
		analog3: FB_anaCylAnaV011;
	END_VAR
'FBD'
BODY
    WORKSPACE
        NETWORK_LIST_TYPE := NWTYPEFBD ;
        ACTIVE_NETWORK := 0 ;
    END_WORKSPACE
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_COMMENT,,init first time,1,1,27,2,);
B(B_VARIN,,LXinitOk,9,4,11,6,);
B(B_F,not,,11,3,16,6,);
B(B_JUMP,,init,16,4,18,6,);
B(B_COMMENT,,Ke = kelly grab,27,1,44,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,protect correction value change while program activ,1,1,27,2,);
B(B_F,sel,,11,5,16,10,);
B(B_VARIN,,CXhydrGrab1Sect,9,7,11,9,);
B(B_VARIN,,MXhydrGrab1Sect,9,8,11,10,);
B(B_VARIN,,LXstart,9,6,11,8,);
B(B_VAROUT,,MXhydrGrab1Sect,22,5,24,7,);
B(B_VARIN,,MX1LudvWorkSect,15,3,17,5,);
B(B_F,@OR-2,,17,4,22,8,);
L(16,7,17,7);
L(17,4,17,6);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,TRUE,9,1,11,3,);
B(B_VAROUT,,LXstart,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_RETURN,,,16,4,18,6,N);
B(B_COMMENT,,exit programm when hydr. grab is not preselected,1,1,27,2,);
B(B_VARIN,,CXadKellyHydGrab,14,4,16,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_COMMENT,,jump to exit when hydr. grab is not activ,1,1,27,2,);
B(B_VARIN,,LXhydGrabWorking,15,7,17,9,);
B(B_F,@AND-2,,17,5,22,9,0N);
B(B_JUMP,,exit,22,6,24,8,);
B(B_F,@OR-2,,11,3,16,7,0N);
B(B_VARIN,,MXexitKelHyGrab,9,4,11,6,);
B(B_VARIN,,MXenabKelGrabOpe,9,5,11,7,);
L(16,5,17,5);
L(17,5,17,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 23 ;
        NETWORK_BODY
B(B_COMMENT,,scale system pressure,1,1,27,2,);
B(B_VARIN,,IWgrabSysPresP2,9,5,11,7,);
B(B_FB,ScaleAI,ScaleAI1,11,4,19,9,);
B(B_VARIN,,600.0,9,6,11,8,);
B(B_VARIN,,MSG_ERROR,17,11,19,13,);
B(B_VARIN,,178,17,9,19,11,);
B(B_FB,SR,SR1,26,16,31,20,0N);
B(B_F,@AND-2,,21,16,26,20,0N);
B(B_VARIN,,MXengStarterActi,17,18,19,20,);
B(B_VARIN,,177,36,16,38,18,);
B(B_VARIN,,MSG_ERROR,36,18,38,20,);
B(B_FB,MsgRealReal,Message1,22,8,31,15,);
B(B_FB,MsgRealReal,Message2,38,15,47,22,);
B(B_VAROUT,,MDgrabSysPress,19,5,21,7,);
L(19,7,21,7);
L(19,8,20,8);
L(21,7,21,11);
L(21,11,22,11);
L(19,10,22,10);
L(19,12,22,12);
L(20,18,21,18);
L(19,19,21,19);
L(20,20,26,20);
L(26,19,26,20);
L(31,18,38,18);
L(20,8,20,20);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_F,@DIV,,24,1,29,5,);
B(B_VARIN,,1000.0,21,4,23,6,);
B(B_VARIN,,IWleftJoystThum,9,2,11,4,);
B(B_F,@SUB,,24,5,29,9,);
B(B_VARIN,,100.0,22,6,24,8,);
B(B_F,to_real,,13,6,20,9,);
B(B_VARIN,,10.0,11,7,13,9,);
B(B_F,@MUL-2,,31,1,36,5,);
B(B_F,@ADD-2,,38,1,43,5,);
B(B_VAROUT,,LDleJoyPoti,43,2,45,4,);
B(B_COMMENT,,10-100%,44,4,51,5,);
B(B_F,int_to_real,,11,1,21,4,);
L(23,4,23,5);
L(23,4,24,4);
L(20,8,24,8);
L(29,7,30,7);
L(22,8,22,10);
L(29,3,31,3);
L(36,3,38,3);
L(30,4,31,4);
L(30,4,30,7);
L(22,10,37,10);
L(37,4,37,10);
L(37,4,38,4);
L(21,3,24,3);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_VARIN,,MRgrab1VolOpen,9,3,11,5,);
B(B_VAROUT,,LDgrabStoVolOpen,11,3,13,5,);
B(B_COMMENT,,adjusted working volume ,1,1,27,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_VARIN,,MRgrab1VolClose,9,3,11,5,);
B(B_VAROUT,,LDgrabStoVolClos,11,3,13,5,);
B(B_COMMENT,,adjusted working volume ,1,1,27,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_VARIN,,CWp1MaxValue,9,4,11,6,);
B(B_F,uint_to_real,,11,3,22,6,);
B(B_VAROUT,,LDp1MaxValue,22,4,24,6,);
B(B_COMMENT,,maximum oil value over ludv section ,1,1,27,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 5 ;
        NETWORK_BODY
B(B_VARIN,,CWp2MaxValue,9,2,11,4,);
B(B_F,uint_to_real,,11,1,22,4,);
B(B_VAROUT,,LDp2MaxValue,22,2,24,4,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 19 ;
        NETWORK_BODY
B(B_F,@AND-3,,21,3,26,8,N);
B(B_COMMENT,,enable grab preselection,1,1,27,2,);
B(B_FB,SR,SR2,34,3,39,7,);
B(B_F,@OR-4,,27,10,32,16,N00N);
B(B_VARIN,,LXSignInZero,18,13,20,15,);
B(B_F,@AND-2,,20,11,25,15,);
B(B_VARIN,,MXexitKelHyGrab,24,15,26,17,);
B(B_VARIN,,MXgrabEnJoySig,25,16,27,18,);
B(B_VAROUT,,MXenabGrabPresel,39,4,41,6,);
B(B_VARIN,,MXenabGrabPresel,19,3,21,5,);
B(B_VARIN,,MXassemblyOperat,11,7,13,9,);
B(B_VARIN,,MXaddHydrActive,11,8,13,10,);
B(B_F,@AND-3,,13,5,18,10,0NN);
B(B_FB,R_TRIG,R_TRIG1,11,11,18,14,);
B(B_VARIN,,MXjoyHyGrabPre,9,12,11,14,);
B(B_VAROUT,,MXgrabPreJoySig,39,5,41,7,);
B(B_VARIN,,MXenabKelGrabOpe,11,6,13,8,);
L(19,6,21,6);
L(20,7,21,7);
L(26,11,26,12);
L(26,14,27,14);
L(33,6,33,12);
L(26,5,34,5);
L(33,6,34,6);
L(26,12,27,12);
L(32,12,33,12);
L(19,6,19,13);
L(19,13,20,13);
L(25,13,27,13);
L(26,14,26,16);
L(27,15,27,17);
L(20,7,20,11);
L(18,7,20,7);
L(21,4,21,5);
L(18,13,19,13);
L(20,11,26,11);
L(39,5,39,6);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_VARIN,,MXgrabPreJoySig,9,4,11,6,);
B(B_VARIN,,MXgrabEnJoySig,9,5,11,7,);
B(B_F,@AND-2,,11,3,16,7,);
B(B_COMMENT,,enable drilling drive preselected,1,1,27,2,);
B(B_VAROUT,,LXreleaGrabOpClo,16,4,18,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 24 ;
        NETWORK_BODY
B(B_VARIN,,0.0,23,13,25,15,);
B(B_F,sel,,25,10,30,15,);
B(B_F,@GT-2,,25,15,30,19,);
B(B_F,@LT-2,,25,19,30,23,);
B(B_VARIN,,0.0,23,17,25,19,);
B(B_VARIN,,0.0,23,21,25,23,);
B(B_COMMENT,,analog signal selector and stop grab cylinder,1,1,27,2,);
B(B_F,sel,,16,11,21,16,);
B(B_VAROUT,,MXgrabSigClose,30,16,32,18,);
B(B_VAROUT,,MXgrabSigOpen,30,20,32,22,);
B(B_VARIN,,LXreleaGrabOpClo,14,12,16,14,);
B(B_VARIN,,0.0,14,13,16,15,);
B(B_VARIN,,MDgrabJoySignal,14,14,16,16,);
B(B_VAROUT,,LDanalogSignal,30,11,32,13,);
B(B_F,@OR-2,,18,6,23,10,);
B(B_F,@AND-2,,11,7,16,11,0N);
B(B_F,@AND-2,,11,3,16,7,0N);
B(B_VARIN,,MXgrabSigOpen,9,5,11,7,);
B(B_VARIN,,LXgrabLocStopOpe,9,4,11,6,);
B(B_VARIN,,LXgrabLocStopClo,9,8,11,10,);
B(B_VARIN,,MXgrabSigClose,9,9,11,11,);
L(22,13,22,21);
L(22,17,25,17);
L(22,21,25,21);
L(24,8,24,12);
L(24,12,25,12);
L(21,13,25,13);
L(16,5,17,5);
L(17,5,17,8);
L(17,8,18,8);
L(16,9,18,9);
L(23,8,24,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_COMMENT,,digital logic grab cylinder,1,1,27,2,);
B(B_VARIN,,MXgrabSigClose,9,4,11,6,);
B(B_VARIN,,MXgrabSigOpen,9,5,11,7,);
B(B_VARIN,,MXgrabGlobalStop,9,6,11,8,);
B(B_VARIN,,TRUE,9,7,11,9,);
B(B_VARIN,,TRUE,9,8,11,10,);
B(B_VAROUT,,LXgrabLocStopClo,34,5,36,7,);
B(B_VAROUT,,LXgrabLocStopOpe,34,6,36,8,);
B(B_FB,FB_anaCylDigV010,digital1,11,3,34,12,);
B(B_VARIN,,LXSignInZero,9,10,11,12,);
B(B_VARIN,,MXstopAllFunctio,9,9,11,11,);
B(B_VAROUT,,MXhydrGrabActive,34,3,36,5,);
B(B_VAROUT,,MXgrabEnaPowStag,34,4,36,6,);
L(34,4,34,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 15 ;
        NETWORK_BODY
B(B_VARIN,,900.0,9,4,11,6,);
B(B_VARIN,,0.5,9,5,11,7,);
B(B_VARIN,,CDengSpPumpRed,9,6,11,8,);
B(B_VARIN,,1.0,9,7,11,9,);
B(B_VARIN,,MDratedEngSpeed,9,8,11,10,);
B(B_VARIN,,0.5,9,9,11,11,);
B(B_VARIN,,1.0,9,10,11,12,);
B(B_F,GPkx_dV010,,11,3,20,12,);
B(B_COMMENT,,900 U/min 50% limitationø^1400 U/min 0% limitation,29,1,44,3,);
B(B_COMMENT,,signal limitation in consideration to the engine speed,1,1,27,2,);
B(B_VAROUT,,LDanalSigPumpLim,27,4,29,6,);
B(B_F,@MUL-2,,22,3,27,7,);
B(B_VARIN,,LDanalogSignal,19,12,21,14,);
L(21,6,22,6);
L(20,5,22,5);
L(21,6,21,13);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_FB,Integrator,Integrator1,11,3,20,9,);
B(B_VARIN,,TRUE,9,4,11,6,);
B(B_VARIN,,LDanalSigPumpLim,9,5,11,7,);
B(B_VAROUT,,MDgrabPumpSignal,21,6,23,8,);
B(B_VARIN,,CDKeGrabIntTimUp,9,6,11,8,);
B(B_VARIN,,CDKeGrabIntTimDn,9,7,11,9,);
B(B_F,EQ_R,,21,2,26,6,);
B(B_VAROUT,,LXSignInZero,26,3,28,5,);
B(B_VARIN,,0.0,19,1,21,3,);
L(21,5,21,7);
L(21,2,21,4);
L(20,5,21,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_F,@GT-2,,13,3,18,7,);
B(B_VARIN,,0.0,9,5,11,7,);
B(B_F,@LT-2,,13,7,18,11,);
B(B_COMMENT,,pump signal close or open,1,1,27,2,);
B(B_VAROUT,,LXgrabPumpClose,18,4,20,6,);
B(B_VAROUT,,LXgrabPumpOpen,18,8,20,10,);
B(B_VARIN,,MDgrabPumpSignal,10,4,12,6,);
L(11,6,13,6);
L(12,9,13,9);
L(11,10,13,10);
L(12,5,12,9);
L(11,6,11,10);
L(12,5,13,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_F,sel,,11,3,16,8,);
B(B_VARIN,,LXgrabPumpClose,9,4,11,6,);
B(B_VARIN,,LDgrabStoVolOpen,9,5,11,7,);
B(B_VARIN,,LDgrabStoVolClos,9,6,11,8,);
B(B_VAROUT,,LDgrabStoreVol,16,4,18,6,);
B(B_COMMENT,,volume control depend on open or close,1,1,27,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 28 ;
        NETWORK_BODY
B(B_VARIN,,CWp2cur50liter,19,11,21,13,);
B(B_VARIN,,CWp2cur100liter,19,12,21,14,);
B(B_VARIN,,CWp2cur150liter,19,13,21,15,);
B(B_VARIN,,CWp2cur200liter,19,14,21,16,);
B(B_VARIN,,CWp2cur250liter,19,15,21,17,);
B(B_VARIN,,CWp2cur300liter,19,16,21,18,);
B(B_VARIN,,CWp2MinCurValveB,19,10,21,12,);
B(B_VARIN,,LDp2MaxValue,19,8,21,10,);
B(B_VARIN,,MDgrabPumpSignal,19,9,21,11,);
B(B_VAROUT,,LDcalcCurrent2,39,7,41,9,);
B(B_VAROUT,,MDgrbPump2Signal,39,8,41,10,);
B(B_VAROUT,,LDcalcComp2,39,9,41,11,);
B(B_VARIN,,CWp2MaxCurValveB,19,21,21,23,);
B(B_VARIN,,MDgrabSysPress,19,22,21,24,);
B(B_VARIN,,CDludvLeakOilSig,19,23,21,25,);
B(B_VAROUT,,LDcalcVol2,39,10,41,12,);
B(B_F,sel,,16,1,21,6,N);
B(B_F,@DIV,,11,4,16,8,);
B(B_VARIN,,2.0,9,6,11,8,);
B(B_VARIN,,LDgrabStoreVol,9,3,11,5,);
B(B_VARIN,,MXhydrGrab1Sect,14,2,16,4,);
B(B_VARIN,,CDKeGrabIntTimUp,19,25,21,27,);
B(B_VARIN,,MDpowerLimReduct,19,24,21,26,);
B(B_FB,ADcalculateQV024,ADcalculateQ1,21,6,39,27,);
L(16,5,16,6);
L(11,4,16,4);
L(11,4,11,6);
L(21,3,21,8);
L(21,18,21,22);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_VARIN,,MXhydrGrab1Sect,9,3,11,5,);
B(B_COMMENT,,jump to next if only 1 ludv section is used for hydr. grab,1,1,27,2,);
B(B_JUMP,,next,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 25 ;
        NETWORK_BODY
B(B_VAROUT,,LDcalcCurrent1,36,4,38,6,);
B(B_VAROUT,,MDgrbPump1Signal,36,5,38,7,);
B(B_VAROUT,,LDcalcComp1,36,6,38,8,);
B(B_VARIN,,CWp1cur50liter,16,8,18,10,);
B(B_VARIN,,CWp1cur100liter,16,9,18,11,);
B(B_VARIN,,CWp1cur150liter,16,10,18,12,);
B(B_VARIN,,CWp1cur200liter,16,11,18,13,);
B(B_VARIN,,CWp1cur250liter,16,12,18,14,);
B(B_VARIN,,CWp1cur300liter,16,13,18,15,);
B(B_VARIN,,CWp1MinCurValveB,16,7,18,9,);
B(B_VARIN,,MDgrabPumpSignal,16,6,18,8,);
B(B_VARIN,,LDp1MaxValue,16,5,18,7,);
B(B_F,@DIV,,11,1,16,5,);
B(B_VARIN,,2.0,9,3,11,5,);
B(B_VARIN,,LDgrabStoreVol,9,2,11,4,);
B(B_VARIN,,CWp1MaxCurValveB,16,18,18,20,);
B(B_VARIN,,MDgrabSysPress,16,19,18,21,);
B(B_VARIN,,CDludvLeakOilSig,16,20,18,22,);
B(B_VAROUT,,LDcalcVol1,36,7,38,9,);
B(B_VARIN,,CDKeGrabIntTimUp,16,22,18,24,);
B(B_VARIN,,MDpowerLimReduct,16,21,18,23,);
B(B_FB,ADcalculateQV024,ADcalculateQ2,18,3,36,24,);
L(17,3,17,5);
L(16,3,17,3);
L(18,15,18,19);
L(17,5,18,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL := next: ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 26 ;
        NETWORK_BODY
B(B_COMMENT,,pressure control grab open / close ,1,1,27,2,);
B(B_VARIN,,MDgrabSysPress,10,7,12,9,);
B(B_F,@GT-2,,12,6,17,10,);
B(B_F,@AND-2,,19,5,24,9,);
B(B_F,@AND-2,,19,17,24,21,);
B(B_FB,RS,RS1,37,5,42,9,);
B(B_FB,RS,RS2,37,17,42,21,);
B(B_VARIN,,1.0,62,6,64,8,);
B(B_VARIN,,100.0,63,7,65,9,);
B(B_VAROUT,,LDanaSigPresCont,71,3,73,5,);
B(B_F,@AND-2,,51,2,56,6,);
B(B_F,@OR-2,,58,2,63,6,);
B(B_F,sel,,66,2,71,7,);
B(B_FB,TON,TON1,30,5,35,9,);
B(B_F,real_to_time,,17,13,28,16,);
B(B_F,@MUL-2,,12,13,17,17,);
B(B_FB,TON,TON2,30,17,35,21,);
B(B_F,@OR-2,,30,21,35,25,N);
B(B_VARIN,,MXgrabSigClose,28,23,30,25,);
B(B_F,@OR-2,,44,5,49,9,);
B(B_VARIN,,CDKeGrabPresLiCl,10,8,12,10,);
B(B_VARIN,,CDKeGrabFiltTime,10,14,12,16,);
B(B_VARIN,,1000.0,10,15,12,17,);
B(B_VARIN,,LXgrabPumpOpen,16,22,18,24,);
B(B_F,@GT-2,,12,17,17,21,);
B(B_VARIN,,CDKeGrabPresLiOp,10,19,12,21,);
B(B_VARIN,,MDgrabSysPress,10,18,12,20,);
B(B_VARIN,,MXgrabSigClose,49,3,51,5,);
B(B_VARIN,,LXgrabPumpClose,16,4,18,6,);
B(B_F,@OR-2,,19,9,24,13,N);
B(B_VARIN,,MXgrabSigOpen,17,11,19,13,);
B(B_F,@AND-2,,51,19,56,23,);
B(B_VARIN,,MXgrabSigOpen,49,21,51,23,);
L(17,8,19,8);
L(18,7,19,7);
L(36,8,37,8);
L(36,20,37,20);
L(42,7,43,7);
L(36,20,36,23);
L(50,5,51,5);
L(57,5,58,5);
L(64,5,66,5);
L(65,6,66,6);
L(64,5,64,7);
L(65,6,65,8);
L(56,4,58,4);
L(63,4,66,4);
L(24,7,30,7);
L(35,7,37,7);
L(36,8,36,11);
L(28,15,29,15);
L(29,8,30,8);
L(24,19,30,19);
L(35,19,37,19);
L(35,23,36,23);
L(29,8,29,20);
L(29,20,30,20);
L(43,7,44,7);
L(49,7,50,7);
L(42,19,43,19);
L(18,23,30,23);
L(17,19,19,19);
L(18,20,19,20);
L(18,20,18,23);
L(18,5,18,11);
L(18,11,19,11);
L(24,11,36,11);
L(56,21,57,21);
L(50,21,51,21);
L(57,5,57,21);
L(43,8,44,8);
L(43,8,43,19);
L(50,5,50,21);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 16 ;
        NETWORK_BODY
B(B_COMMENT,,pressure control grab open / close ,1,1,27,2,);
B(B_FB,Integrator,Integrator2,26,3,35,9,);
B(B_VAROUT,,LDgrabPresIntSig,35,4,37,6,);
B(B_VARIN,,LDanaSigPresCont,24,5,26,7,);
B(B_VARIN,,CDKeGrabPreIntUp,24,6,26,8,);
B(B_F,sel,,19,8,24,13,);
B(B_F,@OR-2,,11,8,16,12,);
B(B_VARIN,,LXgrabPumpClose,9,9,11,11,);
B(B_VARIN,,LXgrabPumpOpen,9,10,11,12,);
B(B_VARIN,,10000.0,15,12,17,14,);
B(B_VARIN,,CDKeGrabIntTimDn,16,13,18,15,);
B(B_VARIN,,TRUE,24,4,26,6,);
L(25,8,26,8);
L(24,10,25,10);
L(16,10,19,10);
L(18,12,19,12);
L(17,11,19,11);
L(17,11,17,13);
L(18,12,18,14);
L(25,8,25,10);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 17 ;
        NETWORK_BODY
B(B_COMMENT,,power stage pressure control grab,1,1,28,2,);
B(B_FB,PowerStage,PowerStage1,18,4,27,12,);
B(B_VAROUT,,QWgrabPressContr,27,5,29,7,);
B(B_VARIN,,0.0,16,7,18,9,);
B(B_VARIN,,100.0,16,8,18,10,);
B(B_VARIN,,CWKeGrabPreMinCu,16,9,18,11,);
B(B_VARIN,,LDgrabPresIntSig,16,6,18,8,);
B(B_VARIN,,CWKeGrabPreMaxCl,9,14,11,16,);
B(B_F,sel,,11,11,16,16,);
B(B_VARIN,,LXgrabPumpClose,9,12,11,14,);
B(B_VARIN,,CWKeGrabPreMaxOp,9,13,11,15,);
B(B_VARIN,,MXminEngineSpeed,16,5,18,7,);
L(16,13,17,13);
L(17,11,17,13);
L(17,11,18,11);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 24 ;
        NETWORK_BODY
B(B_VAROUT,,QTXautoHoseWinch,46,4,48,6,);
B(B_FB,RS,RS3,41,3,46,7,);
B(B_VARIN,,ITXleHoseWinchUp,19,16,21,18,);
B(B_F,@OR-3,,29,7,34,12,0N);
B(B_VARIN,,ITXriHoseWinchUp,19,17,21,19,);
B(B_VARIN,,ITXleHoseWinchDn,19,18,21,20,);
B(B_VARIN,,ITXriHoseWinchDn,19,19,21,21,);
B(B_COMMENT,,preselection automatic hose winches and cable winch,1,1,27,2,);
B(B_F,@AND-2,,21,11,26,15,0N);
B(B_F,@AND-2,,21,7,26,11,);
B(B_VARIN,,MXstopAllFunctio,19,13,21,15,);
B(B_FB,R_TRIG,R_TRIG2,11,3,18,6,);
B(B_VARIN,,ITXautoHoseWinch,9,4,11,6,);
B(B_VARIN,,MXenabKelGrabOpe,18,12,20,14,);
B(B_VARIN,,QTXautoHoseWinch,17,9,19,11,);
B(B_F,@AND-2,,21,3,26,7,);
B(B_F,@AND-3,,36,7,41,12,);
B(B_VARIN,,MXhg1WinchStand,33,17,35,19,);
B(B_VARIN,,MXhg2WinchStand,34,18,36,20,);
B(B_VAROUT,,MXenabAutHoseWin,46,6,48,8,);
B(B_VAROUT,,LXhoseWinAutGrab,46,5,48,7,);
B(B_F,@OR-7,,21,15,26,24,);
B(B_VARIN,,MXexitKelHyGrab,19,22,21,24,);
B(B_VARIN,,ITXcableWinchUp,19,20,21,22,);
B(B_VARIN,,ITXcableWinchDn,19,21,21,23,);
L(27,10,29,10);
L(27,10,27,13);
L(28,11,29,11);
L(20,13,21,13);
L(26,13,27,13);
L(19,9,21,9);
L(26,9,29,9);
L(41,6,41,9);
L(28,11,28,17);
L(20,6,21,6);
L(20,6,20,13);
L(19,5,19,9);
L(19,10,21,10);
L(18,5,21,5);
L(26,5,41,5);
L(34,9,36,9);
L(35,10,35,18);
L(35,10,36,10);
L(36,11,36,19);
L(46,5,46,7);
L(26,17,28,17);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 17 ;
        NETWORK_BODY
B(B_F,@OR-2,,14,6,19,10,);
B(B_F,@OR-2,,14,12,19,16,);
B(B_VARIN,,ITXgrabAdj1In,9,7,11,9,);
B(B_VARIN,,MXstopAllFunctio,9,8,11,10,);
B(B_COMMENT,, grap adjustment 1left,1,1,27,2,);
B(B_VARIN,,ITXgrabAdj1Out,10,4,12,6,);
B(B_F,@AND-2,,20,3,25,7,0N);
B(B_F,@AND-2,,20,9,25,13,0N);
B(B_VAROUT,,QTXgrabAdj1In,25,10,27,12,);
B(B_VAROUT,,QTXgrabAdj1Out,25,4,27,6,);
L(19,8,20,8);
L(20,6,20,8);
L(19,14,20,14);
L(20,12,20,14);
L(11,8,14,8);
L(11,9,14,9);
L(13,8,13,11);
L(12,5,12,14);
L(12,14,14,14);
L(11,9,11,15);
L(11,15,14,15);
L(12,5,20,5);
L(13,11,20,11);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 15 ;
        NETWORK_BODY
B(B_F,sel,,18,5,23,10,);
B(B_F,sel,,24,4,29,9,);
B(B_VARIN,,0.0,16,7,18,9,);
B(B_VAROUT,,LDgrAd1AnalSig,29,5,31,7,);
B(B_VARIN,,QTXgrabAdj1Out,22,3,24,5,);
B(B_VARIN,,QTXgrabAdj1In,16,6,18,8,);
B(B_F,@MUL-2,,18,10,23,14,);
B(B_VARIN,,-1.0,16,12,18,14,);
B(B_F,to_real,,11,10,18,13,);
B(B_VARIN,,100.0,9,11,11,13,);
B(B_COMMENT,,analog part grab adjustment 1,1,1,27,2,);
L(24,4,24,6);
L(23,7,24,7);
L(23,12,24,12);
L(24,8,24,12);
L(18,9,18,12);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_COMMENT,,analog part grab adjustment 1,1,1,27,2,);
B(B_VAROUT,,MDgrAd1PumpSig,34,5,36,7,);
B(B_VARIN,,LDgrAd1AnalSig,9,5,11,7,);
B(B_VAROUT,,LXgrAd1PumpZero,34,6,36,8,);
B(B_VARIN,,100.0,9,6,11,8,);
B(B_VARIN,,CDKeAd1LimitSig,9,7,11,9,);
B(B_VARIN,,300.0,9,10,11,12,);
B(B_VARIN,,300.0,9,9,11,11,);
B(B_FB,FB_anaCylAnaV011,analog1,11,4,34,12,);
B(B_F,NE_R,,34,1,39,5,);
B(B_VAROUT,,LXgrAd1PumpAct,39,2,41,4,);
B(B_VARIN,,0.0,32,2,34,4,);
L(34,4,34,6);
L(11,8,11,9);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 17 ;
        NETWORK_BODY
B(B_COMMENT,, grap adjustment 2 right,1,1,27,2,);
B(B_F,@OR-2,,15,6,20,10,);
B(B_F,@OR-2,,15,12,20,16,);
B(B_VARIN,,ITXgrabAdj2Out,10,7,12,9,);
B(B_VARIN,,MXstopAllFunctio,10,8,12,10,);
B(B_VARIN,,ITXgrabAdj2In,11,4,13,6,);
B(B_F,@AND-2,,21,3,26,7,0N);
B(B_F,@AND-2,,21,9,26,13,0N);
B(B_VAROUT,,QTXgrabAdj2Out,26,10,28,12,);
B(B_VAROUT,,QTXgrabAdj2In,26,4,28,6,);
L(20,8,21,8);
L(20,14,21,14);
L(12,8,15,8);
L(12,9,15,9);
L(14,8,14,11);
L(13,5,13,14);
L(13,14,15,14);
L(12,9,12,15);
L(12,15,15,15);
L(21,6,21,8);
L(21,12,21,14);
L(13,5,21,5);
L(14,11,21,11);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 15 ;
        NETWORK_BODY
B(B_F,sel,,18,5,23,10,);
B(B_F,sel,,24,4,29,9,);
B(B_VARIN,,0.0,16,7,18,9,);
B(B_VAROUT,,LDgrAd2AnalSig,29,5,31,7,);
B(B_VARIN,,QTXgrabAdj2Out,22,3,24,5,);
B(B_VARIN,,QTXgrabAdj2In,16,6,18,8,);
B(B_F,@MUL-2,,18,10,23,14,);
B(B_VARIN,,-1.0,16,12,18,14,);
B(B_F,to_real,,11,10,18,13,);
B(B_VARIN,,100.0,9,11,11,13,);
B(B_COMMENT,,analog part grab adjustment 2,1,1,27,2,);
L(24,4,24,6);
L(23,7,24,7);
L(23,12,24,12);
L(24,8,24,12);
L(18,9,18,12);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_COMMENT,,analog part grab adjustment 2,1,1,27,2,);
B(B_VAROUT,,MDgrAd2PumpSig,34,5,36,7,);
B(B_VARIN,,LDgrAd2AnalSig,9,5,11,7,);
B(B_VAROUT,,LXgrAd2PumpZero,34,6,36,8,);
B(B_VARIN,,100.0,9,6,11,8,);
B(B_VARIN,,CDKeAd2LimitSig,9,7,11,9,);
B(B_VARIN,,300.0,9,9,11,11,);
B(B_FB,FB_anaCylAnaV011,analog2,11,4,34,12,);
B(B_F,NE_R,,34,1,39,5,);
B(B_VAROUT,,LXgrAd2PumpAct,39,2,41,4,);
B(B_VARIN,,0.0,32,2,34,4,);
B(B_VARIN,,300.0,9,10,11,12,);
L(34,4,34,6);
L(11,8,11,9);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 20 ;
        NETWORK_BODY
B(B_VARIN,,ITXautoHoseWinch,10,8,12,10,);
B(B_F,@AND-2,,19,4,24,8,0N);
B(B_VARIN,,ITXleHoseWinchUp,17,5,19,7,);
B(B_VARIN,,ITXleHoseWinchDn,10,9,12,11,);
B(B_VARIN,,ITXriHoseWinchDn,10,10,12,12,);
B(B_F,@AND-2,,19,12,24,16,0N);
B(B_VARIN,,ITXriHoseWinchUp,15,13,17,15,);
B(B_VARIN,,MXstopAllFunctio,10,11,12,13,);
B(B_F,@OR-4,,12,7,17,13,);
B(B_F,@OR-2,,27,15,32,19,);
B(B_VAROUT,,LXhoseWinManLift,32,16,34,18,);
B(B_VARIN,,LXhoseWinAutGrab,24,3,26,5,);
B(B_VAROUT,,QTXriHoseWinchUp,32,12,34,14,);
B(B_F,@OR-2,,27,11,32,15,);
B(B_F,@OR-2,,27,3,32,7,);
B(B_VAROUT,,QTXleHoseWinchUp,32,4,34,6,);
B(B_COMMENT,,preselection hose winches manuell lifting,1,1,27,2,);
L(18,7,19,7);
L(18,15,19,15);
L(17,14,19,14);
L(26,14,26,17);
L(18,7,18,15);
L(17,9,18,9);
L(25,6,25,18);
L(26,17,27,17);
L(25,18,27,18);
L(26,4,26,13);
L(26,13,27,13);
L(24,14,27,14);
L(24,6,27,6);
L(26,5,27,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 17 ;
        NETWORK_BODY
B(B_F,@AND-2,,19,3,24,7,0N);
B(B_VARIN,,ITXleHoseWinchDn,17,4,19,6,);
B(B_F,@AND-2,,19,12,24,16,0N);
B(B_VARIN,,ITXriHoseWinchDn,15,13,17,15,);
B(B_COMMENT,,preselection hose winches and cable winch manuell lowering ,1,1,27,2,);
B(B_VAROUT,,QTXleHoseWinchDn,25,4,27,6,);
B(B_F,@OR-2,,26,7,31,11,);
B(B_VAROUT,,LXhoseWinManLow,31,8,33,10,);
B(B_VAROUT,,QTXriHoseWinchDn,25,13,27,15,);
B(B_VARIN,,ITXautoHoseWinch,10,7,12,9,);
B(B_VARIN,,ITXleHoseWinchUp,10,8,12,10,);
B(B_VARIN,,ITXriHoseWinchUp,10,9,12,11,);
B(B_VARIN,,MXstopAllFunctio,10,10,12,12,);
B(B_F,@OR-4,,12,6,17,12,);
L(18,6,19,6);
L(18,15,19,15);
L(17,14,19,14);
L(24,14,25,14);
L(25,10,25,14);
L(25,5,25,9);
L(24,5,25,5);
L(18,6,18,15);
L(25,10,26,10);
L(25,9,26,9);
L(17,8,18,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_VARIN,,ITXautoHoseWinch,10,8,12,10,);
B(B_F,@AND-2,,19,4,24,8,0N);
B(B_VARIN,,ITXcableWinchUp,17,5,19,7,);
B(B_VARIN,,ITXcableWinchDn,10,9,12,11,);
B(B_VARIN,,MXstopAllFunctio,10,10,12,12,);
B(B_COMMENT,,preselection cable winches manuell lifting,1,1,27,2,);
B(B_F,@OR-3,,12,7,17,12,);
B(B_F,@OR-2,,25,3,30,7,);
B(B_VAROUT,,QTXcableWinchUp,30,4,32,6,);
B(B_VARIN,,LXhoseWinAutGrab,23,3,25,5,);
L(18,7,19,7);
L(18,7,18,9);
L(17,9,18,9);
L(24,6,25,6);
L(25,4,25,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_VARIN,,ITXautoHoseWinch,10,7,12,9,);
B(B_F,@AND-2,,19,3,24,7,0N);
B(B_VARIN,,ITXcableWinchDn,17,4,19,6,);
B(B_VARIN,,ITXcableWinchUp,10,8,12,10,);
B(B_VARIN,,MXstopAllFunctio,10,9,12,11,);
B(B_COMMENT,,preselection cable winches manuell lowering,1,1,27,2,);
B(B_VAROUT,,QTXcableWinchDn,24,4,26,6,);
B(B_F,@OR-3,,12,6,17,11,);
L(18,6,19,6);
L(18,6,18,8);
L(17,8,18,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 14 ;
        NETWORK_BODY
B(B_COMMENT,,control brakes hose winches,1,1,27,2,);
B(B_VAROUT,,QXhoseBrakeLeft,18,2,20,4,);
B(B_VAROUT,,QXhoseBrakeRight,18,10,20,12,);
B(B_VAROUT,,LXhoseWinEnPowSt,24,5,26,7,);
B(B_F,@OR-2,,19,4,24,8,);
B(B_VAROUT,,QXrelBrakePress,24,6,26,8,);
B(B_VARIN,,QTXleHoseWinchUp,10,5,12,7,);
B(B_VARIN,,QTXleHoseWinchDn,10,6,12,8,);
B(B_VARIN,,QTXriHoseWinchUp,10,10,12,12,);
B(B_VARIN,,QTXriHoseWinchDn,10,11,12,13,);
B(B_F,@OR-2,,12,4,17,8,);
B(B_F,@OR-2,,12,9,17,13,);
L(18,7,18,11);
L(18,3,18,6);
L(18,7,19,7);
L(24,6,24,7);
L(17,6,19,6);
L(17,11,18,11);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_COMMENT,,control brakes cable winch,1,1,27,2,);
B(B_VAROUT,,QXcableDrumLift,12,3,14,5,);
B(B_F,@OR-2,,13,5,18,9,);
B(B_VARIN,,QTXcableWinchDn,10,9,12,11,);
B(B_VAROUT,,QXcableDrumLower,12,9,14,11,);
B(B_VAROUT,,QXcableWinBrake,18,6,20,8,);
B(B_VARIN,,QTXcableWinchUp,10,3,12,5,);
L(12,4,12,7);
L(12,7,13,7);
L(12,8,13,8);
L(12,8,12,10);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 17 ;
        NETWORK_BODY
B(B_F,sel,,19,6,24,11,);
B(B_F,sel,,26,5,31,10,);
B(B_F,to_real,,12,7,19,10,);
B(B_VARIN,,0.0,10,8,12,10,);
B(B_F,sel,,33,4,38,9,);
B(B_VARIN,,LXhoseWinAutGrab,30,3,32,5,);
B(B_VARIN,,LXhoseWinManLift,23,4,25,6,);
B(B_VARIN,,LXhoseWinManLow,17,5,19,7,);
B(B_F,@MUL-2,,14,10,19,14,);
B(B_VARIN,,-1.0,12,11,14,13,);
B(B_VARIN,,CDKeHoWiAutPuSig,30,14,32,16,);
B(B_VARIN,,CDKeHoWiManPuSig,12,13,14,15,);
B(B_COMMENT,,hose winch analog output signal pump ,1,1,27,2,);
B(B_F,limit,,42,3,48,8,);
B(B_VARIN,,-100.0,40,4,42,6,);
B(B_VARIN,,100.0,40,6,42,8,);
B(B_VAROUT,,MDhoWiPumpSigCC,48,4,50,6,);
L(25,9,26,9);
L(24,8,26,8);
L(25,7,26,7);
L(25,5,25,7);
L(19,6,19,8);
L(32,8,33,8);
L(31,7,33,7);
L(32,6,33,6);
L(32,4,32,6);
L(19,10,19,12);
L(32,8,32,15);
L(14,14,25,14);
L(25,9,25,14);
L(14,13,14,14);
L(38,6,42,6);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 20 ;
        NETWORK_BODY
B(B_COMMENT,,power stage pressure control hose pump,1,1,27,2,);
B(B_VARIN,,QXhg1BrakeNormal,10,7,12,9,);
B(B_VARIN,,QXhg1BrakeFastSp,10,8,12,10,);
B(B_F,@OR-2,,12,6,17,10,);
B(B_F,@AND-2,,19,3,24,7,);
B(B_VARIN,,MXhg1AnalSigPos,17,4,19,6,);
B(B_VARIN,,QXhg2BrakeNormal,10,13,12,15,);
B(B_VARIN,,QXhg2BrakeFastSp,10,14,12,16,);
B(B_F,@OR-2,,12,12,17,16,);
B(B_F,@AND-2,,19,9,24,13,);
B(B_VARIN,,MXhg2AnalSigPos,17,10,19,12,);
B(B_VAROUT,,LXhoseWinHighPr,32,4,34,6,);
B(B_VARIN,,MXlgAnalSigNeg,17,16,19,18,);
B(B_F,@AND-2,,19,15,24,19,);
B(B_VARIN,,QXlgBrake,17,17,19,19,);
B(B_F,@OR-3,,27,3,32,8,);
L(17,8,18,8);
L(18,6,18,8);
L(18,6,19,6);
L(17,14,18,14);
L(18,12,18,14);
L(18,12,19,12);
L(24,11,25,11);
L(25,6,25,11);
L(25,6,27,6);
L(24,5,27,5);
L(24,17,26,17);
L(26,7,26,17);
L(26,7,27,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_COMMENT,,hose winch output signal pressure control valve ,1,1,27,2,);
B(B_F,limit,,27,3,33,8,);
B(B_VARIN,,0.0,25,4,27,6,);
B(B_VARIN,,100.0,25,6,27,8,);
B(B_VAROUT,,MDhoWiPresSigCC,33,4,35,6,);
B(B_F,sel,,12,6,17,11,);
B(B_VARIN,,LXhoseWinHighPr,10,7,12,9,);
B(B_F,sel,,19,4,24,9,);
B(B_VARIN,,0.0,17,6,19,8,);
B(B_VARIN,,LXhoseWinEnPowSt,17,5,19,7,);
B(B_VARIN,,CDKeHoWiLoPresSi,10,8,12,10,);
B(B_VARIN,,CDKeHoWiHiPresSi,10,9,12,11,);
L(17,8,19,8);
L(24,6,27,6);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 17 ;
        NETWORK_BODY
B(B_F,@OR-2,,15,6,20,10,);
B(B_F,@OR-2,,15,12,20,16,);
B(B_VARIN,,MXjoyHyGrabTurnL,10,7,12,9,);
B(B_VARIN,,MXstopAllFunctio,10,8,12,10,);
B(B_COMMENT,,grap slewing ,1,1,27,2,);
B(B_F,@AND-2,,20,3,25,7,0N);
B(B_VAROUT,,LXpreGrTurnRight,25,4,27,6,);
B(B_F,@AND-2,,20,9,25,13,0N);
B(B_VAROUT,,LXpreGrTurnLeft,25,10,27,12,);
B(B_VARIN,,MXjoyHyGrabTurnR,11,4,13,6,);
L(12,8,15,8);
L(12,9,15,9);
L(14,8,14,11);
L(13,5,13,14);
L(13,14,15,14);
L(12,9,12,15);
L(12,15,15,15);
L(20,6,20,8);
L(20,12,20,14);
L(14,11,20,11);
L(13,5,20,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_COMMENT,,analog signal of grap slewing ,1,1,27,2,);
B(B_F,@DIV,,12,3,17,7,);
B(B_VARIN,,100.0,10,5,12,7,);
B(B_VARIN,,LDleJoyPoti,10,4,12,6,);
B(B_F,@MUL-2,,19,5,24,9,);
B(B_VAROUT,,LDgrabSlewAnaSig,24,6,26,8,);
B(B_VARIN,,100.0,17,7,19,9,);
L(17,5,18,5);
L(18,5,18,7);
L(18,7,19,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 15 ;
        NETWORK_BODY
B(B_F,sel,,12,5,17,10,);
B(B_F,sel,,18,4,23,9,);
B(B_VARIN,,0.0,10,7,12,9,);
B(B_VAROUT,,LDgrSlewAnalSig,23,5,25,7,);
B(B_F,@MUL-2,,12,10,17,14,);
B(B_VARIN,,-1.0,10,12,12,14,);
B(B_COMMENT,,analog part grab slewing cylinder,1,1,27,2,);
B(B_VARIN,,LXpreGrTurnLeft,16,3,18,5,);
B(B_VARIN,,LXpreGrTurnRight,10,6,12,8,);
B(B_VARIN,,LDgrabSlewAnaSig,10,8,12,10,);
L(18,4,18,6);
L(17,7,18,7);
L(17,12,18,12);
L(18,8,18,12);
L(12,9,12,12);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 14 ;
        NETWORK_BODY
B(B_COMMENT,,analog part grab slewing cylinder,1,1,27,2,);
B(B_VAROUT,,MDgrSlewPuSigB,35,6,37,8,);
B(B_VARIN,,LDgrSlewAnalSig,10,6,12,8,);
B(B_VAROUT,,LXgrSlewPumpZero,35,7,37,9,);
B(B_VARIN,,100.0,10,7,12,9,);
B(B_VARIN,,CDgrSlewTimeDn,10,11,12,13,);
B(B_VARIN,,CDgrSlewTimeUp,10,10,12,12,);
B(B_FB,FB_anaCylAnaV011,analog3,12,5,35,13,);
B(B_F,NE_R,,35,2,40,6,);
B(B_VAROUT,,LXgrSlewPumpAct,40,3,42,5,);
B(B_VARIN,,0.0,33,3,35,5,);
B(B_VARIN,,CDKeSlewAnaSig,10,8,12,10,);
L(35,5,35,7);
L(12,9,12,10);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_VAROUT,,MXrelGrabValves,17,4,19,6,);
B(B_COMMENT,,release grap valves,1,1,27,2,);
B(B_VARIN,,LXgrAd1PumpAct,10,4,12,6,);
B(B_VARIN,,LXgrAd2PumpAct,10,5,12,7,);
B(B_VARIN,,LXgrSlewPumpAct,10,6,12,8,);
B(B_F,@OR-3,,12,3,17,8,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_COMMENT,,hydr. grab working,1,1,29,2,);
B(B_VARIN,,MXhydrGrabActive,10,4,12,6,);
B(B_VARIN,,LXhoseWinEnPowSt,10,5,12,7,);
B(B_VARIN,,MXrelGrabValves,10,6,12,8,);
B(B_VAROUT,,LXhydGrabWorking,17,4,19,6,);
B(B_VARIN,,QXhg1_2connectio,10,7,12,9,);
B(B_F,@OR-4,,12,3,17,9,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 19 ;
        NETWORK_BODY
B(B_COMMENT,,set hydraulical connection winch 1 and 2,1,1,27,2,);
B(B_VARIN,,QXhg1BrakeNormal,10,7,12,9,);
B(B_VARIN,,QXhg1BrakeFastSp,10,8,12,10,);
B(B_F,@OR-2,,12,10,17,14,);
B(B_VARIN,,QXhg2BrakeNormal,10,11,12,13,);
B(B_VARIN,,QXhg2BrakeFastSp,10,12,12,14,);
B(B_F,@OR-2,,12,6,17,10,);
B(B_F,@AND-4,,20,4,25,10,);
B(B_VARIN,,MXhg1AnalSigPos,17,3,19,5,);
B(B_VARIN,,MXhg2AnalSigPos,16,4,18,6,);
B(B_F,@AND-4,,20,12,25,18,);
B(B_VARIN,,MXhg1AnalSigNeg,18,15,20,17,);
B(B_VARIN,,MXhg2AnalSigNeg,18,16,20,18,);
B(B_F,@OR-2,,27,4,32,8,);
B(B_VAROUT,,QXhg1_2connectio,32,5,34,7,);
L(17,8,18,8);
L(17,12,19,12);
L(19,9,19,12);
L(19,9,20,9);
L(18,8,20,8);
L(19,4,19,6);
L(19,6,20,6);
L(18,5,18,7);
L(18,7,20,7);
L(19,12,19,14);
L(19,14,20,14);
L(18,8,18,15);
L(18,15,20,15);
L(25,6,27,6);
L(26,7,27,7);
L(26,7,26,14);
L(25,14,26,14);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,exit grab program,1,1,27,2,);
B(B_VARIN,,TRUE,10,3,12,5,);
B(B_RETURN,,,12,3,14,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL := exit: ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_FB,Integrator,Integrator3,14,5,23,11,);
B(B_VARIN,,1000.0,11,7,13,9,);
B(B_F,real_to_uint,,23,5,34,8,);
B(B_VARIN,,1000.0,12,8,14,10,);
B(B_VARIN,,MXminEngineSpeed,10,6,12,8,);
B(B_VARIN,,100000.0,12,9,14,11,);
B(B_F,EQ_R,,23,1,28,5,);
B(B_F,sel,,34,4,39,9,);
B(B_VAROUT,,QWgrabPressContr,39,5,41,7,);
B(B_COMMENT,,damit Ausgangsstufe nicht überschwingt,36,10,53,11,);
B(B_VARIN,,QWgrabPressContr,32,8,34,10,);
L(13,8,14,8);
L(13,3,13,8);
L(12,7,14,7);
L(23,4,23,7);
L(13,3,23,3);
L(28,3,34,3);
L(34,8,34,9);
L(34,3,34,6);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,exit grab program,1,1,27,2,);
B(B_VARIN,,TRUE,10,3,12,5,);
B(B_RETURN,,,12,3,14,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL := init: ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,init grab program,1,1,27,2,);
B(B_VARIN,,TRUE,10,3,12,5,);
B(B_VAROUT,,LXinitOk,12,3,14,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value additional hydraulics,1,1,27,2,);
B(B_FB,CorrValue_Bool,CorrValue_Bool1,12,4,24,10,);
B(B_VARIN,,CXadKellyHydGrab,10,8,12,10,);
B(B_VARIN,,FALSE,10,5,12,7,);
B(B_VARIN,,FALSE,10,6,12,8,);
B(B_VARIN,,TRUE,10,7,12,9,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value additional grab with only 1 Ludv section ,1,1,27,2,);
B(B_FB,CorrValue_Bool,CorrValue_Bool2,11,4,23,10,);
B(B_VARIN,,CXhydrGrab1Sect,9,8,11,10,);
B(B_VARIN,,FALSE,9,5,11,7,);
B(B_VARIN,,FALSE,9,6,11,8,);
B(B_VARIN,,TRUE,9,7,11,9,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correchtion value min. current pressure control grap open / close,1,1,27,2,);
B(B_VARIN,,CWKeGrabPreMinCu,9,8,11,10,);
B(B_VARIN,,200,9,5,11,7,);
B(B_VARIN,,0,9,6,11,8,);
B(B_VARIN,,1000,9,7,11,9,);
B(B_FB,CorrValue_UInt,CorrValue_UInt1,11,4,23,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value max. current pressure control grab close,1,1,27,2,);
B(B_VARIN,,CWKeGrabPreMaxCl,9,8,11,10,);
B(B_VARIN,,800,9,5,11,7,);
B(B_VARIN,,10,9,6,11,8,);
B(B_VARIN,,1000,9,7,11,9,);
B(B_FB,CorrValue_UInt,CorrValue_UInt2,11,4,23,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value max. current pressure control grab open,1,1,27,2,);
B(B_VARIN,,CWKeGrabPreMaxOp,9,8,11,10,);
B(B_VARIN,,800,9,5,11,7,);
B(B_VARIN,,10,9,6,11,8,);
B(B_VARIN,,1000,9,7,11,9,);
B(B_FB,CorrValue_UInt,CorrValue_UInt3,11,4,23,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value integrator time down grab control,1,1,27,2,);
B(B_VARIN,,100.0,9,5,11,7,);
B(B_VARIN,,0.0,9,6,11,8,);
B(B_VARIN,,1000.0,9,7,11,9,);
B(B_VARIN,,CDKeGrabIntTimDn,9,8,11,10,);
B(B_FB,CorrValue_Real,CorrValue_Real1,11,4,23,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value integrator time up grab control,1,1,27,2,);
B(B_VARIN,,100.0,9,5,11,7,);
B(B_VARIN,,0.0,9,6,11,8,);
B(B_VARIN,,1000.0,9,7,11,9,);
B(B_VARIN,,CDKeGrabIntTimUp,9,8,11,10,);
B(B_FB,CorrValue_Real,CorrValue_Real2,11,4,23,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value grab pressure limit open,1,1,27,2,);
B(B_VARIN,,CDKeGrabPresLiOp,9,8,11,10,);
B(B_VARIN,,100.0,9,5,11,7,);
B(B_VARIN,,0.0,9,6,11,8,);
B(B_VARIN,,400.0,9,7,11,9,);
B(B_FB,CorrValue_Real,CorrValue_Real3,11,4,23,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value grab pressure limit close,1,1,27,2,);
B(B_VARIN,,CDKeGrabPresLiCl,9,8,11,10,);
B(B_VARIN,,100.0,9,5,11,7,);
B(B_VARIN,,0.0,9,6,11,8,);
B(B_VARIN,,400.0,9,7,11,9,);
B(B_FB,CorrValue_Real,CorrValue_Real4,11,4,23,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value integrator time up grab pressure control [msec.],1,1,27,2,);
B(B_VARIN,,50.0,9,5,11,7,);
B(B_VARIN,,0.0,9,6,11,8,);
B(B_VARIN,,1000.0,9,7,11,9,);
B(B_VARIN,,CDKeGrabPreIntUp,9,8,11,10,);
B(B_FB,CorrValue_Real,CorrValue_Real5,11,4,23,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value filter time for grab pressure limit open / close,1,1,27,2,);
B(B_VARIN,,CDKeGrabFiltTime,9,8,11,10,);
B(B_VARIN,,1.0,9,5,11,7,);
B(B_VARIN,,0.0,9,6,11,8,);
B(B_VARIN,,5.0,9,7,11,9,);
B(B_FB,CorrValue_Real,CorrValue_Real6,11,4,23,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value analog signal grap slewing ,1,1,27,2,);
B(B_VARIN,,10.0,9,5,11,7,);
B(B_VARIN,,1.0,9,6,11,8,);
B(B_VARIN,,100.0,9,7,11,9,);
B(B_VARIN,,CDKeSlewAnaSig,9,8,11,10,);
B(B_FB,CorrValue_Real,CorrValue_Real7,11,4,23,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value grab adjustment 1 limitation signal,1,1,27,2,);
B(B_VARIN,,20.0,9,5,11,7,);
B(B_VARIN,,1.0,9,6,11,8,);
B(B_VARIN,,100.0,9,7,11,9,);
B(B_VARIN,,CDKeAd1LimitSig,9,8,11,10,);
B(B_FB,CorrValue_Real,CorrValue_Real8,11,4,23,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value grab adjustment 2 limitation signal,1,1,27,2,);
B(B_VARIN,,20.0,9,5,11,7,);
B(B_VARIN,,1.0,9,6,11,8,);
B(B_VARIN,,100.0,9,7,11,9,);
B(B_VARIN,,CDKeAd2LimitSig,9,8,11,10,);
B(B_FB,CorrValue_Real,CorrValue_Real9,11,4,23,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_VARIN,,100.0,9,5,11,7,);
B(B_VARIN,,1.0,9,6,11,8,);
B(B_VARIN,,100.0,9,7,11,9,);
B(B_FB,CorrValue_Real,CorrValue_Real10,11,4,23,10,);
B(B_VARIN,,CDKeHoWiAutPuSig,9,8,11,10,);
B(B_COMMENT,,correction value hose winch automatic lift [%],1,1,27,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value hose winch manual [%],1,1,27,2,);
B(B_VARIN,,50.0,9,5,11,7,);
B(B_VARIN,,1.0,9,6,11,8,);
B(B_VARIN,,100.0,9,7,11,9,);
B(B_FB,CorrValue_Real,CorrValue_Real11,11,4,23,10,);
B(B_VARIN,,CDKeHoWiManPuSig,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_VARIN,,20.0,9,5,11,7,);
B(B_VARIN,,1.0,9,6,11,8,);
B(B_VARIN,,100.0,9,7,11,9,);
B(B_FB,CorrValue_Real,CorrValue_Real12,11,4,23,10,);
B(B_VARIN,,CDKeHoWiLoPresSi,9,8,11,10,);
B(B_COMMENT,,correction value low pres. signal hose winch [%],1,1,28,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value high pres. signal hose winch [%],1,1,27,2,);
B(B_VARIN,,50.0,9,5,11,7,);
B(B_VARIN,,1.0,9,6,11,8,);
B(B_VARIN,,100.0,9,7,11,9,);
B(B_FB,CorrValue_Real,CorrValue_Real13,11,4,23,10,);
B(B_VARIN,,CDKeHoWiHiPresSi,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
END_BODY
END_PROGRAM

PROGRAM ADinterMasD1V020
	VAR_EXTERNAL 
		IDec124_01: DINT:=0;
			(*external control master modul 124*)
		IDec124_02: DINT:=0;
			(*external control master modul 124*)
		IDec124_03: DINT:=0;
			(*external control master modul 124*)
		IDec124_04: DINT:=0;
			(*external control master modul 124*)
		IDec124_05: DINT:=0;
			(*external control master modul 124*)
		IDec124_06: DINT:=0;
			(*external control master modul 124*)
		IDec124_07: DINT:=0;
			(*external control master modul 124*)
		IDec124_08: DINT:=0;
			(*external control master modul 124*)
		QDec124_01: DINT:=0;
			(*external control master modul 124*)
		QDec124_02: DINT:=0;
			(*external control master modul 124*)
		QDec124_03: DINT:=0;
			(*external control master modul 124*)
		QDec124_04: DINT:=0;
			(*external control master modul 124*)
		QDec124_05: DINT:=0;
			(*external control master modul 124*)
		QDec124_06: DINT:=0;
			(*external control master modul 124*)
		QDec124_07: DINT:=0;
			(*external control master modul 124*)
		QDec124_08: DINT:=0;
			(*external control master modul 124*)
		MXecM124Timeout: BOOL:=FALSE;
			(*external control module 109 timeout*)
		MXecM124isActive: BOOL:=FALSE;
			(*external control module 124 is active*)
		MXecModulsActive: BOOL:=FALSE;
			(*external control module are active*)
		MXecOutputTransm: BOOL:=FALSE;
			(*external control output transmit*)
		MDhg2RopeLenWin: REAL:=0.0;
			(*rope lenght hg 2 on the winch in m*)
		MDhg1RopeLenWin: REAL:=0.0;
			(*rope lenght hg 1 on the winch in m*)
		MDlmlLoadBoom: REAL:=0.0;
			(*lml load main boom in to*)
	END_VAR
	VAR_EXTERNAL RETAIN
		MXenExtOperMode: BOOL:=FALSE;
			(*enable external operation mode*)
		MDhg1Reeving: REAL:=0.0;
			(*hg1 reeving*)
		MDhg2Reeving: REAL:=0.0;
			(*hg2 reeving*)
	END_VAR
	VAR 
		ModuleState1: ModuleState;
		LXecM124Timeout: BOOL:=FALSE;
		Dummy: DINT:=0;
	END_VAR
'FBD'
BODY
    WORKSPACE
        NETWORK_LIST_TYPE := NWTYPEFBD ;
        ACTIVE_NETWORK := 0 ;
    END_WORKSPACE
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_FB,ModuleState,ModuleState1,11,4,23,10,);
B(B_VARIN,,3,9,5,11,7,);
B(B_VARIN,,124,9,6,11,8,);
B(B_VARIN,,MXenExtOperMode,9,7,11,9,);
B(B_VARIN,,FALSE,9,8,11,10,);
B(B_VAROUT,,LXecM124Timeout,23,5,25,7,);
B(B_VAROUT,,MXecM124isActive,23,6,25,8,);
B(B_COMMENT,,activate module 124 for inputs/outputs transmission with external cont,2,1,29,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,transmission of analog input signals,2,1,18,2,);
B(B_VARIN,,0,9,3,11,5,);
B(B_VAROUT,,QDec124_01,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_F,real_to_dint,,22,1,33,4,);
B(B_VAROUT,,QDec124_02,33,2,35,4,);
B(B_F,@DIV,,17,1,22,5,);
B(B_VARIN,,MDhg2Reeving,15,5,17,7,);
B(B_F,@MUL-2,,11,1,16,5,);
B(B_VARIN,,MDhg2RopeLenWin,9,2,11,4,);
B(B_VARIN,,1000.0,9,3,11,5,);
L(17,4,17,6);
L(16,3,17,3);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_VARIN,,1000.0,9,3,11,5,);
B(B_VARIN,,MDhg1RopeLenWin,9,2,11,4,);
B(B_F,real_to_dint,,22,1,33,4,);
B(B_VAROUT,,QDec124_03,33,2,35,4,);
B(B_F,@DIV,,17,1,22,5,);
B(B_F,@MUL-2,,11,1,16,5,);
B(B_VARIN,,MDhg1Reeving,15,5,17,7,);
L(17,4,17,6);
L(16,3,17,3);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,0,9,1,11,3,);
B(B_VAROUT,,QDec124_04,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,0,9,1,11,3,);
B(B_VAROUT,,QDec124_05,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_VARIN,,MDlmlLoadBoom,9,3,11,5,);
B(B_F,@MUL-2,,11,2,16,6,);
B(B_VARIN,,1000.0,9,4,11,6,);
B(B_F,real_to_dint,,16,2,27,5,);
B(B_VAROUT,,QDec124_06,27,3,29,5,);
B(B_COMMENT,,to => kg,1,1,10,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VAROUT,,QDec124_07,11,1,13,3,);
B(B_VARIN,,0,9,1,11,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VAROUT,,QDec124_08,11,1,13,3,);
B(B_VARIN,,0,9,1,11,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_VARIN,,MXenExtOperMode,9,3,11,5,);
B(B_RETURN,,,11,3,13,5,N);
B(B_COMMENT,,return~ if external operation is not enabled,2,1,18,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_F,@AND-2,,12,3,17,7,);
B(B_VAROUT,,MXecM124Timeout,17,4,19,6,);
B(B_VARIN,,MXecModulsActive,10,4,12,6,);
B(B_VARIN,,LXecM124Timeout,10,5,12,7,);
B(B_COMMENT,,generate timeout error,1,1,27,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 52 ;
        NETWORK_BODY
B(B_F,sel,,13,10,18,15,);
B(B_F,sel,,13,16,18,21,);
B(B_F,sel,,13,22,18,27,);
B(B_F,sel,,13,28,18,33,);
B(B_F,sel,,13,34,18,39,);
B(B_F,sel,,13,40,18,45,);
B(B_VARIN,,MXecOutputTransm,10,5,12,7,);
B(B_VARIN,,0,9,6,11,8,);
B(B_VARIN,,IDec124_02,8,13,10,15,);
B(B_VARIN,,IDec124_03,8,19,10,21,);
B(B_VARIN,,IDec124_04,8,25,10,27,);
B(B_VARIN,,IDec124_05,8,31,10,33,);
B(B_VARIN,,IDec124_06,8,37,10,39,);
B(B_VARIN,,IDec124_07,8,43,10,45,);
B(B_F,sel,,13,46,18,51,);
B(B_VARIN,,IDec124_08,11,49,13,51,);
B(B_VARIN,,IDec124_01,8,7,10,9,);
B(B_VAROUT,,Dummy,18,5,20,7,);
B(B_VAROUT,,Dummy,18,29,20,31,);
B(B_VAROUT,,Dummy,18,35,20,37,);
B(B_VAROUT,,Dummy,18,41,20,43,);
B(B_VAROUT,,Dummy,18,47,20,49,);
B(B_VAROUT,,Dummy,18,11,20,13,);
B(B_VAROUT,,Dummy,18,17,20,19,);
B(B_VAROUT,,Dummy,18,23,20,25,);
B(B_F,sel,,13,4,18,9,);
B(B_COMMENT,,transmission of analog output signals,2,1,18,2,);
L(12,48,13,48);
L(11,49,13,49);
L(11,7,13,7);
L(11,13,13,13);
L(11,19,13,19);
L(11,25,13,25);
L(11,31,13,31);
L(11,37,13,37);
L(11,43,13,43);
L(12,12,13,12);
L(12,18,13,18);
L(12,24,13,24);
L(12,30,13,30);
L(12,36,13,36);
L(12,42,13,42);
L(10,14,13,14);
L(10,20,13,20);
L(10,26,13,26);
L(10,32,13,32);
L(10,38,13,38);
L(10,44,13,44);
L(10,8,13,8);
L(12,6,13,6);
L(12,6,12,48);
L(11,7,11,49);
        END_NETWORK_BODY
    END_NET_WORK
END_BODY
END_PROGRAM

PROGRAM ADinterMasW1V050
	VAR_EXTERNAL 
		IWrightJoystAna1: INT:=0;
			(*right joystick analog signal 1*)
		IWrightJoystAna2: INT:=0;
			(*right joystick analog signal 2*)
		IWrightJoystThum: INT:=0;
			(*right joystick analog signal thumb wheel*)
		IWleftJoystAnal1: INT:=0;
			(*left joystick analog signal 1*)
		IWleftJoystAnal2: INT:=0;
			(*left joystick analog signal 2*)
		IWleftJoystThum: INT:=0;
			(*left joystick analog signal thumb wheel*)
		IWfootpEngSpeed: INT:=0;
			(*footpedal engine speed (optional)*)
		IWfootpStabWinch: INT:=0;
			(*footpedal stabilization winch (optional)*)
		IWkeybX23Poti1: UINT:=0;
			(*keyboard X23 poti 1*)
		IWkeybX23Poti2: UINT:=0;
			(*keyboard X23 poti 2*)
		IWkeybX25Poti1: UINT:=0;
			(*keyboard X25 poti 1*)
		IWkeybX25Poti2: UINT:=0;
			(*keyboard X25 poti 2*)
		IWkeybX25Poti3: UINT:=0;
			(*keyboard X25 poti 3*)
		IWkeybX25Poti4: UINT:=0;
			(*keyboard X25 poti 4*)
		IWec113_01: INT:=0;
			(*external control master modul 113*)
		IWec113_02: INT:=0;
			(*external control master modul 113*)
		IWec113_03: INT:=0;
			(*external control master modul 113*)
		IWec113_04: INT:=0;
			(*external control master modul 113*)
		IWec113_05: INT:=0;
			(*external control master modul 113*)
		IWec113_06: INT:=0;
			(*external control master modul 113*)
		IWec113_07: INT:=0;
			(*external control master modul 113*)
		IWec113_08: INT:=0;
			(*external control master modul 113*)
		IWec113_09: INT:=0;
			(*external control master modul 113*)
		IWec113_10: INT:=0;
			(*external control master modul 113*)
		IWec113_11: INT:=0;
			(*external control master modul 113*)
		IWec113_12: INT:=0;
			(*external control master modul 113*)
		IWec113_13: INT:=0;
			(*external control master modul 113*)
		IWec113_14: INT:=0;
			(*external control master modul 113*)
		IWec113_15: INT:=0;
			(*external control master modul 113*)
		IWec113_16: INT:=0;
			(*external control master modul 113*)
		QWec113_01: INT:=0;
			(*external control master modul 113*)
		QWec113_02: INT:=0;
			(*external control master modul 113*)
		QWec113_03: INT:=0;
			(*external control master modul 113*)
		QWec113_04: INT:=0;
			(*external control master modul 113*)
		QWec113_05: INT:=0;
			(*external control master modul 113*)
		QWec113_06: INT:=0;
			(*external control master modul 113*)
		QWec113_07: INT:=0;
			(*external control master modul 113*)
		QWec113_08: INT:=0;
			(*external control master modul 113*)
		QWec113_09: INT:=0;
			(*external control master modul 113*)
		QWec113_10: INT:=0;
			(*external control master modul 113*)
		QWec113_11: INT:=0;
			(*external control master modul 113*)
		QWec113_12: INT:=0;
			(*external control master modul 113*)
		QWec113_13: INT:=0;
			(*external control master modul 113*)
		QWec113_14: INT:=0;
			(*external control master modul 113*)
		QWec113_15: INT:=0;
			(*external control master modul 113*)
		QWec113_16: INT:=0;
			(*external control master modul 113*)
		MXecM113Timeout: BOOL:=FALSE;
			(*external control module 109 timeout*)
		MXecM113isActive: BOOL:=FALSE;
			(*external control module 113 is active*)
		MXecOutputTransm: BOOL:=FALSE;
			(*external control output transmit*)
		MXecModulsActive: BOOL:=FALSE;
			(*external control module are active*)
		MWecHg1extAnaSig: INT:=0;
			(*external control analog signal Hg1*)
		MWecHg2extAnaSig: INT:=0;
			(*external control analog signal Hg2*)
		MWecRiJoyAna1Vib: INT:=0;
			(*ext. cont. vibr. right joystick sig. 1*)
		MWecRiJoyAna2Vib: INT:=0;
			(*ext. cont. vibr. right joystick sig. 2*)
		MWecLeJoyAna1Vib: INT:=0;
			(*ext. cont. vibr. left joystick sig. 1*)
		MWecLeJoyAna2Vib: INT:=0;
			(*ext. cont. vibr. left joystick sig. 2*)
		MDhg1ExtAnalSign: REAL:=0.0;
			(*HG 1 external analog signal in [%]*)
		MDhg2ExtAnalSign: REAL:=0.0;
			(*HG 2 external analog signal in [%]*)
	END_VAR
	VAR_EXTERNAL RETAIN
		MXenExtOperMode: BOOL:=FALSE;
			(*enable external operation mode*)
	END_VAR
	VAR 
		ModuleState1: ModuleState;
		LXecM113Timeout: BOOL:=FALSE;
		Dummy: INT:=0;
	END_VAR
'FBD'
BODY
    WORKSPACE
        NETWORK_LIST_TYPE := NWTYPEFBD ;
        ACTIVE_NETWORK := 0 ;
    END_WORKSPACE
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_FB,ModuleState,ModuleState1,10,4,22,10,);
B(B_VARIN,,3,8,5,10,7,);
B(B_VARIN,,113,8,6,10,8,);
B(B_VARIN,,MXenExtOperMode,8,7,10,9,);
B(B_VARIN,,FALSE,8,8,10,10,);
B(B_VAROUT,,LXecM113Timeout,22,5,24,7,);
B(B_VAROUT,,MXecM113isActive,22,6,24,8,);
B(B_COMMENT,,activate module 113 for inputs/outputs transmission with external control,2,1,29,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_VAROUT,,QWec113_01,11,3,13,5,);
B(B_VARIN,,IWrightJoystAna1,9,3,11,5,);
B(B_COMMENT,,transmission of analog input signals,2,1,18,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VAROUT,,QWec113_02,11,1,13,3,);
B(B_VARIN,,IWrightJoystAna2,9,1,11,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VAROUT,,QWec113_03,11,1,13,3,);
B(B_VARIN,,IWrightJoystThum,9,1,11,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VAROUT,,QWec113_04,11,1,13,3,);
B(B_VARIN,,IWleftJoystAnal1,9,1,11,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VAROUT,,QWec113_05,11,1,13,3,);
B(B_VARIN,,IWleftJoystAnal2,9,1,11,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VAROUT,,QWec113_06,11,1,13,3,);
B(B_VARIN,,IWleftJoystThum,9,1,11,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VAROUT,,QWec113_07,11,1,13,3,);
B(B_VARIN,,IWfootpEngSpeed,9,1,11,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VAROUT,,QWec113_08,11,1,13,3,);
B(B_VARIN,,IWfootpStabWinch,9,1,11,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,IWkeybX23Poti1,9,1,11,3,);
B(B_F,uint_to_int,,11,0,21,3,);
B(B_VAROUT,,QWec113_09,21,1,23,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,IWkeybX23Poti2,9,1,11,3,);
B(B_VAROUT,,QWec113_10,21,1,23,3,);
B(B_F,uint_to_int,,11,0,21,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,IWkeybX25Poti1,9,1,11,3,);
B(B_VAROUT,,QWec113_11,21,1,23,3,);
B(B_F,uint_to_int,,11,0,21,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,IWkeybX25Poti2,9,1,11,3,);
B(B_F,uint_to_int,,11,0,21,3,);
B(B_VAROUT,,QWec113_12,21,1,23,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,IWkeybX25Poti3,9,1,11,3,);
B(B_F,uint_to_int,,11,0,21,3,);
B(B_VAROUT,,QWec113_13,21,1,23,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,IWkeybX25Poti4,9,1,11,3,);
B(B_F,uint_to_int,,11,0,21,3,);
B(B_VAROUT,,QWec113_14,21,1,23,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VAROUT,,QWec113_15,11,1,13,3,);
B(B_VARIN,,0,9,1,11,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VAROUT,,QWec113_16,11,1,13,3,);
B(B_VARIN,,0,9,1,11,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_VARIN,,MXenExtOperMode,9,3,11,5,);
B(B_RETURN,,,11,3,13,5,N);
B(B_COMMENT,,return~ if external operation is not enabled,1,1,17,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_F,@AND-2,,12,3,17,7,);
B(B_VAROUT,,MXecM113Timeout,17,4,19,6,);
B(B_VARIN,,MXecModulsActive,10,4,12,6,);
B(B_VARIN,,LXecM113Timeout,10,5,12,7,);
B(B_COMMENT,,generate timeout error,1,1,27,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 100 ;
        NETWORK_BODY
B(B_F,sel,,13,10,18,15,);
B(B_F,sel,,13,16,18,21,);
B(B_F,sel,,13,22,18,27,);
B(B_F,sel,,13,28,18,33,);
B(B_F,sel,,13,34,18,39,);
B(B_F,sel,,13,40,18,45,);
B(B_F,sel,,13,46,18,51,);
B(B_F,sel,,13,52,18,57,);
B(B_F,sel,,13,58,18,63,);
B(B_F,sel,,13,64,18,69,);
B(B_F,sel,,13,70,18,75,);
B(B_VARIN,,MXecOutputTransm,10,5,12,7,);
B(B_VARIN,,0,9,6,11,8,);
B(B_VARIN,,IWec113_02,8,13,10,15,);
B(B_VARIN,,IWec113_03,8,19,10,21,);
B(B_VARIN,,IWec113_04,8,25,10,27,);
B(B_VARIN,,IWec113_05,8,31,10,33,);
B(B_VARIN,,IWec113_06,8,37,10,39,);
B(B_VARIN,,IWec113_07,8,43,10,45,);
B(B_VARIN,,IWec113_08,8,49,10,51,);
B(B_VARIN,,IWec113_09,8,55,10,57,);
B(B_VARIN,,IWec113_10,8,61,10,63,);
B(B_VARIN,,IWec113_11,8,67,10,69,);
B(B_VARIN,,IWec113_12,8,73,10,75,);
B(B_F,sel,,13,76,18,81,);
B(B_F,sel,,13,82,18,87,);
B(B_F,sel,,13,88,18,93,);
B(B_F,sel,,13,94,18,99,);
B(B_VARIN,,IWec113_13,8,79,10,81,);
B(B_VARIN,,IWec113_14,8,85,10,87,);
B(B_VARIN,,IWec113_15,8,91,10,93,);
B(B_VARIN,,IWec113_16,11,97,13,99,);
B(B_VARIN,,IWec113_01,8,7,10,9,);
B(B_VAROUT,,MWecRiJoyAna1Vib,18,5,20,7,);
B(B_VAROUT,,Dummy,18,29,20,31,);
B(B_VAROUT,,Dummy,18,35,20,37,);
B(B_VAROUT,,MWecHg1extAnaSig,18,41,20,43,);
B(B_VAROUT,,MWecHg2extAnaSig,18,47,20,49,);
B(B_VAROUT,,Dummy,18,53,20,55,);
B(B_VAROUT,,Dummy,18,59,20,61,);
B(B_VAROUT,,Dummy,18,65,20,67,);
B(B_VAROUT,,Dummy,18,71,20,73,);
B(B_VAROUT,,Dummy,18,77,20,79,);
B(B_VAROUT,,Dummy,18,83,20,85,);
B(B_VAROUT,,Dummy,18,89,20,91,);
B(B_VAROUT,,Dummy,18,95,20,97,);
B(B_VAROUT,,MWecRiJoyAna2Vib,18,11,20,13,);
B(B_VAROUT,,MWecLeJoyAna1Vib,18,17,20,19,);
B(B_VAROUT,,MWecLeJoyAna2Vib,18,23,20,25,);
B(B_F,sel,,13,4,18,9,);
B(B_COMMENT,,transmission of analog output signals,1,1,17,2,);
L(11,7,11,13);
L(11,13,11,73);
L(12,6,12,72);
L(12,72,12,96);
L(12,96,13,96);
L(11,73,11,97);
L(11,97,13,97);
L(11,7,13,7);
L(11,13,13,13);
L(11,19,13,19);
L(11,25,13,25);
L(11,31,13,31);
L(11,37,13,37);
L(11,43,13,43);
L(11,49,13,49);
L(11,55,13,55);
L(11,61,13,61);
L(11,67,13,67);
L(11,73,13,73);
L(11,79,13,79);
L(11,85,13,85);
L(11,91,13,91);
L(12,12,13,12);
L(12,18,13,18);
L(12,24,13,24);
L(12,30,13,30);
L(12,36,13,36);
L(12,42,13,42);
L(12,48,13,48);
L(12,54,13,54);
L(12,60,13,60);
L(12,66,13,66);
L(12,72,13,72);
L(12,78,13,78);
L(12,84,13,84);
L(12,90,13,90);
L(10,14,13,14);
L(10,20,13,20);
L(10,26,13,26);
L(10,32,13,32);
L(10,38,13,38);
L(10,44,13,44);
L(10,50,13,50);
L(10,56,13,56);
L(10,62,13,62);
L(10,68,13,68);
L(10,74,13,74);
L(10,80,13,80);
L(10,86,13,86);
L(10,92,13,92);
L(10,8,13,8);
L(12,6,13,6);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_VARIN,,MWecHg1extAnaSig,9,4,11,6,);
B(B_F,int_to_real,,11,3,21,6,);
B(B_F,@DIV,,21,3,26,7,);
B(B_VARIN,,-10.0,19,6,21,8,);
B(B_COMMENT,,external analog signal hg 1,1,1,27,2,);
B(B_VAROUT,,MDhg1ExtAnalSign,26,4,28,6,);
L(21,6,21,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_VARIN,,MWecHg2extAnaSig,9,4,11,6,);
B(B_F,int_to_real,,11,3,21,6,);
B(B_F,@DIV,,21,3,26,7,);
B(B_VARIN,,-10.0,19,6,21,8,);
B(B_COMMENT,,external analog signal hg 2,1,1,27,2,);
B(B_VAROUT,,MDhg2ExtAnalSign,26,4,28,6,);
L(21,6,21,7);
        END_NETWORK_BODY
    END_NET_WORK
END_BODY
END_PROGRAM

PROGRAM ADinterMasW2V060
	VAR_EXTERNAL 
		IWfuelTankCont: UINT:=0;
			(*content Dieseltank*)
		IWhg1SystemPress: UINT:=0;
			(*system pressure HG 1*)
		IWhg2SystemPress: UINT:=0;
			(*system pressure HG 2*)
		IWsgSystemPreRi1: UINT:=0;
			(*system pressure right 1 SG*)
		IWsgSystemPreLe1: UINT:=0;
			(*system pressure left 1 SG*)
		IWadHg1BrakePres: UINT:=0;
			(*additional device lowering control HG 1 brake pressure*)
		IWadHg2BrakePres: UINT:=0;
			(*additional device lowering control HG 2 brake pressure*)
		IWloadSenLeBoom: UINT:=0;
			(*lml left force transmitter main boom*)
		IWadHyLudv1Press: UINT:=0;
			(*add hydraulics ludv pump 1 pressure*)
		IWadHyLudv2Press: UINT:=0;
			(*add hydraulics ludv pump 2 pressure*)
		IWangSenLowBoom: UINT:=0;
			(*lml lower angle transmitter main boom*)
		IWloadSenLeLuJib: UINT:=0;
			(*lml left force transmitter luffing jib*)
		IWangSenLoLufJib: UINT:=0;
			(*lml lower angle transmitter luffing jib / ad angle sliding table hanging leader*)
		IWadPres1FalBack: UINT;
			(*additional device lml pressure sensor 1 luffing jib fall back support*)
		IWvibSysPresP2: UINT:=0;
			(*P2 sys.press.vibrator/hammer/hydr.grab/drill*)
		IWec114_01: UINT:=0;
			(*external control master modul 114*)
		IWec114_02: UINT:=0;
			(*external control master modul 114*)
		IWec114_03: UINT:=0;
			(*external control master modul 114*)
		IWec114_04: UINT:=0;
			(*external control master modul 114*)
		IWec114_05: UINT:=0;
			(*external control master modul 114*)
		IWec114_06: UINT:=0;
			(*external control master modul 114*)
		IWec114_07: UINT:=0;
			(*external control master modul 114*)
		IWec114_08: UINT:=0;
			(*external control master modul 114*)
		IWec114_09: UINT:=0;
			(*external control master modul 114*)
		IWec114_10: UINT:=0;
			(*external control master modul 114*)
		IWec114_11: UINT:=0;
			(*external control master modul 114*)
		IWec114_12: UINT:=0;
			(*external control master modul 114*)
		IWec114_13: UINT:=0;
			(*external control master modul 114*)
		IWec114_14: UINT:=0;
			(*external control master modul 114*)
		IWec114_15: UINT:=0;
			(*external control master modul 114*)
		IWec114_16: UINT:=0;
			(*external control master modul 114*)
		QWec114_01: UINT:=0;
			(*external control master modul 114*)
		QWec114_02: UINT:=0;
			(*external control master modul 114*)
		QWec114_03: UINT:=0;
			(*external control master modul 114*)
		QWec114_04: UINT:=0;
			(*external control master modul 114*)
		QWec114_05: UINT:=0;
			(*external control master modul 114*)
		QWec114_06: UINT:=0;
			(*external control master modul 114*)
		QWec114_07: UINT:=0;
			(*external control master modul 114*)
		QWec114_08: UINT:=0;
			(*external control master modul 114*)
		QWec114_09: UINT:=0;
			(*external control master modul 114*)
		QWec114_10: UINT:=0;
			(*external control master modul 114*)
		QWec114_11: UINT:=0;
			(*external control master modul 114*)
		QWec114_12: UINT:=0;
			(*external control master modul 114*)
		QWec114_13: UINT:=0;
			(*external control master modul 114*)
		QWec114_14: UINT:=0;
			(*external control master modul 114*)
		QWec114_15: UINT:=0;
			(*external control master modul 114*)
		QWec114_16: UINT:=0;
			(*external control master modul 114*)
		QWhg2Lifting: UINT:=0;
			(*HG 2 pump lifting*)
		QWhg2Lowering: UINT:=0;
			(*HG 2 pump lowering*)
		QWhg1Lifting: UINT:=0;
			(*HG 1 pump lifting*)
		QWhg1Lowering: UINT:=0;
			(*HG 1 pump lowering*)
		MXecM114Timeout: BOOL:=FALSE;
			(*external control module 109 timeout*)
		MXecM114isActive: BOOL:=FALSE;
			(*external control module 114 is active*)
		MXecModulsActive: BOOL:=FALSE;
			(*external control module are active*)
		MXecOutputTransm: BOOL:=FALSE;
			(*external control output transmit*)
		MXhg1EnaExitProg: BOOL:=FALSE;
			(*enable exit hg1 programm*)
		MXhg2EnaExitProg: BOOL:=FALSE;
			(*enable exit hg2 programm*)
		MXSecurityCheck: BOOL:=FALSE;
			(*security check aktive*)
		MWhg1Lifting: UINT:=0;
			(*HG 1 pump lifting*)
		MWhg1Lowering: UINT:=0;
			(*HG 1 pump lowering *)
		MWhg2Lifting: UINT:=0;
			(*HG 2 pump lifting*)
		MWhg2Lowering: UINT:=0;
			(*HG 2 pump lowering *)
	END_VAR
	VAR_EXTERNAL RETAIN
		MXenExtOperMode: BOOL:=FALSE;
			(*enable external operation mode*)
	END_VAR
	VAR 
		ModuleState1: ModuleState;
		LXecM114Timeout: BOOL:=FALSE;
		Dummy: UINT:=0;
	END_VAR
'FBD'
BODY
    WORKSPACE
        NETWORK_LIST_TYPE := NWTYPEFBD ;
        ACTIVE_NETWORK := 0 ;
    END_WORKSPACE
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_FB,ModuleState,ModuleState1,10,3,22,9,);
B(B_VARIN,,3,8,4,10,6,);
B(B_VARIN,,114,8,5,10,7,);
B(B_VARIN,,MXenExtOperMode,8,6,10,8,);
B(B_VARIN,,FALSE,8,7,10,9,);
B(B_VAROUT,,LXecM114Timeout,22,4,24,6,);
B(B_VAROUT,,MXecM114isActive,22,5,24,7,);
B(B_COMMENT,,activate module 114 for inputs/outputs transmission with external control,2,1,29,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_VARIN,,IWfuelTankCont,10,3,12,5,);
B(B_VAROUT,,QWec114_01,12,3,14,5,);
B(B_COMMENT,,transmission of analog input signals,2,1,18,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VAROUT,,QWec114_02,12,1,14,3,);
B(B_VARIN,,IWhg1SystemPress,10,1,12,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VAROUT,,QWec114_03,12,1,14,3,);
B(B_VARIN,,IWhg2SystemPress,10,1,12,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VAROUT,,QWec114_04,12,1,14,3,);
B(B_VARIN,,IWsgSystemPreRi1,10,1,12,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VAROUT,,QWec114_05,12,1,14,3,);
B(B_VARIN,,IWsgSystemPreLe1,10,1,12,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VAROUT,,QWec114_06,12,1,14,3,);
B(B_VARIN,,IWadHg1BrakePres,10,1,12,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VAROUT,,QWec114_07,12,1,14,3,);
B(B_VARIN,,IWadHg2BrakePres,10,1,12,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VAROUT,,QWec114_08,12,1,14,3,);
B(B_VARIN,,IWloadSenLeBoom,10,1,12,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VAROUT,,QWec114_09,12,1,14,3,);
B(B_VARIN,,IWangSenLowBoom,10,1,12,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VAROUT,,QWec114_10,12,1,14,3,);
B(B_VARIN,,IWloadSenLeLuJib,10,1,12,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VAROUT,,QWec114_11,12,1,14,3,);
B(B_VARIN,,IWangSenLoLufJib,10,1,12,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VAROUT,,QWec114_12,12,1,14,3,);
B(B_VARIN,,0,10,1,12,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VAROUT,,QWec114_13,12,1,14,3,);
B(B_VARIN,,IWadPres1FalBack,10,1,12,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VAROUT,,QWec114_14,12,1,14,3,);
B(B_VARIN,,IWadHyLudv1Press,10,1,12,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VAROUT,,QWec114_15,12,1,14,3,);
B(B_VARIN,,IWadHyLudv2Press,10,1,12,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VAROUT,,QWec114_16,12,1,14,3,);
B(B_VARIN,,IWvibSysPresP2,10,1,12,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_VARIN,,MXenExtOperMode,9,3,11,5,);
B(B_RETURN,,,11,3,13,5,N);
B(B_COMMENT,,return~ if external operation is not enabled,2,1,18,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_F,@AND-2,,12,3,17,7,);
B(B_VAROUT,,MXecM114Timeout,17,4,19,6,);
B(B_VARIN,,MXecModulsActive,10,4,12,6,);
B(B_VARIN,,LXecM114Timeout,10,5,12,7,);
B(B_COMMENT,,generate timeout error,1,1,27,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 99 ;
        NETWORK_BODY
B(B_F,sel,,13,3,18,8,);
B(B_F,sel,,13,9,18,14,);
B(B_F,sel,,13,15,18,20,);
B(B_F,sel,,13,21,18,26,);
B(B_F,sel,,13,27,18,32,);
B(B_F,sel,,13,33,18,38,);
B(B_F,sel,,13,39,18,44,);
B(B_F,sel,,13,45,18,50,);
B(B_F,sel,,13,51,18,56,);
B(B_F,sel,,13,57,18,62,);
B(B_F,sel,,13,63,18,68,);
B(B_F,sel,,13,69,18,74,);
B(B_VARIN,,MXecOutputTransm,10,4,12,6,);
B(B_VARIN,,0,9,5,11,7,);
B(B_F,sel,,13,75,18,80,);
B(B_F,sel,,13,81,18,86,);
B(B_F,sel,,13,87,18,92,);
B(B_F,sel,,13,93,18,98,);
B(B_VARIN,,IWec114_01,8,6,10,8,);
B(B_VARIN,,IWec114_02,8,12,10,14,);
B(B_VARIN,,IWec114_03,8,18,10,20,);
B(B_VARIN,,IWec114_04,8,24,10,26,);
B(B_VARIN,,IWec114_05,8,30,10,32,);
B(B_VARIN,,IWec114_06,8,36,10,38,);
B(B_VARIN,,IWec114_07,8,42,10,44,);
B(B_VARIN,,IWec114_08,8,48,10,50,);
B(B_VARIN,,IWec114_09,8,54,10,56,);
B(B_VARIN,,IWec114_10,8,60,10,62,);
B(B_VARIN,,IWec114_11,8,66,10,68,);
B(B_VARIN,,IWec114_12,8,72,10,74,);
B(B_VARIN,,IWec114_13,8,78,10,80,);
B(B_VARIN,,IWec114_14,8,84,10,86,);
B(B_VARIN,,IWec114_15,8,90,10,92,);
B(B_VARIN,,IWec114_16,11,96,13,98,);
B(B_VAROUT,,MWhg1Lifting,18,4,20,6,);
B(B_VAROUT,,MWhg1Lowering,18,10,20,12,);
B(B_VAROUT,,Dummy,18,82,20,84,);
B(B_VAROUT,,Dummy,18,76,20,78,);
B(B_VAROUT,,MWhg2Lifting,18,16,20,18,);
B(B_VAROUT,,Dummy,18,34,20,36,);
B(B_VAROUT,,Dummy,18,40,20,42,);
B(B_VAROUT,,Dummy,18,46,20,48,);
B(B_VAROUT,,Dummy,18,52,20,54,);
B(B_VAROUT,,Dummy,18,58,20,60,);
B(B_VAROUT,,Dummy,18,64,20,66,);
B(B_VAROUT,,Dummy,18,70,20,72,);
B(B_VAROUT,,Dummy,18,88,20,90,);
B(B_VAROUT,,Dummy,18,94,20,96,);
B(B_VAROUT,,MWhg2Lowering,18,22,20,24,);
B(B_VAROUT,,Dummy,18,28,20,30,);
B(B_COMMENT,,transmission of analog output signals,2,1,18,2,);
L(11,6,11,12);
L(11,12,11,72);
L(12,5,13,5);
L(12,5,12,71);
L(12,71,12,95);
L(12,95,13,95);
L(11,72,11,96);
L(11,96,13,96);
L(11,6,13,6);
L(11,12,13,12);
L(11,18,13,18);
L(11,24,13,24);
L(11,30,13,30);
L(11,36,13,36);
L(11,42,13,42);
L(11,48,13,48);
L(11,54,13,54);
L(11,60,13,60);
L(11,66,13,66);
L(11,72,13,72);
L(11,78,13,78);
L(11,84,13,84);
L(11,90,13,90);
L(12,11,13,11);
L(12,17,13,17);
L(12,23,13,23);
L(12,29,13,29);
L(12,35,13,35);
L(12,41,13,41);
L(12,47,13,47);
L(12,53,13,53);
L(12,59,13,59);
L(12,65,13,65);
L(12,71,13,71);
L(12,77,13,77);
L(12,83,13,83);
L(12,89,13,89);
L(10,13,13,13);
L(10,19,13,19);
L(10,25,13,25);
L(10,31,13,31);
L(10,37,13,37);
L(10,43,13,43);
L(10,49,13,49);
L(10,55,13,55);
L(10,61,13,61);
L(10,67,13,67);
L(10,73,13,73);
L(10,79,13,79);
L(10,85,13,85);
L(10,91,13,91);
L(10,7,13,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,MXhg2EnaExitProg,8,1,10,3,);
B(B_JUMP,,exthg1,10,1,12,3,N);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,MWhg2Lifting,8,1,10,3,);
B(B_VAROUT,,QWhg2Lifting,10,1,12,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,MWhg2Lowering,8,1,10,3,);
B(B_VAROUT,,QWhg2Lowering,10,1,12,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL := exthg1: ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_F,@OR-2,,10,1,15,5,N);
B(B_VARIN,,MXSecurityCheck,8,3,10,5,);
B(B_JUMP,,end,15,2,17,4,);
B(B_VARIN,,MXhg1EnaExitProg,8,2,10,4,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,MWhg1Lifting,8,1,10,3,);
B(B_VAROUT,,QWhg1Lifting,10,1,12,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,MWhg1Lowering,8,1,10,3,);
B(B_VAROUT,,QWhg1Lowering,10,1,12,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL := end: ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,TRUE,8,1,10,3,);
B(B_RETURN,,,10,1,12,3,);
        END_NETWORK_BODY
    END_NET_WORK
END_BODY
END_PROGRAM

PROGRAM ADinterMasW3V060
	VAR_EXTERNAL 
		IWsgSystemPreRi2: UINT:=0;
			(*system pressure right 2 SG*)
		IWsgSystemPreLe2: UINT:=0;
			(*system pressure left 2 SG*)
		IWloadSenRiBoom: UINT:=0;
			(*lml right force transmitter main boom*)
		IWangSenTopBoom: UINT:=0;
			(*lml upper angle transmitter main boom*)
		IWloadSenRiLuJib: UINT:=0;
			(*lml right force transmitter luffing jib*)
		IWangSenToLufJib: UINT:=0;
			(*lml upper angle transmitter luffing jib*)
		IWclampSysPress: UINT:=0;
			(*add. system pressure clamping jaw vibrator*)
		IWadWindSpedSen1: UINT:=0;
			(*additional device wind speed sensor main boom*)
		IWsgAngle: UINT:=0;
			(*ad sg limitation angle sensor*)
		IWvibSysPresP1: UINT:=0;
			(*P1 sys.press.vibrator/hammer/drilling/hydr.grab*)
		IWleadAngleX: UINT:=0;
			(*wind speed luffing jib/leader incl. x-axis/grab incl. x-axis *)
		IWleadAngleY: UINT:=0;
			(*press. 2 luff. jib fall back supp/leader incl. y-axis/grab incl. y-axis*)
		IWvibAdFrequency: UINT:=0;
			(*vibrator add. device frequency sensor *)
		IWvibAdAmplitude: UINT:=0;
			(*vibrator add. device amplitude sensor*)
		IWhamExtSignal: UINT:=0;
			(*ext. hammer sig./lml force trans. main boom le, 2nd sig.*)
		IWvibSysPressDir: UINT:=0;
			(*system pressure vibrator/hammer pump direct*)
		IWec115_01: UINT:=0;
			(*external control master modul 115*)
		IWec115_02: UINT:=0;
			(*external control master modul 115*)
		IWec115_03: UINT:=0;
			(*external control master modul 115*)
		IWec115_04: UINT:=0;
			(*external control master modul 115*)
		IWec115_05: UINT:=0;
			(*external control master modul 115*)
		IWec115_06: UINT:=0;
			(*external control master modul 115*)
		IWec115_07: UINT:=0;
			(*external control master modul 115*)
		IWec115_08: UINT:=0;
			(*external control master modul 115*)
		IWec115_09: UINT:=0;
			(*external control master modul 115*)
		IWec115_10: UINT:=0;
			(*external control master modul 115*)
		IWec115_11: UINT:=0;
			(*external control master modul 115*)
		IWec115_12: UINT:=0;
			(*external control master modul 115*)
		IWec115_13: UINT:=0;
			(*external control master modul 115*)
		IWec115_14: UINT:=0;
			(*external control master modul 115*)
		IWec115_15: UINT:=0;
			(*external control master modul 115*)
		IWec115_16: UINT:=0;
			(*external control master modul 115*)
		QWhosePressContr: UINT;
			(*add. hose winch pressure control*)
		QWhoseWinchLift: UINT;
			(*add. hose winch lifting*)
		QWhoseWinchLower: UINT;
			(*add. hose winch lowering*)
		QWgrabSlewing: UINT;
			(*add.  volume control  grap slewing*)
		QWddLeftP2: UINT;
			(*P2 feed act cyl. dn / drilling drive left*)
		QWddRightP2: UINT;
			(*P2 feed act cyl. up / drill.dr.right / vibrator / hammer*)
		QWgrabPressContr: UINT:=0;
			(*grab pressure control *)
		QWddLeftP1: UINT;
			(*P1 drilling drive left/hydr.grab close*)
		QWddRightP1: UINT;
			(*P1 drilling drive right/hammer/vibrator/hydr.grab open*)
		QWec115_01: UINT:=0;
			(*external control master modul 115*)
		QWec115_02: UINT:=0;
			(*external control master modul 115*)
		QWec115_03: UINT:=0;
			(*external control master modul 115*)
		QWec115_04: UINT:=0;
			(*external control master modul 115*)
		QWec115_05: UINT:=0;
			(*external control master modul 115*)
		QWec115_06: UINT:=0;
			(*external control master modul 115*)
		QWec115_07: UINT:=0;
			(*external control master modul 115*)
		QWec115_08: UINT:=0;
			(*external control master modul 115*)
		QWec115_09: UINT:=0;
			(*external control master modul 115*)
		QWec115_10: UINT:=0;
			(*external control master modul 115*)
		QWec115_11: UINT:=0;
			(*external control master modul 115*)
		QWec115_12: UINT:=0;
			(*external control master modul 115*)
		QWec115_13: UINT:=0;
			(*external control master modul 115*)
		QWec115_14: UINT:=0;
			(*external control master modul 115*)
		QWec115_15: UINT:=0;
			(*external control master modul 115*)
		QWec115_16: UINT:=0;
			(*external control master modul 115*)
		MXecM115Timeout: BOOL:=FALSE;
			(*external control module 109 timeout*)
		MXecM115isActive: BOOL:=FALSE;
			(*external control module 115 is active*)
		MXecModulsActive: BOOL:=FALSE;
			(*external control module are active*)
		MXecOutputTransm: BOOL:=FALSE;
			(*external control output transmit*)
		MWludvExtPreCont: UINT:=0;
			(*LUDV pump external pressure signal in mA*)
	END_VAR
	VAR_EXTERNAL RETAIN
		MXenExtOperMode: BOOL:=FALSE;
			(*enable external operation mode*)
	END_VAR
	VAR 
		ModuleState1: ModuleState;
		LXecM115Timeout: BOOL:=FALSE;
		Dummy: UINT:=0;
	END_VAR
'FBD'
BODY
    WORKSPACE
        NETWORK_LIST_TYPE := NWTYPEFBD ;
        ACTIVE_NETWORK := 0 ;
    END_WORKSPACE
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_FB,ModuleState,ModuleState1,10,3,22,9,);
B(B_VARIN,,3,8,4,10,6,);
B(B_VARIN,,115,8,5,10,7,);
B(B_VARIN,,MXenExtOperMode,8,6,10,8,);
B(B_VARIN,,FALSE,8,7,10,9,);
B(B_VAROUT,,LXecM115Timeout,22,4,24,6,);
B(B_VAROUT,,MXecM115isActive,22,5,24,7,);
B(B_COMMENT,,activate module 115 for inputs/outputs transmission with external control,2,1,29,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_VARIN,,IWsgSystemPreRi2,10,3,12,5,);
B(B_VAROUT,,QWec115_01,12,3,14,5,);
B(B_COMMENT,,transmission of analog input signals,2,1,18,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VAROUT,,QWec115_02,12,1,14,3,);
B(B_VARIN,,IWsgSystemPreLe2,10,1,12,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VAROUT,,QWec115_03,12,1,14,3,);
B(B_VARIN,,IWloadSenRiBoom,10,1,12,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VAROUT,,QWec115_04,12,1,14,3,);
B(B_VARIN,,IWangSenTopBoom,10,1,12,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VAROUT,,QWec115_05,12,1,14,3,);
B(B_VARIN,,IWloadSenRiLuJib,10,1,12,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VAROUT,,QWec115_06,12,1,14,3,);
B(B_VARIN,,IWangSenToLufJib,10,1,12,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VAROUT,,QWec115_07,12,1,14,3,);
B(B_VARIN,,IWleadAngleX,10,1,12,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VAROUT,,QWec115_08,12,1,14,3,);
B(B_VARIN,,IWleadAngleY,10,1,12,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VAROUT,,QWec115_09,12,1,14,3,);
B(B_VARIN,,IWclampSysPress,10,1,12,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VAROUT,,QWec115_10,12,1,14,3,);
B(B_VARIN,,IWadWindSpedSen1,10,1,12,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VAROUT,,QWec115_11,12,1,14,3,);
B(B_VARIN,,IWsgAngle,10,1,12,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VAROUT,,QWec115_12,12,1,14,3,);
B(B_VARIN,,IWvibAdFrequency,10,1,12,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VAROUT,,QWec115_13,12,1,14,3,);
B(B_VARIN,,IWvibAdAmplitude,10,1,12,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VAROUT,,QWec115_14,12,1,14,3,);
B(B_VARIN,,IWhamExtSignal,10,1,12,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VAROUT,,QWec115_15,12,1,14,3,);
B(B_VARIN,,IWvibSysPresP1,10,1,12,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VAROUT,,QWec115_16,12,1,14,3,);
B(B_VARIN,,IWvibSysPressDir,10,1,12,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_RETURN,,,12,3,14,5,N);
B(B_VARIN,,MXenExtOperMode,10,3,12,5,);
B(B_COMMENT,,return~ if external operation is not enabled,2,1,18,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_F,@AND-2,,12,3,17,7,);
B(B_VAROUT,,MXecM115Timeout,17,4,19,6,);
B(B_VARIN,,MXecModulsActive,10,4,12,6,);
B(B_VARIN,,LXecM115Timeout,10,5,12,7,);
B(B_COMMENT,,generate timeout error,1,1,27,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 84 ;
        NETWORK_BODY
B(B_F,sel,,14,3,19,8,);
B(B_VAROUT,,Dummy,19,4,21,6,);
B(B_F,sel,,14,8,19,13,);
B(B_F,sel,,14,13,19,18,);
B(B_F,sel,,14,18,19,23,);
B(B_F,sel,,14,23,19,28,);
B(B_F,sel,,14,28,19,33,);
B(B_F,sel,,14,33,19,38,);
B(B_F,sel,,14,38,19,43,);
B(B_F,sel,,14,43,19,48,);
B(B_F,sel,,14,48,19,53,);
B(B_F,sel,,14,53,19,58,);
B(B_F,sel,,14,58,19,63,);
B(B_F,sel,,14,68,19,73,);
B(B_F,sel,,14,73,19,78,);
B(B_VARIN,,IWec115_01,9,6,11,8,);
B(B_VARIN,,MXecOutputTransm,11,4,13,6,);
B(B_VARIN,,0,10,5,12,7,);
B(B_VARIN,,IWec115_02,9,11,11,13,);
B(B_VARIN,,IWec115_03,9,16,11,18,);
B(B_VARIN,,IWec115_04,9,21,11,23,);
B(B_VARIN,,IWec115_05,9,26,11,28,);
B(B_VARIN,,IWec115_06,9,31,11,33,);
B(B_VARIN,,IWec115_07,9,36,11,38,);
B(B_VARIN,,IWec115_08,9,41,11,43,);
B(B_VARIN,,IWec115_09,9,46,11,48,);
B(B_VARIN,,IWec115_10,9,51,11,53,);
B(B_VARIN,,IWec115_11,9,56,11,58,);
B(B_VARIN,,IWec115_12,9,61,11,63,);
B(B_VARIN,,IWec115_13,9,66,11,68,);
B(B_VARIN,,IWec115_14,9,71,11,73,);
B(B_VARIN,,IWec115_15,9,76,11,78,);
B(B_VARIN,,IWec115_16,12,81,14,83,);
B(B_VAROUT,,Dummy,19,9,21,11,);
B(B_VAROUT,,Dummy,19,14,21,16,);
B(B_VAROUT,,QWgrabPressContr,19,69,21,71,);
B(B_VAROUT,,QWgrabSlewing,19,54,21,56,);
B(B_VAROUT,,QWhoseWinchLower,19,49,21,51,);
B(B_VAROUT,,QWhoseWinchLift,19,44,21,46,);
B(B_VAROUT,,QWhosePressContr,19,39,21,41,);
B(B_VAROUT,,Dummy,19,34,21,36,);
B(B_VAROUT,,MWludvExtPreCont,19,29,21,31,);
B(B_VAROUT,,Dummy,19,24,21,26,);
B(B_VAROUT,,Dummy,19,19,21,21,);
B(B_COMMENT,,transmission of analog output signals,2,1,18,2,);
B(B_F,sel,,14,63,19,68,);
B(B_F,sel,,14,78,19,83,);
B(B_VAROUT,,QWddLeftP2,19,59,21,61,);
B(B_VAROUT,,QWddRightP2,19,64,21,66,);
B(B_VAROUT,,QWddLeftP1,19,74,21,76,);
B(B_VAROUT,,QWddRightP1,19,79,21,81,);
L(13,5,14,5);
L(13,5,13,80);
L(13,75,14,75);
L(13,70,14,70);
L(13,60,14,60);
L(13,55,14,55);
L(13,50,14,50);
L(13,45,14,45);
L(13,40,14,40);
L(13,35,14,35);
L(13,30,14,30);
L(13,25,14,25);
L(13,20,14,20);
L(13,15,14,15);
L(13,10,14,10);
L(12,6,14,6);
L(12,6,12,81);
L(12,81,14,81);
L(12,76,14,76);
L(12,71,14,71);
L(12,66,14,66);
L(12,61,14,61);
L(12,56,14,56);
L(12,51,14,51);
L(12,46,14,46);
L(12,41,14,41);
L(12,36,14,36);
L(12,31,14,31);
L(12,26,14,26);
L(12,21,14,21);
L(12,16,14,16);
L(12,11,14,11);
L(11,7,14,7);
L(11,17,14,17);
L(11,12,14,12);
L(11,22,14,22);
L(11,27,14,27);
L(11,37,14,37);
L(11,42,14,42);
L(11,47,14,47);
L(11,52,14,52);
L(11,57,14,57);
L(11,62,14,62);
L(11,67,14,67);
L(11,72,14,72);
L(11,77,14,77);
L(11,32,14,32);
L(13,65,14,65);
L(13,80,14,80);
        END_NETWORK_BODY
    END_NET_WORK
END_BODY
END_PROGRAM

PROGRAM ADinterMasW4V060
	VAR_EXTERNAL 
		IWengineSpeed: INT;
			(*engine DC5 engine speed from pickup U/min*)
		IWhyrdOilTemper: INT;
			(*engine DC5 hydraulic oil temperature [°C]*)
		IWactEngTorque: INT;
			(*engine DC5 actual engine torque [Nm]*)
		IWengActSpeed: INT:=0;
			(*engine PLD actual speed [U/min]*)
		IWengActTorque: INT:=0;
			(*engine PLD actual torque [1/10 %]*)
		IWhyrdOilTemp: INT:=0;
			(*engine PLD hydraulic oil temperature [°C]*)
		IWec116_01: UINT:=0;
			(*external control master modul 116*)
		IWec116_02: UINT:=0;
			(*external control master modul 116*)
		IWec116_03: UINT:=0;
			(*external control master modul 116*)
		IWec116_04: UINT:=0;
			(*external control master modul 116*)
		IWec116_05: UINT:=0;
			(*external control master modul 116*)
		IWec116_06: UINT:=0;
			(*external control master modul 116*)
		IWec116_07: UINT:=0;
			(*external control master modul 116*)
		IWec116_08: UINT:=0;
			(*external control master modul 116*)
		IWec116_09: UINT:=0;
			(*external control master modul 116*)
		IWec116_10: UINT:=0;
			(*external control master modul 116*)
		IWec116_11: UINT:=0;
			(*external control master modul 116*)
		IWec116_12: UINT:=0;
			(*external control master modul 116*)
		IWec116_13: UINT:=0;
			(*external control master modul 116*)
		IWec116_14: UINT:=0;
			(*external control master modul 116*)
		IWec116_15: UINT:=0;
			(*external control master modul 116*)
		IWec116_16: UINT:=0;
			(*external control master modul 116*)
		QWec116_01: INT:=0;
			(*external control master modul 116*)
		QWec116_02: INT:=0;
			(*external control master modul 116*)
		QWec116_03: INT:=0;
			(*external control master modul 116*)
		QWec116_04: INT:=0;
			(*external control master modul 116*)
		QWec116_05: INT:=0;
			(*external control master modul 116*)
		QWec116_06: INT:=0;
			(*external control master modul 116*)
		QWec116_07: INT:=0;
			(*external control master modul 116*)
		QWec116_08: INT:=0;
			(*external control master modul 116*)
		QWec116_09: INT:=0;
			(*external control master modul 116*)
		QWec116_10: INT:=0;
			(*external control master modul 116*)
		QWec116_11: INT:=0;
			(*external control master modul 116*)
		QWec116_12: INT:=0;
			(*external control master modul 116*)
		QWec116_13: INT:=0;
			(*external control master modul 116*)
		QWec116_14: INT:=0;
			(*external control master modul 116*)
		QWec116_15: INT:=0;
			(*external control master modul 116*)
		QWec116_16: INT:=0;
			(*external control master modul 116*)
		MXecM116Timeout: BOOL:=FALSE;
			(*external control module 109 timeout*)
		MXecM116isActive: BOOL:=FALSE;
			(*external control module 116 is active*)
		MXecModulsActive: BOOL:=FALSE;
			(*external control module are active*)
		MXecOutputTransm: BOOL:=FALSE;
			(*external control output transmit*)
		MXengModPLDactiv: BOOL:=FALSE;
			(*engine modul PLD activ*)
		MDratedEngSpeed: REAL:=0.0;
			(*rated engine speed in rpm*)
		MDpowerLimReduct: REAL:=0.0;
			(*maximum engine power regulator reduction to x [%]*)
		MDlmlReevingBoom: REAL:=0.0;
			(*lml reeving main boom*)
		MDlmlUtilization: REAL:=0.0;
			(*lml utilization in %*)
		MDlmlRadiusMBoom: REAL:=0.0;
			(*lml load radius main boom in m*)
	END_VAR
	VAR_EXTERNAL RETAIN
		MXenExtOperMode: BOOL:=FALSE;
			(*enable external operation mode*)
	END_VAR
	VAR 
		ModuleState1: ModuleState;
		LXecM116Timeout: BOOL:=FALSE;
		Dummy: UINT:=0;
	END_VAR
'FBD'
BODY
    WORKSPACE
        NETWORK_LIST_TYPE := NWTYPEFBD ;
        ACTIVE_NETWORK := 0 ;
    END_WORKSPACE
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_FB,ModuleState,ModuleState1,11,4,23,10,);
B(B_VARIN,,3,9,5,11,7,);
B(B_VARIN,,116,9,6,11,8,);
B(B_VARIN,,MXenExtOperMode,9,7,11,9,);
B(B_VARIN,,FALSE,9,8,11,10,);
B(B_VAROUT,,LXecM116Timeout,23,5,25,7,);
B(B_VAROUT,,MXecM116isActive,23,6,25,8,);
B(B_COMMENT,,activate module 116 for inputs/outputs transmission with external control,1,1,28,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_F,sel,,11,3,16,8,);
B(B_VARIN,,MXengModPLDactiv,9,4,11,6,);
B(B_VARIN,,IWengineSpeed,9,5,11,7,);
B(B_VARIN,,IWengActSpeed,9,6,11,8,);
B(B_VAROUT,,QWec116_01,16,4,18,6,);
B(B_COMMENT,,transmission of analog input signals,1,1,17,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_F,sel,,11,1,16,6,);
B(B_VARIN,,MXengModPLDactiv,9,2,11,4,);
B(B_VAROUT,,QWec116_02,16,2,18,4,);
B(B_VARIN,,IWhyrdOilTemper,9,3,11,5,);
B(B_VARIN,,IWhyrdOilTemp,9,4,11,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 5 ;
        NETWORK_BODY
B(B_VARIN,,MDratedEngSpeed,9,2,11,4,);
B(B_F,real_to_int,,11,1,21,4,);
B(B_VAROUT,,QWec116_03,21,2,23,4,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_F,sel,,11,1,16,6,);
B(B_VARIN,,MXengModPLDactiv,9,2,11,4,);
B(B_VAROUT,,QWec116_04,16,2,18,4,);
B(B_VARIN,,IWactEngTorque,9,3,11,5,);
B(B_VARIN,,IWengActTorque,9,4,11,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_COMMENT,,power regulator signal in permille (1/1000),1,1,27,2,);
B(B_F,@MUL-2,,11,4,16,8,);
B(B_VARIN,,MDpowerLimReduct,9,5,11,7,);
B(B_VARIN,,1000.0,9,6,11,8,);
B(B_F,real_to_int,,16,4,26,7,);
B(B_VAROUT,,QWec116_05,26,5,28,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 5 ;
        NETWORK_BODY
B(B_VARIN,,MDlmlReevingBoom,9,2,11,4,);
B(B_F,real_to_int,,11,1,21,4,);
B(B_VAROUT,,QWec116_06,21,2,23,4,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_VARIN,,MDlmlUtilization,9,4,11,6,);
B(B_VAROUT,,QWec116_07,26,4,28,6,);
B(B_VARIN,,10.0,9,5,11,7,);
B(B_COMMENT,,utilization in permille (1/1000),1,1,27,2,);
B(B_F,@MUL-2,,11,3,16,7,);
B(B_F,real_to_int,,16,3,26,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_VARIN,,MDlmlRadiusMBoom,9,4,11,6,);
B(B_F,@MUL-2,,11,3,16,7,);
B(B_VARIN,,100.0,9,5,11,7,);
B(B_F,real_to_int,,16,3,26,6,);
B(B_VAROUT,,QWec116_08,26,4,28,6,);
B(B_COMMENT,,radius main boom in cm,1,1,27,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VAROUT,,QWec116_09,11,1,13,3,);
B(B_VARIN,,0,9,1,11,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VAROUT,,QWec116_10,11,1,13,3,);
B(B_VARIN,,0,9,1,11,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VAROUT,,QWec116_11,11,1,13,3,);
B(B_VARIN,,0,9,1,11,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VAROUT,,QWec116_12,11,1,13,3,);
B(B_VARIN,,0,9,1,11,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VAROUT,,QWec116_13,11,1,13,3,);
B(B_VARIN,,0,9,1,11,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VAROUT,,QWec116_14,11,1,13,3,);
B(B_VARIN,,0,9,1,11,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VAROUT,,QWec116_15,11,1,13,3,);
B(B_VARIN,,0,9,1,11,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VAROUT,,QWec116_16,11,1,13,3,);
B(B_VARIN,,0,9,1,11,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_RETURN,,,11,3,13,5,N);
B(B_VARIN,,MXenExtOperMode,9,3,11,5,);
B(B_COMMENT,,return~ if external operation is not enabled,1,1,17,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_F,@AND-2,,12,3,17,7,);
B(B_VAROUT,,MXecM116Timeout,17,4,19,6,);
B(B_VARIN,,MXecModulsActive,10,4,12,6,);
B(B_VARIN,,LXecM116Timeout,10,5,12,7,);
B(B_COMMENT,,generate timeout error,1,1,27,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 99 ;
        NETWORK_BODY
B(B_F,sel,,14,3,19,8,);
B(B_F,sel,,14,9,19,14,);
B(B_F,sel,,14,15,19,20,);
B(B_F,sel,,14,21,19,26,);
B(B_F,sel,,14,27,19,32,);
B(B_F,sel,,14,33,19,38,);
B(B_F,sel,,14,39,19,44,);
B(B_F,sel,,14,45,19,50,);
B(B_F,sel,,14,51,19,56,);
B(B_F,sel,,14,57,19,62,);
B(B_F,sel,,14,63,19,68,);
B(B_F,sel,,14,69,19,74,);
B(B_F,sel,,14,75,19,80,);
B(B_F,sel,,14,81,19,86,);
B(B_F,sel,,14,87,19,92,);
B(B_F,sel,,14,93,19,98,);
B(B_VARIN,,MXecOutputTransm,11,4,13,6,);
B(B_VARIN,,0,10,5,12,7,);
B(B_VARIN,,IWec116_01,9,6,11,8,);
B(B_VARIN,,IWec116_03,9,18,11,20,);
B(B_VARIN,,IWec116_04,9,24,11,26,);
B(B_VARIN,,IWec116_05,9,30,11,32,);
B(B_VARIN,,IWec116_06,9,36,11,38,);
B(B_VARIN,,IWec116_07,9,42,11,44,);
B(B_VARIN,,IWec116_08,9,48,11,50,);
B(B_VARIN,,IWec116_09,9,54,11,56,);
B(B_VARIN,,IWec116_10,9,60,11,62,);
B(B_VARIN,,IWec116_11,9,66,11,68,);
B(B_VARIN,,IWec116_12,9,72,11,74,);
B(B_VARIN,,IWec116_13,9,78,11,80,);
B(B_VARIN,,IWec116_14,9,84,11,86,);
B(B_VARIN,,IWec116_15,9,90,11,92,);
B(B_VARIN,,IWec116_16,12,96,14,98,);
B(B_VARIN,,IWec116_02,9,12,11,14,);
B(B_VAROUT,,Dummy,19,4,21,6,);
B(B_VAROUT,,Dummy,19,16,21,18,);
B(B_VAROUT,,Dummy,19,22,21,24,);
B(B_VAROUT,,Dummy,19,28,21,30,);
B(B_VAROUT,,Dummy,19,34,21,36,);
B(B_VAROUT,,Dummy,19,40,21,42,);
B(B_VAROUT,,Dummy,19,46,21,48,);
B(B_VAROUT,,Dummy,19,52,21,54,);
B(B_VAROUT,,Dummy,19,58,21,60,);
B(B_VAROUT,,Dummy,19,64,21,66,);
B(B_VAROUT,,Dummy,19,70,21,72,);
B(B_VAROUT,,Dummy,19,76,21,78,);
B(B_VAROUT,,Dummy,19,82,21,84,);
B(B_VAROUT,,Dummy,19,88,21,90,);
B(B_VAROUT,,Dummy,19,94,21,96,);
B(B_VAROUT,,Dummy,19,10,21,12,);
B(B_COMMENT,,transmission of analog output signals,2,1,18,2,);
L(13,5,14,5);
L(13,5,13,95);
L(13,95,14,95);
L(13,89,14,89);
L(13,83,14,83);
L(13,77,14,77);
L(13,71,14,71);
L(13,65,14,65);
L(13,59,14,59);
L(13,53,14,53);
L(13,47,14,47);
L(13,41,14,41);
L(13,35,14,35);
L(13,29,14,29);
L(13,23,14,23);
L(13,17,14,17);
L(13,11,14,11);
L(12,6,14,6);
L(12,6,12,96);
L(12,96,14,96);
L(12,90,14,90);
L(12,84,14,84);
L(12,78,14,78);
L(12,72,14,72);
L(12,66,14,66);
L(12,60,14,60);
L(12,54,14,54);
L(12,48,14,48);
L(12,42,14,42);
L(12,36,14,36);
L(12,30,14,30);
L(12,24,14,24);
L(12,18,14,18);
L(12,12,14,12);
L(11,7,14,7);
L(11,19,14,19);
L(11,13,14,13);
L(11,25,14,25);
L(11,31,14,31);
L(11,43,14,43);
L(11,49,14,49);
L(11,55,14,55);
L(11,61,14,61);
L(11,67,14,67);
L(11,73,14,73);
L(11,79,14,79);
L(11,85,14,85);
L(11,91,14,91);
L(11,37,14,37);
        END_NETWORK_BODY
    END_NET_WORK
END_BODY
END_PROGRAM

PROGRAM ADinterMasX1V060
	VAR_EXTERNAL 
		IXriJoyFronTopRi: BOOL:=FALSE;
			(*right joystick push button in front at the top right*)
		IXriJoyFronTopLe: BOOL:=FALSE;
			(*right joystick push button in front at the top left*)
		IXriJoyFronLowRi: BOOL:=FALSE;
			(*right joystick push button in front at the bottom right*)
		IXriJoyFronLowLe: BOOL:=FALSE;
			(*right joystick push button in front at the bottom left*)
		IXriJoyTopRi: BOOL:=FALSE;
			(*right joystick push button at the top right*)
		IXriJoyTopLe: BOOL:=FALSE;
			(*right joystick push button at the top left*)
		IXriJoyJackSwit: BOOL:=FALSE;
			(*right joystick push button jack switch*)
		IXleJoyFronTopRi: BOOL:=FALSE;
			(*left joystick push button in front at the top right*)
		IXleJoyFronTopLe: BOOL:=FALSE;
			(*left joystick push button in front at the top left*)
		IXleJoyFronLowRi: BOOL:=FALSE;
			(*left joystick push button in front at the bottom right*)
		IXleJoyFronLowLe: BOOL:=FALSE;
			(*left joystick push button in front at the bottom left*)
		IXleJoyTopLe: BOOL:=FALSE;
			(*left joystick push button at the top left (horn)*)
		IXleJoyTopRi: BOOL:=FALSE;
			(*left joystick push button at the top right*)
		IXleJoyJackSwit: BOOL:=FALSE;
			(*left joystick push button jack switch*)
		IXenEngineStart: BOOL:=FALSE;
			(*enable engine start*)
		IXentrySwiClosed: BOOL:=FALSE;
			(*entry switch closed*)
		IXassemblyOperat: BOOL:=FALSE;
			(*key switch 1: assembly operation*)
		IXunsecuredFreef: BOOL:=FALSE;
			(*key switch 2: unsecured freefall*)
		IXswitTravelGear: BOOL:=FALSE;
			(*pressure switch travelling gear*)
		IXkeyswBridgeLml: BOOL:=FALSE;
			(*key switch 1: release bridge lml*)
		IXhg2LowerContro: BOOL:=FALSE;
			(*key switch 3: additional device only HG 2 lowering control *)
		IXhg1NoRopeLimit: BOOL:=FALSE;
			(*ad no rope tension limitation HG1*)
		IXhg2NoRopeLimit: BOOL:=FALSE;
			(*ad no rope tension limitation HG2*)
		IXadDynGrouCoHG1: BOOL:=FALSE;
			(*ad dynamic ground compaction HG1*)
		IXadDynGrouCoHG2: BOOL:=FALSE;
			(*ad dynamic ground compaction HG2*)
		IXpreselMooring: BOOL:=FALSE;
			(*preselection mooring operation*)
		IXseleOperatMode: BOOL:=FALSE;
			(*select operation mode*)
		IXremoteControl: BOOL:=FALSE;
			(*remote control activated*)
		IXextPreHammer: BOOL:=FALSE;
			(*ad hammer external preselection*)
		IXrelSlackRopPro: BOOL:=FALSE;
			(*add. grap slack rope protection*)
		IXec109_01: BOOL:=FALSE;
			(*external control master modul 109 *)
		IXec109_02: BOOL:=FALSE;
			(*external control master modul 109*)
		IXec109_03: BOOL:=FALSE;
			(*external control master modul 109*)
		IXec109_04: BOOL:=FALSE;
			(*external control master modul 109*)
		IXec109_05: BOOL:=FALSE;
			(*external control master modul 109*)
		IXec109_06: BOOL:=FALSE;
			(*external control master modul 109*)
		IXec109_07: BOOL:=FALSE;
			(*external control master modul 109*)
		IXec109_08: BOOL:=FALSE;
			(*external control master modul 109*)
		IXec109_09: BOOL:=FALSE;
			(*external control master modul 109*)
		IXec109_10: BOOL:=FALSE;
			(*external control master modul 109*)
		IXec109_11: BOOL:=FALSE;
			(*external control master modul 109*)
		IXec109_12: BOOL:=FALSE;
			(*external control master modul 109*)
		IXec109_13: BOOL:=FALSE;
			(*external control master modul 109*)
		IXec109_14: BOOL:=FALSE;
			(*external control master modul 109*)
		IXec109_15: BOOL:=FALSE;
			(*external control master modul 109*)
		IXec109_16: BOOL:=FALSE;
			(*external control master modul 109*)
		IXec109_17: BOOL:=FALSE;
			(*external control master modul 109*)
		IXec109_18: BOOL:=FALSE;
			(*external control master modul 109*)
		IXec109_19: BOOL:=FALSE;
			(*external control master modul 109*)
		IXec109_20: BOOL:=FALSE;
			(*external control master modul 109*)
		IXec109_21: BOOL:=FALSE;
			(*external control master modul 109*)
		IXec109_22: BOOL:=FALSE;
			(*external control master modul 109*)
		IXec109_23: BOOL:=FALSE;
			(*external control master modul 109*)
		IXec109_24: BOOL:=FALSE;
			(*external control master modul 109*)
		IXec109_25: BOOL:=FALSE;
			(*external control master modul 109*)
		IXec109_26: BOOL:=FALSE;
			(*external control master modul 109*)
		IXec109_27: BOOL:=FALSE;
			(*external control master modul 109*)
		IXec109_28: BOOL:=FALSE;
			(*external control master modul 109*)
		IXec109_29: BOOL:=FALSE;
			(*external control master modul 109*)
		IXec109_30: BOOL:=FALSE;
			(*external control master modul 109*)
		IXec109_31: BOOL:=FALSE;
			(*external control master modul 109*)
		IXec109_32: BOOL:=FALSE;
			(*external control master modul 109*)
		IXec109_33: BOOL:=FALSE;
			(*external control master modul 109*)
		IXec109_34: BOOL:=FALSE;
			(*external control master modul 109*)
		IXec109_35: BOOL:=FALSE;
			(*external control master modul 109*)
		IXec109_36: BOOL:=FALSE;
			(*external control master modul 109*)
		IXec109_37: BOOL:=FALSE;
			(*external control master modul 109*)
		IXec109_38: BOOL:=FALSE;
			(*external control master modul 109*)
		IXec109_39: BOOL:=FALSE;
			(*external control master modul 109*)
		IXec109_40: BOOL:=FALSE;
			(*external control master modul 109*)
		IXec109_41: BOOL:=FALSE;
			(*external control master modul 109*)
		IXec109_42: BOOL:=FALSE;
			(*external control master modul 109*)
		IXec109_43: BOOL:=FALSE;
			(*external control master modul 109*)
		IXec109_44: BOOL:=FALSE;
			(*external control master modul 109*)
		IXec109_45: BOOL:=FALSE;
			(*external control master modul 109*)
		IXec109_46: BOOL:=FALSE;
			(*external control master modul 109*)
		IXec109_47: BOOL:=FALSE;
			(*external control master modul 109*)
		IXec109_48: BOOL:=FALSE;
			(*external control master modul 109*)
		IXec109_49: BOOL:=FALSE;
			(*external control master modul 109*)
		IXec109_50: BOOL:=FALSE;
			(*external control master modul 109*)
		IXec109_51: BOOL:=FALSE;
			(*external control master modul 109*)
		IXec109_52: BOOL:=FALSE;
			(*external control master modul 109*)
		IXec109_53: BOOL:=FALSE;
			(*external control master modul 109*)
		IXec109_54: BOOL:=FALSE;
			(*external control master modul 109*)
		IXec109_55: BOOL:=FALSE;
			(*external control master modul 109*)
		IXec109_56: BOOL:=FALSE;
			(*external control master modul 109*)
		IXec109_57: BOOL:=FALSE;
			(*external control master modul 109*)
		IXec109_58: BOOL:=FALSE;
			(*external control master modul 109*)
		IXec109_59: BOOL:=FALSE;
			(*external control master modul 109*)
		IXec109_60: BOOL:=FALSE;
			(*external control master modul 109*)
		IXec109_61: BOOL:=FALSE;
			(*external control master modul 109*)
		IXec109_62: BOOL:=FALSE;
			(*external control master modul 109*)
		IXec109_63: BOOL:=FALSE;
			(*external control master modul 109*)
		IXec109_64: BOOL:=FALSE;
			(*external control master modul 109*)
		QXclampJawClose: BOOL:=FALSE;
			(*clamping jaw vibrator close*)
		QXgrabOpen: BOOL:=FALSE;
			(*add. grab valve open*)
		QXgrabClose: BOOL:=FALSE;
			(*add. grab close*)
		QXddGearBox: BOOL:=FALSE;
			(*magnet unit: magnetise off/dd gear box*)
		QXddTrimot: BOOL:=FALSE;
			(*magnet unit: magnetise (on/off)/dd trimot*)
		QXexcentDriveIn: BOOL:=FALSE;
			(*excentric drive in*)
		QXexcentDriveOut: BOOL:=FALSE;
			(*excentric drive out *)
		QXcableWinBrake: BOOL:=FALSE;
			(*Z17 cylinder in / brake cable winch*)
		QXclampJawOpen: BOOL:=FALSE;
			(*clamping jaw vibrator open*)
		QXretFlowVibrHam: BOOL:=FALSE;
			(*additional device return flow vibrator hammer*)
		QXrelClampJaw: BOOL:=FALSE;
			(*release clamping jaw vibrator*)
		QXhoseDrumBrakRi: BOOL:=FALSE;
			(*release brake pressure / brake right hose winch LE*)
		QXhoseDrumBrakLe: BOOL:=FALSE;
			(*brake left hose winch LE*)
		QXcableDrumLower: BOOL:=FALSE;
			(*cable drum lowering*)
		QXcableDrumLift: BOOL:=FALSE;
			(*cable drum lifting*)
		QXec109_01: BOOL:=FALSE;
			(*external control master modul 109*)
		QXec109_02: BOOL:=FALSE;
			(*external control master modul 109*)
		QXec109_03: BOOL:=FALSE;
			(*external control master modul 109*)
		QXec109_04: BOOL:=FALSE;
			(*external control master modul 109*)
		QXec109_05: BOOL:=FALSE;
			(*external control master modul 109*)
		QXec109_06: BOOL:=FALSE;
			(*external control master modul 109*)
		QXec109_07: BOOL:=FALSE;
			(*external control master modul 109*)
		QXec109_08: BOOL:=FALSE;
			(*external control master modul 109*)
		QXec109_09: BOOL:=FALSE;
			(*external control master modul 109*)
		QXec109_10: BOOL:=FALSE;
			(*external control master modul 109*)
		QXec109_11: BOOL:=FALSE;
			(*external control master modul 109*)
		QXec109_12: BOOL:=FALSE;
			(*external control master modul 109*)
		QXec109_13: BOOL:=FALSE;
			(*external control master modul 109*)
		QXec109_14: BOOL:=FALSE;
			(*external control master modul 109*)
		QXec109_15: BOOL:=FALSE;
			(*external control master modul 109*)
		QXec109_16: BOOL:=FALSE;
			(*external control master modul 109*)
		QXec109_17: BOOL:=FALSE;
			(*external control master modul 109*)
		QXec109_18: BOOL:=FALSE;
			(*external control master modul 109*)
		QXec109_19: BOOL:=FALSE;
			(*external control master modul 109*)
		QXec109_20: BOOL:=FALSE;
			(*external control master modul 109*)
		QXec109_21: BOOL:=FALSE;
			(*external control master modul 109*)
		QXec109_22: BOOL:=FALSE;
			(*external control master modul 109*)
		QXec109_23: BOOL:=FALSE;
			(*external control master modul 109*)
		QXec109_24: BOOL:=FALSE;
			(*external control master modul 109*)
		QXec109_25: BOOL:=FALSE;
			(*external control master modul 109*)
		QXec109_26: BOOL:=FALSE;
			(*external control master modul 109*)
		QXec109_27: BOOL:=FALSE;
			(*external control master modul 109*)
		QXec109_28: BOOL:=FALSE;
			(*external control master modul 109*)
		QXec109_29: BOOL:=FALSE;
			(*external control master modul 109*)
		QXec109_30: BOOL:=FALSE;
			(*external control master modul 109*)
		QXec109_31: BOOL:=FALSE;
			(*external control master modul 109*)
		QXec109_32: BOOL:=FALSE;
			(*external control master modul 109*)
		QXec109_33: BOOL:=FALSE;
			(*external control master modul 109*)
		QXec109_34: BOOL:=FALSE;
			(*external control master modul 109*)
		QXec109_35: BOOL:=FALSE;
			(*external control master modul 109*)
		QXec109_36: BOOL:=FALSE;
			(*external control master modul 109*)
		QXec109_37: BOOL:=FALSE;
			(*external control master modul 109*)
		QXec109_38: BOOL:=FALSE;
			(*external control master modul 109*)
		QXec109_39: BOOL:=FALSE;
			(*external control master modul 109*)
		QXec109_40: BOOL:=FALSE;
			(*external control master modul 109*)
		QXec109_41: BOOL:=FALSE;
			(*external control master modul 109*)
		QXec109_42: BOOL:=FALSE;
			(*external control master modul 109*)
		QXec109_43: BOOL:=FALSE;
			(*external control master modul 109*)
		QXec109_44: BOOL:=FALSE;
			(*external control master modul 109*)
		QXec109_45: BOOL:=FALSE;
			(*external control master modul 109*)
		QXec109_46: BOOL:=FALSE;
			(*external control master modul 109*)
		QXec109_47: BOOL:=FALSE;
			(*external control master modul 109*)
		QXec109_48: BOOL:=FALSE;
			(*external control master modul 109*)
		QXec109_49: BOOL:=FALSE;
			(*external control master modul 109*)
		QXec109_50: BOOL:=FALSE;
			(*external control master modul 109*)
		QXec109_51: BOOL:=FALSE;
			(*external control master modul 109*)
		QXec109_52: BOOL:=FALSE;
			(*external control master modul 109*)
		QXec109_53: BOOL:=FALSE;
			(*external control master modul 109*)
		QXec109_54: BOOL:=FALSE;
			(*external control master modul 109*)
		QXec109_55: BOOL:=FALSE;
			(*external control master modul 109*)
		QXec109_56: BOOL:=FALSE;
			(*external control master modul 109*)
		QXec109_57: BOOL:=FALSE;
			(*external control master modul 109*)
		QXec109_58: BOOL:=FALSE;
			(*external control master modul 109*)
		QXec109_59: BOOL:=FALSE;
			(*external control master modul 109*)
		QXec109_60: BOOL:=FALSE;
			(*external control master modul 109*)
		QXec109_61: BOOL:=FALSE;
			(*external control master modul 109*)
		QXec109_62: BOOL:=FALSE;
			(*external control master modul 109*)
		QXec109_63: BOOL:=FALSE;
			(*external control master modul 109*)
		QXec109_64: BOOL:=FALSE;
			(*external control master modul 109*)
		MXecM109Timeout: BOOL:=FALSE;
			(*external control module 109 timeout*)
		MXecM110Timeout: BOOL:=FALSE;
			(*external control module 109 timeout*)
		MXecM111Timeout: BOOL:=FALSE;
			(*external control module 109 timeout*)
		MXecM113Timeout: BOOL:=FALSE;
			(*external control module 109 timeout*)
		MXecM114Timeout: BOOL:=FALSE;
			(*external control module 109 timeout*)
		MXecM115Timeout: BOOL:=FALSE;
			(*external control module 109 timeout*)
		MXecM116Timeout: BOOL:=FALSE;
			(*external control module 109 timeout*)
		MXecM124Timeout: BOOL:=FALSE;
			(*external control module 109 timeout*)
		MXecM109isActive: BOOL:=FALSE;
			(*external control module 109 is active*)
		MXecM110isActive: BOOL:=FALSE;
			(*external control module 110 is active*)
		MXecM111isActive: BOOL:=FALSE;
			(*external control module 111 is active*)
		MXecM113isActive: BOOL:=FALSE;
			(*external control module 113 is active*)
		MXecM114isActive: BOOL:=FALSE;
			(*external control module 114 is active*)
		MXecM115isActive: BOOL:=FALSE;
			(*external control module 115 is active*)
		MXecM116isActive: BOOL:=FALSE;
			(*external control module 116 is active*)
		MXecM124isActive: BOOL:=FALSE;
			(*external control module 124 is active*)
		MXecModulsActive: BOOL:=FALSE;
			(*external control module are active*)
		MXecComTimeout: BOOL:=FALSE;
			(*external control communication timeout*)
		MXecOutputTransm: BOOL:=FALSE;
			(*external control output transmit*)
		MXecWatchdogBit: BOOL:=FALSE;
			(*external control watchdog bit*)
		MXecWatchdogFB: BOOL:=FALSE;
			(*external control watchdog feedback*)
		MXecWatchdogErr: BOOL:=FALSE;
			(*external control watchdog error*)
		MXclampWorking: BOOL:=FALSE;
			(*clamping jaw working*)
		MXexDrWorking: BOOL:=FALSE;
			(*excentric drive working*)
		MXecRelAddPump: BOOL:=FALSE;
			(*external control release add pump *)
		MXecConnectErr: BOOL:=FALSE;
			(*external control connection error *)
	END_VAR
	VAR_EXTERNAL CONSTANT
		MSG_ERROR: UINT:=0;
	END_VAR
	VAR_EXTERNAL RETAIN
		MXenExtOperMode: BOOL:=FALSE;
			(*enable external operation mode*)
	END_VAR
	VAR_EXTERNAL CONSTANT RETAIN
		CXadExtOperMode: BOOL:=FALSE;
			(*additional external operation mode*)
		CXecBaudrateDire: BOOL:=FALSE;
			(*external control start with adjusted baudrate directly*)
		CWecMaxBaudRate: UINT:=0;
			(*external control maximum baudrate*)
		CWecRXspareTime: UINT:=0;
			(*external control RX spare time [ms]*)
	END_VAR
	VAR 
		ModuleState1: ModuleState;
		Message1: MsgUDintUDint;
		Message2: MsgUDintUDint;
		RS1: RS;
		RS2: RS;
		RS3: RS;
		RS4: RS;
		TON1: TON;
		Dummy: BOOL:=FALSE;
		LXinitOk: BOOL:=FALSE;
		LXecM109Timeout: BOOL:=FALSE;
		LDwatchTime: REAL:=0.0;
		CorrValue_Bool1: CorrValue_Bool;
		CorrValue_Bool2: CorrValue_Bool;
		CorrValue_UInt1: CorrValue_UInt;
		CorrValue_UInt2: CorrValue_UInt;
	END_VAR
'FBD'
BODY
    WORKSPACE
        NETWORK_LIST_TYPE := NWTYPEFBD ;
        ACTIVE_NETWORK := 0 ;
    END_WORKSPACE
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_VARIN,,LXinitOk,9,4,11,6,);
B(B_COMMENT,,init first time,1,1,27,2,);
B(B_F,not,,11,3,16,6,);
B(B_JUMP,,init,16,4,18,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_FB,ModuleState,ModuleState1,10,3,22,9,);
B(B_VARIN,,3,8,4,10,6,);
B(B_VARIN,,109,8,5,10,7,);
B(B_VARIN,,MXenExtOperMode,8,6,10,8,);
B(B_VARIN,,FALSE,8,7,10,9,);
B(B_VAROUT,,LXecM109Timeout,22,4,24,6,);
B(B_VAROUT,,MXecM109isActive,22,5,24,7,);
B(B_COMMENT,,activate module 109 for inputs/outputs transmission with external control,2,1,29,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_VARIN,,IXriJoyFronTopRi,11,3,13,5,);
B(B_VAROUT,,QXec109_01,13,3,15,5,);
B(B_COMMENT,,transmission of digital input signals,2,1,18,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,IXriJoyFronTopLe,11,1,13,3,);
B(B_VAROUT,,QXec109_02,13,1,15,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,IXriJoyFronLowRi,11,1,13,3,);
B(B_VAROUT,,QXec109_03,13,1,15,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,IXriJoyFronLowLe,11,1,13,3,);
B(B_VAROUT,,QXec109_04,13,1,15,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,IXriJoyTopRi,11,1,13,3,);
B(B_VAROUT,,QXec109_05,13,1,15,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,IXriJoyTopLe,11,1,13,3,);
B(B_VAROUT,,QXec109_06,13,1,15,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,IXriJoyJackSwit,11,1,13,3,);
B(B_VAROUT,,QXec109_07,13,1,15,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,FALSE,11,1,13,3,);
B(B_VAROUT,,QXec109_08,13,1,15,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,IXleJoyFronTopRi,11,1,13,3,);
B(B_VAROUT,,QXec109_09,13,1,15,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,IXleJoyFronTopLe,11,1,13,3,);
B(B_VAROUT,,QXec109_10,13,1,15,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,IXleJoyFronLowRi,11,1,13,3,);
B(B_VAROUT,,QXec109_11,13,1,15,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,IXleJoyFronLowLe,11,1,13,3,);
B(B_VAROUT,,QXec109_12,13,1,15,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VAROUT,,QXec109_13,13,1,15,3,);
B(B_VARIN,,IXleJoyTopRi,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VAROUT,,QXec109_14,13,1,15,3,);
B(B_VARIN,,IXleJoyTopLe,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,IXleJoyJackSwit,11,1,13,3,);
B(B_VAROUT,,QXec109_15,13,1,15,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,FALSE,11,1,13,3,);
B(B_VAROUT,,QXec109_16,13,1,15,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,FALSE,11,1,13,3,);
B(B_VAROUT,,QXec109_17,13,1,15,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,FALSE,11,1,13,3,);
B(B_VAROUT,,QXec109_18,13,1,15,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,FALSE,11,1,13,3,);
B(B_VAROUT,,QXec109_19,13,1,15,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,FALSE,11,1,13,3,);
B(B_VAROUT,,QXec109_20,13,1,15,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,FALSE,11,1,13,3,);
B(B_VAROUT,,QXec109_21,13,1,15,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,FALSE,11,1,13,3,);
B(B_VAROUT,,QXec109_22,13,1,15,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,FALSE,11,1,13,3,);
B(B_VAROUT,,QXec109_23,13,1,15,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,FALSE,11,1,13,3,);
B(B_VAROUT,,QXec109_24,13,1,15,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,FALSE,11,1,13,3,);
B(B_VAROUT,,QXec109_25,13,1,15,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,FALSE,11,1,13,3,);
B(B_VAROUT,,QXec109_26,13,1,15,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,FALSE,11,1,13,3,);
B(B_VAROUT,,QXec109_27,13,1,15,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,FALSE,11,1,13,3,);
B(B_VAROUT,,QXec109_28,13,1,15,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,FALSE,11,1,13,3,);
B(B_VAROUT,,QXec109_29,13,1,15,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,FALSE,11,1,13,3,);
B(B_VAROUT,,QXec109_30,13,1,15,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,FALSE,11,1,13,3,);
B(B_VAROUT,,QXec109_31,13,1,15,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,FALSE,11,1,13,3,);
B(B_VAROUT,,QXec109_32,13,1,15,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,FALSE,11,1,13,3,);
B(B_VAROUT,,QXec109_33,13,1,15,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,FALSE,11,1,13,3,);
B(B_VAROUT,,QXec109_34,13,1,15,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,FALSE,11,1,13,3,);
B(B_VAROUT,,QXec109_35,13,1,15,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,FALSE,11,1,13,3,);
B(B_VAROUT,,QXec109_36,13,1,15,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,FALSE,11,1,13,3,);
B(B_VAROUT,,QXec109_37,13,1,15,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,FALSE,11,1,13,3,);
B(B_VAROUT,,QXec109_38,13,1,15,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,FALSE,11,1,13,3,);
B(B_VAROUT,,QXec109_39,13,1,15,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,FALSE,11,1,13,3,);
B(B_VAROUT,,QXec109_40,13,1,15,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,FALSE,11,1,13,3,);
B(B_VAROUT,,QXec109_41,13,1,15,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,FALSE,11,1,13,3,);
B(B_VAROUT,,QXec109_42,13,1,15,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,FALSE,11,1,13,3,);
B(B_VAROUT,,QXec109_43,13,1,15,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,FALSE,11,1,13,3,);
B(B_VAROUT,,QXec109_44,13,1,15,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,FALSE,11,1,13,3,);
B(B_VAROUT,,QXec109_45,13,1,15,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,FALSE,11,1,13,3,);
B(B_VAROUT,,QXec109_46,13,1,15,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,FALSE,11,1,13,3,);
B(B_VAROUT,,QXec109_47,13,1,15,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,FALSE,11,1,13,3,);
B(B_VAROUT,,QXec109_48,13,1,15,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,IXenEngineStart,11,1,13,3,);
B(B_VAROUT,,QXec109_49,13,1,15,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,IXentrySwiClosed,11,1,13,3,);
B(B_VAROUT,,QXec109_50,13,1,15,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,IXassemblyOperat,11,1,13,3,);
B(B_VAROUT,,QXec109_51,13,1,15,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,IXunsecuredFreef,11,1,13,3,);
B(B_VAROUT,,QXec109_52,13,1,15,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,IXswitTravelGear,11,1,13,3,);
B(B_VAROUT,,QXec109_53,13,1,15,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,IXkeyswBridgeLml,11,1,13,3,);
B(B_VAROUT,,QXec109_54,13,1,15,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,IXhg2LowerContro,11,1,13,3,);
B(B_VAROUT,,QXec109_55,13,1,15,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,IXhg1NoRopeLimit,11,1,13,3,);
B(B_VAROUT,,QXec109_56,13,1,15,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,IXhg2NoRopeLimit,11,1,13,3,);
B(B_VAROUT,,QXec109_57,13,1,15,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,IXadDynGrouCoHG1,11,1,13,3,);
B(B_VAROUT,,QXec109_58,13,1,15,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,IXadDynGrouCoHG2,11,1,13,3,);
B(B_VAROUT,,QXec109_59,13,1,15,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,IXseleOperatMode,11,1,13,3,);
B(B_VAROUT,,QXec109_60,13,1,15,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,IXpreselMooring,11,1,13,3,);
B(B_VAROUT,,QXec109_61,13,1,15,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,IXremoteControl,11,1,13,3,);
B(B_VAROUT,,QXec109_62,13,1,15,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,IXextPreHammer,11,1,13,3,);
B(B_VAROUT,,QXec109_63,13,1,15,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,IXrelSlackRopPro,11,1,13,3,);
B(B_VAROUT,,QXec109_64,13,1,15,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_RETURN,,,13,3,15,5,N);
B(B_VARIN,,MXenExtOperMode,11,3,13,5,);
B(B_COMMENT,,return~ if external operation is not enabled,1,1,27,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 18 ;
        NETWORK_BODY
B(B_VARIN,,MXecM109isActive,11,4,13,6,);
B(B_FB,RS,RS1,19,11,24,15,);
B(B_VARIN,,FALSE,17,13,19,15,);
B(B_F,@AND-2,,25,11,30,15,);
B(B_VAROUT,,MXecM109Timeout,30,12,32,14,);
B(B_VARIN,,LXecM109Timeout,23,15,25,17,);
B(B_VAROUT,,MXecModulsActive,25,9,27,11,);
B(B_VARIN,,MXecM111isActive,11,6,13,8,);
B(B_VARIN,,TRUE,11,7,13,9,);
B(B_VARIN,,MXecM113isActive,11,8,13,10,);
B(B_VARIN,,MXecM114isActive,11,9,13,11,);
B(B_VARIN,,MXecM115isActive,11,10,13,12,);
B(B_VARIN,,MXecM116isActive,11,11,13,13,);
B(B_VARIN,,MXecM124isActive,11,12,13,14,);
B(B_F,@AND-9,,13,3,18,14,);
B(B_VARIN,,MXecM110isActive,11,5,13,7,);
B(B_COMMENT,,generate timeout error,1,1,27,2,);
B(B_COMMENT,,sobald Module das erste mal aktiv sind~ wird timeout gechecked. ,22,4,47,5,);
L(24,13,25,13);
L(25,14,25,16);
L(25,10,25,13);
L(19,5,19,13);
L(18,5,19,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_COMMENT,,generate connection error ,1,1,27,2,);
B(B_VARIN,,MXenExtOperMode,11,4,13,6,);
B(B_VARIN,,MXecModulsActive,11,5,13,7,);
B(B_F,@AND-2,,13,3,18,7,0N);
B(B_VAROUT,,MXecConnectErr,18,4,20,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_COMMENT,,generate watchdog error ,1,1,27,2,);
B(B_VARIN,,t#100s,24,9,26,11,);
B(B_FB,TON,TON1,26,7,31,11,);
B(B_F,time_to_real,,32,8,43,11,);
B(B_F,sel,,45,4,50,9,);
B(B_VAROUT,,LDwatchTime,50,5,52,7,);
B(B_VARIN,,LDwatchTime,43,6,45,8,);
B(B_F,@NE,,13,5,18,9,);
B(B_VARIN,,MXecWatchdogBit,11,6,13,8,);
B(B_VARIN,,MXecWatchdogFB,11,7,13,9,);
B(B_F,@AND-2,,19,4,24,8,);
B(B_VARIN,,MXecModulsActive,17,3,19,5,);
B(B_COMMENT,,sobald Module das erste mal aktiv sind~ wird watchdog ^gechecked,38,1,63,2,);
L(25,9,26,9);
L(31,10,32,10);
L(24,6,45,6);
L(25,6,25,9);
L(44,8,45,8);
L(44,8,44,10);
L(43,10,44,10);
L(19,4,19,6);
L(18,7,19,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_F,@GT-2,,13,1,18,5,);
B(B_VARIN,,LDwatchTime,11,2,13,4,);
B(B_VARIN,,300.0,11,3,13,5,);
B(B_VAROUT,,MXecWatchdogErr,18,2,20,4,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 15 ;
        NETWORK_BODY
B(B_F,@AND-2,,20,3,25,7,N);
B(B_F,@AND-2,,20,8,25,12,);
B(B_F,@EQ-2,,13,9,18,13,);
B(B_FB,RS,RS2,27,3,32,7,);
B(B_F,@OR-2,,27,7,32,11,);
B(B_F,sel,,34,9,39,14,);
B(B_VARIN,,LDwatchTime,32,11,34,13,);
B(B_VAROUT,,LDwatchTime,39,10,41,12,);
B(B_VARIN,,0.0,32,12,34,14,);
B(B_VARIN,,MXecWatchdogBit,11,10,13,12,);
B(B_VARIN,,MXecWatchdogBit,17,4,19,6,);
B(B_VARIN,,MXecWatchdogFB,11,11,13,13,);
B(B_VAROUT,,MXecWatchdogBit,32,4,34,6,);
B(B_COMMENT,,toggle bit for watchdog error,1,1,26,2,);
L(19,5,19,10);
L(19,10,20,10);
L(19,5,20,5);
L(18,6,18,11);
L(18,11,20,11);
L(18,6,20,6);
L(25,5,27,5);
L(26,6,27,6);
L(25,10,27,10);
L(26,6,26,10);
L(25,9,27,9);
L(25,5,25,9);
L(32,9,33,9);
L(33,9,33,11);
L(33,11,34,11);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_COMMENT,,set message when watchdog errror occured,1,1,27,2,);
B(B_VARIN,,MXecWatchdogErr,11,6,13,8,);
B(B_FB,MsgUDintUDint,Message1,13,4,23,11,);
B(B_VARIN,,620,11,5,13,7,);
B(B_VARIN,,MSG_ERROR,11,7,13,9,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 16 ;
        NETWORK_BODY
B(B_COMMENT,,set message when modul is in timeout state,1,1,27,2,);
B(B_FB,MsgUDintUDint,Message2,25,4,35,11,);
B(B_VARIN,,609,23,5,25,7,);
B(B_VARIN,,MSG_ERROR,23,7,25,9,);
B(B_F,@OR-8,,13,5,18,15,);
B(B_VARIN,,MXecM109Timeout,11,6,13,8,);
B(B_VARIN,,MXecM110Timeout,11,7,13,9,);
B(B_VARIN,,MXecM114Timeout,11,10,13,12,);
B(B_VARIN,,MXecM115Timeout,11,11,13,13,);
B(B_VARIN,,MXecM111Timeout,11,8,13,10,);
B(B_VARIN,,MXecM113Timeout,11,9,13,11,);
B(B_VARIN,,MXecM116Timeout,11,12,13,14,);
B(B_VARIN,,MXecM124Timeout,11,13,13,15,);
B(B_VAROUT,,MXecComTimeout,19,2,21,4,);
L(18,7,25,7);
L(19,3,19,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_F,@AND-2,,19,3,24,7,0N);
B(B_FB,RS,RS3,19,7,24,11,);
B(B_FB,RS,RS4,25,3,30,7,);
B(B_VAROUT,,MXecOutputTransm,30,4,32,6,);
B(B_VARIN,,FALSE,17,9,19,11,);
B(B_COMMENT,,timeout sets received datas to zero; ,1,1,27,2,);
B(B_F,@OR-2,,13,4,18,8,);
B(B_VARIN,,MXecComTimeout,11,5,13,7,);
B(B_VARIN,,MXecWatchdogErr,11,6,13,8,);
B(B_VARIN,,MXecModulsActive,17,2,19,4,);
L(25,6,25,9);
L(24,9,25,9);
L(24,5,25,5);
L(18,6,18,9);
L(18,9,19,9);
L(18,6,19,6);
L(19,3,19,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 101 ;
        NETWORK_BODY
B(B_VARIN,,IXec109_02,11,14,13,16,);
B(B_VARIN,,IXec109_03,11,20,13,22,);
B(B_VARIN,,IXec109_04,11,26,13,28,);
B(B_VARIN,,IXec109_05,11,32,13,34,);
B(B_VARIN,,IXec109_06,11,38,13,40,);
B(B_VARIN,,IXec109_07,11,44,13,46,);
B(B_VARIN,,IXec109_08,11,50,13,52,);
B(B_VARIN,,IXec109_09,11,56,13,58,);
B(B_VARIN,,IXec109_10,11,62,13,64,);
B(B_VARIN,,IXec109_11,11,68,13,70,);
B(B_VARIN,,IXec109_12,11,74,13,76,);
B(B_VARIN,,IXec109_13,11,80,13,82,);
B(B_VARIN,,IXec109_14,11,86,13,88,);
B(B_VARIN,,IXec109_15,11,92,13,94,);
B(B_VARIN,,IXec109_01,11,8,13,10,);
B(B_VAROUT,,Dummy,21,6,23,8,);
B(B_VAROUT,,Dummy,21,12,23,14,);
B(B_VAROUT,,Dummy,21,18,23,20,);
B(B_VAROUT,,Dummy,21,24,23,26,);
B(B_VAROUT,,Dummy,21,30,23,32,);
B(B_VAROUT,,Dummy,21,36,23,38,);
B(B_VAROUT,,Dummy,21,42,23,44,);
B(B_VAROUT,,Dummy,21,48,23,50,);
B(B_VAROUT,,Dummy,21,54,23,56,);
B(B_VAROUT,,Dummy,21,60,23,62,);
B(B_VAROUT,,Dummy,21,66,23,68,);
B(B_VAROUT,,Dummy,21,72,23,74,);
B(B_VAROUT,,Dummy,21,78,23,80,);
B(B_VAROUT,,Dummy,21,84,23,86,);
B(B_VAROUT,,Dummy,21,90,23,92,);
B(B_VAROUT,,Dummy,21,96,23,98,);
B(B_F,sel,,16,5,21,10,);
B(B_F,sel,,16,11,21,16,);
B(B_F,sel,,16,17,21,22,);
B(B_F,sel,,16,53,21,58,);
B(B_F,sel,,16,59,21,64,);
B(B_F,sel,,16,65,21,70,);
B(B_F,sel,,16,71,21,76,);
B(B_F,sel,,16,77,21,82,);
B(B_F,sel,,16,83,21,88,);
B(B_F,sel,,16,89,21,94,);
B(B_F,sel,,16,95,21,100,);
B(B_F,sel,,16,23,21,28,);
B(B_F,sel,,16,29,21,34,);
B(B_F,sel,,16,35,21,40,);
B(B_F,sel,,16,41,21,46,);
B(B_F,sel,,16,47,21,52,);
B(B_VARIN,,IXec109_17,29,8,31,10,);
B(B_VARIN,,IXec109_18,29,14,31,16,);
B(B_VARIN,,IXec109_19,29,20,31,22,);
B(B_VARIN,,IXec109_20,29,26,31,28,);
B(B_VARIN,,IXec109_21,29,32,31,34,);
B(B_VARIN,,IXec109_22,29,38,31,40,);
B(B_VARIN,,IXec109_23,29,44,31,46,);
B(B_VARIN,,IXec109_24,29,50,31,52,);
B(B_VARIN,,IXec109_25,29,56,31,58,);
B(B_VARIN,,IXec109_26,29,62,31,64,);
B(B_VARIN,,IXec109_27,29,68,31,70,);
B(B_VARIN,,IXec109_28,29,74,31,76,);
B(B_VARIN,,IXec109_29,29,80,31,82,);
B(B_VARIN,,IXec109_30,29,86,31,88,);
B(B_VARIN,,IXec109_31,29,92,31,94,);
B(B_VAROUT,,Dummy,39,84,41,86,);
B(B_VAROUT,,Dummy,39,90,41,92,);
B(B_VAROUT,,Dummy,39,96,41,98,);
B(B_VAROUT,,Dummy,39,6,41,8,);
B(B_VAROUT,,Dummy,39,12,41,14,);
B(B_VAROUT,,Dummy,39,18,41,20,);
B(B_VAROUT,,QXclampJawClose,39,24,41,26,);
B(B_VAROUT,,Dummy,39,30,41,32,);
B(B_VAROUT,,Dummy,39,36,41,38,);
B(B_VAROUT,,Dummy,39,42,41,44,);
B(B_VAROUT,,Dummy,39,48,41,50,);
B(B_VAROUT,,Dummy,39,54,41,56,);
B(B_VAROUT,,Dummy,39,60,41,62,);
B(B_VAROUT,,Dummy,39,66,41,68,);
B(B_VAROUT,,Dummy,39,72,41,74,);
B(B_VAROUT,,Dummy,39,78,41,80,);
B(B_F,sel,,34,5,39,10,);
B(B_F,sel,,34,11,39,16,);
B(B_F,sel,,34,17,39,22,);
B(B_F,sel,,34,23,39,28,);
B(B_F,sel,,34,29,39,34,);
B(B_F,sel,,34,35,39,40,);
B(B_F,sel,,34,41,39,46,);
B(B_F,sel,,34,47,39,52,);
B(B_F,sel,,34,53,39,58,);
B(B_F,sel,,34,59,39,64,);
B(B_F,sel,,34,65,39,70,);
B(B_F,sel,,34,71,39,76,);
B(B_F,sel,,34,77,39,82,);
B(B_F,sel,,34,83,39,88,);
B(B_F,sel,,34,89,39,94,);
B(B_F,sel,,34,95,39,100,);
B(B_VARIN,,MXecOutputTransm,11,6,13,8,);
B(B_VARIN,,FALSE,11,7,13,9,);
B(B_COMMENT,,transmission of digital output signals,2,1,18,2,);
B(B_VARIN,,IXec109_16,14,98,16,100,);
B(B_VARIN,,IXec109_32,32,98,34,100,);
L(14,14,16,14);
L(14,20,16,20);
L(14,26,16,26);
L(14,32,16,32);
L(14,38,16,38);
L(14,44,16,44);
L(14,50,16,50);
L(14,56,16,56);
L(14,62,16,62);
L(14,68,16,68);
L(14,74,16,74);
L(14,80,16,80);
L(14,86,16,86);
L(14,92,16,92);
L(14,98,16,98);
L(13,9,16,9);
L(13,15,16,15);
L(13,21,16,21);
L(13,27,16,27);
L(13,33,16,33);
L(13,39,16,39);
L(13,45,16,45);
L(13,51,16,51);
L(13,57,16,57);
L(13,63,16,63);
L(13,69,16,69);
L(13,75,16,75);
L(13,81,16,81);
L(13,87,16,87);
L(13,93,16,93);
L(14,8,16,8);
L(15,7,16,7);
L(15,13,16,13);
L(15,19,16,19);
L(15,55,16,55);
L(15,61,16,61);
L(15,67,16,67);
L(15,73,16,73);
L(15,79,16,79);
L(15,85,16,85);
L(15,91,16,91);
L(15,97,16,97);
L(15,25,16,25);
L(15,31,16,31);
L(15,37,16,37);
L(15,43,16,43);
L(15,49,16,49);
L(15,7,15,97);
L(14,8,14,98);
L(32,92,34,92);
L(32,8,34,8);
L(32,14,34,14);
L(32,20,34,20);
L(32,26,34,26);
L(32,32,34,32);
L(32,38,34,38);
L(32,44,34,44);
L(32,50,34,50);
L(32,56,34,56);
L(32,62,34,62);
L(32,68,34,68);
L(32,74,34,74);
L(32,80,34,80);
L(32,86,34,86);
L(32,98,34,98);
L(31,9,34,9);
L(31,15,34,15);
L(31,21,34,21);
L(31,27,34,27);
L(31,33,34,33);
L(31,39,34,39);
L(31,45,34,45);
L(31,51,34,51);
L(31,57,34,57);
L(31,63,34,63);
L(31,69,34,69);
L(31,75,34,75);
L(31,81,34,81);
L(31,87,34,87);
L(31,93,34,93);
L(33,7,34,7);
L(33,13,34,13);
L(33,19,34,19);
L(33,25,34,25);
L(33,31,34,31);
L(33,37,34,37);
L(33,43,34,43);
L(33,49,34,49);
L(33,55,34,55);
L(33,61,34,61);
L(33,67,34,67);
L(33,73,34,73);
L(33,79,34,79);
L(33,85,34,85);
L(33,91,34,91);
L(33,97,34,97);
L(33,7,33,97);
L(32,8,32,98);
L(14,5,14,8);
L(14,5,32,5);
L(32,5,32,8);
L(15,4,33,4);
L(33,4,33,7);
L(15,4,15,7);
L(13,8,14,8);
L(13,7,15,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 98 ;
        NETWORK_BODY
B(B_VARIN,,IXec109_33,11,5,13,7,);
B(B_VARIN,,IXec109_36,11,23,13,25,);
B(B_VARIN,,IXec109_37,11,29,13,31,);
B(B_VARIN,,IXec109_38,11,35,13,37,);
B(B_VARIN,,IXec109_39,11,41,13,43,);
B(B_VARIN,,IXec109_40,11,47,13,49,);
B(B_VARIN,,IXec109_41,11,53,13,55,);
B(B_VARIN,,IXec109_42,11,59,13,61,);
B(B_VARIN,,IXec109_43,11,65,13,67,);
B(B_VARIN,,IXec109_44,11,71,13,73,);
B(B_VARIN,,IXec109_46,11,83,13,85,);
B(B_VARIN,,IXec109_47,11,89,13,91,);
B(B_VARIN,,IXec109_45,11,77,13,79,);
B(B_VARIN,,IXec109_35,11,17,13,19,);
B(B_VARIN,,IXec109_34,11,11,13,13,);
B(B_VAROUT,,QXddTrimot,21,3,23,5,);
B(B_VAROUT,,QXddGearBox,21,9,23,11,);
B(B_VAROUT,,QXcableWinBrake,21,15,23,17,);
B(B_VAROUT,,QXgrabOpen,21,21,23,23,);
B(B_VAROUT,,QXgrabClose,21,27,23,29,);
B(B_VAROUT,,Dummy,21,33,23,35,);
B(B_VAROUT,,QXexcentDriveIn,21,39,23,41,);
B(B_VAROUT,,QXexcentDriveOut,21,45,23,47,);
B(B_VAROUT,,Dummy,21,93,23,95,);
B(B_VAROUT,,Dummy,21,87,23,89,);
B(B_VAROUT,,QXcableDrumLift,21,81,23,83,);
B(B_VAROUT,,QXcableDrumLower,21,75,23,77,);
B(B_VAROUT,,Dummy,21,69,23,71,);
B(B_VAROUT,,Dummy,21,63,23,65,);
B(B_VAROUT,,QXhoseDrumBrakRi,21,57,23,59,);
B(B_VAROUT,,QXhoseDrumBrakLe,21,51,23,53,);
B(B_F,sel,,16,2,21,7,);
B(B_F,sel,,16,8,21,13,);
B(B_F,sel,,16,14,21,19,);
B(B_F,sel,,16,20,21,25,);
B(B_F,sel,,16,26,21,31,);
B(B_F,sel,,16,32,21,37,);
B(B_F,sel,,16,38,21,43,);
B(B_F,sel,,16,44,21,49,);
B(B_F,sel,,16,50,21,55,);
B(B_F,sel,,16,56,21,61,);
B(B_F,sel,,16,62,21,67,);
B(B_F,sel,,16,68,21,73,);
B(B_F,sel,,16,74,21,79,);
B(B_F,sel,,16,80,21,85,);
B(B_F,sel,,16,86,21,91,);
B(B_F,sel,,16,92,21,97,);
B(B_VARIN,,FALSE,11,4,13,6,);
B(B_VARIN,,MXecOutputTransm,11,3,13,5,);
B(B_VARIN,,IXec109_49,29,5,31,7,);
B(B_VARIN,,IXec109_50,29,11,31,13,);
B(B_VARIN,,IXec109_51,29,17,31,19,);
B(B_VARIN,,IXec109_53,29,29,31,31,);
B(B_VARIN,,IXec109_54,29,35,31,37,);
B(B_VARIN,,IXec109_55,29,41,31,43,);
B(B_VARIN,,IXec109_56,29,47,31,49,);
B(B_VARIN,,IXec109_57,29,53,31,55,);
B(B_VARIN,,IXec109_58,29,59,31,61,);
B(B_VARIN,,IXec109_59,29,65,31,67,);
B(B_VARIN,,IXec109_60,29,71,31,73,);
B(B_VARIN,,IXec109_61,29,77,31,79,);
B(B_VARIN,,IXec109_62,29,83,31,85,);
B(B_VARIN,,IXec109_63,29,89,31,91,);
B(B_VARIN,,IXec109_52,29,23,31,25,);
B(B_VAROUT,,Dummy,39,9,41,11,);
B(B_VAROUT,,Dummy,39,15,41,17,);
B(B_VAROUT,,Dummy,39,21,41,23,);
B(B_VAROUT,,Dummy,39,27,41,29,);
B(B_VAROUT,,Dummy,39,33,41,35,);
B(B_VAROUT,,Dummy,39,39,41,41,);
B(B_VAROUT,,Dummy,39,51,41,53,);
B(B_VAROUT,,Dummy,39,57,41,59,);
B(B_VAROUT,,QXclampJawOpen,39,69,41,71,);
B(B_VAROUT,,QXretFlowVibrHam,39,93,41,95,);
B(B_VAROUT,,Dummy,39,81,41,83,);
B(B_VAROUT,,Dummy,39,87,41,89,);
B(B_VAROUT,,Dummy,39,75,41,77,);
B(B_VAROUT,,Dummy,39,63,41,65,);
B(B_VAROUT,,Dummy,39,45,41,47,);
B(B_VAROUT,,Dummy,39,3,41,5,);
B(B_VARIN,,IXec109_64,32,95,34,97,);
B(B_F,sel,,34,2,39,7,);
B(B_F,sel,,34,8,39,13,);
B(B_F,sel,,34,14,39,19,);
B(B_F,sel,,34,20,39,25,);
B(B_F,sel,,34,26,39,31,);
B(B_F,sel,,34,32,39,37,);
B(B_F,sel,,34,38,39,43,);
B(B_F,sel,,34,44,39,49,);
B(B_F,sel,,34,50,39,55,);
B(B_F,sel,,34,56,39,61,);
B(B_F,sel,,34,62,39,67,);
B(B_F,sel,,34,68,39,73,);
B(B_F,sel,,34,74,39,79,);
B(B_F,sel,,34,80,39,85,);
B(B_F,sel,,34,86,39,91,);
B(B_F,sel,,34,92,39,97,);
B(B_VARIN,,IXec109_48,14,95,16,97,);
L(13,6,16,6);
L(13,18,16,18);
L(13,24,16,24);
L(13,30,16,30);
L(13,36,16,36);
L(13,42,16,42);
L(13,48,16,48);
L(13,54,16,54);
L(13,60,16,60);
L(13,66,16,66);
L(13,72,16,72);
L(13,78,16,78);
L(13,84,16,84);
L(13,90,16,90);
L(13,12,16,12);
L(14,5,16,5);
L(14,95,16,95);
L(14,89,16,89);
L(14,83,16,83);
L(14,77,16,77);
L(14,71,16,71);
L(14,65,16,65);
L(14,59,16,59);
L(14,53,16,53);
L(14,47,16,47);
L(14,41,16,41);
L(14,35,16,35);
L(14,29,16,29);
L(14,23,16,23);
L(14,17,16,17);
L(14,11,16,11);
L(15,4,16,4);
L(15,10,16,10);
L(15,16,16,16);
L(15,22,16,22);
L(15,28,16,28);
L(15,34,16,34);
L(15,40,16,40);
L(15,46,16,46);
L(15,52,16,52);
L(15,58,16,58);
L(15,64,16,64);
L(15,70,16,70);
L(15,76,16,76);
L(15,82,16,82);
L(15,88,16,88);
L(15,94,16,94);
L(15,4,15,94);
L(14,5,14,95);
L(13,5,14,5);
L(13,4,15,4);
L(14,3,14,5);
L(14,2,14,3);
L(15,1,15,4);
L(31,6,34,6);
L(31,12,34,12);
L(31,18,34,18);
L(31,24,34,24);
L(31,30,34,30);
L(31,36,34,36);
L(31,42,34,42);
L(31,48,34,48);
L(31,54,34,54);
L(31,60,34,60);
L(31,66,34,66);
L(31,72,34,72);
L(31,78,34,78);
L(31,90,34,90);
L(32,95,34,95);
L(32,89,34,89);
L(32,77,34,77);
L(32,71,34,71);
L(32,65,34,65);
L(32,59,34,59);
L(32,53,34,53);
L(32,47,34,47);
L(32,41,34,41);
L(32,35,34,35);
L(32,29,34,29);
L(32,23,34,23);
L(32,17,34,17);
L(32,11,34,11);
L(32,5,34,5);
L(33,4,34,4);
L(33,10,34,10);
L(33,16,34,16);
L(33,22,34,22);
L(33,28,34,28);
L(33,34,34,34);
L(33,40,34,40);
L(33,46,34,46);
L(33,52,34,52);
L(33,58,34,58);
L(33,64,34,64);
L(33,70,34,70);
L(33,76,34,76);
L(33,82,34,82);
L(33,88,34,88);
L(33,94,34,94);
L(32,83,34,83);
L(31,84,34,84);
L(33,4,33,94);
L(32,5,32,95);
L(32,2,32,5);
L(33,1,33,4);
L(15,1,32,1);
L(14,2,32,2);
L(32,1,33,1);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_F,@OR-2,,13,3,18,7,);
B(B_VARIN,,QXexcentDriveOut,11,4,13,6,);
B(B_VARIN,,QXexcentDriveIn,11,5,13,7,);
B(B_COMMENT,,set exDr cylinder working,1,1,27,2,);
B(B_VAROUT,,MXexDrWorking,18,4,20,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_VARIN,,FALSE,11,4,13,6,);
B(B_VARIN,,FALSE,11,5,13,7,);
B(B_COMMENT,,set exDr cylinder working,1,1,27,2,);
B(B_VAROUT,,MXecRelAddPump,18,4,20,6,);
B(B_VARIN,,QXcableDrumLower,11,6,13,8,);
B(B_VARIN,,QXcableDrumLift,11,7,13,9,);
B(B_VARIN,,QXhoseDrumBrakRi,11,8,13,10,);
B(B_VARIN,,QXhoseDrumBrakLe,11,9,13,11,);
B(B_F,@OR-6,,13,3,18,11,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_F,@OR-2,,13,3,18,7,);
B(B_VARIN,,QXclampJawClose,11,4,13,6,);
B(B_VARIN,,QXclampJawOpen,11,5,13,7,);
B(B_COMMENT,,set clamp cylinder working,1,1,27,2,);
B(B_VAROUT,,QXrelClampJaw,19,5,21,7,);
B(B_VAROUT,,MXclampWorking,19,4,21,6,);
L(18,5,19,5);
L(19,5,19,6);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,exit program,1,1,27,2,);
B(B_VARIN,,TRUE,11,3,13,5,);
B(B_RETURN,,,13,3,15,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL := init: ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,init program,1,1,27,2,);
B(B_VARIN,,TRUE,11,3,13,5,);
B(B_VAROUT,,LXinitOk,13,3,15,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_FB,CorrValue_Bool,CorrValue_Bool1,13,4,25,10,);
B(B_VARIN,,CXadExtOperMode,11,8,13,10,);
B(B_VARIN,,FALSE,11,6,13,8,);
B(B_VARIN,,TRUE,11,7,13,9,);
B(B_VARIN,,FALSE,11,5,13,7,);
B(B_COMMENT,,additional device external control,1,1,27,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_FB,CorrValue_Bool,CorrValue_Bool2,13,4,25,10,);
B(B_VARIN,,CXecBaudrateDire,11,8,13,10,);
B(B_VARIN,,FALSE,11,6,13,8,);
B(B_VARIN,,TRUE,11,7,13,9,);
B(B_VARIN,,TRUE,11,5,13,7,);
B(B_COMMENT,,correction value for start with adjusted baudrate directly ,1,1,27,2,);
B(B_COMMENT,,TRUE = start with maximum baudrate,29,4,45,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_FB,CorrValue_UInt,CorrValue_UInt1,13,3,25,9,);
B(B_VARIN,,4,11,4,13,6,);
B(B_VARIN,,1,11,5,13,7,);
B(B_VARIN,,4,11,6,13,8,);
B(B_VARIN,,CWecMaxBaudRate,11,7,13,9,);
B(B_COMMENT,,correction value for maximum baudrate,1,1,27,2,);
B(B_COMMENT,,1= 125kbaud,29,3,39,4,);
B(B_COMMENT,,2= 250kbaud,29,4,39,5,);
B(B_COMMENT,,3= 500kbaud,29,5,39,6,);
B(B_COMMENT,,4= 1Mbaud,29,6,39,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_FB,CorrValue_UInt,CorrValue_UInt2,13,3,25,9,);
B(B_VARIN,,3,11,4,13,6,);
B(B_VARIN,,1,11,5,13,7,);
B(B_VARIN,,10,11,6,13,8,);
B(B_VARIN,,CWecRXspareTime,11,7,13,9,);
B(B_COMMENT,,correction value for RX spare time [ms],1,1,27,2,);
B(B_COMMENT,,time before sps part starts ,29,4,43,5,);
        END_NETWORK_BODY
    END_NET_WORK
END_BODY
END_PROGRAM

PROGRAM ADinterMasX2V060
	VAR_EXTERNAL 
		IXddGearBoxTemp: BOOL:=FALSE;
			(*drilling drive gear box temperatur o.k/vibr. gear box temp. o.k.*)
		IXddOilFlow: BOOL:=FALSE;
			(*drilling drive oil flow o.k/ vibr. lub oil press. o.k.*)
		IXlgLowerLimOk: BOOL:=FALSE;
			(*LG lower limit switch o.k.*)
		IXairFilterDirty: BOOL;
			(*engine DC5 engine air filter dirty*)
		IXengAirFilterE: BOOL:=FALSE;
			(*engine PLD air filter pressure low error*)
		IXengCharging: BOOL:=FALSE;
			(*engine PLD battery charging*)
		IXengPreheatBit0: BOOL;
			(*engine PLD preheat system, bit 0*)
		IXengPreheatBit1: BOOL;
			(*engine PLD preheat system, bit 1*)
		IXcontentCooWate: BOOL;
			(*content switch cooling water*)
		IXhydrFiltFeedOk: BOOL:=FALSE;
			(*hydraulic filter feed pressure o.k.*)
		IXhydrFilReturOk: BOOL:=FALSE;
			(*hydraulic filter return flow o.k.*)
		IXcontHydrTanOk: BOOL;
			(*content hydraulic tank o.k.*)
		IXgearOilTempOk: BOOL:=FALSE;
			(*gear oil temperature o.k.*)
		IXlimSwiBoomStab: BOOL:=FALSE;
			(*limit switch boom stabilization; ball in socket*)
		IXhg1FeedPressOk: BOOL:=FALSE;
			(*feed pressure HG 1 o.k.*)
		IXhg1BrakePresOk: BOOL:=FALSE;
			(*brake pressure HG 1 o.k.*)
		IXhg1UpperLimOk: BOOL:=FALSE;
			(*upper limit switch HG 1 o.k.*)
		IXhg2FeedPressOk: BOOL:=FALSE;
			(*feed pressure HG 2 o.k.*)
		IXhg2BrakePresOk: BOOL:=FALSE;
			(*brake pressure HG 2 o.k.*)
		IXhg2UpperLimOk: BOOL:=FALSE;
			(*upper limit switch HG 2 o.k.*)
		IXlgUpperLimOk: BOOL:=FALSE;
			(*upper limit switch LG o.k.*)
		IXhgRelFreefall: BOOL:=FALSE;
			(*clutch valve release freefall*)
		IXhg1LowerLimOk: BOOL:=FALSE;
			(*lower limit switch HG 1 o.k.*)
		IXhg2LowerLimOk: BOOL:=FALSE;
			(*lower limit switch HG 2 o.k.*)
		IXaddUpperLimOk: BOOL:=FALSE;
			(*add: additional/passenger winch upper limit switch  o.k.*)
		IXaddLowerLimOk: BOOL:=FALSE;
			(*add: additional/passenger winch lower limit switch  o.k.*)
		IXcoolWatTemHigh: BOOL;
			(*cooling water temperature to high*)
		IXcoolWatSensDef: BOOL;
			(*cooling water temperature sensor defect*)
		IXlubOilPresLess: BOOL;
			(*lub oil pressure to low*)
		IXlubOilSignHigh: BOOL;
			(*lub oil pressure signal to high*)
		IXlubOilSignLess: BOOL;
			(*lub oil pressure signal to low*)
		IXcharAirSigHigh: BOOL;
			(*charge air pressure signal to high*)
		IXcharAirSigLess: BOOL;
			(*charge air pressure signal to low*)
		IXengineOverspee: BOOL;
			(*engine overspeed noticed*)
		IXpickup1Defect: BOOL;
			(*pickup 1 defect*)
		IXpickup2Defect: BOOL;
			(*pickup 2 defect*)
		IXfeedbackDefect: BOOL;
			(*feedback electronic diesel control defect*)
		IXedcDifference: BOOL;
			(*electronic diesel control difference between adjusted and true value*)
		IXpickupEmerStop: BOOL;
			(*pickup emergency stop*)
		IXglowPlugOn: BOOL;
			(*glow Plug on*)
		IXgloPluValveOn: BOOL;
			(*glow plug valve on*)
		IXflaStaConStat1: BOOL;
			(*flame start control status bit 1*)
		IXflaStaConStat2: BOOL;
			(*flame start control status bit 2*)
		IXerrorGlowPlug: BOOL;
			(*error glow plug*)
		IXerrBattCharge: BOOL;
			(*battery charging is off*)
		IXengCoolWatLevE: BOOL;
			(*engine PLD cooling water level error*)
		IXengCooWatTempE: BOOL:=FALSE;
			(*engine PLD cooling water temperature error*)
		IXengLubOilPresE: BOOL:=FALSE;
			(*engine PLD lub oil pressure error*)
		IXengSpeedHighE: BOOL:=FALSE;
			(*engine PLD engine PLD speed high error*)
		IXlg2UpperLimOk: BOOL:=FALSE;
			(*upper limit switch LG2 o.k*)
		IXlg2LowerLimOk: BOOL:=FALSE;
			(*lower limit switch LG 2 o.k*)
		IXlgAFraUppLimOk: BOOL:=FALSE;
			(*upper limit switch main boom a-frame (8 degree)*)
		IXlg2FlapIsOut: BOOL:=FALSE;
			(*lg 2 luffing jib flap is out (ready) / sliding table (pivot piece) limit switch o.k.*)
		IXadPersSlackRop: BOOL:=FALSE;
			(*add personal winch: slack rope switch*)
		IXadPersCrankMon: BOOL:=FALSE;
			(*add personal winch: crank emergency drop mounted/derrick lg upper limit switch normal operating position for derrick *)
		MXengModPLDactiv: BOOL:=FALSE;
			(*engine modul PLD activ*)
		IXec110_01: BOOL:=FALSE;
			(*external control master modul 110 *)
		IXec110_02: BOOL:=FALSE;
			(*external control master modul 110*)
		IXec110_03: BOOL:=FALSE;
			(*external control master modul 110*)
		IXec110_04: BOOL:=FALSE;
			(*external control master modul 110*)
		IXec110_05: BOOL:=FALSE;
			(*external control master modul 110*)
		IXec110_06: BOOL:=FALSE;
			(*external control master modul 110*)
		IXec110_07: BOOL:=FALSE;
			(*external control master modul 110*)
		IXec110_08: BOOL:=FALSE;
			(*external control master modul 110*)
		IXec110_09: BOOL:=FALSE;
			(*external control master modul 110*)
		IXec110_10: BOOL:=FALSE;
			(*external control master modul 110*)
		IXec110_11: BOOL:=FALSE;
			(*external control master modul 110*)
		IXec110_12: BOOL:=FALSE;
			(*external control master modul 110*)
		IXec110_13: BOOL:=FALSE;
			(*external control master modul 110*)
		IXec110_14: BOOL:=FALSE;
			(*external control master modul 110*)
		IXec110_15: BOOL:=FALSE;
			(*external control master modul 110*)
		IXec110_16: BOOL:=FALSE;
			(*external control master modul 110*)
		IXec110_17: BOOL:=FALSE;
			(*external control master modul 110*)
		IXec110_18: BOOL:=FALSE;
			(*external control master modul 110*)
		IXec110_19: BOOL:=FALSE;
			(*external control master modul 110*)
		IXec110_20: BOOL:=FALSE;
			(*external control master modul 110*)
		IXec110_21: BOOL:=FALSE;
			(*external control master modul 110*)
		IXec110_22: BOOL:=FALSE;
			(*external control master modul 110*)
		IXec110_23: BOOL:=FALSE;
			(*external control master modul 110*)
		IXec110_24: BOOL:=FALSE;
			(*external control master modul 110*)
		IXec110_25: BOOL:=FALSE;
			(*external control master modul 110*)
		IXec110_26: BOOL:=FALSE;
			(*external control master modul 110*)
		IXec110_27: BOOL:=FALSE;
			(*external control master modul 110*)
		IXec110_28: BOOL:=FALSE;
			(*external control master modul 110*)
		IXec110_29: BOOL:=FALSE;
			(*external control master modul 110*)
		IXec110_30: BOOL:=FALSE;
			(*external control master modul 110*)
		IXec110_31: BOOL:=FALSE;
			(*external control master modul 110*)
		IXec110_32: BOOL:=FALSE;
			(*external control master modul 110*)
		IXec110_33: BOOL:=FALSE;
			(*external control master modul 110*)
		IXec110_34: BOOL:=FALSE;
			(*external control master modul 110*)
		IXec110_35: BOOL:=FALSE;
			(*external control master modul 110*)
		IXec110_36: BOOL:=FALSE;
			(*external control master modul 110*)
		IXec110_37: BOOL:=FALSE;
			(*external control master modul 110*)
		IXec110_38: BOOL:=FALSE;
			(*external control master modul 110*)
		IXec110_39: BOOL:=FALSE;
			(*external control master modul 110*)
		IXec110_40: BOOL:=FALSE;
			(*external control master modul 110*)
		IXec110_41: BOOL:=FALSE;
			(*external control master modul 110*)
		IXec110_42: BOOL:=FALSE;
			(*external control master modul 110*)
		IXec110_43: BOOL:=FALSE;
			(*external control master modul 110*)
		IXec110_44: BOOL:=FALSE;
			(*external control master modul 110*)
		IXec110_45: BOOL:=FALSE;
			(*external control master modul 110*)
		IXec110_46: BOOL:=FALSE;
			(*external control master modul 110*)
		IXec110_47: BOOL:=FALSE;
			(*external control master modul 110*)
		IXec110_48: BOOL:=FALSE;
			(*external control master modul 110*)
		IXec110_49: BOOL:=FALSE;
			(*external control master modul 110*)
		IXec110_50: BOOL:=FALSE;
			(*external control master modul 110*)
		IXec110_51: BOOL:=FALSE;
			(*external control master modul 110*)
		IXec110_52: BOOL:=FALSE;
			(*external control master modul 110*)
		IXec110_53: BOOL:=FALSE;
			(*external control master modul 110*)
		IXec110_54: BOOL:=FALSE;
			(*external control master modul 110*)
		IXec110_55: BOOL:=FALSE;
			(*external control master modul 110*)
		IXec110_56: BOOL:=FALSE;
			(*external control master modul 110*)
		IXec110_57: BOOL:=FALSE;
			(*external control master modul 110*)
		IXec110_58: BOOL:=FALSE;
			(*external control master modul 110*)
		IXec110_59: BOOL:=FALSE;
			(*external control master modul 110*)
		IXec110_60: BOOL:=FALSE;
			(*external control master modul 110*)
		IXec110_61: BOOL:=FALSE;
			(*external control master modul 110*)
		IXec110_62: BOOL:=FALSE;
			(*external control master modul 110*)
		IXec110_63: BOOL:=FALSE;
			(*external control master modul 110*)
		IXec110_64: BOOL:=FALSE;
			(*external control master modul 110*)
		QXec110_01: BOOL:=FALSE;
			(*external control master modul 110*)
		QXec110_02: BOOL:=FALSE;
			(*external control master modul 110*)
		QXec110_03: BOOL:=FALSE;
			(*external control master modul 110*)
		QXec110_04: BOOL:=FALSE;
			(*external control master modul 110*)
		QXec110_05: BOOL:=FALSE;
			(*external control master modul 110*)
		QXec110_06: BOOL:=FALSE;
			(*external control master modul 110*)
		QXec110_07: BOOL:=FALSE;
			(*external control master modul 110*)
		QXec110_08: BOOL:=FALSE;
			(*external control master modul 110*)
		QXec110_09: BOOL:=FALSE;
			(*external control master modul 110*)
		QXec110_10: BOOL:=FALSE;
			(*external control master modul 110*)
		QXec110_11: BOOL:=FALSE;
			(*external control master modul 110*)
		QXec110_12: BOOL:=FALSE;
			(*external control master modul 110*)
		QXec110_13: BOOL:=FALSE;
			(*external control master modul 110*)
		QXec110_14: BOOL:=FALSE;
			(*external control master modul 110*)
		QXec110_15: BOOL:=FALSE;
			(*external control master modul 110*)
		QXec110_16: BOOL:=FALSE;
			(*external control master modul 110*)
		QXec110_17: BOOL:=FALSE;
			(*external control master modul 110*)
		QXec110_18: BOOL:=FALSE;
			(*external control master modul 110*)
		QXec110_19: BOOL:=FALSE;
			(*external control master modul 110*)
		QXec110_20: BOOL:=FALSE;
			(*external control master modul 110*)
		QXec110_21: BOOL:=FALSE;
			(*external control master modul 110*)
		QXec110_22: BOOL:=FALSE;
			(*external control master modul 110*)
		QXec110_23: BOOL:=FALSE;
			(*external control master modul 110*)
		QXec110_24: BOOL:=FALSE;
			(*external control master modul 110*)
		QXec110_25: BOOL:=FALSE;
			(*external control master modul 110*)
		QXec110_26: BOOL:=FALSE;
			(*external control master modul 110*)
		QXec110_27: BOOL:=FALSE;
			(*external control master modul 110*)
		QXec110_28: BOOL:=FALSE;
			(*external control master modul 110*)
		QXec110_29: BOOL:=FALSE;
			(*external control master modul 110*)
		QXec110_30: BOOL:=FALSE;
			(*external control master modul 110*)
		QXec110_31: BOOL:=FALSE;
			(*external control master modul 110*)
		QXec110_32: BOOL:=FALSE;
			(*external control master modul 110*)
		QXec110_33: BOOL:=FALSE;
			(*external control master modul 110*)
		QXec110_34: BOOL:=FALSE;
			(*external control master modul 110*)
		QXec110_35: BOOL:=FALSE;
			(*external control master modul 110*)
		QXec110_36: BOOL:=FALSE;
			(*external control master modul 110*)
		QXec110_37: BOOL:=FALSE;
			(*external control master modul 110*)
		QXec110_38: BOOL:=FALSE;
			(*external control master modul 110*)
		QXec110_39: BOOL:=FALSE;
			(*external control master modul 110*)
		QXec110_40: BOOL:=FALSE;
			(*external control master modul 110*)
		QXec110_41: BOOL:=FALSE;
			(*external control master modul 110*)
		QXec110_42: BOOL:=FALSE;
			(*external control master modul 110*)
		QXec110_43: BOOL:=FALSE;
			(*external control master modul 110*)
		QXec110_44: BOOL:=FALSE;
			(*external control master modul 110*)
		QXec110_45: BOOL:=FALSE;
			(*external control master modul 110*)
		QXec110_46: BOOL:=FALSE;
			(*external control master modul 110*)
		QXec110_47: BOOL:=FALSE;
			(*external control master modul 110*)
		QXec110_48: BOOL:=FALSE;
			(*external control master modul 110*)
		QXec110_49: BOOL:=FALSE;
			(*external control master modul 110*)
		QXec110_50: BOOL:=FALSE;
			(*external control master modul 110*)
		QXec110_51: BOOL:=FALSE;
			(*external control master modul 110*)
		QXec110_52: BOOL:=FALSE;
			(*external control master modul 110*)
		QXec110_53: BOOL:=FALSE;
			(*external control master modul 110*)
		QXec110_54: BOOL:=FALSE;
			(*external control master modul 110*)
		QXec110_55: BOOL:=FALSE;
			(*external control master modul 110*)
		QXec110_56: BOOL:=FALSE;
			(*external control master modul 110*)
		QXec110_57: BOOL:=FALSE;
			(*external control master modul 110*)
		QXec110_58: BOOL:=FALSE;
			(*external control master modul 110*)
		QXec110_59: BOOL:=FALSE;
			(*external control master modul 110*)
		QXec110_60: BOOL:=FALSE;
			(*external control master modul 110*)
		QXec110_61: BOOL:=FALSE;
			(*external control master modul 110*)
		QXec110_62: BOOL:=FALSE;
			(*external control master modul 110*)
		QXec110_63: BOOL:=FALSE;
			(*external control master modul 110*)
		QXec110_64: BOOL:=FALSE;
			(*external control master modul 110*)
		MXecM110Timeout: BOOL:=FALSE;
			(*external control module 110 timeout*)
		MXecM110isActive: BOOL:=FALSE;
			(*external control module 110 is active*)
		MXecOutputTransm: BOOL:=FALSE;
			(*external control output transmit*)
		MXecModulsActive: BOOL:=FALSE;
			(*external control module are active*)
		MXecSgStopRi: BOOL:=FALSE;
			(*external control stop slewing gear right*)
		MXecSgStopLe: BOOL:=FALSE;
			(*external control stop slewing gear left*)
		MXecLGStopUp: BOOL:=FALSE;
			(*external control stop luffing gear lifting*)
		MXecLGStopDn: BOOL:=FALSE;
			(*external control stop luffing gear lowering*)
		MXecSgStpFreTurn: BOOL:=FALSE;
			(*external control stop slewing gear-free turn*)
		MXecTGStop: BOOL:=FALSE;
			(*external control stop travelling gear *)
		MXecHG1StopUp: BOOL:=FALSE;
			(*external control stop hoisting gear 1 lifting*)
		MXecHG1StopDn: BOOL:=FALSE;
			(*external control stop hoisting gear 1 lowering*)
		MXecHG2StopUp: BOOL:=FALSE;
			(*external control stop hoisting gear 2 lifting*)
		MXecHG2StopDn: BOOL:=FALSE;
			(*external control stop hoisting gear 2 lowering*)
		MXecAuxWinStopUp: BOOL:=FALSE;
			(*external control stop auxiliary winch lifting*)
		MXecAuxWinStopDn: BOOL:=FALSE;
			(*external control stop auxiliary winch lowering*)
		MXecAddWinStopUp: BOOL:=FALSE;
			(*external control stop additional winch lifting*)
		MXecAddWinStopDn: BOOL:=FALSE;
			(*external control stop additional winch lowering*)
		MXecRelLeadPump: BOOL:=FALSE;
			(*external control release leader pump*)
		MXecHg1extAnaSig: BOOL:=FALSE;
			(*external control pres.ext.cont. analog signal Hg1*)
		MXecHg2extAnaSig: BOOL:=FALSE;
			(*external control pres.ext.cont. analog signal Hg2*)
		MXecHg1preFastSp: BOOL:=FALSE;
			(*external control pres.ext.cont. fast speed Hg1 *)
		MXecHg2preFastSp: BOOL:=FALSE;
			(*external control pres.ext.cont. fast speed Hg2*)
		MXecHydWinchSyn: BOOL:=FALSE;
			(*external control pres.ext.cont. hydr.winch synch.*)
		MXecPreHigEngSp: BOOL:=FALSE;
			(*external control pres. high engine speed*)
		MXecRiJoyAna1Vib: BOOL:=FALSE;
			(*external control release right joyst. vibr.sig.1*)
		MXecRiJoyAna2Vib: BOOL:=FALSE;
			(*external control release right joyst. vibr.sig.2*)
		MXecLeJoyAna1Vib: BOOL:=FALSE;
			(*external control release left joyst. vibr.sig.1*)
		MXecLeJoyAna2Vib: BOOL:=FALSE;
			(*external control release left joyst. vibr.sig.2*)
		MXecHg1ExitProg: BOOL:=FALSE;
			(*external control presel. exit hg1 programm*)
		MXecHg2ExitProg: BOOL:=FALSE;
			(*external control presel. exit hg2 programm*)
		MXhg1PumpInZero: BOOL:=FALSE;
			(*HG 1 pump in zero*)
		MXhg2PumpInZero: BOOL:=FALSE;
			(*HG 2 pump in zero*)
		MXecHg1RelExtCon: BOOL:=FALSE;
			(*external control release hg1*)
		MXecHg2RelExtCon: BOOL:=FALSE;
			(*external control release hg2*)
		MXhg1ExtAnalSign: BOOL:=FALSE;
			(*HG 1 other, external analog signal*)
		MXhg2ExtAnalSign: BOOL:=FALSE;
			(*HG 2 other, external analog signal*)
		MXhg1WinchStand: BOOL:=FALSE;
			(*HG 1 winch standing still*)
		MXhg2WinchStand: BOOL:=FALSE;
			(*HG 2 winch standing still*)
		MDhg1JoySignal: REAL:=0.0;
			(*HG 1 joystick signal in +/- [%]*)
		MDhg2JoySignal: REAL:=0.0;
			(*HG 2 joystick signal in +/-[%]*)
	END_VAR
	VAR_EXTERNAL RETAIN
		MXenExtOperMode: BOOL:=FALSE;
			(*enable external operation mode*)
	END_VAR
	VAR 
		ModuleState1: ModuleState;
		Dummy: BOOL:=FALSE;
		LXecM110Timeout: BOOL:=FALSE;
		RS1: RS;
		RS2: RS;
		F_TRIG1: F_TRIG;
		F_TRIG2: F_TRIG;
	END_VAR
'FBD'
BODY
    WORKSPACE
        NETWORK_LIST_TYPE := NWTYPEFBD ;
        ACTIVE_NETWORK := 0 ;
    END_WORKSPACE
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_FB,ModuleState,ModuleState1,10,3,22,9,);
B(B_VARIN,,3,8,4,10,6,);
B(B_VARIN,,110,8,5,10,7,);
B(B_VARIN,,MXenExtOperMode,8,6,10,8,);
B(B_VARIN,,FALSE,8,7,10,9,);
B(B_VAROUT,,LXecM110Timeout,22,4,24,6,);
B(B_VAROUT,,MXecM110isActive,22,5,24,7,);
B(B_COMMENT,,activate module 110 for inputs/outputs transmission with external control,2,1,29,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_VARIN,,IXddOilFlow,10,3,12,5,);
B(B_VAROUT,,QXec110_01,12,3,14,5,);
B(B_COMMENT,,transmission of digital input signals,2,1,18,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VAROUT,,QXec110_02,12,1,14,3,);
B(B_VARIN,,IXddGearBoxTemp,10,1,12,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,IXhydrFiltFeedOk,10,1,12,3,);
B(B_VAROUT,,QXec110_03,12,1,14,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VAROUT,,QXec110_04,12,1,14,3,);
B(B_VARIN,,FALSE,10,1,12,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VAROUT,,QXec110_05,12,1,14,3,);
B(B_VARIN,,FALSE,10,1,12,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,IXhydrFilReturOk,10,1,12,3,);
B(B_VAROUT,,QXec110_06,12,1,14,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,IXcontHydrTanOk,10,1,12,3,);
B(B_VAROUT,,QXec110_07,12,1,14,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,IXgearOilTempOk,10,1,12,3,);
B(B_VAROUT,,QXec110_08,12,1,14,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,IXlimSwiBoomStab,10,1,12,3,);
B(B_VAROUT,,QXec110_09,12,1,14,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,MXhg1WinchStand,10,1,12,3,);
B(B_VAROUT,,QXec110_10,12,1,14,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,IXhg1FeedPressOk,10,1,12,3,);
B(B_VAROUT,,QXec110_11,12,1,14,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,IXhg1BrakePresOk,10,1,12,3,);
B(B_VAROUT,,QXec110_12,12,1,14,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,IXhg1UpperLimOk,10,1,12,3,);
B(B_VAROUT,,QXec110_13,12,1,14,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,MXhg2WinchStand,10,1,12,3,);
B(B_VAROUT,,QXec110_14,12,1,14,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,IXhg2FeedPressOk,10,1,12,3,);
B(B_VAROUT,,QXec110_15,12,1,14,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,IXhg2BrakePresOk,10,1,12,3,);
B(B_VAROUT,,QXec110_16,12,1,14,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,IXhg2UpperLimOk,10,1,12,3,);
B(B_VAROUT,,QXec110_17,12,1,14,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,IXlgUpperLimOk,10,1,12,3,);
B(B_VAROUT,,QXec110_18,12,1,14,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,IXhgRelFreefall,10,1,12,3,);
B(B_VAROUT,,QXec110_19,12,1,14,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,FALSE,10,1,12,3,);
B(B_VAROUT,,QXec110_20,12,1,14,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,IXhg1LowerLimOk,10,1,12,3,);
B(B_VAROUT,,QXec110_21,12,1,14,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,IXhg2LowerLimOk,10,1,12,3,);
B(B_VAROUT,,QXec110_22,12,1,14,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,IXlg2UpperLimOk,10,1,12,3,);
B(B_VAROUT,,QXec110_23,12,1,14,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,IXlg2LowerLimOk,10,1,12,3,);
B(B_VAROUT,,QXec110_24,12,1,14,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,IXlgAFraUppLimOk,10,1,12,3,);
B(B_VAROUT,,QXec110_25,12,1,14,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,IXlgLowerLimOk,10,1,12,3,);
B(B_VAROUT,,QXec110_26,12,1,14,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,IXlg2FlapIsOut,10,1,12,3,);
B(B_VAROUT,,QXec110_27,12,1,14,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,FALSE,10,1,12,3,);
B(B_VAROUT,,QXec110_28,12,1,14,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,IXadPersSlackRop,10,1,12,3,);
B(B_VAROUT,,QXec110_29,12,1,14,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,IXadPersCrankMon,10,1,12,3,);
B(B_VAROUT,,QXec110_30,12,1,14,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,IXaddUpperLimOk,10,1,12,3,);
B(B_VAROUT,,QXec110_31,12,1,14,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,IXaddLowerLimOk,10,1,12,3,);
B(B_VAROUT,,QXec110_32,12,1,14,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_F,sel,,12,1,17,6,);
B(B_VARIN,,MXengModPLDactiv,10,2,12,4,);
B(B_VARIN,,IXcontentCooWate,10,3,12,5,);
B(B_VARIN,,IXengCoolWatLevE,10,4,12,6,);
B(B_VAROUT,,QXec110_33,17,2,19,4,);
B(B_COMMENT,,Wäre eigentlich reserv. für IX2.89.1,25,1,41,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_F,sel,,12,1,17,6,);
B(B_VARIN,,MXengModPLDactiv,10,2,12,4,);
B(B_VARIN,,IXengCooWatTempE,10,4,12,6,);
B(B_VAROUT,,QXec110_34,17,2,19,4,);
B(B_VARIN,,IXcoolWatTemHigh,10,3,12,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_VARIN,,IXcoolWatSensDef,10,3,12,5,);
B(B_F,sel,,12,1,17,6,);
B(B_VARIN,,MXengModPLDactiv,10,2,12,4,);
B(B_VAROUT,,QXec110_35,17,2,19,4,);
B(B_VARIN,,FALSE,10,4,12,6,);
B(B_COMMENT,,Fehler asynchron,1,6,10,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_F,sel,,12,1,17,6,);
B(B_VARIN,,MXengModPLDactiv,10,2,12,4,);
B(B_VARIN,,IXairFilterDirty,10,3,12,5,);
B(B_VARIN,,IXengAirFilterE,10,4,12,6,);
B(B_VAROUT,,QXec110_36,17,2,19,4,);
B(B_COMMENT,,Wäre eigentlich reserv. für IX2.89.4,29,2,45,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_F,sel,,12,1,17,6,);
B(B_VARIN,,MXengModPLDactiv,10,2,12,4,);
B(B_VARIN,,IXlubOilPresLess,10,3,12,5,);
B(B_VARIN,,IXengLubOilPresE,10,4,12,6,);
B(B_VAROUT,,QXec110_37,17,2,19,4,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_VAROUT,,QXec110_38,17,2,19,4,);
B(B_VARIN,,IXlubOilSignHigh,10,3,12,5,);
B(B_F,sel,,12,1,17,6,);
B(B_VARIN,,FALSE,10,4,12,6,);
B(B_VARIN,,MXengModPLDactiv,10,2,12,4,);
B(B_COMMENT,,Fehler asynchron,1,6,10,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_VARIN,,IXlubOilSignLess,10,2,12,4,);
B(B_F,sel,,12,0,17,5,);
B(B_VAROUT,,QXec110_39,17,1,19,3,);
B(B_VARIN,,FALSE,10,3,12,5,);
B(B_VARIN,,MXengModPLDactiv,10,1,12,3,);
B(B_COMMENT,,Fehler asynchron,1,5,10,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_F,sel,,12,1,17,6,);
B(B_VARIN,,FALSE,10,4,12,6,);
B(B_VARIN,,MXengModPLDactiv,10,2,12,4,);
B(B_VAROUT,,QXec110_40,17,2,19,4,);
B(B_VARIN,,IXcharAirSigHigh,10,3,12,5,);
B(B_COMMENT,,Fehler asynchron,1,6,10,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_COMMENT,,Fehler asynchron,1,6,10,7,);
B(B_F,sel,,12,1,17,6,);
B(B_VARIN,,FALSE,10,4,12,6,);
B(B_VARIN,,MXengModPLDactiv,10,2,12,4,);
B(B_VAROUT,,QXec110_41,17,2,19,4,);
B(B_VARIN,,IXcharAirSigLess,10,3,12,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_VARIN,,IXengineOverspee,10,3,12,5,);
B(B_VARIN,,IXengSpeedHighE,10,4,12,6,);
B(B_F,sel,,12,1,17,6,);
B(B_VARIN,,MXengModPLDactiv,10,2,12,4,);
B(B_VAROUT,,QXec110_42,17,2,19,4,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_F,sel,,12,1,17,6,);
B(B_VARIN,,FALSE,10,4,12,6,);
B(B_VARIN,,MXengModPLDactiv,10,2,12,4,);
B(B_VAROUT,,QXec110_43,17,2,19,4,);
B(B_VARIN,,IXpickup1Defect,10,3,12,5,);
B(B_COMMENT,,Fehler asynchron,1,6,10,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_F,sel,,12,1,17,6,);
B(B_VARIN,,FALSE,10,4,12,6,);
B(B_VARIN,,MXengModPLDactiv,10,2,12,4,);
B(B_VAROUT,,QXec110_44,17,2,19,4,);
B(B_VARIN,,IXpickup2Defect,10,3,12,5,);
B(B_COMMENT,,Fehler asynchron,1,6,10,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_F,sel,,12,1,17,6,);
B(B_VARIN,,FALSE,10,4,12,6,);
B(B_VARIN,,MXengModPLDactiv,10,2,12,4,);
B(B_COMMENT,,Fehler asynchron,1,6,10,7,);
B(B_VAROUT,,QXec110_45,17,2,19,4,);
B(B_VARIN,,IXfeedbackDefect,10,3,12,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_F,sel,,12,1,17,6,);
B(B_VARIN,,FALSE,10,4,12,6,);
B(B_VARIN,,MXengModPLDactiv,10,2,12,4,);
B(B_COMMENT,,Fehler asynchron,1,6,10,7,);
B(B_VAROUT,,QXec110_46,17,2,19,4,);
B(B_VARIN,,IXedcDifference,10,3,12,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_F,sel,,12,1,17,6,);
B(B_VARIN,,FALSE,10,4,12,6,);
B(B_VARIN,,MXengModPLDactiv,10,2,12,4,);
B(B_COMMENT,,Fehler asynchron,1,6,10,7,);
B(B_VAROUT,,QXec110_47,17,2,19,4,);
B(B_VARIN,,IXpickupEmerStop,10,3,12,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,FALSE,10,1,12,3,);
B(B_VAROUT,,QXec110_48,12,1,14,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_F,sel,,12,1,17,6,);
B(B_VARIN,,FALSE,10,4,12,6,);
B(B_VARIN,,MXengModPLDactiv,10,2,12,4,);
B(B_COMMENT,,Fehler asynchron,1,6,10,7,);
B(B_VAROUT,,QXec110_49,17,2,19,4,);
B(B_VARIN,,IXglowPlugOn,10,3,12,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_F,sel,,12,1,17,6,);
B(B_VARIN,,FALSE,10,4,12,6,);
B(B_VARIN,,MXengModPLDactiv,10,2,12,4,);
B(B_COMMENT,,Fehler asynchron,1,6,10,7,);
B(B_VAROUT,,QXec110_50,17,2,19,4,);
B(B_VARIN,,IXgloPluValveOn,10,3,12,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_F,sel,,17,1,22,6,);
B(B_VARIN,,MXengModPLDactiv,15,2,17,4,);
B(B_VAROUT,,QXec110_51,22,2,24,4,);
B(B_VARIN,,IXflaStaConStat1,15,3,17,5,);
B(B_VARIN,,IXengPreheatBit0,10,5,12,7,);
B(B_F,not,,12,4,17,7,);
L(17,5,17,6);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_F,sel,,17,1,22,6,);
B(B_VARIN,,MXengModPLDactiv,15,2,17,4,);
B(B_F,not,,12,4,17,7,);
B(B_VARIN,,IXflaStaConStat2,15,3,17,5,);
B(B_VAROUT,,QXec110_52,22,2,24,4,);
B(B_VARIN,,IXengPreheatBit1,10,5,12,7,);
L(17,5,17,6);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_F,sel,,12,1,17,6,);
B(B_VARIN,,FALSE,10,4,12,6,);
B(B_VARIN,,MXengModPLDactiv,10,2,12,4,);
B(B_VAROUT,,QXec110_53,17,2,19,4,);
B(B_VARIN,,IXerrorGlowPlug,10,3,12,5,);
B(B_COMMENT,,Fehler asynchron,1,6,10,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_F,sel,,17,1,22,6,);
B(B_VARIN,,IXerrBattCharge,15,3,17,5,);
B(B_VARIN,,MXengModPLDactiv,15,2,17,4,);
B(B_VAROUT,,QXec110_54,22,2,24,4,);
B(B_F,not,,12,4,17,7,);
B(B_VARIN,,IXengCharging,10,5,12,7,);
L(17,5,17,6);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,FALSE,10,1,12,3,);
B(B_VAROUT,,QXec110_55,12,1,14,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,FALSE,10,1,12,3,);
B(B_VAROUT,,QXec110_56,12,1,14,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,FALSE,10,1,12,3,);
B(B_VAROUT,,QXec110_57,12,1,14,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,FALSE,10,1,12,3,);
B(B_VAROUT,,QXec110_58,12,1,14,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,FALSE,10,1,12,3,);
B(B_VAROUT,,QXec110_59,12,1,14,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,FALSE,10,1,12,3,);
B(B_VAROUT,,QXec110_60,12,1,14,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,FALSE,10,1,12,3,);
B(B_VAROUT,,QXec110_61,12,1,14,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,FALSE,10,1,12,3,);
B(B_VAROUT,,QXec110_62,12,1,14,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,FALSE,10,1,12,3,);
B(B_VAROUT,,QXec110_63,12,1,14,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,FALSE,10,1,12,3,);
B(B_VAROUT,,QXec110_64,12,1,14,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_RETURN,,,12,3,14,5,N);
B(B_VARIN,,MXenExtOperMode,10,3,12,5,);
B(B_COMMENT,,return~ if external operation is not enabled,2,1,23,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_F,@AND-2,,12,3,17,7,);
B(B_VAROUT,,MXecM110Timeout,17,4,19,6,);
B(B_VARIN,,MXecModulsActive,10,4,12,6,);
B(B_VARIN,,LXecM110Timeout,10,5,12,7,);
B(B_COMMENT,,generate timeout error,1,1,27,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 101 ;
        NETWORK_BODY
B(B_VARIN,,IXec110_02,9,14,11,16,);
B(B_VARIN,,IXec110_03,9,20,11,22,);
B(B_VARIN,,IXec110_04,9,26,11,28,);
B(B_VARIN,,IXec110_05,9,32,11,34,);
B(B_VARIN,,IXec110_06,9,38,11,40,);
B(B_VARIN,,IXec110_07,9,44,11,46,);
B(B_VARIN,,IXec110_08,9,50,11,52,);
B(B_VARIN,,IXec110_09,9,56,11,58,);
B(B_VARIN,,IXec110_10,9,62,11,64,);
B(B_VARIN,,IXec110_11,9,68,11,70,);
B(B_VARIN,,IXec110_12,9,74,11,76,);
B(B_VARIN,,IXec110_13,9,80,11,82,);
B(B_VARIN,,IXec110_14,9,86,11,88,);
B(B_VARIN,,IXec110_15,9,92,11,94,);
B(B_VARIN,,IXec110_16,9,98,11,100,);
B(B_VAROUT,,MXecHG2StopUp,19,66,21,68,);
B(B_VAROUT,,MXecHG2StopDn,19,72,21,74,);
B(B_VAROUT,,MXecAuxWinStopUp,19,78,21,80,);
B(B_VAROUT,,MXecAuxWinStopDn,19,84,21,86,);
B(B_VAROUT,,MXecAddWinStopUp,19,90,21,92,);
B(B_VAROUT,,MXecAddWinStopDn,19,96,21,98,);
B(B_F,sel,,14,5,19,10,);
B(B_F,sel,,14,11,19,16,);
B(B_F,sel,,14,17,19,22,);
B(B_F,sel,,14,53,19,58,);
B(B_F,sel,,14,59,19,64,);
B(B_F,sel,,14,65,19,70,);
B(B_F,sel,,14,71,19,76,);
B(B_F,sel,,14,77,19,82,);
B(B_F,sel,,14,83,19,88,);
B(B_F,sel,,14,89,19,94,);
B(B_F,sel,,14,95,19,100,);
B(B_F,sel,,14,23,19,28,);
B(B_F,sel,,14,29,19,34,);
B(B_F,sel,,14,35,19,40,);
B(B_F,sel,,14,41,19,46,);
B(B_F,sel,,14,47,19,52,);
B(B_VARIN,,IXec110_01,9,8,11,10,);
B(B_VAROUT,,MXecSgStopRi,19,6,21,8,);
B(B_VAROUT,,MXecSgStopLe,19,12,21,14,);
B(B_VAROUT,,MXecLGStopUp,19,18,21,20,);
B(B_VAROUT,,MXecLGStopDn,19,24,21,26,);
B(B_VAROUT,,MXecSgStpFreTurn,19,30,21,32,);
B(B_VAROUT,,Dummy,19,36,21,38,);
B(B_VAROUT,,Dummy,19,42,21,44,);
B(B_VAROUT,,MXecTGStop,19,48,21,50,);
B(B_VAROUT,,MXecHG1StopUp,19,54,21,56,);
B(B_VAROUT,,MXecHG1StopDn,19,60,21,62,);
B(B_VARIN,,IXec110_17,26,8,28,10,);
B(B_VARIN,,IXec110_18,26,14,28,16,);
B(B_VARIN,,IXec110_19,26,20,28,22,);
B(B_VARIN,,IXec110_20,26,26,28,28,);
B(B_VARIN,,IXec110_21,26,32,28,34,);
B(B_VARIN,,IXec110_22,26,38,28,40,);
B(B_VARIN,,IXec110_23,26,44,28,46,);
B(B_VARIN,,IXec110_24,26,50,28,52,);
B(B_VARIN,,IXec110_25,26,56,28,58,);
B(B_VARIN,,IXec110_26,26,62,28,64,);
B(B_VARIN,,IXec110_27,26,68,28,70,);
B(B_VARIN,,IXec110_28,26,74,28,76,);
B(B_VARIN,,IXec110_29,26,80,28,82,);
B(B_VARIN,,IXec110_30,26,86,28,88,);
B(B_VARIN,,IXec110_31,26,92,28,94,);
B(B_VAROUT,,MXecLeJoyAna2Vib,36,84,38,86,);
B(B_VAROUT,,MXecHg1ExitProg,36,90,38,92,);
B(B_VAROUT,,MXecHg2ExitProg,36,96,38,98,);
B(B_VAROUT,,MXecRelLeadPump,36,6,38,8,);
B(B_VAROUT,,Dummy,36,12,38,14,);
B(B_VAROUT,,Dummy,36,18,38,20,);
B(B_VAROUT,,Dummy,36,24,38,26,);
B(B_VAROUT,,MXecHg1extAnaSig,36,30,38,32,);
B(B_VAROUT,,MXecHg2extAnaSig,36,36,38,38,);
B(B_VAROUT,,MXecHg1preFastSp,36,42,38,44,);
B(B_VAROUT,,MXecHg2preFastSp,36,48,38,50,);
B(B_VAROUT,,MXecHydWinchSyn,36,54,38,56,);
B(B_VAROUT,,MXecPreHigEngSp,36,60,38,62,);
B(B_VAROUT,,MXecRiJoyAna1Vib,36,66,38,68,);
B(B_VAROUT,,MXecRiJoyAna2Vib,36,72,38,74,);
B(B_VAROUT,,MXecLeJoyAna1Vib,36,78,38,80,);
B(B_F,sel,,31,5,36,10,);
B(B_F,sel,,31,11,36,16,);
B(B_F,sel,,31,17,36,22,);
B(B_F,sel,,31,23,36,28,);
B(B_F,sel,,31,29,36,34,);
B(B_F,sel,,31,35,36,40,);
B(B_F,sel,,31,41,36,46,);
B(B_F,sel,,31,47,36,52,);
B(B_F,sel,,31,53,36,58,);
B(B_F,sel,,31,59,36,64,);
B(B_F,sel,,31,65,36,70,);
B(B_F,sel,,31,71,36,76,);
B(B_F,sel,,31,77,36,82,);
B(B_F,sel,,31,83,36,88,);
B(B_F,sel,,31,89,36,94,);
B(B_F,sel,,31,95,36,100,);
B(B_VARIN,,IXec110_32,26,98,28,100,);
B(B_VARIN,,MXecOutputTransm,9,6,11,8,);
B(B_VARIN,,FALSE,9,7,11,9,);
B(B_COMMENT,,transmission of digital output signals,2,1,18,2,);
L(12,14,14,14);
L(12,20,14,20);
L(12,26,14,26);
L(12,32,14,32);
L(12,38,14,38);
L(12,44,14,44);
L(12,50,14,50);
L(12,56,14,56);
L(12,62,14,62);
L(12,68,14,68);
L(12,74,14,74);
L(12,80,14,80);
L(12,86,14,86);
L(12,92,14,92);
L(12,98,14,98);
L(11,9,14,9);
L(11,15,14,15);
L(11,21,14,21);
L(11,27,14,27);
L(11,33,14,33);
L(11,39,14,39);
L(11,45,14,45);
L(11,51,14,51);
L(11,57,14,57);
L(11,63,14,63);
L(11,69,14,69);
L(11,75,14,75);
L(11,81,14,81);
L(11,87,14,87);
L(11,93,14,93);
L(11,99,14,99);
L(12,8,14,8);
L(13,7,14,7);
L(13,13,14,13);
L(13,19,14,19);
L(13,55,14,55);
L(13,61,14,61);
L(13,67,14,67);
L(13,73,14,73);
L(13,79,14,79);
L(13,85,14,85);
L(13,91,14,91);
L(13,97,14,97);
L(13,25,14,25);
L(13,31,14,31);
L(13,37,14,37);
L(13,43,14,43);
L(13,49,14,49);
L(12,8,12,98);
L(13,7,13,97);
L(29,92,31,92);
L(29,8,31,8);
L(29,14,31,14);
L(29,20,31,20);
L(29,26,31,26);
L(29,32,31,32);
L(29,38,31,38);
L(29,44,31,44);
L(29,50,31,50);
L(29,56,31,56);
L(29,62,31,62);
L(29,68,31,68);
L(29,74,31,74);
L(29,80,31,80);
L(29,86,31,86);
L(30,91,30,97);
L(29,92,29,98);
L(29,98,31,98);
L(28,9,31,9);
L(28,15,31,15);
L(28,21,31,21);
L(28,27,31,27);
L(28,33,31,33);
L(28,39,31,39);
L(28,45,31,45);
L(28,51,31,51);
L(28,57,31,57);
L(28,63,31,63);
L(28,69,31,69);
L(28,75,31,75);
L(28,81,31,81);
L(28,87,31,87);
L(28,93,31,93);
L(30,7,31,7);
L(30,13,31,13);
L(30,19,31,19);
L(30,25,31,25);
L(30,31,31,31);
L(30,37,31,37);
L(30,43,31,43);
L(30,49,31,49);
L(30,55,31,55);
L(30,61,31,61);
L(30,67,31,67);
L(30,73,31,73);
L(30,79,31,79);
L(30,85,31,85);
L(30,91,31,91);
L(30,97,31,97);
L(30,7,30,91);
L(29,8,29,92);
L(28,99,31,99);
L(13,4,13,7);
L(13,4,30,4);
L(30,4,30,7);
L(12,5,12,8);
L(12,5,29,5);
L(29,5,29,8);
L(11,7,13,7);
L(11,8,12,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 99 ;
        NETWORK_BODY
B(B_VARIN,,IXec110_33,9,6,11,8,);
B(B_VARIN,,IXec110_36,9,24,11,26,);
B(B_VARIN,,IXec110_37,9,30,11,32,);
B(B_VARIN,,IXec110_38,9,36,11,38,);
B(B_VARIN,,IXec110_39,9,42,11,44,);
B(B_VARIN,,IXec110_40,9,48,11,50,);
B(B_VARIN,,IXec110_41,9,54,11,56,);
B(B_VARIN,,IXec110_42,9,60,11,62,);
B(B_VARIN,,IXec110_43,9,66,11,68,);
B(B_VARIN,,IXec110_44,9,72,11,74,);
B(B_VARIN,,IXec110_46,9,84,11,86,);
B(B_VARIN,,IXec110_47,9,90,11,92,);
B(B_VARIN,,IXec110_48,9,96,11,98,);
B(B_VARIN,,IXec110_45,9,78,11,80,);
B(B_VARIN,,IXec110_35,9,18,11,20,);
B(B_VARIN,,IXec110_34,9,12,11,14,);
B(B_VAROUT,,Dummy,19,28,21,30,);
B(B_VAROUT,,Dummy,19,34,21,36,);
B(B_VAROUT,,Dummy,19,40,21,42,);
B(B_VAROUT,,Dummy,19,46,21,48,);
B(B_VAROUT,,Dummy,19,94,21,96,);
B(B_VAROUT,,Dummy,19,88,21,90,);
B(B_VAROUT,,Dummy,19,82,21,84,);
B(B_VAROUT,,Dummy,19,76,21,78,);
B(B_VAROUT,,Dummy,19,70,21,72,);
B(B_VAROUT,,Dummy,19,64,21,66,);
B(B_VAROUT,,Dummy,19,58,21,60,);
B(B_VAROUT,,Dummy,19,52,21,54,);
B(B_F,sel,,14,3,19,8,);
B(B_F,sel,,14,9,19,14,);
B(B_F,sel,,14,15,19,20,);
B(B_F,sel,,14,21,19,26,);
B(B_F,sel,,14,27,19,32,);
B(B_F,sel,,14,33,19,38,);
B(B_F,sel,,14,39,19,44,);
B(B_F,sel,,14,45,19,50,);
B(B_F,sel,,14,51,19,56,);
B(B_F,sel,,14,57,19,62,);
B(B_F,sel,,14,63,19,68,);
B(B_F,sel,,14,69,19,74,);
B(B_F,sel,,14,75,19,80,);
B(B_F,sel,,14,81,19,86,);
B(B_F,sel,,14,87,19,92,);
B(B_F,sel,,14,93,19,98,);
B(B_VAROUT,,Dummy,19,4,21,6,);
B(B_VAROUT,,Dummy,19,10,21,12,);
B(B_VAROUT,,Dummy,19,16,21,18,);
B(B_VAROUT,,Dummy,19,22,21,24,);
B(B_VARIN,,IXec110_50,26,12,28,14,);
B(B_VARIN,,IXec110_51,26,18,28,20,);
B(B_VARIN,,IXec110_53,26,30,28,32,);
B(B_VARIN,,IXec110_54,26,36,28,38,);
B(B_VARIN,,IXec110_55,26,42,28,44,);
B(B_VARIN,,IXec110_56,26,48,28,50,);
B(B_VARIN,,IXec110_57,26,54,28,56,);
B(B_VARIN,,IXec110_58,26,60,28,62,);
B(B_VARIN,,IXec110_59,26,66,28,68,);
B(B_VARIN,,IXec110_60,26,72,28,74,);
B(B_VARIN,,IXec110_61,26,78,28,80,);
B(B_VARIN,,IXec110_62,26,84,28,86,);
B(B_VARIN,,IXec110_63,26,90,28,92,);
B(B_VARIN,,IXec110_52,26,24,28,26,);
B(B_VAROUT,,Dummy,36,10,38,12,);
B(B_VAROUT,,Dummy,36,16,38,18,);
B(B_VAROUT,,Dummy,36,22,38,24,);
B(B_VAROUT,,Dummy,36,28,38,30,);
B(B_VAROUT,,Dummy,36,34,38,36,);
B(B_VAROUT,,Dummy,36,40,38,42,);
B(B_VAROUT,,Dummy,36,52,38,54,);
B(B_VAROUT,,Dummy,36,58,38,60,);
B(B_VAROUT,,Dummy,36,70,38,72,);
B(B_VAROUT,,Dummy,36,94,38,96,);
B(B_VAROUT,,Dummy,36,82,38,84,);
B(B_VAROUT,,Dummy,36,88,38,90,);
B(B_VAROUT,,Dummy,36,76,38,78,);
B(B_VAROUT,,Dummy,36,64,38,66,);
B(B_VAROUT,,Dummy,36,46,38,48,);
B(B_VARIN,,IXec110_64,29,96,31,98,);
B(B_F,sel,,31,9,36,14,);
B(B_F,sel,,31,15,36,20,);
B(B_F,sel,,31,21,36,26,);
B(B_F,sel,,31,27,36,32,);
B(B_F,sel,,31,33,36,38,);
B(B_F,sel,,31,39,36,44,);
B(B_F,sel,,31,45,36,50,);
B(B_F,sel,,31,51,36,56,);
B(B_F,sel,,31,57,36,62,);
B(B_F,sel,,31,63,36,68,);
B(B_F,sel,,31,69,36,74,);
B(B_F,sel,,31,75,36,80,);
B(B_F,sel,,31,81,36,86,);
B(B_F,sel,,31,87,36,92,);
B(B_F,sel,,31,93,36,98,);
B(B_VARIN,,IXec110_49,26,6,28,8,);
B(B_VAROUT,,Dummy,36,4,38,6,);
B(B_F,sel,,31,3,36,8,);
B(B_VARIN,,FALSE,9,5,11,7,);
B(B_VARIN,,MXecOutputTransm,9,4,11,6,);
L(11,7,14,7);
L(11,19,14,19);
L(11,25,14,25);
L(11,31,14,31);
L(11,37,14,37);
L(11,43,14,43);
L(11,49,14,49);
L(11,55,14,55);
L(11,61,14,61);
L(11,67,14,67);
L(11,73,14,73);
L(11,79,14,79);
L(11,85,14,85);
L(11,91,14,91);
L(11,97,14,97);
L(11,13,14,13);
L(12,6,14,6);
L(12,96,14,96);
L(12,90,14,90);
L(12,84,14,84);
L(12,78,14,78);
L(12,72,14,72);
L(12,66,14,66);
L(12,60,14,60);
L(12,54,14,54);
L(12,48,14,48);
L(12,42,14,42);
L(12,36,14,36);
L(12,30,14,30);
L(12,24,14,24);
L(12,18,14,18);
L(12,12,14,12);
L(13,5,14,5);
L(13,11,14,11);
L(13,17,14,17);
L(13,23,14,23);
L(13,29,14,29);
L(13,35,14,35);
L(13,41,14,41);
L(13,47,14,47);
L(13,53,14,53);
L(13,59,14,59);
L(13,65,14,65);
L(13,71,14,71);
L(13,77,14,77);
L(13,83,14,83);
L(13,89,14,89);
L(13,95,14,95);
L(13,5,13,95);
L(12,6,12,96);
L(28,13,31,13);
L(28,19,31,19);
L(28,25,31,25);
L(28,31,31,31);
L(28,37,31,37);
L(28,43,31,43);
L(28,49,31,49);
L(28,55,31,55);
L(28,61,31,61);
L(28,67,31,67);
L(28,73,31,73);
L(28,79,31,79);
L(28,91,31,91);
L(29,96,31,96);
L(29,90,31,90);
L(29,78,31,78);
L(29,72,31,72);
L(29,66,31,66);
L(29,60,31,60);
L(29,54,31,54);
L(29,48,31,48);
L(29,42,31,42);
L(29,36,31,36);
L(29,30,31,30);
L(29,24,31,24);
L(29,18,31,18);
L(29,12,31,12);
L(30,11,31,11);
L(30,17,31,17);
L(30,23,31,23);
L(30,29,31,29);
L(30,35,31,35);
L(30,41,31,41);
L(30,47,31,47);
L(30,53,31,53);
L(30,59,31,59);
L(30,65,31,65);
L(30,71,31,71);
L(30,77,31,77);
L(30,83,31,83);
L(30,89,31,89);
L(30,95,31,95);
L(29,84,31,84);
L(28,85,31,85);
L(28,7,31,7);
L(29,6,31,6);
L(30,5,31,5);
L(30,5,30,71);
L(29,6,29,72);
L(30,71,30,95);
L(29,72,29,96);
L(11,6,12,6);
L(11,5,13,5);
L(13,2,13,5);
L(12,3,12,6);
L(30,3,30,5);
L(13,2,30,2);
L(30,2,30,3);
L(12,3,29,3);
L(29,3,29,6);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_COMMENT,,release external control hg1,1,1,27,2,);
B(B_FB,RS,RS1,31,3,36,7,);
B(B_VARIN,,MXecHg1extAnaSig,15,4,17,6,);
B(B_F,@AND-2,,17,3,22,7,);
B(B_F,@AND-3,,24,7,29,12,NN);
B(B_VARIN,,MXhg1PumpInZero,22,10,24,12,);
B(B_VARIN,,MXecHg1extAnaSig,22,9,24,11,);
B(B_VAROUT,,MXecHg1RelExtCon,36,4,38,6,);
B(B_VARIN,,MDhg1JoySignal,9,6,11,8,);
B(B_F,@EQ-2,,11,5,16,9,);
B(B_VARIN,,0.0,9,7,11,9,);
L(30,6,30,9);
L(30,6,31,6);
L(23,5,23,9);
L(22,5,31,5);
L(23,9,24,9);
L(29,9,30,9);
L(17,6,17,7);
L(16,7,17,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 14 ;
        NETWORK_BODY
B(B_F,sel,,12,6,17,11,);
B(B_VARIN,,MXecHg1RelExtCon,9,4,11,6,);
B(B_VARIN,,MXhg1ExtAnalSign,10,8,12,10,);
B(B_VARIN,,TRUE,10,9,12,11,);
B(B_FB,F_TRIG,F_TRIG1,12,3,19,6,);
B(B_VARIN,,FALSE,17,11,19,13,);
B(B_F,sel,,20,5,25,10,);
B(B_VAROUT,,MXhg1ExtAnalSign,25,6,27,8,);
B(B_COMMENT,,set External control of hg1,1,1,27,2,);
L(11,8,12,8);
L(11,5,11,8);
L(19,5,19,7);
L(19,7,20,7);
L(11,5,12,5);
L(17,8,20,8);
L(19,9,20,9);
L(19,9,19,12);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_COMMENT,,release external control hg2,1,1,27,2,);
B(B_FB,RS,RS2,31,3,36,7,);
B(B_VARIN,,MXecHg2extAnaSig,15,4,17,6,);
B(B_F,@AND-2,,17,3,22,7,);
B(B_F,@AND-3,,24,7,29,12,NN);
B(B_VARIN,,MXhg2PumpInZero,22,10,24,12,);
B(B_VARIN,,MXecHg2extAnaSig,22,9,24,11,);
B(B_VAROUT,,MXecHg2RelExtCon,36,4,38,6,);
B(B_VARIN,,MDhg2JoySignal,9,6,11,8,);
B(B_F,@EQ-2,,11,5,16,9,);
B(B_VARIN,,0.0,9,7,11,9,);
L(30,6,30,9);
L(30,6,31,6);
L(23,5,23,9);
L(22,5,31,5);
L(23,9,24,9);
L(29,9,30,9);
L(17,6,17,7);
L(16,7,17,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 14 ;
        NETWORK_BODY
B(B_F,sel,,12,6,17,11,);
B(B_VARIN,,MXecHg2RelExtCon,9,4,11,6,);
B(B_VARIN,,MXhg2ExtAnalSign,10,8,12,10,);
B(B_VARIN,,TRUE,10,9,12,11,);
B(B_FB,F_TRIG,F_TRIG2,12,3,19,6,);
B(B_VARIN,,FALSE,17,11,19,13,);
B(B_F,sel,,20,5,25,10,);
B(B_VAROUT,,MXhg2ExtAnalSign,25,6,27,8,);
B(B_COMMENT,,set External control of hg2,1,1,27,2,);
L(11,8,12,8);
L(11,5,11,8);
L(19,5,19,7);
L(19,7,20,7);
L(11,5,12,5);
L(17,8,20,8);
L(19,9,20,9);
L(19,9,19,12);
        END_NETWORK_BODY
    END_NET_WORK
END_BODY
END_PROGRAM

PROGRAM ADinterMasX3V050
	VAR_EXTERNAL 
		IXec111_01: BOOL:=FALSE;
			(*external control master modul 111 *)
		IXec111_02: BOOL:=FALSE;
			(*external control master modul 111*)
		IXec111_03: BOOL:=FALSE;
			(*external control master modul 111*)
		IXec111_04: BOOL:=FALSE;
			(*external control master modul 111*)
		IXec111_05: BOOL:=FALSE;
			(*external control master modul 111*)
		IXec111_06: BOOL:=FALSE;
			(*external control master modul 111*)
		IXec111_07: BOOL:=FALSE;
			(*external control master modul 111*)
		IXec111_08: BOOL:=FALSE;
			(*external control master modul 111*)
		IXec111_09: BOOL:=FALSE;
			(*external control master modul 111*)
		IXec111_10: BOOL:=FALSE;
			(*external control master modul 111*)
		IXec111_11: BOOL:=FALSE;
			(*external control master modul 111*)
		IXec111_12: BOOL:=FALSE;
			(*external control master modul 111*)
		IXec111_13: BOOL:=FALSE;
			(*external control master modul 111*)
		IXec111_14: BOOL:=FALSE;
			(*external control master modul 111*)
		IXec111_15: BOOL:=FALSE;
			(*external control master modul 111*)
		IXec111_16: BOOL:=FALSE;
			(*external control master modul 111*)
		IXec111_17: BOOL:=FALSE;
			(*external control master modul 111*)
		IXec111_18: BOOL:=FALSE;
			(*external control master modul 111*)
		IXec111_19: BOOL:=FALSE;
			(*external control master modul 111*)
		IXec111_20: BOOL:=FALSE;
			(*external control master modul 111*)
		IXec111_21: BOOL:=FALSE;
			(*external control master modul 111*)
		IXec111_22: BOOL:=FALSE;
			(*external control master modul 111*)
		IXec111_23: BOOL:=FALSE;
			(*external control master modul 111*)
		IXec111_24: BOOL:=FALSE;
			(*external control master modul 111*)
		IXec111_25: BOOL:=FALSE;
			(*external control master modul 111*)
		IXec111_26: BOOL:=FALSE;
			(*external control master modul 111*)
		IXec111_27: BOOL:=FALSE;
			(*external control master modul 111*)
		IXec111_28: BOOL:=FALSE;
			(*external control master modul 111*)
		IXec111_29: BOOL:=FALSE;
			(*external control master modul 111*)
		IXec111_30: BOOL:=FALSE;
			(*external control master modul 111*)
		IXec111_31: BOOL:=FALSE;
			(*external control master modul 111*)
		IXec111_32: BOOL:=FALSE;
			(*external control master modul 111*)
		IXec111_33: BOOL:=FALSE;
			(*external control master modul 111*)
		IXec111_34: BOOL:=FALSE;
			(*external control master modul 111*)
		IXec111_35: BOOL:=FALSE;
			(*external control master modul 111*)
		IXec111_36: BOOL:=FALSE;
			(*external control master modul 111*)
		IXec111_37: BOOL:=FALSE;
			(*external control master modul 111*)
		IXec111_38: BOOL:=FALSE;
			(*external control master modul 111*)
		IXec111_39: BOOL:=FALSE;
			(*external control master modul 111*)
		IXec111_40: BOOL:=FALSE;
			(*external control master modul 111*)
		IXec111_41: BOOL:=FALSE;
			(*external control master modul 111*)
		IXec111_42: BOOL:=FALSE;
			(*external control master modul 111*)
		IXec111_43: BOOL:=FALSE;
			(*external control master modul 111*)
		IXec111_44: BOOL:=FALSE;
			(*external control master modul 111*)
		IXec111_45: BOOL:=FALSE;
			(*external control master modul 111*)
		IXec111_46: BOOL:=FALSE;
			(*external control master modul 111*)
		IXec111_47: BOOL:=FALSE;
			(*external control master modul 111*)
		IXec111_48: BOOL:=FALSE;
			(*external control master modul 111*)
		IXec111_49: BOOL:=FALSE;
			(*external control master modul 111*)
		IXec111_50: BOOL:=FALSE;
			(*external control master modul 111*)
		IXec111_51: BOOL:=FALSE;
			(*external control master modul 111*)
		IXec111_52: BOOL:=FALSE;
			(*external control master modul 111*)
		IXec111_53: BOOL:=FALSE;
			(*external control master modul 111*)
		IXec111_54: BOOL:=FALSE;
			(*external control master modul 111*)
		IXec111_55: BOOL:=FALSE;
			(*external control master modul 111*)
		IXec111_56: BOOL:=FALSE;
			(*external control master modul 111*)
		IXec111_57: BOOL:=FALSE;
			(*external control master modul 111*)
		IXec111_58: BOOL:=FALSE;
			(*external control master modul 111*)
		IXec111_59: BOOL:=FALSE;
			(*external control master modul 111*)
		IXec111_60: BOOL:=FALSE;
			(*external control master modul 111*)
		IXec111_61: BOOL:=FALSE;
			(*external control master modul 111*)
		IXec111_62: BOOL:=FALSE;
			(*external control master modul 111*)
		IXec111_63: BOOL:=FALSE;
			(*external control master modul 111*)
		IXec111_64: BOOL:=FALSE;
			(*external control master modul 111*)
		QXec111_01: BOOL:=FALSE;
			(*external control master modul 111*)
		QXec111_02: BOOL:=FALSE;
			(*external control master modul 111*)
		QXec111_03: BOOL:=FALSE;
			(*external control master modul 111*)
		QXec111_04: BOOL:=FALSE;
			(*external control master modul 111*)
		QXec111_05: BOOL:=FALSE;
			(*external control master modul 111*)
		QXec111_06: BOOL:=FALSE;
			(*external control master modul 111*)
		QXec111_07: BOOL:=FALSE;
			(*external control master modul 111*)
		QXec111_08: BOOL:=FALSE;
			(*external control master modul 111*)
		QXec111_09: BOOL:=FALSE;
			(*external control master modul 111*)
		QXec111_10: BOOL:=FALSE;
			(*external control master modul 111*)
		QXec111_11: BOOL:=FALSE;
			(*external control master modul 111*)
		QXec111_12: BOOL:=FALSE;
			(*external control master modul 111*)
		QXec111_13: BOOL:=FALSE;
			(*external control master modul 111*)
		QXec111_14: BOOL:=FALSE;
			(*external control master modul 111*)
		QXec111_15: BOOL:=FALSE;
			(*external control master modul 111*)
		QXec111_16: BOOL:=FALSE;
			(*external control master modul 111*)
		QXec111_17: BOOL:=FALSE;
			(*external control master modul 111*)
		QXec111_18: BOOL:=FALSE;
			(*external control master modul 111*)
		QXec111_19: BOOL:=FALSE;
			(*external control master modul 111*)
		QXec111_20: BOOL:=FALSE;
			(*external control master modul 111*)
		QXec111_21: BOOL:=FALSE;
			(*external control master modul 111*)
		QXec111_22: BOOL:=FALSE;
			(*external control master modul 111*)
		QXec111_23: BOOL:=FALSE;
			(*external control master modul 111*)
		QXec111_24: BOOL:=FALSE;
			(*external control master modul 111*)
		QXec111_25: BOOL:=FALSE;
			(*external control master modul 111*)
		QXec111_26: BOOL:=FALSE;
			(*external control master modul 111*)
		QXec111_27: BOOL:=FALSE;
			(*external control master modul 111*)
		QXec111_28: BOOL:=FALSE;
			(*external control master modul 111*)
		QXec111_29: BOOL:=FALSE;
			(*external control master modul 111*)
		QXec111_30: BOOL:=FALSE;
			(*external control master modul 111*)
		QXec111_31: BOOL:=FALSE;
			(*external control master modul 111*)
		QXec111_32: BOOL:=FALSE;
			(*external control master modul 111*)
		QXec111_33: BOOL:=FALSE;
			(*external control master modul 111*)
		QXec111_34: BOOL:=FALSE;
			(*external control master modul 111*)
		QXec111_35: BOOL:=FALSE;
			(*external control master modul 111*)
		QXec111_36: BOOL:=FALSE;
			(*external control master modul 111*)
		QXec111_37: BOOL:=FALSE;
			(*external control master modul 111*)
		QXec111_38: BOOL:=FALSE;
			(*external control master modul 111*)
		QXec111_39: BOOL:=FALSE;
			(*external control master modul 111*)
		QXec111_40: BOOL:=FALSE;
			(*external control master modul 111*)
		QXec111_41: BOOL:=FALSE;
			(*external control master modul 111*)
		QXec111_42: BOOL:=FALSE;
			(*external control master modul 111*)
		QXec111_43: BOOL:=FALSE;
			(*external control master modul 111*)
		QXec111_44: BOOL:=FALSE;
			(*external control master modul 111*)
		QXec111_45: BOOL:=FALSE;
			(*external control master modul 111*)
		QXec111_46: BOOL:=FALSE;
			(*external control master modul 111*)
		QXec111_47: BOOL:=FALSE;
			(*external control master modul 111*)
		QXec111_48: BOOL:=FALSE;
			(*external control master modul 111*)
		QXec111_49: BOOL:=FALSE;
			(*external control master modul 111*)
		QXec111_50: BOOL:=FALSE;
			(*external control master modul 111*)
		QXec111_51: BOOL:=FALSE;
			(*external control master modul 111*)
		QXec111_52: BOOL:=FALSE;
			(*external control master modul 111*)
		QXec111_53: BOOL:=FALSE;
			(*external control master modul 111*)
		QXec111_54: BOOL:=FALSE;
			(*external control master modul 111*)
		QXec111_55: BOOL:=FALSE;
			(*external control master modul 111*)
		QXec111_56: BOOL:=FALSE;
			(*external control master modul 111*)
		QXec111_57: BOOL:=FALSE;
			(*external control master modul 111*)
		QXec111_58: BOOL:=FALSE;
			(*external control master modul 111*)
		QXec111_59: BOOL:=FALSE;
			(*external control master modul 111*)
		QXec111_60: BOOL:=FALSE;
			(*external control master modul 111*)
		QXec111_61: BOOL:=FALSE;
			(*external control master modul 111*)
		QXec111_62: BOOL:=FALSE;
			(*external control master modul 111*)
		QXec111_63: BOOL:=FALSE;
			(*external control master modul 111*)
		QXec111_64: BOOL:=FALSE;
			(*external control master modul 111*)
		MXecM111Timeout: BOOL:=FALSE;
			(*external control module 111 timeout*)
		MXecM111isActive: BOOL:=FALSE;
			(*external control module 111 is active*)
		MXecModulsActive: BOOL:=FALSE;
			(*external control module are active*)
		MXecOutputTransm: BOOL:=FALSE;
			(*external control output transmit*)
		MXminEngineSpeed: BOOL:=FALSE;
			(*minimum engine speed reached*)
		MXstopAllFunctio: BOOL:=FALSE;
			(*stop all excavator functions*)
		MXlmlStop: BOOL:=FALSE;
			(*lml stop*)
		MXecHg1RelExtCon: BOOL:=FALSE;
			(*external control release hg1*)
		MXecHg2RelExtCon: BOOL:=FALSE;
			(*external control release hg2*)
		MXlimitSwBridged: BOOL:=FALSE;
			(*X23 limit switches bridged for assembly operation*)
		MXhg1EnPowStage: BOOL:=FALSE;
			(*HG 1 enable power stage lifting or lowering*)
		MXhg2EnPowStage: BOOL:=FALSE;
			(*HG 2 enable power stage lifting or lowering*)
		MXlgEnPowStage: BOOL:=FALSE;
			(*LG enable power stage lifting or lowering*)
		MXecWatchdogBit: BOOL:=FALSE;
			(*external control watchdog bit*)
		MXecWatchdogFB: BOOL:=FALSE;
			(*external control watchdog feedback*)
	END_VAR
	VAR_EXTERNAL RETAIN
		MXenExtOperMode: BOOL:=FALSE;
			(*enable external operation mode*)
		MX2TJoystick: BOOL:=FALSE;
			(*enable double T joystick*)
	END_VAR
	VAR_EXTERNAL CONSTANT RETAIN
		CXadChangeJoysti: BOOL:=FALSE;
			(*add. change joystick hg1 and hg2*)
	END_VAR
	VAR 
		ModuleState1: ModuleState;
		Dummy: BOOL:=FALSE;
		LXecM111Timeout: BOOL:=FALSE;
	END_VAR
'FBD'
BODY
    WORKSPACE
        NETWORK_LIST_TYPE := NWTYPEFBD ;
        ACTIVE_NETWORK := 0 ;
    END_WORKSPACE
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_FB,ModuleState,ModuleState1,10,3,22,9,);
B(B_VARIN,,3,8,4,10,6,);
B(B_VARIN,,111,8,5,10,7,);
B(B_VARIN,,MXenExtOperMode,8,6,10,8,);
B(B_VARIN,,FALSE,8,7,10,9,);
B(B_VAROUT,,LXecM111Timeout,22,4,24,6,);
B(B_VAROUT,,MXecM111isActive,22,5,24,7,);
B(B_COMMENT,,activate module 111 for inputs/outputs transmission with external control,2,1,29,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_VARIN,,FALSE,9,3,11,5,);
B(B_VAROUT,,QXec111_01,11,3,13,5,);
B(B_COMMENT,,transmission of digital input signals,2,1,18,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,FALSE,9,1,11,3,);
B(B_VAROUT,,QXec111_02,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,FALSE,9,1,11,3,);
B(B_VAROUT,,QXec111_03,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,FALSE,9,1,11,3,);
B(B_VAROUT,,QXec111_04,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,FALSE,9,1,11,3,);
B(B_VAROUT,,QXec111_05,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,FALSE,9,1,11,3,);
B(B_VAROUT,,QXec111_06,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,FALSE,9,1,11,3,);
B(B_VAROUT,,QXec111_07,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,FALSE,9,1,11,3,);
B(B_VAROUT,,QXec111_08,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,FALSE,9,1,11,3,);
B(B_VAROUT,,QXec111_09,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,FALSE,9,1,11,3,);
B(B_VAROUT,,QXec111_10,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,FALSE,9,1,11,3,);
B(B_VAROUT,,QXec111_11,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,FALSE,9,1,11,3,);
B(B_VAROUT,,QXec111_12,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,FALSE,9,1,11,3,);
B(B_VAROUT,,QXec111_13,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,FALSE,9,1,11,3,);
B(B_VAROUT,,QXec111_14,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,FALSE,9,1,11,3,);
B(B_VAROUT,,QXec111_15,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,FALSE,9,1,11,3,);
B(B_VAROUT,,QXec111_16,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,FALSE,9,1,11,3,);
B(B_VAROUT,,QXec111_17,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,FALSE,9,1,11,3,);
B(B_VAROUT,,QXec111_18,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,FALSE,9,1,11,3,);
B(B_VAROUT,,QXec111_19,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,FALSE,9,1,11,3,);
B(B_VAROUT,,QXec111_20,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,FALSE,9,1,11,3,);
B(B_VAROUT,,QXec111_21,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,FALSE,9,1,11,3,);
B(B_VAROUT,,QXec111_22,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,FALSE,9,1,11,3,);
B(B_VAROUT,,QXec111_23,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,FALSE,9,1,11,3,);
B(B_VAROUT,,QXec111_24,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,FALSE,9,1,11,3,);
B(B_VAROUT,,QXec111_25,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,FALSE,9,1,11,3,);
B(B_VAROUT,,QXec111_26,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,FALSE,9,1,11,3,);
B(B_VAROUT,,QXec111_27,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,FALSE,9,1,11,3,);
B(B_VAROUT,,QXec111_28,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,FALSE,9,1,11,3,);
B(B_VAROUT,,QXec111_29,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,FALSE,9,1,11,3,);
B(B_VAROUT,,QXec111_30,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,FALSE,9,1,11,3,);
B(B_VAROUT,,QXec111_31,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,FALSE,9,1,11,3,);
B(B_VAROUT,,QXec111_32,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,MXminEngineSpeed,9,1,11,3,);
B(B_VAROUT,,QXec111_33,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,MXstopAllFunctio,9,1,11,3,);
B(B_VAROUT,,QXec111_34,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,MXlmlStop,9,1,11,3,);
B(B_VAROUT,,QXec111_35,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,MX2TJoystick,9,1,11,3,);
B(B_VAROUT,,QXec111_36,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,MXenExtOperMode,9,1,11,3,);
B(B_VAROUT,,QXec111_37,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,CXadChangeJoysti,9,1,11,3,);
B(B_VAROUT,,QXec111_38,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,MXecHg1RelExtCon,9,1,11,3,);
B(B_VAROUT,,QXec111_39,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,MXecHg2RelExtCon,9,1,11,3,);
B(B_VAROUT,,QXec111_40,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,MXlimitSwBridged,9,1,11,3,);
B(B_VAROUT,,QXec111_41,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,MXhg1EnPowStage,9,1,11,3,);
B(B_VAROUT,,QXec111_42,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,MXhg2EnPowStage,9,1,11,3,);
B(B_VAROUT,,QXec111_43,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,MXlgEnPowStage,9,1,11,3,);
B(B_VAROUT,,QXec111_44,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,FALSE,9,1,11,3,);
B(B_VAROUT,,QXec111_45,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,FALSE,9,1,11,3,);
B(B_VAROUT,,QXec111_46,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,FALSE,9,1,11,3,);
B(B_VAROUT,,QXec111_47,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,FALSE,9,1,11,3,);
B(B_VAROUT,,QXec111_48,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,FALSE,9,1,11,3,);
B(B_VAROUT,,QXec111_49,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,FALSE,9,1,11,3,);
B(B_VAROUT,,QXec111_50,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,FALSE,9,1,11,3,);
B(B_VAROUT,,QXec111_51,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,FALSE,9,1,11,3,);
B(B_VAROUT,,QXec111_52,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,FALSE,9,1,11,3,);
B(B_VAROUT,,QXec111_53,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,FALSE,9,1,11,3,);
B(B_VAROUT,,QXec111_54,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,FALSE,9,1,11,3,);
B(B_VAROUT,,QXec111_55,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,FALSE,9,1,11,3,);
B(B_VAROUT,,QXec111_56,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,FALSE,9,1,11,3,);
B(B_VAROUT,,QXec111_57,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,FALSE,9,1,11,3,);
B(B_VAROUT,,QXec111_58,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,FALSE,9,1,11,3,);
B(B_VAROUT,,QXec111_59,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,FALSE,9,1,11,3,);
B(B_VAROUT,,QXec111_60,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,FALSE,9,1,11,3,);
B(B_VAROUT,,QXec111_61,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,FALSE,9,1,11,3,);
B(B_VAROUT,,QXec111_62,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,FALSE,9,1,11,3,);
B(B_VAROUT,,QXec111_63,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VAROUT,,QXec111_64,11,1,13,3,);
B(B_VARIN,,MXecWatchdogBit,9,1,11,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,return~ if external operation is not enabled,2,1,18,2,);
B(B_RETURN,,,11,3,13,5,N);
B(B_VARIN,,MXenExtOperMode,9,3,11,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_F,@AND-2,,12,3,17,7,);
B(B_VAROUT,,MXecM111Timeout,17,4,19,6,);
B(B_VARIN,,MXecModulsActive,10,4,12,6,);
B(B_VARIN,,LXecM111Timeout,10,5,12,7,);
B(B_COMMENT,,generate timeout error,1,1,27,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 101 ;
        NETWORK_BODY
B(B_VARIN,,IXec111_02,9,14,11,16,);
B(B_VARIN,,IXec111_03,9,20,11,22,);
B(B_VARIN,,IXec111_04,9,26,11,28,);
B(B_VARIN,,IXec111_05,9,32,11,34,);
B(B_VARIN,,IXec111_06,9,38,11,40,);
B(B_VARIN,,IXec111_07,9,44,11,46,);
B(B_VARIN,,IXec111_08,9,50,11,52,);
B(B_VARIN,,IXec111_09,9,56,11,58,);
B(B_VARIN,,IXec111_10,9,62,11,64,);
B(B_VARIN,,IXec111_11,9,68,11,70,);
B(B_VARIN,,IXec111_12,9,74,11,76,);
B(B_VARIN,,IXec111_13,9,80,11,82,);
B(B_VARIN,,IXec111_14,9,86,11,88,);
B(B_VARIN,,IXec111_15,9,92,11,94,);
B(B_VARIN,,IXec111_16,9,98,11,100,);
B(B_VARIN,,IXec111_01,9,8,11,10,);
B(B_VAROUT,,Dummy,19,6,21,8,);
B(B_VAROUT,,Dummy,19,12,21,14,);
B(B_VAROUT,,Dummy,19,18,21,20,);
B(B_VAROUT,,Dummy,19,24,21,26,);
B(B_VAROUT,,Dummy,19,30,21,32,);
B(B_VAROUT,,Dummy,19,36,21,38,);
B(B_VAROUT,,Dummy,19,42,21,44,);
B(B_VAROUT,,Dummy,19,48,21,50,);
B(B_VAROUT,,Dummy,19,54,21,56,);
B(B_VAROUT,,Dummy,19,60,21,62,);
B(B_VAROUT,,Dummy,19,66,21,68,);
B(B_VAROUT,,Dummy,19,72,21,74,);
B(B_VAROUT,,Dummy,19,78,21,80,);
B(B_VAROUT,,Dummy,19,84,21,86,);
B(B_VAROUT,,Dummy,19,90,21,92,);
B(B_VAROUT,,Dummy,19,96,21,98,);
B(B_F,sel,,14,5,19,10,);
B(B_F,sel,,14,11,19,16,);
B(B_F,sel,,14,17,19,22,);
B(B_F,sel,,14,53,19,58,);
B(B_F,sel,,14,59,19,64,);
B(B_F,sel,,14,65,19,70,);
B(B_F,sel,,14,71,19,76,);
B(B_F,sel,,14,77,19,82,);
B(B_F,sel,,14,83,19,88,);
B(B_F,sel,,14,89,19,94,);
B(B_F,sel,,14,95,19,100,);
B(B_F,sel,,14,23,19,28,);
B(B_F,sel,,14,29,19,34,);
B(B_F,sel,,14,35,19,40,);
B(B_F,sel,,14,41,19,46,);
B(B_F,sel,,14,47,19,52,);
B(B_VARIN,,IXec111_17,27,8,29,10,);
B(B_VARIN,,IXec111_18,27,14,29,16,);
B(B_VARIN,,IXec111_19,27,20,29,22,);
B(B_VARIN,,IXec111_20,27,26,29,28,);
B(B_VARIN,,IXec111_21,27,32,29,34,);
B(B_VARIN,,IXec111_22,27,38,29,40,);
B(B_VARIN,,IXec111_23,27,44,29,46,);
B(B_VARIN,,IXec111_24,27,50,29,52,);
B(B_VARIN,,IXec111_25,27,56,29,58,);
B(B_VARIN,,IXec111_26,27,62,29,64,);
B(B_VARIN,,IXec111_27,27,68,29,70,);
B(B_VARIN,,IXec111_28,27,74,29,76,);
B(B_VARIN,,IXec111_29,27,80,29,82,);
B(B_VARIN,,IXec111_30,27,86,29,88,);
B(B_VARIN,,IXec111_31,27,92,29,94,);
B(B_VAROUT,,Dummy,37,84,39,86,);
B(B_VAROUT,,Dummy,37,90,39,92,);
B(B_VAROUT,,Dummy,37,96,39,98,);
B(B_VAROUT,,Dummy,37,6,39,8,);
B(B_VAROUT,,Dummy,37,12,39,14,);
B(B_VAROUT,,Dummy,37,18,39,20,);
B(B_VAROUT,,Dummy,37,24,39,26,);
B(B_VAROUT,,Dummy,37,30,39,32,);
B(B_VAROUT,,Dummy,37,36,39,38,);
B(B_VAROUT,,Dummy,37,42,39,44,);
B(B_VAROUT,,Dummy,37,48,39,50,);
B(B_VAROUT,,Dummy,37,54,39,56,);
B(B_VAROUT,,Dummy,37,60,39,62,);
B(B_VAROUT,,Dummy,37,66,39,68,);
B(B_VAROUT,,Dummy,37,72,39,74,);
B(B_VAROUT,,Dummy,37,78,39,80,);
B(B_F,sel,,32,5,37,10,);
B(B_F,sel,,32,11,37,16,);
B(B_F,sel,,32,17,37,22,);
B(B_F,sel,,32,23,37,28,);
B(B_F,sel,,32,29,37,34,);
B(B_F,sel,,32,35,37,40,);
B(B_F,sel,,32,41,37,46,);
B(B_F,sel,,32,47,37,52,);
B(B_F,sel,,32,53,37,58,);
B(B_F,sel,,32,59,37,64,);
B(B_F,sel,,32,65,37,70,);
B(B_F,sel,,32,71,37,76,);
B(B_F,sel,,32,77,37,82,);
B(B_F,sel,,32,83,37,88,);
B(B_F,sel,,32,89,37,94,);
B(B_F,sel,,32,95,37,100,);
B(B_VARIN,,IXec111_32,27,98,29,100,);
B(B_VARIN,,MXecOutputTransm,9,6,11,8,);
B(B_VARIN,,FALSE,9,7,11,9,);
B(B_COMMENT,,transmission of digital output signals,2,1,18,2,);
L(12,14,14,14);
L(12,20,14,20);
L(12,26,14,26);
L(12,32,14,32);
L(12,38,14,38);
L(12,44,14,44);
L(12,50,14,50);
L(12,56,14,56);
L(12,62,14,62);
L(12,68,14,68);
L(12,74,14,74);
L(12,80,14,80);
L(12,86,14,86);
L(12,92,14,92);
L(12,98,14,98);
L(11,9,14,9);
L(11,15,14,15);
L(11,21,14,21);
L(11,27,14,27);
L(11,33,14,33);
L(11,39,14,39);
L(11,45,14,45);
L(11,51,14,51);
L(11,57,14,57);
L(11,63,14,63);
L(11,69,14,69);
L(11,75,14,75);
L(11,81,14,81);
L(11,87,14,87);
L(11,93,14,93);
L(11,99,14,99);
L(12,8,14,8);
L(13,7,14,7);
L(13,13,14,13);
L(13,19,14,19);
L(13,55,14,55);
L(13,61,14,61);
L(13,67,14,67);
L(13,73,14,73);
L(13,79,14,79);
L(13,85,14,85);
L(13,91,14,91);
L(13,97,14,97);
L(13,25,14,25);
L(13,31,14,31);
L(13,37,14,37);
L(13,43,14,43);
L(13,49,14,49);
L(13,7,13,97);
L(12,8,12,98);
L(30,92,32,92);
L(30,8,32,8);
L(30,14,32,14);
L(30,20,32,20);
L(30,26,32,26);
L(30,32,32,32);
L(30,38,32,38);
L(30,44,32,44);
L(30,50,32,50);
L(30,56,32,56);
L(30,62,32,62);
L(30,68,32,68);
L(30,74,32,74);
L(30,80,32,80);
L(30,86,32,86);
L(30,98,32,98);
L(29,9,32,9);
L(29,15,32,15);
L(29,21,32,21);
L(29,27,32,27);
L(29,33,32,33);
L(29,39,32,39);
L(29,45,32,45);
L(29,51,32,51);
L(29,57,32,57);
L(29,63,32,63);
L(29,69,32,69);
L(29,75,32,75);
L(29,81,32,81);
L(29,87,32,87);
L(29,93,32,93);
L(31,7,32,7);
L(31,13,32,13);
L(31,19,32,19);
L(31,25,32,25);
L(31,31,32,31);
L(31,37,32,37);
L(31,43,32,43);
L(31,49,32,49);
L(31,55,32,55);
L(31,61,32,61);
L(31,67,32,67);
L(31,73,32,73);
L(31,79,32,79);
L(31,85,32,85);
L(31,91,32,91);
L(31,97,32,97);
L(31,7,31,97);
L(30,8,30,98);
L(29,99,32,99);
L(12,5,12,8);
L(12,5,30,5);
L(30,5,30,8);
L(13,4,31,4);
L(31,4,31,7);
L(13,4,13,7);
L(11,8,12,8);
L(11,7,13,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 97 ;
        NETWORK_BODY
B(B_VARIN,,IXec111_33,9,5,11,7,);
B(B_VARIN,,IXec111_36,9,23,11,25,);
B(B_VARIN,,IXec111_37,9,29,11,31,);
B(B_VARIN,,IXec111_38,9,35,11,37,);
B(B_VARIN,,IXec111_39,9,41,11,43,);
B(B_VARIN,,IXec111_40,9,47,11,49,);
B(B_VARIN,,IXec111_41,9,53,11,55,);
B(B_VARIN,,IXec111_42,9,59,11,61,);
B(B_VARIN,,IXec111_43,9,65,11,67,);
B(B_VARIN,,IXec111_44,9,71,11,73,);
B(B_VARIN,,IXec111_46,9,83,11,85,);
B(B_VARIN,,IXec111_47,9,89,11,91,);
B(B_VARIN,,IXec111_48,9,95,11,97,);
B(B_VARIN,,IXec111_45,9,77,11,79,);
B(B_VARIN,,IXec111_35,9,17,11,19,);
B(B_VARIN,,IXec111_34,9,11,11,13,);
B(B_VAROUT,,Dummy,19,3,21,5,);
B(B_VAROUT,,Dummy,19,9,21,11,);
B(B_VAROUT,,Dummy,19,15,21,17,);
B(B_VAROUT,,Dummy,19,21,21,23,);
B(B_VAROUT,,Dummy,19,27,21,29,);
B(B_VAROUT,,Dummy,19,33,21,35,);
B(B_VAROUT,,Dummy,19,39,21,41,);
B(B_VAROUT,,Dummy,19,45,21,47,);
B(B_VAROUT,,Dummy,19,93,21,95,);
B(B_VAROUT,,Dummy,19,87,21,89,);
B(B_VAROUT,,Dummy,19,81,21,83,);
B(B_VAROUT,,Dummy,19,75,21,77,);
B(B_VAROUT,,Dummy,19,69,21,71,);
B(B_VAROUT,,Dummy,19,63,21,65,);
B(B_VAROUT,,Dummy,19,57,21,59,);
B(B_VAROUT,,Dummy,19,51,21,53,);
B(B_F,sel,,14,2,19,7,);
B(B_F,sel,,14,8,19,13,);
B(B_F,sel,,14,14,19,19,);
B(B_F,sel,,14,20,19,25,);
B(B_F,sel,,14,26,19,31,);
B(B_F,sel,,14,32,19,37,);
B(B_F,sel,,14,38,19,43,);
B(B_F,sel,,14,44,19,49,);
B(B_F,sel,,14,50,19,55,);
B(B_F,sel,,14,56,19,61,);
B(B_F,sel,,14,62,19,67,);
B(B_F,sel,,14,68,19,73,);
B(B_F,sel,,14,74,19,79,);
B(B_F,sel,,14,80,19,85,);
B(B_F,sel,,14,86,19,91,);
B(B_F,sel,,14,92,19,97,);
B(B_VARIN,,FALSE,9,4,11,6,);
B(B_VARIN,,MXecOutputTransm,9,3,11,5,);
B(B_VARIN,,IXec111_49,27,5,29,7,);
B(B_VARIN,,IXec111_50,27,11,29,13,);
B(B_VARIN,,IXec111_51,27,17,29,19,);
B(B_VARIN,,IXec111_53,27,29,29,31,);
B(B_VARIN,,IXec111_54,27,35,29,37,);
B(B_VARIN,,IXec111_55,27,41,29,43,);
B(B_VARIN,,IXec111_56,27,47,29,49,);
B(B_VARIN,,IXec111_57,27,53,29,55,);
B(B_VARIN,,IXec111_58,27,59,29,61,);
B(B_VARIN,,IXec111_59,27,65,29,67,);
B(B_VARIN,,IXec111_60,27,71,29,73,);
B(B_VARIN,,IXec111_61,27,77,29,79,);
B(B_VARIN,,IXec111_62,27,83,29,85,);
B(B_VARIN,,IXec111_63,27,89,29,91,);
B(B_VARIN,,IXec111_52,27,23,29,25,);
B(B_VAROUT,,Dummy,37,9,39,11,);
B(B_VAROUT,,Dummy,37,15,39,17,);
B(B_VAROUT,,Dummy,37,21,39,23,);
B(B_VAROUT,,Dummy,37,27,39,29,);
B(B_VAROUT,,Dummy,37,33,39,35,);
B(B_VAROUT,,Dummy,37,39,39,41,);
B(B_VAROUT,,Dummy,37,51,39,53,);
B(B_VAROUT,,Dummy,37,57,39,59,);
B(B_VAROUT,,Dummy,37,69,39,71,);
B(B_VAROUT,,MXecWatchdogFB,37,93,39,95,);
B(B_VAROUT,,Dummy,37,81,39,83,);
B(B_VAROUT,,Dummy,37,87,39,89,);
B(B_VAROUT,,Dummy,37,75,39,77,);
B(B_VAROUT,,Dummy,37,63,39,65,);
B(B_VAROUT,,Dummy,37,45,39,47,);
B(B_VAROUT,,Dummy,37,3,39,5,);
B(B_VARIN,,IXec111_64,30,95,32,97,);
B(B_F,sel,,32,2,37,7,);
B(B_F,sel,,32,8,37,13,);
B(B_F,sel,,32,14,37,19,);
B(B_F,sel,,32,20,37,25,);
B(B_F,sel,,32,26,37,31,);
B(B_F,sel,,32,32,37,37,);
B(B_F,sel,,32,38,37,43,);
B(B_F,sel,,32,44,37,49,);
B(B_F,sel,,32,50,37,55,);
B(B_F,sel,,32,56,37,61,);
B(B_F,sel,,32,62,37,67,);
B(B_F,sel,,32,68,37,73,);
B(B_F,sel,,32,74,37,79,);
B(B_F,sel,,32,80,37,85,);
B(B_F,sel,,32,86,37,91,);
B(B_F,sel,,32,92,37,97,);
L(11,6,14,6);
L(11,18,14,18);
L(11,24,14,24);
L(11,30,14,30);
L(11,36,14,36);
L(11,42,14,42);
L(11,48,14,48);
L(11,54,14,54);
L(11,60,14,60);
L(11,66,14,66);
L(11,72,14,72);
L(11,78,14,78);
L(11,84,14,84);
L(11,90,14,90);
L(11,96,14,96);
L(11,12,14,12);
L(12,5,14,5);
L(12,95,14,95);
L(12,89,14,89);
L(12,83,14,83);
L(12,77,14,77);
L(12,71,14,71);
L(12,65,14,65);
L(12,59,14,59);
L(12,53,14,53);
L(12,47,14,47);
L(12,41,14,41);
L(12,35,14,35);
L(12,29,14,29);
L(12,23,14,23);
L(12,17,14,17);
L(12,11,14,11);
L(13,4,14,4);
L(13,10,14,10);
L(13,16,14,16);
L(13,22,14,22);
L(13,28,14,28);
L(13,34,14,34);
L(13,40,14,40);
L(13,46,14,46);
L(13,52,14,52);
L(13,58,14,58);
L(13,64,14,64);
L(13,70,14,70);
L(13,76,14,76);
L(13,82,14,82);
L(13,88,14,88);
L(13,94,14,94);
L(13,4,13,94);
L(12,5,12,95);
L(11,5,12,5);
L(11,4,13,4);
L(12,3,12,5);
L(12,2,12,3);
L(13,1,13,4);
L(29,6,32,6);
L(29,12,32,12);
L(29,18,32,18);
L(29,24,32,24);
L(29,30,32,30);
L(29,36,32,36);
L(29,42,32,42);
L(29,48,32,48);
L(29,54,32,54);
L(29,60,32,60);
L(29,66,32,66);
L(29,72,32,72);
L(29,78,32,78);
L(29,90,32,90);
L(30,95,32,95);
L(30,89,32,89);
L(30,77,32,77);
L(30,71,32,71);
L(30,65,32,65);
L(30,59,32,59);
L(30,53,32,53);
L(30,47,32,47);
L(30,41,32,41);
L(30,35,32,35);
L(30,29,32,29);
L(30,23,32,23);
L(30,17,32,17);
L(30,11,32,11);
L(30,5,32,5);
L(31,4,32,4);
L(31,10,32,10);
L(31,16,32,16);
L(31,22,32,22);
L(31,28,32,28);
L(31,34,32,34);
L(31,40,32,40);
L(31,46,32,46);
L(31,52,32,52);
L(31,58,32,58);
L(31,64,32,64);
L(31,70,32,70);
L(31,76,32,76);
L(31,82,32,82);
L(31,88,32,88);
L(31,94,32,94);
L(30,83,32,83);
L(29,84,32,84);
L(31,4,31,94);
L(30,5,30,95);
L(30,2,30,5);
L(31,1,31,4);
L(13,1,30,1);
L(12,2,30,2);
L(30,1,31,1);
        END_NETWORK_BODY
    END_NET_WORK
END_BODY
END_PROGRAM

PROGRAM ADlmlProgAsyV050
	VAR 
		LML1: AD_LML2_ASYNC;
	END_VAR
'FBD'
BODY
    WORKSPACE
        NETWORK_LIST_TYPE := NWTYPEFBD ;
        ACTIVE_NETWORK := 0 ;
    END_WORKSPACE
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_FB,AD_LML2_ASYNC,LML1,8,1,18,3,);
        END_NETWORK_BODY
    END_NET_WORK
END_BODY
END_PROGRAM

PROGRAM ADlmlProgIniV050
	VAR_EXTERNAL CONSTANT RETAIN 
		CDlmlOnlineCnf: UDINT:=0;
			(*online lml configuration identnumber (without 14 at end)*)
	END_VAR
	VAR 
		LML1: AD_LML2_INIT;
		CorrValue_UDINT1: CorrValue_UDInt;
	END_VAR
'FBD'
BODY
    WORKSPACE
        NETWORK_LIST_TYPE := NWTYPEFBD ;
        ACTIVE_NETWORK := 0 ;
    END_WORKSPACE
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value lml enabled,1,1,27,2,);
B(B_VARIN,,9123456,9,5,11,7,);
B(B_VARIN,,0,9,6,11,8,);
B(B_VARIN,,999999999,9,7,11,9,);
B(B_VARIN,,CDlmlOnlineCnf,9,8,11,10,);
B(B_FB,CorrValue_UDInt,CorrValue_UDINT1,11,4,24,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_COMMENT,,initialisierung der LMB,1,1,34,2,);
B(B_VARIN,,CDlmlOnlineCnf,9,5,11,7,);
B(B_FB,AD_LML2_INIT,LML1,11,4,21,7,);
        END_NETWORK_BODY
    END_NET_WORK
END_BODY
END_PROGRAM

PROGRAM ADlmlProgSynV170
(*name of author: Manfred Schapler
version: 1.0
date: 04/97
modification:*)
(*name of author: Manfred Schapler
version: 1.0
date: 04/97
modification:*)
	VAR_EXTERNAL 
		IXentrySwiClosed: BOOL:=FALSE;
			(*entry switch closed*)
		IXkeyswBridgeLml: BOOL:=FALSE;
			(*key switch X12: release bridge lml*)
		IXlml2010KeySwit: BOOL:=FALSE;
			(*lml 2010 key switch bridge lml outside cabine*)
		ITXlmlBridged: BOOL:=FALSE;
			(*preselection lml bridged*)
		ITXlimSwBridged: BOOL:=FALSE;
			(*preselection limit switch bridged*)
		IXlimSwiBoomStab: BOOL:=FALSE;
			(*limit switch main boom stabilisation locked in ball socket*)
		IWloadSenLeBoom: UINT:=0;
			(*lml left force transmitter main boom*)
		IWangSenLowBoom: UINT:=0;
			(*lml lower angle transmitter main boom*)
		IWloadSenLeLuJib: UINT:=0;
			(*lml left force transmitter luffing jib*)
		IWangSenLoLufJib: UINT:=0;
			(*lml lower angle transmitter luffing jib / ad angle sliding table hanging leader*)
		IWljPres1FalBack: UINT:=0;
			(*pressure sensor 1 luffing jib fall back support*)
		IWderrBallSenLe: UINT:=0;
			(*lml force transmitter derrick - couterweight left*)
		IWderrLoadSenLe: UINT:=0;
			(*P2 sys.press.vibrator/hammer/hydr.grab/drill / lml force transmitter derrick - main boom left *)
		IWloadSenRiBoom: UINT:=0;
			(*lml force transmitter main boom right*)
		IWangSenTopBoom: UINT:=0;
			(*lml angle transmitter main boom upper sensor*)
		IWloadSenRiLuJib: UINT:=0;
			(*lml force transmitter luffing jib right*)
		IWangSenToLufJib: UINT:=0;
			(*lml angle transmitter luffing jib upper sensor*)
		IWljPres2FalBack: UINT:=0;
			(*pressure sensor 2 luffing jib fall back support / leader incl. y-axis*)
		IWderrLoadSenRi: UINT:=0;
			(*derrick load sensor right*)
		IWderrBallSenRi: UINT:=0;
			(*derrick ballast load sensor right*)
		IWadWindSpedSen1: UINT:=0;
			(*wind speed sensor main boom*)
		IWadWindSpedSen2: UINT:=0;
			(*wind speed sensor luffing jib / leader incl. x-axis*)
		QTXlmlBridged: BOOL:=FALSE;
			(*enable lml bridged*)
		QXlmlSounder: BOOL:=FALSE;
			(*sounder lml stop or lml bridged*)
		QXlmlLightGreen: BOOL:=FALSE;
			(*lml light green*)
		QXlmlLightYellow: BOOL:=FALSE;
			(*lml light yellow*)
		QXlmlLightRed: BOOL:=FALSE;
			(*lml light red*)
		MXminEngineSpeed: BOOL:=FALSE;
			(*minimum engine speed reached*)
		MXlgUpAngleStop: BOOL:=FALSE;
			(*LG up stop by angle*)
		MXlg2UpAngleStop: BOOL:=FALSE;
			(*lg2 stop up by angle*)
		MXlg2DnAngleStop: BOOL:=FALSE;
			(*lg2 stop down by angle*)
		MXassemblyOperat: BOOL:=FALSE;
			(*assembly operation*)
		MXlmlDeactive: BOOL:=FALSE;
			(*lml deactivated*)
		MXlmlStopDeactiv: BOOL:=FALSE;
			(*lml stop deactivated by an additional device*)
		MXlmlWarning: BOOL:=FALSE;
			(*lml warning*)
		MXlmlStop: BOOL:=FALSE;
			(*lml stop*)
		MXlmlStopBackwar: BOOL:=FALSE;
			(*lml stop backwards*)
		MXlmlStopScreen: BOOL:=FALSE;
			(*lml stop symbol on screen*)
		MXlmlStopScrBack: BOOL:=FALSE;
			(*lml stop symbol backwards on screen*)
		MXlmlCalculating: BOOL:=FALSE;
			(*lml is calculating with new adjustments*)
		MXlmlSensorError: BOOL:=FALSE;
			(*lml sensor error*)
		MXlmlProgError: BOOL:=FALSE;
			(*lml program error*)
		MXlmlMainRedEnab: BOOL:=FALSE;
			(*lml main boom reduction enabled*)
		MXlmlFixedJibEna: BOOL:=FALSE;
			(*lml fixed jib enabled*)
		MXlmlBridged: BOOL:=FALSE;
			(*X23 lml bridged*)
		MXlmlHSMode: BOOL:=FALSE;
			(*lml HS Mode selected*)
		MXcouCarActive: BOOL:=FALSE;
			(*counterweight carrier active*)
		MXlmlPressSenErr: BOOL:=FALSE;
			(*lml pressure sensor error fall back support luffing jib*)
		IXlgUppLimDerrCl: BOOL:=FALSE;
			(*add input: hoist cylinder lower position (vibration lance) / derrick: lg upper limit normal operating position, close*)
		MXlgUpStopFaBaSu: BOOL:=FALSE;
			(*lg up stop by fall back support angle and limit switsch*)
		MXsgAngSenError: BOOL:=FALSE;
			(*sg angle sensor error*)
		MXdgcBlockLml: BOOL:=FALSE;
			(*dgc block lml*)
		MXlmlBlockCrawle: BOOL:=FALSE;
			(*lml blocked crawlers active*)
		MXlmlStopByBCraw: BOOL:=FALSE;
			(*lml stop by blocked crawler, slewing gear not in position*)
		MXlmlBlockHg1: BOOL:=FALSE;
			(*lml block hg1 by load location 2 and lml mode 3*)
		MXlmlBlockHg2: BOOL:=FALSE;
			(*lml block hg1 by load location 2 and lml mode 3*)
		MXlmlStarted: BOOL:=FALSE;
			(*lml invalid data*)
		MXlmlMidfall: BOOL:=FALSE;
			(*lml Midfall*)
		MXlmlErrGeometri: BOOL:=FALSE;
			(*lml error geometrical sensors*)
		MXlmlErrLoaCalc: BOOL:=FALSE;
			(*lml error geometrical sensors load calculation*)
		MXlmlErrLoaCaDer: BOOL:=FALSE;
			(*lml error sensors load calculation derrick*)
		MXlmlErrAngPivPi: BOOL:=FALSE;
			(*lml error angle sensor pivot piece main boom*)
		MXboomWithFlap: BOOL:=FALSE;
			(*lml boom head type with flap*)
		MXlmlSingleScale: BOOL:=FALSE;
			(*lml single scale sensors (not redundant)*)
		MXaFrameSensorEr: BOOL:=FALSE;
			(*a frame load sensor error*)
		MXlmlLoadMainMid: BOOL:=FALSE;
			(*lml load location on main boom or Midfall and luffing jib mounted*)
		MXlmlLoadOnJib: BOOL:=FALSE;
			(*lml load location on fixed or luffing jib head*)
		MXlmlDataTimeout: BOOL:=FALSE;
			(*lml timeout data update*)
		MXlmlDataTimeAct: BOOL:=FALSE;
			(*lml timeout data update active*)
		MXlmlSysRunning: BOOL:=FALSE;
			(*lml system running*)
		MXwarnSuppCrane: BOOL:=FALSE;
			(*warning supplementary crane needed*)
		MXlmlValidTLT: BOOL:=FALSE;
			(*lml actual position is in a valid load chart*)
		MXjoystickInZero: BOOL:=FALSE;
			(*joystick in zero position (no control signal is active)*)
		MXlmlRedAllFunct: BOOL:=FALSE;
			(*lml reduces all functions*)
		MXlmlRedLoaIncFu: BOOL:=FALSE;
			(*lml reduces all load increasing functions*)
		MXlmlTypeANSI: BOOL:=FALSE;
			(*lml load limits are calculated according to ANSI*)
		MXlmlStopLgUp: BOOL:=FALSE;
			(*lml stop lg up*)
		MXlmlStopLgDn: BOOL:=FALSE;
			(*lml stop lg down*)
		MXlmlDeadlockAct: BOOL:=FALSE;
			(*lml 2010 rigging is activated*)
		MXlmlSounder: BOOL:=FALSE;
			(*sounder lml stop*)
		MXrcLmlSounder: BOOL:=FALSE;
			(*remote control lml sounder*)
		MXrcBridgeLml: BOOL:=FALSE;
			(*remote control bridge lml*)
		MXresetErrPage1: BOOL:=FALSE;
			(*reset buzzer on main page*)
		MXlmlNotErrectab: BOOL:=FALSE;
			(*lml actual configuration is not errectable*)
		MXhgSpecialLift: BOOL:=FALSE;
			(*hg special sensitive lifting function active*)
		MXremContPresel: BOOL:=FALSE;
			(*remote control preselected by X12 Button*)
		MXlimitSwBridged: BOOL:=FALSE;
			(*X23 limit switches bridged for assembly operation*)
		MXbbActivatByLml: BOOL:=FALSE;
			(*blackbox activated by lml (changes 2010)*)
		MXflashSignal: BOOL:=FALSE;
			(*flash signal [1,66 Hz]*)
		MXslowFlashSig: BOOL:=FALSE;
			(*flash signal [0,83 Hz]*)
		MXengStarterActi: BOOL:=FALSE;
			(*engine starter activated*)
		MXwindSpeedAct: BOOL:=FALSE;
			(*wind speed sensor present*)
		MXwindSpeedWarn: BOOL:=FALSE;
			(*wind speed high warning*)
		MXwindSpeedError: BOOL:=FALSE;
			(*wind speed high error*)
		MXextLmlSounder: BOOL:=FALSE;
			(*external control lml sounder*)
		MDlmlLenMainBoom: REAL:=0.0;
			(*lml length main boom [m]*)
		MDlmlOffsetRod: REAL:=0.0;
			(*lml offset middle sg / main boom [m]*)
		MDlmlOffsetGndHp: REAL:=0.0;
			(*lml offset ground / main boom [m]*)
		MDlmlLenJib: REAL:=0.0;
			(*lml length jib [m]*)
		MDlmlUtilization: REAL:=0.0;
			(*lml utilization in [%]*)
		MDlmlLoadBoom: REAL:=0.0;
			(*lml load main boom in [to]*)
		MDlmlLoadLuffJib: REAL:=0.0;
			(*lml load luffing jib in [to]*)
		MDlmlAngleBoom: REAL:=0.0;
			(*lml angle main boom in °*)
		MDlmlAngleLufJib: REAL:=0.0;
			(*lml angle luffing jib in °*)
		MDlmlAngBoomDown: REAL:=0.0;
			(*lower angle of the main boom*)
		MDlmlAngLuJiDown: REAL:=0.0;
			(*lower angle of the luffing jib*)
		MDlmlMaxLoad1: REAL:=0.0;
			(*lml maximum load main boom in [to]*)
		MDlmlMaxLoad2: REAL:=0.0;
			(*lml maximum load luffing jib in [to]*)
		MDlmlRadiusMBoom: REAL:=0.0;
			(*lml load radius in main boom [m]*)
		MDlmlRadiusLJib: REAL:=0.0;
			(*lml load radius in luffing jib [m]*)
		MDlmlMaxHight1: REAL:=0.0;
			(*lml maximum hight main boom in [m]*)
		MDlmlMaxHight2: REAL:=0.0;
			(*lml maximum hight luffing jib in [m]*)
		MDlmlReevingBoom: REAL:=0.0;
			(*lml reeving main boom*)
		MDlmlReevingLuJi: REAL:=0.0;
			(*lml reeving main boom*)
		MDhptLoadSensLe: REAL:=0.0;
			(*load sensor LEFT main boom - a frame in [kN]*)
		MDhptLoadSensRi: REAL:=0.0;
			(*load sensor RIGHT main boom - a frame in [kN]*)
		MDadGrouPre0Grd: REAL:=0.0;
			(*ad ground pressure 0 degrees*)
		MDadGrouPre45Grd: REAL:=0.0;
			(*ad ground pressure 45 degrees*)
		MDadGrouPre90Grd: REAL:=0.0;
			(*ad ground pressure 90 degrees*)
		MDaFrameLoadSens: REAL:=0.0;
			(*a frame load sensor in to*)
		MDlmlUtilBackwar: REAL:=0.0;
			(*lml utilization backwards (derrick)*)
		MDpresStabLufJib: REAL:=0.0;
			(*luffing jib fall back support pressure (stabilisation)*)
		MDlmlMode: REAL:=0.0;
			(*lml mode*)
		MDmaxAngleMainBo: REAL:=0.0;
			(*lml maximum angle main boom*)
		MDlmlStopSgLeft: REAL:=0.0;
			(*lml blocked crawlers stop sg left*)
		MDlmlStopSgRight: REAL:=0.0;
			(*lml blocked crawlers stop sg right*)
		MDsgAngle: REAL:=0.0;
			(*sg angle in degree*)
		MDsupersSgOffset: REAL:=0.0;
			(*superstructure - sg Offset*)
		MDlmlCounterWeig: REAL:=0.0;
			(*lml counter weight in tons*)
		MDlmlSpeedRed_Hg: REAL:=0.0;
			(*lml speed reduction value HG (lml changes 2010)*)
		MDlmlSpeedRed_Lg: REAL:=0.0;
			(*lml speed reduction value LG (lml changes 2010)*)
		MDlmlSpeedRed_Sg: REAL:=0.0;
			(*lml speed reduction value SG (lml changes 2010)*)
		MDlmlSpeedRed_Tg: REAL:=0.0;
			(*lml speed reduction value TG (lml changes 2010)*)
		MDlenBallastCyli: REAL:=0.0;
			(*length of the ballast cylinder counter weigth*)
		MDhg1RopeLenRela: REAL:=0.0;
			(*hg1 rope length winch - boom head*)
		MDhg2RopeLenRela: REAL:=0.0;
			(*hg2 rope length winch - boom head*)
		MDccLmlMinRadius: REAL:=0.0;
			(*counterweight carrier minimum radius*)
		MDccLmlMaxRadius: REAL:=0.0;
			(*counterweight carrier maximum radius*)
		MDccDistanceAbso: REAL:=0.0;
			(*counterweight carrier distance absolut in [mm]*)
		MDccMaxForMinRad: REAL:=0.0;
			(*counterweight carrier maximum force superstructure at minimum radius*)
		MDccMaxForMaxRad: REAL:=0.0;
			(*counterweight carrier maximum force superstructure at maximum radius*)
		MDwheKitDistOut: REAL:=0.0;
			(*counterweight carrier distance outer wheel kit to the middle of the carrier*)
		MDwheKitDistIn: REAL:=0.0;
			(*counterweight carrier distance inner wheel kit to the middle of the carrier*)
		MDwindSpeed: REAL:=0.0;
			(*actual wind speed*)
		MXlmlDerrickEnab: BOOL:=FALSE;
			(*lml derrick enabled*)
	END_VAR
	VAR_EXTERNAL CONSTANT
		MSG_ERROR: UINT:=0;
			(* message priority: "error" *)
		MSG_WARNING: UINT:=0;
			(* message priority: "warning" *)
		MSG_INFO: UINT:=0;
			(* message priority: "info" *)
		MSG_UNDEF: UDINT:=0;
			(* message group "undefined" *)
		MSG_UNDEF_UNDEF: UDINT:=0;
			(* message subgroup "undefined" for group "undefined" *)
	END_VAR
	VAR_EXTERNAL RETAIN
		MXlmlTypeDutyCyc: BOOL:=FALSE;
			(*lml type is duty cycle machine*)
		MXlmlFix_LuffJib: BOOL:=FALSE;
			(*lml fixed or luffing jib enabled*)
		MXlmlRiggingAct: BOOL:=FALSE;
			(*lml 2010 rigging is activated*)
		MXlmlLuffJibEnab: BOOL:=FALSE;
			(*lml luffing jib enabled*)
		MDlmlScaLoadBoom: REAL:=0.0;
			(*lml scale load sensors main boom*)
	END_VAR
	VAR_EXTERNAL CONSTANT RETAIN
		CDlmlReductSigHg: REAL:=0.0;
			(*lml reduction of the hg analog signal for 15% winch speed hoisting winches*)
		CDlmlReductSigLg: REAL:=0.0;
			(*lml reduction of the lg analog signal for 15% winch speed luffing winches*)
		CDlmlReductSigSg: REAL:=0.0;
			(*lml reduction of the sg analog signal for 15% slewing gearspeed*)
		CDlmlReductSigTg: REAL:=0.0;
			(*lml reduction of the tg control pressure for 25% travelling gear speed*)
	END_VAR
	VAR 
		LXinitOk: BOOL:=FALSE;
		LXstarted: BOOL:=FALSE;
			(*first scan completed*)
		LXlmlStop: BOOL:=FALSE;
		LXlmlStopBackwar: BOOL:=FALSE;
		LXriggingFunctio: BOOL:=FALSE;
		LXdeadlockWarn: BOOL:=FALSE;
		LXutilGT100Perc: BOOL:=FALSE;
		LXutilGT105Perc: BOOL:=FALSE;
		LXutilGT110Perc: BOOL:=FALSE;
		LXstopCantBack: BOOL:=FALSE;
		LXdevKmlBoom: BOOL:=FALSE;
		LXdevAngBoom: BOOL:=FALSE;
		LXdevKmsLoaStab: BOOL:=FALSE;
		LXdevKmlLuJib: BOOL:=FALSE;
		LXdevAngLuJib: BOOL:=FALSE;
		LXdevKmlDerr: BOOL:=FALSE;
		LXdevKmlDerBa: BOOL:=FALSE;
		LXerrKmlBoomLe: BOOL:=FALSE;
		LXerrKmlBoomRi: BOOL:=FALSE;
		LXerrKmsBoStaLe: BOOL:=FALSE;
		LXerrKmsBoStaRi: BOOL:=FALSE;
		LXerrKmlLuJibLe: BOOL:=FALSE;
		LXerrKmlLuJibRi: BOOL:=FALSE;
		LXerrKmlDerrLe: BOOL:=FALSE;
		LXerrKmlDerrRi: BOOL:=FALSE;
		LXerrKmlDerrBaLe: BOOL:=FALSE;
		LXerrKmlDerrBaRi: BOOL:=FALSE;
		LXerrAngBoomLow: BOOL:=FALSE;
		LXerrAngBoomTop: BOOL:=FALSE;
		LXerrAngLuJibLow: BOOL:=FALSE;
		LXerrAngLuJibTop: BOOL:=FALSE;
		LXlmlErrGeoMain: BOOL:=FALSE;
		LXlmlProgError: BOOL:=FALSE;
		LXstaTimeoutErr: BOOL:=FALSE;
		LX1: BOOL:=FALSE;
		LX2: BOOL:=FALSE;
		LXbackArea: BOOL:=FALSE;
		LXlmlJiLoLocMain: BOOL:=FALSE;
		LDmaxUtilization: REAL:=0.0;
			(*maximum reached utilization*)
		LDmaxUtilBackwar: REAL:=0.0;
			(*maximum reached utilization backwards*)
		LDlmlReevingBoom: REAL:=0.0;
			(*lml reeving main boom*)
		LDlmlReevingLuJi: REAL:=0.0;
			(*lml reeving main boom*)
		LDblockCrawleAng: REAL:=0.0;
		LWlmlSysTime: UDINT:=0;
		LWlmlDiffTime: UDINT:=0;
		ADlmlScaleIn1: ADlmlScaleInV100;
		LML1: AD_LML2_SYNC_SEN;
		LML2: AD_LML2_SYNC_INF;
		LML3: AD_LML2_SYNC_OUT;
		LML4: AD_LML2_SYNC_ERR;
		R_TRIG1: R_TRIG;
		R_TRIG2: R_TRIG;
		R_TRIG3: R_TRIG;
		R_TRIG4: R_TRIG;
		R_TRIG5: R_TRIG;
		F_TRIG1: F_TRIG;
		TON1: TON;
		TON2: TON;
		TON3: TON;
		TOF1: TOF;
		SR1: SR;
		SR2: SR;
		SR3: SR;
		SR4: SR;
		SR5: SR;
		RSrigg: RS;
		RS1: RS;
		RS2: RS;
		RS3: RS;
		RS4: RS;
		RS5: RS;
		RS6: RS;
		RS7: RS;
		RS8: RS;
		Filter1: GPfilter4InTPV02;
		GetMessageState1: GetMessageState;
		CorrValue_Real1: CorrValue_Real;
		CorrValue_Real2: CorrValue_Real;
		CorrValue_Real3: CorrValue_Real;
		CorrValue_Real4: CorrValue_Real;
		MessagePut1: MsgPut;
		Message1: MsgRealReal;
		Message2: MsgRealReal;
		Message3: MsgRealReal;
		Message4: MsgRealReal;
		Message5: MsgRealReal;
		Message6: MsgRealReal;
		Message7: MsgRealReal;
		Message8: MsgRealReal;
		Message9: MsgRealReal;
		Message10: MsgRealReal;
		Message11: MsgRealReal;
		Message12: MsgRealReal;
		Message13: MsgRealReal;
		Message14: MsgRealReal;
		Message15: MsgRealReal;
		Message16: MsgRealReal;
		Message17: MsgRealReal;
		Message18: MsgRealReal;
		Message19: MsgRealReal;
		Message20: MsgRealReal;
	END_VAR
'FBD'
BODY
    WORKSPACE
        NETWORK_LIST_TYPE := NWTYPEFBD ;
        ACTIVE_NETWORK := 0 ;
    END_WORKSPACE
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_VARIN,,LXinitOk,9,4,11,6,);
B(B_COMMENT,,init first time,1,1,27,2,);
B(B_F,not,,11,3,16,6,);
B(B_JUMP,,init,16,4,18,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 14 ;
        NETWORK_BODY
B(B_COMMENT,,set rigging function,1,1,27,2,);
B(B_VARIN,,MXlmlBridged,14,7,16,9,);
B(B_F,@OR-2,,11,9,16,13,);
B(B_VARIN,,MXlmlTypeDutyCyc,9,10,11,12,);
B(B_VARIN,,MXlmlTypeANSI,9,11,11,13,);
B(B_F,@AND-2,,16,6,21,10,);
B(B_VARIN,,MXlmlRiggingAct,19,4,21,6,);
B(B_F,@OR-2,,21,3,26,7,);
B(B_VAROUT,,LXriggingFunctio,26,4,28,6,);
L(16,9,16,11);
L(21,6,21,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 42 ;
        NETWORK_BODY
B(B_COMMENT,,scale inputs,1,1,27,2,);
B(B_VAROUT,,MDpresStabLufJib,39,6,41,8,);
B(B_VARIN,,MXlmlSingleScale,14,7,16,9,);
B(B_COMMENT,,MXaFrameSensorErø^ACHTUNG: Die Verknüpfung dieses Merkers istø^abhängig von der Statik und Hydraulik des A-Bockesø^(bzw. der A-Bockzylinder) !!!,51,9,71,13,);
B(B_VAROUT,,MDhptLoadSensLe,39,7,41,9,);
B(B_VAROUT,,MDhptLoadSensRi,39,8,41,10,);
B(B_VAROUT,,LXerrKmlLuJibLe,39,16,41,18,);
B(B_VAROUT,,LXerrKmlLuJibRi,39,17,41,19,);
B(B_VAROUT,,LXerrKmlDerrLe,39,18,41,20,);
B(B_VAROUT,,LXerrKmlDerrRi,39,19,41,21,);
B(B_VAROUT,,LXerrKmlDerrBaLe,39,20,41,22,);
B(B_VAROUT,,LXerrKmlDerrBaRi,39,21,41,23,);
B(B_VAROUT,,LXerrAngBoomLow,39,22,41,24,);
B(B_VAROUT,,LXerrAngLuJibLow,39,24,41,26,);
B(B_VAROUT,,LXerrAngBoomTop,39,23,41,25,);
B(B_VAROUT,,LXerrAngLuJibTop,39,25,41,27,);
B(B_VAROUT,,LXerrKmlBoomLe,39,12,41,14,);
B(B_VAROUT,,MXaFrameSensorEr,39,11,41,13,);
B(B_VAROUT,,LXerrKmlBoomRi,39,13,41,15,);
B(B_VAROUT,,LXerrKmsBoStaRi,39,15,41,17,);
B(B_VAROUT,,LXerrKmsBoStaLe,39,14,41,16,);
B(B_VAROUT,,MDaFrameLoadSens,39,9,41,11,);
B(B_VAROUT,,MDwindSpeed,39,10,41,12,);
B(B_VAROUT,,MXwindSpeedWarn,39,26,41,28,);
B(B_VAROUT,,MXwindSpeedError,39,27,41,29,);
B(B_VAROUT,,MXlmlPressSenErr,39,28,41,30,);
B(B_VARIN,,MXlmlDeactive,14,6,16,8,);
B(B_FB,ADlmlScaleInV100,ADlmlScaleIn1,16,5,39,41,);
B(B_VARIN,,MXlmlLuffJibEnab,14,9,16,11,);
B(B_VARIN,,MXlmlDerrickEnab,14,10,16,12,);
B(B_VARIN,,IWloadSenLeBoom,14,11,16,13,);
B(B_VARIN,,IWloadSenRiBoom,14,12,16,14,);
B(B_VARIN,,IWangSenLowBoom,14,13,16,15,);
B(B_VARIN,,IWangSenTopBoom,14,14,16,16,);
B(B_VARIN,,IWloadSenLeLuJib,14,17,16,19,);
B(B_VARIN,,IWloadSenRiLuJib,14,18,16,20,);
B(B_VARIN,,IWangSenLoLufJib,14,19,16,21,);
B(B_VARIN,,IWangSenToLufJib,14,20,16,22,);
B(B_VARIN,,IWljPres1FalBack,14,21,16,23,);
B(B_VARIN,,IWljPres2FalBack,14,22,16,24,);
B(B_VARIN,,IWderrLoadSenRi,14,26,16,28,);
B(B_VARIN,,IWderrBallSenLe,14,27,16,29,);
B(B_VARIN,,IWderrBallSenRi,14,28,16,30,);
B(B_VARIN,,LXdevKmlBoom,14,29,16,31,);
B(B_VARIN,,LXdevAngBoom,14,30,16,32,);
B(B_VARIN,,LXdevAngLuJib,14,33,16,35,);
B(B_VARIN,,LXdevKmlDerr,14,34,16,36,);
B(B_VARIN,,LXdevKmlDerBa,14,35,16,37,);
B(B_VARIN,,MXlmlStarted,14,36,16,38,);
B(B_VARIN,,LXdevKmlLuJib,14,32,16,34,);
B(B_VARIN,,LXdevKmsLoaStab,14,31,16,33,);
B(B_VARIN,,MXengStarterActi,14,37,16,39,);
B(B_VARIN,,IWderrLoadSenLe,14,25,16,27,);
B(B_VARIN,,IWadWindSpedSen1,14,23,16,25,);
B(B_VARIN,,IWadWindSpedSen2,14,24,16,26,);
B(B_VARIN,,MXwindSpeedAct,14,39,16,41,);
B(B_VARIN,,MXlmlFixedJibEna,14,8,16,10,);
B(B_VARIN,,4000,14,15,16,17,);
B(B_VARIN,,MDlmlScaLoadBoom,14,38,16,40,);
L(16,16,16,17);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 27 ;
        NETWORK_BODY
B(B_VARIN,,IWloadSenLeBoom,39,8,41,10,);
B(B_VARIN,,IWloadSenRiBoom,39,9,41,11,);
B(B_VARIN,,IWloadSenLeLuJib,39,12,41,14,);
B(B_VARIN,,IWloadSenRiLuJib,39,13,41,15,);
B(B_VARIN,,MDpresStabLufJib,39,16,41,18,);
B(B_VARIN,,IWangSenLowBoom,14,10,16,12,);
B(B_VARIN,,IWangSenTopBoom,14,11,16,13,);
B(B_VARIN,,IWangSenLoLufJib,14,12,16,14,);
B(B_VARIN,,IWangSenToLufJib,14,13,16,15,);
B(B_VARIN,,0.5,14,14,16,16,);
B(B_VARIN,,IWderrLoadSenLe,39,17,41,19,);
B(B_VARIN,,IWderrBallSenLe,39,19,41,21,);
B(B_VARIN,,IWderrBallSenRi,39,20,41,22,);
B(B_VARIN,,IWderrLoadSenRi,39,18,41,20,);
B(B_F,@DIV,,28,20,33,24,);
B(B_VARIN,,MDlenBallastCyli,26,21,28,23,);
B(B_VARIN,,1000.0,26,22,28,24,);
B(B_FB,GPfilter4InTPV02,Filter1,16,9,30,16,);
B(B_VARIN,,MXlmlSingleScale,39,7,41,9,);
B(B_COMMENT,,IWloadSenLeBoStaø^IWloadSenRiBoSta,19,5,28,7,);
B(B_VARIN,,IXlimSwiBoomStab,39,23,41,25,);
B(B_VARIN,,MXcouCarActive,39,22,41,24,);
B(B_FB,AD_LML2_SYNC_SEN,LML1,41,6,61,25,);
B(B_VAROUT,,LXlmlProgError,61,8,63,10,);
B(B_VAROUT,,MXlmlCalculating,61,9,63,11,);
B(B_F,@AND-2,,62,2,67,6,0N);
B(B_FB,TON,TON1,55,2,60,6,);
B(B_VARIN,,T#10s,53,4,55,6,);
B(B_VARIN,,TRUE,53,3,55,5,);
B(B_FB,RS,RS1,67,2,72,6,);
B(B_VAROUT,,LXstaTimeoutErr,72,3,74,5,);
B(B_VAROUT,,MXlmlStarted,77,6,79,8,);
B(B_F,@OR-2,,72,5,77,9,);
B(B_VARIN,,FALSE,65,6,67,8,);
L(32,13,32,15);
L(31,14,31,16);
L(30,13,32,13);
L(30,14,31,14);
L(32,15,41,15);
L(31,16,41,16);
L(33,22,41,22);
L(30,11,41,11);
L(30,12,41,12);
L(61,5,61,8);
L(61,5,62,5);
L(60,4,62,4);
L(61,8,72,8);
L(72,4,72,7);
L(67,5,67,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_COMMENT,,Exit Program while lml is not ready,1,1,28,2,);
B(B_F,not,,12,3,17,6,);
B(B_JUMP,,exit,17,4,19,6,);
B(B_VARIN,,MXlmlStarted,10,4,12,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_VARIN,,MSG_INFO,10,5,12,7,);
B(B_VARIN,,281,10,3,12,5,);
B(B_FB,MsgRealReal,Message1,12,2,21,9,);
B(B_VARIN,,MXlmlCalculating,10,4,12,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_FB,MsgRealReal,Message2,12,2,21,9,);
B(B_VARIN,,810,10,3,12,5,);
B(B_VARIN,,MSG_ERROR,10,5,12,7,);
B(B_VARIN,,LXstaTimeoutErr,10,4,12,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 38 ;
        NETWORK_BODY
B(B_VAROUT,,MXlmlTypeDutyCyc,26,6,28,8,);
B(B_VAROUT,,MXlmlTypeANSI,26,7,28,9,);
B(B_VAROUT,,MXlmlValidTLT,26,5,28,7,);
B(B_VAROUT,,MDmaxAngleMainBo,26,13,28,15,);
B(B_VAROUT,,MDlmlScaLoadBoom,26,18,28,20,);
B(B_VAROUT,,LDblockCrawleAng,26,15,28,17,);
B(B_VAROUT,,MXlmlBlockCrawle,57,14,59,16,);
B(B_VARIN,,MXlmlBridged,50,15,52,17,);
B(B_F,@AND-2,,52,13,57,17,0N);
B(B_F,EQ_R,,44,21,49,25,);
B(B_VARIN,,MXlmlFixedJibEna,47,25,49,27,);
B(B_F,@OR-2,,54,22,59,26,);
B(B_F,EQ_R,,44,27,49,31,);
B(B_VARIN,,3.0,42,33,44,35,);
B(B_F,@AND-2,,49,31,54,35,);
B(B_F,@AND-2,,49,21,54,25,);
B(B_VAROUT,,MXlmlMidfall,49,35,51,37,);
B(B_VARIN,,2.0,42,23,44,25,);
B(B_VARIN,,3.0,42,29,44,31,);
B(B_F,@AND-2,,59,22,64,26,0N);
B(B_VAROUT,,MXlmlBlockHg1,64,23,66,25,);
B(B_F,@AND-2,,59,30,64,34,N);
B(B_VAROUT,,MXlmlBlockHg2,64,31,66,33,);
B(B_VARIN,,MXassemblyOperat,57,29,59,31,);
B(B_F,NE_R,,44,31,49,35,);
B(B_F,@OR-2,,74,19,79,23,);
B(B_VAROUT,,MXlmlLoadMainMid,79,20,81,22,);
B(B_F,EQ_R,,44,17,49,21,);
B(B_VARIN,,1.0,42,19,44,21,);
B(B_F,@AND-2,,59,17,64,21,);
B(B_VAROUT,,MXlmlLoadOnJib,64,18,66,20,);
B(B_VARIN,,MXlmlFix_LuffJib,57,19,59,21,);
B(B_VAROUT,,MXlmlNotErrectab,26,9,28,11,);
B(B_VAROUT,,MDlmlMode,26,11,28,13,);
B(B_VAROUT,,LXstopCantBack,26,12,28,14,);
B(B_VAROUT,,LWlmlSysTime,26,4,28,6,);
B(B_VAROUT,,MXlmlSysRunning,26,3,28,5,);
B(B_F,EQ_R,,44,9,49,13,);
B(B_VARIN,,1.0,42,11,44,13,);
B(B_VAROUT,,MXboomWithFlap,49,10,51,12,);
B(B_F,EQ_R,,44,5,49,9,);
B(B_VARIN,,2.0,42,7,44,9,);
B(B_VAROUT,,MXlmlHSMode,49,6,51,8,);
B(B_VAROUT,,LXlmlJiLoLocMain,64,21,66,23,);
B(B_FB,AD_LML2_SYNC_INF,LML2,12,2,26,33,);
B(B_VAROUT,,MDccLmlMinRadius,26,26,28,28,);
B(B_VAROUT,,MDccMaxForMinRad,26,25,28,27,);
B(B_VAROUT,,MDccMaxForMaxRad,26,27,28,29,);
B(B_VAROUT,,MDccLmlMaxRadius,26,28,28,30,);
B(B_VAROUT,,MDsupersSgOffset,26,29,28,31,);
B(B_VAROUT,,MDlmlLenJib,26,22,28,24,);
B(B_VAROUT,,MDlmlLenMainBoom,26,21,28,23,);
B(B_VAROUT,,MDhg1RopeLenRela,26,23,28,25,);
B(B_VAROUT,,MDhg2RopeLenRela,26,24,28,26,);
B(B_VAROUT,,MDwheKitDistIn,26,30,28,32,);
B(B_VAROUT,,MDwheKitDistOut,26,31,28,33,);
B(B_VAROUT,,MDlmlOffsetRod,26,19,28,21,);
B(B_VAROUT,,MDlmlOffsetGndHp,26,20,28,22,);
L(26,15,52,15);
L(49,24,49,26);
L(54,23,54,24);
L(54,25,54,29);
L(49,34,49,36);
L(39,36,49,36);
L(40,17,40,33);
L(40,29,44,29);
L(40,23,44,23);
L(54,33,59,33);
L(59,25,59,32);
L(40,33,44,33);
L(49,21,49,23);
L(74,22,74,29);
L(49,29,74,29);
L(49,21,74,21);
L(26,17,40,17);
L(40,19,44,19);
L(49,19,59,19);
L(26,18,39,18);
L(39,18,39,36);
L(26,11,44,11);
L(40,7,40,9);
L(40,7,44,7);
L(26,9,40,9);
L(64,21,64,22);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 32 ;
        NETWORK_BODY
B(B_VAROUT,,MDlmlAngleLufJib,26,11,28,13,);
B(B_FB,AD_LML2_SYNC_OUT,LML3,12,8,26,31,);
B(B_VAROUT,,MDlmlLoadBoom,26,15,28,17,);
B(B_VAROUT,,MDlmlRadiusMBoom,26,17,28,19,);
B(B_VAROUT,,MDlmlMaxHight1,26,18,28,20,);
B(B_VAROUT,,LDlmlReevingBoom,26,19,28,21,);
B(B_VAROUT,,MDlmlLoadLuffJib,26,20,28,22,);
B(B_VAROUT,,MDlmlRadiusLJib,26,22,28,24,);
B(B_VAROUT,,MDlmlMaxHight2,26,23,28,25,);
B(B_VAROUT,,LDlmlReevingLuJi,26,24,28,26,);
B(B_VAROUT,,MDlmlCounterWeig,26,25,28,27,);
B(B_VAROUT,,MDccDistanceAbso,26,26,28,28,);
B(B_VAROUT,,MDadGrouPre0Grd,26,27,28,29,);
B(B_VAROUT,,MDadGrouPre45Grd,26,28,28,30,);
B(B_VAROUT,,MDadGrouPre90Grd,26,29,28,31,);
B(B_VAROUT,,MDlmlUtilization,26,13,28,15,);
B(B_VAROUT,,MDlmlUtilBackwar,26,14,28,16,);
B(B_VAROUT,,MDlmlMaxLoad1,26,16,28,18,);
B(B_VAROUT,,MDlmlMaxLoad2,26,21,28,23,);
B(B_VARIN,,LXriggingFunctio,20,5,22,7,);
B(B_F,@AND-3,,22,2,27,7,0N);
B(B_VARIN,,LXerrAngBoomLow,20,4,22,6,);
B(B_VARIN,,LXdevAngBoom,20,3,22,5,);
B(B_F,sel,,27,4,32,9,);
B(B_VAROUT,,MDlmlAngleBoom,32,5,34,7,);
B(B_VAROUT,,MDlmlAngLuJiDown,26,12,28,14,);
B(B_VAROUT,,MDlmlAngBoomDown,27,10,29,12,);
L(27,4,27,6);
L(26,7,27,7);
L(26,7,26,10);
L(26,11,27,11);
L(27,8,27,11);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 26 ;
        NETWORK_BODY
B(B_VAROUT,,LXdevAngBoom,40,6,42,8,);
B(B_VAROUT,,LXdevAngLuJib,40,7,42,9,);
B(B_VAROUT,,LXdevKmlBoom,40,8,42,10,);
B(B_VAROUT,,LXdevKmlDerr,40,10,42,12,);
B(B_VAROUT,,LXdevKmlLuJib,40,9,42,11,);
B(B_VAROUT,,LXdevKmlDerBa,40,11,42,13,);
B(B_VARIN,,LXerrKmlBoomLe,15,4,17,6,);
B(B_FB,MsgRealReal,Message4,60,10,69,17,);
B(B_FB,MsgRealReal,Message3,60,2,69,9,);
B(B_VAROUT,,MXlgUpStopFaBaSu,40,3,42,5,);
B(B_VARIN,,491,58,3,60,5,);
B(B_VARIN,,492,58,11,60,13,);
B(B_VARIN,,MSG_ERROR,58,5,60,7,);
B(B_VARIN,,MSG_ERROR,58,13,60,15,);
B(B_VARIN,,MDlmlAngleBoom,58,6,60,8,);
B(B_VARIN,,MDlmlAngleBoom,58,14,60,16,);
B(B_VARIN,,LXerrKmlBoomRi,15,5,17,7,);
B(B_VARIN,,LXerrKmlLuJibLe,15,6,17,8,);
B(B_VARIN,,LXerrKmlLuJibRi,15,7,17,9,);
B(B_VARIN,,LXerrKmlDerrLe,15,8,17,10,);
B(B_VARIN,,LXerrKmlDerrRi,15,9,17,11,);
B(B_VARIN,,LXerrKmlDerrBaLe,15,10,17,12,);
B(B_VARIN,,LXerrKmlDerrBaRi,15,11,17,13,);
B(B_F,@OR-2,,11,13,16,17,);
B(B_VARIN,,LXerrAngBoomLow,9,14,11,16,);
B(B_VARIN,,LXerrAngBoomTop,9,15,11,17,);
B(B_F,@OR-2,,11,17,16,21,);
B(B_VARIN,,LXerrAngLuJibLow,9,18,11,20,);
B(B_VARIN,,LXerrAngLuJibTop,9,19,11,21,);
B(B_COMMENT,,LXerrKmsBoStaLeø^LXerrKmsBoStaRi,5,22,14,24,);
B(B_COMMENT,,LXdevKmsLoaStab,51,19,59,20,);
B(B_FB,AD_LML2_SYNC_ERR,LML4,17,3,40,15,);
L(51,6,51,13);
L(51,13,60,13);
L(40,4,40,5);
L(16,13,16,15);
L(17,14,17,19);
L(16,13,17,13);
L(16,19,17,19);
L(40,5,60,5);
L(40,6,51,6);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_COMMENT,,set lml error ~ timeout data update ,1,1,27,2,);
B(B_F,@SUB,,28,5,33,9,);
B(B_F,@GT-2,,33,5,38,9,);
B(B_VARIN,,1000,31,9,33,11,);
B(B_COMMENT,,1 Sek,34,10,38,11,);
B(B_VAROUT,,MXlmlDataTimeAct,38,6,40,8,);
B(B_VAROUT,,LWlmlDiffTime,33,3,35,5,);
B(B_VARIN,,LWlmlSysTime,26,8,28,10,);
B(B_F,time_to_udint,,17,5,28,8,);
B(B_F,READ_REAL_ms,,6,5,17,8,);
L(33,8,33,10);
L(33,4,33,7);
L(28,8,28,9);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 15 ;
        NETWORK_BODY
B(B_FB,RS,RS2,17,2,22,6,);
B(B_VAROUT,,MXlmlDataTimeout,22,3,24,5,);
B(B_VARIN,,33554656,26,6,28,8,);
B(B_VARIN,,MXlmlSysRunning,9,3,11,5,);
B(B_F,@AND-2,,11,2,16,6,);
B(B_VARIN,,FALSE,15,6,17,8,);
B(B_FB,MsgPut,MessagePut1,28,5,35,14,);
B(B_VARIN,,MSG_ERROR,26,10,28,12,);
B(B_VARIN,,MSG_UNDEF,26,8,28,10,);
B(B_VARIN,,MSG_UNDEF_UNDEF,26,9,28,11,);
B(B_VARIN,,LWlmlDiffTime,26,11,28,13,);
B(B_COMMENT,,Löst Hochprioren Fehler im Kern ausø^LML did not recalculate in expected time window\nLML stop!\nTime difference: ?[ms],36,4,74,6,);
B(B_VARIN,,MXlmlDataTimeAct,9,4,11,6,);
B(B_COMMENT,,Warum Hochpriorer Fehler: Message Handler ist nieder Prior und kommt nicht mehr drann wenn ø^die höheren Task seht. ,36,6,74,8,);
L(22,4,22,8);
L(22,8,28,8);
L(16,4,17,4);
L(17,5,17,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_VARIN,,LXlmlProgError,9,2,11,4,);
B(B_VARIN,,MXlmlDataTimeout,9,3,11,5,);
B(B_VAROUT,,MXlmlProgError,16,2,18,4,);
B(B_F,@OR-3,,11,1,16,6,);
B(B_VARIN,,LXstaTimeoutErr,9,4,11,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,set lml angle sensor error pivot piece,1,1,27,2,);
B(B_VARIN,,LXerrAngBoomLow,14,4,16,6,);
B(B_F,@OR-2,,16,3,21,7,);
B(B_F,@AND-2,,11,6,16,10,0N);
B(B_VARIN,,MXlmlErrGeometri,9,7,11,9,);
B(B_VARIN,,LXriggingFunctio,9,8,11,10,);
B(B_VAROUT,,MXlmlErrAngPivPi,21,4,23,6,);
L(16,6,16,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_COMMENT,,set lml sensor error,1,1,27,2,);
B(B_VARIN,,LXdevAngBoom,9,6,11,8,);
B(B_VARIN,,LXerrAngBoomTop,9,5,11,7,);
B(B_VARIN,,LXerrAngBoomLow,9,4,11,6,);
B(B_F,@OR-3,,11,3,16,8,);
B(B_F,@OR-4,,16,6,21,12,);
B(B_VAROUT,,MXlmlErrGeometri,21,7,23,9,);
B(B_VARIN,,LXdevAngLuJib,14,10,16,12,);
B(B_VARIN,,LXerrAngLuJibTop,14,9,16,11,);
B(B_VARIN,,LXerrAngLuJibLow,14,8,16,10,);
B(B_VAROUT,,LXlmlErrGeoMain,16,4,18,6,);
L(16,5,16,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_VARIN,,MXlmlErrGeometri,9,2,11,4,);
B(B_VAROUT,,MXlmlErrLoaCalc,16,2,18,4,);
B(B_VARIN,,LXdevKmlBoom,9,3,11,5,);
B(B_VARIN,,LXdevKmlLuJib,9,4,11,6,);
B(B_VARIN,,LXerrKmlBoomRi,9,6,11,8,);
B(B_VARIN,,LXerrKmlBoomLe,9,5,11,7,);
B(B_F,@OR-7,,11,1,16,10,);
B(B_VARIN,,LXerrKmlLuJibLe,9,7,11,9,);
B(B_VARIN,,LXerrKmlLuJibRi,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 15 ;
        NETWORK_BODY
B(B_VARIN,,LXerrKmlDerrLe,9,7,11,9,);
B(B_VARIN,,LXerrKmlDerrRi,9,8,11,10,);
B(B_VARIN,,LXerrKmlDerrBaLe,9,11,11,13,);
B(B_VARIN,,LXerrKmlDerrBaRi,9,12,11,14,);
B(B_F,@AND-2,,11,6,16,10,);
B(B_F,@AND-2,,11,10,16,14,);
B(B_VARIN,,LXdevKmlDerr,15,3,17,5,);
B(B_VARIN,,LXdevKmlDerBa,15,4,17,6,);
B(B_VARIN,,MXlmlErrGeometri,15,2,17,4,);
B(B_F,@OR-5,,17,1,22,8,);
B(B_VAROUT,,MXlmlErrLoaCaDer,22,2,24,4,);
L(16,6,17,6);
L(17,7,17,12);
L(16,6,16,8);
L(16,12,17,12);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 17 ;
        NETWORK_BODY
B(B_VARIN,,MXlmlErrLoaCalc,24,3,26,5,);
B(B_VARIN,,MXlmlErrLoaCaDer,24,4,26,6,);
B(B_F,@OR-2,,26,2,31,6,);
B(B_VAROUT,,MXlmlSensorError,36,3,38,5,);
B(B_FB,SR,SR1,31,2,36,6,);
B(B_FB,GetMessageState,GetMessageState1,11,7,25,14,);
B(B_VARIN,,'LAN3',9,8,11,10,);
B(B_COMMENT,,im syslog.cnf werden die Messages der applikation an alle Bildschirmprogramme gesendet (bild/*)ø^Hier wird einfach dieser unbenutzte Client abgefragt.,9,14,48,16,);
B(B_F,@GE-2,,26,9,31,13,);
L(26,12,26,13);
L(25,13,26,13);
L(31,5,31,11);
L(25,11,26,11);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 40 ;
        NETWORK_BODY
B(B_F,EQ_R,,13,11,18,15,);
B(B_F,EQ_R,,13,15,18,19,);
B(B_F,EQ_R,,13,19,18,23,);
B(B_F,EQ_R,,13,31,18,35,);
B(B_F,EQ_R,,13,35,18,39,);
B(B_VARIN,,3.0,9,13,11,15,);
B(B_VARIN,,4.0,9,17,11,19,);
B(B_VARIN,,5.0,9,21,11,23,);
B(B_VARIN,,8.0,9,33,11,35,);
B(B_VARIN,,9.0,9,37,11,39,);
B(B_COMMENT,,set lml modes,1,1,27,2,);
B(B_F,@OR-5,,24,11,29,18,);
B(B_VAROUT,,MXlmlFix_LuffJib,29,12,31,14,);
B(B_F,@OR-3,,24,18,29,23,);
B(B_VAROUT,,MXlmlLuffJibEnab,29,19,31,21,);
B(B_F,EQ_R,,13,23,18,27,);
B(B_F,EQ_R,,13,27,18,31,);
B(B_VARIN,,6.0,9,25,11,27,);
B(B_VARIN,,7.0,9,29,11,31,);
B(B_F,@OR-4,,24,23,29,29,);
B(B_VAROUT,,MXlmlDerrickEnab,29,24,31,26,);
B(B_F,@OR-2,,24,7,29,11,);
B(B_VAROUT,,MXlmlFixedJibEna,29,8,31,10,);
B(B_F,@OR-2,,24,3,29,7,);
B(B_VAROUT,,MXlmlMainRedEnab,29,4,31,6,);
B(B_VARIN,,MDlmlMode,10,4,12,6,);
B(B_VARIN,,2.0,9,5,11,7,);
B(B_F,EQ_R,,13,3,18,7,);
L(23,17,24,17);
L(22,16,24,16);
L(20,15,24,15);
L(19,14,24,14);
L(18,17,19,17);
L(18,37,23,37);
L(18,33,22,33);
L(23,17,23,37);
L(20,15,20,21);
L(12,13,13,13);
L(11,14,13,14);
L(11,18,13,18);
L(11,22,13,22);
L(11,34,13,34);
L(11,38,13,38);
L(12,37,13,37);
L(12,33,13,33);
L(12,21,13,21);
L(12,17,13,17);
L(18,13,24,13);
L(19,14,19,20);
L(19,20,24,20);
L(18,21,24,21);
L(23,22,24,22);
L(11,26,13,26);
L(11,30,13,30);
L(18,25,24,25);
L(21,26,24,26);
L(18,29,21,29);
L(22,27,24,27);
L(23,28,24,28);
L(12,25,13,25);
L(12,29,13,29);
L(19,9,19,13);
L(19,9,24,9);
L(22,10,22,33);
L(22,10,24,10);
L(12,5,12,37);
L(21,6,21,29);
L(21,6,24,6);
L(12,5,13,5);
L(11,6,13,6);
L(18,5,24,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_COMMENT,,reeving,1,1,27,2,);
B(B_VARIN,,LDlmlReevingBoom,9,5,11,7,);
B(B_VAROUT,,MDlmlReevingBoom,18,4,20,6,);
B(B_F,limit,,12,3,18,8,);
B(B_VARIN,,1.0,10,4,12,6,);
L(11,6,12,6);
L(11,6,11,7);
L(11,7,12,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_VARIN,,LDlmlReevingLuJi,9,3,11,5,);
B(B_F,limit,,12,1,18,6,);
B(B_VAROUT,,MDlmlReevingLuJi,18,2,20,4,);
B(B_VARIN,,1.0,10,2,12,4,);
L(11,4,12,4);
L(11,4,11,5);
L(11,5,12,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 26 ;
        NETWORK_BODY
B(B_COMMENT,,reduce maximum load by special lifting function,1,1,27,2,);
B(B_F,sel,,20,3,25,8,);
B(B_VAROUT,,MDlmlUtilization,25,4,27,6,);
B(B_F,sel,,20,8,25,13,);
B(B_F,@MUL-2,,13,6,18,10,);
B(B_VARIN,,MXhgSpecialLift,17,4,19,6,);
B(B_F,sel,,20,13,25,18,);
B(B_F,sel,,20,18,25,23,);
B(B_VAROUT,,MDlmlMaxLoad2,25,19,27,21,);
B(B_VAROUT,,MDlmlMaxLoad1,25,14,27,16,);
B(B_VAROUT,,MDlmlUtilBackwar,25,9,27,11,);
B(B_F,@MUL-2,,13,11,18,15,);
B(B_F,@DIV,,13,16,18,20,);
B(B_F,@DIV,,13,21,18,25,);
B(B_VARIN,,2.0,10,23,12,25,);
B(B_VARIN,,MDlmlUtilBackwar,9,10,11,12,);
B(B_VARIN,,MDlmlMaxLoad1,9,15,11,17,);
B(B_VARIN,,MDlmlMaxLoad2,9,20,11,22,);
B(B_VARIN,,MDlmlUtilization,9,5,11,7,);
L(18,7,18,8);
L(18,7,20,7);
L(19,5,20,5);
L(19,20,20,20);
L(19,5,19,20);
L(19,10,20,10);
L(19,15,20,15);
L(18,12,18,13);
L(18,12,20,12);
L(18,17,18,18);
L(18,17,20,17);
L(18,22,18,23);
L(18,22,20,22);
L(12,9,13,9);
L(12,14,13,14);
L(12,19,13,19);
L(12,24,13,24);
L(12,9,12,24);
L(11,11,20,11);
L(13,11,13,13);
L(13,16,13,18);
L(13,21,13,23);
L(11,21,20,21);
L(11,16,20,16);
L(11,6,20,6);
L(13,6,13,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 18 ;
        NETWORK_BODY
B(B_VARIN,,MDlmlUtilBackwar,9,3,11,5,);
B(B_VARIN,,MDlmlUtilization,9,2,11,4,);
B(B_VARIN,,0.0,9,4,11,6,);
B(B_VARIN,,0.0,9,5,11,7,);
B(B_F,SigMax4,,11,1,18,7,);
B(B_F,@GT-2,,20,5,25,9,);
B(B_VARIN,,100.0,16,7,18,9,);
B(B_F,@GT-2,,20,9,25,13,);
B(B_VARIN,,105.0,16,11,18,13,);
B(B_F,@GT-2,,20,13,25,17,);
B(B_VARIN,,110.0,16,15,18,17,);
B(B_VAROUT,,LXutilGT100Perc,25,6,27,8,);
B(B_VAROUT,,LXutilGT105Perc,25,10,27,12,);
B(B_VAROUT,,LXutilGT110Perc,25,14,27,16,);
L(19,7,20,7);
L(18,12,20,12);
L(19,11,20,11);
L(18,16,20,16);
L(19,15,20,15);
L(18,8,20,8);
L(19,3,19,15);
L(18,3,19,3);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_COMMENT,,set blackbox data recording,1,1,27,2,);
B(B_VAROUT,,MXbbActivatByLml,16,4,18,6,);
B(B_VARIN,,MXlmlTypeDutyCyc,9,4,11,6,);
B(B_F,@AND-2,,11,3,16,7,NN);
B(B_VARIN,,MXlmlTypeANSI,9,5,11,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 21 ;
        NETWORK_BODY
B(B_COMMENT,,set speed reduction value for crane functions,1,1,27,2,);
B(B_F,@DIV,,14,3,19,7,);
B(B_VAROUT,,MDlmlSpeedRed_Hg,19,4,21,6,);
B(B_F,@DIV,,14,7,19,11,);
B(B_VAROUT,,MDlmlSpeedRed_Lg,19,8,21,10,);
B(B_F,@DIV,,14,11,19,15,);
B(B_VAROUT,,MDlmlSpeedRed_Sg,19,12,21,14,);
B(B_VARIN,,CDlmlReductSigHg,10,4,12,6,);
B(B_VARIN,,CDlmlReductSigLg,10,8,12,10,);
B(B_VARIN,,CDlmlReductSigSg,10,12,12,14,);
B(B_F,@DIV,,14,15,19,19,);
B(B_VAROUT,,MDlmlSpeedRed_Tg,19,16,21,18,);
B(B_VARIN,,CDlmlReductSigTg,10,16,12,18,);
B(B_VARIN,,100.0,11,18,13,20,);
L(12,5,14,5);
L(13,6,14,6);
L(13,14,14,14);
L(12,13,14,13);
L(12,9,14,9);
L(13,10,14,10);
L(13,18,14,18);
L(12,17,14,17);
L(13,6,13,19);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_FB,MsgRealReal,Message5,12,2,21,9,);
B(B_VARIN,,697,10,3,12,5,);
B(B_VARIN,,MSG_INFO,10,5,12,7,);
B(B_VARIN,,MDlmlAngleBoom,10,6,12,8,);
B(B_VARIN,,IXlimSwiBoomStab,10,4,12,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 26 ;
        NETWORK_BODY
B(B_COMMENT,,set output lml sounder,1,1,27,2,);
B(B_VARIN,,MXresetErrPage1,15,12,17,14,);
B(B_VARIN,,MXwarnSuppCrane,15,11,17,13,);
B(B_FB,RS,RS3,17,10,22,14,);
B(B_VARIN,,MXlmlBridged,25,14,27,16,);
B(B_F,@AND-2,,27,13,32,17,0N);
B(B_VARIN,,MXlmlTypeDutyCyc,25,15,27,17,);
B(B_F,@OR-2,,22,3,27,7,);
B(B_F,@AND-2,,17,3,22,7,0N);
B(B_VARIN,,MXlmlSounder,10,4,12,6,);
B(B_VARIN,,MXrcLmlSounder,10,5,12,7,);
B(B_F,@OR-2,,12,3,17,7,);
B(B_F,@OR-2,,12,7,17,11,);
B(B_VARIN,,MXlmlSensorError,10,9,12,11,);
B(B_VARIN,,MXlmlProgError,10,8,12,10,);
B(B_F,@AND-2,,27,3,32,7,0N);
B(B_F,sel,,40,16,45,21,);
B(B_VARIN,,TRUE,37,22,39,24,);
B(B_F,sel,,34,17,39,22,);
B(B_VARIN,,MXflashSignal,31,23,33,25,);
B(B_F,sel,,27,18,32,23,);
B(B_VARIN,,MXextLmlSounder,25,19,27,21,);
B(B_VARIN,,MXslowFlashSig,25,21,27,23,);
B(B_VARIN,,FALSE,25,20,27,22,);
B(B_VAROUT,,QXlmlSounder,45,17,47,19,);
L(22,6,22,12);
L(27,6,27,15);
L(17,6,17,9);
L(39,20,40,20);
L(39,20,39,23);
L(39,18,40,18);
L(39,15,39,18);
L(39,19,40,19);
L(33,5,33,19);
L(33,19,34,19);
L(33,21,34,21);
L(33,21,33,24);
L(32,20,34,20);
L(32,5,33,5);
L(32,15,39,15);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,exit program,1,1,27,2,);
B(B_VARIN,,MXlmlDeactive,11,3,13,5,);
B(B_JUMP,,exit,13,3,15,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_COMMENT,,deactivate lml Stop for HS by dgc,1,1,27,2,);
B(B_VARIN,,MXlmlTypeDutyCyc,11,4,13,6,);
B(B_F,@AND-2,,13,3,18,7,);
B(B_VAROUT,,MXlmlStopDeactiv,18,4,20,6,);
B(B_VARIN,,MXdgcBlockLml,11,5,13,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 29 ;
        NETWORK_BODY
B(B_F,@AND-2,,26,13,31,17,);
B(B_FB,R_TRIG,R_TRIG1,18,10,25,13,);
B(B_VARIN,,MXlmlRiggingAct,24,15,26,17,);
B(B_F,@OR-2,,13,10,18,14,);
B(B_VARIN,,MXrcBridgeLml,11,12,13,14,);
B(B_VARIN,,ITXlmlBridged,11,11,13,13,);
B(B_VARIN,,682,45,15,47,17,);
B(B_VARIN,,MSG_WARNING,45,17,47,19,);
B(B_FB,MsgRealReal,Message6,47,14,56,21,);
B(B_COMMENT,,setup button rigging,1,1,27,2,);
B(B_F,@OR-5,,31,15,36,22,);
B(B_VARIN,,MXlmlBridged,29,18,31,20,);
B(B_VARIN,,IXkeyswBridgeLml,29,19,31,21,);
B(B_VARIN,,MXjoystickInZero,23,7,25,9,);
B(B_F,@AND-3,,26,8,31,13,);
B(B_FB,RS,RSrigg,36,8,41,12,);
B(B_VAROUT,,MXlmlRiggingAct,41,9,43,11,);
B(B_VARIN,,MXlmlProgError,29,17,31,19,);
B(B_F,@AND-2,,26,21,31,25,N);
B(B_FB,TON,TON2,21,24,26,28,);
B(B_VARIN,,MXlmlValidTLT,19,25,21,27,);
B(B_VARIN,,T#5s,19,26,21,28,);
B(B_VARIN,,LXlmlErrGeoMain,24,22,26,24,);
B(B_COMMENT,,ACHTUNG: Dieses RS Flip-Flop wirdø^im init Teil gesetzt!,40,6,56,8,);
B(B_F,@OR-2,,21,3,26,7,N);
B(B_VARIN,,MXlmlValidTLT,19,4,21,6,);
B(B_VARIN,,LXlmlErrGeoMain,19,5,21,7,);
B(B_COMMENT,,Bei Winkelgeberfehler kann nicht ermittelt werden~ø^ob eine TLT vorhanden ist oder nicht.ø^Montage ohne angebautem Ausleger muß aber möglich sein.,62,12,84,15,);
B(B_COMMENT,,Rüstbetrieb kann aktiviert werden wenn keine TLTø^vorhanden ist~ oder die Winkelgeber des Hauptauslegersø^Fehler melden. (LXlmlErrGeoMain),62,16,84,19,);
B(B_COMMENT,,Grund: Montagearbeit mit angebautem Anlenkstück undø^Überbrückungsstecker muß möglich sein.,62,19,84,21,);
L(31,15,31,17);
L(41,17,47,17);
L(25,12,25,15);
L(25,8,25,11);
L(25,15,26,15);
L(25,12,26,12);
L(25,11,26,11);
L(31,10,36,10);
L(41,10,41,17);
L(36,11,36,17);
L(31,21,31,23);
L(26,24,26,26);
L(26,5,26,10);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 31 ;
        NETWORK_BODY
B(B_VARIN,,MXlmlSensorError,28,16,30,18,);
B(B_F,@AND-2,,25,12,30,16,);
B(B_FB,R_TRIG,R_TRIG2,18,9,25,12,);
B(B_F,@AND-2,,25,8,30,12,);
B(B_VAROUT,,MXlmlDeadlockAct,40,9,42,11,);
B(B_FB,RS,RS4,35,8,40,12,);
B(B_VARIN,,MXjoystickInZero,23,6,25,8,);
B(B_F,@OR-2,,13,9,18,13,);
B(B_VARIN,,MXrcBridgeLml,11,11,13,13,);
B(B_VARIN,,ITXlmlBridged,11,10,13,12,);
B(B_VAROUT,,LXdeadlockWarn,57,13,59,15,);
B(B_F,@AND-2,,52,12,57,16,);
B(B_VARIN,,LXutilGT100Perc,50,14,52,16,);
B(B_FB,TON,TON3,25,24,30,28,);
B(B_VARIN,,T#10s,23,28,25,30,);
B(B_VARIN,,IXkeyswBridgeLml,28,21,30,23,);
B(B_F,@AND-2,,20,24,25,28,);
B(B_VARIN,,MXminEngineSpeed,13,26,15,28,);
B(B_VARIN,,MXjoystickInZero,13,27,15,29,);
B(B_F,@OR-2,,15,25,20,29,N);
B(B_VARIN,,MXlmlDeadlockAct,18,14,20,16,);
B(B_VARIN,,683,44,18,46,20,);
B(B_FB,MsgRealReal,Message7,46,17,55,24,);
B(B_VARIN,,MXlmlBridged,28,20,30,22,);
B(B_VARIN,,MXlmlValidTLT,28,18,30,20,);
B(B_VARIN,,MXlmlProgError,28,17,30,19,);
B(B_VARIN,,MSG_WARNING,44,20,46,22,);
B(B_VARIN,,MDlmlLoadBoom,44,21,46,23,);
B(B_VARIN,,MDlmlLoadLuffJib,44,22,46,24,);
B(B_F,@OR-8,,30,14,35,24,000NN);
B(B_VARIN,,IXentrySwiClosed,28,19,30,21,);
B(B_COMMENT,,setup button deadlock,1,1,27,2,);
B(B_F,@AND-3,,40,1,45,6,NN);
B(B_VARIN,,MXlmlTypeANSI,38,2,40,4,);
B(B_VARIN,,MXlmlTypeDutyCyc,38,3,40,5,);
B(B_F,@AND-2,,45,4,50,8,N);
B(B_VAROUT,,MXlmlRedAllFunct,55,2,57,4,);
B(B_FB,RS,RS5,50,1,55,5,);
L(30,14,30,16);
L(25,11,25,14);
L(30,10,35,10);
L(35,11,35,16);
L(25,7,25,10);
L(40,10,40,20);
L(40,14,52,14);
L(25,27,25,29);
L(30,23,30,26);
L(20,15,20,26);
L(20,15,25,15);
L(40,20,46,20);
L(50,4,50,6);
L(45,3,50,3);
L(45,3,45,6);
L(25,7,45,7);
L(40,5,40,10);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 48 ;
        NETWORK_BODY
B(B_F,@AND-2,,27,12,32,16,);
B(B_VARIN,,MXlmlTypeDutyCyc,30,17,32,19,);
B(B_VARIN,,MXlmlTypeANSI,30,16,32,18,);
B(B_VARIN,,MXremContPresel,30,18,32,20,);
B(B_VARIN,,MXlmlBridged,25,14,27,16,);
B(B_FB,R_TRIG,R_TRIG3,13,9,20,12,);
B(B_VARIN,,IXlml2010KeySwit,11,10,13,12,);
B(B_FB,TOF,TOF1,20,21,25,25,);
B(B_VARIN,,T#1800s,18,23,20,25,);
B(B_F,@AND-2,,27,21,32,25,N);
B(B_VARIN,,MXjoystickInZero,25,25,27,27,);
B(B_F,@OR-6,,32,14,37,22,0000N);
B(B_VARIN,,MXminEngineSpeed,30,19,32,21,);
B(B_FB,R_TRIG,R_TRIG4,20,28,27,31,);
B(B_VARIN,,ITXlmlBridged,18,29,20,31,);
B(B_F,@AND-2,,27,31,32,35,);
B(B_VARIN,,MXlmlBridged,25,33,27,35,);
B(B_F,@OR-2,,42,17,47,21,);
B(B_VAROUT,,MXlmlBridged,47,18,49,20,);
B(B_F,@AND-2,,27,8,32,12,);
B(B_FB,RS,RS6,37,8,42,12,);
B(B_F,@AND-2,,27,27,32,31,);
B(B_VARIN,,685,54,27,56,29,);
B(B_VARIN,,MSG_WARNING,54,29,56,31,);
B(B_FB,MsgRealReal,Message9,56,26,65,33,);
B(B_VARIN,,MDlmlLoadBoom,54,30,56,32,);
B(B_VARIN,,MDlmlLoadLuffJib,54,31,56,33,);
B(B_FB,RS,RS8,37,27,42,31,);
B(B_FB,R_TRIG,R_TRIG5,13,40,20,43,);
B(B_FB,F_TRIG,F_TRIG1,13,43,20,46,);
B(B_VARIN,,IXentrySwiClosed,11,41,13,43,);
B(B_F,@AND-2,,15,35,20,39,NN);
B(B_VARIN,,MXlmlTypeANSI,13,36,15,38,);
B(B_VARIN,,MXlmlTypeDutyCyc,13,37,15,39,);
B(B_VARIN,,MXremContPresel,30,39,32,41,);
B(B_VARIN,,IXkeyswBridgeLml,30,40,32,42,);
B(B_F,@OR-6,,32,34,37,42,00000N);
B(B_COMMENT,,set bridge lml,1,1,27,2,);
B(B_F,@AND-2,,43,5,48,9,0N);
B(B_FB,RS,RS7,48,2,53,6,);
B(B_VAROUT,,MXlmlRedLoaIncFu,53,3,55,5,);
B(B_VARIN,,MXjoystickInZero,25,6,27,8,);
B(B_VARIN,,MSG_WARNING,54,43,56,45,);
B(B_FB,MsgRealReal,Message10,56,40,65,47,);
B(B_VARIN,,686,54,41,56,43,);
B(B_VARIN,,MSG_WARNING,54,10,56,12,);
B(B_FB,MsgRealReal,Message8,56,7,65,14,);
B(B_VARIN,,MDlmlLoadBoom,54,11,56,13,);
B(B_VARIN,,MDlmlLoadLuffJib,54,12,56,14,);
B(B_VARIN,,684,54,8,56,10,);
L(32,14,32,16);
L(20,11,20,23);
L(25,23,27,23);
L(32,21,32,23);
L(27,30,27,33);
L(32,33,32,36);
L(42,20,42,29);
L(27,11,27,14);
L(20,11,27,11);
L(32,10,37,10);
L(37,11,37,16);
L(32,29,37,29);
L(42,29,56,29);
L(37,30,37,36);
L(27,24,27,29);
L(20,45,21,45);
L(13,42,13,45);
L(32,41,32,43);
L(20,37,32,37);
L(20,38,32,38);
L(21,39,32,39);
L(21,39,21,45);
L(20,38,20,42);
L(42,4,42,19);
L(42,4,48,4);
L(42,8,43,8);
L(27,7,43,7);
L(27,7,27,10);
L(48,5,48,7);
L(32,43,56,43);
L(42,10,56,10);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 21 ;
        NETWORK_BODY
B(B_VARIN,,MXlmlBridged,16,8,18,10,);
B(B_F,@AND-2,,18,7,23,11,);
B(B_F,@OR-2,,13,10,18,14,);
B(B_VARIN,,MXlmlTypeDutyCyc,11,12,13,14,);
B(B_VARIN,,MXlmlTypeANSI,11,11,13,13,);
B(B_VARIN,,ITXlmlBridged,11,15,13,17,);
B(B_F,@OR-2,,13,14,18,18,);
B(B_VARIN,,IXkeyswBridgeLml,11,16,13,18,);
B(B_VARIN,,MXflashSignal,16,18,18,20,);
B(B_F,@AND-2,,18,14,23,18,);
B(B_F,@OR-4,,24,3,29,9,);
B(B_VARIN,,MXlmlRiggingAct,22,4,24,6,);
B(B_VARIN,,MXlmlDeadlockAct,22,5,24,7,);
B(B_VAROUT,,QTXlmlBridged,29,4,31,6,);
B(B_COMMENT,,set Button LED X23,1,1,27,2,);
L(18,10,18,12);
L(18,17,18,19);
L(23,7,24,7);
L(23,7,23,9);
L(24,8,24,16);
L(23,16,24,16);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 18 ;
        NETWORK_BODY
B(B_COMMENT,,set warning for not errectable configurations,1,1,27,2,);
B(B_VARIN,,MXlmlNotErrectab,24,4,26,6,);
B(B_F,@AND-2,,26,3,31,7,);
B(B_VAROUT,,MXwarnSuppCrane,31,4,33,6,);
B(B_VARIN,,MSG_INFO,34,10,36,12,);
B(B_FB,MsgRealReal,Message11,36,7,45,14,);
B(B_VARIN,,590,34,8,36,10,);
B(B_F,@OR-2,,21,6,26,10,);
B(B_F,@OR-3,,11,12,16,17,N);
B(B_VARIN,,MXlmlProgError,9,14,11,16,);
B(B_VARIN,,MXlmlErrGeometri,9,15,11,17,);
B(B_VARIN,,MXlmlValidTLT,9,13,11,15,);
B(B_F,@AND-2,,16,9,21,13,);
B(B_VARIN,,MXlmlBridged,14,10,16,12,);
B(B_VARIN,,MXlmlRiggingAct,19,7,21,9,);
L(26,6,26,8);
L(31,5,31,10);
L(31,10,36,10);
L(16,12,16,14);
L(21,9,21,11);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 15 ;
        NETWORK_BODY
B(B_COMMENT,,set stops for luffing gears,1,1,27,2,);
B(B_VARIN,,MXlmlStop,9,6,11,8,);
B(B_VARIN,,LXutilGT105Perc,9,7,11,9,);
B(B_VARIN,,MXlmlDeadlockAct,9,8,11,10,);
B(B_F,@AND-3,,11,5,16,10,00N);
B(B_F,@AND-2,,11,10,16,14,);
B(B_VARIN,,MXlmlStop,9,11,11,13,);
B(B_VARIN,,LXutilGT110Perc,9,12,11,14,);
B(B_F,@OR-2,,16,5,21,9,);
B(B_VARIN,,MXlmlBridged,19,3,21,5,);
B(B_F,@AND-2,,21,4,26,8,N);
B(B_VAROUT,,MXlmlStopLgUp,26,5,28,7,);
L(16,8,16,12);
L(21,4,21,6);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_VARIN,,MXlmlStopBackwar,9,4,11,6,);
B(B_VARIN,,LXutilGT105Perc,9,5,11,7,);
B(B_VARIN,,MXlmlDeadlockAct,9,6,11,8,);
B(B_F,@AND-3,,11,3,16,8,00N);
B(B_F,@AND-2,,11,8,16,12,);
B(B_VARIN,,MXlmlStopBackwar,9,9,11,11,);
B(B_VARIN,,LXutilGT110Perc,9,10,11,12,);
B(B_F,@OR-2,,16,3,21,7,);
B(B_VARIN,,MXlmlBridged,19,1,21,3,);
B(B_F,@AND-2,,21,2,26,6,N);
B(B_VAROUT,,MXlmlStopLgDn,26,3,28,5,);
L(16,6,16,10);
L(21,2,21,4);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 22 ;
        NETWORK_BODY
B(B_COMMENT,,set lml warning,1,1,27,2,);
B(B_VARIN,,90.0,9,7,11,9,);
B(B_VARIN,,85.0,9,11,11,13,);
B(B_F,@LE-2,,13,9,18,13,);
B(B_F,@GE-2,,13,5,18,9,);
B(B_FB,SR,SR2,18,5,23,9,);
B(B_VARIN,,90.0,9,15,11,17,);
B(B_VARIN,,85.0,9,19,11,21,);
B(B_F,@LE-2,,13,17,18,21,);
B(B_F,@GE-2,,13,13,18,17,);
B(B_FB,SR,SR3,18,13,23,17,);
B(B_F,@OR-2,,23,5,28,9,);
B(B_VARIN,,MDlmlUtilBackwar,10,14,12,16,);
B(B_VARIN,,MDlmlUtilization,10,6,12,8,);
B(B_F,@AND-2,,28,4,33,8,N);
B(B_VARIN,,MXlmlRiggingAct,26,3,28,5,);
B(B_VAROUT,,MXlmlWarning,33,5,35,7,);
L(11,8,13,8);
L(11,12,13,12);
L(12,11,13,11);
L(12,7,13,7);
L(18,8,18,11);
L(11,16,13,16);
L(11,20,13,20);
L(12,19,13,19);
L(12,15,13,15);
L(18,16,18,19);
L(12,7,12,11);
L(12,15,12,19);
L(23,8,23,15);
L(28,4,28,6);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 28 ;
        NETWORK_BODY
B(B_VARIN,,100.0,10,13,12,15,);
B(B_VARIN,,MDlmlUtilization,11,12,13,14,);
B(B_F,@GT-2,,14,11,19,15,);
B(B_F,@GT-2,,14,15,19,19,);
B(B_VARIN,,105.0,10,17,12,19,);
B(B_F,@AND-2,,21,10,26,14,N);
B(B_VARIN,,95.0,10,21,12,23,);
B(B_F,@LE-2,,14,19,19,23,);
B(B_F,@OR-2,,21,18,26,22,);
B(B_VARIN,,MXlmlDeadlockAct,18,9,20,11,);
B(B_F,@OR-2,,26,10,31,14,);
B(B_FB,SR,SR4,31,10,36,14,);
B(B_VARIN,,MXlmlValidTLT,29,23,31,25,);
B(B_VARIN,,IXlgUppLimDerrCl,29,22,31,24,);
B(B_F,@AND-3,,31,21,36,26,N);
B(B_VARIN,,MXlmlDerrickEnab,29,24,31,26,);
B(B_F,@OR-2,,36,10,41,14,);
B(B_VARIN,,MXlmlStopByBCraw,39,6,41,8,);
B(B_F,@AND-2,,46,4,51,8,N);
B(B_VAROUT,,LXlmlStop,51,5,53,7,);
B(B_VARIN,,MXlmlSensorError,39,8,41,10,);
B(B_VARIN,,MXlmlProgError,39,7,41,9,);
B(B_F,@OR-4,,41,5,46,11,);
B(B_F,@OR-2,,41,1,46,5,);
B(B_VARIN,,MXlmlRiggingAct,39,2,41,4,);
B(B_COMMENT,,set lml stop,1,1,27,2,);
B(B_VARIN,,MXlmlStopDeactiv,39,3,41,5,);
L(12,14,14,14);
L(13,13,14,13);
L(12,18,14,18);
L(13,17,14,17);
L(26,13,26,17);
L(12,22,14,22);
L(13,21,14,21);
L(13,13,13,21);
L(26,20,31,20);
L(19,13,21,13);
L(20,10,20,20);
L(20,20,21,20);
L(19,21,21,21);
L(20,12,21,12);
L(19,17,26,17);
L(31,13,31,20);
L(36,13,36,23);
L(41,10,41,12);
L(46,3,46,6);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 28 ;
        NETWORK_BODY
B(B_VARIN,,100.0,10,13,12,15,);
B(B_VARIN,,MDlmlUtilBackwar,11,12,13,14,);
B(B_F,@GT-2,,14,11,19,15,);
B(B_F,@GT-2,,14,15,19,19,);
B(B_VARIN,,105.0,10,17,12,19,);
B(B_F,@AND-2,,21,10,26,14,N);
B(B_VARIN,,95.0,10,21,12,23,);
B(B_F,@LE-2,,14,19,19,23,);
B(B_FB,SR,SR5,31,10,36,14,);
B(B_F,@OR-2,,26,10,31,14,);
B(B_F,@OR-2,,36,10,41,14,);
B(B_VARIN,,MXlmlValidTLT,29,24,31,26,);
B(B_VARIN,,IXlgUppLimDerrCl,29,23,31,25,);
B(B_F,@AND-3,,31,22,36,27,N);
B(B_VARIN,,MXlmlDerrickEnab,29,25,31,27,);
B(B_F,@OR-2,,21,18,26,22,);
B(B_VARIN,,MXlmlDeadlockAct,18,9,20,11,);
B(B_VARIN,,MXlmlStopByBCraw,39,6,41,8,);
B(B_F,@AND-2,,46,4,51,8,N);
B(B_VAROUT,,LXlmlStopBackwar,51,5,53,7,);
B(B_VARIN,,MXlmlSensorError,39,8,41,10,);
B(B_VARIN,,MXlmlProgError,39,7,41,9,);
B(B_F,@OR-4,,41,5,46,11,);
B(B_COMMENT,,set lml stop backwards,1,1,27,2,);
B(B_F,@OR-2,,41,1,46,5,);
B(B_VARIN,,MXlmlRiggingAct,39,2,41,4,);
B(B_VARIN,,MXlmlStopDeactiv,39,3,41,5,);
L(12,14,14,14);
L(13,13,14,13);
L(12,18,14,18);
L(13,17,14,17);
L(26,13,26,17);
L(12,22,14,22);
L(13,21,14,21);
L(13,13,13,21);
L(36,13,36,24);
L(26,20,31,20);
L(31,13,31,20);
L(19,13,21,13);
L(19,17,26,17);
L(19,21,21,21);
L(20,20,21,20);
L(20,10,20,20);
L(20,12,21,12);
L(41,10,41,12);
L(46,3,46,6);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 16 ;
        NETWORK_BODY
B(B_VARIN,,LXlmlStop,11,5,13,7,);
B(B_F,@OR-2,,15,3,20,7,);
B(B_F,@OR-2,,15,7,20,11,);
B(B_VARIN,,MXlmlCalculating,12,4,14,6,);
B(B_VARIN,,LXlmlStopBackwar,10,9,12,11,);
B(B_F,@OR-2,,15,11,20,15,);
B(B_VAROUT,,MXlmlStopScreen,20,12,22,14,);
B(B_VAROUT,,MXlmlStop,20,4,22,6,);
B(B_VAROUT,,MXlmlStopBackwar,20,8,22,10,);
B(B_COMMENT,,set lml stops global,1,1,27,2,);
B(B_COMMENT,,MXlmlCalculating löst nur einen Stop aus~ø^aber keine Anzeige und keinen Piepser,20,6,38,8,);
L(12,14,15,14);
L(13,13,15,13);
L(12,10,15,10);
L(14,9,15,9);
L(14,5,14,9);
L(14,5,15,5);
L(13,6,15,6);
L(13,6,13,13);
L(12,10,12,14);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_VAROUT,,MXlmlStopScrBack,12,3,14,5,);
B(B_VARIN,,LXstopCantBack,10,3,12,5,);
B(B_COMMENT,,set symbol cant back,1,1,27,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_COMMENT,,set lml lights and sounder,1,1,28,2,);
B(B_VAROUT,,QXlmlLightGreen,17,4,19,6,);
B(B_F,@AND-6,,12,3,17,11,NNNNNN);
B(B_VARIN,,LXlmlStop,10,5,12,7,);
B(B_VARIN,,LXlmlStopBackwar,10,6,12,8,);
B(B_VARIN,,MXlmlRiggingAct,10,7,12,9,);
B(B_VARIN,,LXdeadlockWarn,10,8,12,10,);
B(B_VARIN,,MXlmlBridged,10,9,12,11,);
B(B_VARIN,,MXlmlWarning,10,4,12,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_VARIN,,MXlmlWarning,15,5,17,7,);
B(B_VARIN,,MXflashSignal,15,10,17,12,);
B(B_F,@AND-2,,17,8,22,12,);
B(B_F,@OR-2,,12,7,17,11,);
B(B_VARIN,,MXlmlRiggingAct,10,8,12,10,);
B(B_VARIN,,LXdeadlockWarn,10,9,12,11,);
B(B_VARIN,,LXlmlStop,10,2,12,4,);
B(B_VARIN,,LXlmlStopBackwar,10,3,12,5,);
B(B_F,@OR-2,,12,1,17,5,);
B(B_VAROUT,,QXlmlLightYellow,27,4,29,6,);
B(B_F,@OR-2,,22,3,27,7,);
B(B_F,@AND-3,,17,3,22,8,N0N);
L(17,7,17,10);
L(22,6,22,10);
L(17,3,17,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_VARIN,,LXlmlStop,10,2,12,4,);
B(B_VARIN,,LXlmlStopBackwar,10,3,12,5,);
B(B_F,@OR-2,,12,1,17,5,);
B(B_F,@AND-2,,17,1,22,5,0N);
B(B_VARIN,,MXlmlBridged,15,6,17,8,);
B(B_VARIN,,MXflashSignal,15,7,17,9,);
B(B_F,@OR-2,,22,1,27,5,);
B(B_VAROUT,,QXlmlLightRed,27,2,29,4,);
B(B_F,@AND-3,,17,5,22,10,00N);
B(B_VARIN,,MXlmlTypeDutyCyc,15,8,17,10,);
L(17,4,17,7);
L(22,4,22,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 15 ;
        NETWORK_BODY
B(B_COMMENT,,set luffing gear stop by boom angle,1,1,27,2,);
B(B_VARIN,,MDlmlAngleBoom,9,8,11,10,);
B(B_F,@GT-2,,11,7,16,11,);
B(B_VARIN,,MDmaxAngleMainBo,9,9,11,11,);
B(B_VARIN,,LXlmlErrGeoMain,14,11,16,13,);
B(B_F,@AND-2,,21,7,26,11,0N);
B(B_F,@OR-2,,16,7,21,11,);
B(B_VARIN,,MXlimitSwBridged,19,12,21,14,);
B(B_F,@OR-2,,26,6,31,10,);
B(B_F,@AND-2,,21,3,26,7,0N);
B(B_VARIN,,LXstopCantBack,19,4,21,6,);
B(B_VARIN,,MXlmlBridged,19,5,21,7,);
B(B_VAROUT,,MXlgUpAngleStop,31,7,33,9,);
B(B_COMMENT,,Bei "Kippen nach hinten" darf keinesfalls mehr EZW heben gefahren werden.,27,5,55,6,);
B(B_COMMENT,,Dieser Endschalter begrenzt die minimale Ausladung des Hauptauslegers bezgl. der TLT.,22,11,54,12,);
L(16,10,16,12);
L(21,10,21,13);
L(26,5,26,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 34 ;
        NETWORK_BODY
B(B_VARIN,,LXstopCantBack,26,3,28,5,);
B(B_VARIN,,MXlmlBridged,26,4,28,6,);
B(B_F,@AND-2,,28,2,33,6,0N);
B(B_COMMENT,,set luffing gear 2 stop by luffing jib angle,1,1,27,2,);
B(B_COMMENT,,Bei "Kippen nach hinten" darf keinesfalls mehr EZW heben gefahren werden.,34,3,62,4,);
B(B_VARIN,,MDlmlAngleLufJib,14,13,16,15,);
B(B_F,@GT-2,,16,12,21,16,);
B(B_VARIN,,MDlmlAngleBoom,9,16,11,18,);
B(B_VARIN,,8.0,9,17,11,19,);
B(B_F,@SUB,,11,15,16,19,);
B(B_F,@AND-3,,21,11,26,16,00N);
B(B_VARIN,,MXlmlErrGeometri,19,7,21,9,);
B(B_VARIN,,MXlimitSwBridged,19,8,21,10,);
B(B_F,@AND-2,,21,6,26,10,0N);
B(B_VARIN,,MXlmlLuffJibEnab,19,10,21,12,);
B(B_F,@OR-2,,28,10,33,14,);
B(B_F,@OR-2,,33,9,38,13,);
B(B_VAROUT,,MXlg2UpAngleStop,38,10,40,12,);
B(B_F,@LT-2,,11,21,16,25,);
B(B_VARIN,,MDlmlAngleBoom,9,22,11,24,);
B(B_VARIN,,10.0,9,23,11,25,);
B(B_VARIN,,MXlimitSwBridged,14,19,16,21,);
B(B_F,@AND-2,,16,18,21,22,);
B(B_F,@AND-2,,29,18,34,22,0N);
B(B_F,@AND-2,,29,14,34,18,);
B(B_VARIN,,MSG_INFO,41,16,43,18,);
B(B_FB,MsgRealReal,Message12,43,13,52,20,);
B(B_VARIN,,705,41,14,43,16,);
B(B_VARIN,,MDlmlAngleLufJib,41,18,43,20,);
B(B_VARIN,,MDlmlAngleBoom,41,17,43,19,);
B(B_VARIN,,ITXlimSwBridged,24,22,26,24,);
B(B_F,@OR-3,,34,20,39,25,);
B(B_VAROUT,,MXlg2DnAngleStop,39,21,41,23,);
B(B_VARIN,,MXlmlLuffJibEnab,27,25,29,27,);
B(B_COMMENT,,Der Stop über den Auslegerwinkel wird normalerweise nicht benötigt~ da die LMB ausserhalb der TLT sowieso stoppt.ø^Wenn der Lastort jedoch Hauptausleger ist~ dann gilt die TLT des Hpt und die Wsp könnte weiter gesenkt werden.,35,26,77,28,);
B(B_COMMENT,,Dieser Endschalter dient als zweiter Endschalter oben~ nach dem mechanischen Endschalter.ø^Entgegengesetzte Richtung muß entriegelt werden. (Dabei wird eine Msg abgesetzt),55,14,89,16,);
B(B_VARIN,,MXlimitSwBridged,27,26,29,28,);
B(B_F,@AND-4,,29,24,34,30,0N);
B(B_F,@LT-2,,24,29,29,33,);
B(B_VARIN,,MDlmlAngleLufJib,22,30,24,32,);
B(B_VARIN,,10.0,22,31,24,33,);
B(B_VARIN,,LXlmlJiLoLocMain,27,27,29,29,);
L(21,11,21,13);
L(16,15,16,17);
L(21,15,21,20);
L(33,4,33,11);
L(16,21,16,23);
L(26,8,27,8);
L(27,12,28,12);
L(26,13,28,13);
L(27,8,27,23);
L(28,16,29,16);
L(34,16,43,16);
L(28,13,28,20);
L(26,17,29,17);
L(26,17,26,23);
L(26,21,29,21);
L(28,20,29,20);
L(27,23,34,23);
L(34,24,34,26);
L(34,20,34,22);
L(29,29,29,31);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 21 ;
        NETWORK_BODY
B(B_COMMENT,,set message when utilization is higher than 110%,1,1,27,2,);
B(B_F,@GT-2,,13,12,18,16,);
B(B_F,sel,,20,15,25,20,);
B(B_VARIN,,LDmaxUtilization,9,14,11,16,);
B(B_F,@GT-2,,13,8,18,12,);
B(B_VARIN,,MDlmlUtilization,9,9,11,11,);
B(B_VARIN,,110.0,9,10,11,12,);
B(B_VARIN,,LXstarted,16,6,18,8,);
B(B_VAROUT,,LX1,18,9,20,11,);
B(B_F,@AND-4,,18,3,23,9,N);
B(B_VARIN,,MSG_INFO,29,5,31,7,);
B(B_FB,MsgRealReal,Message13,31,2,40,9,);
B(B_VARIN,,243,29,3,31,5,);
B(B_VARIN,,LXlmlProgError,16,4,18,6,);
B(B_VARIN,,MXlmlValidTLT,16,5,18,7,);
B(B_VAROUT,,LDmaxUtilization,30,16,32,18,);
L(11,15,11,18);
L(18,14,19,14);
L(19,17,20,17);
L(11,18,20,18);
L(12,19,20,19);
L(12,14,13,14);
L(11,15,13,15);
L(11,10,13,10);
L(12,10,12,19);
L(11,11,13,11);
L(19,14,19,17);
L(18,8,18,10);
L(30,7,31,7);
L(23,5,31,5);
L(30,7,30,17);
L(25,17,30,17);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_VARIN,,LX1,9,2,11,4,);
B(B_F,sel,,11,1,16,6,N);
B(B_VARIN,,0.0,9,4,11,6,);
B(B_VARIN,,LDmaxUtilization,9,3,11,5,);
B(B_VAROUT,,LDmaxUtilization,16,2,18,4,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 21 ;
        NETWORK_BODY
B(B_COMMENT,,set message when utilization backwards is higher than 110%,1,1,27,2,);
B(B_F,@GT-2,,13,12,18,16,);
B(B_F,sel,,20,15,25,20,);
B(B_VARIN,,LDmaxUtilBackwar,9,14,11,16,);
B(B_F,@GT-2,,13,8,18,12,);
B(B_VARIN,,MDlmlUtilBackwar,9,9,11,11,);
B(B_VARIN,,110.0,9,10,11,12,);
B(B_VAROUT,,LX2,18,9,20,11,);
B(B_VARIN,,LXstarted,16,6,18,8,);
B(B_F,@AND-4,,18,3,23,9,N);
B(B_VARIN,,LXlmlProgError,16,4,18,6,);
B(B_VARIN,,MXlmlValidTLT,16,5,18,7,);
B(B_VARIN,,MSG_INFO,29,5,31,7,);
B(B_FB,MsgRealReal,Message14,31,2,40,9,);
B(B_VARIN,,280,29,3,31,5,);
B(B_VAROUT,,LDmaxUtilBackwar,30,16,32,18,);
L(11,15,11,18);
L(18,14,19,14);
L(19,17,20,17);
L(11,18,20,18);
L(12,19,20,19);
L(12,14,13,14);
L(11,15,13,15);
L(11,10,13,10);
L(12,10,12,19);
L(11,11,13,11);
L(19,14,19,17);
L(18,8,18,10);
L(30,7,31,7);
L(23,5,31,5);
L(30,7,30,17);
L(25,17,30,17);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_VARIN,,LX2,9,2,11,4,);
B(B_F,sel,,11,1,16,6,N);
B(B_VARIN,,0.0,9,4,11,6,);
B(B_VARIN,,LDmaxUtilBackwar,9,3,11,5,);
B(B_VAROUT,,LDmaxUtilBackwar,16,2,18,4,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 23 ;
        NETWORK_BODY
B(B_COMMENT,,set slewing gear stops by blocked crawlers,1,1,27,2,);
B(B_F,@LE-2,,13,3,18,7,);
B(B_F,@GE-2,,13,7,18,11,);
B(B_VARIN,,90.0,9,5,11,7,);
B(B_VARIN,,MDsgAngle,10,4,12,6,);
B(B_VARIN,,270.0,11,9,13,11,);
B(B_F,sel,,24,9,29,14,);
B(B_F,sel,,24,14,29,19,);
B(B_VAROUT,,MDlmlStopSgLeft,29,15,31,17,);
B(B_VAROUT,,MDlmlStopSgRight,29,10,31,12,);
B(B_VARIN,,MDlmlStopSgLeft,22,16,24,18,);
B(B_VARIN,,MDlmlStopSgRight,20,11,22,13,);
B(B_VARIN,,LDblockCrawleAng,20,12,22,14,);
B(B_F,@SUB,,19,18,24,22,);
B(B_VARIN,,LDblockCrawleAng,17,20,19,22,);
B(B_VARIN,,360.0,17,19,19,21,);
B(B_F,@OR-2,,18,6,23,10,);
L(11,6,13,6);
L(12,5,13,5);
L(12,5,12,9);
L(12,9,13,9);
L(22,13,24,13);
L(23,16,24,16);
L(23,11,24,11);
L(22,12,24,12);
L(24,18,24,20);
L(18,5,18,8);
L(23,8,23,16);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 22 ;
        NETWORK_BODY
B(B_VARIN,,90.0,9,3,11,5,);
B(B_VARIN,,MDsgAngle,10,2,12,4,);
B(B_VARIN,,270.0,11,7,13,9,);
B(B_F,sel,,24,7,29,12,);
B(B_F,sel,,24,13,29,18,);
B(B_VAROUT,,MDlmlStopSgLeft,29,14,31,16,);
B(B_VAROUT,,MDlmlStopSgRight,29,8,31,10,);
B(B_VARIN,,MDlmlStopSgLeft,22,15,24,17,);
B(B_VARIN,,MDlmlStopSgRight,20,9,22,11,);
B(B_F,@SUB,,19,17,24,21,);
B(B_VARIN,,LDblockCrawleAng,17,19,19,21,);
B(B_VARIN,,180.0,17,18,19,20,);
B(B_F,@GT-2,,13,1,18,5,);
B(B_F,@LT-2,,13,5,18,9,);
B(B_F,@AND-2,,18,4,23,8,);
B(B_VARIN,,LDblockCrawleAng,15,13,17,15,);
B(B_F,@ADD-2,,17,11,22,15,);
B(B_VARIN,,180.0,15,12,17,14,);
B(B_VAROUT,,LXbackArea,23,5,25,7,);
L(12,3,12,7);
L(22,11,24,11);
L(23,15,24,15);
L(23,9,24,9);
L(22,10,24,10);
L(24,17,24,19);
L(12,3,13,3);
L(11,4,13,4);
L(12,7,13,7);
L(23,6,23,15);
L(18,3,18,6);
L(22,11,22,13);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_F,sel,,13,1,18,6,);
B(B_VAROUT,,MDlmlStopSgRight,18,2,20,4,);
B(B_F,sel,,13,6,18,11,);
B(B_VAROUT,,MDlmlStopSgLeft,18,7,20,9,);
B(B_VARIN,,0.0,11,8,13,10,);
B(B_VARIN,,MDlmlStopSgLeft,11,9,13,11,);
B(B_VARIN,,0.0,9,3,11,5,);
B(B_VARIN,,MDlmlStopSgRight,9,4,11,6,);
B(B_VARIN,,MXlmlBlockCrawle,10,2,12,4,);
L(11,4,13,4);
L(11,5,13,5);
L(12,8,13,8);
L(12,3,12,8);
L(12,3,13,3);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 26 ;
        NETWORK_BODY
B(B_COMMENT,,set lml stop by blocked crawlers and slewing gear not in position,1,1,27,2,);
B(B_VARIN,,MDsgAngle,15,5,17,7,);
B(B_F,@ADD-2,,11,7,16,11,);
B(B_VARIN,,MDlmlStopSgRight,9,8,11,10,);
B(B_VARIN,,2.0,9,9,11,11,);
B(B_F,@SUB,,13,11,18,15,);
B(B_VARIN,,2.0,11,13,13,15,);
B(B_VARIN,,MDlmlStopSgLeft,11,12,13,14,);
B(B_F,@AND-2,,23,7,28,11,);
B(B_F,@GT-2,,18,4,23,8,);
B(B_F,@LT-2,,18,8,23,12,);
B(B_VARIN,,MDsgAngle,15,15,17,17,);
B(B_F,@ADD-2,,11,17,16,21,);
B(B_VARIN,,MDlmlStopSgRight,9,18,11,20,);
B(B_VARIN,,2.0,9,19,11,21,);
B(B_F,@SUB,,13,21,18,25,);
B(B_VARIN,,2.0,11,23,13,25,);
B(B_VARIN,,MDlmlStopSgLeft,11,22,13,24,);
B(B_F,sel,,28,6,33,11,);
B(B_VARIN,,LXbackArea,26,3,28,5,);
B(B_F,@GT-2,,18,14,23,18,);
B(B_F,@LT-2,,18,18,23,22,);
B(B_F,@OR-2,,23,14,28,18,);
B(B_VARIN,,MXsgAngSenError,31,2,33,4,);
B(B_F,@OR-2,,33,5,38,9,);
B(B_F,@AND-2,,38,4,43,8,);
B(B_VARIN,,MXlmlBlockCrawle,36,1,38,3,);
B(B_VAROUT,,MXlmlStopByBCraw,43,5,45,7,);
L(17,6,17,10);
L(23,6,23,9);
L(16,7,16,9);
L(18,11,18,13);
L(17,6,18,6);
L(16,7,18,7);
L(17,10,18,10);
L(17,16,17,20);
L(16,17,16,19);
L(18,21,18,23);
L(28,4,28,8);
L(17,16,18,16);
L(16,17,18,17);
L(17,20,18,20);
L(23,17,23,20);
L(28,10,28,16);
L(38,2,38,6);
L(33,3,33,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,disable Messages at machine start and at lml calculation,1,1,27,2,);
B(B_VARIN,,MXlmlCalculating,9,3,11,5,);
B(B_JUMP,,exit,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_COMMENT,,set message cant back,1,1,27,2,);
B(B_VARIN,,MSG_INFO,9,7,11,9,);
B(B_FB,MsgRealReal,Message15,11,4,20,11,);
B(B_VARIN,,690,9,5,11,7,);
B(B_VARIN,,MDlmlUtilization,9,8,11,10,);
B(B_VARIN,,LXstopCantBack,9,6,11,8,);
B(B_VARIN,,MDlmlAngleBoom,9,9,11,11,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_COMMENT,,set message lml stop,1,1,27,2,);
B(B_VARIN,,MSG_INFO,9,7,11,9,);
B(B_FB,MsgRealReal,Message16,11,4,20,11,);
B(B_VARIN,,691,9,5,11,7,);
B(B_VARIN,,MDlmlUtilization,9,8,11,10,);
B(B_VARIN,,MXlmlStop,9,6,11,8,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_COMMENT,,set message lml stop backwards,1,1,27,2,);
B(B_VARIN,,MSG_INFO,9,7,11,9,);
B(B_FB,MsgRealReal,Message17,11,4,20,11,);
B(B_VARIN,,692,9,5,11,7,);
B(B_VARIN,,MDlmlUtilBackwar,9,8,11,10,);
B(B_VARIN,,MXlmlStopBackwar,9,6,11,8,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_COMMENT,,set messages of lg angle stops,1,1,27,2,);
B(B_VARIN,,MSG_INFO,9,7,11,9,);
B(B_FB,MsgRealReal,Message18,11,4,20,11,);
B(B_VARIN,,693,9,5,11,7,);
B(B_VARIN,,MXlgUpAngleStop,9,6,11,8,);
B(B_VARIN,,MDlmlAngleBoom,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_VARIN,,MSG_INFO,9,5,11,7,);
B(B_FB,MsgRealReal,Message19,11,2,20,9,);
B(B_VARIN,,695,9,3,11,5,);
B(B_VARIN,,MXlg2UpAngleStop,9,4,11,6,);
B(B_VARIN,,MDlmlAngleLufJib,9,7,11,9,);
B(B_VARIN,,MDlmlAngleBoom,9,6,11,8,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_VARIN,,MSG_INFO,9,5,11,7,);
B(B_VARIN,,696,9,3,11,5,);
B(B_VARIN,,MXlg2DnAngleStop,9,4,11,6,);
B(B_VARIN,,MDlmlAngleLufJib,9,7,11,9,);
B(B_VARIN,,MDlmlAngleBoom,9,6,11,8,);
B(B_FB,MsgRealReal,Message20,11,2,20,9,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL := exit: ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_VARIN,,TRUE,9,3,11,5,);
B(B_VAROUT,,LXstarted,11,3,13,5,);
B(B_COMMENT,,set bit for first scan,1,1,27,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,exit program,1,1,27,2,);
B(B_VARIN,,TRUE,9,3,11,5,);
B(B_RETURN,,,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL := init: ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,init program,1,1,27,2,);
B(B_VARIN,,TRUE,9,3,11,5,);
B(B_VAROUT,,LXinitOk,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_COMMENT,,init RS from Rigging,1,1,27,2,);
B(B_FB,RS,RSrigg,11,3,16,7,);
B(B_VARIN,,MXlmlRiggingAct,9,4,11,6,);
B(B_VARIN,,FALSE,9,5,11,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value reduction signal for Deadlock,1,1,27,2,);
B(B_VARIN,,14.0,9,5,11,7,);
B(B_VARIN,,0.0,9,6,11,8,);
B(B_VARIN,,50.0,9,7,11,9,);
B(B_VARIN,,CDlmlReductSigHg,9,8,11,10,);
B(B_FB,CorrValue_Real,CorrValue_Real1,11,4,23,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value reduction signal for Deadlock,1,1,27,2,);
B(B_VARIN,,20.0,9,5,11,7,);
B(B_VARIN,,0.0,9,6,11,8,);
B(B_VARIN,,50.0,9,7,11,9,);
B(B_VARIN,,CDlmlReductSigLg,9,8,11,10,);
B(B_FB,CorrValue_Real,CorrValue_Real2,11,4,23,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value reduction signal for Deadlock,1,1,27,2,);
B(B_VARIN,,18.0,9,5,11,7,);
B(B_VARIN,,0.0,9,6,11,8,);
B(B_VARIN,,50.0,9,7,11,9,);
B(B_VARIN,,CDlmlReductSigSg,9,8,11,10,);
B(B_FB,CorrValue_Real,CorrValue_Real3,11,4,23,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value reduction signal for Deadlock,1,1,27,2,);
B(B_VARIN,,15.0,9,5,11,7,);
B(B_VARIN,,0.0,9,6,11,8,);
B(B_VARIN,,50.0,9,7,11,9,);
B(B_VARIN,,CDlmlReductSigTg,9,8,11,10,);
B(B_FB,CorrValue_Real,CorrValue_Real4,11,4,23,10,);
        END_NETWORK_BODY
    END_NET_WORK
END_BODY
END_PROGRAM

PROGRAM ADlowerContrV030
	VAR_EXTERNAL 
		IXhg2LowerContro: BOOL:=FALSE;
			(*key switch 4: HG 2 lowering control *)
		IXentrySwiClosed: BOOL:=FALSE;
			(*entry switch closed*)
		IWadHg1BrakePres: UINT:=0;
			(*additional device lowering control HG 1 brake pressure*)
		IWadHg2BrakePres: UINT:=0;
			(*additional device lowering control HG 2 brake pressure*)
		MXad2Hg1LockClut: BOOL:=FALSE;
			(*add.2 HG 1 global lock clutch*)
		MXad2Hg2LockClut: BOOL:=FALSE;
			(*add.2 HG 2 global lock clutch*)
		MXhg1ExtAnalSign: BOOL:=FALSE;
			(*HG 1 other, external analog signal*)
		MXhg2ExtAnalSign: BOOL:=FALSE;
			(*HG 2 other, external analog signal*)
		MXhg1pselFreefal: BOOL:=FALSE;
			(*HG 1 preselected freefall*)
		MXhg2pselFreefal: BOOL:=FALSE;
			(*HG 2 preselected freefall*)
		MXhg1WinchStand: BOOL:=FALSE;
			(*HG 1 winch standing still*)
		MXhg2WinchStand: BOOL:=FALSE;
			(*HG 2 winch standing still*)
		MXhgLowerContAct: BOOL:=FALSE;
			(*hg lowering control active*)
		MXengStarterActi: BOOL:=FALSE;
			(*engine starter activated*)
		MDhg1ExtAnalSign: REAL:=0.0;
			(*HG 1 external analog signal*)
		MDhg2ExtAnalSign: REAL:=0.0;
			(*HG 2 external analog signal*)
		MXjoyLowerCont: BOOL:=FALSE;
			(*ad lower control preselection on joystick*)
		MXlmlDerrickEnab: BOOL:=FALSE;
			(*lml derrick enabled*)
		MXenabDragliOper: BOOL:=FALSE;
			(*enable dragline operation*)
	END_VAR
	VAR_EXTERNAL CONSTANT
		MSG_ERROR: UINT:=0;
	END_VAR
	VAR_EXTERNAL RETAIN
		MXlmlLuffJibEnab: BOOL:=FALSE;
			(*lml luffing jib enabled*)
		MXadHgLowerCont: BOOL:=FALSE;
			(*additional device lowering control for HG*)
	END_VAR
	VAR_EXTERNAL CONSTANT RETAIN
		CXadHgLowerCont: BOOL:=FALSE;
			(*additional device lowering control for HG*)
	END_VAR
	VAR 
		LXinitOk: BOOL:=FALSE;
			(*init completed*)
		LXstart: BOOL:=FALSE;
			(*first scan completed*)
		LXadWorking: BOOL:=FALSE;
			(*additional device working*)
		LXhg1EnLowerCont: BOOL:=FALSE;
			(*HG 1 enable lowering control*)
		LXhg2EnLowerCont: BOOL:=FALSE;
			(*HG 2 enable lowering control*)
		CorrValue_Bool1: CorrValue_Bool;
		ScaleAI1: ScaleAI;
		ScaleAI2: ScaleAI;
		RS1: RS;
		RS2: RS;
		RS3: RS;
		RS4: RS;
		SR1: SR;
		SR2: SR;
		F_TRIG1: F_TRIG;
		F_TRIG2: F_TRIG;
		Message1: MsgRealReal;
		Message2: MsgRealReal;
		Message3: MsgRealReal;
		Message4: MsgRealReal;
	END_VAR
'FBD'
BODY
    WORKSPACE
        NETWORK_LIST_TYPE := NWTYPEFBD ;
        ACTIVE_NETWORK := 0 ;
    END_WORKSPACE
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_COMMENT,,init first time,1,1,27,2,);
B(B_VARIN,,LXinitOk,9,4,11,6,);
B(B_F,not,,11,3,16,6,);
B(B_JUMP,,init,16,4,18,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,protect correction value change while program activ,1,1,27,2,);
B(B_VAROUT,,MXadHgLowerCont,23,6,25,8,);
B(B_F,sel,,18,5,23,10,);
B(B_VARIN,,MXadHgLowerCont,16,8,18,10,);
B(B_VARIN,,CXadHgLowerCont,16,7,18,9,);
B(B_VARIN,,IXentrySwiClosed,9,4,11,6,);
B(B_VARIN,,LXstart,9,5,11,7,);
B(B_F,@AND-2,,11,3,16,7,);
L(17,5,17,7);
L(17,7,18,7);
L(16,5,17,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VAROUT,,LXstart,11,1,13,3,);
B(B_VARIN,,TRUE,9,1,11,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_COMMENT,,exit program in case of no additional device,1,1,27,2,);
B(B_VARIN,,MXadHgLowerCont,9,5,11,7,);
B(B_RETURN,,,16,4,18,6,);
B(B_F,@AND-2,,11,3,16,7,0N);
B(B_VARIN,,LXinitOk,9,4,11,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 17 ;
        NETWORK_BODY
B(B_COMMENT,,enable lowering control hg 1,1,1,27,2,);
B(B_VARIN,,MXhg1pselFreefal,14,10,16,12,);
B(B_VARIN,,MXlmlLuffJibEnab,14,11,16,13,);
B(B_VARIN,,MXlmlDerrickEnab,14,12,16,14,);
B(B_F,@AND-2,,23,7,28,11,);
B(B_FB,RS,RS1,37,7,42,11,);
B(B_VAROUT,,LXhg1EnLowerCont,42,8,44,10,);
B(B_FB,RS,RS3,30,3,35,7,0N);
B(B_VAROUT,,MXad2Hg1LockClut,35,4,37,6,);
B(B_F,@AND-5,,16,7,21,14,000NN);
B(B_VARIN,,MXhg1WinchStand,20,14,22,16,);
B(B_F,@AND-2,,30,12,35,16,N);
B(B_VARIN,,MXjoyLowerCont,14,9,16,11,);
B(B_VARIN,,MXenabDragliOper,9,6,11,8,);
B(B_VARIN,,IXhg2LowerContro,9,7,11,9,);
B(B_F,@AND-2,,11,5,16,9,NN);
L(36,10,37,10);
L(28,9,37,9);
L(22,10,23,10);
L(22,6,22,9);
L(22,6,30,6);
L(29,5,30,5);
L(21,9,23,9);
L(22,15,29,15);
L(22,10,22,15);
L(29,15,30,15);
L(29,14,30,14);
L(35,14,36,14);
L(36,10,36,14);
L(29,5,29,9);
L(29,9,29,14);
L(16,7,16,9);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 18 ;
        NETWORK_BODY
B(B_COMMENT,,enable lowering control hg 2,1,1,27,2,);
B(B_VARIN,,MXhg2pselFreefal,10,10,12,12,);
B(B_VARIN,,MXjoyLowerCont,10,9,12,11,);
B(B_VARIN,,MXlmlLuffJibEnab,10,11,12,13,);
B(B_VARIN,,MXlmlDerrickEnab,10,12,12,14,);
B(B_FB,RS,RS2,33,8,38,12,);
B(B_VAROUT,,LXhg2EnLowerCont,38,9,40,11,);
B(B_FB,RS,RS4,26,4,31,8,0N);
B(B_F,@AND-2,,19,8,24,12,);
B(B_VAROUT,,MXad2Hg2LockClut,31,5,33,7,);
B(B_F,@AND-4,,12,8,17,14,00NN);
B(B_VARIN,,MXhg2WinchStand,16,14,18,16,);
B(B_F,@AND-2,,26,12,31,16,N);
L(24,10,33,10);
L(18,11,19,11);
L(18,7,18,10);
L(18,7,26,7);
L(25,6,26,6);
L(17,10,19,10);
L(18,15,25,15);
L(18,11,18,15);
L(31,14,32,14);
L(25,15,26,15);
L(25,14,26,14);
L(32,11,32,14);
L(32,11,33,11);
L(25,6,25,10);
L(25,10,25,14);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 14 ;
        NETWORK_BODY
B(B_F,sel,,12,6,17,11,);
B(B_VARIN,,LXhg1EnLowerCont,9,4,11,6,);
B(B_VARIN,,MXhg1ExtAnalSign,10,8,12,10,);
B(B_VARIN,,TRUE,10,9,12,11,);
B(B_FB,F_TRIG,F_TRIG1,12,3,19,6,);
B(B_VARIN,,FALSE,17,11,19,13,);
B(B_F,sel,,20,5,25,10,);
B(B_VAROUT,,MXhg1ExtAnalSign,25,6,27,8,);
B(B_COMMENT,,set External control of hg1,1,1,27,2,);
L(11,8,12,8);
L(11,5,11,8);
L(19,5,19,7);
L(19,7,20,7);
L(11,5,12,5);
L(17,8,20,8);
L(19,9,20,9);
L(19,9,19,12);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 14 ;
        NETWORK_BODY
B(B_F,sel,,12,6,17,11,);
B(B_VARIN,,LXhg2EnLowerCont,9,4,11,6,);
B(B_VARIN,,MXhg2ExtAnalSign,10,8,12,10,);
B(B_VARIN,,TRUE,10,9,12,11,);
B(B_FB,F_TRIG,F_TRIG2,12,3,19,6,);
B(B_VARIN,,FALSE,17,11,19,13,);
B(B_F,sel,,20,5,25,10,);
B(B_VAROUT,,MXhg2ExtAnalSign,25,6,27,8,);
B(B_COMMENT,,set External control of hg2,1,1,27,2,);
L(11,8,12,8);
L(11,5,11,8);
L(19,5,19,7);
L(19,7,20,7);
L(11,5,12,5);
L(17,8,20,8);
L(19,9,20,9);
L(19,9,19,12);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_COMMENT,,check exit in front of calculation / exit when nothing preselected,1,1,27,2,);
B(B_RETURN,,,16,4,18,6,);
B(B_F,@OR-3,,11,3,16,8,000N);
B(B_VARIN,,LXhg1EnLowerCont,9,4,11,6,);
B(B_VARIN,,LXhg2EnLowerCont,9,5,11,7,);
B(B_VARIN,,LXadWorking,9,6,11,8,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 28 ;
        NETWORK_BODY
B(B_FB,ScaleAI,ScaleAI1,11,8,19,13,);
B(B_VARIN,,IWadHg1BrakePres,9,9,11,11,);
B(B_VARIN,,1000.0,9,10,11,12,);
B(B_COMMENT,,1600mA => 60bar => 100%,7,13,19,14,);
B(B_VARIN,,0.0,24,8,26,10,);
B(B_VARIN,,100.0,24,10,26,12,);
B(B_F,limit,,26,7,32,12,);
B(B_F,@AND-2,,22,13,27,17,);
B(B_VARIN,,150,44,13,46,15,);
B(B_VARIN,,MSG_ERROR,44,15,46,17,);
B(B_VARIN,,149,44,21,46,23,);
B(B_VARIN,,MSG_ERROR,44,23,46,25,);
B(B_FB,MsgRealReal,Message1,46,12,55,19,);
B(B_FB,MsgRealReal,Message2,46,20,55,27,);
B(B_F,@SUB,,45,7,50,11,);
B(B_F,sel,,53,5,58,10,);
B(B_VAROUT,,MDhg1ExtAnalSign,58,6,60,8,);
B(B_COMMENT,,press pedal -> singnal from -100% to 0 %,50,10,67,11,);
B(B_VARIN,,0.0,51,7,53,9,);
B(B_COMMENT,,additional device lowering control hg 1,1,1,27,2,);
B(B_VARIN,,100.0,42,12,44,14,);
B(B_F,@AND-3,,46,2,51,7,00N);
B(B_VARIN,,MXjoyLowerCont,44,4,46,6,);
B(B_VARIN,,LXhg1EnLowerCont,44,3,46,5,);
B(B_F,@OR-2,,33,17,38,21,);
B(B_F,@AND-3,,22,21,27,26,00N);
B(B_VARIN,,LXhg1EnLowerCont,17,23,19,25,);
B(B_VARIN,,MXengStarterActi,17,24,19,26,);
B(B_FB,SR,SR1,27,21,32,25,0N);
L(19,12,20,12);
L(19,11,21,11);
L(19,10,26,10);
L(21,16,22,16);
L(21,16,21,24);
L(20,23,22,23);
L(21,11,21,15);
L(21,15,22,15);
L(32,23,46,23);
L(52,7,53,7);
L(50,9,53,9);
L(44,10,45,10);
L(44,10,44,13);
L(52,4,52,7);
L(51,4,52,4);
L(39,6,39,19);
L(39,6,46,6);
L(32,19,33,19);
L(38,19,39,19);
L(32,20,33,20);
L(32,20,32,23);
L(19,24,22,24);
L(19,25,22,25);
L(27,24,27,26);
L(20,12,20,26);
L(20,26,27,26);
L(32,15,32,19);
L(27,15,46,15);
L(32,9,45,9);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 28 ;
        NETWORK_BODY
B(B_FB,ScaleAI,ScaleAI2,11,8,19,13,);
B(B_VARIN,,IWadHg2BrakePres,9,9,11,11,);
B(B_VARIN,,1000.0,9,10,11,12,);
B(B_COMMENT,,1600mA => 60bar => 100%,7,13,19,14,);
B(B_F,limit,,26,7,32,12,);
B(B_VARIN,,0.0,24,8,26,10,);
B(B_VARIN,,100.0,24,10,26,12,);
B(B_F,@AND-2,,22,13,27,17,);
B(B_VARIN,,142,44,13,46,15,);
B(B_VARIN,,141,44,21,46,23,);
B(B_VARIN,,MSG_ERROR,44,15,46,17,);
B(B_VARIN,,MSG_ERROR,44,23,46,25,);
B(B_FB,MsgRealReal,Message3,46,12,55,19,);
B(B_FB,MsgRealReal,Message4,46,20,55,27,);
B(B_F,@SUB,,45,7,50,11,);
B(B_F,sel,,53,5,58,10,);
B(B_VAROUT,,MDhg2ExtAnalSign,58,6,60,8,);
B(B_COMMENT,,press pedal -> singnal from -100% to 0 %,50,10,67,11,);
B(B_VARIN,,0.0,51,7,53,9,);
B(B_COMMENT,,additional device lowering control hg 2,1,1,27,2,);
B(B_VARIN,,LXhg2EnLowerCont,44,3,46,5,);
B(B_VARIN,,MXjoyLowerCont,44,4,46,6,);
B(B_F,@AND-3,,46,2,51,7,00N);
B(B_VARIN,,100.0,42,12,44,14,);
B(B_F,@OR-2,,33,17,38,21,);
B(B_FB,SR,SR2,27,21,32,25,0N);
B(B_VARIN,,LXhg2EnLowerCont,17,23,19,25,);
B(B_F,@AND-3,,22,21,27,26,00N);
B(B_VARIN,,MXengStarterActi,17,24,19,26,);
L(19,10,26,10);
L(19,12,20,12);
L(19,11,21,11);
L(21,11,21,15);
L(21,15,22,15);
L(21,16,21,24);
L(21,16,22,16);
L(32,9,45,9);
L(44,10,45,10);
L(44,10,44,13);
L(52,7,53,7);
L(50,9,53,9);
L(51,4,52,4);
L(52,4,52,7);
L(39,6,46,6);
L(39,6,39,19);
L(32,19,33,19);
L(38,19,39,19);
L(32,15,32,19);
L(27,15,46,15);
L(32,23,46,23);
L(32,20,32,23);
L(32,20,33,20);
L(20,23,22,23);
L(19,24,22,24);
L(20,12,20,26);
L(20,26,27,26);
L(27,24,27,26);
L(19,25,22,25);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_VARIN,,LXhg1EnLowerCont,9,4,11,6,);
B(B_VARIN,,LXhg2EnLowerCont,9,5,11,7,);
B(B_F,@OR-2,,11,3,16,7,);
B(B_VAROUT,,LXadWorking,16,4,18,6,);
B(B_COMMENT,,check if ad is working,1,1,27,2,);
B(B_VAROUT,,MXhgLowerContAct,16,5,18,7,);
L(16,5,16,6);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,exit program,1,1,27,2,);
B(B_VARIN,,TRUE,9,3,11,5,);
B(B_RETURN,,,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL := init: ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,init program,1,1,27,2,);
B(B_VARIN,,TRUE,9,3,11,5,);
B(B_VAROUT,,LXinitOk,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value additional device lowering control hg 1,1,1,27,2,);
B(B_FB,CorrValue_Bool,CorrValue_Bool1,11,4,23,10,);
B(B_VARIN,,CXadHgLowerCont,9,8,11,10,);
B(B_VARIN,,FALSE,9,5,11,7,);
B(B_VARIN,,FALSE,9,6,11,8,);
B(B_VARIN,,TRUE,9,7,11,9,);
        END_NETWORK_BODY
    END_NET_WORK
END_BODY
END_PROGRAM

PROGRAM ADmagnetUnitV020
	VAR_EXTERNAL 
		ITXmagUnitGen: BOOL:=FALSE;
			(*preselection magnetic unit generator *)
		IXentrySwiClosed: BOOL:=FALSE;
			(*entry switch closed*)
		QTXmagUnitGen: BOOL:=FALSE;
			(*enable magnetic unit generator *)
		QXadMagnetOn: BOOL:=FALSE;
			(*add. magnetic unit on*)
		QXadMagnetOff: BOOL:=FALSE;
			(*add. magnetic unit off*)
		QXgeneratorOn: BOOL:=FALSE;
			(*add. generator on *)
		MXminEngineSpeed: BOOL:=FALSE;
			(*minimum engine speed reached*)
		MXenabMagnetUnit: BOOL:=FALSE;
			(*enable add. magnetic unit*)
		MXjoyMagUnitOn: BOOL:=FALSE;
			(*joystick button magnet on*)
		MXjoyMagUnitOff: BOOL:=FALSE;
			(*joystick button magnet off*)
		MXaddMagUnitPre: BOOL:=FALSE;
			(*add. magnetic unit preselected*)
		MXexitAddMagUnit: BOOL:=FALSE;
			(*exit add. magnetic unit*)
		MXflashSignal: BOOL:=FALSE;
			(*flash signal*)
		MDpresenEngSpeed: REAL:=0.0;
			(*present engine speed in rpm*)
		MDratedEngSpeed: REAL:=0.0;
			(*rated engine speed in rpm*)
		MDengRatMinSpeed: REAL:=0.0;
			(*engine rated minimum speed [%]*)
	END_VAR
	VAR_EXTERNAL CONSTANT RETAIN
		CXadMagneticUnit: BOOL:=FALSE;
			(*add device magnetic unit*)
		CDgenMinEngSpeed: REAL:=0.0;
			(*generator minimum engine speed [%]*)
	END_VAR
	VAR 
		LXinitOk: BOOL:=FALSE;
		LXstart: BOOL:=FALSE;
		CorrValue_Bool1: CorrValue_Bool;
		CorrValue_Real1: CorrValue_Real;
		RS1: RS;
		RS2: RS;
		R_TRIG1: R_TRIG;
		F_TRIG1: F_TRIG;
		TON1: TON;
	END_VAR
'FBD'
BODY
    WORKSPACE
        NETWORK_LIST_TYPE := NWTYPEFBD ;
        ACTIVE_NETWORK := 0 ;
    END_WORKSPACE
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_COMMENT,,init first time,1,1,27,2,);
B(B_F,not,,11,3,16,6,);
B(B_JUMP,,init,16,4,18,6,);
B(B_VARIN,,LXinitOk,9,4,11,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,protect correction value change while program activ,1,1,27,2,);
B(B_F,@OR-2,,11,3,16,7,NN);
B(B_VARIN,,LXstart,9,5,11,7,);
B(B_VARIN,,IXentrySwiClosed,9,4,11,6,);
B(B_F,sel,,18,5,23,10,);
B(B_VAROUT,,MXaddMagUnitPre,23,6,25,8,);
B(B_VARIN,,MXaddMagUnitPre,16,7,18,9,);
B(B_VARIN,,CXadMagneticUnit,16,8,18,10,);
L(16,5,17,5);
L(17,5,17,7);
L(17,7,18,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,TRUE,9,1,11,3,);
B(B_VAROUT,,LXstart,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_COMMENT,,exit program when additional hydraulic not enabled,1,1,27,2,);
B(B_F,@AND-2,,18,5,23,9,0N);
B(B_RETURN,,,23,6,25,8,);
B(B_F,@OR-2,,11,3,16,7,N);
B(B_VARIN,,MXaddMagUnitPre,9,4,11,6,);
B(B_VARIN,,MXexitAddMagUnit,9,5,11,7,);
B(B_VARIN,,MXenabMagnetUnit,16,7,18,9,);
L(17,7,18,7);
L(16,5,17,5);
L(17,5,17,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 15 ;
        NETWORK_BODY
B(B_COMMENT,,enable add. magnetic unit,1,1,29,2,);
B(B_VARIN,,MXaddMagUnitPre,18,5,20,7,);
B(B_F,@AND-2,,20,10,25,14,);
B(B_FB,RS,RS1,27,4,32,8,);
B(B_VAROUT,,MXenabMagnetUnit,32,5,34,7,);
B(B_VARIN,,MXenabMagnetUnit,18,6,20,8,);
B(B_F,@AND-3,,20,4,25,9,0N);
B(B_FB,R_TRIG,R_TRIG1,11,8,18,11,);
B(B_VARIN,,ITXmagUnitGen,9,9,11,11,);
B(B_VARIN,,MXenabMagnetUnit,18,12,20,14,);
L(25,12,26,12);
L(26,7,26,12);
L(26,7,27,7);
L(25,6,27,6);
L(19,8,20,8);
L(19,8,19,12);
L(18,10,19,10);
L(19,12,20,12);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_COMMENT,,set rated minimum engine speed,1,1,27,2,);
B(B_VARIN,,MDengRatMinSpeed,9,7,11,9,);
B(B_VARIN,,CDgenMinEngSpeed,10,6,12,8,);
B(B_F,@AND-2,,19,4,24,8,);
B(B_F,sel,,25,6,30,11,);
B(B_VAROUT,,MDengRatMinSpeed,30,7,32,9,);
B(B_F,@GT-2,,13,5,18,9,);
B(B_VARIN,,MXenabMagnetUnit,17,3,19,5,);
L(11,8,13,8);
L(19,4,19,6);
L(24,6,25,6);
L(25,6,25,8);
L(12,7,12,10);
L(12,10,25,10);
L(11,8,11,9);
L(11,9,25,9);
L(12,7,13,7);
L(18,7,19,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,set rated minimum engine speed to zero,1,1,27,2,);
B(B_FB,F_TRIG,F_TRIG1,11,4,18,7,);
B(B_VARIN,,MXenabMagnetUnit,9,5,11,7,);
B(B_F,sel,,20,5,25,10,);
B(B_VAROUT,,MDengRatMinSpeed,25,6,27,8,);
B(B_VARIN,,MDengRatMinSpeed,18,7,20,9,);
B(B_VARIN,,0.0,18,8,20,10,);
L(19,7,20,7);
L(19,6,19,7);
L(18,6,19,6);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 17 ;
        NETWORK_BODY
B(B_F,@GE-2,,11,8,16,12,);
B(B_VARIN,,MDratedEngSpeed,9,10,11,12,);
B(B_VARIN,,MDpresenEngSpeed,9,9,11,11,);
B(B_FB,TON,TON1,11,4,16,8,);
B(B_VARIN,,MXenabMagnetUnit,9,5,11,7,);
B(B_VARIN,,T#0.5s,9,6,11,8,);
B(B_COMMENT,,set output generator on,1,1,27,2,);
B(B_F,@AND-3,,18,7,23,12,);
B(B_VARIN,,MXminEngineSpeed,15,12,17,14,);
B(B_FB,RS,RS2,25,7,30,11,0N);
B(B_VAROUT,,QXgeneratorOn,30,8,32,10,);
B(B_VARIN,,MXenabMagnetUnit,22,14,24,16,);
L(16,10,18,10);
L(16,6,17,6);
L(17,6,17,9);
L(17,9,18,9);
L(23,9,25,9);
L(24,10,25,10);
L(24,10,24,15);
L(17,11,17,13);
L(17,11,18,11);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_VAROUT,,QTXmagUnitGen,24,4,26,6,);
B(B_F,@OR-2,,19,3,24,7,);
B(B_F,@AND-3,,12,6,17,11,N);
B(B_VARIN,,MXflashSignal,10,9,12,11,);
B(B_VARIN,,QXgeneratorOn,9,4,11,6,);
B(B_VARIN,,MXenabMagnetUnit,10,8,12,10,);
B(B_COMMENT,,flashing signal until rated engine speed not reached,1,1,27,2,);
L(18,6,19,6);
L(18,6,18,8);
L(17,8,18,8);
L(11,5,19,5);
L(11,5,11,8);
L(11,8,12,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 16 ;
        NETWORK_BODY
B(B_VAROUT,,QXadMagnetOn,18,4,20,6,);
B(B_VAROUT,,QXadMagnetOff,18,10,20,12,);
B(B_VARIN,,QXgeneratorOn,10,4,12,6,);
B(B_VARIN,,MXjoyMagUnitOn,9,5,11,7,);
B(B_F,@AND-4,,13,3,18,9,00N);
B(B_F,@AND-4,,13,9,18,15,00N);
B(B_VARIN,,IXentrySwiClosed,9,7,11,9,);
B(B_VARIN,,QXadMagnetOff,9,6,11,8,);
B(B_COMMENT,,outputs magnetic unit ,1,1,27,2,);
B(B_VARIN,,MXjoyMagUnitOff,11,13,13,15,);
B(B_VARIN,,QXadMagnetOn,11,12,13,14,);
L(12,5,12,11);
L(11,6,13,6);
L(12,5,13,5);
L(11,8,13,8);
L(12,11,13,11);
L(11,8,11,12);
L(11,7,13,7);
L(11,12,13,12);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,exit program,1,1,27,2,);
B(B_VARIN,,TRUE,9,3,11,5,);
B(B_RETURN,,,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL := init: ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,init additional device program,1,1,27,2,);
B(B_VARIN,,TRUE,9,3,11,5,);
B(B_VAROUT,,LXinitOk,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_FB,CorrValue_Bool,CorrValue_Bool1,12,4,24,10,);
B(B_COMMENT,,correction value add. device magnetic unit,1,1,27,2,);
B(B_VARIN,,CXadMagneticUnit,10,8,12,10,);
B(B_VARIN,,FALSE,10,5,12,7,);
B(B_VARIN,,FALSE,10,6,12,8,);
B(B_VARIN,,TRUE,10,7,12,9,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value min engine speed  (engine speed in [rpm]),1,1,27,2,);
B(B_VARIN,,CDgenMinEngSpeed,10,8,12,10,);
B(B_VARIN,,0.0,10,5,12,7,);
B(B_VARIN,,0.0,10,6,12,8,);
B(B_VARIN,,2000.0,10,7,12,9,);
B(B_COMMENT,,0% -> idle speed; ,1,2,27,3,);
B(B_FB,CorrValue_Real,CorrValue_Real1,12,4,24,10,);
        END_NETWORK_BODY
    END_NET_WORK
END_BODY
END_PROGRAM

PROGRAM ADmooringV070
	VAR_EXTERNAL 
		IXpreselMooring: BOOL:=FALSE;
			(*preselection mooring key switch*)
		IXhg2FeedPressOk: BOOL:=FALSE;
			(*feed pressure HG 2 o.k.*)
		IXhg1UpperLimOk: BOOL:=FALSE;
			(*upper limit switch HG 1 o.k.*)
		ITXleadMooring: BOOL:=FALSE;
			(*preselection leader mooring*)
		IXhg2UpperLimOk: BOOL:=FALSE;
			(*upper limit switch HG 2 o.k.*)
		IXhgRelFreefall: BOOL:=FALSE;
			(*clutch valve release freefall*)
		IWkeybX25Poti1: UINT:=0;
			(*keyboard X25 poti 1*)
		IWkeybX25Poti2: UINT:=0;
			(*keyboard X25 poti 2*)
		QTXleadMooring: BOOL:=FALSE;
			(*enable leader mooring*)
		QTXmoorPressCtrl: BOOL:=FALSE;
			(*enable mooring pressure control *)
		QTXmoorSpeedCtrl: BOOL:=FALSE;
			(*enable mooring speed control *)
		QXhg1BrakeNormal: BOOL:=FALSE;
			(*HG 1 brake normal speed operation*)
		QXhg2BrakeNormal: BOOL:=FALSE;
			(*HG 2 brake normal speed operation*)
		QXhg1Clutch: BOOL:=FALSE;
			(*HG 1 clutch*)
		QXhg2Clutch: BOOL:=FALSE;
			(*HG 2 clutch*)
		QWhg1Lifting: UINT:=0;
			(*HG 1 pump lifting*)
		QWhg1Trimot: UINT:=0;
			(*HG 1 pump trimot*)
		QWhg2Lifting: UINT:=0;
			(*HG 2 pump lifting*)
		QWhg2Lowering: UINT:=0;
			(*HG 2 pump lowering*)
		QWhg2Trimot: UINT:=0;
			(*HG 2 pump trimot*)
		QWhg1PressContro: UINT:=0;
			(*HG 1 pressure control *)
		QWhg2PressContro: UINT:=0;
			(*HG 2 pressure control*)
		MXminEngineSpeed: BOOL:=FALSE;
			(*minimum engine speed reached*)
		MXstopAllFunctio: BOOL:=FALSE;
			(*stop all excavator functions*)
		MXassemblyOperat: BOOL:=FALSE;
			(*assembly operation*)
		MXflashSignal: BOOL:=FALSE;
			(*flash signal*)
		MXadHg1LoweLimit: BOOL:=FALSE;
			(*lower limit switch for HG 1*)
		MXadHg2LoweLimit: BOOL:=FALSE;
			(*lower limit switch for HG 2*)
		MXhg2WinchLift: BOOL:=FALSE;
			(*hg2 winch is lifting*)
		MXhg2WinchLower: BOOL:=FALSE;
			(*hg2 winch is lowering*)
		MXhg2ErrPressInd: BOOL:=FALSE;
			(*hg 2 error system pressure indicator*)
		MXhg1PumpInZero: BOOL:=FALSE;
			(*HG 1 pump in zero*)
		MXhg2PumpInZero: BOOL:=FALSE;
			(*HG 2 pump in zero*)
		MXhg1EnPowStage: BOOL:=FALSE;
			(*HG 1 enable power stage lifting or lowering*)
		MXhg2EnPowStage: BOOL:=FALSE;
			(*HG 2 enable power stage lifting or lowering*)
		MXenabHangLeader: BOOL:=FALSE;
			(*add. enable hanging leader*)
		MXadMoorExitProg: BOOL:=FALSE;
			(*exit additional mooring program*)
		MXadMooringActiv: BOOL:=FALSE;
			(*mooring activ*)
		MXmoorPreFeedAct: BOOL:=FALSE;
			(*preselection mooring feed action*)
		MXmoorEnaFeedAct: BOOL:=FALSE;
			(*enable mooring feed action*)
		MXmoorExtAnalSig: BOOL:=FALSE;
			(*extern analog signal mooring*)
		MXmoorAnaSigNeg: BOOL:=FALSE;
			(*mooring analog signal negativ*)
		MXmoorAnaSigPos: BOOL:=FALSE;
			(*mooring analog signal positiv*)
		MXmoorLocStopInt: BOOL:=FALSE;
			(*mooring local stop integrated*)
		MXmoorLoStopRapU: BOOL:=FALSE;
			(*mooring local stop rapid lifting*)
		MXmoorLoStopRapD: BOOL:=FALSE;
			(*mooring local stop rapid lowering*)
		MXmoorPumpInZero: BOOL:=FALSE;
			(*mooring pump in zero*)
		MXmoorEnPowStage: BOOL:=FALSE;
			(*mooring enable power stage lifting or lowering*)
		MXmoorEnabTrimot: BOOL:=FALSE;
			(*mooring enable trimot*)
		MXmoorPreJoySig: BOOL:=FALSE;
			(*ad. mooring presel. joy stick signal*)
		MXmoorExtPCont: BOOL:=FALSE;
			(*enable mooring extern pressure signal*)
		MXmoorStorAnaSig: BOOL:=FALSE;
			(*mooring store analog signal*)
		MXmoorExtResSto: BOOL:=FALSE;
			(*mooring extern reset store analog signal*)
		MXsetMooringEnab: BOOL:=FALSE;
			(*set enable mooring for cyl. adjust.*)
		MXhg1ExtSigPcont: BOOL:=FALSE;
			(*hg1 external pressure control signal*)
		MXhg2ExtSigPcont: BOOL:=FALSE;
			(*hg2 external pressure control signal*)
		MXmoorUpLimBridg: BOOL:=FALSE;
			(*upper limit switch brigde mooring*)
		MXmoorLoLimBridg: BOOL:=FALSE;
			(*lower limit switch brigde mooring*)
		MXlimitSwBridged: BOOL:=FALSE;
			(*X23 limit switches bridged for assembly operation*)
		MXjoyStoreAnaSig: BOOL:=FALSE;
			(*store analog signal right joy stick*)
		MXhg1MooringLift: BOOL:=FALSE;
			(*hg1 mooring lifting (constant tension)*)
		MXhg2MooringLift: BOOL:=FALSE;
			(*hg2 mooring lifting (constant tension)*)
		MXhg1EnabFastSpe: BOOL:=FALSE;
			(*enable fast speed operation hg1*)
		MXhg2EnabFastSpe: BOOL:=FALSE;
			(*enable fast speed operation hg2*)
		MXspFaSpeLockHg1: BOOL:=FALSE;
			(*ad fast speed 1 winch 2 pumps lock hg1*)
		MXspFaSpeLockHg2: BOOL:=FALSE;
			(*ad fast speed 1 winch 2 pumps lock hg1*)
		MXmoorEnJoySig: BOOL:=FALSE;
			(*mooring enable joystick signal *)
		MDkeybx25Poti1: REAL:=0.0;
			(*Keyboard X25 Poti1*)
		MDkeybx25Poti2: REAL:=0.0;
			(*Keyboard X25 Poti2*)
		MDhg2SystemPress: REAL:=0.0;
			(*HG 2 system pressure in bar*)
		MDmoorExtAnalSig: REAL:=0.0;
			(*extern analog signal mooring*)
		MDpowerLimReduct: REAL:=0.0;
			(*maximum engine power regulator reduction to x[%]*)
		MDmoorJoySignal: REAL:=0.0;
			(*mooring analog signal joystick +/-[%]*)
		MDmoorPumpSignal: REAL:=0.0;
			(*mooring pump signal*)
		MDmoorTrimotSign: REAL:=0.0;
			(*mooring trimot signal*)
		MDmoorExtPCont: REAL:=0.0;
			(*mooring extern pressure control signal*)
		MDhg1ExtSigPcont: REAL:=0.0;
			(*hg1 external analog signal pressure control*)
		MDhg2ExtSigPcont: REAL:=0.0;
			(*hg2 external analog signal pressure control*)
		MDhg2LowRegLimSi: REAL:=0.0;
			(*hg 2 lowering regulation limitation signal*)
	END_VAR
	VAR_EXTERNAL RETAIN
		MXlrMooringPrese: BOOL:=FALSE;
			(*mooring for leader operation preselect*)
		MDhg2PressMemory: REAL:=0.0;
			(*HG 2 pressure memory*)
	END_VAR
	VAR_EXTERNAL CONSTANT RETAIN
		CXlrMooringPrese: BOOL:=FALSE;
			(*mooring for leader operation preselect*)
		CWhg1minCurPumUp: UINT:=0;
			(*HG 1 minimum current pump up*)
		CWhg1maxCurPumUp: UINT:=0;
			(*HG 1 maximum current pump up*)
		CWhg1minCurTrimo: UINT:=0;
			(*HG 1 minimum current trimot up*)
		CWhg1maxCurTrimo: UINT:=0;
			(*HG 1 maximum current trimot down*)
		CWhg2minCurPumUp: UINT:=0;
			(*HG 2 minimum current pump up*)
		CWhg2minCurPumDn: UINT:=0;
			(*HG 2 minimum current pump down*)
		CWhg2maxCurPumUp: UINT:=0;
			(*HG 2 maximum current pump up*)
		CWhg2maxCurPumDn: UINT:=0;
			(*HG 2 maximum current pump down*)
		CWhg2minCurTrimo: UINT:=0;
			(*HG 2 minimum current trimot up*)
		CWhg2maxCurTrimo: UINT:=0;
			(*HG 2 maximum current trimot down*)
		CWmoorTreSet2Gnd: UINT:=0;
			(*treshold mooring vibrator or driller set to ground*)
		CWhg1minCurPcont: UINT:=0;
			(*hg1 minimum current pressure control*)
		CWhg1maxCurPcont: UINT:=0;
			(*hg1 maximum current pressure control*)
		CWhg2minCurPcont: UINT:=0;
			(*hg2 minimum current pressure control*)
		CWhg2maxCurPcont: UINT:=0;
			(*hg2 maximum current pressure control*)
		CDhg2IntTimeUp: REAL:=0.0;
			(*HG 2 integrator time rising signal*)
		CDhg2IntTimeDn: REAL:=0.0;
			(*HG 2 integrator time down falling signal*)
		CDhg2LeakOilSign: REAL:=0.0;
			(*HG 2 leakoil compensation Signal in [%]*)
		CDhg1MinTenPcont: REAL:=0.0;
			(*hg1 minimum tension pressure control*)
		CDhg2MinTenPcont: REAL:=0.0;
			(*hg2 minimum tension pressure control*)
		CDlowLimSignal: REAL:=0.0;
			(*lower limitation regulator analog signal 270bar*)
	END_VAR
	VAR 
		LXinitOk: BOOL:=FALSE;
			(*init completed*)
		LXstart: BOOL:=FALSE;
		LXmoorLowerLimOk: BOOL:=FALSE;
			(*mooring lower limit switch o.k.*)
		LXlrCylAdjustmt: BOOL:=FALSE;
			(*leader cylinder adjustment*)
		LXenabCylAdjust: BOOL:=FALSE;
			(*enable cylinder adjustment*)
		LXlowering: BOOL:=FALSE;
			(*last function lowering*)
		LXmoorPresLoaded: BOOL:=FALSE;
			(*mooring pressure loaded*)
		LXstoreSysPress: BOOL:=FALSE;
			(*store system pressure*)
		LXmoorLoadPresSy: BOOL:=FALSE;
			(*mooring load pressure to system*)
		LXenLeakoilComp: BOOL:=FALSE;
			(*enable leakoil compensation*)
		LXmoorEnTrimAna: BOOL:=FALSE;
			(*mooring enable trimot*)
		LXpumpSigInZero: BOOL:=FALSE;
		LXhg1Clutch: BOOL:=FALSE;
		LXStopDemand: BOOL:=FALSE;
		LXmooringWorking: BOOL:=FALSE;
		LDanalogSignal: REAL:=0.0;
			(*analog signal*)
		LDanalSignalStor: REAL:=0.0;
		LDanalSignalLim: REAL:=0.0;
		LDintTimeUp: REAL:=0.0;
		LDintTimeDown: REAL:=0.0;
		LDmoorPosPumpSig: REAL:=0.0;
			(*mooring pump signal only pos*)
		LDmoorMaxPumpSig: REAL:=0.0;
			(*mooring pump signal max*)
		LDhg1AnaSigPcont: REAL:=0.0;
			(*hg1 analog signal pressure control*)
		LDmoorPresConSig: REAL:=0.0;
		LDkeybx25Poti2: REAL:=0.0;
		RS2: RS;
		RS3: RS;
		RS4: RS;
		RS5: RS;
		RS6: RS;
		RS7: RS;
		digital1: HGdigLogPartV036;
		analog1: HGanalogPartV037;
		Integrator1: Integrator;
		Integrator2: Integrator;
		PowerStage1: PowerStage;
		PowerStage2: PowerStage;
		PowerStage3: PowerStage;
		PowerStage4: PowerStage;
		PowerStage5: PowerStage;
		PowerStage6: PowerStage;
		PowerStage7: PowerStage;
		CorrValue_Bool1: CorrValue_Bool;
		CorrValue_UInt1: CorrValue_UInt;
		CorrValue_UInt2: CorrValue_UInt;
		CorrValue_UInt3: CorrValue_UInt;
		CorrValue_UInt4: CorrValue_UInt;
		CorrValue_UInt5: CorrValue_UInt;
		CorrValue_Real1: CorrValue_Real;
		CorrValue_Real2: CorrValue_Real;
		F_TRIG1: F_TRIG;
		R_TRIG1: R_TRIG;
		R_TRIG2: R_TRIG;
	END_VAR
'FBD'
BODY
    WORKSPACE
        NETWORK_LIST_TYPE := NWTYPEFBD ;
        ACTIVE_NETWORK := 0 ;
    END_WORKSPACE
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_COMMENT,,init first time,1,1,27,2,);
B(B_F,not,,12,3,17,6,);
B(B_JUMP,,init,17,4,19,6,);
B(B_VARIN,,LXinitOk,10,4,12,6,);
B(B_COMMENT,,Mooringprogramm für Hängemäkler HS,49,1,67,2,);
B(B_COMMENT,,Dieses Prog. wurde von ADmooringV030 ø^adaptiert und auf den HS M4 angepasst. ø^Dieses Prog. passt auf desø^ADhangLeadV021 aber nicht auf ø^ADhangLeadV018.,49,2,67,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_COMMENT,,protect correction value change while program activ,1,1,27,2,);
B(B_VAROUT,,MXlrMooringPrese,17,4,19,6,);
B(B_F,sel,,12,3,17,8,);
B(B_VARIN,,CXlrMooringPrese,10,5,12,7,);
B(B_VARIN,,MXlrMooringPrese,10,6,12,8,);
B(B_VARIN,,LXstart,10,4,12,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,TRUE,10,1,12,3,);
B(B_VAROUT,,LXstart,12,1,14,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_COMMENT,,exit programm when not preselected,1,1,27,2,);
B(B_RETURN,,,17,4,19,6,);
B(B_F,not,,12,3,17,6,);
B(B_VARIN,,MXlrMooringPrese,10,4,12,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_VAROUT,,MXmoorPreJoySig,17,4,19,6,);
B(B_VARIN,,MXlrMooringPrese,10,4,12,6,);
B(B_VARIN,,IXpreselMooring,10,5,12,7,);
B(B_VARIN,,IXhgRelFreefall,10,6,12,8,);
B(B_VARIN,,MXenabHangLeader,10,7,12,9,);
B(B_COMMENT,,preselect mooring analog signal,1,1,27,2,);
B(B_VARIN,,MXadMoorExitProg,10,8,12,10,);
B(B_F,@AND-5,,12,3,17,10,0000N);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 16 ;
        NETWORK_BODY
B(B_COMMENT,,enable mooring control,1,1,27,2,);
B(B_VARIN,,MXhg2EnPowStage,9,5,11,7,);
B(B_VARIN,,QXhg2Clutch,9,6,11,8,);
B(B_VARIN,,MXhg2PumpInZero,9,7,11,9,);
B(B_VARIN,,MXhg1EnPowStage,9,8,11,10,);
B(B_VARIN,,MXhg1PumpInZero,9,9,11,11,);
B(B_VAROUT,,MXadMooringActiv,16,4,18,6,);
B(B_VARIN,,MXhg1EnabFastSpe,9,10,11,12,);
B(B_VARIN,,MXhg2EnabFastSpe,9,11,11,13,);
B(B_F,@AND-10,,11,3,16,15,0NN0N0NNNN);
B(B_VARIN,,MXspFaSpeLockHg1,9,12,11,14,);
B(B_VARIN,,MXspFaSpeLockHg2,9,13,11,15,);
B(B_VARIN,,MXmoorEnJoySig,9,4,11,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_COMMENT,,leader cylinder adjustment,1,1,28,2,);
B(B_VARIN,,MXsetMooringEnab,10,4,12,6,);
B(B_VARIN,,MXmoorPreJoySig,10,5,12,7,);
B(B_F,@AND-2,,12,3,17,7,);
B(B_VAROUT,,LXlrCylAdjustmt,17,4,19,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 19 ;
        NETWORK_BODY
B(B_VARIN,,MXmoorPreFeedAct,9,4,11,6,);
B(B_VAROUT,,QTXleadMooring,27,4,29,6,);
B(B_F,@AND-2,,14,3,19,7,);
B(B_F,@AND-3,,14,8,19,13,0N);
B(B_VARIN,,MXmoorEnaFeedAct,9,5,11,7,);
B(B_VARIN,,MXflashSignal,9,11,11,13,);
B(B_F,@OR-3,,22,3,27,8,);
B(B_F,@AND-3,,14,13,19,18,N);
B(B_COMMENT,,X25 LED,1,1,28,2,);
L(20,6,20,10);
L(20,6,22,6);
L(19,10,20,10);
L(13,5,13,10);
L(13,10,14,10);
L(12,6,12,11);
L(12,11,14,11);
L(19,5,22,5);
L(11,5,14,5);
L(11,6,14,6);
L(11,12,14,12);
L(19,15,21,15);
L(21,7,21,15);
L(21,7,22,7);
L(13,10,13,15);
L(13,15,14,15);
L(12,11,12,16);
L(12,16,14,16);
L(11,12,11,17);
L(11,17,14,17);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VAROUT,,QTXmoorPressCtrl,11,1,13,3,);
B(B_VARIN,,MXmoorEnaFeedAct,9,1,11,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,MXmoorEnPowStage,9,1,11,3,);
B(B_VAROUT,,QTXmoorSpeedCtrl,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_COMMENT,,analog input poti1 from X25 keyboard,1,1,26,2,);
B(B_VARIN,,IWkeybX25Poti1,9,4,11,6,);
B(B_F,uint_to_real,,11,3,22,6,);
B(B_VAROUT,,MDkeybx25Poti1,28,4,30,6,);
B(B_F,@DIV,,23,3,28,7,);
B(B_VARIN,,10.0,21,6,23,8,);
L(23,6,23,7);
L(22,5,23,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_COMMENT,,analog input poti2 from X25 keyboard,1,1,26,2,);
B(B_VARIN,,IWkeybX25Poti2,9,4,11,6,);
B(B_F,uint_to_real,,11,3,22,6,);
B(B_VAROUT,,MDkeybx25Poti2,28,4,30,6,);
B(B_F,@DIV,,23,3,28,7,);
B(B_VARIN,,10.0,21,6,23,8,);
L(23,6,23,7);
L(22,5,23,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 16 ;
        NETWORK_BODY
B(B_COMMENT,,preselect mooring,1,1,26,2,);
B(B_VARIN,,MXadMooringActiv,21,11,23,13,);
B(B_VARIN,,MXlrMooringPrese,21,12,23,14,);
B(B_F,@AND-2,,18,7,23,11,);
B(B_VARIN,,MXmoorPreFeedAct,16,9,18,11,);
B(B_FB,R_TRIG,R_TRIG1,11,4,18,7,);
B(B_VARIN,,ITXleadMooring,9,5,11,7,);
B(B_FB,RS,RS2,28,4,33,8,);
B(B_VAROUT,,MXmoorPreFeedAct,33,5,35,7,);
B(B_VARIN,,MXassemblyOperat,21,13,23,15,);
B(B_F,@OR-4,,23,9,28,15,0NN);
L(23,9,23,11);
L(18,6,18,9);
L(18,6,28,6);
L(28,7,28,11);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 14 ;
        NETWORK_BODY
B(B_VARIN,,MXmoorPumpInZero,23,6,25,8,);
B(B_VARIN,,LXhg1Clutch,23,5,25,7,);
B(B_COMMENT,,jump to pressure control when mooring not active,1,1,27,2,);
B(B_VARIN,,LXpumpSigInZero,23,7,25,9,);
B(B_F,@OR-2,,18,9,23,13,);
B(B_VARIN,,MXadMoorExitProg,16,11,18,13,);
B(B_F,@AND-2,,12,7,17,11,NN);
B(B_VARIN,,MXadMooringActiv,10,8,12,10,);
B(B_VARIN,,LXlrCylAdjustmt,10,9,12,11,);
B(B_F,@AND-5,,25,3,30,10,NN);
B(B_JUMP,,pcont,30,4,32,6,);
B(B_VARIN,,LXmooringWorking,23,4,25,6,);
L(23,11,24,11);
L(24,9,24,11);
L(24,9,25,9);
L(17,9,17,11);
L(17,11,18,11);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 23 ;
        NETWORK_BODY
B(B_VARIN,,MXjoyStoreAnaSig,9,9,11,11,);
B(B_FB,R_TRIG,R_TRIG2,11,8,18,11,);
B(B_FB,RS,RS3,38,7,43,11,);
B(B_COMMENT,,store feed action analog signal,1,1,27,2,);
B(B_F,sel,,45,11,50,16,);
B(B_VAROUT,,LDanalSignalStor,50,12,52,14,);
B(B_VARIN,,LDanalSignalStor,43,14,45,16,);
B(B_VAROUT,,MXmoorStorAnaSig,44,8,46,10,);
B(B_VARIN,,MDmoorJoySignal,43,13,45,15,);
B(B_VARIN,,MDmoorJoySignal,11,4,13,6,);
B(B_VARIN,,0.0,11,5,13,7,);
B(B_F,@AND-3,,21,7,26,12,00N);
B(B_F,@AND-3,,21,12,26,17,);
B(B_VARIN,,MXmoorStorAnaSig,17,14,19,16,);
B(B_VARIN,,LXStopDemand,19,15,21,17,);
B(B_F,@OR-5,,31,12,36,19,);
B(B_VARIN,,MXmoorExtResSto,25,17,27,19,);
B(B_VARIN,,MXmoorLoStopRapU,26,18,28,20,);
B(B_VARIN,,MXmoorLoStopRapD,27,19,29,21,);
B(B_VARIN,,MXmoorLocStopInt,28,20,30,22,);
B(B_F,@AND-2,,31,7,36,11,);
B(B_VARIN,,FALSE,28,3,30,5,);
B(B_COMMENT,,Die Funktion Meisterschaltersignal speichern ist hierø^vorerst aus Sicherheitsgründen gesperrt!,29,1,50,3,);
B(B_F,NE_R,,13,3,18,7,);
L(18,10,21,10);
L(37,10,38,10);
L(43,9,44,9);
L(37,10,37,14);
L(27,14,31,14);
L(20,5,20,14);
L(44,9,44,13);
L(44,13,45,13);
L(20,9,21,9);
L(26,9,31,9);
L(19,11,19,15);
L(19,11,21,11);
L(26,14,27,14);
L(20,14,21,14);
L(19,15,21,15);
L(36,14,37,14);
L(30,18,31,18);
L(29,17,31,17);
L(28,16,31,16);
L(27,15,31,15);
L(27,15,27,18);
L(28,16,28,19);
L(29,17,29,20);
L(30,18,30,21);
L(36,9,38,9);
L(30,10,31,10);
L(30,4,30,10);
L(18,5,20,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_F,@AND-2,,18,3,23,7,);
B(B_FB,RS,RS4,25,3,30,7,0N);
B(B_VARIN,,MXmoorStorAnaSig,15,7,17,9,);
B(B_VAROUT,,LXStopDemand,30,4,32,6,);
B(B_COMMENT,,claculation stop on demand with joystick signal,1,1,27,2,);
B(B_VARIN,,MDmoorJoySignal,9,4,11,6,);
B(B_VARIN,,0.0,9,5,11,7,);
B(B_F,EQ_R,,11,3,16,7,);
L(17,6,18,6);
L(17,8,24,8);
L(24,6,24,8);
L(24,6,25,6);
L(17,6,17,8);
L(23,5,25,5);
L(16,5,18,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 26 ;
        NETWORK_BODY
B(B_VARIN,,0.0,28,15,30,17,);
B(B_F,sel,,30,12,35,17,);
B(B_F,@GT-2,,30,17,35,21,);
B(B_F,@LT-2,,30,21,35,25,);
B(B_VARIN,,0.0,28,19,30,21,);
B(B_VARIN,,0.0,28,23,30,25,);
B(B_VAROUT,,MXmoorAnaSigNeg,35,22,37,24,);
B(B_VAROUT,,MXmoorAnaSigPos,35,18,37,20,);
B(B_VAROUT,,LDanalogSignal,35,13,37,15,);
B(B_F,@AND-2,,12,5,17,9,0N);
B(B_F,@AND-2,,12,9,17,13,0N);
B(B_VARIN,,MXmoorLoStopRapU,10,6,12,8,);
B(B_VARIN,,MXmoorLocStopInt,17,3,19,5,);
B(B_VARIN,,MXmoorLoStopRapD,10,10,12,12,);
B(B_VARIN,,MXmoorAnaSigNeg,10,7,12,9,);
B(B_VARIN,,MXmoorAnaSigPos,10,11,12,13,);
B(B_F,@OR-3,,20,7,25,12,);
B(B_COMMENT,,analog signal selector and stop mooring,1,1,27,2,);
B(B_F,sel,,20,13,25,18,);
B(B_VARIN,,LDanalSignalStor,18,15,20,17,);
B(B_VARIN,,MXmoorExtAnalSig,18,14,20,16,);
B(B_VARIN,,MDmoorExtAnalSig,18,16,20,18,);
L(25,15,30,15);
L(26,15,26,23);
L(26,19,30,19);
L(26,23,30,23);
L(26,14,30,14);
L(19,4,19,9);
L(19,9,20,9);
L(17,7,18,7);
L(18,7,18,10);
L(18,10,20,10);
L(17,11,20,11);
L(25,9,26,9);
L(26,9,26,14);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 14 ;
        NETWORK_BODY
B(B_COMMENT,,limitation analog signal mooring with poti 2 X25,1,1,27,2,);
B(B_F,limit,,11,5,17,10,);
B(B_VARIN,,1.0,9,6,11,8,);
B(B_VARIN,,100.0,9,8,11,10,);
B(B_VARIN,,MDkeybx25Poti2,9,7,11,9,);
B(B_F,@DIV,,19,5,24,9,);
B(B_VARIN,,100.0,16,10,18,12,);
B(B_COMMENT,,limitation 0% - 99%,2,3,17,4,);
B(B_VAROUT,,LDkeybx25Poti2,18,4,20,6,);
B(B_F,@MUL-2,,26,5,31,9,);
B(B_VARIN,,LDanalogSignal,23,11,25,13,);
B(B_VAROUT,,LDanalSignalLim,31,6,33,8,);
L(17,7,19,7);
L(18,8,19,8);
L(18,8,18,11);
L(18,5,18,7);
L(24,7,26,7);
L(25,8,26,8);
L(25,8,25,12);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 19 ;
        NETWORK_BODY
B(B_FB,RS,RS5,35,3,40,7,);
B(B_VAROUT,,LXlowering,40,4,42,6,);
B(B_COMMENT,,release feed action with mooring,1,1,27,2,);
B(B_VARIN,,MDmoorPumpSignal,10,4,12,6,);
B(B_F,@LT-2,,14,3,19,7,);
B(B_F,@GT-2,,14,7,19,11,);
B(B_VARIN,,0.0,10,5,12,7,);
B(B_F,@AND-3,,21,9,26,14,);
B(B_F,@OR-2,,28,9,33,13,);
B(B_VARIN,,MXmoorAnaSigPos,19,11,21,13,);
B(B_F,@AND-2,,21,14,26,18,);
B(B_VARIN,,LXlowering,18,12,20,14,);
B(B_VARIN,,MXmoorPreFeedAct,10,16,12,18,);
B(B_FB,F_TRIG,F_TRIG1,12,15,19,18,);
L(34,6,35,6);
L(19,5,35,5);
L(12,5,14,5);
L(12,6,14,6);
L(13,5,13,9);
L(13,9,14,9);
L(12,6,12,10);
L(12,10,14,10);
L(34,6,34,11);
L(33,11,34,11);
L(19,9,20,9);
L(20,9,20,11);
L(20,11,21,11);
L(26,11,28,11);
L(20,13,21,13);
L(20,13,20,16);
L(20,16,21,16);
L(26,16,27,16);
L(27,12,27,16);
L(27,12,28,12);
L(19,17,21,17);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 15 ;
        NETWORK_BODY
B(B_F,@LT-2,,24,2,29,6,);
B(B_F,@AND-4,,31,4,36,10,);
B(B_FB,RS,RS6,38,4,43,8,);
B(B_VAROUT,,MXmoorEnaFeedAct,43,5,45,7,);
B(B_VARIN,,CWmoorTreSet2Gnd,10,4,12,6,);
B(B_F,uint_to_real,,12,3,23,6,);
B(B_VARIN,,MDhg2PressMemory,21,1,23,3,);
B(B_VARIN,,MXmoorPreFeedAct,29,6,31,8,);
B(B_VARIN,,MXmoorPumpInZero,29,7,31,9,);
B(B_F,@AND-2,,31,10,36,14,N);
B(B_VARIN,,MXmoorEnaFeedAct,29,12,31,14,);
B(B_VARIN,,LXlowering,28,8,30,10,);
L(29,4,30,4);
L(30,4,30,6);
L(30,6,31,6);
L(36,6,38,6);
L(37,7,38,7);
L(37,7,37,12);
L(23,5,24,5);
L(23,2,23,4);
L(23,4,24,4);
L(36,12,37,12);
L(30,9,31,9);
L(30,9,30,12);
L(30,12,31,12);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 24 ;
        NETWORK_BODY
B(B_F,sel,,29,8,34,13,);
B(B_VARIN,,100.0,9,10,11,12,);
B(B_F,sel,,20,10,25,15,);
B(B_F,@LT-2,,13,8,18,12,);
B(B_F,sel,,29,16,34,21,);
B(B_VARIN,,100.0,9,18,11,20,);
B(B_F,sel,,20,18,25,23,);
B(B_F,@LT-2,,13,16,18,20,);
B(B_COMMENT,,rapid stop mooring,1,1,27,2,);
B(B_VAROUT,,LDintTimeUp,34,9,36,11,);
B(B_VAROUT,,LDintTimeDown,34,17,36,19,);
B(B_VARIN,,CDhg2IntTimeUp,10,7,12,9,);
B(B_VARIN,,CDhg2IntTimeDn,10,15,12,17,);
B(B_VARIN,,MXmoorLoStopRapU,20,4,22,6,);
B(B_VARIN,,MXmoorLoStopRapD,20,5,22,7,);
B(B_F,@OR-2,,22,3,27,7,);
L(27,11,29,11);
L(27,12,29,12);
L(27,5,28,5);
L(28,10,29,10);
L(11,11,13,11);
L(11,11,11,14);
L(12,13,20,13);
L(11,14,20,14);
L(19,10,19,12);
L(19,12,20,12);
L(12,10,13,10);
L(18,10,19,10);
L(26,8,26,11);
L(26,11,27,11);
L(25,12,27,12);
L(12,8,26,8);
L(12,8,12,13);
L(28,18,29,18);
L(28,5,28,18);
L(11,19,13,19);
L(11,19,11,22);
L(12,21,20,21);
L(11,22,20,22);
L(19,18,19,20);
L(19,20,20,20);
L(12,18,13,18);
L(18,18,19,18);
L(26,16,26,19);
L(12,16,26,16);
L(12,16,12,21);
L(25,20,29,20);
L(26,19,29,19);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_COMMENT,,upper limit switch mooring,1,1,27,2,);
B(B_F,@OR-2,,11,3,16,7,);
B(B_VARIN,,IXhg2UpperLimOk,9,4,11,6,);
B(B_VARIN,,MXlimitSwBridged,8,5,10,7,);
B(B_VARIN,,MXadHg1LoweLimit,9,9,11,11,);
B(B_F,@OR-2,,11,7,16,11,);
B(B_F,@AND-2,,18,3,23,7,);
B(B_VAROUT,,MXmoorUpLimBridg,23,4,25,6,);
L(10,6,11,6);
L(10,6,10,9);
L(10,9,11,9);
L(16,5,18,5);
L(17,6,18,6);
L(17,6,17,9);
L(16,9,17,9);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_COMMENT,,lower limit switch mooring,1,1,27,2,);
B(B_F,@OR-2,,11,4,16,8,);
B(B_VARIN,,IXhg1UpperLimOk,9,5,11,7,);
B(B_VARIN,,MXlimitSwBridged,8,6,10,8,);
B(B_F,@OR-2,,11,8,16,12,);
B(B_F,@AND-2,,18,4,23,8,);
B(B_VARIN,,MXadHg2LoweLimit,9,10,11,12,);
B(B_VAROUT,,LXmoorLowerLimOk,23,5,25,7,);
B(B_VAROUT,,MXmoorLoLimBridg,17,2,19,4,);
L(10,7,11,7);
L(10,7,10,10);
L(10,10,11,10);
L(16,6,18,6);
L(17,7,18,7);
L(17,7,17,10);
L(16,10,17,10);
L(17,3,17,6);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 34 ;
        NETWORK_BODY
B(B_COMMENT,,digital logic mooring,1,1,27,2,);
B(B_VARIN,,MXmoorAnaSigPos,23,4,25,6,);
B(B_VARIN,,MXmoorAnaSigNeg,23,5,25,7,);
B(B_VARIN,,MXmoorPumpInZero,23,6,25,8,);
B(B_VAROUT,,MXmoorEnPowStage,48,8,50,10,);
B(B_VARIN,,113,23,15,25,17,);
B(B_VARIN,,MXstopAllFunctio,23,10,25,12,);
B(B_VAROUT,,MXmoorLocStopInt,48,10,50,12,);
B(B_VAROUT,,MXmoorLoStopRapU,48,11,50,13,);
B(B_VAROUT,,LXstoreSysPress,48,13,50,15,);
B(B_VAROUT,,MXmoorLoStopRapD,48,12,50,14,);
B(B_VARIN,,LXmoorPresLoaded,9,7,11,9,);
B(B_VARIN,,MXmoorEnaFeedAct,9,8,11,10,);
B(B_F,@AND-2,,58,13,63,17,0N);
B(B_VAROUT,,LXenLeakoilComp,63,14,65,16,);
B(B_VARIN,,MXmoorEnaFeedAct,56,15,58,17,);
B(B_VARIN,,MXmoorUpLimBridg,23,18,25,20,);
B(B_F,@OR-3,,11,6,16,11,);
B(B_VARIN,,MXhg2ErrPressInd,9,9,11,11,);
B(B_VARIN,,LXmoorLowerLimOk,23,17,25,19,);
B(B_VAROUT,,QXhg2BrakeNormal,48,5,50,7,);
B(B_VAROUT,,LXmoorLoadPresSy,48,4,50,6,);
B(B_VARIN,,IXhg2FeedPressOk,23,14,25,16,);
B(B_VARIN,,LXmoorEnTrimAna,23,12,25,14,);
B(B_VARIN,,MDhg2PressMemory,23,30,25,32,);
B(B_FB,HGdigLogPartV036,digital1,25,3,48,32,);
B(B_VARIN,,MXminEngineSpeed,23,25,25,27,);
B(B_F,@OR-2,,58,7,63,11,);
B(B_VARIN,,MXmoorEnaFeedAct,56,2,58,4,);
B(B_VAROUT,,MXmoorEnabTrimot,63,8,65,10,);
L(16,8,25,8);
L(48,15,58,15);
L(58,3,58,9);
L(48,10,58,10);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 31 ;
        NETWORK_BODY
B(B_VAROUT,,MXmoorPumpInZero,34,11,36,13,);
B(B_VAROUT,,LXmoorPresLoaded,34,12,36,14,);
B(B_VAROUT,,MDmoorTrimotSign,34,10,36,12,);
B(B_VARIN,,LDanalSignalLim,9,9,11,11,);
B(B_VARIN,,MDhg2SystemPress,9,10,11,12,);
B(B_VARIN,,MDpowerLimReduct,9,11,11,13,);
B(B_VAROUT,,LXmoorEnTrimAna,34,13,36,15,);
B(B_VAROUT,,MDmoorPumpSignal,36,9,38,11,);
B(B_F,abs,,36,6,41,9,);
B(B_F,@MUL-2,,43,3,48,7,);
B(B_VARIN,,100.0,41,4,43,6,);
B(B_VAROUT,,LDmoorPosPumpSig,42,7,44,9,);
B(B_VAROUT,,LDmoorMaxPumpSig,48,4,50,6,);
B(B_COMMENT,,analog part mooring,1,1,27,2,);
B(B_VAROUT,,MDhg2LowRegLimSi,34,14,36,16,);
B(B_FB,HGanalogPartV037,analog1,11,8,34,30,);
B(B_VARIN,,LDintTimeUp,9,12,11,14,);
B(B_VARIN,,LDintTimeDown,9,13,11,15,);
B(B_VARIN,,LXenLeakoilComp,9,14,11,16,);
B(B_VARIN,,CDhg2LeakOilSign,9,15,11,17,);
B(B_VARIN,,MXhg2WinchLift,9,16,11,18,);
B(B_VARIN,,MXhg2WinchLower,9,17,11,19,);
B(B_VARIN,,1.0,9,18,11,20,);
B(B_VARIN,,CDlowLimSignal,9,19,11,21,);
B(B_VARIN,,LXmoorLoadPresSy,9,20,11,22,);
B(B_VARIN,,LXstoreSysPress,9,21,11,23,);
B(B_VARIN,,MXhg2ErrPressInd,9,22,11,24,);
B(B_VARIN,,MDhg2PressMemory,9,23,11,25,);
B(B_VARIN,,FALSE,9,24,11,26,);
B(B_VAROUT,,MDhg2PressMemory,34,15,36,17,);
L(35,8,35,10);
L(35,8,36,8);
L(41,8,42,8);
L(42,6,42,8);
L(42,6,43,6);
L(34,10,36,10);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 23 ;
        NETWORK_BODY
B(B_F,@DIV,,18,5,23,9,);
B(B_VARIN,,100.0,16,6,18,8,);
B(B_F,abs,,18,9,23,12,);
B(B_VARIN,,LDanalogSignal,16,10,18,12,);
B(B_COMMENT,,diffY/diffX,16,4,22,5,);
B(B_F,@MUL-2,,26,5,31,9,);
B(B_F,@DIV,,26,14,31,18,);
B(B_VARIN,,LDintTimeUp,24,15,26,17,);
B(B_F,@DIV,,26,18,31,22,);
B(B_VARIN,,LDintTimeDown,22,19,24,21,);
B(B_VARIN,,LDkeybx25Poti2,23,16,25,18,);
B(B_F,@MUL-2,,33,14,38,18,);
B(B_F,@MUL-2,,33,18,38,22,);
B(B_F,@MUL-2,,26,10,31,14,);
B(B_VARIN,,100.0,24,12,26,14,);
B(B_FB,Integrator,Integrator1,39,4,48,10,);
B(B_VARIN,,TRUE,37,5,39,7,);
B(B_F,limit,,50,3,56,8,);
B(B_VARIN,,0.0,47,2,49,4,);
B(B_VAROUT,,LDmoorPresConSig,56,4,58,6,);
B(B_VARIN,,100.0,47,10,49,12,);
B(B_COMMENT,,press control signal depend on joy stick signal,1,1,27,2,);
B(B_COMMENT,,0-50% MS Signal abhängig vom MS Signal; von 50-100% volle ø^Ansteuerung; dyn. Integrator sollte immer bei Pumpe 0 auch ø^auf null sein; (Grund für Int: Aufschaukeln des Gerätes beim ø^Anpressen => langsames Absenken des Druckes),41,14,64,18,);
B(B_F,to_real,,11,7,18,10,);
B(B_VARIN,,50.0,9,8,11,10,);
L(23,7,26,7);
L(24,8,24,11);
L(24,8,26,8);
L(23,11,24,11);
L(25,17,25,21);
L(25,21,26,21);
L(24,20,26,20);
L(25,17,26,17);
L(31,16,33,16);
L(31,20,33,20);
L(32,17,33,17);
L(32,21,33,21);
L(38,20,39,20);
L(32,12,32,21);
L(31,12,32,12);
L(25,12,26,12);
L(25,7,25,12);
L(38,8,38,16);
L(39,9,39,20);
L(38,8,39,8);
L(31,7,39,7);
L(48,6,50,6);
L(49,5,50,5);
L(49,3,49,5);
L(49,7,50,7);
L(49,7,49,11);
L(18,8,18,9);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 25 ;
        NETWORK_BODY
B(B_COMMENT,,select analog signal pressure control hg1,1,1,27,2,);
B(B_F,sel,,25,9,30,14,);
B(B_VARIN,,MXmoorExtPCont,22,8,24,10,);
B(B_VARIN,,MDkeybx25Poti1,9,14,11,16,);
B(B_F,@DIV,,11,13,16,17,);
B(B_VARIN,,100.0,9,15,11,17,);
B(B_F,@MUL-2,,18,10,23,14,);
B(B_VARIN,,LDmoorPresConSig,16,11,18,13,);
B(B_FB,Integrator,Integrator2,14,17,23,23,);
B(B_VARIN,,TRUE,12,18,14,20,);
B(B_VARIN,,MDmoorExtPCont,12,19,14,21,);
B(B_VARIN,,100.0,12,20,14,22,);
B(B_VARIN,,1000.0,12,21,14,23,);
B(B_F,limit,,32,8,38,13,);
B(B_VARIN,,0.1,29,7,31,9,);
B(B_VARIN,,100.0,29,14,31,16,);
B(B_F,sel,,40,4,45,9,);
B(B_VAROUT,,LDhg1AnaSigPcont,45,5,47,7,);
B(B_VARIN,,CDhg1MinTenPcont,38,6,40,8,);
B(B_F,@AND-2,,33,2,38,6,);
B(B_VARIN,,MXmoorEnaFeedAct,31,4,33,6,);
B(B_VARIN,,MXmoorEnPowStage,31,3,33,5,);
L(24,13,25,13);
L(24,11,25,11);
L(24,9,24,11);
L(16,15,17,15);
L(17,13,17,15);
L(17,13,18,13);
L(23,12,25,12);
L(23,19,24,19);
L(24,13,24,19);
L(30,11,32,11);
L(31,10,32,10);
L(31,8,31,10);
L(31,12,32,12);
L(31,12,31,15);
L(39,8,40,8);
L(38,4,39,4);
L(39,4,39,6);
L(39,6,40,6);
L(39,8,39,10);
L(38,10,39,10);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_F,@EQ-2,,11,5,16,9,);
B(B_VARIN,,0.0,9,6,11,8,);
B(B_VARIN,,LXlrCylAdjustmt,15,3,17,5,);
B(B_F,@AND-2,,18,4,23,8,);
B(B_VARIN,,MDmoorPumpSignal,9,7,11,9,);
B(B_VAROUT,,LXenabCylAdjust,23,5,25,7,);
B(B_COMMENT,,enable cylinder adjustment and brake hg1,1,1,27,2,);
B(B_VAROUT,,LXpumpSigInZero,17,8,19,10,);
L(16,7,18,7);
L(17,4,17,6);
L(17,6,18,6);
L(17,7,17,9);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_COMMENT,,power stage hg2 lifting,1,1,27,2,);
B(B_VARIN,,MXmoorEnPowStage,24,5,26,7,);
B(B_FB,PowerStage,PowerStage1,26,4,35,12,);
B(B_VAROUT,,QWhg2Lifting,35,5,37,7,);
B(B_VARIN,,CWhg2minCurPumUp,24,9,26,11,);
B(B_VARIN,,CWhg2maxCurPumUp,24,10,26,12,);
B(B_VARIN,,0.0,24,7,26,9,);
B(B_VARIN,,100.0,24,8,26,10,);
B(B_VARIN,,MDmoorPumpSignal,9,7,11,9,);
B(B_F,sel,,11,5,16,10,);
B(B_VARIN,,LDmoorMaxPumpSig,9,8,11,10,);
B(B_VARIN,,MXmoorEnaFeedAct,9,6,11,8,);
L(16,7,26,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_COMMENT,,power stage hg2 lowering,1,1,27,2,);
B(B_VARIN,,MXmoorEnPowStage,24,5,26,7,);
B(B_FB,PowerStage,PowerStage2,26,4,35,12,);
B(B_VAROUT,,QWhg2Lowering,35,5,37,7,);
B(B_VARIN,,CWhg2minCurPumDn,24,9,26,11,);
B(B_VARIN,,CWhg2maxCurPumDn,24,10,26,12,);
B(B_VARIN,,0.0,24,7,26,9,);
B(B_VARIN,,-100.0,24,8,26,10,);
B(B_F,sel,,11,5,16,10,);
B(B_VARIN,,MDmoorPumpSignal,9,7,11,9,);
B(B_VARIN,,0.0,9,8,11,10,);
B(B_VARIN,,MXmoorEnaFeedAct,9,6,11,8,);
L(16,7,26,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_COMMENT,,power stage hg2 trimot,1,1,27,2,);
B(B_VARIN,,MXmoorEnabTrimot,24,5,26,7,);
B(B_FB,PowerStage,PowerStage3,26,4,35,12,);
B(B_VAROUT,,QWhg2Trimot,35,5,37,7,);
B(B_VARIN,,CWhg2minCurTrimo,24,9,26,11,);
B(B_VARIN,,CWhg2maxCurTrimo,24,10,26,12,);
B(B_VARIN,,0.0,24,7,26,9,);
B(B_VARIN,,100.0,24,8,26,10,);
B(B_F,sel,,11,5,16,10,);
B(B_VARIN,,MDmoorTrimotSign,9,7,11,9,);
B(B_VARIN,,LDmoorMaxPumpSig,9,8,11,10,);
B(B_VARIN,,MXmoorEnaFeedAct,9,6,11,8,);
L(16,7,26,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_F,@GT-2,,11,5,16,9,);
B(B_VARIN,,MDmoorPumpSignal,9,6,11,8,);
B(B_VARIN,,0.0,9,7,11,9,);
B(B_F,@AND-2,,18,4,23,8,);
B(B_VARIN,,MXmoorAnaSigPos,15,3,17,5,);
B(B_FB,RS,RS7,25,4,30,8,0N);
B(B_COMMENT,,clutch hg1,1,1,27,2,);
B(B_VAROUT,,QXhg1Clutch,31,6,33,8,);
B(B_VAROUT,,LXhg1Clutch,31,5,33,7,);
L(16,7,18,7);
L(17,4,17,6);
L(17,6,18,6);
L(23,6,25,6);
L(17,7,17,9);
L(17,9,24,9);
L(24,7,24,9);
L(24,7,25,7);
L(30,6,31,6);
L(31,6,31,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 28 ;
        NETWORK_BODY
B(B_COMMENT,,power stage hg1 lifting and trimot ,1,1,27,2,);
B(B_FB,PowerStage,PowerStage4,38,9,47,17,);
B(B_VAROUT,,QWhg1Lifting,47,10,49,12,);
B(B_F,sel,,13,11,18,16,);
B(B_VARIN,,LDmoorMaxPumpSig,9,13,11,15,);
B(B_VARIN,,LDmoorPosPumpSig,9,14,11,16,);
B(B_VARIN,,MXmoorEnaFeedAct,9,12,11,14,);
B(B_FB,PowerStage,PowerStage5,38,19,47,27,);
B(B_VAROUT,,QWhg1Trimot,47,20,49,22,);
B(B_VARIN,,CWhg1minCurTrimo,36,24,38,26,);
B(B_VARIN,,CWhg1maxCurTrimo,36,25,38,27,);
B(B_VARIN,,0.0,36,22,38,24,);
B(B_VARIN,,100.0,36,23,38,25,);
B(B_VARIN,,LXenabCylAdjust,18,7,20,9,);
B(B_F,sel,,21,10,26,15,);
B(B_VARIN,,CWhg1maxCurPumUp,36,15,38,17,);
B(B_VARIN,,CWhg1minCurPumUp,36,14,38,16,);
B(B_VARIN,,100.0,36,13,38,15,);
B(B_VARIN,,0.0,36,12,38,14,);
B(B_F,sel,,28,20,33,25,);
B(B_VARIN,,0.0,26,23,28,25,);
B(B_F,@AND-2,,21,20,26,24,N);
B(B_VARIN,,100.0,17,16,19,18,);
B(B_VAROUT,,QXhg1BrakeNormal,28,6,30,8,);
B(B_F,@AND-2,,14,3,19,7,N);
B(B_VARIN,,MXmoorEnPowStage,12,5,14,7,);
B(B_VARIN,,LXhg1Clutch,12,4,14,6,);
B(B_F,@OR-2,,21,5,26,9,);
L(28,11,38,11);
L(11,13,13,13);
L(11,14,13,14);
L(11,15,13,15);
L(12,13,12,23);
L(18,13,21,13);
L(19,14,19,17);
L(19,14,21,14);
L(20,12,21,12);
L(28,19,37,19);
L(37,19,37,21);
L(37,21,38,21);
L(33,22,38,22);
L(12,23,21,23);
L(20,22,21,22);
L(26,22,28,22);
L(27,12,27,23);
L(27,23,28,23);
L(26,12,38,12);
L(20,8,20,22);
L(28,7,28,19);
L(20,5,20,7);
L(26,7,28,7);
L(20,8,21,8);
L(20,7,21,7);
L(19,5,20,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_VARIN,,MXmoorEnaFeedAct,10,4,12,6,);
B(B_VARIN,,MXmoorEnPowStage,10,5,12,7,);
B(B_VARIN,,LXlrCylAdjustmt,10,6,12,8,);
B(B_VARIN,,LXenabCylAdjust,10,7,12,9,);
B(B_COMMENT,,mooring working,1,1,27,2,);
B(B_F,@OR-4,,12,3,17,9,);
B(B_VAROUT,,LXmooringWorking,17,4,19,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_COMMENT,,symbols on screen,1,1,27,2,);
B(B_VARIN,,LXenabCylAdjust,15,4,17,6,);
B(B_VARIN,,MXmoorEnaFeedAct,15,5,17,7,);
B(B_VARIN,,MDmoorPumpSignal,10,8,12,10,);
B(B_VARIN,,0.0,10,9,12,11,);
B(B_F,@OR-3,,17,3,22,8,);
B(B_VAROUT,,MXhg1MooringLift,22,4,24,6,);
B(B_F,@LT-2,,12,7,17,11,);
L(17,7,17,9);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VAROUT,,MXhg2MooringLift,12,1,14,3,);
B(B_VARIN,,MXmoorEnaFeedAct,10,1,12,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL := pcont: ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_COMMENT,,power stage pressure control hg1 and faw,1,1,27,2,);
B(B_VARIN,,MXminEngineSpeed,38,4,40,6,);
B(B_FB,PowerStage,PowerStage6,40,3,49,11,);
B(B_VAROUT,,QWhg1PressContro,49,4,51,6,);
B(B_VARIN,,CWhg1minCurPcont,38,8,40,10,);
B(B_VARIN,,CWhg1maxCurPcont,38,9,40,11,);
B(B_VARIN,,0.0,38,6,40,8,);
B(B_VARIN,,100.0,38,7,40,9,);
B(B_F,sel,,26,4,31,9,);
B(B_VARIN,,MXhg1ExtSigPcont,23,3,25,5,);
B(B_F,sel,,19,5,24,10,);
B(B_VARIN,,100.0,17,7,19,9,);
B(B_VARIN,,MXadMooringActiv,17,6,19,8,);
B(B_VARIN,,LDhg1AnaSigPcont,17,8,19,10,);
B(B_VARIN,,MDhg1ExtSigPcont,23,10,25,12,);
L(31,6,40,6);
L(25,4,25,6);
L(25,6,26,6);
L(25,8,26,8);
L(24,7,26,7);
L(25,8,25,11);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_COMMENT,,power stage pressure control hg2,1,1,27,2,);
B(B_VARIN,,MXminEngineSpeed,39,4,41,6,);
B(B_FB,PowerStage,PowerStage7,41,3,50,11,);
B(B_VAROUT,,QWhg2PressContro,50,4,52,6,);
B(B_VARIN,,CWhg2minCurPcont,39,8,41,10,);
B(B_VARIN,,CWhg2maxCurPcont,39,9,41,11,);
B(B_VARIN,,0.0,39,6,41,8,);
B(B_VARIN,,100.0,39,7,41,9,);
B(B_VARIN,,100.0,17,7,19,9,);
B(B_F,sel,,19,5,24,10,);
B(B_VARIN,,CDhg2MinTenPcont,17,8,19,10,);
B(B_F,sel,,27,4,32,9,);
B(B_VARIN,,MXhg2ExtSigPcont,24,3,26,5,);
B(B_VARIN,,MDhg2ExtSigPcont,24,10,26,12,);
B(B_VARIN,,MXmoorEnaFeedAct,17,6,19,8,);
L(24,7,27,7);
L(32,6,41,6);
L(26,4,26,6);
L(26,6,27,6);
L(26,8,26,11);
L(26,8,27,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,exit program,1,1,27,2,);
B(B_VARIN,,TRUE,10,3,12,5,);
B(B_RETURN,,,12,3,14,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL := init: ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,init program,1,1,27,2,);
B(B_VARIN,,TRUE,10,3,12,5,);
B(B_VAROUT,,LXinitOk,12,3,14,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_FB,CorrValue_Bool,CorrValue_Bool1,11,4,23,10,);
B(B_VARIN,,CXlrMooringPrese,9,8,11,10,);
B(B_VARIN,,FALSE,9,6,11,8,);
B(B_VARIN,,TRUE,9,7,11,9,);
B(B_VARIN,,FALSE,9,5,11,7,);
B(B_COMMENT,,preselection if mooring  is mounted (installed),1,1,27,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value minimum current pressure control hg1,1,1,27,2,);
B(B_FB,CorrValue_UInt,CorrValue_UInt1,11,4,23,10,);
B(B_VARIN,,100,9,5,11,7,);
B(B_VARIN,,50,9,6,11,8,);
B(B_VARIN,,300,9,7,11,9,);
B(B_VARIN,,CWhg1minCurPcont,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_FB,CorrValue_UInt,CorrValue_UInt2,11,4,23,10,);
B(B_VARIN,,100,9,5,11,7,);
B(B_VARIN,,50,9,6,11,8,);
B(B_VARIN,,300,9,7,11,9,);
B(B_VARIN,,CWhg2minCurPcont,9,8,11,10,);
B(B_COMMENT,,correction value minimum current pressure control hg2,1,1,27,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_FB,CorrValue_UInt,CorrValue_UInt3,11,4,23,10,);
B(B_VARIN,,800,9,5,11,7,);
B(B_VARIN,,500,9,6,11,8,);
B(B_VARIN,,1000,9,7,11,9,);
B(B_VARIN,,CWhg1maxCurPcont,9,8,11,10,);
B(B_COMMENT,,correction value maximum current pressure control hg1,1,1,27,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value maximum current pressure control hg2,1,1,27,2,);
B(B_FB,CorrValue_UInt,CorrValue_UInt4,11,4,23,10,);
B(B_VARIN,,800,9,5,11,7,);
B(B_VARIN,,500,9,6,11,8,);
B(B_VARIN,,1000,9,7,11,9,);
B(B_VARIN,,CWhg2maxCurPcont,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,treshold system pressure driller or vibrator set to ground,1,1,27,2,);
B(B_FB,CorrValue_UInt,CorrValue_UInt5,11,4,23,10,);
B(B_VARIN,,80,9,5,11,7,);
B(B_VARIN,,30,9,6,11,8,);
B(B_VARIN,,150,9,7,11,9,);
B(B_VARIN,,CWmoorTreSet2Gnd,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,minimum tension pressure control hg1 in %,1,1,27,2,);
B(B_FB,CorrValue_Real,CorrValue_Real1,11,4,23,10,);
B(B_VARIN,,5.0,9,5,11,7,);
B(B_VARIN,,0.0,9,6,11,8,);
B(B_VARIN,,30.0,9,7,11,9,);
B(B_VARIN,,CDhg1MinTenPcont,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_FB,CorrValue_Real,CorrValue_Real2,11,4,23,10,);
B(B_VARIN,,5.0,9,5,11,7,);
B(B_VARIN,,0.0,9,6,11,8,);
B(B_VARIN,,30.0,9,7,11,9,);
B(B_VARIN,,CDhg2MinTenPcont,9,8,11,10,);
B(B_COMMENT,,minimum tension pressure control hg2 in %,1,1,27,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_VAROUT,,MXmoorPumpInZero,11,3,13,5,);
B(B_VARIN,,TRUE,9,3,11,5,);
B(B_COMMENT,,set pump in zero first time,1,1,27,2,);
B(B_VAROUT,,MXmoorUpLimBridg,11,4,13,6,);
B(B_VAROUT,,MXmoorLoLimBridg,11,5,13,7,);
B(B_VAROUT,,LXpumpSigInZero,11,6,13,8,);
L(11,4,11,7);
        END_NETWORK_BODY
    END_NET_WORK
END_BODY
END_PROGRAM

PROGRAM ADoutValveV010
	VAR_EXTERNAL 
		QX4T_Y90: BOOL:=FALSE;
			(*release Z3 cylinder/grab slewing*)
		QX4T_Y19: BOOL:=FALSE;
			(*release Z6 cylinder/grap adjust.*)
		QX4T_Y23: BOOL:=FALSE;
			(*release Z4 cyl/hose adj.winch/grab adj.S6/right/left grab adj.*)
		QX4T_Y25: BOOL:=FALSE;
			(*release Z17 cylinder*)
		QX4T_Y24: BOOL:=FALSE;
			(*release pile guide cylinder*)
		QW4T_Y33: UINT:=0;
			(*Z2 cyl. out/ grab lock cyl. out/right grab adj. out/hose drum up*)
		QW4T_Y32: UINT:=0;
			(*Z2 cyl. in/ grab lock cyl. in/right grab adj. in/hose drum down *)
		QW4T_Y20: UINT:=0;
			(*Z4 cyl.out/ hose adj.winch out/left grab adj.out*)
		QW4T_Y21: UINT:=0;
			(*Z4 cyl.in/ hose adj.winch in/grab adj.S6 left/right/left grab adj.in *)
		QW4T_Y16: UINT:=0;
			(*Z6 cylinder left/ grap adj. out*)
		QW4T_Y17: UINT:=0;
			(*Z6 cylinder right/ grap adj. in*)
		QW4T_Y27: UINT:=0;
			(*Z17 cylinder in*)
		QW4T_Y26: UINT:=0;
			(*Z17 cylinder out*)
		QW4T_Y92: UINT:=0;
			(*Z3 cylinder right/ grab slewing right*)
		QW4T_Y91: UINT:=0;
			(*Z3 cylinder left/ grab slewing left*)
		QW4T_Y28: UINT:=0;
			(*pile guide cylinder close*)
		QW4T_Y29: UINT:=0;
			(*pile guide cylinder open*)
		QW4T_Y39: UINT:=0;
			(*release Z2 cylinder/hose drum press. cont.*)
		QW4T_Y30: UINT:=0;
			(*stabilization winch/add. hose winch lifting CC*)
		QW4T_Y31: UINT:=0;
			(*stabilization winch/add. hose winch lowering CC*)
		QW4T_Y8: UINT:=0;
			(*stabilization winch/add. hose winch  p-contr. CC*)
		QW4V_Y30: UINT:=0;
			(*P2 hammer/vibrator/grab open/drill.dr.right*)
		QW4V_Y31: UINT:=0;
			(*P2 grab close/drill.dr.left*)
		QW4V_Y32: UINT:=0;
			(*P1 hammer/vibrator/grab open/drill.dr.right/LUDV pump4*)
		QW4V_Y33: UINT:=0;
			(*P1 grab close/drill.dr.left/LUDV pump3*)
		MXextLudvSecAct: BOOL:=FALSE;
			(*external LUDV section active*)
		MXludvSecP1activ: BOOL:=FALSE;
			(*ludv working section P1 active*)
		MXludvSecP2activ: BOOL:=FALSE;
			(*ludv working section P2 active*)
		MXuseLudvPump3: BOOL:=FALSE;
			(*use ludv pump P3*)
		MXuseLudvPump4: BOOL:=FALSE;
			(*use ludv pump P4*)
		MDz6PumpSignal: REAL:=0.0;
			(*Z6 analog pump signal*)
		MDz2PumpSignal: REAL:=0.0;
			(*Z2 analog pump signal*)
		MDz4PumpSignal: REAL:=0.0;
			(*Z4 analog pump signal*)
		MDz3PumpSignal: REAL:=0.0;
			(*Z3 analog pump signal*)
		MDz17PumpSignal: REAL:=0.0;
			(*Z17 analog pump signal*)
		MDplGuiPumpSig: REAL:=0.0;
			(*pile guide cylidner analog pump signal*)
		MDgrabAdPuSig: REAL:=0.0;
			(*grab adjustment analog pump signal*)
		MDgrSlewPuSig: REAL:=0.0;
			(*grab slewing pump signal*)
		MDgrSlewPuSigB: REAL:=0.0;
			(*grab slewing pump signal (button controlled) *)
		MDgrLockCylPuSig: REAL:=0.0;
			(*grab lock cylinder pump signal*)
		MDgrHoAdCylPuSig: REAL:=0.0;
			(*grab hose adjust cylinder pump signal*)
		MDgrAd1PumpSig: REAL:=0.0;
			(*grab adjustment1 pump signal *)
		MDgrAd2PumpSig: REAL:=0.0;
			(*grab adjustment2 pump signal *)
		MDstabWPumpSigCC: REAL:=0.0;
			(*stabilization winch pump signal (closed circuit) *)
		MDstabWPumpSigOC: REAL:=0.0;
			(*stabilization winch pump signal (open circuit) *)
		MDstabWPresSigCC: REAL:=0.0;
			(*stabilization winch pressure signal (closed circuit) *)
		MDstabWPresSigOC: REAL:=0.0;
			(*stabilization winch pressure signal (open circuit) *)
		MDhoWiPumpSigCC: REAL:=0.0;
			(*hose winch pump signal (closed circuit) *)
		MDhoWiPumpSigOC: REAL:=0.0;
			(*hose winch pump signal (open circuit) *)
		MDhoWiPresSigCC: REAL:=0.0;
			(*hose winch pressure signal (closed circuit) *)
		MDhoWiPresSigOC: REAL:=0.0;
			(*hose winch pressure signal (open circuit) *)
		MDz2PressSignal: REAL:=0.0;
			(*Z2 pressure signal [%]*)
		MDgrLockCylPrSig: REAL:=0.0;
			(*grab lock cylinder pressure signal [%]*)
		MDhamPump1Signal: REAL:=0.0;
			(*hammer analog signal pump 1 [%]*)
		MDhamPump2Signal: REAL:=0.0;
			(*hammer analog signal pump 2 [%]*)
		MDvibPump1Signal: REAL:=0.0;
			(*vibrator analog signal pump 1 [%]*)
		MDvibPump2Signal: REAL:=0.0;
			(*vibrator analog signal pump 2 [%]*)
		MDgrbPump1Signal: REAL:=0.0;
			(*grab analog signal pump 1 [%]*)
		MDgrbPump2Signal: REAL:=0.0;
			(*grab analog signal pump 2 [%]*)
		MDddPump1Signal: REAL:=0.0;
			(*grab analog signal pump 1 [%]*)
		MDddPump2Signal: REAL:=0.0;
			(*grab analog signal pump 2 [%]*)
	END_VAR
	VAR_EXTERNAL CONSTANT RETAIN
		CW4T_Y16MinCur: UINT:=0;
			(*4T-Y16 min. current valve*)
		CW4T_Y16MaxCur: UINT:=0;
			(*4T-Y16  max. current valve*)
		CW4T_Y17MinCur: UINT:=0;
			(*4T-Y17 min. current valve *)
		CW4T_Y17MaxCur: UINT:=0;
			(*4T-Y17  max. current valve*)
		CW4T_Y20MinCur: UINT:=0;
			(*4T-Y20 min. current valve*)
		CW4T_Y20MaxCur: UINT:=0;
			(*4T-Y20 max. current valve*)
		CW4T_Y21MinCur: UINT:=0;
			(*4T-Y21 min. current valve*)
		CW4T_Y21MaxCur: UINT:=0;
			(*4T-Y21  max. current valve*)
		CW4T_Y26MinCur: UINT:=0;
			(*4T-Y26 min. current valve*)
		CW4T_Y26MaxCur: UINT:=0;
			(*4T-Y26  max. current valve*)
		CW4T_Y27MinCur: UINT:=0;
			(*4T-Y27 min. current valve*)
		CW4T_Y27MaxCur: UINT:=0;
			(*4T-Y27 max. current valve*)
		CW4T_Y32MinCur: UINT:=0;
			(*4T-Y32 min. current valve*)
		CW4T_Y32MaxCur: UINT:=0;
			(*4T-Y32 max. current valve*)
		CW4T_Y33MinCur: UINT:=0;
			(*4T-Y33 min. current valve*)
		CW4T_Y33MaxCur: UINT:=0;
			(*4T-Y33 max. current valve*)
		CW4T_Y91MinCur: UINT:=0;
			(*4T-Y91 min. current valve*)
		CW4T_Y91MaxCur: UINT:=0;
			(*4T-Y91  max. current valve*)
		CW4T_Y92MinCur: UINT:=0;
			(*4T-Y92 min. current valve*)
		CW4T_Y92MaxCur: UINT:=0;
			(*4T-Y92 max. current valve*)
		CW4T_Y28MinCur: UINT:=0;
			(*4T-Y28 min. current valve*)
		CW4T_Y28MaxCur: UINT:=0;
			(*4T-Y28  max. current valve*)
		CW4T_Y29MinCur: UINT:=0;
			(*4T-Y29 min. current valve*)
		CW4T_Y29MaxCur: UINT:=0;
			(*4T-Y29 max. current valve*)
		CW4T_Y39MinCur: UINT:=0;
			(*4T-Y39 min. current valve*)
		CW4T_Y39MaxCur: UINT:=0;
			(*4T-Y39 max. current valve*)
		CW4T_Y30MinCur: UINT:=0;
			(*4T-Y30 min. current valve*)
		CW4T_Y30MaxCur: UINT:=0;
			(*4T-Y30 max. current valve*)
		CW4T_Y31MinCur: UINT:=0;
			(*4T-Y31 min. current valve*)
		CW4T_Y31MaxCur: UINT:=0;
			(*4T-Y31 max. current valve*)
		CW4T_Y8MinCur: UINT:=0;
			(*4T-Y8 min. current valve*)
		CW4T_Y8MaxCur: UINT:=0;
			(*4T-Y8 max. current valve*)
		CWp1MinCurValveA: UINT:=0;
			(*p1 ludv section min.current (A side)*)
		CWp1MaxCurValveA: UINT:=0;
			(*p1 ludv section max.current (A side)*)
		CWp1MinCurValveB: UINT:=0;
			(*p1 ludv section min.current (B side) main*)
		CWp1MaxCurValveB: UINT:=0;
			(*p1 ludv section max.current (B side) main*)
		CWp2MinCurValveA: UINT:=0;
			(*p2 ludv section min.current (A side)*)
		CWp2MaxCurValveA: UINT:=0;
			(*p2 ludv section max.current (A side)*)
		CWp2MinCurValveB: UINT:=0;
			(*p2 ludv section min.current (B side) main*)
		CWp2MaxCurValveB: UINT:=0;
			(*p2 ludv section max.current (B side) main*)
	END_VAR
	VAR 
		LXinitOk: BOOL:=FALSE;
		LX4T_Y39: BOOL:=FALSE;
		LX4T_Y8: BOOL:=FALSE;
		LDY16_Y17PumpSig: REAL:=0.0;
		LDY91_Y92PumpSig: REAL:=0.0;
		LDY32_Y33PumpSig: REAL:=0.0;
		LDY20_Y21PumpSig: REAL:=0.0;
		LDY30_Y31PumpSig: REAL:=0.0;
		LDY39PressSig: REAL:=0.0;
		LDY8PressSig: REAL:=0.0;
		LDludvSecP1Sig: REAL:=0.0;
		LDludvSecP2Sig: REAL:=0.0;
		CorrValue_UInt1: CorrValue_UInt;
		CorrValue_UInt2: CorrValue_UInt;
		CorrValue_UInt3: CorrValue_UInt;
		CorrValue_UInt4: CorrValue_UInt;
		CorrValue_UInt5: CorrValue_UInt;
		CorrValue_UInt6: CorrValue_UInt;
		CorrValue_UInt7: CorrValue_UInt;
		CorrValue_UInt8: CorrValue_UInt;
		CorrValue_UInt9: CorrValue_UInt;
		CorrValue_UInt10: CorrValue_UInt;
		CorrValue_UInt11: CorrValue_UInt;
		CorrValue_UInt12: CorrValue_UInt;
		CorrValue_UInt13: CorrValue_UInt;
		CorrValue_UInt14: CorrValue_UInt;
		CorrValue_UInt15: CorrValue_UInt;
		CorrValue_UInt16: CorrValue_UInt;
		CorrValue_UInt17: CorrValue_UInt;
		CorrValue_UInt18: CorrValue_UInt;
		CorrValue_UInt19: CorrValue_UInt;
		CorrValue_UInt20: CorrValue_UInt;
		CorrValue_UInt21: CorrValue_UInt;
		CorrValue_UInt22: CorrValue_UInt;
		CorrValue_UInt23: CorrValue_UInt;
		CorrValue_UInt24: CorrValue_UInt;
		CorrValue_UInt25: CorrValue_UInt;
		CorrValue_UInt26: CorrValue_UInt;
		CorrValue_UInt27: CorrValue_UInt;
		CorrValue_UInt28: CorrValue_UInt;
		CorrValue_UInt29: CorrValue_UInt;
		CorrValue_UInt30: CorrValue_UInt;
		CorrValue_UInt31: CorrValue_UInt;
		CorrValue_UInt32: CorrValue_UInt;
		PowerStage1: PowerStage;
		PowerStage2: PowerStage;
		PowerStage3: PowerStage;
		PowerStage4: PowerStage;
		PowerStage5: PowerStage;
		PowerStage6: PowerStage;
		PowerStage7: PowerStage;
		PowerStage8: PowerStage;
		PowerStage9: PowerStage;
		PowerStage10: PowerStage;
		PowerStage11: PowerStage;
		PowerStage12: PowerStage;
		PowerStage13: PowerStage;
		PowerStage14: PowerStage;
		PowerStage15: PowerStage;
		PowerStage16: PowerStage;
		PowerStage17: PowerStage;
		PowerStage18: PowerStage;
		PowerStage19: PowerStage;
		PowerStage20: PowerStage;
	END_VAR
'FBD'
BODY
    WORKSPACE
        NETWORK_LIST_TYPE := NWTYPEFBD ;
        ACTIVE_NETWORK := 0 ;
    END_WORKSPACE
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_COMMENT,,init first time,1,1,27,2,);
B(B_VARIN,,LXinitOk,9,4,11,6,);
B(B_F,not,,11,3,16,6,);
B(B_JUMP,,init,16,4,18,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 22 ;
        NETWORK_BODY
B(B_F,NE_R,,14,9,19,13,);
B(B_F,NE_R,,14,13,19,17,);
B(B_F,NE_R,,14,17,19,21,);
B(B_F,SigMax4,,14,3,21,9,);
B(B_VAROUT,,LDY16_Y17PumpSig,21,4,23,6,);
B(B_VARIN,,MDz6PumpSignal,11,4,13,6,);
B(B_VARIN,,MDgrabAdPuSig,10,5,12,7,);
B(B_VARIN,,MDgrAd1PumpSig,9,6,11,8,);
B(B_VARIN,,0.0,11,19,13,21,);
B(B_F,@XOR-3,,20,9,25,14,);
B(B_VAROUT,,QX4T_Y19,25,10,27,12,);
B(B_COMMENT,,release function valve for 4T-Y16/17,1,1,27,2,);
L(19,12,19,15);
L(13,5,14,5);
L(12,6,14,6);
L(11,7,14,7);
L(14,7,14,8);
L(13,5,13,11);
L(13,11,14,11);
L(12,6,12,15);
L(12,15,14,15);
L(11,7,11,19);
L(11,19,14,19);
L(13,12,13,20);
L(13,20,14,20);
L(13,16,14,16);
L(13,12,14,12);
L(19,11,20,11);
L(19,12,20,12);
L(20,13,20,19);
L(19,19,20,19);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_COMMENT,,power stage 4T-Y16 ,1,1,27,2,);
B(B_FB,PowerStage,PowerStage1,11,4,20,12,);
B(B_VARIN,,0.0,9,7,11,9,);
B(B_VARIN,,CW4T_Y16MinCur,9,9,11,11,);
B(B_VARIN,,CW4T_Y16MaxCur,9,10,11,12,);
B(B_VARIN,,LDY16_Y17PumpSig,9,6,11,8,);
B(B_VARIN,,QX4T_Y19,9,5,11,7,);
B(B_VAROUT,,QW4T_Y16,20,5,22,7,);
B(B_VARIN,,-100.0,9,8,11,10,);
B(B_COMMENT,,* z6 cylinder Out /leftø^* grab adjust	out,30,1,43,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_COMMENT,,power stage 4T-Y17,1,1,27,2,);
B(B_FB,PowerStage,PowerStage2,11,4,20,12,);
B(B_VARIN,,0.0,9,7,11,9,);
B(B_VARIN,,CW4T_Y17MinCur,9,9,11,11,);
B(B_VARIN,,CW4T_Y17MaxCur,9,10,11,12,);
B(B_VARIN,,LDY16_Y17PumpSig,9,6,11,8,);
B(B_VARIN,,QX4T_Y19,9,5,11,7,);
B(B_VAROUT,,QW4T_Y17,20,5,22,7,);
B(B_VARIN,,100.0,9,8,11,10,);
B(B_COMMENT,,* z6 cylinder In/rightø^* grab adjust in ,30,1,43,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 26 ;
        NETWORK_BODY
B(B_F,NE_R,,15,9,20,13,);
B(B_F,NE_R,,15,13,20,17,);
B(B_F,NE_R,,15,21,20,25,);
B(B_F,SigMax4,,15,3,22,9,);
B(B_VAROUT,,LDY32_Y33PumpSig,22,4,24,6,);
B(B_VARIN,,0.0,12,23,14,25,);
B(B_VARIN,,MDz2PumpSignal,12,4,14,6,);
B(B_VARIN,,MDgrLockCylPuSig,11,5,13,7,);
B(B_VARIN,,MDhoWiPumpSigOC,10,6,12,8,);
B(B_COMMENT,,release function valve for 4T-Y32/33,1,1,27,2,);
B(B_VARIN,,MDstabWPumpSigOC,9,7,11,9,);
B(B_F,NE_R,,15,17,20,21,);
B(B_VAROUT,,LX4T_Y39,27,10,29,12,);
B(B_F,@XOR-4,,22,9,27,15,);
L(20,12,20,15);
L(14,5,15,5);
L(13,6,15,6);
L(12,7,15,7);
L(14,5,14,11);
L(14,11,15,11);
L(13,6,13,15);
L(13,15,15,15);
L(14,12,14,24);
L(14,24,15,24);
L(14,16,15,16);
L(14,12,15,12);
L(20,23,22,23);
L(11,8,15,8);
L(14,20,15,20);
L(20,11,22,11);
L(20,12,22,12);
L(22,14,22,23);
L(21,13,22,13);
L(21,13,21,19);
L(20,19,21,19);
L(11,8,11,23);
L(11,23,15,23);
L(12,19,15,19);
L(12,7,12,19);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_COMMENT,,power stage 4T-Y33,1,1,27,2,);
B(B_FB,PowerStage,PowerStage3,11,4,20,12,);
B(B_VARIN,,0.0,9,7,11,9,);
B(B_VARIN,,CW4T_Y33MinCur,9,9,11,11,);
B(B_VARIN,,CW4T_Y33MaxCur,9,10,11,12,);
B(B_VAROUT,,QW4T_Y33,20,5,22,7,);
B(B_VARIN,,LDY32_Y33PumpSig,9,6,11,8,);
B(B_VARIN,,LX4T_Y39,9,5,11,7,);
B(B_VARIN,,100.0,9,8,11,10,);
B(B_COMMENT,,* z2 cylinder outø^* grab lock cyl outø^* hose winch lifting ø^* stabilization winch lifting OC ,29,1,42,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_COMMENT,,power stage 4T-Y32,1,1,27,2,);
B(B_FB,PowerStage,PowerStage4,11,4,20,12,);
B(B_VARIN,,0.0,9,7,11,9,);
B(B_VARIN,,CW4T_Y32MinCur,9,9,11,11,);
B(B_VARIN,,CW4T_Y32MaxCur,9,10,11,12,);
B(B_VAROUT,,QW4T_Y32,20,5,22,7,);
B(B_VARIN,,LDY32_Y33PumpSig,9,6,11,8,);
B(B_VARIN,,LX4T_Y39,9,5,11,7,);
B(B_VARIN,,-100.0,9,8,11,10,);
B(B_COMMENT,,* z2 cylinder Inø^* grab lock cyl inø^* hose winch loweringø^* stabilization winch lowering OC,29,1,42,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_VARIN,,MDhoWiPresSigOC,9,4,11,6,);
B(B_COMMENT,,analog signal pressure control 4T-Y39,1,1,27,2,);
B(B_F,SigMax4,,11,3,18,9,);
B(B_VAROUT,,LDY39PressSig,18,4,20,6,);
B(B_VARIN,,MDz2PressSignal,9,5,11,7,);
B(B_VARIN,,MDgrLockCylPrSig,9,6,11,8,);
B(B_VARIN,,MDstabWPresSigOC,9,7,11,9,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_COMMENT,,power stage 4T-Y39 (pressure control) ,1,1,27,2,);
B(B_FB,PowerStage,PowerStage5,11,4,20,12,);
B(B_VARIN,,0.0,9,7,11,9,);
B(B_VARIN,,CW4T_Y39MinCur,9,9,11,11,);
B(B_VARIN,,CW4T_Y39MaxCur,9,10,11,12,);
B(B_VAROUT,,QW4T_Y39,20,5,22,7,);
B(B_VARIN,,LDY39PressSig,9,6,11,8,);
B(B_VARIN,,LX4T_Y39,9,5,11,7,);
B(B_VARIN,,100.0,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 22 ;
        NETWORK_BODY
B(B_F,NE_R,,14,9,19,13,);
B(B_F,NE_R,,14,13,19,17,);
B(B_F,NE_R,,14,17,19,21,);
B(B_F,SigMax4,,14,3,21,9,);
B(B_VAROUT,,LDY20_Y21PumpSig,21,4,23,6,);
B(B_VARIN,,0.0,11,19,13,21,);
B(B_F,@XOR-3,,20,9,25,14,);
B(B_VAROUT,,QX4T_Y23,25,10,27,12,);
B(B_COMMENT,,release function valve for 4T-Y20/21,1,1,27,2,);
B(B_VARIN,,MDz4PumpSignal,11,4,13,6,);
B(B_VARIN,,MDgrHoAdCylPuSig,10,5,12,7,);
B(B_VARIN,,MDgrAd2PumpSig,9,6,11,8,);
L(19,12,19,15);
L(13,5,14,5);
L(12,6,14,6);
L(11,7,14,7);
L(14,7,14,8);
L(13,5,13,11);
L(13,11,14,11);
L(12,6,12,15);
L(12,15,14,15);
L(11,7,11,19);
L(11,19,14,19);
L(13,12,13,20);
L(13,20,14,20);
L(13,16,14,16);
L(13,12,14,12);
L(19,11,20,11);
L(19,12,20,12);
L(20,13,20,19);
L(19,19,20,19);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_COMMENT,,power stage 4T-Y21,1,1,27,2,);
B(B_FB,PowerStage,PowerStage6,11,4,20,12,);
B(B_VARIN,,0.0,9,7,11,9,);
B(B_VARIN,,QX4T_Y23,9,5,11,7,);
B(B_VAROUT,,QW4T_Y21,20,5,22,7,);
B(B_VARIN,,CW4T_Y21MaxCur,9,10,11,12,);
B(B_VARIN,,CW4T_Y21MinCur,9,9,11,11,);
B(B_VARIN,,100.0,9,8,11,10,);
B(B_VARIN,,LDY20_Y21PumpSig,9,6,11,8,);
B(B_COMMENT,,* z4 cylinder inø^* hose adjust cylinder in,29,1,42,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_COMMENT,,power stage 4T-Y20,1,1,27,2,);
B(B_FB,PowerStage,PowerStage7,11,4,20,12,);
B(B_VARIN,,0.0,9,7,11,9,);
B(B_VARIN,,LDY20_Y21PumpSig,9,6,11,8,);
B(B_VARIN,,QX4T_Y23,9,5,11,7,);
B(B_VAROUT,,QW4T_Y20,20,5,22,7,);
B(B_VARIN,,CW4T_Y20MinCur,9,9,11,11,);
B(B_VARIN,,CW4T_Y20MaxCur,9,10,11,12,);
B(B_VARIN,,-100.0,9,8,11,10,);
B(B_COMMENT,,* z4 cylinder outø^* hose adjust cylinder out,29,1,42,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 22 ;
        NETWORK_BODY
B(B_F,NE_R,,14,9,19,13,);
B(B_F,NE_R,,14,13,19,17,);
B(B_F,NE_R,,14,17,19,21,);
B(B_F,SigMax4,,14,3,21,9,);
B(B_VAROUT,,LDY91_Y92PumpSig,21,4,23,6,);
B(B_VARIN,,0.0,11,19,13,21,);
B(B_F,@XOR-3,,20,9,25,14,);
B(B_VAROUT,,QX4T_Y90,25,10,27,12,);
B(B_COMMENT,,release function valve for 4T-Y91/92,1,1,27,2,);
B(B_VARIN,,MDz3PumpSignal,11,4,13,6,);
B(B_VARIN,,MDgrSlewPuSigB,10,5,12,7,);
B(B_VARIN,,MDgrSlewPuSig,9,6,11,8,);
L(19,12,19,15);
L(13,5,14,5);
L(12,6,14,6);
L(11,7,14,7);
L(14,7,14,8);
L(13,5,13,11);
L(13,11,14,11);
L(12,6,12,15);
L(12,15,14,15);
L(11,7,11,19);
L(11,19,14,19);
L(13,12,13,20);
L(13,20,14,20);
L(13,16,14,16);
L(13,12,14,12);
L(19,11,20,11);
L(19,12,20,12);
L(20,13,20,19);
L(19,19,20,19);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_COMMENT,,power stage 4T-Y91,1,1,27,2,);
B(B_FB,PowerStage,PowerStage8,11,4,20,12,);
B(B_VARIN,,0.0,9,7,11,9,);
B(B_VARIN,,LDY91_Y92PumpSig,9,6,11,8,);
B(B_VARIN,,QX4T_Y90,9,5,11,7,);
B(B_VAROUT,,QW4T_Y91,20,5,22,7,);
B(B_VARIN,,CW4T_Y91MinCur,9,9,11,11,);
B(B_VARIN,,CW4T_Y91MaxCur,9,10,11,12,);
B(B_VARIN,,-100.0,9,8,11,10,);
B(B_COMMENT,,* z3 cylinder outø^* grab slewing left,29,1,42,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_COMMENT,,power stage 4T-Y92,1,1,27,2,);
B(B_FB,PowerStage,PowerStage9,11,4,20,12,);
B(B_VARIN,,0.0,9,7,11,9,);
B(B_VARIN,,LDY91_Y92PumpSig,9,6,11,8,);
B(B_VARIN,,QX4T_Y90,9,5,11,7,);
B(B_VAROUT,,QW4T_Y92,20,5,22,7,);
B(B_VARIN,,CW4T_Y92MinCur,9,9,11,11,);
B(B_VARIN,,CW4T_Y92MaxCur,9,10,11,12,);
B(B_VARIN,,100.0,9,8,11,10,);
B(B_COMMENT,,* z3 cylinder Inø^* grab slewing right,29,1,42,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_VARIN,,MDz17PumpSignal,9,4,11,6,);
B(B_F,NE_R,,11,3,16,7,);
B(B_VARIN,,0.0,9,5,11,7,);
B(B_VAROUT,,QX4T_Y25,16,4,18,6,);
B(B_COMMENT,,release function valve for 4T-Y26/27,1,1,27,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_COMMENT,,power stage 4T-Y27,1,1,27,2,);
B(B_FB,PowerStage,PowerStage10,11,4,20,12,);
B(B_VARIN,,0.0,9,7,11,9,);
B(B_VARIN,,MDz17PumpSignal,9,6,11,8,);
B(B_VARIN,,QX4T_Y25,9,5,11,7,);
B(B_VAROUT,,QW4T_Y27,20,5,22,7,);
B(B_VARIN,,CW4T_Y27MinCur,9,9,11,11,);
B(B_VARIN,,CW4T_Y27MaxCur,9,10,11,12,);
B(B_VARIN,,100.0,9,8,11,10,);
B(B_COMMENT,,* z17 cylinder out,29,1,42,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_COMMENT,,power stage 4T-Y26,1,1,27,2,);
B(B_FB,PowerStage,PowerStage11,11,4,20,12,);
B(B_VARIN,,0.0,9,7,11,9,);
B(B_VARIN,,MDz17PumpSignal,9,6,11,8,);
B(B_VARIN,,QX4T_Y25,9,5,11,7,);
B(B_VAROUT,,QW4T_Y26,20,5,22,7,);
B(B_VARIN,,CW4T_Y26MinCur,9,9,11,11,);
B(B_VARIN,,CW4T_Y26MaxCur,9,10,11,12,);
B(B_VARIN,,-100.0,9,8,11,10,);
B(B_COMMENT,,* z17 cylinder In,29,1,42,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_VARIN,,MDplGuiPumpSig,9,4,11,6,);
B(B_F,NE_R,,11,3,16,7,);
B(B_VARIN,,0.0,9,5,11,7,);
B(B_VAROUT,,QX4T_Y24,16,4,18,6,);
B(B_COMMENT,,release function valve for 4T-Y28/29,1,1,27,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_COMMENT,,power stage 4T-Y29,1,1,27,2,);
B(B_FB,PowerStage,PowerStage12,11,4,20,12,);
B(B_VARIN,,0.0,9,7,11,9,);
B(B_VARIN,,MDplGuiPumpSig,9,6,11,8,);
B(B_VARIN,,QX4T_Y24,9,5,11,7,);
B(B_VAROUT,,QW4T_Y29,20,5,22,7,);
B(B_VARIN,,CW4T_Y29MinCur,9,9,11,11,);
B(B_VARIN,,CW4T_Y29MaxCur,9,10,11,12,);
B(B_VARIN,,100.0,9,8,11,10,);
B(B_COMMENT,,* pile guide cylinder out (open) ,29,1,42,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_COMMENT,,power stage 4T-Y28,1,1,27,2,);
B(B_FB,PowerStage,PowerStage13,11,4,20,12,);
B(B_VARIN,,0.0,9,7,11,9,);
B(B_VARIN,,MDplGuiPumpSig,9,6,11,8,);
B(B_VARIN,,QX4T_Y24,9,5,11,7,);
B(B_VAROUT,,QW4T_Y28,20,5,22,7,);
B(B_VARIN,,CW4T_Y28MinCur,9,9,11,11,);
B(B_VARIN,,CW4T_Y28MaxCur,9,10,11,12,);
B(B_VARIN,,-100.0,9,8,11,10,);
B(B_COMMENT,,* pile guide cylinder In (close),29,1,42,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_COMMENT,,set memory for external LUDV section active ,1,1,27,2,);
B(B_VARIN,,QX4T_Y19,9,4,11,6,);
B(B_VARIN,,LX4T_Y39,9,5,11,7,);
B(B_VARIN,,QX4T_Y23,9,6,11,8,);
B(B_VARIN,,QX4T_Y90,9,7,11,9,);
B(B_VARIN,,QX4T_Y25,9,8,11,10,);
B(B_VARIN,,QX4T_Y24,9,9,11,11,);
B(B_F,@OR-6,,11,3,16,11,);
B(B_VAROUT,,MXextLudvSecAct,16,4,18,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 18 ;
        NETWORK_BODY
B(B_F,NE_R,,14,9,19,13,);
B(B_F,NE_R,,14,13,19,17,);
B(B_F,SigMax4,,14,3,21,9,);
B(B_VAROUT,,LDY30_Y31PumpSig,21,4,23,6,);
B(B_VAROUT,,LX4T_Y8,25,10,27,12,);
B(B_COMMENT,,release function valve for 4T-Y30/31,1,1,27,2,);
B(B_VARIN,,MDstabWPumpSigCC,11,4,13,6,);
B(B_VARIN,,MDhoWiPumpSigCC,10,5,12,7,);
B(B_VARIN,,0.0,11,15,13,17,);
B(B_F,@XOR-2,,20,9,25,13,);
L(19,12,19,15);
L(13,5,14,5);
L(12,6,14,6);
L(13,5,13,11);
L(13,11,14,11);
L(12,6,12,15);
L(12,15,14,15);
L(13,12,13,16);
L(13,12,14,12);
L(19,12,20,12);
L(14,6,14,8);
L(13,16,14,16);
L(19,11,20,11);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_COMMENT,,power stage 4T-Y30,1,1,27,2,);
B(B_FB,PowerStage,PowerStage14,11,4,20,12,);
B(B_VARIN,,0.0,9,7,11,9,);
B(B_VARIN,,LDY30_Y31PumpSig,9,6,11,8,);
B(B_VARIN,,LX4T_Y8,9,5,11,7,);
B(B_VAROUT,,QW4T_Y30,20,5,22,7,);
B(B_VARIN,,CW4T_Y30MinCur,9,9,11,11,);
B(B_VARIN,,CW4T_Y30MaxCur,9,10,11,12,);
B(B_VARIN,,100.0,9,8,11,10,);
B(B_COMMENT,,* stab winch lifting CCø^* hose winch lifting CC,29,1,42,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_COMMENT,,power stage 4T-Y31,1,1,27,2,);
B(B_FB,PowerStage,PowerStage15,11,4,20,12,);
B(B_VARIN,,0.0,9,7,11,9,);
B(B_VARIN,,LDY30_Y31PumpSig,9,6,11,8,);
B(B_VARIN,,LX4T_Y8,9,5,11,7,);
B(B_VAROUT,,QW4T_Y31,20,5,22,7,);
B(B_VARIN,,CW4T_Y31MinCur,9,9,11,11,);
B(B_VARIN,,CW4T_Y31MaxCur,9,10,11,12,);
B(B_VARIN,,-100.0,9,8,11,10,);
B(B_COMMENT,,* stab winch lowering CCø^* hose winch lowering CC,29,1,42,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_VARIN,,MDstabWPresSigCC,9,4,11,6,);
B(B_COMMENT,,analog signal pressure control 4T-Y8,1,1,27,2,);
B(B_F,SigMin4,,11,3,18,9,);
B(B_VAROUT,,LDY8PressSig,18,4,20,6,);
B(B_VARIN,,MDhoWiPresSigCC,9,5,11,7,);
L(11,6,11,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_COMMENT,,power stage 4T-Y8 (pressure control) ,1,1,27,2,);
B(B_FB,PowerStage,PowerStage16,11,4,20,12,);
B(B_VARIN,,0.0,9,7,11,9,);
B(B_VARIN,,CW4T_Y8MinCur,9,9,11,11,);
B(B_VARIN,,CW4T_Y8MaxCur,9,10,11,12,);
B(B_VAROUT,,QW4T_Y8,20,5,22,7,);
B(B_VARIN,,LDY8PressSig,9,6,11,8,);
B(B_VARIN,,LX4T_Y8,9,5,11,7,);
B(B_VARIN,,100.0,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 26 ;
        NETWORK_BODY
B(B_F,SigMax4,,15,3,22,9,);
B(B_VAROUT,,LDludvSecP2Sig,22,4,24,6,);
B(B_COMMENT,,release function valve for 4V-Y30/31 (LUDV section P2) ,1,1,27,2,);
B(B_VARIN,,MDhamPump2Signal,12,4,14,6,);
B(B_VARIN,,MDvibPump2Signal,11,5,13,7,);
B(B_VARIN,,MDddPump2Signal,10,6,12,8,);
B(B_VARIN,,MDgrbPump2Signal,9,7,11,9,);
B(B_VAROUT,,MXludvSecP2activ,27,10,29,12,);
B(B_F,NE_R,,15,9,20,13,);
B(B_F,NE_R,,15,13,20,17,);
B(B_F,NE_R,,15,21,20,25,);
B(B_VARIN,,0.0,12,23,14,25,);
B(B_F,NE_R,,15,17,20,21,);
B(B_F,@XOR-4,,22,9,27,15,);
L(14,5,15,5);
L(13,6,15,6);
L(12,7,15,7);
L(11,8,15,8);
L(20,12,20,15);
L(14,11,15,11);
L(13,15,15,15);
L(14,12,14,24);
L(14,24,15,24);
L(14,16,15,16);
L(14,12,15,12);
L(20,23,22,23);
L(14,20,15,20);
L(20,11,22,11);
L(20,12,22,12);
L(22,14,22,23);
L(21,13,22,13);
L(21,13,21,19);
L(20,19,21,19);
L(11,23,15,23);
L(12,19,15,19);
L(11,8,11,23);
L(12,7,12,19);
L(13,6,13,15);
L(14,5,14,11);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_COMMENT,,power stage ludv working section P2 (B-Side) 4Y-Y30,1,1,27,2,);
B(B_FB,PowerStage,PowerStage17,11,4,20,12,);
B(B_VARIN,,0.0,9,7,11,9,);
B(B_VARIN,,100.0,9,8,11,10,);
B(B_VARIN,,CWp2MinCurValveB,9,9,11,11,);
B(B_VARIN,,CWp2MaxCurValveB,9,10,11,12,);
B(B_VAROUT,,QW4V_Y30,20,5,22,7,);
B(B_VARIN,,LDludvSecP2Sig,9,6,11,8,);
B(B_VARIN,,MXludvSecP2activ,9,5,11,7,);
B(B_COMMENT,,* hammerø^* vibrator ø^* drilling drive right sideø^* grab open ,33,1,47,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_COMMENT,,power stage ludv working section P2 (A-Side) 4Y-Y31,1,1,27,2,);
B(B_FB,PowerStage,PowerStage18,11,4,20,12,);
B(B_VARIN,,0.0,9,7,11,9,);
B(B_VARIN,,-100.0,9,8,11,10,);
B(B_VARIN,,LDludvSecP2Sig,9,6,11,8,);
B(B_VARIN,,MXludvSecP2activ,9,5,11,7,);
B(B_VARIN,,CWp2MinCurValveA,9,9,11,11,);
B(B_VARIN,,CWp2MaxCurValveA,9,10,11,12,);
B(B_VAROUT,,QW4V_Y31,20,5,22,7,);
B(B_COMMENT,,* drilling drive left sideø^* grab close ,33,1,47,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_VARIN,,MXuseLudvPump3,9,4,11,6,);
B(B_VARIN,,MXuseLudvPump4,9,5,11,7,);
B(B_F,@OR-2,,11,3,16,7,);
B(B_COMMENT,,exit program in case of pump 3 or 4 (same output) ,1,1,27,2,);
B(B_RETURN,,,16,4,18,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 26 ;
        NETWORK_BODY
B(B_F,SigMax4,,15,3,22,9,);
B(B_VAROUT,,LDludvSecP1Sig,22,4,24,6,);
B(B_COMMENT,,release function valve for 4V-Y32/33 (LUDV section P1) ,1,1,27,2,);
B(B_VARIN,,MDhamPump1Signal,12,4,14,6,);
B(B_VARIN,,MDvibPump1Signal,11,5,13,7,);
B(B_VARIN,,MDddPump1Signal,10,6,12,8,);
B(B_VARIN,,MDgrbPump1Signal,9,7,11,9,);
B(B_VAROUT,,MXludvSecP1activ,27,10,29,12,);
B(B_F,NE_R,,15,9,20,13,);
B(B_F,NE_R,,15,13,20,17,);
B(B_F,NE_R,,15,21,20,25,);
B(B_VARIN,,0.0,12,23,14,25,);
B(B_F,NE_R,,15,17,20,21,);
B(B_F,@XOR-4,,22,9,27,15,);
L(14,5,15,5);
L(13,6,15,6);
L(12,7,15,7);
L(11,8,15,8);
L(20,12,20,15);
L(14,11,15,11);
L(13,15,15,15);
L(14,12,14,24);
L(14,24,15,24);
L(14,16,15,16);
L(14,12,15,12);
L(20,23,22,23);
L(14,20,15,20);
L(20,11,22,11);
L(20,12,22,12);
L(22,14,22,23);
L(21,13,22,13);
L(21,13,21,19);
L(20,19,21,19);
L(11,23,15,23);
L(12,19,15,19);
L(11,8,11,23);
L(12,7,12,19);
L(13,6,13,15);
L(14,5,14,11);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_COMMENT,,power stage ludv working section P1(B-Side) 4Y-Y32,1,1,27,2,);
B(B_FB,PowerStage,PowerStage19,11,4,20,12,);
B(B_VARIN,,0.0,9,7,11,9,);
B(B_VARIN,,100.0,9,8,11,10,);
B(B_VARIN,,CWp1MinCurValveB,9,9,11,11,);
B(B_VARIN,,CWp1MaxCurValveB,9,10,11,12,);
B(B_VAROUT,,QW4V_Y32,20,5,22,7,);
B(B_VARIN,,LDludvSecP1Sig,9,6,11,8,);
B(B_VARIN,,MXludvSecP1activ,9,5,11,7,);
B(B_COMMENT,,* hammerø^* vibrator ø^* drilling drive right sideø^* grab open ,33,1,47,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_COMMENT,,power stage ludv working section P1 (A-Side) 4Y-Y33,1,1,27,2,);
B(B_FB,PowerStage,PowerStage20,11,4,20,12,);
B(B_VARIN,,0.0,9,7,11,9,);
B(B_VARIN,,-100.0,9,8,11,10,);
B(B_VARIN,,LDludvSecP1Sig,9,6,11,8,);
B(B_VARIN,,MXludvSecP1activ,9,5,11,7,);
B(B_VARIN,,CWp1MinCurValveA,9,9,11,11,);
B(B_VARIN,,CWp1MaxCurValveA,9,10,11,12,);
B(B_VAROUT,,QW4V_Y33,20,5,22,7,);
B(B_COMMENT,,* drilling drive left sideø^* grab close ,33,1,47,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,exit add output program,1,1,27,2,);
B(B_VARIN,,TRUE,9,3,11,5,);
B(B_RETURN,,,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL := init: ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,init add output program,1,1,27,2,);
B(B_VARIN,,TRUE,9,3,11,5,);
B(B_VAROUT,,LXinitOk,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value minimum current 4T-Y16 (valve),1,1,27,2,);
B(B_FB,CorrValue_UInt,CorrValue_UInt1,11,4,23,10,);
B(B_VARIN,,400,9,5,11,7,);
B(B_VARIN,,0,9,6,11,8,);
B(B_VARIN,,600,9,7,11,9,);
B(B_VARIN,,CW4T_Y16MinCur,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value minimum current 4T-Y17 (valve),1,1,27,2,);
B(B_FB,CorrValue_UInt,CorrValue_UInt2,11,4,23,10,);
B(B_VARIN,,400,9,5,11,7,);
B(B_VARIN,,0,9,6,11,8,);
B(B_VARIN,,600,9,7,11,9,);
B(B_VARIN,,CW4T_Y17MinCur,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value maximum current 4T-Y16 (valve),1,1,27,2,);
B(B_FB,CorrValue_UInt,CorrValue_UInt3,11,4,23,10,);
B(B_VARIN,,740,9,5,11,7,);
B(B_VARIN,,0,9,6,11,8,);
B(B_VARIN,,1000,9,7,11,9,);
B(B_VARIN,,CW4T_Y16MaxCur,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value maximum current 4T-Y17 (valve),1,1,27,2,);
B(B_FB,CorrValue_UInt,CorrValue_UInt4,11,4,23,10,);
B(B_VARIN,,740,9,5,11,7,);
B(B_VARIN,,0,9,6,11,8,);
B(B_VARIN,,1000,9,7,11,9,);
B(B_VARIN,,CW4T_Y17MaxCur,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value minimum current 4T-Y33 (valve),1,1,27,2,);
B(B_FB,CorrValue_UInt,CorrValue_UInt5,11,4,23,10,);
B(B_VARIN,,400,9,5,11,7,);
B(B_VARIN,,0,9,6,11,8,);
B(B_VARIN,,600,9,7,11,9,);
B(B_VARIN,,CW4T_Y33MinCur,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value minimum current 4T-Y32 (valve),1,1,27,2,);
B(B_FB,CorrValue_UInt,CorrValue_UInt6,11,4,23,10,);
B(B_VARIN,,400,9,5,11,7,);
B(B_VARIN,,0,9,6,11,8,);
B(B_VARIN,,600,9,7,11,9,);
B(B_VARIN,,CW4T_Y32MinCur,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value maximum current 4T-Y33 (valve),1,1,27,2,);
B(B_FB,CorrValue_UInt,CorrValue_UInt7,11,4,23,10,);
B(B_VARIN,,740,9,5,11,7,);
B(B_VARIN,,0,9,6,11,8,);
B(B_VARIN,,1000,9,7,11,9,);
B(B_VARIN,,CW4T_Y33MaxCur,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value maximum current 4T-Y32 (valve),1,1,27,2,);
B(B_FB,CorrValue_UInt,CorrValue_UInt8,11,4,23,10,);
B(B_VARIN,,740,9,5,11,7,);
B(B_VARIN,,0,9,6,11,8,);
B(B_VARIN,,1000,9,7,11,9,);
B(B_VARIN,,CW4T_Y32MaxCur,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value minimum current 4T-Y20 (valve),1,1,27,2,);
B(B_FB,CorrValue_UInt,CorrValue_UInt9,11,4,23,10,);
B(B_VARIN,,400,9,5,11,7,);
B(B_VARIN,,0,9,6,11,8,);
B(B_VARIN,,600,9,7,11,9,);
B(B_VARIN,,CW4T_Y20MinCur,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value minimum current 4T-Y21 (valve),1,1,27,2,);
B(B_FB,CorrValue_UInt,CorrValue_UInt10,11,4,23,10,);
B(B_VARIN,,400,9,5,11,7,);
B(B_VARIN,,0,9,6,11,8,);
B(B_VARIN,,600,9,7,11,9,);
B(B_VARIN,,CW4T_Y21MinCur,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value maximum current 4T-Y20 (valve),1,1,27,2,);
B(B_FB,CorrValue_UInt,CorrValue_UInt11,11,4,23,10,);
B(B_VARIN,,740,9,5,11,7,);
B(B_VARIN,,0,9,6,11,8,);
B(B_VARIN,,1000,9,7,11,9,);
B(B_VARIN,,CW4T_Y20MaxCur,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value maximum current 4T-Y21 (valve),1,1,27,2,);
B(B_FB,CorrValue_UInt,CorrValue_UInt12,11,4,23,10,);
B(B_VARIN,,740,9,5,11,7,);
B(B_VARIN,,0,9,6,11,8,);
B(B_VARIN,,1000,9,7,11,9,);
B(B_VARIN,,CW4T_Y21MaxCur,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value minimum current 4T-Y92 (valve),1,1,27,2,);
B(B_FB,CorrValue_UInt,CorrValue_UInt13,11,4,23,10,);
B(B_VARIN,,400,9,5,11,7,);
B(B_VARIN,,0,9,6,11,8,);
B(B_VARIN,,600,9,7,11,9,);
B(B_VARIN,,CW4T_Y92MinCur,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value minimum current 4T-Y91 (valve),1,1,27,2,);
B(B_FB,CorrValue_UInt,CorrValue_UInt14,11,4,23,10,);
B(B_VARIN,,400,9,5,11,7,);
B(B_VARIN,,0,9,6,11,8,);
B(B_VARIN,,600,9,7,11,9,);
B(B_VARIN,,CW4T_Y91MinCur,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value maximum current 4T-Y92 (valve),1,1,27,2,);
B(B_FB,CorrValue_UInt,CorrValue_UInt15,11,4,23,10,);
B(B_VARIN,,740,9,5,11,7,);
B(B_VARIN,,0,9,6,11,8,);
B(B_VARIN,,1000,9,7,11,9,);
B(B_VARIN,,CW4T_Y92MaxCur,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value maximum current 4T-Y91 (valve),1,1,27,2,);
B(B_FB,CorrValue_UInt,CorrValue_UInt16,11,4,23,10,);
B(B_VARIN,,740,9,5,11,7,);
B(B_VARIN,,0,9,6,11,8,);
B(B_VARIN,,1000,9,7,11,9,);
B(B_VARIN,,CW4T_Y91MaxCur,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value minimum current 4T-Y26 (valve),1,1,27,2,);
B(B_FB,CorrValue_UInt,CorrValue_UInt17,11,4,23,10,);
B(B_VARIN,,400,9,5,11,7,);
B(B_VARIN,,0,9,6,11,8,);
B(B_VARIN,,600,9,7,11,9,);
B(B_VARIN,,CW4T_Y26MinCur,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value minimum current 4T-Y27 (valve),1,1,27,2,);
B(B_FB,CorrValue_UInt,CorrValue_UInt18,11,4,23,10,);
B(B_VARIN,,400,9,5,11,7,);
B(B_VARIN,,0,9,6,11,8,);
B(B_VARIN,,600,9,7,11,9,);
B(B_VARIN,,CW4T_Y27MinCur,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value maximum current 4T-Y26 (valve),1,1,27,2,);
B(B_FB,CorrValue_UInt,CorrValue_UInt19,11,4,23,10,);
B(B_VARIN,,740,9,5,11,7,);
B(B_VARIN,,0,9,6,11,8,);
B(B_VARIN,,1000,9,7,11,9,);
B(B_VARIN,,CW4T_Y26MaxCur,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value maximum current 4T-Y27 (valve),1,1,27,2,);
B(B_FB,CorrValue_UInt,CorrValue_UInt20,11,4,23,10,);
B(B_VARIN,,740,9,5,11,7,);
B(B_VARIN,,0,9,6,11,8,);
B(B_VARIN,,1000,9,7,11,9,);
B(B_VARIN,,CW4T_Y27MaxCur,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value minimum current 4T-Y28 (valve),1,1,27,2,);
B(B_FB,CorrValue_UInt,CorrValue_UInt21,11,4,23,10,);
B(B_VARIN,,400,9,5,11,7,);
B(B_VARIN,,0,9,6,11,8,);
B(B_VARIN,,600,9,7,11,9,);
B(B_VARIN,,CW4T_Y28MinCur,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value minimum current 4T-Y29 (valve),1,1,27,2,);
B(B_FB,CorrValue_UInt,CorrValue_UInt22,11,4,23,10,);
B(B_VARIN,,400,9,5,11,7,);
B(B_VARIN,,0,9,6,11,8,);
B(B_VARIN,,600,9,7,11,9,);
B(B_VARIN,,CW4T_Y29MinCur,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value maximum current 4T-Y28 (valve),1,1,27,2,);
B(B_FB,CorrValue_UInt,CorrValue_UInt23,11,4,23,10,);
B(B_VARIN,,740,9,5,11,7,);
B(B_VARIN,,0,9,6,11,8,);
B(B_VARIN,,1000,9,7,11,9,);
B(B_VARIN,,CW4T_Y28MaxCur,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value maximum current 4T-Y29 (valve),1,1,27,2,);
B(B_FB,CorrValue_UInt,CorrValue_UInt24,11,4,23,10,);
B(B_VARIN,,740,9,5,11,7,);
B(B_VARIN,,0,9,6,11,8,);
B(B_VARIN,,1000,9,7,11,9,);
B(B_VARIN,,CW4T_Y29MaxCur,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value minimum current 4T-Y39 (valve),1,1,27,2,);
B(B_FB,CorrValue_UInt,CorrValue_UInt25,11,4,23,10,);
B(B_VARIN,,100,9,5,11,7,);
B(B_VARIN,,0,9,6,11,8,);
B(B_VARIN,,600,9,7,11,9,);
B(B_VARIN,,CW4T_Y39MinCur,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value maximum pressure current 4T-Y39 (valve),1,1,27,2,);
B(B_FB,CorrValue_UInt,CorrValue_UInt26,11,4,23,10,);
B(B_VARIN,,800,9,5,11,7,);
B(B_VARIN,,0,9,6,11,8,);
B(B_VARIN,,1000,9,7,11,9,);
B(B_VARIN,,CW4T_Y39MaxCur,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value minimum current 4T-Y30 (valve),1,1,27,2,);
B(B_FB,CorrValue_UInt,CorrValue_UInt27,11,4,23,10,);
B(B_VARIN,,CW4T_Y30MinCur,9,8,11,10,);
B(B_VARIN,,200,9,5,11,7,);
B(B_VARIN,,0,9,6,11,8,);
B(B_VARIN,,300,9,7,11,9,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value maximum current 4T-Y30 (valve),1,1,27,2,);
B(B_FB,CorrValue_UInt,CorrValue_UInt28,11,4,23,10,);
B(B_VARIN,,CW4T_Y30MaxCur,9,8,11,10,);
B(B_VARIN,,600,9,5,11,7,);
B(B_VARIN,,300,9,6,11,8,);
B(B_VARIN,,1000,9,7,11,9,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value minimum current 4T-Y31 (valve),1,1,27,2,);
B(B_FB,CorrValue_UInt,CorrValue_UInt29,11,4,23,10,);
B(B_VARIN,,CW4T_Y31MinCur,9,8,11,10,);
B(B_VARIN,,200,9,5,11,7,);
B(B_VARIN,,0,9,6,11,8,);
B(B_VARIN,,300,9,7,11,9,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value maximum current 4T-Y31 (valve),1,1,27,2,);
B(B_FB,CorrValue_UInt,CorrValue_UInt30,11,4,23,10,);
B(B_VARIN,,CW4T_Y31MaxCur,9,8,11,10,);
B(B_VARIN,,400,9,5,11,7,);
B(B_VARIN,,300,9,6,11,8,);
B(B_VARIN,,1000,9,7,11,9,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value minimum current 4T-Y8 (valve),1,1,27,2,);
B(B_FB,CorrValue_UInt,CorrValue_UInt31,11,4,23,10,);
B(B_VARIN,,CW4T_Y8MinCur,9,8,11,10,);
B(B_VARIN,,150,9,5,11,7,);
B(B_VARIN,,0,9,6,11,8,);
B(B_VARIN,,300,9,7,11,9,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value maximum current 4T-Y8 (valve),1,1,27,2,);
B(B_FB,CorrValue_UInt,CorrValue_UInt32,11,4,23,10,);
B(B_VARIN,,CW4T_Y8MaxCur,9,8,11,10,);
B(B_VARIN,,850,9,5,11,7,);
B(B_VARIN,,300,9,6,11,8,);
B(B_VARIN,,1000,9,7,11,9,);
        END_NETWORK_BODY
    END_NET_WORK
END_BODY
END_PROGRAM

PROGRAM ADpassWinchV030
(*name of author: Manfred Schapler
version: 1.0
date: 04/97
modification:*)
(*name of author: Manfred Schapler
date: 04/97
modification:*)
	VAR_EXTERNAL 
		ITXpassWinch: BOOL:=FALSE;
			(*preselection additional/passenger winch *)
		IXentrySwiClosed: BOOL:=FALSE;
			(*entry switch closed*)
		IXadPersSlackRop: BOOL:=FALSE;
			(*add personal winch: slack rope switch*)
		IXadPersCrankMon: BOOL:=FALSE;
			(*add personal winch: crank emergency drop mounted/derrick lg upper limit switch normal operating position for derrick *)
		IXaddUpperLimOk: BOOL:=FALSE;
			(*add: additional/passenger winch upper limit switch  o.k.*)
		IXaddLowerLimOk: BOOL:=FALSE;
			(*add: additional/passenger winch lower limit switch  o.k.*)
		QTXpassWinch: BOOL:=FALSE;
			(*enable additional/passenger winch *)
		QXadPasWinchLift: BOOL:=FALSE;
			(*add: passenger winch lifting*)
		QXadPasWinchLow: BOOL:=FALSE;
			(*add: passenger winch lowering*)
		QXaddPersWinBrak: BOOL:=FALSE;
			(*add: aux. winch brake / personal winch brake*)
		MXstopAllFunctio: BOOL:=FALSE;
			(*stop all excavator functions*)
		MXpwGlobalStopUp: BOOL:=FALSE;
			(*passenger winch global stop up*)
		MXpwGlobalStopDn: BOOL:=FALSE;
			(*passenger winch global stop down*)
		MXpwAnalSigPos: BOOL:=FALSE;
			(*passenger winch anlog signal positive*)
		MXpwAnalSigNeg: BOOL:=FALSE;
			(*passenger winch anlog signal negativ*)
		MXpwSlackRopeOk: BOOL:=FALSE;
			(*passenger winch slack rope o.k.*)
		MXpassWinchPres: BOOL:=FALSE;
			(*preselection passenger winch *)
		MXpassWinchActiv: BOOL:=FALSE;
			(*passenger winch active*)
		MXpwUpLimOk: BOOL:=FALSE;
			(*passenger winch: upper limit switch o.k.*)
		MXpwLoLimOk: BOOL:=FALSE;
			(*passenger winch: lower limit switch o.k.*)
		MXpwEnJoySig: BOOL:=FALSE;
			(*passenger winch enable joystick signal *)
		MXlmlStop: BOOL:=FALSE;
			(*lml stop*)
		MXlimitSwBridged: BOOL:=FALSE;
			(*X23 limit switches bridged for assembly operation*)
		MXrelPassTwiPump: BOOL:=FALSE;
			(*release pump for passenger transportation winch*)
		MXhgSpecialLift: BOOL:=FALSE;
			(*hg special sensitive lifting function active*)
		MDpwJoySignal: REAL:=0.0;
			(*passenger winch joy stick signal*)
		MXlmlBridged: BOOL:=FALSE;
			(*lml bridged*)
	END_VAR
	VAR_EXTERNAL CONSTANT RETAIN
		CXadPassWinch: BOOL:=FALSE;
			(*additional: passenger  winch*)
		CXaddWinch: BOOL:=FALSE;
			(*additional: auxilliary winch 1 (add winch)*)
	END_VAR
	VAR 
		LXinitOk: BOOL:=FALSE;
			(*init completed*)
		LXstart: BOOL:=FALSE;
		LXpassengerWinch: BOOL:=FALSE;
		LXlmlStop: BOOL:=FALSE;
		LXpwLocalStopUp: BOOL:=FALSE;
		LXpwLocalStopDn: BOOL:=FALSE;
		LXcrankMountStop: BOOL:=FALSE;
		CorrValue_Bool1: CorrValue_Bool;
		R_TRIG1: R_TRIG;
		SR1: SR;
		RS2: RS;
		TOF1: TOF;
	END_VAR
'FBD'
BODY
    WORKSPACE
        NETWORK_LIST_TYPE := NWTYPEFBD ;
        ACTIVE_NETWORK := 0 ;
    END_WORKSPACE
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_COMMENT,,init first time,1,1,27,2,);
B(B_VARIN,,LXinitOk,9,4,11,6,);
B(B_F,not,,11,3,16,6,);
B(B_JUMP,,init,16,4,18,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,protect correction value change while program activ,1,1,27,2,);
B(B_F,@OR-2,,11,3,16,7,NN);
B(B_VARIN,,LXstart,9,5,11,7,);
B(B_VARIN,,IXentrySwiClosed,9,4,11,6,);
B(B_F,sel,,18,5,23,10,);
B(B_VAROUT,,LXpassengerWinch,23,6,25,8,);
B(B_VARIN,,CXadPassWinch,16,8,18,10,);
B(B_VARIN,,LXpassengerWinch,16,7,18,9,);
L(16,5,17,5);
L(17,7,18,7);
L(17,5,17,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VAROUT,,LXstart,11,1,13,3,);
B(B_VARIN,,TRUE,9,1,11,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_COMMENT,,stop slack rope protection,1,1,27,2,);
B(B_VARIN,,IXadPersSlackRop,9,4,11,6,);
B(B_VARIN,,MXlimitSwBridged,9,5,11,7,);
B(B_VAROUT,,MXpwSlackRopeOk,16,4,18,6,);
B(B_VARIN,,LXpassengerWinch,9,6,11,8,);
B(B_F,@OR-3,,11,3,16,8,00N);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_COMMENT,,stop crank mounted,1,1,27,2,);
B(B_VARIN,,IXadPersCrankMon,9,4,11,6,);
B(B_VARIN,,MXlimitSwBridged,9,5,11,7,);
B(B_VAROUT,,LXcrankMountStop,16,4,18,6,);
B(B_F,@OR-3,,11,3,16,8,00N);
B(B_VARIN,,LXpassengerWinch,9,6,11,8,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_COMMENT,,limit switch personal winch ,1,1,27,2,);
B(B_VARIN,,MXlimitSwBridged,9,5,11,7,);
B(B_VAROUT,,MXpwUpLimOk,16,4,18,6,);
B(B_VARIN,,IXaddUpperLimOk,9,4,11,6,);
B(B_F,@OR-3,,11,3,16,8,00N);
B(B_VARIN,,LXpassengerWinch,9,6,11,8,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_VARIN,,IXaddLowerLimOk,9,1,11,3,);
B(B_VARIN,,MXlimitSwBridged,9,2,11,4,);
B(B_VAROUT,,MXpwLoLimOk,16,1,18,3,);
B(B_F,@OR-3,,11,0,16,5,00N);
B(B_VARIN,,LXpassengerWinch,9,3,11,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_COMMENT,,exit program ,1,1,27,2,);
B(B_RETURN,,,16,4,18,6,);
B(B_VARIN,,LXpassengerWinch,9,4,11,6,);
B(B_F,@OR-2,,11,3,16,7,N);
B(B_VARIN,,CXaddWinch,9,5,11,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 17 ;
        NETWORK_BODY
B(B_COMMENT,,preselect passenger winch ,1,1,27,2,);
B(B_VARIN,,LXpassengerWinch,25,12,27,14,);
B(B_VARIN,,MXrelPassTwiPump,18,10,20,12,);
B(B_F,@AND-2,,20,8,25,12,0N);
B(B_FB,R_TRIG,R_TRIG1,11,7,18,10,);
B(B_VARIN,,ITXpassWinch,9,8,11,10,);
B(B_FB,SR,SR1,34,3,39,7,);
B(B_VAROUT,,MXpassWinchPres,39,4,41,6,);
B(B_F,@AND-3,,20,3,25,8,N);
B(B_VARIN,,MXpassWinchPres,18,4,20,6,);
B(B_VARIN,,LXpassengerWinch,18,5,20,7,);
B(B_VARIN,,MXpwEnJoySig,25,13,27,15,);
B(B_VARIN,,MXhgSpecialLift,25,14,27,16,);
B(B_F,@OR-4,,27,10,32,16,0NNN);
L(26,10,26,12);
L(33,6,33,12);
L(19,7,19,10);
L(19,10,20,10);
L(25,10,26,10);
L(33,6,34,6);
L(25,5,34,5);
L(19,7,20,7);
L(18,9,19,9);
L(26,12,27,12);
L(32,12,33,12);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_VARIN,,MXpassWinchPres,9,4,11,6,);
B(B_VARIN,,MXpwEnJoySig,9,5,11,7,);
B(B_F,@AND-2,,11,3,16,7,);
B(B_COMMENT,,enable passenger  winch,1,1,27,2,);
B(B_VAROUT,,QTXpassWinch,16,5,18,7,);
B(B_VAROUT,,MXpassWinchActiv,16,4,18,6,);
L(16,5,16,6);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_COMMENT,,signal selector,1,1,27,2,);
B(B_VARIN,,MDpwJoySignal,9,4,11,6,);
B(B_VARIN,,0.0,10,9,12,11,);
B(B_F,@LT-2,,13,7,18,11,);
B(B_VAROUT,,MXpwAnalSigNeg,18,8,20,10,);
B(B_F,@GT-2,,13,3,18,7,);
B(B_VAROUT,,MXpwAnalSigPos,18,4,20,6,);
L(11,5,11,9);
L(11,9,13,9);
L(12,10,13,10);
L(11,5,13,5);
L(12,6,12,10);
L(12,6,13,6);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_COMMENT,,lml stop,1,1,27,2,);
B(B_F,@AND-3,,17,6,22,11,NNN);
B(B_VARIN,,MXpwAnalSigPos,15,8,17,10,);
B(B_VARIN,,MXrelPassTwiPump,15,9,17,11,);
B(B_FB,RS,RS2,24,3,29,7,);
B(B_VAROUT,,LXlmlStop,29,4,31,6,);
B(B_F,@AND-2,,11,3,16,7,0N);
B(B_VARIN,,MXlmlStop,9,4,11,6,);
B(B_VARIN,,MXlmlBridged,9,5,11,7,);
L(16,5,16,8);
L(16,8,17,8);
L(16,5,24,5);
L(23,6,24,6);
L(23,6,23,8);
L(22,8,23,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,upper stop ,1,1,27,2,);
B(B_VAROUT,,LXpwLocalStopUp,16,4,18,6,);
B(B_VARIN,,MXstopAllFunctio,9,4,11,6,);
B(B_VARIN,,MXpwUpLimOk,9,5,11,7,);
B(B_VARIN,,LXlmlStop,9,6,11,8,);
B(B_VARIN,,MXpwGlobalStopUp,9,7,11,9,);
B(B_VARIN,,LXcrankMountStop,9,8,11,10,);
B(B_F,@OR-5,,11,3,16,10,0N00N);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,lower stop ,1,1,27,2,);
B(B_VARIN,,MXpwLoLimOk,9,5,11,7,);
B(B_VARIN,,MXpwGlobalStopDn,9,6,11,8,);
B(B_VAROUT,,LXpwLocalStopDn,16,4,18,6,);
B(B_VARIN,,MXstopAllFunctio,9,4,11,6,);
B(B_VARIN,,LXcrankMountStop,9,7,11,9,);
B(B_F,@OR-5,,11,3,16,10,0N0NN);
B(B_VARIN,,MXpwSlackRopeOk,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_COMMENT,,passenger winch lifting,1,1,27,2,);
B(B_VAROUT,,QXadPasWinchLift,16,4,18,6,);
B(B_VARIN,,MXpwAnalSigPos,9,4,11,6,);
B(B_F,@AND-2,,11,3,16,7,0N);
B(B_VARIN,,LXpwLocalStopUp,9,5,11,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_COMMENT,,passenger winch lowering,1,1,27,2,);
B(B_VAROUT,,QXadPasWinchLow,16,4,18,6,);
B(B_F,@AND-2,,11,3,16,7,0N);
B(B_VARIN,,MXpwAnalSigNeg,9,4,11,6,);
B(B_VARIN,,LXpwLocalStopDn,9,5,11,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_COMMENT,,brake,1,1,27,2,);
B(B_F,@OR-2,,11,3,16,7,);
B(B_FB,TOF,TOF1,18,3,23,7,);
B(B_VAROUT,,QXaddPersWinBrak,23,4,25,6,);
B(B_VARIN,,T#0.5s,15,7,17,9,);
B(B_VARIN,,QXadPasWinchLift,9,4,11,6,);
B(B_VARIN,,QXadPasWinchLow,9,5,11,7,);
B(B_VAROUT,,MXrelPassTwiPump,23,3,25,5,);
L(16,5,18,5);
L(17,6,18,6);
L(17,6,17,8);
L(23,4,23,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,exit program,1,1,27,2,);
B(B_VARIN,,TRUE,9,3,11,5,);
B(B_RETURN,,,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL := init: ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,init passenger winch program,1,1,27,2,);
B(B_VARIN,,TRUE,9,3,11,5,);
B(B_VAROUT,,LXinitOk,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_FB,CorrValue_Bool,CorrValue_Bool1,11,4,23,10,);
B(B_VARIN,,CXadPassWinch,9,8,11,10,);
B(B_VARIN,,FALSE,9,6,11,8,);
B(B_VARIN,,TRUE,9,7,11,9,);
B(B_VARIN,,FALSE,9,5,11,7,);
B(B_COMMENT,,additional device passenger winch,1,1,27,2,);
        END_NETWORK_BODY
    END_NET_WORK
END_BODY
END_PROGRAM

PROGRAM ADremoteContV020
(*name of author: Michael Back
version: 1.0
date: 12/99
modification:*)
(*name of author: Manfred Schapler
version: 1.0
date: 11/97
modification:*)
	VAR_EXTERNAL 
		ITXrcChangeCtrl: BOOL:=FALSE;
			(*preselection change remote control *)
		IXhgRelFreefall: BOOL:=FALSE;
			(*ball valve release freefall*)
		IXswitTravelGear: BOOL:=FALSE;
			(*pressure switch travelling gear*)
		IXengRequireStop: BOOL:=FALSE;
			(*engine module requires engine stop*)
		IXengCharging: BOOL:=FALSE;
			(*engine battery charging*)
		IXengLubOilPresE: BOOL:=FALSE;
			(*engine lub oil pressure error*)
		IXengCoolWatConE: BOOL:=FALSE;
			(*engine cooling water content error*)
		IXengCooWatTempE: BOOL:=FALSE;
			(*engine cooling water temperature error*)
		IXengSpeedHighE: BOOL:=FALSE;
			(*engine engine speed high error*)
		IXengPreheatActi: BOOL:=FALSE;
			(*engine preheat system active*)
		IXengPreheatStar: BOOL:=FALSE;
			(*engine preheat system ready for engine start*)
		IXengPostheatAct: BOOL:=FALSE;
			(*engine preheat system active at running engine*)
		IXgearOilTempOk: BOOL:=FALSE;
			(*gear oil temperature o.k.*)
		IXhg1FeedPressOk: BOOL:=FALSE;
			(*feed pressure HG 1 o.k.*)
		IXhg2FeedPressOk: BOOL:=FALSE;
			(*feed pressure HG 2 o.k.*)
		IXremoteControl: BOOL:=FALSE;
			(*remote control activated*)
		IXrcSwitchedOn: BOOL:=FALSE;
			(*remote control switched on*)
		IXrcEngStartStop: BOOL:=FALSE;
			(*remote control engine start / stop*)
		IXrcEngSpeedUp: BOOL:=FALSE;
			(*remote control engine speed up*)
		IXrcEngSpeedDown: BOOL:=FALSE;
			(*remote control engine speed down*)
		IXrcEngSpeedStor: BOOL:=FALSE;
			(*remote control engine speed store*)
		IXrcLight: BOOL:=FALSE;
			(*remote control floodlights on*)
		IXrcLmlBypass: BOOL:=FALSE;
			(*remote control lml bypass*)
		IXrcHorn: BOOL:=FALSE;
			(*remote control horn*)
		IXrcPresel1: BOOL:=FALSE;
			(*remote control preselection 1*)
		IXrcPresel2: BOOL:=FALSE;
			(*remote control preselection 2*)
		IXrcPresel3: BOOL:=FALSE;
			(*remote control preselection 3*)
		IXrcSgFreeTurn: BOOL:=FALSE;
			(*remote control sg free turn*)
		IXrcAutomaticSta: BOOL:=FALSE;
			(*remote control automatic start*)
		IXrcFloCouWeiPre: BOOL:=FALSE;
			(*remote control floating counterweight preselection*)
		IXrcLgWinchPrese: BOOL:=FALSE;
			(*remote control lg preselection*)
		IXrcAddHydraulic: BOOL:=FALSE;
			(*remote control add hydraulic*)
		IXrcTgLeftForwar: BOOL:=FALSE;
			(*remote control tg left forward*)
		IXrcTgLeftBackwa: BOOL:=FALSE;
			(*remote control tg left backward*)
		IXrcTgRightForwa: BOOL:=FALSE;
			(*remote control tg right forward*)
		IXrcTgRightBackw: BOOL:=FALSE;
			(*remote control tg right backward*)
		IXrcWinchSynchro: BOOL:=FALSE;
			(*remote control winch syncronisation*)
		IXrcAcknowBeeper: BOOL:=FALSE;
			(*remote control acknowledge beeper*)
		IXrcChangeContro: BOOL:=FALSE;
			(*remote control change control RC / cabine*)
		IXrcExcenterOut: BOOL:=FALSE;
			(*remote control excenter out*)
		IXrcExcenterIn: BOOL:=FALSE;
			(*remote control excenter in*)
		IXrcClampOpen: BOOL:=FALSE;
			(*remote control clamp open*)
		IXrcClampClose: BOOL:=FALSE;
			(*remote control clamp close*)
		IXremContRadioOk: BOOL:=FALSE;
			(*remote control radio connection ok*)
		IXriJoyTopRi: BOOL:=FALSE;
			(*right joystick push button at the top right*)
		IXriJoyTopLe: BOOL:=FALSE;
			(*right joystick push button at the top left*)
		IXriJoyFronTopRi: BOOL:=FALSE;
			(*right joystick push button in front at the top right*)
		IXriJoyFronTopLe: BOOL:=FALSE;
			(*right joystick push button in front at the top left*)
		IXriJoyFronLowRi: BOOL:=FALSE;
			(*right joystick push button in front at the bottom right*)
		IXriJoyFronLowLe: BOOL:=FALSE;
			(*right joystick push button in front at the bottom left*)
		IXriJoyJackSwit: BOOL:=FALSE;
			(*right joystick push button jack switch*)
		IXleJoyTopRi: BOOL:=FALSE;
			(*left joystick push button at the top right*)
		IXleJoyTopLe: BOOL:=FALSE;
			(*left joystick push button at the top left (horn)*)
		IXleJoyFronTopRi: BOOL:=FALSE;
			(*left joystick push button in front at the top right*)
		IXleJoyFronTopLe: BOOL:=FALSE;
			(*left joystick push button in front at the top left*)
		IXleJoyFronLowRi: BOOL:=FALSE;
			(*left joystick push button in front at the bottom right*)
		IXleJoyFronLowLe: BOOL:=FALSE;
			(*left joystick push button in front at the bottom left*)
		IXleJoyJackSwit: BOOL:=FALSE;
			(*left joystick push button jack switch*)
		IWrcJoyLeftY: INT:=0;
			(*remote control joystick left analog signal Y*)
		IWrcJoyLeftX: INT:=0;
			(*remote control joystick left analog signal X*)
		IWrcJoyLeftZ: INT:=0;
			(*remote control joystick left analog signal Z*)
		IWrcJoyRightY: INT:=0;
			(*remote control joystick right analog signal Y*)
		IWrcJoyRightX: INT:=0;
			(*remote control joystick right analog signal X*)
		IWrightJoystAna1: INT:=0;
			(*right joystick analog signal 1*)
		IWrightJoystAna2: INT:=0;
			(*right joystick analog signal 2*)
		IWleftJoystAnal1: INT:=0;
			(*left joystick analog signal 1*)
		IWleftJoystAnal2: INT:=0;
			(*left joystick analog signal 2*)
		IWfootpEngSpeed: INT:=0;
			(*footpedal engine speed*)
		QTXrcChangeCtrl: BOOL:=FALSE;
			(*enable change remote control *)
		QXadRCswitchTG: BOOL:=FALSE;
			(*remote control switch travelling gear control cabine / rc*)
		QXrcCraneSelBit1: BOOL:=FALSE;
			(*remote control crane select bit 1*)
		QXrcCraneSelBit2: BOOL:=FALSE;
			(*remote control crane select bit 2*)
		QXrcCraneSelBit3: BOOL:=FALSE;
			(*remote control crane select bit 3*)
		QXrcCraneSelBit4: BOOL:=FALSE;
			(*remote control crane select bit 4*)
		QXrcBuzzerType1: BOOL:=FALSE;
			(*remote control buzzer type 1*)
		QXrcBuzzerType2: BOOL:=FALSE;
			(*remote control buzzer type 2*)
		QXrcBuzzerType3: BOOL:=FALSE;
			(*remote control buzzer type 3*)
		QXrcBuzzerType4: BOOL:=FALSE;
			(*remote control buzzer type 4*)
		QXrcWindSpeed: BOOL:=FALSE;
			(*remote control symbol wind speed*)
		QXrcEngineRunnin: BOOL:=FALSE;
			(*remote control symbol engine running*)
		QXrcArrowSymUp: BOOL:=FALSE;
			(*remote control symbol arrow up*)
		QXrcArrowSymDown: BOOL:=FALSE;
			(*remote control symbol arrow down*)
		QXrcArrowSymLeft: BOOL:=FALSE;
			(*remote control symbol arrow left*)
		QXrcArrowSymRigh: BOOL:=FALSE;
			(*remote control symbol arrow right*)
		QXrcStopSymbol: BOOL:=FALSE;
			(*remote control symbol STOP*)
		QXrcUtilBackward: BOOL:=FALSE;
			(*remote control utilization backwards bar*)
		QWrcStatusSym1: INT:=0;
			(*remote control symbol status 1*)
		QWrcStatusSym2: INT:=0;
			(*remote control symbol status 2*)
		QWrcStatusSym3: INT:=0;
			(*remote control symbol status 3*)
		QWrcStatusSym4: INT:=0;
			(*remote control symbol status 4*)
		QWrcStatusSym5: INT:=0;
			(*remote control symbol status 5*)
		QWrcActualLoad: INT:=0;
			(*remote control actual load*)
		QWrcMaximumLoad: INT:=0;
			(*remote control maximum load*)
		QWrcLoadRadius: INT:=0;
			(*remote control load radius*)
		QWrcUtilization: INT:=0;
			(*remote control utilization*)
		QWrcWindSpeed: INT:=0;
			(*remote control wind speed*)
		QWrcHeadHight: INT:=0;
			(*remote control head hight*)
		QWrcUtilizationB: INT:=0;
			(*remote control utilization backwards*)
		QWrcVibrFrequenc: INT:=0;
			(*remote control vibrator frequency*)
		QWrcEngSpe_ClaPr: INT:=0;
			(*remote control engine speed / clamp pressure*)
		QWrcRopeLe_Pres1: INT:=0;
			(*remote control rope lenght / pressure pumpe 1*)
		QWrcFuelCo_Pres2: INT:=0;
			(*remote control fuel content / pressure pumpe 2*)
		QWriJoyAna1Vibr: INT:=0;
			(*right joystick analog signal vibrator 1*)
		QWriJoyAna2Vibr: INT:=0;
			(*right joystick analog signal vibrator 2*)
		QWleJoyAna1Vibr: INT:=0;
			(*left joystick analog signal vibrator 1*)
		QWleJoyAna2Vibr: INT:=0;
			(*left joystick analog signal vibrator 2*)
		MXflashSignal: BOOL:=FALSE;
			(*flash signal*)
		MXremContPresel: BOOL:=FALSE;
			(*remote control preselected by X12 Button*)
		MXrcModuleActive: BOOL:=FALSE;
			(*remote control operation released*)
		MXremContActive: BOOL:=FALSE;
			(*remote control activated*)
		MXremContRadioOk: BOOL:=FALSE;
			(*remote control radio connection ok*)
		MXrcCanTimeout: BOOL:=FALSE;
			(*remote control CAN timeout*)
		MXrcAdBlockRemCo: BOOL:=FALSE;
			(*remote control ad block remote control operation*)
		MXrcHoldValues: BOOL:=FALSE;
			(*remote control hold values while radio interference*)
		MXminEngineSpeed: BOOL:=FALSE;
			(*minimum engine speed reached*)
		MXrcStopAllFunct: BOOL:=FALSE;
			(*remote control stop all functions*)
		MXrcStartEngine: BOOL:=FALSE;
			(*remote control start engine*)
		MXrcStopEngine: BOOL:=FALSE;
			(*remote control stop engine*)
		MXrcLockFreeTurn: BOOL:=FALSE;
			(*remote control lock sg free turn*)
		MXrcBridgeLml: BOOL:=FALSE;
			(*remote control bridge lml*)
		MXrcChangeContro: BOOL:=FALSE;
			(*remote control switching control rc / cabine*)
		MXjoyLgChange: BOOL:=FALSE;
			(*change luffing gear on joystick*)
		MXjoyEngSpeedDn: BOOL:=FALSE;
			(*engine speed adjust down*)
		MXjoyEngSpeedUp: BOOL:=FALSE;
			(*engine speed adjust up*)
		MXjoyWinchSyn: BOOL:=FALSE;
			(*ad winch synchronization preselection on joystick*)
		MXjoySgFreeTurn: BOOL:=FALSE;
			(*sg free turn preselection on joystick*)
		MXjoyAutomPresel: BOOL:=FALSE;
			(*ad automatic preselection on joystick*)
		MXjoyEngSpeStore: BOOL:=FALSE;
			(*engine speed store*)
		MXjoyFloaCouWei: BOOL:=FALSE;
			(*adfloating counterweight cylinder preselection on joystick*)
		MXengSpeedStore: BOOL:=FALSE;
			(*engine speed stored*)
		MXlmlWarning: BOOL:=FALSE;
			(*lml warning*)
		MXlmlStopScreen: BOOL:=FALSE;
			(*lml stop symbol on screen*)
		MXassemblyOperat: BOOL:=FALSE;
			(*assembly operation*)
		MXhg1WinchLift: BOOL:=FALSE;
			(*hg1 winch is lifting*)
		MXhg1WinchLower: BOOL:=FALSE;
			(*hg2 winch is lowering*)
		MXmomRegEnabled: BOOL:=FALSE;
			(*SG moment regulator enabled*)
		MXaxwActive: BOOL:=FALSE;
			(*auxiliary winch active*)
		MXderrickActive: BOOL:=FALSE;
			(*derrick winch active*)
		MXaddHydrActive: BOOL:=FALSE;
			(*addittional hydraulics active*)
		MXlimitSwBridged: BOOL:=FALSE;
			(*X23 limit switches bridged for assembly operation*)
		MXswitTravelGear: BOOL:=FALSE;
			(*travelling gear is activated*)
		MXscOneLimitSw: BOOL:=FALSE;
			(*screen: one or more limit switch symbols are active*)
		MXadWinSynWork: BOOL:=FALSE;
			(*ad winch synchronization working*)
		MXadGrabCoWork: BOOL:=FALSE;
			(*ad grab control working*)
		MXfloaCouWeigAct: BOOL:=FALSE;
			(*floating counterweight active*)
		MXfuelContWarnin: BOOL:=FALSE;
			(*fuel content too low warning*)
		MXwarnHydrOilTem: BOOL:=FALSE;
			(*hydraulic oil temperature warning*)
		MXrcLudvMachine: BOOL:=FALSE;
			(*remote control machine type is ludv (open hydraulic circuit)*)
		MXjoyPolyGrapPre: BOOL:=FALSE;
			(*ad polyp grap preselection on joystick*)
		MXjoyLowerCont: BOOL:=FALSE;
			(*ad lower control preselection on joystick*)
		MXjoyGrapCont: BOOL:=FALSE;
			(*ad grap control preselection on joystick*)
		MXjoyStabWiFreeF: BOOL:=FALSE;
			(*ad stabilization winch freefall on joystick*)
		MXjoyStabWiFullP: BOOL:=FALSE;
			(*ad stabilization winch full pull on joystick*)
		MXjoyBridgeFastS: BOOL:=FALSE;
			(*bridge fast speed on joystick*)
		MXlmlLoadOnJib: BOOL:=FALSE;
			(*lml load location on fixed or luffing jib head*)
		MXrcLmlSounder: BOOL:=FALSE;
			(*remote control reset lml sounder*)
		MXhydrOilContWar: BOOL:=FALSE;
			(*hydraulic oil tank content warning*)
		MXhydrOilContErr: BOOL:=FALSE;
			(*hydraulic oil tank content error*)
		MXjoystickInZero: BOOL:=FALSE;
			(*joystick in zero position (no control signal is active)*)
		MDhg1PreJoySig: REAL:=0.0;
			(*HG 1 joystick signal  before MUX +/- [%]*)
		MDhg2PreJoySig: REAL:=0.0;
			(*HG 2 joystick signal before MUX +/-[%]*)
		MDsgPreJoySig: REAL:=0.0;
			(*SG joystick signal before MUX +/-[%]*)
		MDlgPreJoySig: REAL:=0.0;
			(*LG joystick signal before MUX +/-[%]*)
		MDturnJoySignal: REAL:=0.0;
			(*remote control turn joystick signal in +/-[%]*)
		MDlmlUtilization: REAL:=0.0;
			(*lml utilization in [%]*)
		MDlmlUtilBackwar: REAL:=0.0;
			(*lml utilization backwards (derrick)*)
		MDlmlLoadBoom: REAL:=0.0;
			(*lml load main boom in [t]*)
		MDlmlLoadLuffJib: REAL:=0.0;
			(*lml load luffing jib in [t]*)
		MDlmlMaxLoad1: REAL:=0.0;
			(*lml maximum load main boom in [t]*)
		MDlmlMaxLoad2: REAL:=0.0;
			(*lml maximum load luffing jib boom in [t]*)
		MDlmlRadiusMBoom: REAL:=0.0;
			(*lml load radius main boom in [m]*)
		MDlmlRadiusLJib: REAL:=0.0;
			(*lml load radius luffing jib boom in [m]*)
		MDlmlMaxHight1: REAL:=0.0;
			(*lml maximum hight main boom in [m]*)
		MDlmlMaxHight2: REAL:=0.0;
			(*lml maximum hight main boom in [m]*)
		MDwindSpeed: REAL:=0.0;
			(*actual wind speed*)
		MDpresenEngSpeed: REAL:=0.0;
			(*present engine speed in [rpm]*)
		MDvibrFrequency: REAL:=0.0;
			(*ad vibrator frequency*)
		MDvibClampPress: REAL:=0.0;
			(*ad vibrator clamping pressure*)
		MDadHyLudv1Press: REAL:=0.0;
			(*additional hydraulics ludv pump 1 pressure in [bar]*)
		MDadHyLudv2Press: REAL:=0.0;
			(*additional hydraulics ludv pump 2 pressure in [bar]*)
		MDscRopeLenHg1: REAL:=0.0;
			(*screen indication rope lenght hg1*)
		SRfuelCont: REAL:=0.00;
			(* fuel content *)
		MXlmlDerrickEnab: BOOL:=FALSE;
			(*lml derrick enabled*)
	END_VAR
	VAR_EXTERNAL CONSTANT
		MSG_INFO: UINT:=0;
			(* message priority: "info" *)
		MSG_ERROR: UINT:=0;
			(* message priority: "error" *)
	END_VAR
	VAR_EXTERNAL RETAIN
		MXlg2Active: BOOL:=FALSE;
			(*LG 2 active*)
		MXlmlFix_LuffJib: BOOL:=FALSE;
			(*lml fixed or luffing jib enabled*)
	END_VAR
	VAR_EXTERNAL CONSTANT RETAIN
		CXremoteControl: BOOL:=FALSE;
			(*remote control*)
		CXrcSwitchContro: BOOL:=FALSE;
			(*radio remote control release switch control rc / cabine*)
		CXrcRelAssemOper: BOOL:=FALSE;
			(*remote control release assembly operation*)
		CDhg1IntTimeDn: REAL:=0.0;
			(*HG 1 integrator time falling signal*)
		CDhg2IntTimeDn: REAL:=0.0;
			(*HG 2 integrator time down falling signal*)
		CDsgIntTimeDn: REAL:=0.0;
			(*SG integrator time down*)
		CDludvIntegrTime: REAL:=0.0;
			(*ludv pumps integration time up and down*)
	END_VAR
	VAR 
		LXinitOk: BOOL:=FALSE;
		LXsetRemControl: BOOL:=FALSE;
		LXrcFlashSignal: BOOL:=FALSE;
		LXrcEnableEngine: BOOL:=FALSE;
		LXrcEngForceStop: BOOL:=FALSE;
		LXallFuncInZero: BOOL:=FALSE;
		LXrcContrInZero: BOOL:=FALSE;
		LXcabinConInZero: BOOL:=FALSE;
		LXerrorSymbol: BOOL:=FALSE;
		LXwindWarn: BOOL:=FALSE;
		LXrcCraneSelBit2: BOOL:=FALSE;
		LXlmlBuzzer: BOOL:=FALSE;
		LX1: BOOL:=FALSE;
		LX2: BOOL:=FALSE;
		LWcurrentMsg: UDINT:=0;
		LWactiveMsg: UDINT:=0;
		SR0: SR;
			(*ACHTUNG setzt: MXremContActive auch im INIT Teil !!!*)
		SR1: SR;
		SR2: SR;
		SR3: SR;
		SR4: SR;
		SR5: SR;
		SR6: SR;
		SR7: SR;
		SR8: SR;
		RS1: RS;
		RS2: RS;
		RS3: RS;
		RS4: RS;
		RS5: RS;
		RS6: RS;
		RS7: RS;
		RS8: RS;
		F_TRIG1: F_TRIG;
		F_TRIG2: F_TRIG;
		R_TRIG1: R_TRIG;
		R_TRIG2: R_TRIG;
		R_TRIG3: R_TRIG;
		R_TRIG4: R_TRIG;
		R_TRIG5: R_TRIG;
		R_TRIG6: R_TRIG;
		R_TRIG7: R_TRIG;
		R_TRIG8: R_TRIG;
		R_TRIG9: R_TRIG;
		R_TRIG10: R_TRIG;
		R_TRIG11: R_TRIG;
		R_TRIG12: R_TRIG;
		R_TRIG13: R_TRIG;
		R_TRIG14: R_TRIG;
		R_TRIG15: R_TRIG;
		R_TRIG16: R_TRIG;
		R_TRIG17: R_TRIG;
		R_TRIG18: R_TRIG;
		R_TRIG19: R_TRIG;
		TON1: TON;
		TON2: TON;
		TON3: TON;
		TON5: TON;
		TON6: TON;
		TOF1: TOF;
		TOF2: TOF;
		TOF3: TOF;
		TOF4: TOF;
		TOF5: TOF;
		CorrValue_Bool1: CorrValue_Bool;
		CorrValue_Bool2: CorrValue_Bool;
		CorrValue_Bool3: CorrValue_Bool;
		ModuleState1: ModuleState;
		ModuleState2: ModuleState;
		Message1: MsgRealReal;
		Message2: MsgRealReal;
		Message3: MsgRealReal;
		Message4: MsgRealReal;
		Message5: MsgRealReal;
		Message6: MsgRealReal;
		Message7: MsgRealReal;
		Message8: MsgRealReal;
		Message9: MsgRealReal;
		GetMsgState1: GetMessageState;
		MultiMsgAck1: MultiMessageAck;
	END_VAR
'FBD'
BODY
    WORKSPACE
        NETWORK_LIST_TYPE := NWTYPEFBD ;
        ACTIVE_NETWORK := 0 ;
    END_WORKSPACE
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_COMMENT,,exit program in case of no additional device,1,1,27,2,);
B(B_F,not,,11,3,16,6,);
B(B_RETURN,,,16,4,18,6,);
B(B_VARIN,,MXremContPresel,9,4,11,6,);
B(B_COMMENT,,INFO:ø^* im GPinit wird das Bit MXremContPresel gesetzt~ welches das Überspringen diverser Programmteile~ Beispielsweiseø^GPcanJoyst oder die Tastenauswertung der Meisterschalter im GPgeneral veranlasst,28,2,73,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_COMMENT,,init first time,1,1,27,2,);
B(B_VARIN,,LXinitOk,9,4,11,6,);
B(B_F,not,,11,3,16,6,);
B(B_JUMP,,init,16,4,18,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_COMMENT,,init first time,1,1,27,2,);
B(B_VARIN,,LXrcFlashSignal,9,5,11,7,);
B(B_FB,TON,TON1,11,4,16,8,);
B(B_VARIN,,T#1s,9,6,11,8,);
B(B_F,not,,18,4,23,7,);
B(B_FB,TON,TON2,25,4,30,8,);
B(B_VARIN,,T#0.75s,22,7,24,9,);
B(B_VAROUT,,LXrcFlashSignal,30,5,32,7,);
L(24,7,25,7);
L(24,7,24,8);
L(16,6,18,6);
L(23,6,25,6);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 18 ;
        NETWORK_BODY
B(B_COMMENT,,check modul radio remote control,1,1,27,2,);
B(B_VARIN,,1,9,5,11,7,);
B(B_VARIN,,109,9,6,11,8,);
B(B_FB,ModuleState,ModuleState1,11,4,23,10,);
B(B_VARIN,,TRUE,9,7,11,9,);
B(B_VARIN,,FALSE,9,8,11,10,);
B(B_VARIN,,1,9,12,11,14,);
B(B_VARIN,,113,9,13,11,15,);
B(B_FB,ModuleState,ModuleState2,11,11,23,17,);
B(B_VARIN,,TRUE,9,14,11,16,);
B(B_VARIN,,FALSE,9,15,11,17,);
B(B_F,@AND-2,,27,11,32,15,);
B(B_FB,SR,SR2,32,11,37,15,);
B(B_FB,SR,SR1,32,6,37,10,);
B(B_VAROUT,,MXrcCanTimeout,37,7,39,9,);
B(B_F,@OR-2,,27,6,32,10,);
B(B_VAROUT,,MXrcModuleActive,37,12,39,14,);
L(23,6,26,6);
L(23,13,24,13);
L(24,9,24,13);
L(23,7,25,7);
L(25,7,25,13);
L(25,13,27,13);
L(23,14,27,14);
L(26,6,26,8);
L(26,8,27,8);
L(24,9,27,9);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_COMMENT,,check remote control radio connection,1,1,27,2,);
B(B_VARIN,,IXremContRadioOk,9,5,11,7,);
B(B_FB,TOF,TOF1,11,4,16,8,);
B(B_VARIN,,T#0.5s,9,6,11,8,);
B(B_VAROUT,,MXremContRadioOk,17,5,19,7,);
B(B_F,@OR-2,,17,7,22,11,N);
B(B_VARIN,,MXrcCanTimeout,15,9,17,11,);
B(B_FB,TON,TON3,26,7,31,11,);
B(B_VARIN,,T#5s,24,9,26,11,);
B(B_VAROUT,,LXrcEngForceStop,31,8,33,10,);
L(16,6,17,6);
L(17,6,17,9);
L(22,9,26,9);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_COMMENT,,store values of the remote control,1,1,27,2,);
B(B_VARIN,,IXremContRadioOk,9,4,11,6,);
B(B_VARIN,,MXremContRadioOk,9,5,11,7,);
B(B_VAROUT,,MXrcHoldValues,16,4,18,6,);
B(B_F,@XOR-2,,11,3,16,7,);
B(B_COMMENT,,Einige Funktionen sollen bei einem oder zwei fehlerhaften Protokollenø^nicht sofort gestoppt werden. Somit soll ruckendes Verhalten unterdrückt werden.,32,4,64,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 52 ;
        NETWORK_BODY
B(B_COMMENT,,messages from the remote control,1,1,27,2,);
B(B_FB,MsgRealReal,Message1,27,4,36,11,);
B(B_VARIN,,567,25,5,27,7,);
B(B_FB,MsgRealReal,Message2,27,12,36,19,);
B(B_VARIN,,568,23,13,25,15,);
B(B_VARIN,,MSG_INFO,24,7,26,9,);
B(B_FB,MsgRealReal,Message3,27,20,36,27,);
B(B_VARIN,,569,23,21,25,23,);
B(B_FB,MsgRealReal,Message4,27,28,36,35,);
B(B_VARIN,,572,23,29,25,31,);
B(B_VARIN,,IXrcAcknowBeeper,23,30,25,32,);
B(B_F,@AND-2,,16,13,21,17,N);
B(B_FB,MsgRealReal,Message5,27,36,36,43,);
B(B_FB,MsgRealReal,Message6,27,44,36,51,);
B(B_VARIN,,578,23,45,25,47,);
B(B_VARIN,,MXremContRadioOk,14,14,16,16,);
B(B_FB,TON,TON5,10,17,15,21,);
B(B_VARIN,,T#1s,8,19,10,21,);
B(B_VARIN,,TRUE,8,18,10,20,);
B(B_VARIN,,IXrcSwitchedOn,23,22,25,24,);
B(B_VARIN,,MXremContPresel,25,6,27,8,);
B(B_VARIN,,577,23,37,25,39,);
B(B_F,@AND-2,,16,37,21,41,);
B(B_VARIN,,CXrcSwitchContro,13,38,15,40,);
B(B_VARIN,,MXremContActive,12,39,14,41,);
B(B_F,@AND-3,,16,45,21,50,0NN);
B(B_VARIN,,MXrcChangeContro,14,48,16,50,);
L(26,8,27,8);
L(25,14,27,14);
L(26,16,27,16);
L(25,22,27,22);
L(25,23,27,23);
L(26,24,27,24);
L(25,30,27,30);
L(25,31,27,31);
L(26,32,27,32);
L(21,15,27,15);
L(26,40,27,40);
L(25,46,27,46);
L(26,48,27,48);
L(26,8,26,48);
L(15,19,16,19);
L(25,38,27,38);
L(16,16,16,19);
L(21,39,27,39);
L(15,39,16,39);
L(14,40,16,40);
L(15,39,15,47);
L(21,47,27,47);
L(15,47,16,47);
L(14,48,16,48);
L(14,40,14,48);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 28 ;
        NETWORK_BODY
B(B_COMMENT,,messages from the remote control,1,1,27,2,);
B(B_FB,MsgRealReal,Message8,18,12,27,19,);
B(B_VARIN,,570,14,13,16,15,);
B(B_FB,MsgRealReal,Message9,18,20,27,27,);
B(B_VARIN,,571,14,21,16,23,);
B(B_VARIN,,IXhgRelFreefall,14,22,16,24,);
B(B_FB,MsgRealReal,Message7,18,4,27,11,);
B(B_VARIN,,MSG_ERROR,15,7,17,9,);
B(B_VARIN,,574,14,5,16,7,);
B(B_VARIN,,MXrcCanTimeout,14,6,16,8,);
B(B_VARIN,,CXrcRelAssemOper,9,17,11,19,);
B(B_VARIN,,MXassemblyOperat,9,16,11,18,);
B(B_F,@AND-2,,11,15,16,19,0N);
L(17,16,18,16);
L(16,14,18,14);
L(16,15,18,15);
L(17,24,18,24);
L(16,22,18,22);
L(16,23,18,23);
L(17,8,18,8);
L(17,8,17,24);
L(16,6,18,6);
L(16,7,18,7);
L(16,15,16,17);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 49 ;
        NETWORK_BODY
B(B_COMMENT,,control elements in zero? (Nullstellungszwang),1,1,27,2,);
B(B_F,@OR-28,,24,3,29,33,0000000000000000000000000000N);
B(B_VARIN,,0,10,30,12,32,);
B(B_VARIN,,IWrcJoyRightX,9,29,11,31,);
B(B_VARIN,,IWrcJoyRightY,9,33,11,35,);
B(B_VARIN,,IWrcJoyLeftX,9,37,11,39,);
B(B_VARIN,,IWrcJoyLeftY,9,41,11,43,);
B(B_VARIN,,IWrcJoyLeftZ,9,45,11,47,);
B(B_VAROUT,,LXrcContrInZero,29,4,31,6,);
B(B_VARIN,,IXrcEngSpeedUp,22,10,24,12,);
B(B_VARIN,,IXrcEngSpeedDown,22,11,24,13,);
B(B_VARIN,,IXrcEngSpeedStor,22,8,24,10,);
B(B_VARIN,,FALSE,22,9,24,11,);
B(B_VARIN,,IXrcEngStartStop,22,7,24,9,);
B(B_VARIN,,IXrcLight,22,5,24,7,);
B(B_VARIN,,IXrcHorn,22,26,24,28,);
B(B_VARIN,,IXrcAcknowBeeper,22,6,24,8,);
B(B_VARIN,,IXrcLmlBypass,22,4,24,6,);
B(B_VARIN,,IXrcFloCouWeiPre,22,12,24,14,);
B(B_VARIN,,IXrcTgLeftForwar,22,16,24,18,);
B(B_VARIN,,IXrcTgLeftBackwa,22,17,24,19,);
B(B_VARIN,,IXrcTgRightBackw,22,19,24,21,);
B(B_VARIN,,IXrcTgRightForwa,22,18,24,20,);
B(B_VARIN,,IXrcAddHydraulic,22,21,24,23,);
B(B_VARIN,,IXrcWinchSynchro,22,20,24,22,);
B(B_VARIN,,IXrcAutomaticSta,22,15,24,17,);
B(B_VARIN,,IXrcExcenterOut,22,22,24,24,);
B(B_VARIN,,IXrcExcenterIn,22,23,24,25,);
B(B_VARIN,,IXrcClampOpen,22,24,24,26,);
B(B_VARIN,,IXrcClampClose,22,25,24,27,);
B(B_VARIN,,IXrcSgFreeTurn,22,14,24,16,);
B(B_VARIN,,IXrcLgWinchPrese,22,13,24,15,);
B(B_COMMENT,,IXrcChangeContro   ist FALSEø^wegen Schwanzbeisser bei Umschaltung,0,9,16,11,);
B(B_F,@NE,,13,32,18,36,);
B(B_F,@NE,,13,36,18,40,);
B(B_F,@NE,,13,40,18,44,);
B(B_F,@NE,,13,44,18,48,);
B(B_F,@NE,,13,28,18,32,);
L(23,32,24,32);
L(22,31,24,31);
L(21,30,24,30);
L(20,29,24,29);
L(19,28,24,28);
L(12,47,13,47);
L(12,31,12,47);
L(12,31,13,31);
L(12,43,13,43);
L(12,39,13,39);
L(12,35,13,35);
L(23,32,23,46);
L(22,31,22,42);
L(21,30,21,38);
L(20,29,20,34);
L(11,30,13,30);
L(11,34,13,34);
L(18,34,20,34);
L(11,38,13,38);
L(18,38,21,38);
L(11,42,13,42);
L(18,42,22,42);
L(11,46,13,46);
L(18,46,23,46);
L(19,28,19,30);
L(18,30,19,30);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 41 ;
        NETWORK_BODY
B(B_COMMENT,,control elements in zero? (Nullstellungszwang),1,1,27,2,);
B(B_VARIN,,IXriJoyJackSwit,22,10,24,12,);
B(B_VARIN,,IXleJoyTopRi,22,11,24,13,);
B(B_VARIN,,IXriJoyFronLowRi,22,8,24,10,);
B(B_VARIN,,IXriJoyFronLowLe,22,9,24,11,);
B(B_VARIN,,IXriJoyFronTopLe,22,7,24,9,);
B(B_VARIN,,IXriJoyTopLe,22,5,24,7,);
B(B_VARIN,,IXriJoyFronTopRi,22,6,24,8,);
B(B_VARIN,,IXriJoyTopRi,22,4,24,6,);
B(B_VARIN,,IXleJoyTopLe,22,12,24,14,);
B(B_VARIN,,IXleJoyJackSwit,22,17,24,19,);
B(B_VARIN,,IXswitTravelGear,22,18,24,20,);
B(B_VARIN,,IXleJoyFronTopLe,22,14,24,16,);
B(B_VARIN,,IXleJoyFronTopRi,22,13,24,15,);
B(B_VARIN,,IXleJoyFronLowRi,22,15,24,17,);
B(B_VARIN,,IXleJoyFronLowLe,22,16,24,18,);
B(B_VAROUT,,LXcabinConInZero,29,4,31,6,);
B(B_VARIN,,0,10,22,12,24,);
B(B_F,@NE,,13,24,18,28,);
B(B_F,@NE,,13,28,18,32,);
B(B_F,@NE,,13,32,18,36,);
B(B_F,@NE,,13,36,18,40,);
B(B_F,@NE,,13,20,18,24,);
B(B_VARIN,,IWrightJoystAna1,9,21,11,23,);
B(B_VARIN,,IWrightJoystAna2,9,25,11,27,);
B(B_VARIN,,IWleftJoystAnal2,9,33,11,35,);
B(B_VARIN,,IWleftJoystAnal1,9,29,11,31,);
B(B_VARIN,,IWfootpEngSpeed,9,37,11,39,);
B(B_F,@OR-20,,24,3,29,25,00000000000000000000N);
L(23,24,24,24);
L(22,23,24,23);
L(21,22,24,22);
L(20,21,24,21);
L(19,20,24,20);
L(12,39,13,39);
L(12,23,12,39);
L(12,23,13,23);
L(12,35,13,35);
L(12,31,13,31);
L(12,27,13,27);
L(23,24,23,38);
L(22,23,22,34);
L(21,22,21,30);
L(20,21,20,26);
L(11,22,13,22);
L(11,26,13,26);
L(18,26,20,26);
L(11,30,13,30);
L(18,30,21,30);
L(11,34,13,34);
L(18,34,22,34);
L(11,38,13,38);
L(18,38,23,38);
L(19,20,19,22);
L(18,22,19,22);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 22 ;
        NETWORK_BODY
B(B_F,@DIV,,25,12,30,16,);
B(B_VARIN,,100.0,23,11,25,13,);
B(B_COMMENT,,Als Minimum-Integrationszeit werdenø^3~3 Sekunden genommen.,25,18,40,20,);
B(B_F,SigMin4,,11,13,18,19,);
B(B_VARIN,,CDhg1IntTimeDn,9,14,11,16,);
B(B_VARIN,,CDhg2IntTimeDn,9,15,11,17,);
B(B_VARIN,,CDsgIntTimeDn,9,16,11,18,);
B(B_VARIN,,CDludvIntegrTime,9,17,11,19,);
B(B_F,SigMin4,,18,13,25,19,);
B(B_VARIN,,30.0,16,19,18,21,);
B(B_F,@AND-2,,32,7,37,11,);
B(B_VARIN,,LXrcContrInZero,30,8,32,10,);
B(B_VARIN,,LXcabinConInZero,30,9,32,11,);
B(B_F,@OR-2,,37,6,42,10,);
B(B_VARIN,,MXrcChangeContro,35,5,37,7,);
B(B_FB,TON,TON6,46,6,51,10,);
B(B_F,@MUL-2,,30,12,35,16,);
B(B_F,real_to_time,,35,12,46,15,);
B(B_VARIN,,1000.0,28,16,30,18,);
B(B_FB,R_TRIG,R_TRIG1,37,2,44,5,);
B(B_VAROUT,,LXallFuncInZero,56,6,58,8,);
B(B_F,@AND-2,,51,5,56,9,N);
B(B_FB,TOF,TOF2,45,2,50,6,);
B(B_VARIN,,T#1.0s,43,5,45,7,);
B(B_COMMENT,,LXallFuncInZero wird nach der letzten Ansteuerung mit der höchstenø^Integrationszeit verzögert~ bei einer Umschaltung jedoch mindesten 1~0 Sekunde.,50,1,79,3,);
L(25,12,25,14);
L(18,16,18,20);
L(42,8,46,8);
L(46,9,46,14);
L(30,15,30,17);
L(37,4,37,8);
L(51,4,51,7);
L(44,4,45,4);
L(45,5,45,6);
L(50,4,51,4);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 29 ;
        NETWORK_BODY
B(B_COMMENT,,switch control rc / cabine,1,1,28,2,);
B(B_F,@AND-4,,22,3,27,9,00N);
B(B_F,@AND-4,,22,9,27,15,);
B(B_F,@OR-2,,27,3,32,7,);
B(B_VAROUT,,MXrcChangeContro,37,4,39,6,);
B(B_VARIN,,LXcabinConInZero,20,4,22,6,);
B(B_VARIN,,ITXrcChangeCtrl,10,10,12,12,);
B(B_FB,R_TRIG,R_TRIG2,12,9,19,12,);
B(B_VARIN,,LXrcContrInZero,16,12,18,14,);
B(B_F,@OR-2,,27,15,32,19,);
B(B_FB,RS,RS1,32,3,37,7,);
B(B_VARIN,,IXrcChangeContro,9,24,11,26,);
B(B_FB,R_TRIG,R_TRIG3,11,23,18,26,);
B(B_F,@AND-3,,22,21,27,26,);
B(B_VAROUT,,LXsetRemControl,27,22,29,24,);
B(B_VARIN,,MXrcChangeContro,19,26,21,28,);
B(B_F,@AND-4,,22,15,27,21,);
B(B_VARIN,,LXallFuncInZero,16,19,18,21,);
B(B_VARIN,,CXrcSwitchContro,19,5,21,7,);
B(B_VARIN,,MXremContActive,18,6,20,8,);
L(27,6,27,11);
L(21,6,22,6);
L(20,7,22,7);
L(19,8,22,8);
L(20,7,20,12);
L(21,11,22,11);
L(20,12,22,12);
L(18,13,22,13);
L(32,6,32,17);
L(27,18,27,23);
L(18,25,22,25);
L(20,14,22,14);
L(21,24,22,24);
L(21,19,21,27);
L(19,8,19,18);
L(20,14,20,25);
L(22,20,22,23);
L(18,20,22,20);
L(21,19,22,19);
L(19,18,22,18);
L(21,17,22,17);
L(21,6,21,17);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 16 ;
        NETWORK_BODY
B(B_VAROUT,,MXremContActive,16,5,18,7,);
B(B_FB,SR,SR0,11,4,16,8,);
B(B_VARIN,,LXsetRemControl,9,5,11,7,);
B(B_VARIN,,MXrcChangeContro,9,6,11,8,);
B(B_COMMENT,,ACHTUNG: SR0 wird im init-Teil gesetzt!!!,16,4,34,5,);
B(B_F,@AND-2,,16,11,21,15,);
B(B_VARIN,,MXflashSignal,14,13,16,15,);
B(B_VAROUT,,QTXrcChangeCtrl,26,11,28,13,);
B(B_F,@AND-2,,16,7,21,11,NN);
B(B_F,@OR-2,,21,10,26,14,);
B(B_COMMENT,,set remote control active,1,1,27,2,);
L(21,9,21,12);
L(16,6,16,9);
L(11,10,16,10);
L(11,13,16,13);
L(11,7,11,13);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 30 ;
        NETWORK_BODY
B(B_COMMENT,,set stop all function by remote control,1,1,27,2,);
B(B_VAROUT,,MXrcStopAllFunct,36,6,38,8,);
B(B_VARIN,,IXrcSwitchedOn,29,8,31,10,);
B(B_F,@AND-2,,26,3,31,7,N);
B(B_VARIN,,IXremoteControl,24,4,26,6,);
B(B_VARIN,,MXrcModuleActive,24,7,26,9,);
B(B_VARIN,,IXhgRelFreefall,29,11,31,13,);
B(B_VARIN,,MXrcAdBlockRemCo,29,9,31,11,);
B(B_VARIN,,MXrcCanTimeout,29,12,31,14,);
B(B_FB,F_TRIG,F_TRIG1,13,16,20,19,);
B(B_FB,SR,SR3,25,16,30,20,);
B(B_VARIN,,MXremContRadioOk,11,13,13,15,);
B(B_VARIN,,MXrcChangeContro,10,14,12,16,);
B(B_F,@OR-11,,31,5,36,18,0NN0000N);
B(B_F,@AND-2,,20,25,25,29,);
B(B_VARIN,,LXcabinConInZero,18,27,20,29,);
B(B_VARIN,,LXrcContrInZero,18,19,20,21,);
B(B_FB,F_TRIG,F_TRIG2,12,22,19,25,);
B(B_FB,SR,SR4,25,22,30,26,);
B(B_VARIN,,CXrcRelAssemOper,14,11,16,13,);
B(B_VARIN,,MXassemblyOperat,14,10,16,12,);
B(B_F,@AND-2,,16,9,21,13,0N);
L(31,5,31,7);
L(26,6,26,8);
L(26,8,31,8);
L(13,14,13,18);
L(30,16,30,18);
L(30,16,31,16);
L(13,14,31,14);
L(12,15,31,15);
L(31,17,31,24);
L(20,18,25,18);
L(20,19,25,19);
L(20,19,20,27);
L(19,24,25,24);
L(12,15,12,24);
L(25,25,25,27);
L(30,24,31,24);
L(21,11,31,11);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_COMMENT,,lock sg free turn at X23,1,1,27,2,);
B(B_VARIN,,MXjoySgFreeTurn,9,7,11,9,);
B(B_VARIN,,MXremContActive,9,6,11,8,);
B(B_F,@AND-2,,11,5,16,9,0N);
B(B_VARIN,,MXrcChangeContro,14,3,16,5,);
B(B_F,@OR-2,,16,4,21,8,);
B(B_VAROUT,,MXrcLockFreeTurn,21,5,23,7,);
L(16,4,16,6);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_COMMENT,,travelling gear,1,1,27,2,);
B(B_F,@AND-2,,11,3,16,7,);
B(B_VAROUT,,QXadRCswitchTG,16,4,18,6,);
B(B_VARIN,,MXminEngineSpeed,9,5,11,7,);
B(B_VARIN,,MXremContActive,9,4,11,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_COMMENT,,cabine control is active or switching control,1,1,27,2,);
B(B_VARIN,,MXremContActive,9,4,11,6,);
B(B_JUMP,,display,16,4,18,6,);
B(B_F,not,,11,3,16,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL := RemCon: ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_VARIN,,IWrcJoyRightY,9,4,11,6,);
B(B_COMMENT,,joystick signals,1,1,27,2,);
B(B_F,@DIV,,23,3,28,7,);
B(B_VARIN,,-10.0,20,6,22,8,);
B(B_F,int_to_real,,11,3,21,6,);
B(B_COMMENT,,-/+1000.0 / -10.0 = signal -100 - 0 - 100%,16,8,33,9,);
B(B_F,sel,,36,2,41,7,);
B(B_VAROUT,,MDhg1PreJoySig,41,3,43,5,);
B(B_VARIN,,MDhg1PreJoySig,34,5,36,7,);
B(B_VARIN,,MXrcHoldValues,34,3,36,5,);
L(22,6,23,6);
L(22,6,22,7);
L(21,5,23,5);
L(28,5,36,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_VARIN,,IWrcJoyRightX,9,3,11,5,);
B(B_F,@DIV,,23,2,28,6,);
B(B_VARIN,,-10.0,20,5,22,7,);
B(B_F,int_to_real,,11,2,21,5,);
B(B_COMMENT,,-/+1000.0 / -10.0 = signal -100 - 0 - 100%,16,7,33,8,);
B(B_F,sel,,36,1,41,6,);
B(B_VARIN,,MDlgPreJoySig,34,4,36,6,);
B(B_VARIN,,MXrcHoldValues,34,2,36,4,);
B(B_VAROUT,,MDlgPreJoySig,41,2,43,4,);
L(22,5,23,5);
L(22,5,22,6);
L(21,4,23,4);
L(28,4,36,4);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_VARIN,,IWrcJoyLeftY,9,3,11,5,);
B(B_F,@DIV,,23,2,28,6,);
B(B_VARIN,,-10.0,20,5,22,7,);
B(B_F,int_to_real,,11,2,21,5,);
B(B_COMMENT,,-/+1000.0 / -10.0 = signal -100 - 0 - 100%,16,7,33,8,);
B(B_F,sel,,36,1,41,6,);
B(B_VARIN,,MDhg2PreJoySig,34,4,36,6,);
B(B_VARIN,,MXrcHoldValues,34,2,36,4,);
B(B_VAROUT,,MDhg2PreJoySig,41,2,43,4,);
L(22,5,23,5);
L(22,5,22,6);
L(21,4,23,4);
L(28,4,36,4);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_VARIN,,IWrcJoyLeftX,9,3,11,5,);
B(B_F,@DIV,,23,2,28,6,);
B(B_VARIN,,10.0,20,5,22,7,);
B(B_F,int_to_real,,11,2,21,5,);
B(B_COMMENT,,+/-1000.0 / 10.0 = signal -100 - 0 - 100%,16,7,33,8,);
B(B_F,sel,,36,1,41,6,);
B(B_VARIN,,MDsgPreJoySig,34,4,36,6,);
B(B_VARIN,,MXrcHoldValues,34,2,36,4,);
B(B_VAROUT,,MDsgPreJoySig,41,2,43,4,);
L(22,5,23,5);
L(22,5,22,6);
L(21,4,23,4);
L(28,4,36,4);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_VARIN,,IWrcJoyLeftZ,9,3,11,5,);
B(B_F,@DIV,,23,2,28,6,);
B(B_VARIN,,-10.0,20,5,22,7,);
B(B_F,int_to_real,,11,2,21,5,);
B(B_COMMENT,,+/-1000.0 / 10.0 = signal -100 - 0 - 100%,16,7,33,8,);
B(B_F,sel,,36,1,41,6,);
B(B_VARIN,,MDturnJoySignal,34,4,36,6,);
B(B_VARIN,,MXrcHoldValues,34,2,36,4,);
B(B_VAROUT,,MDturnJoySignal,41,2,43,4,);
L(22,5,23,5);
L(22,5,22,6);
L(21,4,23,4);
L(28,4,36,4);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VARIN,,IXrcLgWinchPrese,9,1,11,3,);
B(B_VAROUT,,MXjoyLgChange,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VARIN,,IXrcEngSpeedDown,9,1,11,3,);
B(B_VAROUT,,MXjoyEngSpeedDn,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VARIN,,IXrcEngSpeedUp,9,1,11,3,);
B(B_VAROUT,,MXjoyEngSpeedUp,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_FB,SR,SR5,11,2,16,6,0N);
B(B_VARIN,,MXrcHoldValues,9,4,11,6,);
B(B_VARIN,,IXrcWinchSynchro,9,3,11,5,);
B(B_VAROUT,,MXjoyWinchSyn,16,3,18,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_VARIN,,MXrcHoldValues,9,4,11,6,);
B(B_VAROUT,,MXjoySgFreeTurn,16,3,18,5,);
B(B_VARIN,,IXrcSgFreeTurn,9,3,11,5,);
B(B_FB,SR,SR6,11,2,16,6,0N);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VARIN,,IXrcAutomaticSta,9,1,11,3,);
B(B_VAROUT,,MXjoyAutomPresel,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VARIN,,IXrcEngSpeedStor,9,1,11,3,);
B(B_VAROUT,,MXjoyEngSpeStore,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VARIN,,IXrcFloCouWeiPre,9,1,11,3,);
B(B_VAROUT,,MXjoyFloaCouWei,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,IXrcLmlBypass,9,1,11,3,);
B(B_VAROUT,,MXrcBridgeLml,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 18 ;
        NETWORK_BODY
B(B_COMMENT,,engine start stop,1,1,27,2,);
B(B_FB,RS,RS2,29,4,34,8,);
B(B_VARIN,,LXrcEnableEngine,17,9,19,11,);
B(B_FB,R_TRIG,R_TRIG4,11,4,18,7,);
B(B_VARIN,,IXrcEngStartStop,9,5,11,7,);
B(B_F,@OR-2,,24,7,29,11,);
B(B_VAROUT,,LXrcEnableEngine,34,5,36,7,);
B(B_F,@AND-3,,19,7,24,12,);
B(B_F,@AND-2,,19,12,24,16,NN);
B(B_VARIN,,MXminEngineSpeed,17,10,19,12,);
B(B_VARIN,,T#0.5s,10,15,12,17,);
B(B_FB,TOF,TOF3,12,13,17,17,);
B(B_COMMENT,,Wenn Motor nicht angesprungen ist,25,14,41,15,);
L(19,6,19,9);
L(29,7,29,9);
L(24,10,24,14);
L(18,6,29,6);
L(11,6,11,15);
L(19,11,19,14);
L(11,15,12,15);
L(17,15,19,15);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_F,@AND-2,,11,1,16,5,);
B(B_VARIN,,IXrcEngStartStop,9,2,11,4,);
B(B_VAROUT,,MXrcStartEngine,16,2,18,4,);
B(B_VARIN,,LXrcEnableEngine,9,6,11,8,);
B(B_VAROUT,,MXrcStopEngine,16,6,18,8,);
B(B_F,@OR-2,,11,5,16,9,N);
B(B_VARIN,,LXrcEngForceStop,9,7,11,9,);
L(11,4,11,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_VARIN,,IXswitTravelGear,9,4,11,6,);
B(B_VAROUT,,MXswitTravelGear,16,4,18,6,);
B(B_F,@OR-5,,11,3,16,10,);
B(B_VARIN,,IXrcTgLeftForwar,9,5,11,7,);
B(B_VARIN,,IXrcTgLeftBackwa,9,6,11,8,);
B(B_VARIN,,IXrcTgRightForwa,9,7,11,9,);
B(B_VARIN,,IXrcTgRightBackw,9,8,11,10,);
B(B_COMMENT,,travelling gear,1,1,27,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 26 ;
        NETWORK_BODY
B(B_COMMENT,,set joystick in zero,1,1,28,2,);
B(B_VARIN,,0,10,5,12,7,);
B(B_VAROUT,,MXjoystickInZero,27,18,29,20,);
B(B_VARIN,,IWrcJoyRightX,9,8,11,10,);
B(B_VARIN,,IWrcJoyLeftY,9,12,11,14,);
B(B_F,@EQ-2,,13,3,18,7,);
B(B_F,@EQ-2,,13,7,18,11,);
B(B_F,@EQ-2,,13,11,18,15,);
B(B_VARIN,,MXswitTravelGear,20,23,22,25,);
B(B_VARIN,,IWrcJoyLeftX,9,16,11,18,);
B(B_F,@EQ-2,,13,15,18,19,);
B(B_F,@EQ-2,,13,19,18,23,);
B(B_VARIN,,IWrcJoyLeftZ,9,20,11,22,);
B(B_VARIN,,IWrcJoyRightY,11,4,13,6,);
B(B_F,@AND-6,,22,17,27,25,00000N);
L(12,6,13,6);
L(12,14,13,14);
L(12,10,13,10);
L(20,13,20,21);
L(21,9,21,20);
L(22,5,22,19);
L(21,20,22,20);
L(20,21,22,21);
L(19,22,22,22);
L(11,9,13,9);
L(11,13,13,13);
L(18,5,22,5);
L(18,9,21,9);
L(18,13,20,13);
L(11,17,13,17);
L(12,18,13,18);
L(18,17,19,17);
L(19,17,19,22);
L(18,21,18,23);
L(18,23,22,23);
L(12,6,12,22);
L(12,22,13,22);
L(11,21,13,21);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL := display: ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 26 ;
        NETWORK_BODY
B(B_COMMENT,,display number on the remote control,1,1,27,2,);
B(B_F,@AND-2,,22,3,27,7,0N);
B(B_VAROUT,,QXrcCraneSelBit1,27,4,29,6,);
B(B_F,@AND-2,,22,7,27,11,0N);
B(B_F,@AND-2,,22,11,27,15,0N);
B(B_F,@AND-2,,22,15,27,19,0N);
B(B_VAROUT,,QXrcCraneSelBit4,27,16,29,18,);
B(B_VAROUT,,QXrcCraneSelBit3,27,12,29,14,);
B(B_VAROUT,,QXrcCraneSelBit2,27,8,29,10,);
B(B_VARIN,,FALSE,18,4,20,6,);
B(B_VARIN,,TRUE,18,8,20,10,);
B(B_VARIN,,IXrcPresel3,18,12,20,14,);
B(B_VARIN,,IXrcPresel2,18,16,20,18,);
B(B_F,@OR-2,,16,18,21,22,);
B(B_VAROUT,,LXrcCraneSelBit2,27,9,29,11,);
B(B_VARIN,,IXhgRelFreefall,14,19,16,21,);
B(B_VARIN,,CXrcRelAssemOper,9,23,11,25,);
B(B_VARIN,,MXassemblyOperat,9,22,11,24,);
B(B_F,@AND-2,,11,21,16,25,0N);
L(20,17,22,17);
L(20,13,22,13);
L(20,9,22,9);
L(20,5,22,5);
L(21,6,22,6);
L(21,10,22,10);
L(21,14,22,14);
L(21,18,22,18);
L(21,6,21,20);
L(27,9,27,10);
L(16,21,16,23);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 18 ;
        NETWORK_BODY
B(B_F,sel,,18,10,23,15,);
B(B_F,sel,,23,9,28,14,);
B(B_F,sel,,28,8,33,13,);
B(B_F,sel,,33,7,38,12,);
B(B_F,sel,,38,6,43,11,);
B(B_VARIN,,0,9,12,11,14,);
B(B_F,to_int,,11,11,18,14,);
B(B_VARIN,,MXadWinSynWork,11,8,13,10,);
B(B_VARIN,,MXadGrabCoWork,11,9,13,11,);
B(B_F,@OR-2,,13,7,18,11,);
B(B_VARIN,,MXlmlWarning,21,6,23,8,);
B(B_VARIN,,MXrcBridgeLml,31,4,33,6,);
B(B_VARIN,,MXlmlStopScreen,26,5,28,7,);
B(B_VARIN,,MXassemblyOperat,36,3,38,5,);
B(B_VARIN,,23,16,14,18,16,);
B(B_VARIN,,11,21,15,23,17,);
B(B_VARIN,,49,36,12,38,14,);
B(B_VARIN,,48,31,13,33,15,);
B(B_VARIN,,10,26,14,28,16,);
B(B_COMMENT,,display status symbol 1,1,1,27,2,);
B(B_F,sel,,43,5,48,10,N);
B(B_F,sel,,55,3,60,8,);
B(B_VARIN,,LXrcFlashSignal,53,4,55,6,);
B(B_VARIN,,0,53,5,55,7,);
B(B_VAROUT,,QWrcStatusSym1,60,4,62,6,);
B(B_VARIN,,MXremContActive,41,2,43,4,);
B(B_VARIN,,43,41,11,43,13,);
L(18,14,18,15);
L(23,13,23,16);
L(18,9,18,12);
L(23,7,23,11);
L(28,6,28,10);
L(33,5,33,9);
L(38,4,38,8);
L(38,10,38,13);
L(33,11,33,14);
L(28,12,28,15);
L(48,7,55,7);
L(43,9,43,12);
L(43,3,43,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 28 ;
        NETWORK_BODY
B(B_F,sel,,38,16,43,21,);
B(B_VARIN,,53,36,22,38,24,);
B(B_F,sel,,43,15,48,20,);
B(B_VARIN,,54,41,21,43,23,);
B(B_F,@AND-3,,33,9,38,14,0N);
B(B_F,@AND-2,,33,5,38,9,);
B(B_VARIN,,MXderrickActive,31,12,33,14,);
B(B_F,sel,,23,19,28,24,);
B(B_F,sel,,18,20,23,25,);
B(B_VARIN,,MXaddHydrActive,16,19,18,21,);
B(B_VARIN,,47,16,24,18,26,);
B(B_VARIN,,FALSE,21,18,23,20,);
B(B_VARIN,,38,21,25,23,27,);
B(B_VARIN,,0,9,22,11,24,);
B(B_F,to_int,,11,21,18,24,);
B(B_VARIN,,55,26,24,28,26,);
B(B_VARIN,,MXfloaCouWeigAct,26,17,28,19,);
B(B_F,sel,,28,18,33,23,);
B(B_F,sel,,33,17,38,22,);
B(B_VARIN,,41,31,23,33,25,);
B(B_F,@OR-2,,28,14,33,18,);
B(B_VARIN,,MXmomRegEnabled,26,16,28,18,);
B(B_VARIN,,MXassemblyOperat,26,15,28,17,);
B(B_COMMENT,,Automatikbetrieb wurdeø^noch nicht eingebaut,7,17,19,19,);
B(B_F,sel,,48,14,53,19,);
B(B_VARIN,,46,46,20,48,22,);
B(B_VAROUT,,QWrcStatusSym2,53,15,55,17,);
B(B_COMMENT,,display status symbol 2,1,1,27,2,);
B(B_VARIN,,MXlg2Active,29,7,31,9,);
B(B_VARIN,,MXassemblyOperat,30,6,32,8,);
B(B_F,@AND-2,,33,1,38,5,);
B(B_VARIN,,MXaxwActive,31,2,33,4,);
L(38,20,38,23);
L(43,19,43,22);
L(38,7,43,7);
L(43,7,43,17);
L(38,11,38,18);
L(32,11,33,11);
L(31,12,33,12);
L(31,8,31,12);
L(31,8,33,8);
L(32,7,33,7);
L(23,19,23,21);
L(18,20,18,22);
L(18,24,18,25);
L(23,23,23,26);
L(28,18,28,20);
L(28,22,28,25);
L(33,21,33,24);
L(33,16,33,19);
L(48,18,48,21);
L(48,3,48,16);
L(32,4,33,4);
L(32,4,32,11);
L(38,3,48,3);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 26 ;
        NETWORK_BODY
B(B_F,sel,,23,17,28,22,);
B(B_VARIN,,54,21,23,23,25,);
B(B_F,@AND-2,,18,14,23,18,N);
B(B_F,sel,,28,16,33,21,);
B(B_VARIN,,55,26,22,28,24,);
B(B_F,sel,,18,18,23,23,);
B(B_VARIN,,0,9,20,11,22,);
B(B_F,to_int,,11,19,18,22,);
B(B_VARIN,,53,16,22,18,24,);
B(B_VARIN,,MXlmlFix_LuffJib,16,17,18,19,);
B(B_F,sel,,33,15,38,20,);
B(B_VAROUT,,QWrcStatusSym3,38,16,40,18,);
B(B_VARIN,,46,31,21,33,23,);
B(B_F,@AND-3,,23,7,28,12,00N);
B(B_F,@AND-2,,18,10,23,14,);
B(B_VARIN,,MXderrickActive,14,11,16,13,);
B(B_VARIN,,MXlg2Active,14,12,16,14,);
B(B_VARIN,,MXassemblyOperat,15,9,17,11,);
B(B_COMMENT,,display status symbol 3,1,1,27,2,);
B(B_F,@AND-2,,23,3,28,7,0N);
B(B_VARIN,,MXaxwActive,21,4,23,6,);
B(B_VARIN,,MXlmlDerrickEnab,19,8,21,10,);
L(23,21,23,24);
L(23,16,23,19);
L(28,20,28,23);
L(28,9,28,18);
L(18,22,18,23);
L(18,18,18,20);
L(17,16,18,16);
L(16,17,18,17);
L(33,19,33,22);
L(33,5,33,17);
L(23,11,23,12);
L(17,10,17,16);
L(16,13,16,17);
L(16,12,18,12);
L(16,13,18,13);
L(17,10,23,10);
L(22,6,23,6);
L(28,5,33,5);
L(21,9,23,9);
L(22,6,22,10);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 28 ;
        NETWORK_BODY
B(B_COMMENT,,display status symbol 4,1,1,27,2,);
B(B_F,sel,,18,20,23,25,N);
B(B_F,sel,,23,19,28,24,);
B(B_F,sel,,28,18,33,23,);
B(B_F,sel,,33,17,38,22,);
B(B_VARIN,,0,9,22,11,24,);
B(B_F,to_int,,11,21,18,24,);
B(B_VARIN,,39,16,24,18,26,);
B(B_VARIN,,52,21,25,23,27,);
B(B_VARIN,,51,31,23,33,25,);
B(B_VARIN,,50,26,24,28,26,);
B(B_FB,SR,SR7,28,3,33,7,);
B(B_FB,RS,RS3,23,6,28,10,0N);
B(B_VARIN,,IXrcAcknowBeeper,21,7,23,9,);
B(B_VAROUT,,LX1,33,4,35,6,);
B(B_VARIN,,LX1,21,8,23,10,);
B(B_VARIN,,IXrcAcknowBeeper,16,15,18,17,);
B(B_VAROUT,,LX2,28,12,30,14,);
B(B_VARIN,,LX2,16,16,18,18,);
B(B_FB,SR,SR8,23,11,28,15,);
B(B_FB,RS,RS4,18,14,23,18,0N);
B(B_VARIN,,IXengLubOilPresE,26,4,28,6,);
B(B_VARIN,,IXengCharging,16,19,18,21,);
B(B_VARIN,,MXfuelContWarnin,21,18,23,20,);
B(B_F,sel,,47,16,52,21,);
B(B_VARIN,,44,45,19,47,21,);
B(B_VARIN,,LXerrorSymbol,45,17,47,19,);
B(B_VAROUT,,QWrcStatusSym4,66,15,68,17,);
B(B_VARIN,,LXrcFlashSignal,59,15,61,17,);
B(B_VARIN,,0,59,16,61,18,);
B(B_F,sel,,61,14,66,19,);
B(B_VARIN,,MXhydrOilContWar,16,11,18,13,);
B(B_VARIN,,MXhydrOilContErr,16,12,18,14,);
B(B_F,@OR-2,,18,10,23,14,);
L(18,24,18,25);
L(23,23,23,26);
L(28,22,28,25);
L(33,21,33,24);
L(28,6,28,8);
L(33,5,33,19);
L(23,14,23,16);
L(28,13,28,20);
L(18,20,18,22);
L(23,19,23,21);
L(38,19,47,19);
L(52,18,61,18);
L(23,12,23,13);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 16 ;
        NETWORK_BODY
B(B_F,sel,,27,8,32,13,);
B(B_F,sel,,32,7,37,12,);
B(B_F,sel,,37,6,42,11,);
B(B_F,sel,,42,5,47,10,);
B(B_F,sel,,47,4,52,9,);
B(B_F,sel,,52,3,57,8,);
B(B_VARIN,,0,18,10,20,12,);
B(B_F,to_int,,20,9,27,12,);
B(B_VARIN,,67,25,12,27,14,);
B(B_VARIN,,26,30,13,32,15,);
B(B_F,sel,,57,2,62,7,);
B(B_VAROUT,,QWrcStatusSym5,62,3,64,5,);
B(B_VARIN,,FALSE,30,6,32,8,);
B(B_VARIN,,FALSE,45,3,47,5,);
B(B_VARIN,,FALSE,40,4,42,6,);
B(B_VARIN,,FALSE,35,5,37,7,);
B(B_VARIN,,MXscOneLimitSw,50,2,52,4,);
B(B_VARIN,,27,35,12,37,14,);
B(B_VARIN,,31,40,11,42,13,);
B(B_VARIN,,32,45,10,47,12,);
B(B_VARIN,,36,50,9,52,11,);
B(B_VARIN,,45,55,8,57,10,);
B(B_VARIN,,MXlimitSwBridged,55,1,57,3,);
B(B_F,@OR-3,,22,4,27,9,);
B(B_VARIN,,IXengPreheatActi,20,5,22,7,);
B(B_VARIN,,IXengPreheatStar,20,6,22,8,);
B(B_VARIN,,IXengPostheatAct,20,7,22,9,);
B(B_COMMENT,,display status symbol 5,1,1,27,2,);
L(27,12,27,13);
L(32,11,32,14);
L(57,2,57,4);
L(32,7,32,9);
L(47,4,47,6);
L(42,5,42,7);
L(37,6,37,8);
L(52,3,52,5);
L(37,10,37,13);
L(42,9,42,12);
L(47,8,47,11);
L(52,7,52,10);
L(57,6,57,9);
L(27,6,27,10);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 15 ;
        NETWORK_BODY
B(B_FB,GetMessageState,GetMsgState1,11,4,25,11,);
B(B_VARIN,,'CAN1',9,5,11,7,);
B(B_F,@SUB,,28,10,33,14,);
B(B_VAROUT,,LWcurrentMsg,28,9,30,11,);
B(B_VAROUT,,LWactiveMsg,33,11,35,13,);
B(B_COMMENT,,check Messages,1,1,27,2,);
B(B_VARIN,,IXrcAcknowBeeper,34,3,36,5,);
B(B_FB,R_TRIG,R_TRIG5,36,2,43,5,);
B(B_FB,MultiMessageAck,MultiMsgAck1,43,2,54,8,);
B(B_VARIN,,'CAN1',41,4,43,6,);
L(27,8,27,13);
L(28,10,28,12);
L(25,10,28,10);
L(25,8,27,8);
L(27,13,28,13);
L(25,6,43,6);
L(25,7,43,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 61 ;
        NETWORK_BODY
B(B_FB,RS,RS5,47,9,52,13,);
B(B_VARIN,,LWactiveMsg,45,5,47,7,);
B(B_VARIN,,0,45,6,47,8,);
B(B_F,@GT-2,,47,4,52,8,);
B(B_F,@OR-3,,53,4,58,9,);
B(B_F,@AND-3,,59,2,64,7,NN);
B(B_VAROUT,,QXrcBuzzerType1,64,3,66,5,);
B(B_VARIN,,MXrcChangeContro,56,2,58,4,);
B(B_VARIN,,MXfuelContWarnin,20,13,22,15,);
B(B_VARIN,,20.0,15,20,17,22,);
B(B_F,@GT-2,,17,18,22,22,);
B(B_VARIN,,MDwindSpeed,15,19,17,21,);
B(B_F,@OR-2,,42,33,47,37,);
B(B_F,@AND-2,,17,9,22,13,NN);
B(B_VARIN,,MXrcLudvMachine,15,11,17,13,);
B(B_VARIN,,IXgearOilTempOk,15,10,17,12,);
B(B_VARIN,,MXwarnHydrOilTem,20,16,22,18,);
B(B_F,@AND-7,,31,33,36,42,NNNNNNN);
B(B_VAROUT,,LXwindWarn,26,6,28,8,);
B(B_F,@OR-7,,42,9,47,18,);
B(B_FB,R_TRIG,R_TRIG6,30,9,37,12,);
B(B_FB,R_TRIG,R_TRIG7,30,12,37,15,);
B(B_FB,R_TRIG,R_TRIG8,30,15,37,18,);
B(B_FB,R_TRIG,R_TRIG9,30,18,37,21,);
B(B_FB,R_TRIG,R_TRIG10,30,22,37,25,);
B(B_FB,R_TRIG,R_TRIG11,30,26,37,29,);
B(B_FB,R_TRIG,R_TRIG12,30,30,37,33,);
B(B_VARIN,,IXrcAcknowBeeper,36,42,38,44,);
B(B_FB,R_TRIG,R_TRIG13,30,45,37,48,);
B(B_FB,R_TRIG,R_TRIG14,30,48,37,51,);
B(B_FB,R_TRIG,R_TRIG15,30,52,37,55,);
B(B_FB,R_TRIG,R_TRIG16,30,56,37,59,);
B(B_F,@AND-2,,25,52,30,56,NN);
B(B_VARIN,,MXrcLudvMachine,23,54,25,56,);
B(B_F,@AND-2,,25,56,30,60,NN);
B(B_VARIN,,MXrcLudvMachine,23,58,25,60,);
B(B_VARIN,,IXhg1FeedPressOk,23,53,25,55,);
B(B_VARIN,,IXhg2FeedPressOk,23,57,25,59,);
B(B_FB,RS,RS6,48,45,53,49,);
B(B_F,@OR-4,,41,45,46,51,);
B(B_VARIN,,IXengCoolWatConE,23,23,25,25,);
B(B_VARIN,,IXengCooWatTempE,22,27,24,29,);
B(B_VARIN,,IXengSpeedHighE,21,31,23,33,);
B(B_VARIN,,IXengLubOilPresE,28,49,30,51,);
B(B_VARIN,,LXlmlBuzzer,57,1,59,3,);
B(B_COMMENT,,display buzzer,1,1,27,2,);
B(B_VARIN,,MXhydrOilContWar,23,46,25,48,);
B(B_VARIN,,MXhydrOilContErr,23,47,25,49,);
B(B_F,@OR-2,,25,45,30,49,);
L(37,12,37,14);
L(38,13,38,17);
L(52,7,52,11);
L(52,6,53,6);
L(52,7,53,7);
L(58,6,59,6);
L(58,5,59,5);
L(58,3,58,5);
L(47,12,47,35);
L(38,36,42,36);
L(36,35,42,35);
L(29,11,29,35);
L(28,14,28,36);
L(27,17,27,37);
L(26,20,26,38);
L(29,35,31,35);
L(28,36,31,36);
L(27,37,31,37);
L(26,38,31,38);
L(25,39,31,39);
L(25,24,25,39);
L(24,28,24,40);
L(23,32,23,41);
L(23,41,31,41);
L(24,40,31,40);
L(39,14,39,20);
L(40,15,40,24);
L(41,16,41,28);
L(42,17,42,32);
L(26,7,26,20);
L(37,12,42,12);
L(38,13,42,13);
L(39,14,42,14);
L(40,15,42,15);
L(41,16,42,16);
L(22,11,30,11);
L(37,11,42,11);
L(22,14,30,14);
L(22,17,30,17);
L(37,17,38,17);
L(22,20,30,20);
L(37,20,39,20);
L(37,24,40,24);
L(37,28,41,28);
L(37,32,42,32);
L(53,8,53,47);
L(47,48,48,48);
L(47,43,47,48);
L(38,43,47,43);
L(38,36,38,43);
L(38,48,41,48);
L(37,58,40,58);
L(37,54,39,54);
L(38,48,38,50);
L(37,50,38,50);
L(39,49,39,54);
L(40,50,40,58);
L(39,49,41,49);
L(40,50,41,50);
L(37,47,41,47);
L(46,47,48,47);
L(25,24,30,24);
L(24,28,30,28);
L(23,32,30,32);
L(59,2,59,4);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 25 ;
        NETWORK_BODY
B(B_VARIN,,0,24,3,26,5,);
B(B_F,@GT-2,,26,1,31,5,);
B(B_F,@OR-2,,31,1,36,5,);
B(B_VAROUT,,LXerrorSymbol,36,2,38,4,);
B(B_VARIN,,LWcurrentMsg,24,2,26,4,);
B(B_VARIN,,IXengCoolWatConE,24,7,26,9,);
B(B_VARIN,,IXengCooWatTempE,24,8,26,10,);
B(B_VARIN,,MXwarnHydrOilTem,24,9,26,11,);
B(B_VARIN,,IXengSpeedHighE,24,10,26,12,);
B(B_F,@AND-2,,19,12,24,16,NN);
B(B_F,@AND-2,,19,16,24,20,NN);
B(B_F,@AND-2,,19,20,24,24,NN);
B(B_VARIN,,MXrcLudvMachine,17,14,19,16,);
B(B_VARIN,,MXrcLudvMachine,17,18,19,20,);
B(B_VARIN,,MXrcLudvMachine,17,22,19,24,);
B(B_VARIN,,IXgearOilTempOk,17,13,19,15,);
B(B_VARIN,,IXhg1FeedPressOk,17,17,19,19,);
B(B_VARIN,,IXhg2FeedPressOk,17,21,19,23,);
B(B_COMMENT,,Da es für Speisedruck kein Symbol gibt~ wird hier nur ERRORø^eingeblendet~ deshalb verschwindet das Symbol undø^der Piepser wieder wenn der Fehler weg ist. (Anders als beimø^Monitor in der Kabine),27,18,55,22,);
B(B_VARIN,,IXengRequireStop,24,6,26,8,);
B(B_F,@OR-8,,26,5,31,15,);
L(24,12,24,14);
L(24,12,26,12);
L(25,13,26,13);
L(24,18,25,18);
L(25,13,25,18);
L(26,14,26,22);
L(24,22,26,22);
L(31,4,31,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 23 ;
        NETWORK_BODY
B(B_FB,R_TRIG,R_TRIG17,25,7,32,10,);
B(B_FB,TOF,TOF4,32,7,37,11,);
B(B_FB,RS,RS7,25,2,30,6,0N);
B(B_F,@AND-2,,37,2,42,6,N);
B(B_F,@AND-2,,37,6,42,10,);
B(B_VARIN,,T#5.0s,30,10,32,12,);
B(B_FB,TOF,TOF5,32,17,37,21,);
B(B_F,@AND-2,,37,12,42,16,N);
B(B_F,@AND-2,,37,16,42,20,);
B(B_VARIN,,T#5.0s,30,20,32,22,);
B(B_FB,R_TRIG,R_TRIG18,25,17,32,20,);
B(B_FB,RS,RS8,25,12,30,16,0N);
B(B_F,@AND-2,,17,4,22,8,0N);
B(B_VARIN,,MXrcChangeContro,15,6,17,8,);
B(B_VARIN,,MXlmlWarning,15,5,17,7,);
B(B_F,@AND-2,,17,14,22,18,0N);
B(B_VARIN,,MXrcChangeContro,15,16,17,18,);
B(B_VARIN,,MXlmlStopScreen,15,15,17,17,);
B(B_VARIN,,IXrcAcknowBeeper,22,2,24,4,);
B(B_F,@OR-2,,42,2,47,6,);
B(B_F,@OR-2,,42,12,47,16,);
B(B_F,@OR-2,,47,7,52,11,);
B(B_VAROUT,,LXlmlBuzzer,52,8,54,10,);
B(B_VAROUT,,MXrcLmlSounder,47,13,49,15,);
L(30,4,37,4);
L(37,5,37,8);
L(32,10,32,11);
L(25,6,37,6);
L(24,4,25,4);
L(22,6,25,6);
L(30,14,37,14);
L(37,15,37,18);
L(32,20,32,21);
L(24,14,25,14);
L(22,16,25,16);
L(25,16,37,16);
L(24,3,24,14);
L(25,5,25,9);
L(25,15,25,19);
L(42,5,42,8);
L(42,15,42,18);
L(47,10,47,14);
L(47,4,47,9);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_VARIN,,MXlmlStopScreen,10,3,12,5,);
B(B_F,@AND-2,,14,1,19,5,0N);
B(B_F,@AND-2,,14,5,19,9,);
B(B_VAROUT,,QXrcBuzzerType2,19,2,21,4,);
B(B_VAROUT,,QXrcBuzzerType3,19,6,21,8,);
B(B_VARIN,,LXlmlBuzzer,11,2,13,4,);
L(13,3,14,3);
L(12,4,14,4);
L(13,3,13,7);
L(13,7,14,7);
L(12,8,14,8);
L(12,4,12,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_VARIN,,MXengSpeedStore,9,4,11,6,);
B(B_F,@AND-2,,18,3,23,7,0N);
B(B_VARIN,,LXerrorSymbol,11,7,13,9,);
B(B_FB,R_TRIG,R_TRIG19,11,3,18,6,);
B(B_F,@OR-2,,23,2,28,6,);
B(B_VAROUT,,QXrcBuzzerType4,28,3,30,5,);
B(B_VARIN,,MXrcChangeContro,21,1,23,3,);
B(B_VARIN,,LXlmlBuzzer,11,8,13,10,);
B(B_F,@OR-2,,13,6,18,10,);
L(18,6,18,8);
L(23,2,23,4);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_VAROUT,,QXrcStopSymbol,11,3,13,5,);
B(B_VARIN,,TRUE,9,3,11,5,);
B(B_COMMENT,,display symbols,1,1,27,2,);
B(B_COMMENT,,Erscheint nur wenn kein Code fürø^die Seitenvorwahl gesendet wird,27,3,41,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_F,sel,,11,1,16,6,);
B(B_VARIN,,LXrcFlashSignal,9,4,11,6,);
B(B_VARIN,,TRUE,9,3,11,5,);
B(B_VARIN,,LXwindWarn,9,2,11,4,);
B(B_VAROUT,,QXrcWindSpeed,16,2,18,4,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,MXminEngineSpeed,9,1,11,3,);
B(B_VAROUT,,QXrcEngineRunnin,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VAROUT,,QXrcArrowSymUp,11,1,13,3,);
B(B_VARIN,,MXhg1WinchLift,9,1,11,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,MXhg1WinchLower,9,1,11,3,);
B(B_VAROUT,,QXrcArrowSymDown,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 5 ;
        NETWORK_BODY
B(B_VAROUT,,QXrcArrowSymLeft,11,1,13,3,);
B(B_VAROUT,,QXrcArrowSymRigh,11,2,13,4,);
B(B_VARIN,,TRUE,9,1,11,3,);
L(11,2,11,3);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,MXlmlDerrickEnab,9,1,11,3,);
B(B_VAROUT,,QXrcUtilBackward,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_COMMENT,,display analog values,1,1,27,2,);
B(B_VARIN,,MXlmlLoadOnJib,9,4,11,6,);
B(B_F,sel,,11,3,16,8,);
B(B_VARIN,,MDlmlLoadLuffJib,9,6,11,8,);
B(B_VARIN,,MDlmlLoadBoom,9,5,11,7,);
B(B_F,real_to_int,,16,3,26,6,);
B(B_VAROUT,,QWrcActualLoad,26,4,28,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_VARIN,,MXlmlLoadOnJib,9,2,11,4,);
B(B_F,sel,,11,1,16,6,);
B(B_VARIN,,MDlmlMaxLoad1,9,3,11,5,);
B(B_VARIN,,MDlmlMaxLoad2,9,4,11,6,);
B(B_F,real_to_int,,16,1,26,4,);
B(B_VAROUT,,QWrcMaximumLoad,26,2,28,4,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_F,@MUL-2,,20,1,25,5,);
B(B_VARIN,,10.0,18,3,20,5,);
B(B_F,real_to_int,,25,1,35,4,);
B(B_VARIN,,MXlmlLoadOnJib,9,2,11,4,);
B(B_F,sel,,11,1,16,6,);
B(B_VAROUT,,QWrcLoadRadius,35,2,37,4,);
B(B_VARIN,,MDlmlRadiusMBoom,9,3,11,5,);
B(B_VARIN,,MDlmlRadiusLJib,9,4,11,6,);
L(16,3,20,3);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_F,@MUL-2,,20,1,25,5,);
B(B_VARIN,,10.0,18,3,20,5,);
B(B_F,real_to_int,,25,1,35,4,);
B(B_VARIN,,MXlmlLoadOnJib,9,2,11,4,);
B(B_F,sel,,11,1,16,6,);
B(B_VARIN,,MDlmlMaxHight1,9,3,11,5,);
B(B_VARIN,,MDlmlMaxHight2,9,4,11,6,);
B(B_VAROUT,,QWrcHeadHight,35,2,37,4,);
L(16,3,20,3);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_F,@MUL-2,,11,1,16,5,);
B(B_VARIN,,10.0,9,3,11,5,);
B(B_F,real_to_int,,16,1,26,4,);
B(B_VARIN,,MDwindSpeed,9,2,11,4,);
B(B_VAROUT,,QWrcWindSpeed,26,2,28,4,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_F,real_to_int,,11,3,21,6,);
B(B_VARIN,,MDlmlUtilization,9,4,11,6,);
B(B_F,limit,,21,1,27,6,);
B(B_VAROUT,,QWrcUtilization,27,2,29,4,);
B(B_VARIN,,0,19,1,21,3,);
L(21,4,21,5);
L(21,2,21,3);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_F,real_to_int,,11,3,21,6,);
B(B_VARIN,,MDlmlUtilBackwar,9,4,11,6,);
B(B_F,limit,,21,1,27,6,);
B(B_VAROUT,,QWrcUtilizationB,27,2,29,4,);
B(B_VARIN,,0,19,1,21,3,);
L(21,4,21,5);
L(21,2,21,3);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_F,@MUL-2,,11,1,16,5,);
B(B_VARIN,,10.0,9,3,11,5,);
B(B_F,real_to_int,,16,1,26,4,);
B(B_VAROUT,,QWrcVibrFrequenc,26,2,28,4,);
B(B_VARIN,,MDvibrFrequency,9,2,11,4,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_F,sel,,11,1,16,6,);
B(B_F,real_to_int,,16,1,26,4,);
B(B_VAROUT,,QWrcEngSpe_ClaPr,26,2,28,4,);
B(B_VARIN,,IXrcPresel3,9,2,11,4,);
B(B_VARIN,,MDpresenEngSpeed,9,3,11,5,);
B(B_VARIN,,MDvibClampPress,9,4,11,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_F,sel,,26,1,31,6,);
B(B_F,real_to_int,,31,1,41,4,);
B(B_VAROUT,,QWrcRopeLe_Pres1,41,2,43,4,);
B(B_VARIN,,IXrcPresel3,24,2,26,4,);
B(B_VARIN,,MDadHyLudv1Press,24,4,26,6,);
B(B_F,@MUL-2,,11,2,16,6,);
B(B_VARIN,,10.0,9,4,11,6,);
B(B_VARIN,,MDscRopeLenHg1,9,3,11,5,);
L(16,4,26,4);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_F,sel,,11,1,16,6,);
B(B_F,real_to_int,,16,1,26,4,);
B(B_VAROUT,,QWrcFuelCo_Pres2,26,2,28,4,);
B(B_VARIN,,IXrcPresel3,9,2,11,4,);
B(B_VARIN,,SRfuelCont,9,3,11,5,);
B(B_VARIN,,MDadHyLudv2Press,9,4,11,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,exit program,1,1,27,2,);
B(B_VARIN,,MXrcChangeContro,9,3,11,5,);
B(B_JUMP,,Switch,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,exit program,1,1,27,2,);
B(B_VARIN,,TRUE,9,3,11,5,);
B(B_RETURN,,,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL := Switch: ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 20 ;
        NETWORK_BODY
B(B_COMMENT,,reset control elements,1,1,27,2,);
B(B_VAROUT,,MXjoyPolyGrapPre,11,3,13,5,);
B(B_VAROUT,,MXjoyFloaCouWei,11,4,13,6,);
B(B_VAROUT,,MXjoyLowerCont,11,5,13,7,);
B(B_VAROUT,,MXjoyLgChange,11,6,13,8,);
B(B_VAROUT,,MXjoyEngSpeedDn,11,7,13,9,);
B(B_VAROUT,,MXjoyEngSpeedUp,11,8,13,10,);
B(B_VAROUT,,MXjoyEngSpeStore,11,9,13,11,);
B(B_VAROUT,,MXjoyAutomPresel,11,13,13,15,);
B(B_VAROUT,,MXjoySgFreeTurn,11,12,13,14,);
B(B_VAROUT,,MXjoyGrapCont,11,11,13,13,);
B(B_VAROUT,,MXjoyWinchSyn,11,10,13,12,);
B(B_VAROUT,,MXjoyStabWiFreeF,11,14,13,16,);
B(B_VAROUT,,MXjoyStabWiFullP,11,15,13,17,);
B(B_VAROUT,,MXjoyBridgeFastS,11,16,13,18,);
B(B_VAROUT,,MXswitTravelGear,11,17,13,19,);
B(B_VARIN,,FALSE,9,3,11,5,);
L(11,4,11,18);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_VARIN,,0.0,9,1,11,3,);
B(B_VAROUT,,MDhg1PreJoySig,11,1,13,3,);
B(B_VAROUT,,MDsgPreJoySig,11,4,13,6,);
B(B_VAROUT,,MDhg2PreJoySig,11,2,13,4,);
B(B_VAROUT,,MDlgPreJoySig,11,3,13,5,);
B(B_VAROUT,,MDturnJoySignal,11,5,13,7,);
L(11,2,11,6);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_VARIN,,0,9,1,11,3,);
B(B_VAROUT,,QWriJoyAna1Vibr,11,1,13,3,);
B(B_VAROUT,,QWleJoyAna2Vibr,11,4,13,6,);
B(B_VAROUT,,QWleJoyAna1Vibr,11,3,13,5,);
B(B_VAROUT,,QWriJoyAna2Vibr,11,2,13,4,);
L(11,2,11,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,exit program,1,1,27,2,);
B(B_VARIN,,TRUE,9,3,11,5,);
B(B_RETURN,,,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL := init: ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,init program,1,1,27,2,);
B(B_VARIN,,TRUE,9,3,11,5,);
B(B_VAROUT,,LXinitOk,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_COMMENT,,set control change switch flip-flop to rc,1,1,27,2,);
B(B_VAROUT,,MXremContActive,16,5,18,7,);
B(B_VARIN,,TRUE,9,5,11,7,);
B(B_VARIN,,FALSE,9,6,11,8,);
B(B_FB,SR,SR0,11,4,16,8,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value,1,1,27,2,);
B(B_FB,CorrValue_Bool,CorrValue_Bool1,11,4,23,10,);
B(B_VARIN,,CXremoteControl,9,8,11,10,);
B(B_VARIN,,FALSE,9,5,11,7,);
B(B_VARIN,,FALSE,9,6,11,8,);
B(B_VARIN,,TRUE,9,7,11,9,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value,1,1,27,2,);
B(B_FB,CorrValue_Bool,CorrValue_Bool2,11,4,23,10,);
B(B_VARIN,,CXrcSwitchContro,9,8,11,10,);
B(B_VARIN,,FALSE,9,5,11,7,);
B(B_VARIN,,FALSE,9,6,11,8,);
B(B_VARIN,,TRUE,9,7,11,9,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value,1,1,27,2,);
B(B_FB,CorrValue_Bool,CorrValue_Bool3,11,4,23,10,);
B(B_VARIN,,CXrcRelAssemOper,9,8,11,10,);
B(B_VARIN,,FALSE,9,5,11,7,);
B(B_VARIN,,FALSE,9,6,11,8,);
B(B_VARIN,,TRUE,9,7,11,9,);
        END_NETWORK_BODY
    END_NET_WORK
END_BODY
END_PROGRAM

PROGRAM ADserviceBoxV011
	VAR_EXTERNAL 
		IWmeasurInput1: UINT:=0;
			(*measuring input 1*)
		IWmeasurInput2: UINT:=0;
			(*measuring input 2*)
		IWmeasurInput3: UINT:=0;
			(*measuring input 3*)
		IWmeasurInput4: UINT:=0;
			(*measuring input 4*)
		IWmeasurInput5: UINT:=0;
			(*measuring input 5*)
		IWmeasurInput6: UINT:=0;
			(*measuring input 6*)
		IWmeasurInput7: UINT:=0;
			(*measuring input 7*)
		IWmeasurInput8: UINT:=0;
			(*measuring input 8*)
		IWmeasurInput9: UINT:=0;
			(*measuring input 9*)
		IWmeasurInput10: UINT:=0;
			(*measuring input 10*)
		IWmeasurInput11: UINT:=0;
			(*measuring input 11*)
		IWmeasurInput12: UINT:=0;
			(*measuring input 12*)
		IWmeasurInput13: UINT:=0;
			(*measuring input 13*)
		IWmeasurInput14: UINT:=0;
			(*measuring input 14*)
		IWmeasurInput15: UINT:=0;
			(*measuring input 15*)
		IWmeasurInput16: UINT:=0;
			(*measuring input 16*)
		MDscaledInput1: REAL:=0.0;
			(*scaled measuring input 1*)
		MDscaledInput2: REAL:=0.0;
			(*scaled measuring input 2*)
		MDscaledInput3: REAL:=0.0;
			(*scaled measuring input 3*)
		MDscaledInput4: REAL:=0.0;
			(*scaled measuring input 4*)
		MDscaledInput5: REAL:=0.0;
			(*scaled measuring input 5*)
		MDscaledInput6: REAL:=0.0;
			(*scaled measuring input 6*)
		MDscaledInput7: REAL:=0.0;
			(*scaled measuring input 7*)
		MDscaledInput8: REAL:=0.0;
			(*scaled measuring input 8*)
		MDscaledInput9: REAL:=0.0;
			(*scaled measuring input 9*)
		MDscaledInput10: REAL:=0.0;
			(*scaled measuring input 10*)
		MDscaledInput11: REAL:=0.0;
			(*scaled measuring input 11*)
		MDscaledInput12: REAL:=0.0;
			(*scaled measuring input 12*)
		MDscaledInput13: REAL:=0.0;
			(*scaled measuring input 13*)
		MDscaledInput14: REAL:=0.0;
			(*scaled measuring input 14*)
		MDscaledInput15: REAL:=0.0;
			(*scaled measuring input 15*)
		MDscaledInput16: REAL:=0.0;
			(*scaled measuring input 16*)
	END_VAR
	VAR_EXTERNAL CONSTANT RETAIN
		CDscaleInput1: REAL:=0.0;
			(*scale measuring input 1*)
		CDscaleInput2: REAL:=0.0;
			(*scale measuring input 2*)
		CDscaleInput3: REAL:=0.0;
			(*scale measuring input 3*)
		CDscaleInput4: REAL:=0.0;
			(*scale measuring input 4*)
		CDscaleInput5: REAL:=0.0;
			(*scale measuring input 5*)
		CDscaleInput6: REAL:=0.0;
			(*scale measuring input 6*)
		CDscaleInput7: REAL:=0.0;
			(*scale measuring input 7*)
		CDscaleInput8: REAL:=0.0;
			(*scale measuring input 8*)
		CDscaleInput9: REAL:=0.0;
			(*scale measuring input 9*)
		CDscaleInput10: REAL:=0.0;
			(*scale measuring input 10*)
		CDscaleInput11: REAL:=0.0;
			(*scale measuring input 11*)
		CDscaleInput12: REAL:=0.0;
			(*scale measuring input 12*)
		CDscaleInput13: REAL:=0.0;
			(*scale measuring input 13*)
		CDscaleInput14: REAL:=0.0;
			(*scale measuring input 14*)
		CDscaleInput15: REAL:=0.0;
			(*scale measuring input 15*)
		CDscaleInput16: REAL:=0.0;
			(*scale measuring input 16*)
	END_VAR
	VAR 
		LXinitOk: BOOL:=FALSE;
			(*init completed*)
		LXmod48Timeout: BOOL:=FALSE;
			(*modul 48 is in time_out*)
		LXmod48IsActiv: BOOL:=FALSE;
			(*modul 48 is activ*)
		ModuleState1: ModuleState;
		ScaleAI1: ScaleAI;
		ScaleAI2: ScaleAI;
		ScaleAI3: ScaleAI;
		ScaleAI4: ScaleAI;
		ScaleAI5: ScaleAI;
		ScaleAI6: ScaleAI;
		ScaleAI7: ScaleAI;
		ScaleAI8: ScaleAI;
		ScaleAI9: ScaleAI;
		ScaleAI10: ScaleAI;
		ScaleAI11: ScaleAI;
		ScaleAI12: ScaleAI;
		ScaleAI13: ScaleAI;
		ScaleAI14: ScaleAI;
		ScaleAI15: ScaleAI;
		ScaleAI16: ScaleAI;
		CorrValue_Real1: CorrValue_Real;
		CorrValue_Real2: CorrValue_Real;
		CorrValue_Real3: CorrValue_Real;
		CorrValue_Real4: CorrValue_Real;
		CorrValue_Real5: CorrValue_Real;
		CorrValue_Real6: CorrValue_Real;
		CorrValue_Real7: CorrValue_Real;
		CorrValue_Real8: CorrValue_Real;
		CorrValue_Real9: CorrValue_Real;
		CorrValue_Real10: CorrValue_Real;
		CorrValue_Real11: CorrValue_Real;
		CorrValue_Real12: CorrValue_Real;
		CorrValue_Real13: CorrValue_Real;
		CorrValue_Real14: CorrValue_Real;
		CorrValue_Real15: CorrValue_Real;
		CorrValue_Real16: CorrValue_Real;
	END_VAR
'FBD'
BODY
    WORKSPACE
        NETWORK_LIST_TYPE := NWTYPEFBD ;
        ACTIVE_NETWORK := 0 ;
    END_WORKSPACE
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_COMMENT,,init first time,1,1,27,2,);
B(B_VARIN,,LXinitOk,9,4,11,6,);
B(B_F,not,,11,3,16,6,);
B(B_JUMP,,init,16,4,18,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 5 ;
        NETWORK_BODY
B(B_VARIN,,LXmod48IsActiv,9,2,11,4,);
B(B_F,not,,11,1,16,4,);
B(B_RETURN,,,16,2,18,4,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_COMMENT,,measuring input 1 (4-20mA),1,1,27,2,);
B(B_VARIN,,IWmeasurInput1,9,5,11,7,);
B(B_FB,ScaleAI,ScaleAI1,11,4,19,9,);
B(B_VARIN,,CDscaleInput1,9,6,11,8,);
B(B_VAROUT,,MDscaledInput1,19,5,21,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_COMMENT,,measuring input 2 (4-20mA),1,1,27,2,);
B(B_VARIN,,IWmeasurInput2,9,5,11,7,);
B(B_FB,ScaleAI,ScaleAI2,11,4,19,9,);
B(B_VARIN,,CDscaleInput2,9,6,11,8,);
B(B_VAROUT,,MDscaledInput2,19,5,21,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_COMMENT,,measuring input 3 (4-20mA),1,1,27,2,);
B(B_VARIN,,IWmeasurInput3,9,5,11,7,);
B(B_FB,ScaleAI,ScaleAI3,11,4,19,9,);
B(B_VARIN,,CDscaleInput3,9,6,11,8,);
B(B_VAROUT,,MDscaledInput3,19,5,21,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_COMMENT,,measuring input 4 (4-20mA),1,1,27,2,);
B(B_VARIN,,IWmeasurInput4,9,5,11,7,);
B(B_FB,ScaleAI,ScaleAI4,11,4,19,9,);
B(B_VARIN,,CDscaleInput4,9,6,11,8,);
B(B_VAROUT,,MDscaledInput4,19,5,21,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_COMMENT,,measuring input 5 (4-20mA),1,1,27,2,);
B(B_VARIN,,IWmeasurInput5,9,5,11,7,);
B(B_FB,ScaleAI,ScaleAI5,11,4,19,9,);
B(B_VARIN,,CDscaleInput5,9,6,11,8,);
B(B_VAROUT,,MDscaledInput5,19,5,21,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_COMMENT,,measuring input 6 (4-20mA),1,1,27,2,);
B(B_VARIN,,IWmeasurInput6,9,5,11,7,);
B(B_FB,ScaleAI,ScaleAI6,11,4,19,9,);
B(B_VARIN,,CDscaleInput6,9,6,11,8,);
B(B_VAROUT,,MDscaledInput6,19,5,21,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_COMMENT,,measuring input 7 (4-20mA),1,1,27,2,);
B(B_VARIN,,IWmeasurInput7,9,5,11,7,);
B(B_FB,ScaleAI,ScaleAI7,11,4,19,9,);
B(B_VARIN,,CDscaleInput7,9,6,11,8,);
B(B_VAROUT,,MDscaledInput7,19,5,21,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_COMMENT,,measuring input 8 (4-20mA),1,1,27,2,);
B(B_VARIN,,IWmeasurInput8,9,5,11,7,);
B(B_FB,ScaleAI,ScaleAI8,11,4,19,9,);
B(B_VARIN,,CDscaleInput8,9,6,11,8,);
B(B_VAROUT,,MDscaledInput8,19,5,21,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_COMMENT,,measuring input 9 (4-20mA),1,1,27,2,);
B(B_VARIN,,IWmeasurInput9,9,5,11,7,);
B(B_FB,ScaleAI,ScaleAI9,11,4,19,9,);
B(B_VARIN,,CDscaleInput9,9,6,11,8,);
B(B_VAROUT,,MDscaledInput9,19,5,21,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_COMMENT,,measuring input 10 (4-20mA),1,1,27,2,);
B(B_VARIN,,IWmeasurInput10,9,5,11,7,);
B(B_FB,ScaleAI,ScaleAI10,11,4,19,9,);
B(B_VARIN,,CDscaleInput10,9,6,11,8,);
B(B_VAROUT,,MDscaledInput10,19,5,21,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_COMMENT,,measuring input 11 (4-20mA),1,1,27,2,);
B(B_VARIN,,IWmeasurInput11,9,5,11,7,);
B(B_FB,ScaleAI,ScaleAI11,11,4,19,9,);
B(B_VARIN,,CDscaleInput11,9,6,11,8,);
B(B_VAROUT,,MDscaledInput11,19,5,21,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_COMMENT,,measuring input 12 (4-20mA),1,1,27,2,);
B(B_VARIN,,IWmeasurInput12,9,5,11,7,);
B(B_FB,ScaleAI,ScaleAI12,11,4,19,9,);
B(B_VARIN,,CDscaleInput12,9,6,11,8,);
B(B_VAROUT,,MDscaledInput12,19,5,21,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_F,@DIV,,11,3,16,7,);
B(B_F,@MUL-2,,23,3,28,7,);
B(B_COMMENT,,measuring input 13 (0-20mA),1,1,27,2,);
B(B_VARIN,,IWmeasurInput13,9,8,11,10,);
B(B_F,uint_to_real,,11,7,22,10,);
B(B_VAROUT,,MDscaledInput13,28,4,30,6,);
B(B_VARIN,,20000.0,9,5,11,7,);
B(B_VARIN,,CDscaleInput13,9,4,11,6,);
L(16,5,23,5);
L(22,6,22,9);
L(22,6,23,6);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_F,@DIV,,11,3,16,7,);
B(B_F,@MUL-2,,23,3,28,7,);
B(B_COMMENT,,measuring input 14 (0-20mA),1,1,27,2,);
B(B_VARIN,,IWmeasurInput14,9,8,11,10,);
B(B_F,uint_to_real,,11,7,22,10,);
B(B_VAROUT,,MDscaledInput14,28,4,30,6,);
B(B_VARIN,,20000.0,9,5,11,7,);
B(B_VARIN,,CDscaleInput14,9,4,11,6,);
L(16,5,23,5);
L(22,6,22,9);
L(22,6,23,6);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_F,@DIV,,11,3,16,7,);
B(B_F,@MUL-2,,23,3,28,7,);
B(B_COMMENT,,measuring input 15 (0-20mA),1,1,27,2,);
B(B_VARIN,,IWmeasurInput15,9,8,11,10,);
B(B_F,uint_to_real,,11,7,22,10,);
B(B_VAROUT,,MDscaledInput15,28,4,30,6,);
B(B_VARIN,,20000.0,9,5,11,7,);
B(B_VARIN,,CDscaleInput15,9,4,11,6,);
L(16,5,23,5);
L(22,6,22,9);
L(22,6,23,6);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_F,@DIV,,11,3,16,7,);
B(B_F,@MUL-2,,23,3,28,7,);
B(B_COMMENT,,measuring input 16 (0-20mA),1,1,27,2,);
B(B_VARIN,,IWmeasurInput16,9,8,11,10,);
B(B_F,uint_to_real,,11,7,22,10,);
B(B_VAROUT,,MDscaledInput16,28,4,30,6,);
B(B_VARIN,,20000.0,9,5,11,7,);
B(B_VARIN,,CDscaleInput16,9,4,11,6,);
L(16,5,23,5);
L(22,6,22,9);
L(22,6,23,6);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL := init: ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_FB,ModuleState,ModuleState1,11,3,23,9,);
B(B_VARIN,,2,9,4,11,6,);
B(B_VARIN,,48,9,5,11,7,);
B(B_VARIN,,TRUE,9,6,11,8,);
B(B_VARIN,,FALSE,9,7,11,9,);
B(B_VAROUT,,LXmod48Timeout,23,4,25,6,);
B(B_COMMENT,,check tool box is mounted ,1,1,27,2,);
B(B_VAROUT,,LXmod48IsActiv,23,5,25,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,LXinitOk,9,1,11,3,);
B(B_RETURN,,,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correc.value measuring input 1,1,1,27,2,);
B(B_VARIN,,400.0,9,5,11,7,);
B(B_VARIN,,0.0,9,6,11,8,);
B(B_VARIN,,10000.0,9,7,11,9,);
B(B_VARIN,,CDscaleInput1,9,8,11,10,);
B(B_FB,CorrValue_Real,CorrValue_Real1,11,4,23,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correc.value measuring input 2,1,1,27,2,);
B(B_VARIN,,400.0,9,5,11,7,);
B(B_VARIN,,0.0,9,6,11,8,);
B(B_VARIN,,10000.0,9,7,11,9,);
B(B_VARIN,,CDscaleInput2,9,8,11,10,);
B(B_FB,CorrValue_Real,CorrValue_Real2,11,4,23,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correc.value measuring input 3,1,1,27,2,);
B(B_VARIN,,400.0,9,5,11,7,);
B(B_VARIN,,0.0,9,6,11,8,);
B(B_VARIN,,10000.0,9,7,11,9,);
B(B_VARIN,,CDscaleInput3,9,8,11,10,);
B(B_FB,CorrValue_Real,CorrValue_Real3,11,4,23,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correc.value measuring input 4,1,1,27,2,);
B(B_VARIN,,400.0,9,5,11,7,);
B(B_VARIN,,0.0,9,6,11,8,);
B(B_VARIN,,10000.0,9,7,11,9,);
B(B_VARIN,,CDscaleInput4,9,8,11,10,);
B(B_FB,CorrValue_Real,CorrValue_Real4,11,4,23,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correc.value measuring input 5,1,1,27,2,);
B(B_VARIN,,400.0,9,5,11,7,);
B(B_VARIN,,0.0,9,6,11,8,);
B(B_VARIN,,10000.0,9,7,11,9,);
B(B_VARIN,,CDscaleInput5,9,8,11,10,);
B(B_FB,CorrValue_Real,CorrValue_Real5,11,4,23,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correc.value measuring input 6,1,1,27,2,);
B(B_VARIN,,400.0,9,5,11,7,);
B(B_VARIN,,0.0,9,6,11,8,);
B(B_VARIN,,10000.0,9,7,11,9,);
B(B_VARIN,,CDscaleInput6,9,8,11,10,);
B(B_FB,CorrValue_Real,CorrValue_Real6,11,4,23,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correc.value measuring input 7,1,1,27,2,);
B(B_VARIN,,400.0,9,5,11,7,);
B(B_VARIN,,0.0,9,6,11,8,);
B(B_VARIN,,10000.0,9,7,11,9,);
B(B_VARIN,,CDscaleInput7,9,8,11,10,);
B(B_FB,CorrValue_Real,CorrValue_Real7,11,4,23,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correc.value measuring input 8,1,1,27,2,);
B(B_VARIN,,400.0,9,5,11,7,);
B(B_VARIN,,0.0,9,6,11,8,);
B(B_VARIN,,10000.0,9,7,11,9,);
B(B_VARIN,,CDscaleInput8,9,8,11,10,);
B(B_FB,CorrValue_Real,CorrValue_Real8,11,4,23,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correc.value measuring input 9,1,1,27,2,);
B(B_VARIN,,400.0,9,5,11,7,);
B(B_VARIN,,0.0,9,6,11,8,);
B(B_VARIN,,10000.0,9,7,11,9,);
B(B_VARIN,,CDscaleInput9,9,8,11,10,);
B(B_FB,CorrValue_Real,CorrValue_Real9,11,4,23,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correc.value measuring input 10,1,1,27,2,);
B(B_VARIN,,400.0,9,5,11,7,);
B(B_VARIN,,0.0,9,6,11,8,);
B(B_VARIN,,10000.0,9,7,11,9,);
B(B_VARIN,,CDscaleInput10,9,8,11,10,);
B(B_FB,CorrValue_Real,CorrValue_Real10,11,4,23,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correc.value measuring input 11,1,1,27,2,);
B(B_VARIN,,400.0,9,5,11,7,);
B(B_VARIN,,0.0,9,6,11,8,);
B(B_VARIN,,10000.0,9,7,11,9,);
B(B_VARIN,,CDscaleInput11,9,8,11,10,);
B(B_FB,CorrValue_Real,CorrValue_Real11,11,4,23,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correc.value measuring input 12,1,1,27,2,);
B(B_VARIN,,400.0,9,5,11,7,);
B(B_VARIN,,0.0,9,6,11,8,);
B(B_VARIN,,10000.0,9,7,11,9,);
B(B_VARIN,,CDscaleInput12,9,8,11,10,);
B(B_FB,CorrValue_Real,CorrValue_Real12,11,4,23,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correc.value measuring input 13,1,1,27,2,);
B(B_VARIN,,400.0,9,5,11,7,);
B(B_VARIN,,0.0,9,6,11,8,);
B(B_VARIN,,10000.0,9,7,11,9,);
B(B_VARIN,,CDscaleInput13,9,8,11,10,);
B(B_FB,CorrValue_Real,CorrValue_Real13,11,4,23,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correc.value measuring input 14,1,1,27,2,);
B(B_VARIN,,400.0,9,5,11,7,);
B(B_VARIN,,0.0,9,6,11,8,);
B(B_VARIN,,10000.0,9,7,11,9,);
B(B_VARIN,,CDscaleInput14,9,8,11,10,);
B(B_FB,CorrValue_Real,CorrValue_Real14,11,4,23,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correc.value measuring input 15,1,1,27,2,);
B(B_VARIN,,400.0,9,5,11,7,);
B(B_VARIN,,0.0,9,6,11,8,);
B(B_VARIN,,10000.0,9,7,11,9,);
B(B_VARIN,,CDscaleInput15,9,8,11,10,);
B(B_FB,CorrValue_Real,CorrValue_Real15,11,4,23,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correc.value measuring input 16,1,1,27,2,);
B(B_VARIN,,400.0,9,5,11,7,);
B(B_VARIN,,0.0,9,6,11,8,);
B(B_VARIN,,10000.0,9,7,11,9,);
B(B_VARIN,,CDscaleInput16,9,8,11,10,);
B(B_FB,CorrValue_Real,CorrValue_Real16,11,4,23,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,TRUE,9,1,11,3,);
B(B_VAROUT,,LXinitOk,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
END_BODY
END_PROGRAM

PROGRAM ADstabWinchV050
(*name of author: Manfred Schapler
version: 2.0
date: 12/00
modification:*)
(*name of author: Manfred Schapler
version: 1.0
date: 11/97
modification:*)
	VAR_EXTERNAL 
		ITXstabWinchUp: BOOL:=FALSE;
			(*preselection stabilization winch on (up) *)
		ITXstabWinchDn: BOOL:=FALSE;
			(*preselection stabilization winch down *)
		IXentrySwiClosed: BOOL:=FALSE;
			(*entry switch closed*)
		IWleftJoystThum: INT:=0;
			(*left joystick analog signal thumb wheel*)
		IWfootpStabWinch: INT:=0;
			(*footpedal stabilization winch*)
		QTXstabWinchUp: BOOL:=FALSE;
			(*enable stabilization winch on (up) *)
		QTXstabWinchDn: BOOL:=FALSE;
			(*enable stabilization winch down*)
		QXstabWinFreef: BOOL:=FALSE;
			(*stabilization winch freefall*)
		MXjoyStabWiFreeF: BOOL:=FALSE;
			(*ad stabilization winch freefall on joystick*)
		MXjoyStabWiFullP: BOOL:=FALSE;
			(*ad stabilization winch full pull on joystick*)
		MXstopAllFunctio: BOOL:=FALSE;
			(*stop all excavator functions*)
		MXexitStabWinch: BOOL:=FALSE;
			(*ad stabilization winch exit programm*)
		MXstabWinchOC: BOOL:=FALSE;
			(*stab winch with open circuit*)
		MDstabWPumpSigCC: REAL:=0.0;
			(*stabilization winch pump signal (closed circuit) *)
		MDstabWPumpSigOC: REAL:=0.0;
			(*stabilization winch pump signal (open circuit) *)
		MDstabWPresSigCC: REAL:=0.0;
			(*stabilization winch pressure signal (closed circuit) *)
		MDstabWPresSigOC: REAL:=0.0;
			(*stabilization winch pressure signal (open circuit) *)
	END_VAR
	VAR_EXTERNAL RETAIN
		MXconTenWinPrese: BOOL:=FALSE;
			(*constant tension winch preselected*)
		MXstabWinchPrese: BOOL:=FALSE;
			(*stabilization winch preselected*)
	END_VAR
	VAR_EXTERNAL CONSTANT RETAIN
		CXanaStabWinch: BOOL:=FALSE;
			(*additional stabilzation winch (analog hoisting, analog const tension, freefall)*)
		CXconTensWinch: BOOL:=FALSE;
			(*constant tension winch (fixed const tension, lowering)*)
		CDstabWinMaxPoti: REAL:=0.0;
			(*ad stabilisation winch maximum signal joystick poti*)
		CDstabWiSigLift: REAL:=0.0;
			(*stabilization winch signal lifting [%]*)
		CDstabWiSigLow: REAL:=0.0;
			(*stabilization winch signal lowering [%]*)
		CDstabWiPresSig: REAL:=0.0;
			(*stabilization winch pressure signal [%]*)
	END_VAR
	VAR 
		LXstabWinchUp: BOOL:=FALSE;
		LXstabWinchDn: BOOL:=FALSE;
		LDlefJoystThum: REAL:=0.0;
			(*thumb wheel signal joystick left*)
		LDfootpStabWinch: REAL:=0.0;
			(*footpedal signal stabilization winch*)
		LDStabWinchSign: REAL:=0.0;
			(*analog signal stabilization winch valve control*)
		LXfootpIsActiv: BOOL:=FALSE;
			(*footpedal stabilization winch is activ*)
		LXinitOk: BOOL:=FALSE;
		LXstart: BOOL:=FALSE;
		LXstabWinchWork: BOOL:=FALSE;
		LDanalogSignal: REAL:=0.0;
		R_TRIG1: R_TRIG;
		Integrator1: Integrator;
		Integrator2: Integrator;
		RS1: RS;
		WndComp1: WndComp;
		ModuleState1: ModuleState;
		CorrValue_Bool1: CorrValue_Bool;
		CorrValue_Bool2: CorrValue_Bool;
		CorrValue_Real1: CorrValue_Real;
		CorrValue_Real2: CorrValue_Real;
		CorrValue_Real3: CorrValue_Real;
		CorrValue_Real4: CorrValue_Real;
	END_VAR
'FBD'
BODY
    WORKSPACE
        NETWORK_LIST_TYPE := NWTYPEFBD ;
        ACTIVE_NETWORK := 0 ;
    END_WORKSPACE
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_COMMENT,,init first time,1,1,27,2,);
B(B_VARIN,,LXinitOk,9,4,11,6,);
B(B_F,not,,11,3,16,6,);
B(B_JUMP,,init,16,4,18,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 16 ;
        NETWORK_BODY
B(B_COMMENT,,protect correction value change while program is activ,1,1,27,2,);
B(B_VAROUT,,MXconTenWinPrese,23,6,25,8,);
B(B_F,sel,,18,5,23,10,);
B(B_VARIN,,IXentrySwiClosed,9,4,11,6,);
B(B_VARIN,,LXstart,9,5,11,7,);
B(B_F,@AND-2,,11,3,16,7,);
B(B_VARIN,,CXconTensWinch,14,7,16,9,);
B(B_VARIN,,MXconTenWinPrese,14,8,16,10,);
B(B_F,sel,,18,10,23,15,);
B(B_VAROUT,,MXstabWinchPrese,23,11,25,13,);
B(B_VARIN,,CXanaStabWinch,16,12,18,14,);
B(B_VARIN,,MXstabWinchPrese,16,13,18,15,);
B(B_COMMENT,,Hinweis: ø^Beruhigungswinde (Stabilization winch) und Konstantzugwindeø^benutzen die selben Ausgänge für heben und senken. ,38,3,62,7,);
L(17,7,18,7);
L(16,5,17,5);
L(17,12,18,12);
L(17,5,17,12);
L(16,8,18,8);
L(16,9,18,9);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,TRUE,9,1,11,3,);
B(B_VAROUT,,LXstart,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_COMMENT,,exit program in case of no additional device,1,1,27,2,);
B(B_RETURN,,,29,8,31,10,);
B(B_F,@OR-2,,17,5,22,9,);
B(B_VARIN,,MXexitStabWinch,15,7,17,9,);
B(B_VARIN,,LXstabWinchWork,22,9,24,11,);
B(B_VARIN,,MXstabWinchPrese,9,4,11,6,);
B(B_VARIN,,MXconTenWinPrese,9,5,11,7,);
B(B_F,@OR-2,,11,3,16,7,00N);
B(B_F,@AND-2,,24,7,29,11,0N);
L(22,7,23,7);
L(23,7,23,9);
L(16,5,17,5);
L(17,5,17,7);
L(23,9,24,9);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 21 ;
        NETWORK_BODY
B(B_COMMENT,,preselect stabilization or constant tension winch,1,1,27,2,);
B(B_F,@AND-2,,21,7,26,11,);
B(B_F,@AND-3,,21,11,26,16,);
B(B_VAROUT,,QTXstabWinchUp,42,8,44,10,);
B(B_FB,RS,RS1,37,7,42,11,);
B(B_VARIN,,MXstopAllFunctio,25,16,27,18,);
B(B_VARIN,,QTXstabWinchUp,19,14,21,16,);
B(B_F,@OR-2,,13,3,18,7,);
B(B_VARIN,,MXstabWinchPrese,11,4,13,6,);
B(B_VARIN,,MXconTenWinPrese,11,5,13,7,);
B(B_FB,R_TRIG,R_TRIG1,11,8,18,11,);
B(B_VARIN,,ITXstabWinchUp,9,9,11,11,);
B(B_F,@OR-4,,30,11,35,17,);
B(B_VARIN,,MXexitStabWinch,26,17,28,19,);
B(B_VARIN,,LXstabWinchDn,27,18,29,20,);
L(20,10,20,13);
L(27,14,30,14);
L(20,10,21,10);
L(19,9,19,14);
L(19,9,21,9);
L(27,14,27,17);
L(20,13,21,13);
L(36,10,37,10);
L(36,10,36,13);
L(26,9,37,9);
L(20,14,21,14);
L(19,14,20,14);
L(19,5,19,9);
L(18,5,19,5);
L(18,10,20,10);
L(28,15,30,15);
L(29,16,30,16);
L(26,13,30,13);
L(35,13,36,13);
L(28,15,28,18);
L(29,16,29,19);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 21 ;
        NETWORK_BODY
B(B_COMMENT,,release output stabilization or constant tension winch,1,1,27,2,);
B(B_F,@AND-3,,14,3,19,8,N0N);
B(B_VARIN,,QXstabWinFreef,12,4,14,6,);
B(B_VARIN,,MXstabWinchPrese,10,11,12,13,);
B(B_VARIN,,MXjoyStabWiFreeF,10,12,12,14,);
B(B_VARIN,,MXstopAllFunctio,9,6,11,8,);
B(B_VARIN,,QTXstabWinchUp,10,5,12,7,);
B(B_F,@AND-4,,14,14,19,20,NN);
B(B_VAROUT,,QTXstabWinchDn,20,16,22,18,);
B(B_VAROUT,,LXstabWinchDn,20,15,22,17,);
B(B_VARIN,,ITXstabWinchDn,12,18,14,20,);
B(B_VARIN,,MXconTenWinPrese,12,17,14,19,);
B(B_VAROUT,,QXstabWinFreef,19,9,21,11,);
B(B_VAROUT,,LXstabWinchUp,19,4,21,6,);
B(B_F,@AND-4,,14,8,19,14,N);
B(B_VARIN,,MXexitStabWinch,12,16,14,18,);
L(12,12,14,12);
L(12,13,14,13);
L(11,7,14,7);
L(12,6,12,11);
L(12,11,14,11);
L(13,7,13,16);
L(12,6,14,6);
L(13,16,14,16);
L(20,16,20,17);
L(19,16,20,16);
L(13,10,14,10);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 17 ;
        NETWORK_BODY
B(B_FB,Integrator,Integrator1,34,5,43,11,);
B(B_VARIN,,100.0,32,8,34,10,);
B(B_VARIN,,200.0,32,9,34,11,);
B(B_VARIN,,TRUE,32,6,34,8,);
B(B_F,sel,,18,7,23,12,);
B(B_F,sel,,25,6,30,11,);
B(B_VARIN,,LXstabWinchDn,22,5,24,7,);
B(B_F,limit,,47,4,53,9,);
B(B_VARIN,,-100.0,45,5,47,7,);
B(B_VARIN,,100.0,45,7,47,9,);
B(B_VARIN,,LXstabWinchUp,16,6,18,8,);
B(B_VARIN,,CDstabWiSigLift,16,11,18,13,);
B(B_F,to_real,,11,8,18,11,);
B(B_VARIN,,0.0,9,9,11,11,);
B(B_F,sel,,57,2,62,7,N);
B(B_VAROUT,,MDstabWPumpSigCC,62,3,64,5,);
B(B_F,sel,,57,7,62,12,);
B(B_VAROUT,,MDstabWPumpSigOC,62,8,64,10,);
B(B_VARIN,,0.0,52,9,54,11,);
B(B_VARIN,,MXstabWinchOC,54,1,56,3,);
B(B_COMMENT,,stabilization winch analog output signal pump ,1,1,27,2,);
B(B_F,@MUL-2,,18,12,23,16,);
B(B_VARIN,,CDstabWiSigLow,16,13,18,15,);
B(B_VARIN,,-1.0,16,14,18,16,);
L(30,8,34,8);
L(23,9,25,9);
L(24,6,24,8);
L(24,8,25,8);
L(24,10,25,10);
L(43,7,47,7);
L(18,7,18,9);
L(18,11,18,12);
L(54,5,54,10);
L(56,9,57,9);
L(56,4,57,4);
L(56,2,56,9);
L(54,10,57,10);
L(54,5,57,5);
L(55,11,57,11);
L(55,6,55,11);
L(53,6,57,6);
L(23,14,24,14);
L(24,10,24,14);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_COMMENT,,scale thumb wheel signal joystick left,1,1,27,2,);
B(B_F,@DIV,,21,3,26,7,);
B(B_VARIN,,10.0,19,6,21,8,);
B(B_F,@MUL-2,,26,3,31,7,);
B(B_F,@DIV,,21,7,26,11,);
B(B_VARIN,,CDstabWinMaxPoti,19,8,21,10,);
B(B_VAROUT,,LDlefJoystThum,31,4,33,6,);
B(B_VARIN,,100.0,19,9,21,11,);
B(B_F,int_to_real,,11,3,21,6,);
B(B_VARIN,,IWleftJoystThum,9,4,11,6,);
L(21,6,21,7);
L(26,6,26,9);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 15 ;
        NETWORK_BODY
B(B_COMMENT,,scale footpedal signal stabilization winch,1,1,27,2,);
B(B_F,@DIV,,23,8,28,12,);
B(B_VARIN,,10.0,20,11,22,13,);
B(B_VARIN,,IWfootpStabWinch,9,9,11,11,);
B(B_COMMENT,,-/+1000.0 / 10.0 = signal 0-100%,24,13,38,14,);
B(B_VARIN,,1.0,31,5,33,7,);
B(B_VARIN,,100.0,31,6,33,8,);
B(B_VAROUT,,LXfootpIsActiv,40,4,42,6,);
B(B_FB,WndComp,WndComp1,33,3,40,9,);
B(B_VAROUT,,LDfootpStabWinch,29,9,31,11,);
B(B_F,int_to_real,,11,8,21,11,);
L(22,11,23,11);
L(22,11,22,12);
L(28,10,29,10);
L(29,5,29,10);
L(29,5,33,5);
L(21,10,23,10);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 25 ;
        NETWORK_BODY
B(B_VARIN,,0.0,31,10,33,12,);
B(B_VARIN,,LDlefJoystThum,31,6,33,8,);
B(B_VARIN,,0.01,31,5,33,7,);
B(B_F,sel,,33,3,38,8,);
B(B_COMMENT,,release stabilization winch control valve,1,1,27,2,);
B(B_F,sel,,33,18,38,23,);
B(B_F,@AND-4,,14,18,19,24,0NN);
B(B_VARIN,,0.0,31,15,33,17,);
B(B_VARIN,,0.0,31,20,33,22,);
B(B_VARIN,,LDfootpStabWinch,31,21,33,23,);
B(B_F,sel,,33,13,38,18,);
B(B_VARIN,,100.0,21,16,23,18,);
B(B_F,to_real,,23,15,30,18,);
B(B_VARIN,,0.01,21,11,23,13,);
B(B_F,to_real,,23,10,30,13,);
B(B_F,@AND-3,,14,3,19,8,0NN);
B(B_VARIN,,LXfootpIsActiv,12,22,14,24,);
B(B_F,@AND-3,,14,13,19,18,0N);
B(B_F,sel,,33,8,38,13,);
B(B_F,@AND-3,,14,8,19,13,00N);
B(B_VARIN,,QTXstabWinchUp,11,4,13,6,);
B(B_VARIN,,MXjoyStabWiFreeF,10,5,12,7,);
B(B_VARIN,,MXjoyStabWiFullP,9,6,11,8,);
B(B_F,SigMax4,,42,3,49,9,);
B(B_VAROUT,,LDStabWinchSign,49,4,51,6,);
L(12,6,12,21);
L(11,7,11,22);
L(11,12,14,12);
L(12,11,14,11);
L(19,20,33,20);
L(13,20,14,20);
L(12,16,14,16);
L(12,21,14,21);
L(11,17,14,17);
L(11,22,14,22);
L(41,8,42,8);
L(38,20,41,20);
L(40,7,40,15);
L(40,7,42,7);
L(39,6,39,10);
L(39,6,42,6);
L(38,15,40,15);
L(30,12,33,12);
L(30,17,33,17);
L(19,5,33,5);
L(13,15,14,15);
L(19,15,33,15);
L(38,10,39,10);
L(13,10,14,10);
L(13,5,14,5);
L(12,6,14,6);
L(11,7,14,7);
L(13,5,13,20);
L(19,10,33,10);
L(41,8,41,20);
L(38,5,42,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 14 ;
        NETWORK_BODY
B(B_FB,Integrator,Integrator2,11,6,20,12,);
B(B_VARIN,,TRUE,9,7,11,9,);
B(B_VARIN,,100.0,9,9,11,11,);
B(B_VARIN,,200.0,9,10,11,12,);
B(B_VARIN,,LDStabWinchSign,9,8,11,10,);
B(B_F,limit,,24,5,30,10,);
B(B_VARIN,,0.0,22,6,24,8,);
B(B_VARIN,,100.0,22,8,24,10,);
B(B_COMMENT,,stabilization winch output signal pressure control valve ,1,1,27,2,);
B(B_F,@DIV,,31,5,36,9,);
B(B_VARIN,,100.0,29,10,31,12,);
B(B_F,@MUL-2,,37,5,42,9,);
B(B_F,sel,,46,3,51,8,N);
B(B_F,sel,,46,8,51,13,);
B(B_VAROUT,,MDstabWPresSigOC,51,9,53,11,);
B(B_VARIN,,0.0,41,10,43,12,);
B(B_VARIN,,MXstabWinchOC,43,2,45,4,);
B(B_VAROUT,,MDstabWPresSigCC,51,4,53,6,);
B(B_VARIN,,CDstabWiPresSig,35,11,37,13,);
L(20,8,24,8);
L(30,7,31,7);
L(31,8,31,11);
L(36,7,37,7);
L(43,6,43,11);
L(45,10,46,10);
L(45,5,46,5);
L(45,3,45,10);
L(43,11,46,11);
L(43,6,46,6);
L(44,12,46,12);
L(44,7,44,12);
L(42,7,46,7);
L(37,8,37,12);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_COMMENT,,stabilization winch und constant tension winch working ,1,1,27,2,);
B(B_VARIN,,LDanalogSignal,9,4,11,6,);
B(B_VARIN,,0.0,9,5,11,7,);
B(B_F,NE_R,,11,3,16,7,);
B(B_F,@OR-2,,17,3,22,7,);
B(B_VAROUT,,LXstabWinchWork,22,4,24,6,);
B(B_VARIN,,QXstabWinFreef,15,7,17,9,);
L(16,5,17,5);
L(17,6,17,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,exit program,1,1,27,2,);
B(B_VARIN,,TRUE,9,3,11,5,);
B(B_RETURN,,,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL := init: ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,init program,1,1,27,2,);
B(B_VARIN,,TRUE,9,3,11,5,);
B(B_VAROUT,,LXinitOk,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,check modul 70 footpedal stabilization winch,1,1,27,2,);
B(B_VARIN,,1,9,5,11,7,);
B(B_VARIN,,70,9,6,11,8,);
B(B_FB,ModuleState,ModuleState1,11,4,23,10,);
B(B_VARIN,,FALSE,9,8,11,10,);
B(B_VARIN,,CXanaStabWinch,9,7,11,9,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value constant tension winch,1,1,27,2,);
B(B_FB,CorrValue_Bool,CorrValue_Bool1,11,4,23,10,00N);
B(B_VARIN,,CXconTensWinch,9,8,11,10,);
B(B_VARIN,,FALSE,9,5,11,7,);
B(B_VARIN,,FALSE,9,6,11,8,);
B(B_VARIN,,CXanaStabWinch,9,7,11,9,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value stabilization winch (analog hoisting),1,1,27,2,);
B(B_FB,CorrValue_Bool,CorrValue_Bool2,11,4,23,10,00N);
B(B_VARIN,,CXanaStabWinch,9,8,11,10,);
B(B_VARIN,,FALSE,9,5,11,7,);
B(B_VARIN,,FALSE,9,6,11,8,);
B(B_VARIN,,CXconTensWinch,9,7,11,9,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value maximum signal joystick poti,1,1,27,2,);
B(B_VARIN,,CDstabWinMaxPoti,9,8,11,10,);
B(B_VARIN,,50.0,9,5,11,7,);
B(B_VARIN,,0.0,9,6,11,8,);
B(B_VARIN,,100.0,9,7,11,9,);
B(B_FB,CorrValue_Real,CorrValue_Real1,11,4,23,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value stabilization winch signal lifting [%],1,1,27,2,);
B(B_VARIN,,100.0,9,5,11,7,);
B(B_VARIN,,1.0,9,6,11,8,);
B(B_VARIN,,100.0,9,7,11,9,);
B(B_FB,CorrValue_Real,CorrValue_Real2,11,4,23,10,);
B(B_VARIN,,CDstabWiSigLift,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value stabilization winch signal lowering [%],1,1,27,2,);
B(B_VARIN,,100.0,9,5,11,7,);
B(B_VARIN,,1.0,9,6,11,8,);
B(B_VARIN,,100.0,9,7,11,9,);
B(B_FB,CorrValue_Real,CorrValue_Real3,11,4,23,10,);
B(B_VARIN,,CDstabWiSigLow,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value stabilization winch pressure signal [%],1,1,27,2,);
B(B_VARIN,,100.0,9,5,11,7,);
B(B_VARIN,,1.0,9,6,11,8,);
B(B_VARIN,,100.0,9,7,11,9,);
B(B_FB,CorrValue_Real,CorrValue_Real4,11,4,23,10,);
B(B_VARIN,,CDstabWiPresSig,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
END_BODY
END_PROGRAM

PROGRAM ADvibratorV280
	VAR_EXTERNAL 
		ITXvibrator: BOOL:=FALSE;
			(*preselection hammer/vibrator*)
		ITXclampOpen: BOOL:=FALSE;
			(*preselection clamping jaw open*)
		ITXclampClose: BOOL:=FALSE;
			(*preselection clamping jaw close*)
		ITXexDriveOut: BOOL:=FALSE;
			(*preselection excenter drive out*)
		ITXexDriveIn: BOOL:=FALSE;
			(*preselection excenter drive in*)
		IWkeybX23Poti1: UINT:=0;
			(*keyboard X23 poti 1*)
		IWkeybX23Poti2: UINT:=0;
			(*keyboard X23 poti 2*)
		IWclampSysPress: UINT:=0;
			(*add. system pressure clamping jaw vibrator*)
		IWvibSysPresP2: UINT:=0;
			(*P2 sys.press.vibrator/hammer/hydr.grab*)
		IWvibSysPressDir: UINT:=0;
			(*system pressure vibrator/hammer pump direct*)
		IWvibAdFrequency: UINT:=0;
			(*vibrator add. device frequency sensor *)
		IWvibAdAmplitude: UINT:=0;
			(*ext. hammer signal or vibrator amplitude*)
		QTXvibrator: BOOL:=FALSE;
			(*enable hammer/vibrator on*)
		QTXclampClose: BOOL:=FALSE;
			(*enable clamping jaw close*)
		QTXclampOpen: BOOL:=FALSE;
			(*enable clamping jaw open*)
		QTXexDriveOut: BOOL:=FALSE;
			(*enable excenter drive out*)
		QTXexDriveIn: BOOL:=FALSE;
			(*enable excenter drive in*)
		QTXaddVolCtrl: BOOL:=FALSE;
			(*enable additional hydraulic volume control *)
		QXexcentDriveOut: BOOL:=FALSE;
			(*excentric drive out *)
		QXexcentDriveIn: BOOL:=FALSE;
			(*excentric drive in*)
		QXclampJawClose: BOOL:=FALSE;
			(*clamping jaw vibrator close*)
		QXclampJawOpen: BOOL:=FALSE;
			(*clamping jaw vibrator open*)
		QXrelClampJaw: BOOL:=FALSE;
			(*release clamping jaw vibrator*)
		QXretFlowVibrHam: BOOL:=FALSE;
			(*additional device return flow vibrator hammer*)
		QXrelVibHamDirec: BOOL:=FALSE;
			(*release vibrator/hammer direct at pump*)
		QWludv1: UINT:=0;
			(*LUDV pump 1*)
		QWludv2: UINT:=0;
			(*LUDV pump 2*)
		MXstopAllFunctio: BOOL:=FALSE;
			(*stop all excavator functions*)
		MXminEngineSpeed: BOOL:=FALSE;
			(*minimum engine speed reached*)
		MXflashSignal: BOOL:=FALSE;
			(*flash signal*)
		MXenablVibOperat: BOOL:=FALSE;
			(*enable vibrator operation*)
		MXexDrWorking: BOOL:=FALSE;
			(*excentric drive not working*)
		MXclampWorking: BOOL:=FALSE;
			(*clamping jaw not working*)
		MXclampIsClosed: BOOL:=FALSE;
			(*clamping jaw clamp is closed*)
		MXpreClamClosJoy: BOOL:=FALSE;
			(*preselection clamp close with joystick button*)
		MXaddHydrActive: BOOL:=FALSE;
			(*addittional hydraulics active*)
		MXpreVibratorOn: BOOL:=FALSE;
			(*preselection vibrator on *)
		MXvibratWorking: BOOL:=FALSE;
			(*vibrator working*)
		MXpreHam_VibJoy: BOOL:=FALSE;
			(*preselection vibrator/hammer with joystick*)
		MXassemblyOperat: BOOL:=FALSE;
			(*assembly operation*)
		MXadOilHeatAct: BOOL:=FALSE;
			(*additional device oil heating active*)
		MXvibExitProgram: BOOL:=FALSE;
			(*vibrator exit programm*)
		MXclampAutoClose: BOOL:=FALSE;
			(*clamping jaw automatic close*)
		MXludv1ExtAnaSig: BOOL:=FALSE;
			(*LUDV pump 1 other, external analog signal*)
		MXludv2ExtAnaSig: BOOL:=FALSE;
			(*LUDV pump 2 other, external analog signal*)
		MXexDrPreJoy: BOOL:=FALSE;
			(*preselection excetric drive with joy stick*)
		MXjoyExcentDrOut: BOOL:=FALSE;
			(*excetric drive out with joy stick*)
		MXjoyExcentDrIn: BOOL:=FALSE;
			(*excetric drive in with joy stick*)
		MX600barPreTrans: BOOL:=FALSE;
			(*600bar pressure transmitter used*)
		MXengStarterActi: BOOL:=FALSE;
			(*engine starter activated*)
		MX1LudvWorkSect: BOOL:=FALSE;
			(*only one ludv working section *)
		MWludvExtPresSig: UINT:=0;
			(*LUDV pump external pressure signal in %*)
		MDvibSysPress: REAL:=0.0;
			(*ad vibrator system pressure*)
		MDratedEngSpeed: REAL:=0.0;
			(*rated engine speed in rpm*)
		MDvibClampPress: REAL:=0.0;
			(*ad vibrator clamping pressure*)
		MDhg1AnalogSig: REAL:=0.0;
			(*sg angle in degree*)
		MDhg2AnalogSig: REAL:=0.0;
			(*sg angle in degree*)
		MDhg1JoySignal: REAL:=0.0;
			(*HG 1 joystick signal in +/- [%]*)
		MDhg2JoySignal: REAL:=0.0;
			(*HG 2 joystick signal in +/-[%]*)
		MDludv1ExtAnaSig: REAL:=0.0;
			(*LUDV pump 1 external analog signal in %*)
		MDludv2ExtAnaSig: REAL:=0.0;
			(*LUDV pump 2 external analog signal in %*)
		MDvibrFrequency: REAL:=0.0;
			(*ad vibrator frequency*)
		MDvibrAmplitude: REAL:=0.0;
			(*ad vibrator amplitude*)
		MDvibPump1Signal: REAL:=0.0;
			(*vibrator analog signal pump 1 [%]*)
		MDvibPump2Signal: REAL:=0.0;
			(*vibrator analog signal pump 2 [%]*)
	END_VAR
	VAR_EXTERNAL CONSTANT
		MSG_ERROR: UINT:=0;
	END_VAR
	VAR_EXTERNAL RETAIN
		MRvib1Volume: REAL:=0.0;
			(*vibrator 1 volume*)
		MRvib1ClampPress: REAL:=0.0;
			(*vibrator 1 clamp pressure*)
		MRvib1ExcTime: REAL:=0.0;
			(*vibrator 1 excentric adjust time*)
		MRvib1Press: REAL:=0.0;
			(*vibrator 1 pressure*)
	END_VAR
	VAR_EXTERNAL CONSTANT RETAIN
		CXadVibOperat: BOOL:=FALSE;
			(*additional device vibrator operation*)
		CXhamVibDirect: BOOL:=FALSE;
			(*add. vibrator/hammer direct on pump *)
		CXexDrOnJoyStick: BOOL:=FALSE;
			(*excentric drive on joy stick *)
		CWp1MinCurValveB: UINT:=0;
			(*p1 ludv section min.current (B side) main*)
		CWp1MaxCurValveB: UINT:=0;
			(*p1 ludv section max.current (B side) main*)
		CWp2MinCurValveB: UINT:=0;
			(*p1 ludv section min.current (B side) main*)
		CWp2MaxCurValveB: UINT:=0;
			(*p1 ludv section max.current (B side) main*)
		CWp1MaxValue: UINT:=0;
			(*ludv pump 1 max. value [l/min]*)
		CWp1cur50liter: UINT:=0;
			(*ludv pump 1 current for 50l/min*)
		CWp1cur100liter: UINT:=0;
			(*ludv pump 1 current for 100l/min*)
		CWp1cur150liter: UINT:=0;
			(*ludv pump 1 current for 150l/min*)
		CWp1cur200liter: UINT:=0;
			(*ludv pump 1 current for 200l/min*)
		CWp1cur250liter: UINT:=0;
			(*ludv pump 1 current for 250l/min*)
		CWp1cur300liter: UINT:=0;
			(*ludv pump 1 current for 300l/min*)
		CWp2MaxValue: UINT:=0;
			(*ludv pump 2 max. value [l/min]*)
		CWp2cur50liter: UINT:=0;
			(*ludv pump 2 current for 50l/min*)
		CWp2cur100liter: UINT:=0;
			(*ludv pump 2 current for 100l/min*)
		CWp2cur150liter: UINT:=0;
			(*ludv pump 2 current for 150l/min*)
		CWp2cur200liter: UINT:=0;
			(*ludv pump 2 current for 200l/min*)
		CWp2cur250liter: UINT:=0;
			(*ludv pump 2 current for 250l/min*)
		CWp2cur300liter: UINT:=0;
			(*ludv pump 2 current for 300l/min*)
		CWp1PumpMaxValue: UINT:=0;
			(*p1 pump max. value [l/min]*)
		CWp1Pump50liter: UINT:=0;
			(*p1 pump current for 50l/min*)
		CWp1Pump100liter: UINT:=0;
			(*p1 pump current for 100l/min*)
		CWp1Pump150liter: UINT:=0;
			(*p1 pump current for 150l/min*)
		CWp1Pump200liter: UINT:=0;
			(*p1 pump current for 200l/min*)
		CWp1Pump250liter: UINT:=0;
			(*p1 pump current for 250l/min*)
		CWp1Pump300liter: UINT:=0;
			(*p1 pump current for 300l/min*)
		CWp1Pump350liter: UINT:=0;
			(*p1 pump current for 350l/min*)
		CWp1Pump400liter: UINT:=0;
			(*p1 pump current for 400l/min*)
		CWp1Pump450liter: UINT:=0;
			(*p1 pump current for 450l/min*)
		CWp1Pump500liter: UINT:=0;
			(*p1 pump current for 500l/min*)
		CWp2PumpMaxValue: UINT:=0;
			(*p2 pump max. value [l/min]*)
		CWp2Pump50liter: UINT:=0;
			(*p2 pump current for 50l/min*)
		CWp2Pump100liter: UINT:=0;
			(*p2 pump current for 100l/min*)
		CWp2Pump150liter: UINT:=0;
			(*p2 pump current for 150l/min*)
		CWp2Pump200liter: UINT:=0;
			(*p2 pump current for 200l/min*)
		CWp2Pump250liter: UINT:=0;
			(*p2 pump current for 250l/min*)
		CWp2Pump300liter: UINT:=0;
			(*p2 pump current for 300l/min*)
		CWp2Pump350liter: UINT:=0;
			(*p2 pump current for 350l/min*)
		CWp2Pump400liter: UINT:=0;
			(*p2 pump current for 400l/min*)
		CWp2Pump450liter: UINT:=0;
			(*p2 pump current for 450l/min*)
		CWp2Pump500liter: UINT:=0;
			(*p2 pump current for 500l/min*)
		CWludv1MinCurPum: UINT:=0;
			(*LUDV 1 minimum current pump*)
		CWludv1MaxCurPum: UINT:=0;
			(*LUDV 1 maximum current pump*)
		CWludv2MinCurPum: UINT:=0;
			(*LUDV 2 minimum current pump*)
		CWludv2MaxCurPum: UINT:=0;
			(*LUDV 2 maximum current pump*)
		CWludvPressure: UINT:=0;
			(*ludv pump pressure [bar]*)
		CDvibIntTimeUp: REAL:=0.0;
			(*vibrator integrator time rising signal*)
		CDvibIntTimeDn: REAL:=0.0;
			(*vibrator integrator time falling signal*)
		CDmaxPowVibrator: REAL:=0.0;
			(*maximum power of vibrator [kW]*)
		CDresPowVibrator: REAL:=0.0;
			(*reserved power of vibrator [kW]*)
		CDludvLeakOilSig: REAL:=0.0;
			(*ludv leakoil or pressure comp. signal*)
		CDengSpPumpRed: REAL:=0.0;
			(*engine speed for pump reduction [U/min]*)
	END_VAR
	VAR 
		LXinitOk: BOOL:=FALSE;
		LXclampErPresInd: BOOL:=FALSE;
		LXclampAutoClose: BOOL:=FALSE;
		LXvibReachValue: BOOL:=FALSE;
			(*vibrator reached input value*)
		LXenabPumpSig: BOOL:=FALSE;
		LXpresExcentAdju: BOOL:=FALSE;
		LXexDrMinPos: BOOL:=FALSE;
		LXstopExcentOut: BOOL:=FALSE;
		LXexDrAutoInPre: BOOL:=FALSE;
		LXvibFunkWorking: BOOL:=FALSE;
		LXstopVib: BOOL:=FALSE;
		LXvibOff: BOOL:=FALSE;
		LXexDrWorking: BOOL:=FALSE;
		LXclampWorking: BOOL:=FALSE;
		LXludvInZeroPos: BOOL:=FALSE;
		LXvibrator1Sect: BOOL:=FALSE;
		LXSignInZero: BOOL:=FALSE;
		LWmaxVolume: UINT:=0;
		LWvibStoreVolume: UINT:=0;
		LWvibStorePress: UINT:=0;
		LDexcentAutoTime: TIME:=T#0s;
		LDanalogSigPump: REAL:=0.0;
		LD1: REAL:=0.0;
		LDx23Poti1: REAL:=0.0;
		LDx23Poti2: REAL:=0.0;
		LDanalogSignal: REAL:=0.0;
		LDanalSigPumpInt: REAL:=0.0;
		LDanalSigPumpLim: REAL:=0.0;
		LDcalcCurrent1: REAL:=0.0;
		LDcalcCurrent2: REAL:=0.0;
		LDcalcComp1: REAL:=0.0;
		LDcalcComp2: REAL:=0.0;
		LDcalcVol1: REAL:=0.0;
		LDcalcVol2: REAL:=0.0;
		LDmaxPower: REAL:=0.0;
		LDvibClampClosed: REAL:=0.0;
		LDvibStoreVolume: REAL:=0.0;
		LDp1MaxValue: REAL:=0.0;
		LDp2MaxValue: REAL:=0.0;
		LDp1PumpMaxValue: REAL:=0.0;
		LDp2PumpMaxValue: REAL:=0.0;
		LDscalePress: REAL:=0.0;
		CorrValue_Bool1: CorrValue_Bool;
		CorrValue_Bool2: CorrValue_Bool;
		CorrValue_Bool3: CorrValue_Bool;
		CorrValue_Real1: CorrValue_Real;
		CorrValue_Real2: CorrValue_Real;
		CorrValue_Real3: CorrValue_Real;
		CorrValue_Real4: CorrValue_Real;
		RS1: RS;
		RS2: RS;
		RS3: RS;
		RS4: RS;
		RS5: RS;
		RS6: RS;
		RS7: RS;
		RS8: RS;
		RS9: RS;
		RS10: RS;
		RS11: RS;
		R_TRIG1: R_TRIG;
		R_TRIG2: R_TRIG;
		R_TRIG3: R_TRIG;
		R_TRIG4: R_TRIG;
		R_TRIG5: R_TRIG;
		R_TRIG6: R_TRIG;
		F_TRIG1: F_TRIG;
		F_TRIG2: F_TRIG;
		F_TRIG3: F_TRIG;
		F_TRIG4: F_TRIG;
		TON1: TON;
		TON2: TON;
		TON3: TON;
		TON4: TON;
		SR1: SR;
		SR2: SR;
		SR3: SR;
		Integrator1: Integrator;
		Integrator2: Integrator;
		ScaleAI1: ScaleAI;
		ScaleAI2: ScaleAI;
		ScaleAI3: ScaleAI;
		ScaleAI4: ScaleAI;
		ScaleAI5: ScaleAI;
		Message1: MsgRealReal;
		Message2: MsgRealReal;
		Message3: MsgRealReal;
		Message4: MsgRealReal;
		Message5: MsgRealReal;
		Message6: MsgRealReal;
		ADcalculateQ1: ADcalculateQV024;
		ADcalculateQ2: ADcalculateQV024;
		ADcalculateQ3: ADcalculateQV024;
		ADcalculateQ4: ADcalculateQV024;
		ADpowerReg1: ADpowerRegV011;
	END_VAR
'FBD'
BODY
    WORKSPACE
        NETWORK_LIST_TYPE := NWTYPEFBD ;
        ACTIVE_NETWORK := 0 ;
    END_WORKSPACE
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_COMMENT,,init first time,1,1,27,2,);
B(B_VARIN,,LXinitOk,9,4,11,6,);
B(B_F,not,,11,3,16,6,);
B(B_JUMP,,init,16,4,18,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,select only 1 ludv section ,1,1,27,2,);
B(B_VARIN,,MX1LudvWorkSect,9,3,11,5,);
B(B_VAROUT,,LXvibrator1Sect,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_COMMENT,,jump to exit when vibrator is not activ,1,1,27,2,);
B(B_VARIN,,LXvibFunkWorking,16,7,18,9,);
B(B_F,@AND-2,,18,5,23,9,0N);
B(B_RETURN,,,23,6,25,8,);
B(B_VARIN,,MXvibExitProgram,9,4,11,6,);
B(B_VARIN,,MXenablVibOperat,9,5,11,7,);
B(B_F,@OR-2,,11,3,16,7,0N);
L(16,5,17,5);
L(17,5,17,7);
L(17,7,18,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_F,sel,,18,3,23,8,);
B(B_VARIN,,400.0,16,5,18,7,);
B(B_F,to_real,,11,6,18,9,);
B(B_VARIN,,600.0,9,7,11,9,);
B(B_VAROUT,,LDscalePress,23,4,25,6,);
B(B_VARIN,,MX600barPreTrans,16,4,18,6,);
B(B_COMMENT,,select scale of pressure transmitter,1,1,27,2,);
L(18,7,18,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 25 ;
        NETWORK_BODY
B(B_COMMENT,,input system pressure clamping jaw,1,1,27,2,);
B(B_VARIN,,IWclampSysPress,9,5,11,7,);
B(B_FB,ScaleAI,ScaleAI1,11,4,19,9,);
B(B_VARIN,,LDscalePress,9,6,11,8,);
B(B_VARIN,,MSG_ERROR,17,11,19,13,);
B(B_VARIN,,182,17,9,19,11,);
B(B_FB,MsgRealReal,Message1,22,8,31,15,);
B(B_VARIN,,181,37,18,39,20,);
B(B_VARIN,,MSG_ERROR,37,20,39,22,);
B(B_FB,MsgRealReal,Message2,39,17,48,24,);
B(B_F,@OR-2,,33,14,38,18,);
B(B_VAROUT,,LXclampErPresInd,38,15,40,17,);
B(B_VAROUT,,MDvibClampPress,19,5,21,7,);
B(B_FB,SR,SR1,26,18,31,22,0N);
B(B_F,@AND-2,,21,18,26,22,0N);
B(B_VARIN,,MXengStarterActi,17,20,19,22,);
L(19,10,22,10);
L(19,12,22,12);
L(21,11,22,11);
L(32,17,33,17);
L(32,17,32,20);
L(21,7,21,16);
L(21,16,33,16);
L(19,7,21,7);
L(19,8,20,8);
L(31,20,39,20);
L(20,20,21,20);
L(19,21,21,21);
L(20,22,26,22);
L(26,21,26,22);
L(20,8,20,22);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 20 ;
        NETWORK_BODY
B(B_COMMENT,,vibrtator frequency ,1,1,27,2,);
B(B_F,sel,,24,4,29,9,N);
B(B_VAROUT,,MDvibrFrequency,29,5,31,7,);
B(B_F,sel,,24,9,29,14,N);
B(B_VAROUT,,MDvibrAmplitude,29,10,31,12,);
B(B_VARIN,,0.0,17,7,19,9,);
B(B_VARIN,,MXvibratWorking,21,5,23,7,);
B(B_COMMENT,,vibrtator amplitude peak to peak,1,2,27,3,);
B(B_FB,ScaleAI,ScaleAI4,11,9,19,14,);
B(B_VARIN,,IWvibAdFrequency,9,10,11,12,);
B(B_VARIN,,50.0,9,11,11,13,);
B(B_FB,ScaleAI,ScaleAI5,11,14,19,19,);
B(B_VARIN,,IWvibAdAmplitude,9,15,11,17,);
B(B_VARIN,,50.0,9,16,11,18,);
L(20,7,20,11);
L(20,7,24,7);
L(19,8,24,8);
L(22,13,24,13);
L(23,11,24,11);
L(23,6,24,6);
L(23,6,23,11);
L(22,8,22,13);
L(21,12,24,12);
L(21,12,21,16);
L(19,11,20,11);
L(19,16,21,16);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_COMMENT,,scale analog signals from x23 potis,1,1,27,2,);
B(B_VARIN,,IWkeybX23Poti1,9,4,11,6,);
B(B_F,uint_to_real,,11,3,22,6,);
B(B_F,@DIV,,24,3,29,7,);
B(B_VARIN,,10.0,21,6,23,8,);
B(B_VAROUT,,LDx23Poti1,29,4,31,6,);
B(B_COMMENT,,0-100%,30,6,37,7,);
L(22,5,24,5);
L(23,6,23,7);
L(23,6,24,6);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_F,uint_to_real,,11,1,22,4,);
B(B_F,@DIV,,24,1,29,5,);
B(B_VARIN,,10.0,21,4,23,6,);
B(B_COMMENT,,0-100%,30,4,37,5,);
B(B_VARIN,,IWkeybX23Poti2,9,2,11,4,);
B(B_VAROUT,,LDx23Poti2,29,2,31,4,);
L(22,3,24,3);
L(23,4,23,5);
L(23,4,24,4);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_VARIN,,MRvib1Volume,9,2,11,4,);
B(B_VAROUT,,LDvibStoreVolume,11,2,13,4,);
B(B_F,real_to_uint,,11,3,22,6,);
B(B_VAROUT,,LWvibStoreVolume,22,4,24,6,);
B(B_COMMENT,,adjusted working volume,1,1,27,2,);
L(11,3,11,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_F,real_to_uint,,11,3,22,6,);
B(B_VARIN,,MRvib1Press,9,4,11,6,);
B(B_VAROUT,,LWvibStorePress,22,4,24,6,);
B(B_COMMENT,,adjusted working pressure,1,1,27,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_VARIN,,CWp1MaxValue,9,4,11,6,);
B(B_F,uint_to_real,,11,3,22,6,);
B(B_VAROUT,,LDp1MaxValue,22,4,24,6,);
B(B_COMMENT,,maximum oil value over ludv section ,1,1,27,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 5 ;
        NETWORK_BODY
B(B_VARIN,,CWp2MaxValue,9,2,11,4,);
B(B_F,uint_to_real,,11,1,22,4,);
B(B_VAROUT,,LDp2MaxValue,22,2,24,4,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_VARIN,,CWp1PumpMaxValue,9,4,11,6,);
B(B_F,uint_to_real,,11,3,22,6,);
B(B_VAROUT,,LDp1PumpMaxValue,22,4,24,6,);
B(B_COMMENT,,maximum oil value pump direct,1,1,27,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 5 ;
        NETWORK_BODY
B(B_VARIN,,CWp2PumpMaxValue,9,2,11,4,);
B(B_F,uint_to_real,,11,1,22,4,);
B(B_VAROUT,,LDp2PumpMaxValue,22,2,24,4,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_VARIN,,MRvib1ClampPress,9,4,11,6,);
B(B_COMMENT,,calculation threshold for clamping jaw closed,1,1,27,2,);
B(B_VAROUT,,LDvibClampClosed,11,4,13,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_COMMENT,,calculation if excenter drive is aktiv and how long is the drive-in time,1,1,27,2,);
B(B_VARIN,,0.0,10,9,12,11,);
B(B_F,@GT-2,,12,7,17,11,);
B(B_VAROUT,,LXpresExcentAdju,17,8,19,10,);
B(B_VARIN,,MRvib1ExcTime,9,4,11,6,);
B(B_VAROUT,,LDexcentAutoTime,32,4,34,6,);
B(B_F,@MUL-2,,16,3,21,7,);
B(B_VARIN,,1000.0,14,5,16,7,);
B(B_F,real_to_time,,21,3,32,6,);
L(11,5,11,9);
L(11,9,12,9);
L(11,5,16,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 20 ;
        NETWORK_BODY
B(B_F,@AND-2,,33,5,38,9,);
B(B_FB,R_TRIG,R_TRIG1,24,6,31,9,);
B(B_F,@AND-2,,18,6,23,10,);
B(B_VARIN,,MXclampIsClosed,9,8,11,10,);
B(B_F,@OR-2,,11,7,16,11,);
B(B_VARIN,,MXpreVibratorOn,9,9,11,11,);
B(B_VARIN,,ITXvibrator,9,5,11,7,);
B(B_VARIN,,MXpreHam_VibJoy,9,4,11,6,);
B(B_F,@OR-2,,11,3,16,7,);
B(B_F,@AND-2,,33,9,38,13,);
B(B_VARIN,,MXpreVibratorOn,31,11,33,13,);
B(B_VARIN,,MXenablVibOperat,30,3,32,5,);
B(B_COMMENT,,preselect vibrator,1,1,27,2,);
B(B_VARIN,,MXstopAllFunctio,38,14,40,16,);
B(B_VARIN,,MXenablVibOperat,37,13,39,15,);
B(B_VARIN,,MXaddHydrActive,39,15,41,17,);
B(B_VARIN,,MXassemblyOperat,40,16,42,18,);
B(B_VARIN,,MXadOilHeatAct,41,17,43,19,);
B(B_F,@OR-6,,44,9,49,17,0N);
B(B_FB,RS,RS1,49,5,54,9,);
B(B_VAROUT,,MXpreVibratorOn,54,6,56,8,);
L(32,8,32,11);
L(17,8,18,8);
L(16,5,17,5);
L(17,5,17,8);
L(16,9,18,9);
L(23,8,24,8);
L(32,11,33,11);
L(32,7,33,7);
L(32,4,32,7);
L(31,8,33,8);
L(39,12,39,14);
L(40,13,40,15);
L(41,14,41,16);
L(42,15,42,17);
L(38,11,44,11);
L(39,12,44,12);
L(40,13,44,13);
L(41,14,44,14);
L(42,15,44,15);
L(43,16,43,18);
L(43,16,44,16);
L(49,8,49,11);
L(38,7,49,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_COMMENT,,led control vibrator,1,1,27,2,);
B(B_VARIN,,MXflashSignal,15,10,17,12,);
B(B_F,@AND-2,,11,6,16,10,0N);
B(B_VARIN,,MXvibratWorking,9,7,11,9,);
B(B_VARIN,,MXpreVibratorOn,9,8,11,10,);
B(B_F,@AND-2,,18,6,23,10,);
B(B_VAROUT,,QTXvibrator,30,4,32,6,);
B(B_F,@OR-2,,25,3,30,7,);
B(B_VARIN,,MXpreVibratorOn,23,4,25,6,);
L(16,8,18,8);
L(17,9,18,9);
L(17,9,17,11);
L(23,8,24,8);
L(24,6,25,6);
L(24,6,24,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_VARIN,,QWludv2,9,8,11,10,);
B(B_VARIN,,0,9,5,11,7,);
B(B_VARIN,,0,9,9,11,11,);
B(B_VARIN,,QWludv1,9,4,11,6,);
B(B_COMMENT,,Ludv pumps in zero position,1,1,27,2,);
B(B_F,@AND-2,,18,3,23,7,);
B(B_VAROUT,,LXludvInZeroPos,23,4,25,6,);
B(B_F,@EQ-2,,11,3,16,7,);
B(B_F,@EQ-2,,11,7,16,11,);
L(17,6,17,9);
L(17,6,18,6);
L(16,5,18,5);
L(16,9,17,9);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 14 ;
        NETWORK_BODY
B(B_F,@DIV,,28,4,33,8,);
B(B_F,@MUL-2,,35,4,40,8,);
B(B_VARIN,,CDresPowVibrator,32,11,34,13,);
B(B_COMMENT,,calculate maximum power of vibrator depend on hg1 an hg2,1,1,27,2,);
B(B_VARIN,,CDmaxPowVibrator,39,2,41,4,);
B(B_F,@SUB,,42,3,47,7,);
B(B_VAROUT,,LDmaxPower,47,4,49,6,);
B(B_VARIN,,100.0,25,10,27,12,);
B(B_F,limit,,20,4,26,9,);
B(B_F,SigMax4,,11,5,18,11,);
B(B_VARIN,,0.0,17,3,19,5,);
B(B_VARIN,,100.0,17,11,19,13,);
B(B_VARIN,,MDhg1AnalogSig,9,8,11,10,);
B(B_VARIN,,MDhg2AnalogSig,9,9,11,11,);
B(B_VARIN,,MDhg1JoySignal,9,6,11,8,);
B(B_VARIN,,MDhg2JoySignal,9,7,11,9,);
L(34,7,35,7);
L(33,6,35,6);
L(26,6,28,6);
L(27,7,27,11);
L(27,7,28,7);
L(34,7,34,12);
L(40,6,42,6);
L(41,3,41,5);
L(41,5,42,5);
L(18,7,20,7);
L(19,6,20,6);
L(19,8,20,8);
L(19,4,19,6);
L(19,8,19,12);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_F,@ADD-2,,11,3,16,7,);
B(B_VARIN,,CWp1MaxValue,9,4,11,6,);
B(B_VARIN,,CWp2MaxValue,9,5,11,7,);
B(B_VARIN,,CWp1PumpMaxValue,9,8,11,10,);
B(B_VARIN,,CWp2PumpMaxValue,9,9,11,11,);
B(B_F,@ADD-2,,11,7,16,11,);
B(B_F,sel,,17,2,22,7,);
B(B_VARIN,,CXhamVibDirect,15,1,17,3,);
B(B_VAROUT,,LWmaxVolume,22,3,24,5,);
L(16,5,17,5);
L(17,6,17,9);
L(16,9,17,9);
L(17,2,17,4);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 21 ;
        NETWORK_BODY
B(B_COMMENT,,select vibrator pump signal,1,1,27,2,);
B(B_FB,RS,RS2,34,8,39,12,);
B(B_VAROUT,,LXenabPumpSig,40,9,42,11,);
B(B_VAROUT,,QTXaddVolCtrl,40,10,42,12,);
B(B_VARIN,,LXexDrMinPos,17,15,19,17,);
B(B_VARIN,,LXpresExcentAdju,17,16,19,18,);
B(B_F,@AND-3,,27,15,32,20,N);
B(B_VARIN,,LXenabPumpSig,25,18,27,20,);
B(B_F,@OR-2,,19,14,24,18,0N);
B(B_F,@AND-4,,27,8,32,14,);
B(B_VARIN,,MXpreVibratorOn,24,11,26,13,);
B(B_VARIN,,MXclampIsClosed,25,10,27,12,);
B(B_F,@OR-2,,22,6,27,10,0N);
B(B_F,@AND-3,,17,4,22,9,);
B(B_VARIN,,CXhamVibDirect,15,9,17,11,);
B(B_VARIN,,LXludvInZeroPos,15,3,17,5,);
B(B_FB,TON,TON1,11,5,16,9,);
B(B_VARIN,,T#0.3s,9,7,11,9,);
B(B_VARIN,,MXpreVibratorOn,9,6,11,8,);
B(B_COMMENT,,Damit Öl erst freigegeben wird wenn der ø^Schieber geschaltet hat.(nur bei Direkt),23,3,40,5,);
B(B_F,sel,,41,12,46,17,);
B(B_VARIN,,LDx23Poti1,39,15,41,17,);
B(B_VARIN,,0.0,39,14,41,16,);
B(B_VAROUT,,LDanalogSignal,46,13,48,15,);
L(33,10,34,10);
L(39,10,40,10);
L(33,11,34,11);
L(26,17,27,17);
L(32,17,33,17);
L(26,12,26,17);
L(33,11,33,17);
L(25,18,27,18);
L(25,13,25,18);
L(24,16,25,16);
L(32,10,33,10);
L(25,13,27,13);
L(26,12,27,12);
L(27,8,27,10);
L(22,6,22,8);
L(17,9,22,9);
L(16,7,17,7);
L(17,8,17,10);
L(17,4,17,6);
L(40,14,41,14);
L(40,10,40,14);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 15 ;
        NETWORK_BODY
B(B_VARIN,,900.0,9,4,11,6,);
B(B_VARIN,,0.5,9,5,11,7,);
B(B_VARIN,,CDengSpPumpRed,9,6,11,8,);
B(B_VARIN,,1.0,9,7,11,9,);
B(B_VARIN,,MDratedEngSpeed,9,8,11,10,);
B(B_VARIN,,0.5,9,9,11,11,);
B(B_VARIN,,1.0,9,10,11,12,);
B(B_F,GPkx_dV010,,11,3,20,12,);
B(B_COMMENT,,900 U/min 50% limitationø^1400 U/min 0% limitation,29,1,44,3,);
B(B_COMMENT,,signal limitation in consideration to the engine speed,1,1,27,2,);
B(B_VAROUT,,LDanalSigPumpLim,27,4,29,6,);
B(B_F,@MUL-2,,22,3,27,7,);
B(B_VARIN,,LDanalogSignal,19,12,21,14,);
L(21,6,22,6);
L(20,5,22,5);
L(21,6,21,13);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 23 ;
        NETWORK_BODY
B(B_FB,ADpowerRegV011,ADpowerReg1,23,8,44,14,);
B(B_COMMENT,,Integrationszeit der Pumpe 0~125 Sek. Diesø^wird immer benötigt damit Schieber auch demø^Signal folgen kann. (Eingriff GLR) ,51,14,70,17,);
B(B_F,real_to_uint,,23,3,34,6,);
B(B_VAROUT,,LXSignInZero,40,3,42,5,);
B(B_VARIN,,0,33,1,35,3,);
B(B_FB,Integrator,Integrator1,11,8,20,14,);
B(B_VARIN,,TRUE,9,9,11,11,);
B(B_VARIN,,LDanalSigPumpLim,9,10,11,12,);
B(B_VARIN,,CDvibIntTimeUp,9,11,11,13,);
B(B_VARIN,,CDvibIntTimeDn,9,12,11,14,);
B(B_VARIN,,800.0,46,16,48,18,);
B(B_FB,Integrator,Integrator2,48,7,57,13,);
B(B_VARIN,,TRUE,46,8,48,10,);
B(B_VARIN,,MDvibSysPress,19,14,21,16,);
B(B_VARIN,,LDmaxPower,21,20,23,22,);
B(B_VAROUT,,LDanalSigPumpInt,22,6,24,8,);
B(B_VAROUT,,LDanalogSigPump,57,8,59,10,);
B(B_VARIN,,CDvibIntTimeUp,45,15,47,17,);
B(B_VAROUT,,LD1,44,6,46,8,);
B(B_F,@EQ-2,,35,2,40,6,);
B(B_F,limit,,16,15,22,20,);
B(B_VARIN,,LWmaxVolume,14,18,16,20,);
B(B_VARIN,,LWvibStoreVolume,14,16,16,18,);
L(21,11,23,11);
L(22,12,22,17);
L(22,12,23,12);
L(22,5,22,10);
L(22,5,23,5);
L(34,5,35,5);
L(35,2,35,4);
L(20,10,23,10);
L(44,10,48,10);
L(47,11,47,16);
L(47,11,48,11);
L(48,12,48,17);
L(21,11,21,15);
L(23,13,23,21);
L(44,7,44,10);
L(16,17,16,18);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 18 ;
        NETWORK_BODY
B(B_COMMENT,,set vibrator working signal,1,1,27,2,);
B(B_F,@AND-2,,11,8,16,12,N);
B(B_VARIN,,MXpreVibratorOn,9,4,11,6,);
B(B_FB,RS,RS3,22,3,27,7,);
B(B_VAROUT,,MXvibratWorking,27,4,29,6,);
B(B_FB,TON,TON2,17,8,22,12,);
B(B_VAROUT,,LXvibOff,16,6,18,8,);
B(B_F,sel,,11,12,16,17,);
B(B_VARIN,,CXhamVibDirect,9,13,11,15,);
B(B_VARIN,,T#0.5s,9,15,11,17,);
B(B_VARIN,,T#0.0s,9,14,11,16,);
B(B_COMMENT,,Damit Schieber schalten kann (ohne Öl)ø^wird Signal noch eine 1/2 Sekunde ø^gehalten. ,19,13,36,16,);
B(B_VARIN,,LXSignInZero,9,10,11,12,);
L(11,5,11,10);
L(11,5,22,5);
L(16,10,17,10);
L(16,7,16,10);
L(22,6,22,10);
L(17,11,17,14);
L(16,14,17,14);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_VARIN,,LXenabPumpSig,9,5,11,7,);
B(B_FB,F_TRIG,F_TRIG1,11,4,18,7,);
B(B_VARIN,,MXpreVibratorOn,17,7,19,9,);
B(B_COMMENT,,return flow back pressure valve  (Optional),1,1,27,2,);
B(B_FB,RS,RS4,19,4,24,8,);
B(B_VAROUT,,QXretFlowVibrHam,24,5,26,7,);
L(19,7,19,8);
L(18,6,19,6);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,CXhamVibDirect,9,1,11,3,);
B(B_JUMP,,puDi,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 23 ;
        NETWORK_BODY
B(B_COMMENT,,input system pressure vibrator over ludv section,1,1,27,2,);
B(B_VARIN,,MSG_ERROR,17,11,19,13,);
B(B_VARIN,,178,17,9,19,11,);
B(B_FB,MsgRealReal,Message3,22,8,31,15,);
B(B_VARIN,,177,35,16,37,18,);
B(B_VARIN,,MSG_ERROR,35,18,37,20,);
B(B_FB,MsgRealReal,Message4,37,15,46,22,);
B(B_VARIN,,IWvibSysPresP2,9,5,11,7,);
B(B_FB,ScaleAI,ScaleAI2,11,4,19,9,);
B(B_VARIN,,LDscalePress,9,6,11,8,);
B(B_VAROUT,,MDvibSysPress,19,5,21,7,);
B(B_FB,SR,SR2,26,16,31,20,0N);
B(B_F,@AND-2,,21,16,26,20,0N);
B(B_VARIN,,MXengStarterActi,17,18,19,20,);
L(19,10,22,10);
L(19,12,22,12);
L(21,7,21,11);
L(21,11,22,11);
L(19,8,20,8);
L(19,7,21,7);
L(31,18,37,18);
L(20,18,21,18);
L(19,19,21,19);
L(20,20,26,20);
L(26,19,26,20);
L(20,8,20,20);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 28 ;
        NETWORK_BODY
B(B_F,sel,,16,1,21,6,N);
B(B_F,@DIV,,11,4,16,8,);
B(B_VARIN,,2.0,9,6,11,8,);
B(B_VARIN,,LDvibStoreVolume,9,3,11,5,);
B(B_VARIN,,LXvibrator1Sect,14,2,16,4,);
B(B_VARIN,,CWp2cur50liter,20,11,22,13,);
B(B_VARIN,,CWp2cur100liter,20,12,22,14,);
B(B_VARIN,,CWp2cur150liter,20,13,22,15,);
B(B_VARIN,,CWp2cur200liter,20,14,22,16,);
B(B_VARIN,,CWp2cur250liter,20,15,22,17,);
B(B_VARIN,,CWp2cur300liter,20,16,22,18,);
B(B_VARIN,,CWp2MinCurValveB,20,10,22,12,);
B(B_VARIN,,LDp2MaxValue,20,8,22,10,);
B(B_VARIN,,LDanalogSigPump,20,9,22,11,);
B(B_VAROUT,,LDcalcCurrent2,40,7,42,9,);
B(B_VAROUT,,MDvibPump2Signal,40,8,42,10,);
B(B_VAROUT,,LDcalcComp2,40,9,42,11,);
B(B_VARIN,,CWp2MaxCurValveB,20,21,22,23,);
B(B_VARIN,,CDludvLeakOilSig,20,23,22,25,);
B(B_VARIN,,MDvibSysPress,20,22,22,24,);
B(B_VAROUT,,LDcalcVol2,40,10,42,12,);
B(B_FB,ADcalculateQV024,ADcalculateQ1,22,6,40,27,);
L(16,5,16,6);
L(11,4,16,4);
L(11,4,11,6);
L(21,3,21,8);
L(22,18,22,22);
L(21,8,22,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_VARIN,,LXvibrator1Sect,9,3,11,5,);
B(B_COMMENT,,jump to next if only 1 ludv section is used for vibrator,1,1,27,2,);
B(B_JUMP,,next,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 25 ;
        NETWORK_BODY
B(B_F,@DIV,,11,1,16,5,);
B(B_VARIN,,LDvibStoreVolume,9,2,11,4,);
B(B_VARIN,,2.0,9,3,11,5,);
B(B_VARIN,,CWp1cur50liter,15,8,17,10,);
B(B_VARIN,,CWp1cur100liter,15,9,17,11,);
B(B_VARIN,,CWp1cur150liter,15,10,17,12,);
B(B_VARIN,,CWp1cur200liter,15,11,17,13,);
B(B_VARIN,,CWp1cur250liter,15,12,17,14,);
B(B_VARIN,,CWp1cur300liter,15,13,17,15,);
B(B_VARIN,,CWp1MinCurValveB,15,7,17,9,);
B(B_VARIN,,LDanalogSigPump,15,6,17,8,);
B(B_VARIN,,LDp1MaxValue,15,5,17,7,);
B(B_VAROUT,,MDvibPump1Signal,35,5,37,7,);
B(B_VAROUT,,LDcalcCurrent1,35,4,37,6,);
B(B_VAROUT,,LDcalcComp1,35,6,37,8,);
B(B_VARIN,,CWp1MaxCurValveB,15,18,17,20,);
B(B_VARIN,,CDludvLeakOilSig,15,20,17,22,);
B(B_VARIN,,MDvibSysPress,15,19,17,21,);
B(B_VAROUT,,LDcalcVol1,35,7,37,9,);
B(B_FB,ADcalculateQV024,ADcalculateQ2,17,3,35,24,);
L(16,3,17,3);
L(17,3,17,5);
L(17,15,17,19);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,TRUE,9,1,11,3,);
B(B_JUMP,,next,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL := puDi: ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 23 ;
        NETWORK_BODY
B(B_COMMENT,,input system pressure vibrator pump direct,1,1,27,2,);
B(B_VARIN,,MSG_ERROR,17,11,19,13,);
B(B_VARIN,,180,17,9,19,11,);
B(B_FB,MsgRealReal,Message5,22,8,31,15,);
B(B_VARIN,,179,35,16,37,18,);
B(B_VARIN,,MSG_ERROR,35,18,37,20,);
B(B_FB,MsgRealReal,Message6,37,15,46,22,);
B(B_VAROUT,,MDvibSysPress,19,5,21,7,);
B(B_VARIN,,IWvibSysPressDir,9,5,11,7,);
B(B_FB,ScaleAI,ScaleAI3,11,4,19,9,);
B(B_VARIN,,LDscalePress,9,6,11,8,);
B(B_FB,SR,SR3,26,16,31,20,0N);
B(B_F,@AND-2,,21,16,26,20,0N);
B(B_VARIN,,MXengStarterActi,17,18,19,20,);
L(19,10,22,10);
L(19,12,22,12);
L(21,7,21,11);
L(21,11,22,11);
L(19,8,20,8);
L(19,7,21,7);
L(31,18,37,18);
L(20,18,21,18);
L(19,19,21,19);
L(20,20,26,20);
L(26,19,26,20);
L(20,8,20,20);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 20 ;
        NETWORK_BODY
B(B_FB,F_TRIG,F_TRIG2,12,4,19,7,);
B(B_VARIN,,MXvibratWorking,10,5,12,7,);
B(B_F,sel,,21,6,26,11,);
B(B_VAROUT,,MXludv1ExtAnaSig,26,7,28,9,);
B(B_F,sel,,13,7,18,12,);
B(B_F,sel,,21,11,26,16,);
B(B_F,sel,,13,12,18,17,);
B(B_VARIN,,FALSE,17,17,19,19,);
B(B_VARIN,,TRUE,9,15,11,17,);
B(B_VARIN,,MXludv1ExtAnaSig,9,9,11,11,);
B(B_VAROUT,,MXludv2ExtAnaSig,26,12,28,14,);
B(B_VARIN,,MXludv2ExtAnaSig,8,14,10,16,);
B(B_COMMENT,,switch over to extern control ludv pumps ,1,1,27,2,);
L(12,9,13,9);
L(20,8,21,8);
L(18,9,21,9);
L(19,10,21,10);
L(18,14,21,14);
L(19,10,19,18);
L(19,15,21,15);
L(20,6,20,13);
L(20,13,21,13);
L(19,6,20,6);
L(11,11,13,11);
L(11,16,13,16);
L(11,11,11,16);
L(12,6,12,14);
L(12,14,13,14);
L(11,10,13,10);
L(10,15,13,15);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 28 ;
        NETWORK_BODY
B(B_COMMENT,,calculation volume ludv pump1,1,1,27,2,);
B(B_VARIN,,CWludv1MinCurPum,16,10,18,12,);
B(B_VARIN,,LDanalogSigPump,16,9,18,11,);
B(B_VARIN,,CWp1Pump100liter,16,12,18,14,);
B(B_VARIN,,CWp1Pump50liter,16,11,18,13,);
B(B_VARIN,,LDp1PumpMaxValue,16,8,18,10,);
B(B_VARIN,,CWludv1MaxCurPum,16,21,18,23,);
B(B_F,@DIV,,11,4,16,8,);
B(B_VARIN,,2.0,9,6,11,8,);
B(B_VARIN,,LDvibStoreVolume,9,5,11,7,);
B(B_VAROUT,,LDcalcCurrent1,36,7,38,9,);
B(B_VAROUT,,LDcalcComp1,36,9,38,11,);
B(B_VARIN,,CWp1Pump150liter,16,13,18,15,);
B(B_VARIN,,CWp1Pump250liter,16,15,18,17,);
B(B_VARIN,,CWp1Pump300liter,16,16,18,18,);
B(B_VARIN,,CWp1Pump350liter,16,17,18,19,);
B(B_VARIN,,CWp1Pump400liter,16,18,18,20,);
B(B_VARIN,,CWp1Pump200liter,16,14,18,16,);
B(B_VARIN,,CWp1Pump450liter,16,19,18,21,);
B(B_VARIN,,CWp1Pump500liter,16,20,18,22,);
B(B_VARIN,,MDvibSysPress,16,22,18,24,);
B(B_VARIN,,CDludvLeakOilSig,16,23,18,25,);
B(B_VAROUT,,MDludv1ExtAnaSig,36,8,38,10,);
B(B_FB,ADcalculateQV024,ADcalculateQ3,18,6,36,27,);
L(17,6,17,8);
L(16,6,17,6);
L(17,8,18,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 28 ;
        NETWORK_BODY
B(B_COMMENT,,calculation volume ludv pump1,1,1,27,2,);
B(B_VARIN,,CWludv2MinCurPum,16,10,18,12,);
B(B_VARIN,,LDanalogSigPump,16,9,18,11,);
B(B_VARIN,,CWp2Pump100liter,16,12,18,14,);
B(B_VARIN,,CWp2Pump50liter,16,11,18,13,);
B(B_VARIN,,LDp2PumpMaxValue,16,8,18,10,);
B(B_VARIN,,CWludv2MaxCurPum,16,21,18,23,);
B(B_F,@DIV,,11,4,16,8,);
B(B_VARIN,,2.0,9,6,11,8,);
B(B_VARIN,,LDvibStoreVolume,9,5,11,7,);
B(B_VARIN,,CWp2Pump150liter,16,13,18,15,);
B(B_VARIN,,CWp2Pump250liter,16,15,18,17,);
B(B_VARIN,,CWp2Pump300liter,16,16,18,18,);
B(B_VARIN,,CWp2Pump350liter,16,17,18,19,);
B(B_VARIN,,CWp2Pump400liter,16,18,18,20,);
B(B_VARIN,,CWp2Pump200liter,16,14,18,16,);
B(B_VARIN,,CWp2Pump450liter,16,19,18,21,);
B(B_VARIN,,CWp2Pump500liter,16,20,18,22,);
B(B_VARIN,,MDvibSysPress,16,22,18,24,);
B(B_VARIN,,CDludvLeakOilSig,16,23,18,25,);
B(B_VAROUT,,LDcalcCurrent2,36,7,38,9,);
B(B_VAROUT,,LDcalcComp2,36,9,38,11,);
B(B_VAROUT,,MDludv2ExtAnaSig,36,8,38,10,);
B(B_FB,ADcalculateQV024,ADcalculateQ4,18,6,36,27,);
L(17,6,17,8);
L(16,6,17,6);
L(17,8,18,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_COMMENT,,release enable vibrator valve (pump direct),1,1,27,2,);
B(B_FB,RS,RS5,11,4,16,8,);
B(B_VAROUT,,QXrelVibHamDirec,16,5,18,7,);
B(B_VARIN,,LXvibOff,9,6,11,8,);
B(B_VARIN,,LXenabPumpSig,9,5,11,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL := next: ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 18 ;
        NETWORK_BODY
B(B_COMMENT,,activate vibrator pressure ,1,1,27,2,);
B(B_VARIN,,MXvibratWorking,9,5,11,7,);
B(B_FB,R_TRIG,R_TRIG2,11,4,18,7,);
B(B_FB,F_TRIG,F_TRIG3,11,8,18,11,);
B(B_F,sel,,18,9,23,14,);
B(B_VARIN,,MWludvExtPresSig,16,11,18,13,);
B(B_F,sel,,24,8,29,13,);
B(B_VAROUT,,MWludvExtPresSig,29,9,31,11,);
B(B_VARIN,,CWludvPressure,16,12,18,14,);
B(B_VARIN,,LWvibStorePress,22,15,24,17,);
L(11,6,11,10);
L(18,6,24,6);
L(23,11,24,11);
L(24,6,24,10);
L(18,10,18,11);
L(24,12,24,16);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_COMMENT,,vibrator has reached value,1,1,27,2,);
B(B_F,@GE-2,,18,5,23,9,);
B(B_VARIN,,LDanalSigPumpInt,9,6,11,8,);
B(B_F,@ADD-2,,11,5,16,9,);
B(B_VARIN,,1.0,9,7,11,9,);
B(B_VARIN,,LXenabPumpSig,22,3,24,5,);
B(B_VARIN,,LDanalogSignal,15,9,17,11,);
B(B_F,@AND-2,,24,4,29,8,);
B(B_VARIN,,MXvibratWorking,27,8,29,10,);
B(B_FB,RS,RS6,29,4,34,8,0N);
B(B_VAROUT,,LXvibReachValue,34,5,36,7,);
L(16,7,18,7);
L(17,8,17,10);
L(17,8,18,8);
L(24,4,24,6);
L(23,7,24,7);
L(29,7,29,9);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_COMMENT,,excentric drive,1,1,27,2,);
B(B_VARIN,,LXvibReachValue,9,4,11,6,);
B(B_VARIN,,MXpreVibratorOn,9,5,11,7,);
B(B_F,@XOR-2,,11,3,16,7,);
B(B_VAROUT,,LXstopExcentOut,16,4,18,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 30 ;
        NETWORK_BODY
B(B_COMMENT,,excentric drive,1,1,27,2,);
B(B_F,@AND-3,,41,14,46,19,0NN);
B(B_F,@OR-2,,33,14,38,18,);
B(B_F,@AND-2,,26,12,31,16,0N);
B(B_VARIN,,MXclampWorking,38,19,40,21,);
B(B_F,@OR-3,,26,7,31,12,);
B(B_VARIN,,MXstopAllFunctio,23,8,25,10,);
B(B_VARIN,,LXstopExcentOut,22,9,24,11,);
B(B_VARIN,,LXexDrAutoInPre,22,16,24,18,);
B(B_VARIN,,QXexcentDriveOut,21,14,23,16,);
B(B_VAROUT,,QXexcentDriveOut,47,5,49,7,);
B(B_VAROUT,,QTXexDriveOut,47,4,49,6,);
B(B_F,@AND-3,,41,3,46,8,0NN);
B(B_F,@AND-2,,26,3,31,7,0N);
B(B_VARIN,,QXexcentDriveIn,28,22,30,24,);
B(B_VARIN,,MXflashSignal,31,27,33,29,);
B(B_F,@AND-3,,33,24,38,29,);
B(B_VAROUT,,QTXexDriveIn,45,21,47,23,);
B(B_F,@AND-2,,33,20,38,24,);
B(B_F,@OR-2,,40,20,45,24,);
B(B_VAROUT,,QXexcentDriveIn,46,15,48,17,);
B(B_F,@OR-2,,18,11,23,15,);
B(B_VARIN,,ITXexDriveIn,16,13,18,15,);
B(B_F,@AND-2,,12,10,17,14,);
B(B_VARIN,,QXexcentDriveIn,24,7,26,9,);
B(B_F,@OR-2,,20,3,25,7,);
B(B_VARIN,,MXexDrPreJoy,9,11,11,13,);
B(B_F,@AND-2,,12,4,17,8,);
B(B_VARIN,,ITXexDriveOut,17,3,19,5,);
B(B_VARIN,,MXjoyExcentDrOut,10,5,12,7,);
B(B_VARIN,,MXjoyExcentDrIn,10,12,12,14,);
L(39,6,39,9);
L(39,17,41,17);
L(40,18,41,18);
L(24,11,26,11);
L(38,16,41,16);
L(24,17,33,17);
L(31,14,32,14);
L(32,16,33,16);
L(25,19,39,19);
L(39,17,39,19);
L(40,7,40,20);
L(31,9,39,9);
L(25,9,25,19);
L(25,9,26,9);
L(24,10,26,10);
L(24,11,24,17);
L(23,15,26,15);
L(23,14,26,14);
L(40,7,41,7);
L(39,6,41,6);
L(47,5,47,6);
L(46,5,47,5);
L(31,5,41,5);
L(31,17,31,26);
L(32,14,32,22);
L(30,23,30,27);
L(39,23,39,26);
L(38,26,39,26);
L(39,23,40,23);
L(38,22,40,22);
L(32,22,33,22);
L(30,23,33,23);
L(31,26,33,26);
L(30,27,33,27);
L(23,13,23,14);
L(26,6,26,8);
L(25,5,26,5);
L(11,12,12,12);
L(11,7,12,7);
L(11,7,11,12);
L(17,6,20,6);
L(19,4,19,5);
L(19,5,20,5);
L(18,12,18,13);
L(17,12,18,12);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 22 ;
        NETWORK_BODY
B(B_VARIN,,LXpresExcentAdju,9,6,11,8,);
B(B_VARIN,,MXpreVibratorOn,10,5,12,7,);
B(B_FB,R_TRIG,R_TRIG3,13,4,20,7,);
B(B_F,@AND-2,,21,4,26,8,);
B(B_F,@AND-2,,21,8,26,12,);
B(B_FB,F_TRIG,F_TRIG4,13,8,20,11,);
B(B_FB,RS,RS7,35,7,40,11,);
B(B_F,@OR-2,,28,7,33,11,);
B(B_COMMENT,,excenter drive automatic,1,1,27,2,);
B(B_F,@AND-2,,42,7,47,11,0N);
B(B_VAROUT,,LXexDrAutoInPre,48,8,50,10,);
B(B_VARIN,,LXexDrMinPos,32,12,34,14,);
B(B_VARIN,,MXclampWorking,39,13,41,15,);
B(B_FB,TON,TON3,49,12,54,16,);
B(B_FB,RS,RS8,57,12,62,16,);
B(B_VAROUT,,LXexDrMinPos,62,13,64,15,);
B(B_VARIN,,LDexcentAutoTime,47,14,49,16,);
B(B_F,@OR-2,,50,17,55,21,);
B(B_VARIN,,QXexcentDriveOut,47,16,49,18,);
B(B_FB,R_TRIG,R_TRIG4,41,18,48,21,);
B(B_VARIN,,LXexDrMinPos,39,19,41,21,);
B(B_VAROUT,,LXstopVib,27,11,29,13,);
L(20,6,21,6);
L(11,7,21,7);
L(12,6,13,6);
L(12,6,12,10);
L(12,10,13,10);
L(20,10,21,10);
L(11,7,11,11);
L(11,11,21,11);
L(26,6,27,6);
L(27,6,27,9);
L(27,9,28,9);
L(33,9,35,9);
L(34,10,35,10);
L(47,9,48,9);
L(40,9,42,9);
L(41,10,42,10);
L(34,10,34,13);
L(41,10,41,14);
L(48,14,49,14);
L(56,15,57,15);
L(54,14,57,14);
L(49,17,49,19);
L(49,19,50,19);
L(48,20,50,20);
L(56,15,56,19);
L(55,19,56,19);
L(48,9,48,14);
L(27,10,27,12);
L(26,10,28,10);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_F,@OR-2,,11,3,16,7,);
B(B_VARIN,,QXexcentDriveOut,9,4,11,6,);
B(B_VARIN,,QXexcentDriveIn,9,5,11,7,);
B(B_COMMENT,,set exDr cylinder working,1,1,27,2,);
B(B_VAROUT,,MXexDrWorking,17,4,19,6,);
B(B_VAROUT,,LXexDrWorking,17,5,19,7,);
L(16,5,17,5);
L(17,5,17,6);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 26 ;
        NETWORK_BODY
B(B_COMMENT,,clamping jaw,1,1,27,2,);
B(B_F,@OR-2,,20,15,25,19,);
B(B_F,@OR-3,,13,7,18,12,);
B(B_F,@AND-2,,13,3,18,7,0N);
B(B_VARIN,,QXclampJawClose,11,5,13,7,);
B(B_VARIN,,ITXclampOpen,11,4,13,6,);
B(B_VARIN,,LXclampAutoClose,10,17,12,19,);
B(B_VAROUT,,QXclampJawOpen,27,5,29,7,);
B(B_VAROUT,,QTXclampOpen,27,4,29,6,);
B(B_F,@AND-2,,21,3,26,7,0N);
B(B_VARIN,,MXflashSignal,17,23,19,25,);
B(B_F,@AND-2,,19,21,24,25,);
B(B_F,@OR-2,,26,18,31,22,);
B(B_VAROUT,,QTXclampClose,31,19,33,21,);
B(B_VARIN,,QXclampJawOpen,9,15,11,17,);
B(B_VARIN,,ITXclampClose,9,14,11,16,);
B(B_COMMENT,,LXenabPumpSig,21,9,31,10,);
B(B_F,@AND-3,,13,12,18,17,N0N);
B(B_VAROUT,,QXclampJawClose,25,16,27,18,);
B(B_VARIN,,MXvibratWorking,11,8,13,10,);
B(B_VARIN,,MXstopAllFunctio,9,9,11,11,);
L(12,11,13,11);
L(12,18,20,18);
L(19,17,20,17);
L(18,9,19,9);
L(12,11,12,18);
L(27,5,27,6);
L(26,5,27,5);
L(18,5,21,5);
L(19,6,19,9);
L(19,6,21,6);
L(19,14,19,20);
L(18,18,18,23);
L(18,23,19,23);
L(24,23,25,23);
L(25,21,25,23);
L(25,21,26,21);
L(19,20,26,20);
L(11,16,13,16);
L(11,15,13,15);
L(18,14,19,14);
L(11,10,13,10);
L(11,10,11,14);
L(11,14,13,14);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 19 ;
        NETWORK_BODY
B(B_COMMENT,,set clamping jaw automatic close,1,1,27,2,);
B(B_FB,RS,RS9,31,5,36,9,);
B(B_VAROUT,,LXclampAutoClose,43,9,45,11,);
B(B_FB,R_TRIG,R_TRIG5,22,3,29,6,);
B(B_VARIN,,MXpreClamClosJoy,9,4,11,6,);
B(B_F,@AND-3,,38,8,43,13,0NN);
B(B_VARIN,,MXclampIsClosed,36,10,38,12,);
B(B_F,@AND-2,,24,12,29,16,0N);
B(B_VARIN,,LXstopVib,22,13,24,15,);
B(B_VARIN,,MXclampIsClosed,22,14,24,16,);
B(B_FB,RS,RS10,31,12,36,16,);
B(B_VARIN,,LXexDrMinPos,28,16,30,18,);
B(B_VAROUT,,MXclampAutoClose,37,6,39,8,);
B(B_F,@OR-2,,17,3,22,7,);
B(B_F,@AND-2,,11,3,16,7,0N);
B(B_VARIN,,MXstopAllFunctio,9,5,11,7,);
B(B_VARIN,,QXclampJawClose,15,7,17,9,);
B(B_F,@OR-2,,24,8,29,12,0N);
B(B_F,@AND-2,,18,8,23,12,0N);
B(B_VARIN,,MXvibratWorking,16,10,18,12,);
B(B_VARIN,,ITXclampOpen,16,9,18,11,);
B(B_VARIN,,MXminEngineSpeed,22,12,24,14,);
L(30,5,30,7);
L(30,7,31,7);
L(29,5,30,5);
L(30,8,30,10);
L(30,8,31,8);
L(37,7,37,10);
L(36,7,37,7);
L(37,10,38,10);
L(29,14,31,14);
L(30,15,30,17);
L(30,15,31,15);
L(37,12,37,14);
L(36,14,37,14);
L(37,12,38,12);
L(17,6,17,8);
L(16,5,17,5);
L(29,10,30,10);
L(23,10,24,10);
L(24,11,24,13);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 18 ;
        NETWORK_BODY
B(B_FB,TON,TON4,26,13,31,17,);
B(B_FB,RS,RS11,33,13,38,17,);
B(B_VAROUT,,MXclampIsClosed,38,14,40,16,);
B(B_VARIN,,T#2.0s,24,15,26,17,);
B(B_F,@GT-2,,12,11,17,15,);
B(B_VARIN,,MDvibClampPress,10,12,12,14,);
B(B_VARIN,,LDvibClampClosed,10,13,12,15,);
B(B_F,@AND-2,,19,11,24,15,);
B(B_COMMENT,,clamp is closed,1,1,27,2,);
B(B_VARIN,,QXclampJawOpen,24,8,26,10,);
B(B_VARIN,,LXclampErPresInd,24,7,26,9,);
B(B_F,@OR-4,,26,5,31,11,000N);
B(B_FB,R_TRIG,R_TRIG6,17,4,24,7,);
B(B_F,@OR-2,,11,4,16,8,);
B(B_VARIN,,MXpreClamClosJoy,9,6,11,8,);
B(B_VARIN,,QXclampJawClose,9,5,11,7,);
B(B_VARIN,,QXclampJawClose,16,15,18,17,);
L(32,16,33,16);
L(31,15,33,15);
L(17,13,19,13);
L(18,14,19,14);
L(24,13,25,13);
L(25,13,25,15);
L(25,15,26,15);
L(18,10,18,13);
L(18,10,26,10);
L(32,7,32,16);
L(31,7,32,7);
L(24,6,25,6);
L(25,6,25,7);
L(25,7,26,7);
L(16,6,17,6);
L(18,14,18,16);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_F,@OR-2,,11,3,16,7,);
B(B_VARIN,,QXclampJawClose,9,4,11,6,);
B(B_VARIN,,QXclampJawOpen,9,5,11,7,);
B(B_COMMENT,,set clamp cylinder working,1,1,27,2,);
B(B_VAROUT,,QXrelClampJaw,17,5,19,7,);
B(B_VAROUT,,MXclampWorking,17,4,19,6,);
B(B_VAROUT,,LXclampWorking,17,6,19,8,);
L(16,5,17,5);
L(17,5,17,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_VARIN,,MXvibratWorking,9,4,11,6,);
B(B_VARIN,,LXexDrWorking,9,5,11,7,);
B(B_VARIN,,LXclampWorking,9,6,11,8,);
B(B_F,@OR-3,,11,3,16,8,);
B(B_VAROUT,,LXvibFunkWorking,16,4,18,6,);
B(B_COMMENT,,vibrator funktions working,1,1,27,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_VARIN,,TRUE,9,3,11,5,);
B(B_COMMENT,, exit programm,1,1,27,2,);
B(B_RETURN,,,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL := init: ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,init program,1,1,27,2,);
B(B_VARIN,,TRUE,9,3,11,5,);
B(B_VAROUT,,LXinitOk,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value additional hydraulics vibrator,1,1,27,2,);
B(B_FB,CorrValue_Bool,CorrValue_Bool1,11,4,23,10,);
B(B_VARIN,,CXadVibOperat,9,8,11,10,);
B(B_VARIN,,FALSE,9,5,11,7,);
B(B_VARIN,,FALSE,9,6,11,8,);
B(B_VARIN,,TRUE,9,7,11,9,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value vibrator/hammer pump direct (without ludv section),1,1,27,2,);
B(B_FB,CorrValue_Bool,CorrValue_Bool2,11,4,23,10,);
B(B_VARIN,,FALSE,9,5,11,7,);
B(B_VARIN,,FALSE,9,6,11,8,);
B(B_VARIN,,TRUE,9,7,11,9,);
B(B_VARIN,,CXhamVibDirect,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value excentric drive on joy stick ,1,1,27,2,);
B(B_FB,CorrValue_Bool,CorrValue_Bool3,11,4,23,10,);
B(B_VARIN,,FALSE,9,5,11,7,);
B(B_VARIN,,FALSE,9,6,11,8,);
B(B_VARIN,,TRUE,9,7,11,9,);
B(B_VARIN,,CXexDrOnJoyStick,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value integrator time vibrator up,1,1,27,2,);
B(B_VARIN,,25.0,9,5,11,7,);
B(B_VARIN,,10.0,9,6,11,8,);
B(B_VARIN,,100.0,9,7,11,9,);
B(B_VARIN,,CDvibIntTimeUp,9,8,11,10,);
B(B_FB,CorrValue_Real,CorrValue_Real1,11,4,23,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value integrator time vibrator down,1,1,27,2,);
B(B_VARIN,,25.0,9,5,11,7,);
B(B_VARIN,,10.0,9,6,11,8,);
B(B_VARIN,,100.0,9,7,11,9,);
B(B_VARIN,,CDvibIntTimeDn,9,8,11,10,);
B(B_FB,CorrValue_Real,CorrValue_Real2,11,4,23,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,maximum power vibrator [kW],1,1,27,2,);
B(B_VARIN,,280.0,9,5,11,7,);
B(B_VARIN,,50.0,9,6,11,8,);
B(B_VARIN,,500.0,9,7,11,9,);
B(B_VARIN,,CDmaxPowVibrator,9,8,11,10,);
B(B_FB,CorrValue_Real,CorrValue_Real3,11,4,23,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_VARIN,,30.0,9,5,11,7,);
B(B_VARIN,,0.0,9,6,11,8,);
B(B_VARIN,,100.0,9,7,11,9,);
B(B_VARIN,,CDresPowVibrator,9,8,11,10,);
B(B_FB,CorrValue_Real,CorrValue_Real4,11,4,23,10,);
B(B_COMMENT,,reserved power vibrator [kW],1,1,27,2,);
        END_NETWORK_BODY
    END_NET_WORK
END_BODY
END_PROGRAM

PROGRAM ADwinchSynchV060
	VAR_EXTERNAL 
		IXentrySwiClosed: BOOL:=FALSE;
			(*entry switch closed*)
		ITXwinchSynch: BOOL:=FALSE;
			(*preselection grab control/winch synchronisation*)
		QTXwinchSynch: BOOL:=FALSE;
			(*enable grab control/winch synchronisation*)
		QXhgWinSynConVal: BOOL:=FALSE;
			(*ad winch synchronisation hg connection valve*)
		QXhg1BrakeNormal: BOOL:=FALSE;
			(*HG 1 brake normal speed operation*)
		QXhg1BrakeFastSp: BOOL:=FALSE;
			(*HG 1 brake fast speed operation*)
		QXhg2BrakeNormal: BOOL:=FALSE;
			(*HG 2 brake normal speed operation*)
		QXhg2BrakeFastSp: BOOL:=FALSE;
			(*HG 2 brake fast speed operation*)
		MXadWinSynWork: BOOL:=FALSE;
			(*ad winch synchronization working*)
		QTXhg1FastSpeed: BOOL:=FALSE;
			(*enable hg1 fast speed operation *)
		QTXhg2FastSpeed: BOOL:=FALSE;
			(*enable hg2 fast speed operation *)
		MXhg1PumpInZero: BOOL:=FALSE;
			(*HG 1 pump in zero*)
		MXhg2PumpInZero: BOOL:=FALSE;
			(*HG 2 pump in zero*)
		MXhg2ExtAnalSign: BOOL:=FALSE;
			(*HG 2 other, external analog signal*)
		MXhg1LocStopInt: BOOL:=FALSE;
			(*HG 1 local stop integrated*)
		MXhg1LocStopRapU: BOOL:=FALSE;
			(*HG 1 local stop rapid lifting*)
		MXhg1LocStopRapD: BOOL:=FALSE;
			(*HG 1 local stop rapid lowering*)
		MXhg2LocStopInt: BOOL:=FALSE;
			(*HG 2 local stop integrated*)
		MXhg2LocStopRapU: BOOL:=FALSE;
			(*HG 2 local stop rapid lifting*)
		MXhg2LocStopRapD: BOOL:=FALSE;
			(*HG 2 local stop rapid lowering*)
		MXadStopHg1Up: BOOL:=FALSE;
			(*additional device stop hg1 lifting*)
		MXadStopHg2Up: BOOL:=FALSE;
			(*additional device stop hg2 lifting*)
		MXadStopHg1Dn: BOOL:=FALSE;
			(*additional device stop hg1 lowering*)
		MXadStopHg2Dn: BOOL:=FALSE;
			(*additional device stop hg2 lowering*)
		MXwinSynLockTrim: BOOL:=FALSE;
			(*winch synchronisation lock trimot*)
		MXdgcActiveHg1: BOOL:=FALSE;
			(*ad dynamic ground compaction hg1 active*)
		MXdgcActiveHg2: BOOL:=FALSE;
			(*ad dynamic ground compaction hg2 active*)
		MXjoyWinchSyn: BOOL:=FALSE;
			(*ad winch synchronization preselection on joystick*)
		MXlmlBlockHg1: BOOL:=FALSE;
			(*lml block hg1 by load location 3*)
		MXlmlBlockHg2: BOOL:=FALSE;
			(*lml block hg2 by load location 1 or 2 and midfall*)
		MXlmlCalculating: BOOL:=FALSE;
			(*lml is calculating with new adjustments*)
		MXwinSynPres: BOOL:=FALSE;
			(*winch synchronization preselected*)
		MDhg1JoySignal: REAL:=0.0;
			(*HG 1 joystick signal in +/-[%]*)
		MDhg2ExtAnalSign: REAL:=0.0;
			(*HG 2 external analog signal in [%]*)
	END_VAR
	VAR_EXTERNAL CONSTANT
		MSG_INFO: UINT:=0;
			(* message priority: "info" *)
	END_VAR
	VAR_EXTERNAL RETAIN
		MXwinchSynchrX23: BOOL:=FALSE;
			(*winch synchronisation by X23*)
	END_VAR
	VAR_EXTERNAL CONSTANT RETAIN
		CXwinSynchByX23: BOOL:=FALSE;
			(*additional device winch synchronization by X23 keyboard button (locked)*)
		CXadWinchSynchro: BOOL:=FALSE;
			(*additional device winch synchronization by joystick button (not locked)*)
		CXadGrabControl: BOOL:=FALSE;
			(*additional device grab control*)
	END_VAR
	VAR 
		LXbuttonWinchSyn: BOOL:=FALSE;
		LXadWinchSynchro: BOOL:=FALSE;
			(*additional device winch synchronization preselceted*)
		LXadWinSynActive: BOOL:=FALSE;
			(*additional device winch synchronization active*)
		LXinitOk: BOOL:=FALSE;
		LXstart: BOOL:=FALSE;
		LX1: BOOL:=FALSE;
		LX2: BOOL:=FALSE;
		LX3: BOOL:=FALSE;
		LX4: BOOL:=FALSE;
		RS1: RS;
		RS2: RS;
		RS3: RS;
		RS4: RS;
		RS5: RS;
		RS6: RS;
		RS7: RS;
		RS8: RS;
		F_TRIG1: F_TRIG;
		R_TRIG1: R_TRIG;
		Message1: MsgRealReal;
		CorrValue_Bool1: CorrValue_Bool;
		CorrValue_Bool2: CorrValue_Bool;
	END_VAR
'FBD'
BODY
    WORKSPACE
        NETWORK_LIST_TYPE := NWTYPEFBD ;
        ACTIVE_NETWORK := 0 ;
    END_WORKSPACE
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_COMMENT,,init first time,1,1,27,2,);
B(B_VARIN,,LXinitOk,9,4,11,6,);
B(B_F,not,,11,3,16,6,);
B(B_JUMP,,init,16,4,18,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 17 ;
        NETWORK_BODY
B(B_F,sel,,18,11,23,16,);
B(B_VARIN,,LXadWinchSynchro,16,14,18,16,);
B(B_VARIN,,CXadWinchSynchro,16,13,18,15,);
B(B_VARIN,,IXentrySwiClosed,9,10,11,12,);
B(B_VARIN,,LXstart,9,11,11,13,);
B(B_COMMENT,,protect correction value change while program activ,1,1,27,2,);
B(B_F,@AND-2,,11,9,16,13,);
B(B_F,@OR-2,,18,3,23,7,);
B(B_VARIN,,MXdgcActiveHg1,16,4,18,6,);
B(B_VARIN,,MXdgcActiveHg2,16,5,18,7,);
B(B_F,@AND-3,,26,9,31,14,NN);
B(B_VAROUT,,LXadWinchSynchro,31,10,33,12,);
B(B_VARIN,,CXadGrabControl,22,7,24,9,);
L(17,11,17,13);
L(17,13,18,13);
L(16,11,17,11);
L(23,5,25,5);
L(23,13,26,13);
L(25,5,25,11);
L(25,11,26,11);
L(24,12,26,12);
L(24,8,24,12);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VAROUT,,LXstart,11,1,13,3,);
B(B_VARIN,,TRUE,9,1,11,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_COMMENT,,jump if no "winch synch by X23" is preselected,1,1,27,2,);
B(B_VARIN,,CXwinSynchByX23,9,4,11,6,);
B(B_F,not,,16,3,21,6,);
B(B_VARIN,,MXwinchSynchrX23,9,5,11,7,);
B(B_F,@OR-2,,11,3,16,7,);
B(B_JUMP,,nowins,21,4,23,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 27 ;
        NETWORK_BODY
B(B_COMMENT,,preselection winch synch by switch 22 of X23,1,1,27,2,);
B(B_VARIN,,ITXwinchSynch,9,7,11,9,);
B(B_VARIN,,CXwinSynchByX23,17,3,19,5,);
B(B_F,@AND-2,,21,5,26,9,);
B(B_F,@AND-3,,21,9,26,14,);
B(B_VARIN,,MXwinchSynchrX23,19,12,21,14,);
B(B_FB,RS,RS1,42,5,47,9,);
B(B_VAROUT,,QTXwinchSynch,48,6,50,8,);
B(B_VAROUT,,MXwinchSynchrX23,48,7,50,9,);
B(B_VARIN,,CXwinSynchByX23,25,14,27,16,);
B(B_VARIN,,CXadGrabControl,26,15,28,17,);
B(B_VARIN,,MXdgcActiveHg1,27,16,29,18,);
B(B_VARIN,,MXdgcActiveHg2,28,17,30,19,);
B(B_VARIN,,MXlmlBlockHg1,29,18,31,20,);
B(B_VARIN,,MXlmlBlockHg2,30,19,32,21,);
B(B_FB,R_TRIG,R_TRIG1,11,6,18,9,);
B(B_FB,MsgRealReal,Message1,53,10,62,17,);
B(B_VARIN,,714,51,11,53,13,);
B(B_VARIN,,MSG_INFO,51,13,53,15,);
B(B_COMMENT,,ACHTUNG: Dieses RS wird im Init-Teil gesetzt !!!,40,3,58,4,);
B(B_VARIN,,MXlmlCalculating,31,20,33,22,);
B(B_VARIN,,QTXhg1FastSpeed,26,23,28,25,);
B(B_VARIN,,QTXhg2FastSpeed,26,24,28,26,);
B(B_F,@XOR-2,,28,22,33,26,);
B(B_F,@OR-9,,35,9,40,20,0N);
L(19,7,21,7);
L(19,4,19,7);
L(20,8,20,11);
L(20,11,21,11);
L(19,7,19,12);
L(19,12,21,12);
L(47,7,48,7);
L(41,8,41,11);
L(41,8,42,8);
L(26,7,42,7);
L(27,12,27,15);
L(27,12,35,12);
L(28,13,28,16);
L(29,14,29,17);
L(30,15,30,18);
L(30,15,35,15);
L(29,14,35,14);
L(28,13,35,13);
L(31,16,31,19);
L(31,16,35,16);
L(32,17,35,17);
L(32,17,32,20);
L(18,8,21,8);
L(48,13,53,13);
L(48,7,48,13);
L(34,19,35,19);
L(34,19,34,24);
L(33,18,33,21);
L(33,18,35,18);
L(33,24,34,24);
L(26,11,35,11);
L(40,11,41,11);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL := nowins: ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VAROUT,,LXbuttonWinchSyn,11,1,13,3,);
B(B_VARIN,,MXjoyWinchSyn,9,1,11,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 15 ;
        NETWORK_BODY
B(B_VARIN,,QTXhg1FastSpeed,9,9,11,11,);
B(B_VARIN,,QTXhg2FastSpeed,9,10,11,12,);
B(B_F,@XOR-2,,11,8,16,12,);
B(B_F,@AND-3,,18,3,23,8,0N);
B(B_VARIN,,LXadWinchSynchro,16,12,18,14,);
B(B_COMMENT,,preselection grab control ,1,1,27,2,);
B(B_VAROUT,,MXwinSynPres,23,4,25,6,);
B(B_VARIN,,LXbuttonWinchSyn,9,4,11,6,);
B(B_VARIN,,MXwinchSynchrX23,9,5,11,7,);
B(B_F,@OR-2,,11,3,16,7,);
L(16,5,18,5);
L(17,6,18,6);
L(17,6,17,10);
L(16,10,17,10);
L(18,7,18,13);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 16 ;
        NETWORK_BODY
B(B_COMMENT,,exit program when winch synchronization not enabled or not active,1,1,27,2,);
B(B_RETURN,,,42,4,44,6,);
B(B_F,@AND-6,,37,3,42,11,0NNNNN);
B(B_COMMENT,,make shure that all stop bits areø^reseted when the program willø^not be scaned.,37,11,50,14,);
B(B_VARIN,,LX1,30,9,32,11,);
B(B_VARIN,,LX2,31,10,33,12,);
B(B_VARIN,,LX3,32,11,34,13,);
B(B_VARIN,,LX4,33,12,35,14,);
B(B_VARIN,,MXadWinSynWork,34,13,36,15,);
B(B_VARIN,,LXadWinchSynchro,24,4,26,6,);
B(B_VARIN,,LXbuttonWinchSyn,9,5,11,7,);
B(B_VARIN,,MXwinchSynchrX23,9,6,11,8,);
B(B_F,@OR-2,,11,4,16,8,);
B(B_VARIN,,QTXhg1FastSpeed,18,8,20,10,);
B(B_VARIN,,QTXhg2FastSpeed,18,9,20,11,);
B(B_F,@XOR-2,,20,7,25,11,);
B(B_F,@OR-3,,26,3,31,8,NN);
L(32,6,32,10);
L(32,6,37,6);
L(36,10,36,14);
L(35,9,35,13);
L(34,8,34,12);
L(33,7,33,11);
L(33,7,37,7);
L(34,8,37,8);
L(35,9,37,9);
L(36,10,37,10);
L(16,6,26,6);
L(25,7,25,9);
L(25,7,26,7);
L(31,5,37,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 27 ;
        NETWORK_BODY
B(B_COMMENT,,stop both winches in case of one winch stop (release other direction),1,1,27,2,);
B(B_F,@OR-2,,12,7,17,11,);
B(B_VARIN,,MXhg1LocStopInt,9,9,11,11,);
B(B_F,@OR-2,,12,12,17,16,);
B(B_VARIN,,MXhg1LocStopRapU,10,8,12,10,);
B(B_VARIN,,MXhg1LocStopRapD,10,14,12,16,);
B(B_F,@OR-2,,12,17,17,21,);
B(B_VARIN,,MXhg2LocStopInt,9,19,11,21,);
B(B_F,@OR-2,,12,22,17,26,);
B(B_VARIN,,MXhg2LocStopRapU,10,18,12,20,);
B(B_VARIN,,MXhg2LocStopRapD,10,24,12,26,);
B(B_F,EQ_R,,12,3,17,7,);
B(B_VARIN,,0.0,10,5,12,7,);
B(B_VARIN,,MDhg1JoySignal,10,4,12,6,);
B(B_FB,RS,RS2,19,7,24,11,);
B(B_FB,RS,RS3,19,12,24,16,);
B(B_FB,RS,RS4,19,17,24,21,);
B(B_FB,RS,RS5,19,22,24,26,);
B(B_VAROUT,,MXadStopHg2Up,25,8,27,10,);
B(B_VAROUT,,MXadStopHg2Dn,25,13,27,15,);
B(B_VAROUT,,MXadStopHg1Up,25,18,27,20,);
B(B_VAROUT,,MXadStopHg1Dn,25,23,27,25,);
B(B_VAROUT,,LX1,25,9,27,11,);
B(B_VAROUT,,LX2,25,14,27,16,);
B(B_VAROUT,,LX3,25,19,27,21,);
B(B_VAROUT,,LX4,25,24,27,26,);
L(11,14,12,14);
L(11,10,11,14);
L(11,10,12,10);
L(11,24,12,24);
L(11,20,11,24);
L(11,20,12,20);
L(17,5,18,5);
L(18,25,19,25);
L(18,20,19,20);
L(18,15,19,15);
L(18,10,19,10);
L(18,5,18,25);
L(17,24,19,24);
L(17,19,19,19);
L(17,14,19,14);
L(17,9,19,9);
L(24,9,25,9);
L(25,9,25,10);
L(24,14,25,14);
L(25,14,25,15);
L(24,19,25,19);
L(25,19,25,20);
L(24,24,25,24);
L(25,24,25,25);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 38 ;
        NETWORK_BODY
B(B_F,@AND-3,,27,4,32,9,);
B(B_VARIN,,MXhg1PumpInZero,25,5,27,7,);
B(B_VARIN,,MXhg2PumpInZero,25,6,27,8,);
B(B_VARIN,,LXadWinchSynchro,25,11,27,13,);
B(B_FB,RS,RS6,34,4,39,8,);
B(B_VARIN,,MXhg1LocStopInt,25,12,27,14,);
B(B_COMMENT,,activate winch synchronization,1,1,27,2,);
B(B_F,@AND-3,,27,20,32,25,);
B(B_VARIN,,MXhg1PumpInZero,25,21,27,23,);
B(B_VARIN,,MXhg2PumpInZero,25,22,27,24,);
B(B_VARIN,,LXadWinchSynchro,25,27,27,29,);
B(B_FB,RS,RS7,34,20,39,24,);
B(B_VARIN,,MXhg1LocStopInt,25,28,27,30,);
B(B_VARIN,,MXhg1LocStopRapU,25,14,27,16,);
B(B_VARIN,,MXhg2LocStopRapU,25,15,27,17,);
B(B_VARIN,,MXhg1LocStopRapD,25,30,27,32,);
B(B_VARIN,,MXhg2LocStopRapD,25,31,27,33,);
B(B_VARIN,,MXhg2LocStopInt,25,13,27,15,);
B(B_VARIN,,MXhg2LocStopInt,25,29,27,31,);
B(B_F,@OR-2,,41,11,46,15,);
B(B_VAROUT,,LXadWinSynActive,46,12,48,14,);
B(B_VARIN,,MXwinchSynchrX23,10,9,12,11,);
B(B_VARIN,,LXbuttonWinchSyn,10,8,12,10,);
B(B_F,@OR-2,,12,7,17,11,);
B(B_VARIN,,MXwinchSynchrX23,10,25,12,27,);
B(B_VARIN,,LXbuttonWinchSyn,10,24,12,26,);
B(B_F,@OR-2,,12,23,17,27,);
B(B_F,@OR-7,,27,9,32,18,NN);
B(B_VARIN,,QTXhg1FastSpeed,18,34,20,36,);
B(B_VARIN,,QTXhg2FastSpeed,18,35,20,37,);
B(B_F,@XOR-2,,20,33,25,37,);
B(B_VARIN,,QTXhg1FastSpeed,18,18,20,20,);
B(B_VARIN,,QTXhg2FastSpeed,18,19,20,21,);
B(B_F,@XOR-2,,20,17,25,21,);
B(B_F,@OR-7,,27,25,32,34,NN);
L(26,8,27,8);
L(26,8,26,11);
L(33,7,34,7);
L(32,6,34,6);
L(33,7,33,11);
L(26,24,27,24);
L(26,24,26,27);
L(33,23,34,23);
L(32,22,34,22);
L(33,23,33,27);
L(40,14,41,14);
L(40,14,40,22);
L(39,22,40,22);
L(40,13,41,13);
L(40,6,40,13);
L(39,6,40,6);
L(26,33,27,33);
L(26,17,27,17);
L(17,9,26,9);
L(17,25,26,25);
L(26,11,27,11);
L(32,11,33,11);
L(26,33,26,35);
L(25,35,26,35);
L(26,17,26,19);
L(25,19,26,19);
L(26,27,27,27);
L(32,27,33,27);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_VARIN,,LXadWinSynActive,9,5,11,7,);
B(B_F,@AND-3,,12,7,17,12,N);
B(B_FB,RS,RS8,19,4,24,8,);
B(B_VAROUT,,MXadWinSynWork,24,5,26,7,);
B(B_VARIN,,MXhg1PumpInZero,10,9,12,11,);
B(B_VARIN,,MXhg2PumpInZero,10,10,12,12,);
B(B_COMMENT,,set winch synchronisation active,1,1,28,2,);
L(18,7,19,7);
L(18,7,18,9);
L(17,9,18,9);
L(11,6,19,6);
L(11,6,11,9);
L(11,9,12,9);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 16 ;
        NETWORK_BODY
B(B_COMMENT,,control winch 2 by analog signal of winch 1,1,1,27,2,);
B(B_VARIN,,MXadWinSynWork,9,3,11,5,);
B(B_F,sel,,12,7,17,12,);
B(B_VAROUT,,MXhg2ExtAnalSign,11,3,13,5,);
B(B_VAROUT,,MDhg2ExtAnalSign,17,8,19,10,);
B(B_VARIN,,MDhg2ExtAnalSign,10,9,12,11,);
B(B_VARIN,,MDhg1JoySignal,10,10,12,12,);
B(B_F,@GT-2,,28,11,33,15,);
B(B_F,@AND-2,,33,4,38,8,0N);
B(B_VAROUT,,MXwinSynLockTrim,38,5,40,7,);
B(B_VARIN,,0.0,26,13,28,15,);
L(11,4,11,9);
L(11,9,12,9);
L(12,11,12,13);
L(12,13,28,13);
L(11,6,33,6);
L(33,7,33,13);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,set External analog signal of hg 2 to zero,1,1,27,2,);
B(B_FB,F_TRIG,F_TRIG1,11,4,18,7,);
B(B_VARIN,,MXadWinSynWork,9,5,11,7,);
B(B_F,sel,,20,5,25,10,);
B(B_VAROUT,,MDhg2ExtAnalSign,25,6,27,8,);
B(B_VARIN,,MDhg2ExtAnalSign,18,7,20,9,);
B(B_VARIN,,0.0,18,8,20,10,);
L(19,7,20,7);
L(19,6,19,7);
L(18,6,19,6);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 15 ;
        NETWORK_BODY
B(B_COMMENT,,set hydraulical connection winch 1 and 2,1,1,27,2,);
B(B_VARIN,,QXhg1BrakeNormal,9,7,11,9,);
B(B_VARIN,,QXhg1BrakeFastSp,9,8,11,10,);
B(B_F,@OR-2,,11,10,16,14,);
B(B_VARIN,,QXhg2BrakeNormal,9,11,11,13,);
B(B_VARIN,,QXhg2BrakeFastSp,9,12,11,14,);
B(B_F,@OR-2,,11,6,16,10,);
B(B_F,@AND-3,,19,3,24,8,);
B(B_VAROUT,,QXhgWinSynConVal,24,4,26,6,);
B(B_VARIN,,MXadWinSynWork,17,4,19,6,);
L(17,6,19,6);
L(17,6,17,8);
L(16,8,17,8);
L(16,12,18,12);
L(18,7,18,12);
L(18,7,19,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,exit program,1,1,27,2,);
B(B_VARIN,,TRUE,9,3,11,5,);
B(B_RETURN,,,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL := init: ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,init additional device program,1,1,27,2,);
B(B_VARIN,,TRUE,9,3,11,5,);
B(B_VAROUT,,LXinitOk,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_FB,RS,RS1,10,2,15,6,);
B(B_VARIN,,MXwinchSynchrX23,8,3,10,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value winch synchronization,1,1,27,2,);
B(B_FB,CorrValue_Bool,CorrValue_Bool1,11,4,23,10,);
B(B_VARIN,,CXadWinchSynchro,9,8,11,10,);
B(B_VARIN,,FALSE,9,5,11,7,);
B(B_VARIN,,FALSE,9,6,11,8,);
B(B_VARIN,,TRUE,9,7,11,9,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value winch synchronization,1,1,27,2,);
B(B_FB,CorrValue_Bool,CorrValue_Bool2,11,4,23,10,);
B(B_VARIN,,CXwinSynchByX23,9,8,11,10,);
B(B_VARIN,,FALSE,9,5,11,7,);
B(B_VARIN,,FALSE,9,6,11,8,);
B(B_VARIN,,TRUE,9,7,11,9,);
        END_NETWORK_BODY
    END_NET_WORK
END_BODY
END_PROGRAM

PROGRAM DMdrillDriveV170
	VAR_EXTERNAL 
		IXentrySwiClosed: BOOL:=FALSE;
			(*entry switch closed*)
		IWddSysPresP2: UINT:=0;
			(*P2 sys.press.vibrator/hammer/hydr.grab/drill*)
		IDddCounter: DINT:=0;
			(*counter drilling drive*)
		QXddGearBox: BOOL:=FALSE;
			(*magnet unit: magnetise off/dd gear box*)
		QXddTrimot: BOOL:=FALSE;
			(*magnet unit: magnetise (on/off)/dd trimot*)
		MXstopAllFunctio: BOOL:=FALSE;
			(*stop all excavator functions*)
		MXminEngineSpeed: BOOL:=FALSE;
			(*minimum engine speed reached*)
		MXddAnalSigPos: BOOL:=FALSE;
			(*drilling drive analog signal positiv*)
		MXddAnalSigNeg: BOOL:=FALSE;
			(*drilling drive analog signal negativ*)
		MXddEnabPowStage: BOOL:=FALSE;
			(*drilling drive enable power stage left/right*)
		MXenablDrillOper: BOOL:=FALSE;
			(*enable drilling drive operation*)
		MXddPumpInZero: BOOL:=FALSE;
			(*drilling drive in zero pos.*)
		MXddGlobalStop: BOOL:=FALSE;
			(*drilling drive global stop*)
		MXddShak_fawFast: BOOL:=FALSE;
			(*drilling drive shaking left/right, feed act.winch fast speed*)
		MXddExitProgram: BOOL:=FALSE;
			(*drilling drive exit programm*)
		MXddEnabShakDril: BOOL:=FALSE;
			(*enable shaking drilling drive*)
		MXddShakWorking: BOOL:=FALSE;
			(*drilling drive shaking left/right working*)
		MXjoyDrillDrPre: BOOL:=FALSE;
			(*joy stick preselection drilling drive*)
		MXjoyDdGearBox: BOOL:=FALSE;
			(*joy stick presel gear box drilling drive*)
		MXenabDdPresel: BOOL:=FALSE;
			(*enable drilling drive preselected*)
		MXengStarterActi: BOOL:=FALSE;
			(*engine starter activated*)
		MXassemblyOperat: BOOL:=FALSE;
			(*assembly operation*)
		MXddPreJoySig: BOOL:=FALSE;
			(*drilling drive preselect joystick signal*)
		MXddEnJoySig: BOOL:=FALSE;
			(*drilling drive enable joystick signal *)
		MX600barPreTrans: BOOL:=FALSE;
			(*600bar pressure transmitter used*)
		MX1LudvWorkSect: BOOL:=FALSE;
			(*only one ludv working section *)
		MWludvExtPresSig: UINT:=0;
			(*LUDV pump external pressure signal in %*)
		MDratedEngSpeed: REAL:=0.0;
			(*rated engine speed in rpm*)
		MDpowerLimReduct: REAL:=0.0;
			(*maximum engine power regulator reduction to x[%]*)
		MDddSysPress: REAL:=0.0;
			(*drilling drive system pressure*)
		MDddRpm: REAL:=0.0;
			(*rpm drilling drive*)
		MDddPumpSignal: REAL:=0.0;
			(*drilling drive pump analog signal*)
		MDddJoySignal: REAL:=0.0;
			(*drilling drive analog signal joystick +/-[%]*)
		MDddPump1Signal: REAL:=0.0;
			(*grab analog signal pump 1 [%]*)
		MDddPump2Signal: REAL:=0.0;
			(*grab analog signal pump 2 [%]*)
	END_VAR
	VAR_EXTERNAL CONSTANT
		MSG_ERROR: UINT:=0;
	END_VAR
	VAR_EXTERNAL RETAIN
		MRdrill1Volume: REAL:=0.0;
			(*drill 1 volume*)
		MRdrill1Press: REAL:=0.0;
			(*drill 1 pressure*)
	END_VAR
	VAR_EXTERNAL CONSTANT RETAIN
		CXadDrillOperat: BOOL:=FALSE;
			(*additional device drilling drive operation *)
		CWludvPressure: UINT:=0;
			(*ludv pump pressure [bar]*)
		CWp1MinCurValveB: UINT:=0;
			(*dd1/ham1/vib1 min. current valve right (B side)*)
		CWp1MaxCurValveB: UINT:=0;
			(*dd1/ham1/vib1 max. current valve right (B side)*)
		CWp2MinCurValveB: UINT:=0;
			(*dd2/ham2/vib2 min. current valve right (B side)*)
		CWp2MaxCurValveB: UINT:=0;
			(*dd2/ham2/vib2 max. current valve right (B side)*)
		CWp1MaxValue: UINT:=0;
			(*p1 ludv section max. value [l/min]*)
		CWp1cur50liter: UINT:=0;
			(*dd1/ham1/vib1 current for 50l/min*)
		CWp1cur100liter: UINT:=0;
			(*dd1/ham1/vib1 current for 100l/min*)
		CWp1cur150liter: UINT:=0;
			(*dd1/ham1/vib1 current for 150l/min*)
		CWp1cur200liter: UINT:=0;
			(*dd1/ham1/vib1 current for 200l/min*)
		CWp1cur250liter: UINT:=0;
			(*dd1/ham1/vib1 current for 250l/min*)
		CWp1cur300liter: UINT:=0;
			(*dd1/ham1/vib1 current for 300l/min*)
		CWp2MaxValue: UINT:=0;
			(*p2 ludv section max. value [l/min]*)
		CWp2cur50liter: UINT:=0;
			(*dd2/ham2/vib2 current for 50l/min*)
		CWp2cur100liter: UINT:=0;
			(*dd2/ham2/vib2 current for 100l/min*)
		CWp2cur150liter: UINT:=0;
			(*dd2/ham2/vib2 current for 150l/min*)
		CWp2cur200liter: UINT:=0;
			(*dd2/ham2/vib2 current for 200l/min*)
		CWp2cur250liter: UINT:=0;
			(*dd2/ham2/vib2 current for 250l/min*)
		CWp2cur300liter: UINT:=0;
			(*dd2/ham2/vib2 current for 300l/min*)
		CDddIntTimeUp: REAL:=0.0;
			(*drilling drive integrator time rising signal*)
		CDddIntTimeDn: REAL:=0.0;
			(*drilling drive integrator time falling signal*)
		CDludvLeakOilSig: REAL:=0.0;
			(*ludv leakoil or pressure comp. signal*)
		CDddGearRatio: REAL:=0.0;
			(*gear ratio drilling drive Kelly/SOB  [imp/turn of drilling drive)]*)
		CDddPowFastSpeed: REAL:=0.0;
			(*drilling drive maximum power at fast speed [kW]*)
		CDddAverageFact: REAL:=0.0;
			(*average factor speed calculation drilling drive*)
		CDddPowLowSpeed: REAL:=0.0;
			(*drilling drive maximum power at fast speed [kW]*)
	END_VAR
	VAR 
		LXinitOk: BOOL:=FALSE;
		LXdd1LocStop: BOOL:=FALSE;
		LXshakeDrilLeft: BOOL:=FALSE;
		LXshakeDrilRight: BOOL:=FALSE;
		LXdd2Sections: BOOL:=FALSE;
		LXstart: BOOL:=FALSE;
		LXadDrillOperat: BOOL:=FALSE;
		LWddStorePress: UINT:=0;
		LDmaxVolume: REAL:=0.0;
		LDanalogSignal: REAL:=0.0;
			(*feed action cyl. analog signal*)
		LDanalSigPumpInt: REAL:=0.0;
		LDanalSignLimit: REAL:=0.0;
		LDddStoreVol: REAL:=0.0;
		LDspeedLimReduct: REAL:=0.0;
		LDp1MaxValue: REAL:=0.0;
		LDp2MaxValue: REAL:=0.0;
		LDcalcCurrent1: REAL:=0.0;
		LDcalcCurrent2: REAL:=0.0;
		LDcalcComp1: REAL:=0.0;
		LDcalcComp2: REAL:=0.0;
		LDmaxPower: REAL:=0.0;
		LDcalcVol1: REAL:=0.0;
		LDcalcVol2: REAL:=0.0;
		LDdd1IntTimeUp: REAL:=0.0;
		LDscalePress: REAL:=0.0;
		CorrValue_Bool1: CorrValue_Bool;
		CorrValue_Real1: CorrValue_Real;
		CorrValue_Real2: CorrValue_Real;
		CorrValue_Real3: CorrValue_Real;
		CorrValue_Real4: CorrValue_Real;
		CorrValue_Real5: CorrValue_Real;
		CorrValue_Real6: CorrValue_Real;
		R_TRIG1: R_TRIG;
		R_TRIG2: R_TRIG;
		R_TRIG3: R_TRIG;
		F_TRIG1: F_TRIG;
		digital1: DMdrillDrDigV024;
		Integrator1: Integrator;
		ScaleAI1: ScaleAI;
		ADspeedCalc1: ADspeedCalcV011;
		SR1: SR;
		SR2: SR;
		Message1: MsgRealReal;
		Message2: MsgRealReal;
		ADcalculateQ1: ADcalculateQV024;
		ADcalculateQ2: ADcalculateQV024;
		ADpowerReg1: ADpowerRegV012;
	END_VAR
'FBD'
BODY
    WORKSPACE
        NETWORK_LIST_TYPE := NWTYPEFBD ;
        ACTIVE_NETWORK := 0 ;
    END_WORKSPACE
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_COMMENT,,init first time,1,1,27,2,);
B(B_VARIN,,LXinitOk,9,4,11,6,);
B(B_F,not,,11,3,16,6,);
B(B_JUMP,,init,16,4,18,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,protect correction value change while program activ,1,1,27,2,);
B(B_F,@OR-2,,11,3,16,7,NN);
B(B_VARIN,,LXstart,9,5,11,7,);
B(B_VARIN,,IXentrySwiClosed,9,4,11,6,);
B(B_F,sel,,18,5,23,10,);
B(B_VAROUT,,LXadDrillOperat,23,6,25,8,);
B(B_VARIN,,CXadDrillOperat,16,8,18,10,);
B(B_VARIN,,LXadDrillOperat,16,7,18,9,);
L(16,5,17,5);
L(17,7,18,7);
L(17,5,17,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VAROUT,,LXstart,11,1,13,3,);
B(B_VARIN,,TRUE,9,1,11,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_F,sel,,18,3,23,8,);
B(B_VARIN,,400.0,16,5,18,7,);
B(B_F,to_real,,11,6,18,9,);
B(B_VARIN,,600.0,9,7,11,9,);
B(B_VAROUT,,LDscalePress,23,4,25,6,);
B(B_VARIN,,MX600barPreTrans,16,4,18,6,);
B(B_COMMENT,,select scale of pressure transmitter,1,1,27,2,);
L(18,7,18,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,jump to exit when drilling mode is not activ,1,1,27,2,);
B(B_VARIN,,MXddExitProgram,9,4,11,6,);
B(B_VARIN,,MXenablDrillOper,9,5,11,7,);
B(B_VARIN,,MXddPumpInZero,16,8,18,10,);
B(B_JUMP,,exit,23,7,25,9,);
B(B_F,@AND-2,,18,6,23,10,);
B(B_F,@OR-3,,11,3,16,8,0NN);
B(B_VARIN,,LXadDrillOperat,9,6,11,8,);
L(17,5,17,8);
L(17,8,18,8);
L(16,5,17,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 20 ;
        NETWORK_BODY
B(B_COMMENT,,input system pressure drilling drive,1,1,27,2,);
B(B_VARIN,,IWddSysPresP2,9,5,11,7,);
B(B_FB,ScaleAI,ScaleAI1,11,4,19,9,);
B(B_VAROUT,,MDddSysPress,19,5,21,7,);
B(B_FB,SR,SR1,26,13,31,17,0N);
B(B_F,@AND-2,,21,13,26,17,0N);
B(B_VARIN,,MXengStarterActi,17,15,19,17,);
B(B_FB,MsgRealReal,Message2,38,12,47,19,);
B(B_VARIN,,177,36,13,38,15,);
B(B_VARIN,,MSG_ERROR,36,15,38,17,);
B(B_FB,MsgRealReal,Message1,32,4,41,11,);
B(B_VARIN,,178,30,5,32,7,);
B(B_VARIN,,MSG_ERROR,30,7,32,9,);
B(B_VARIN,,LDscalePress,9,6,11,8,);
L(19,8,20,8);
L(20,15,21,15);
L(19,16,21,16);
L(20,17,26,17);
L(26,16,26,17);
L(31,15,38,15);
L(20,8,20,17);
L(19,7,32,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_COMMENT,,calculation of rpm drilling drive 1,1,1,27,2,);
B(B_FB,ADspeedCalcV011,ADspeedCalc1,11,4,26,9,);
B(B_VARIN,,CDddAverageFact,9,7,11,9,);
B(B_VARIN,,IDddCounter,9,5,11,7,);
B(B_COMMENT,,speed measuring with counter ,27,7,42,8,);
B(B_VAROUT,,MDddRpm,26,5,28,7,);
B(B_VARIN,,CDddGearRatio,9,6,11,8,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_VARIN,,MRdrill1Volume,9,3,11,5,);
B(B_VAROUT,,LDddStoreVol,11,3,13,5,);
B(B_COMMENT,,adjusted working volume,1,1,27,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_VARIN,,MRdrill1Press,9,4,11,6,);
B(B_COMMENT,,adjusted working pressure,1,1,27,2,);
B(B_F,real_to_uint,,11,3,22,6,);
B(B_VAROUT,,LWddStorePress,22,4,24,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_VARIN,,CWp1MaxValue,9,4,11,6,);
B(B_F,uint_to_real,,11,3,22,6,);
B(B_VAROUT,,LDp1MaxValue,22,4,24,6,);
B(B_COMMENT,,maximum oil value over ludv section ,1,1,27,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 5 ;
        NETWORK_BODY
B(B_VARIN,,CWp2MaxValue,9,2,11,4,);
B(B_F,uint_to_real,,11,1,22,4,);
B(B_VAROUT,,LDp2MaxValue,22,2,24,4,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 14 ;
        NETWORK_BODY
B(B_COMMENT,,calculate used pumps ,1,1,27,2,);
B(B_F,@GT-2,,11,4,16,8,);
B(B_VARIN,,LDddStoreVol,9,5,11,7,);
B(B_VARIN,,LDp2MaxValue,9,6,11,8,);
B(B_F,sel,,23,6,28,11,);
B(B_VAROUT,,LDmaxVolume,28,7,30,9,);
B(B_F,@AND-2,,17,3,22,7,N);
B(B_VAROUT,,LXdd2Sections,23,4,25,6,);
B(B_VARIN,,MX1LudvWorkSect,15,2,17,4,);
B(B_F,@ADD-2,,12,9,17,13,);
B(B_VARIN,,LDp1MaxValue,10,11,12,13,);
L(11,7,11,11);
L(11,9,23,9);
L(23,10,23,11);
L(23,5,23,8);
L(16,6,17,6);
L(22,5,23,5);
L(17,3,17,5);
L(11,11,12,11);
L(17,11,23,11);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 20 ;
        NETWORK_BODY
B(B_F,@AND-3,,21,3,26,8,N);
B(B_COMMENT,,enable drilling drive preselection,1,1,27,2,);
B(B_FB,SR,SR2,34,3,39,7,);
B(B_VARIN,,MXddPreJoySig,19,4,21,6,);
B(B_F,@OR-4,,27,11,32,17,N00N);
B(B_FB,R_TRIG,R_TRIG1,11,10,18,13,);
B(B_VARIN,,MXjoyDrillDrPre,9,11,11,13,);
B(B_VARIN,,MXddPumpInZero,18,14,20,16,);
B(B_F,@AND-2,,20,12,25,16,);
B(B_VARIN,,MXddExitProgram,24,16,26,18,);
B(B_VARIN,,MXddEnJoySig,25,17,27,19,);
B(B_VARIN,,MXassemblyOperat,10,7,12,9,);
B(B_VARIN,,MXenablDrillOper,10,6,12,8,);
B(B_F,@AND-2,,12,5,17,9,0N);
B(B_VAROUT,,MXddPreJoySig,39,4,41,6,);
L(19,6,21,6);
L(20,7,21,7);
L(26,11,26,13);
L(20,11,26,11);
L(26,15,27,15);
L(33,6,33,13);
L(26,5,34,5);
L(33,6,34,6);
L(26,13,27,13);
L(32,13,33,13);
L(18,12,19,12);
L(19,6,19,14);
L(19,14,20,14);
L(25,14,27,14);
L(26,15,26,17);
L(27,16,27,18);
L(17,7,20,7);
L(20,7,20,11);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_VARIN,,MXddPreJoySig,9,4,11,6,);
B(B_VARIN,,MXddEnJoySig,9,5,11,7,);
B(B_F,@AND-2,,11,3,16,7,);
B(B_COMMENT,,enable drilling drive preselected,1,1,27,2,);
B(B_VAROUT,,MXenabDdPresel,16,4,18,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 14 ;
        NETWORK_BODY
B(B_COMMENT,,analog signal selector and stop drilling drive 1,1,1,27,2,);
B(B_F,@GT-2,,13,5,18,9,);
B(B_F,@LT-2,,13,9,18,13,);
B(B_VAROUT,,MXddAnalSigNeg,18,10,20,12,);
B(B_VAROUT,,MXddAnalSigPos,18,6,20,8,);
B(B_VARIN,,0.0,10,11,12,13,);
B(B_VAROUT,,LDanalogSignal,11,3,13,5,);
B(B_VARIN,,MDddJoySignal,9,3,11,5,);
L(11,4,11,11);
L(11,7,13,7);
L(11,11,13,11);
L(12,8,13,8);
L(12,12,13,12);
L(12,8,12,12);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 17 ;
        NETWORK_BODY
B(B_COMMENT,,digital logic drilling drive,1,1,27,2,);
B(B_VARIN,,MXminEngineSpeed,9,7,11,9,);
B(B_VARIN,,MXstopAllFunctio,9,8,11,10,);
B(B_VAROUT,,QXddGearBox,34,5,36,7,);
B(B_VAROUT,,MXddShakWorking,34,8,36,10,);
B(B_VAROUT,,LXdd1LocStop,34,9,36,11,);
B(B_VAROUT,,MXddEnabPowStage,34,4,36,6,);
B(B_VARIN,,MXddPumpInZero,9,13,11,15,);
B(B_VARIN,,MXddEnabShakDril,9,12,11,14,);
B(B_VAROUT,,LXshakeDrilRight,34,6,36,8,);
B(B_VAROUT,,LXshakeDrilLeft,34,7,36,9,);
B(B_FB,DMdrillDrDigV024,digital1,11,3,34,16,);
B(B_VARIN,,MXddGlobalStop,9,6,11,8,);
B(B_VARIN,,FALSE,9,14,11,16,);
B(B_VARIN,,MXddShak_fawFast,9,10,11,12,);
B(B_VARIN,,MXddAnalSigPos,9,4,11,6,);
B(B_VARIN,,MXddAnalSigNeg,9,5,11,7,);
B(B_VARIN,,MXjoyDdGearBox,9,9,11,11,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_COMMENT,,limitation analog signal drilling drive,1,1,27,2,);
B(B_F,sel,,11,5,16,10,);
B(B_F,sel,,18,4,23,9,);
B(B_F,sel,,25,3,30,8,);
B(B_VARIN,,LXdd1LocStop,22,2,24,4,);
B(B_VARIN,,0.0,22,8,24,10,);
B(B_VARIN,,LXshakeDrilLeft,15,3,17,5,);
B(B_VAROUT,,LDanalSignLimit,30,4,32,6,);
B(B_VARIN,,LDanalogSignal,9,7,11,9,);
B(B_VARIN,,100.0,9,8,11,10,);
B(B_VARIN,,LXshakeDrilRight,9,6,11,8,);
B(B_VARIN,,-100.0,15,10,17,12,);
L(17,6,18,6);
L(17,8,18,8);
L(16,7,18,7);
L(23,6,25,6);
L(24,5,25,5);
L(24,3,24,5);
L(24,7,25,7);
L(24,7,24,9);
L(17,4,17,6);
L(17,8,17,11);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 15 ;
        NETWORK_BODY
B(B_VARIN,,900.0,9,4,11,6,);
B(B_VARIN,,0.5,9,5,11,7,);
B(B_VARIN,,1400.0,9,6,11,8,);
B(B_VARIN,,1.0,9,7,11,9,);
B(B_VARIN,,MDratedEngSpeed,9,8,11,10,);
B(B_VARIN,,0.5,9,9,11,11,);
B(B_VARIN,,1.0,9,10,11,12,);
B(B_F,GPkx_dV010,,11,3,20,12,);
B(B_COMMENT,,signal limitation in consideration to the engine speed,1,1,27,2,);
B(B_VAROUT,,LDspeedLimReduct,27,4,29,6,);
B(B_F,@MUL-2,,22,3,27,7,);
B(B_VARIN,,LDanalSignLimit,19,12,21,14,);
B(B_COMMENT,,900 U/min 50% limitationø^1400 U/min 0% limitation,34,1,49,3,);
L(21,6,22,6);
L(20,5,22,5);
L(21,6,21,13);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 22 ;
        NETWORK_BODY
B(B_COMMENT,,select drilling drive pump signal,1,1,27,2,);
B(B_FB,Integrator,Integrator1,21,6,30,12,);
B(B_VARIN,,TRUE,19,7,21,9,);
B(B_VARIN,,0.0,28,4,30,6,);
B(B_VARIN,,LDspeedLimReduct,19,8,21,10,);
B(B_F,EQ_R,,32,2,37,6,);
B(B_VAROUT,,MXddPumpInZero,37,3,39,5,);
B(B_VAROUT,,LDanalSigPumpInt,31,7,33,9,);
B(B_F,sel,,13,11,18,16,);
B(B_F,sel,,13,16,18,21,);
B(B_VARIN,,CDddIntTimeUp,9,13,11,15,);
B(B_VARIN,,2000.0,9,14,11,16,);
B(B_VARIN,,MXddShakWorking,10,12,12,14,);
B(B_VARIN,,CDddIntTimeDn,11,18,13,20,);
B(B_VARIN,,2000.0,11,19,13,21,);
B(B_VAROUT,,LDdd1IntTimeUp,21,12,23,14,);
L(31,4,32,4);
L(30,5,32,5);
L(31,4,31,8);
L(30,8,31,8);
L(12,18,13,18);
L(11,14,13,14);
L(11,15,13,15);
L(12,13,13,13);
L(12,13,12,18);
L(19,10,19,13);
L(20,11,20,18);
L(18,18,20,18);
L(19,10,21,10);
L(20,11,21,11);
L(18,13,21,13);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_COMMENT,,trimot drilling drive,1,1,27,2,);
B(B_F,abs,,11,6,16,9,);
B(B_VARIN,,LDanalogSignal,9,7,11,9,);
B(B_F,@GE-2,,18,6,23,10,);
B(B_VARIN,,66.0,15,9,17,11,);
B(B_F,@OR-2,,25,3,30,7,);
B(B_VAROUT,,QXddTrimot,30,4,32,6,);
B(B_VARIN,,MXddShakWorking,23,4,25,6,);
L(16,8,18,8);
L(17,9,17,10);
L(17,9,18,9);
L(24,6,25,6);
L(24,6,24,8);
L(23,8,24,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_COMMENT,,calculate max Power,1,1,27,2,);
B(B_VAROUT,,LDmaxPower,16,4,18,6,);
B(B_F,sel,,11,3,16,8,);
B(B_VARIN,,CDddPowLowSpeed,9,5,11,7,);
B(B_VARIN,,CDddPowFastSpeed,9,6,11,8,);
B(B_VARIN,,QXddGearBox,9,4,11,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_VARIN,,MDddSysPress,27,3,29,5,);
B(B_F,real_to_uint,,17,4,28,7,);
B(B_F,limit,,11,4,17,9,);
B(B_VARIN,,LDddStoreVol,9,6,11,8,);
B(B_VARIN,,LDmaxVolume,9,7,11,9,);
B(B_VAROUT,,MDddPumpSignal,52,3,54,5,);
B(B_VARIN,,LDanalSigPumpInt,28,2,30,4,);
B(B_VARIN,,LDmaxPower,27,7,29,9,);
B(B_FB,ADpowerRegV012,ADpowerReg1,31,2,52,8,);
L(29,4,29,5);
L(29,5,31,5);
L(28,6,31,6);
L(29,7,31,7);
L(11,6,11,7);
L(30,3,30,4);
L(29,7,29,8);
L(30,4,31,4);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 28 ;
        NETWORK_BODY
B(B_VARIN,,CWp2cur50liter,20,11,22,13,);
B(B_VARIN,,CWp2cur100liter,20,12,22,14,);
B(B_VARIN,,CWp2cur150liter,20,13,22,15,);
B(B_VARIN,,CWp2cur200liter,20,14,22,16,);
B(B_VARIN,,CWp2cur250liter,20,15,22,17,);
B(B_VARIN,,CWp2cur300liter,20,16,22,18,);
B(B_VARIN,,CWp2MinCurValveB,20,10,22,12,);
B(B_VARIN,,LDp2MaxValue,20,8,22,10,);
B(B_VARIN,,MDddPumpSignal,20,9,22,11,);
B(B_VAROUT,,LDcalcCurrent2,40,7,42,9,);
B(B_VAROUT,,MDddPump2Signal,40,8,42,10,);
B(B_VAROUT,,LDcalcComp2,40,9,42,11,);
B(B_VARIN,,CWp2MaxCurValveB,20,21,22,23,);
B(B_VARIN,,MDddSysPress,20,22,22,24,);
B(B_VARIN,,CDludvLeakOilSig,20,23,22,25,);
B(B_VAROUT,,LDcalcVol2,40,10,42,12,);
B(B_VARIN,,MDpowerLimReduct,20,24,22,26,);
B(B_FB,ADcalculateQV024,ADcalculateQ1,22,6,40,27,);
B(B_F,sel,,17,1,22,6,);
B(B_F,@DIV,,12,4,17,8,);
B(B_VARIN,,2.0,10,6,12,8,);
B(B_VARIN,,LDddStoreVol,10,3,12,5,);
B(B_VARIN,,LXdd2Sections,15,2,17,4,);
B(B_VARIN,,LDdd1IntTimeUp,20,25,22,27,);
L(22,18,22,22);
L(17,5,17,6);
L(12,4,17,4);
L(12,4,12,6);
L(22,3,22,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_VARIN,,LXdd2Sections,9,3,11,5,);
B(B_JUMP,,next,11,3,13,5,N);
B(B_COMMENT,,jump to next if only 1 ludv section is used for hydr. grab,1,1,27,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 25 ;
        NETWORK_BODY
B(B_VAROUT,,LDcalcCurrent1,36,4,38,6,);
B(B_VAROUT,,MDddPump1Signal,36,5,38,7,);
B(B_VAROUT,,LDcalcComp1,36,6,38,8,);
B(B_VARIN,,CWp1cur50liter,16,8,18,10,);
B(B_VARIN,,CWp1cur100liter,16,9,18,11,);
B(B_VARIN,,CWp1cur150liter,16,10,18,12,);
B(B_VARIN,,CWp1cur200liter,16,11,18,13,);
B(B_VARIN,,CWp1cur250liter,16,12,18,14,);
B(B_VARIN,,CWp1cur300liter,16,13,18,15,);
B(B_VARIN,,CWp1MinCurValveB,16,7,18,9,);
B(B_VARIN,,MDddPumpSignal,16,6,18,8,);
B(B_VARIN,,LDp1MaxValue,16,5,18,7,);
B(B_F,@DIV,,11,1,16,5,);
B(B_VARIN,,2.0,9,3,11,5,);
B(B_VARIN,,LDddStoreVol,9,2,11,4,);
B(B_VARIN,,CWp1MaxCurValveB,16,18,18,20,);
B(B_VARIN,,MDddSysPress,16,19,18,21,);
B(B_VARIN,,CDludvLeakOilSig,16,20,18,22,);
B(B_VAROUT,,LDcalcVol1,36,7,38,9,);
B(B_VARIN,,LDdd1IntTimeUp,16,22,18,24,);
B(B_VARIN,,MDpowerLimReduct,16,21,18,23,);
B(B_FB,ADcalculateQV024,ADcalculateQ2,18,3,36,24,);
L(17,3,17,5);
L(16,3,17,3);
L(18,15,18,19);
L(17,5,18,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL := next: ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 18 ;
        NETWORK_BODY
B(B_COMMENT,,activate pressure control grab close LUDV Pump ,1,1,27,2,);
B(B_VARIN,,MXddEnabPowStage,9,6,11,8,);
B(B_FB,R_TRIG,R_TRIG2,11,5,18,8,);
B(B_FB,F_TRIG,F_TRIG1,11,9,18,12,);
B(B_F,sel,,18,10,23,15,);
B(B_VARIN,,MWludvExtPresSig,16,12,18,14,);
B(B_F,sel,,24,9,29,14,);
B(B_VAROUT,,MWludvExtPresSig,29,10,31,12,);
B(B_VARIN,,LWddStorePress,22,15,24,17,);
B(B_VARIN,,CWludvPressure,16,13,18,15,);
B(B_COMMENT,,Drucksteuerung primär (Optional),1,2,27,3,);
L(11,7,11,11);
L(18,7,24,7);
L(23,12,24,12);
L(24,13,24,16);
L(24,7,24,11);
L(18,11,18,12);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,exit drilling drive program,1,1,27,2,);
B(B_VARIN,,TRUE,9,3,11,5,);
B(B_RETURN,,,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL := exit: ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,reset outputs and exit programm,1,1,27,2,);
B(B_VARIN,,QXddGearBox,16,7,18,9,);
B(B_VARIN,,FALSE,16,8,18,10,);
B(B_FB,R_TRIG,R_TRIG3,11,4,18,7,);
B(B_VARIN,,TRUE,9,5,11,7,);
B(B_F,sel,,18,5,23,10,);
B(B_VAROUT,,QXddGearBox,23,6,25,8,);
L(18,6,18,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,TRUE,9,1,11,3,);
B(B_RETURN,,,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL := init: ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,init drilling drive program,1,1,27,2,);
B(B_VARIN,,TRUE,9,3,11,5,);
B(B_VAROUT,,LXinitOk,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value additional drilling drive operation,1,1,27,2,);
B(B_FB,CorrValue_Bool,CorrValue_Bool1,11,4,23,10,);
B(B_VARIN,,CXadDrillOperat,9,8,11,10,);
B(B_VARIN,,FALSE,9,5,11,7,);
B(B_VARIN,,FALSE,9,6,11,8,);
B(B_VARIN,,TRUE,9,7,11,9,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value integrator time dd1 up,1,1,27,2,);
B(B_VARIN,,100.0,9,5,11,7,);
B(B_VARIN,,10.0,9,6,11,8,);
B(B_VARIN,,10000.0,9,7,11,9,);
B(B_VARIN,,CDddIntTimeUp,9,8,11,10,);
B(B_FB,CorrValue_Real,CorrValue_Real1,11,4,23,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value integrator time dd1 down,1,1,27,2,);
B(B_VARIN,,100.0,9,5,11,7,);
B(B_VARIN,,10.0,9,6,11,8,);
B(B_VARIN,,10000.0,9,7,11,9,);
B(B_VARIN,,CDddIntTimeDn,9,8,11,10,);
B(B_FB,CorrValue_Real,CorrValue_Real2,11,4,23,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_FB,CorrValue_Real,CorrValue_Real3,11,4,23,10,);
B(B_VARIN,,69.0,9,5,11,7,);
B(B_VARIN,,CDddGearRatio,9,8,11,10,);
B(B_VARIN,,1.0,9,6,11,8,);
B(B_VARIN,,500.0,9,7,11,9,);
B(B_COMMENT,,scale gear ratio drilling drive   [impuls/turns (drilling drive)],1,1,27,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_FB,CorrValue_Real,CorrValue_Real4,11,4,23,10,);
B(B_VARIN,,20.0,9,5,11,7,);
B(B_VARIN,,CDddAverageFact,9,8,11,10,);
B(B_VARIN,,1.0,9,6,11,8,);
B(B_VARIN,,100.0,9,7,11,9,);
B(B_COMMENT,,average factor speed calculation drilling drive1 ,1,1,27,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,maximum power drilling drive at fast speed operation [kW],1,1,27,2,);
B(B_VARIN,,300.0,9,5,11,7,);
B(B_VARIN,,50.0,9,6,11,8,);
B(B_VARIN,,1000.0,9,7,11,9,);
B(B_VARIN,,CDddPowFastSpeed,9,8,11,10,);
B(B_FB,CorrValue_Real,CorrValue_Real5,11,4,23,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_VARIN,,1000.0,9,2,11,4,);
B(B_VARIN,,50.0,9,3,11,5,);
B(B_VARIN,,1000.0,9,4,11,6,);
B(B_VARIN,,CDddPowLowSpeed,9,5,11,7,);
B(B_FB,CorrValue_Real,CorrValue_Real6,11,1,23,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_VARIN,,TRUE,9,3,11,5,);
B(B_COMMENT,,set pump in zero first time,1,1,27,2,);
B(B_VAROUT,,MXddPumpInZero,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
END_BODY
END_PROGRAM

PROGRAM ENprogV114
	VAR_EXTERNAL 
		IXenEngineStart: BOOL:=FALSE;
			(*enable engine start*)
		IXengStarting: BOOL:=FALSE;
			(*engine starting*)
		IXengCharging: BOOL:=FALSE;
			(*engine battery charging*)
		IXengRunning: BOOL:=FALSE;
			(*engine running*)
		IXengPowerRedTem: BOOL:=FALSE;
			(*engine power reduction, high temperatures, fuel pressure regulation*)
		IXengPowerRedHig: BOOL:=FALSE;
			(*engine power reduction, high altitude*)
		IXengDemSpeMinOk: BOOL:=FALSE;
			(*engine module sends minimum engine speed on demand*)
		IXengDemSpeMaxOk: BOOL:=FALSE;
			(*engine module sends maximum engine speed on demand*)
		IXengCooWatTempW: BOOL:=FALSE;
			(*engine cooling water temperature warning*)
		IXengCooWatTempE: BOOL:=FALSE;
			(*engine cooling water temperature error*)
		IXengChaAirTempW: BOOL:=FALSE;
			(*engine charge air temperature warning*)
		IXengChaAirTempE: BOOL:=FALSE;
			(*engine charge air temperature error*)
		IXengFuelTempW: BOOL:=FALSE;
			(*engine fuel temperature warning*)
		IXengFuelTempE: BOOL:=FALSE;
			(*engine fuel temperature error*)
		IXengWaterInFuel: BOOL:=FALSE;
			(*engine water in fuel filter*)
		IXengLubOilPresW: BOOL:=FALSE;
			(*engine lub oil pressure warning*)
		IXengLubOilPresE: BOOL:=FALSE;
			(*engine lub oil pressure error*)
		IXengFuelPressWa: BOOL:=FALSE;
			(*engine fuel pressure warning (low or high)*)
		IXengFuelPressEr: BOOL:=FALSE;
			(*engine fuel pressure error (low or high)*)
		IXengAirFilterW: BOOL:=FALSE;
			(*engine air filter pressure low warning*)
		IXengAirFilterE: BOOL:=FALSE;
			(*engine air filter pressure low error*)
		IXengFuelPresRaW: BOOL:=FALSE;
			(*engine fuel pressure warning rail 1 or 2*)
		IXengFuelPresRaE: BOOL:=FALSE;
			(*engine fuel pressure error rail 1 or 2*)
		IXengCoolWatConW: BOOL:=FALSE;
			(*engine cooling water contetnt warning*)
		IXengCoolWatConE: BOOL:=FALSE;
			(*engine cooling water contetnt error*)
		IXengLubOilCoLoE: BOOL:=FALSE;
			(*engine lub oil content low error*)
		IXengLubOilCoHiE: BOOL:=FALSE;
			(*engine lub oil content high error*)
		IXengSpeedHighW: BOOL:=FALSE;
			(*engine engine speed high warning*)
		IXengSpeedHighE: BOOL:=FALSE;
			(*engine engine speed high error*)
		IXengEmergenStop: BOOL:=FALSE;
			(*engine module emergency engine stop*)
		IXengRequireStop: BOOL:=FALSE;
			(*engine module requires engine stop*)
		IXengRequireRepa: BOOL:=FALSE;
			(*engine module requires reparation*)
		IXengAsynchError: BOOL:=FALSE;
			(*engine module is sending asynchron error*)
		IXengAgnMilWarn: BOOL:=FALSE;
			(*engine exhuast aftertreatment warning (MIL)*)
		IXengAgnMilError: BOOL:=FALSE;
			(*engine exhuast aftertreatment error (MIL)*)
		IWengAgnHighExhT: INT:=0;
			(*engine exhuast aftertreatment high exhaust temperature*)
		IWengDefWarn: INT:=0;
			(*engine DEF content warning*)
		IWengDefError: INT:=0;
			(*engine DEF content error*)
		IWengDpfServReq: INT:=0;
			(*engine DPF service request*)
		IWengAgnMode: INT:=0;
			(*engine exhaust aftertreatment mode*)
		IWengAgnDpfGrade: INT:=0;
			(*engine DPF grade*)
		IWfootpEngSpeed: INT:=0;
			(*footpedal engine speed*)
		QXengStart: BOOL:=FALSE;
			(*engine start*)
		QXengEnableEngin: BOOL:=FALSE;
			(*engine enable engine*)
		QXengCANfanSpeed: BOOL:=FALSE;
			(*engine fan speed only by CAN*)
		QXengDemMinEngSp: BOOL:=FALSE;
			(*engine demand minimum engine speed*)
		QXengDemMaxEngSp: BOOL:=FALSE;
			(*engine demand maximum engine speed*)
		QWengRatedSpeed: INT:=0;
			(*engine speed [U/min]*)
		QWengMaxTorque: INT:=0;
			(*engine torque [Nm]*)
		QWoilCoFanSpeed: UINT:=0;
			(*fan speed oil cooler *)
		QWengFanSpeed: INT:=0;
			(*engine fan speed [mA]*)
		QWengDpfEnabReg: INT:=0;
			(*engine DPF enable regeneration*)
		QWengDpfStartReg: INT:=0;
			(*engine DPF start regeneration*)
		QWengDpfServReg: INT:=0;
			(*engine DPF start service regeneration (purge HC docer)*)
		MXhydrOilContWar: BOOL:=FALSE;
			(*hydraulic oil tank content warning*)
		MXhydrOilContErr: BOOL:=FALSE;
			(*hydraulic oil tank content error*)
		MXhydrOilShOffOk: BOOL:=FALSE;
			(*hydraulic oil tank shut off device OK*)
		MXglobStopEngine: BOOL:=FALSE;
			(*global stop engine*)
		MXengineStopped: BOOL:=FALSE;
			(*engine stoped by engine electronic*)
		MXpreHigEngSpeed: BOOL:=FALSE;
			(*preselect high engine speed*)
		MXpreLowEngSpeed: BOOL:=FALSE;
			(*preselect low engine speed*)
		MXminEngineSpeed: BOOL:=FALSE;
			(*minimum engine speed reached*)
		MXjoyEngSpeedUp: BOOL:=FALSE;
			(*engine speed adjust up*)
		MXjoyEngSpeedDn: BOOL:=FALSE;
			(*engine speed adjust down*)
		MXjoyEngSpeStore: BOOL:=FALSE;
			(*engine speed store*)
		MXengSpeedStore: BOOL:=FALSE;
			(*store present engine speed*)
		MXrelFanByOilTem: BOOL:=FALSE;
			(*release fan speed control by oil temperature*)
		MXhdrOilTemError: BOOL:=FALSE;
			(*error hydr. oil temperature sensor*)
		MXengStarterActi: BOOL:=FALSE;
			(*engine starter activated*)
		MXrcStartEngine: BOOL:=FALSE;
			(*remote control start engine*)
		MXremContActive: BOOL:=FALSE;
			(*remote control activated*)
		MXengChargingOFF: BOOL:=FALSE;
			(*engine PLD battery charging*)
		MXengRequireRep: BOOL:=FALSE;
			(*engine required motor reparation*)
		MXengRequireStop: BOOL:=FALSE;
			(*engine required motor stop *)
		MXsafetyProgPRA: BOOL:=FALSE;
			(*safety program power reduction active*)
		MXresetFuelCon: BOOL:=FALSE;
			(*reset fuel consumption*)
		MXlidec1: BOOL:=FALSE;
			(*EDC is LIDEC 1 or compatibel*)
		MXengDefWarn: BOOL:=FALSE;
			(*engine DEF content warning*)
		MXengDefError: BOOL:=FALSE;
			(*engine DEF content error*)
		MXdpfHEST: BOOL:=FALSE;
			(*engine DPF high exhaust temperature by active regeneration*)
		MXdpfWarn: BOOL:=FALSE;
			(*engine DPF warning*)
		MXdpfError: BOOL:=FALSE;
			(*engine DPF error*)
		MXdpfInitPossib: BOOL:=FALSE;
			(*engine DPF manual initialisation possible*)
		MXdpfDisabPossib: BOOL:=FALSE;
			(*engine DPF manual disabling possible*)
		MXdpfRegInitiat: BOOL:=FALSE;
			(*engine DPF regeneration initiated*)
		MXdpfRegDisable: BOOL:=FALSE;
			(*engine DPF regeneration disabled*)
		MXengAgnStopFunc: BOOL:=FALSE;
			(*engine DPF regeneration stops all function*)
		MXdpfRegManActiv: BOOL:=FALSE;
			(*engine DPF manual regeneration activated*)
		MXdpfRegBlocked: BOOL:=FALSE;
			(*engine DPF regeneration disabled*)
		MXforcedNeutral: BOOL:=FALSE;
			(*force neutral engine speed*)
		MXengMinIdleSpd: BOOL:=FALSE;
			(*speed up to minimum idle speed*)
		MRdpfTime: REAL:=0.0;
			(*engine DPF left regeneration time*)
		MDdpfMinEngTorqu: REAL:=0.0;
			(*particle filter regeneration minimum engine torque [Nm]*)
		MDpresenEngSpeed: REAL:=0.0;
			(*present engine speed in rpm*)
		MDratedEngSpeed: REAL:=0.0;
			(*rated engine speed in rpm*)
		MDengRatSpeedPer: REAL:=0.0;
			(*engine rated engine speed in percent [%]*)
		MDengTorqueAct: REAL:=0.0;
			(*engine actual torque [Nm]*)
		MDengTorqueMax: REAL:=0.0;
			(*engine maximum torque [Nm]*)
		MDengExploitatio: REAL:=0.0;
			(*diesel engine exploitation in [%]*)
		MDengRatMinSpeed: REAL:=0.0;
			(*engine rated minimum speed [%]*)
		MDengPowerMax: REAL:=0.0;
			(*engine maximum power [kW]*)
		MDengPowerAct: REAL:=0.0;
			(*engine actual power [kW]*)
		MDbatteryVoltage: REAL:=0.0;
			(*battery voltage in V*)
		MDchargeAirTemp: REAL:=0.0;
			(*charge air temperature*)
		MDcoolWaterTemp: REAL:=0.0;
			(*cooling water temperature in °C*)
		MDlubOilPressure: REAL:=0.0;
			(*lub oil pressure in bar*)
		MDchargeAirPress: REAL:=0.0;
			(*charge air pressure in bar*)
		MDdefCont: REAL:=0.0;
			(*DEF content [%]*)
		MDlubOilCont: REAL:=0.0;
			(*lub oil content [%]*)
		MDoutdoorTemp: REAL:=0.0;
			(*outdoor termperature [°C]*)
		MDfuelConsumptio: UDINT:=0;
			(*engine actual fuel consumption [ul/scan] not filtered*)
		MDfuelConsum_lph: REAL:=0.0;
			(*engine actual fuel consumption [l/h] not filtered*)
		MDengMinSpeed: REAL:=0.0;
			(*engine minimum speed*)
		MDengMaxSpeed: REAL:=0.0;
			(*engine maximum speed*)
		MDpowerLimReduct: REAL:=0.0;
			(*maximum engine power regulator reduction to x [%]*)
		MDhydrOilTemp: REAL:=0.0;
			(*hydraulic oil temperature [°C]*)
		MDfiltRegValvSig: REAL:=0.0;
			(*particle filter regeneration valve signal [%]*)
		MDfuelConAbs_LpH: REAL:=0.0;
			(*engine fuel consumption absolut [l/h]*)
		MDfuelConRel_LpH: REAL:=0.0;
			(*engine fuel consumption sinde reset [l/h] (relative)*)
	END_VAR
	VAR_EXTERNAL CONSTANT
		MSG_INFO: UINT:=0;
			(* message priority: "info" *)
		MSG_WARNING: UINT:=0;
			(* message priority: "warning" *)
		MSG_ERROR: UINT:=0;
			(* message priority: "error" *)
	END_VAR
	VAR_EXTERNAL RETAIN
		MDfuelConAbs_Lit: UDINT:=0;
			(*engine fuel consumption absolut [l]*)
		MDfuelConRel_Lit: UDINT:=0;
			(*engine fuel consumption sinde reset [l] (relative)*)
		MDfuelConSumDecA: UDINT:=0;
			(*LiDAT fuel consumption decimal absolut [ul]*)
		MDfuelConSumDecR: UDINT:=0;
			(*LiDAT fuel consumption decimal relativ [ul]*)
		MDfuelConAbsHour: REAL:=0.0;
			(*engine fuel consumption absolut hours since recording [h]*)
		MDfuelConRelHour: REAL:=0.0;
			(*engine fuel consumption relative hours since recording [h]*)
	END_VAR
	VAR_EXTERNAL CONSTANT RETAIN
		CDmaxPower_p_fac: REAL:=0.0;
			(*max. engine power regulator p-factor*)
		CDmaxPow_i_facUp: REAL:=0.0;
		CDmaxPow_i_facDn: REAL:=0.0;
		CDmaxPower_d_fac: REAL:=0.0;
		CDengMinIdleSpd: REAL:=0.0;
			(*engine minimum engine speed [rpm]*)
	END_VAR
	VAR 
		LXinitOk: BOOL:=FALSE;
		LXspeedDemandOk: BOOL:=FALSE;
		LXfootpedalPrese: BOOL:=FALSE;
		LXfootpedalActiv: BOOL:=FALSE;
		LXmanualEngSpeAd: BOOL:=FALSE;
		LXsetPowLimSig0: BOOL:=FALSE;
		LXagnOff: BOOL:=FALSE;
		LXagnAutoActive: BOOL:=FALSE;
		LXagnAutoPrepair: BOOL:=FALSE;
		LXagnAutoHeating: BOOL:=FALSE;
		LXagnAutoRegen: BOOL:=FALSE;
		LXagnAutoCool: BOOL:=FALSE;
		LXagnAutoEnd: BOOL:=FALSE;
		LXagnManuActive: BOOL:=FALSE;
		LXagnManuPrepair: BOOL:=FALSE;
		LXagnManuHeating: BOOL:=FALSE;
		LXagnManuRegen: BOOL:=FALSE;
		LXagnManuCool: BOOL:=FALSE;
		LXagnManuEnd: BOOL:=FALSE;
		LXagnServActive: BOOL:=FALSE;
		LXagnServPrepair: BOOL:=FALSE;
		LXagnServHeating: BOOL:=FALSE;
		LXagnServRegen: BOOL:=FALSE;
		LXagnServCool: BOOL:=FALSE;
		LXagnServEnd: BOOL:=FALSE;
		LXagnHcPurgeActi: BOOL:=FALSE;
		LXagnHcPurgePrep: BOOL:=FALSE;
		LXagnHcPurgeHeat: BOOL:=FALSE;
		LXagnHcPurgeCool: BOOL:=FALSE;
		LXagnHcPurgeEnd: BOOL:=FALSE;
		LXdpfGrade_1: BOOL:=FALSE;
		LXdpfGrade_2: BOOL:=FALSE;
		LXdpfGrade_3: BOOL:=FALSE;
		LXdpfGrade_4: BOOL:=FALSE;
		LXdpfGrade_5: BOOL:=FALSE;
		LXfiltRegActiv: BOOL:=FALSE;
		LDpresenEngSpeed: REAL:=0.0;
		LDengSpeedValJoy: REAL:=0.0;
		LDengSpeedValFoP: REAL:=0.0;
		LDlastRatedEngSp: REAL:=0.0;
		LDpowRedRequired: REAL:=0.0;
		LDhydrOilTemp: REAL:=0.0;
		LDengRatMinSpeed: REAL:=0.0;
		ENscaleInput1: ENscaleInputV043;
		OpHoures1: GPcalcOpHourV020;
		ENmsgInfo1: ENmsgInfoV030;
		R_TRIG1: R_TRIG;
		R_TRIG2: R_TRIG;
		R_TRIG3: R_TRIG;
		R_TRIG4: R_TRIG;
		R_TRIG5: R_TRIG;
		R_TRIG6: R_TRIG;
		R_TRIG7: R_TRIG;
		F_TRIG1: F_TRIG;
		F_TRIG2: F_TRIG;
		RS1: RS;
		RS2: RS;
		RS3: RS;
		RS4: RS;
		RS5: RS;
		RS6: RS;
		SR1: SR;
		SR2: SR;
		TOF1: TOF;
		TOF2: TOF;
		TOF3: TOF;
		TOF4: TOF;
		TON1: TON;
		TP1: TP;
		Integrator1: Integrator;
		Integrator2: IntegratorLimit;
		Integrator3: IntegratorLimit;
		PID1: GPpidPowRegV020;
		PID2: GPpidPowRegV020;
		FilterTP4_1: FilterTP4;
		ModuleState1: ModuleState;
		ModuleState2: ModuleState;
		Message1: MsgUDintUDint;
		Message2: MsgUDintReal;
		Message3: MsgUDintReal;
		Message4: MsgUDintReal;
		Message5: MsgUDintReal;
		Message6: MsgUDintReal;
		Message7: MsgUDintReal;
		Message8: MsgUDintReal;
		Message9: MsgUDintReal;
		Message10: MsgUDintReal;
		CorrValue_Real1: CorrValue_Real;
		CorrValue_Real2: CorrValue_Real;
		CorrValue_Real3: CorrValue_Real;
		CorrValue_Real4: CorrValue_Real;
		CorrValue_Real5: CorrValue_Real;
	END_VAR
'FBD'
BODY
    WORKSPACE
        NETWORK_LIST_TYPE := NWTYPEFBD ;
        ACTIVE_NETWORK := 0 ;
    END_WORKSPACE
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,check modul 69 footpedal engine speed,1,1,27,2,);
B(B_VARIN,,FALSE,10,8,12,10,);
B(B_VARIN,,1,10,5,12,7,);
B(B_VARIN,,69,10,6,12,8,);
B(B_VAROUT,,LXfootpedalPrese,24,6,26,8,);
B(B_FB,ModuleState,ModuleState1,12,4,24,10,);
B(B_VARIN,,TRUE,10,7,12,9,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_COMMENT,,check modul 94 exhaust aftertreatment,1,1,27,2,);
B(B_VARIN,,2,10,5,12,7,);
B(B_VARIN,,94,10,6,12,8,);
B(B_FB,ModuleState,ModuleState2,12,4,24,10,);
B(B_VARIN,,FALSE,10,8,12,10,);
B(B_VARIN,,TRUE,10,7,12,9,);
B(B_VARIN,,MSG_ERROR,35,7,37,9,);
B(B_VARIN,,729,35,5,37,7,);
B(B_VARIN,,2,35,8,37,10,);
B(B_VARIN,,94,35,9,37,11,);
B(B_FB,MsgUDintUDint,Message1,37,4,47,11,0N);
L(24,7,37,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,init,1,1,40,2,);
B(B_VARIN,,LXinitOk,10,3,12,5,);
B(B_JUMP,,init,12,3,14,5,N);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 25 ;
        NETWORK_BODY
B(B_COMMENT,,scale Inputs,1,1,40,2,);
B(B_VAROUT,,LDpresenEngSpeed,24,4,26,6,);
B(B_VAROUT,,MDbatteryVoltage,24,8,26,10,);
B(B_VAROUT,,MDchargeAirTemp,24,9,26,11,);
B(B_VAROUT,,MDcoolWaterTemp,24,10,26,12,);
B(B_VAROUT,,MDengTorqueMax,24,7,26,9,);
B(B_VAROUT,,MDengTorqueAct,24,6,26,8,);
B(B_VAROUT,,MDengExploitatio,24,5,26,7,);
B(B_VAROUT,,LDhydrOilTemp,24,11,26,13,);
B(B_VAROUT,,MDlubOilPressure,24,12,26,14,);
B(B_VAROUT,,MDdefCont,24,15,26,17,);
B(B_VAROUT,,MDlubOilCont,24,14,26,16,);
B(B_VAROUT,,MDchargeAirPress,24,13,26,15,);
B(B_VAROUT,,MDoutdoorTemp,24,16,26,18,);
B(B_VAROUT,,MDengPowerAct,24,19,26,21,);
B(B_VAROUT,,MDengPowerMax,24,20,26,22,);
B(B_VAROUT,,MDfuelConsumptio,24,21,26,23,);
B(B_VAROUT,,MDfuelConsum_lph,24,22,26,24,);
B(B_VAROUT,,MRdpfTime,24,18,26,20,);
B(B_VAROUT,,MDdpfMinEngTorqu,24,17,26,19,);
B(B_FB,ENscaleInputV043,ENscaleInput1,10,3,24,24,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_COMMENT,,filter hydraulic oil temperature,1,1,40,2,);
B(B_VARIN,,LDhydrOilTemp,10,5,12,7,);
B(B_FB,FilterTP4,FilterTP4_1,12,4,21,8,);
B(B_VARIN,,0.5,10,6,12,8,);
B(B_VAROUT,,MDhydrOilTemp,21,5,23,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_COMMENT,,calculate fuel consumption absolut,1,1,40,2,);
B(B_F,@ADD-2,,12,3,17,7,);
B(B_VAROUT,,MDfuelConSumDecA,17,4,19,6,);
B(B_VARIN,,MDfuelConSumDecA,10,5,12,7,);
B(B_VARIN,,MDfuelConsumptio,10,4,12,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 15 ;
        NETWORK_BODY
B(B_F,@GE-2,,14,0,19,4,);
B(B_F,@SUB,,14,5,19,9,);
B(B_F,sel,,21,2,26,7,);
B(B_VAROUT,,MDfuelConSumDecA,26,3,28,5,);
B(B_COMMENT,,Litermenge < 1 Liter in microliter,27,5,40,6,);
B(B_VARIN,,1000000,10,2,12,4,);
B(B_VARIN,,MDfuelConSumDecA,11,1,13,3,);
B(B_F,sel,,21,7,26,12,);
B(B_VAROUT,,MDfuelConAbs_Lit,26,8,28,10,);
B(B_COMMENT,,Litermenge Spritverbrauch absolut in Liter,27,10,43,11,);
B(B_F,@ADD-2,,16,10,21,14,);
B(B_VARIN,,MDfuelConAbs_Lit,14,9,16,11,);
B(B_VARIN,,1,14,12,16,14,);
L(12,3,14,3);
L(12,8,14,8);
L(19,2,20,2);
L(13,5,21,5);
L(19,6,19,7);
L(19,6,21,6);
L(20,4,21,4);
L(12,3,12,8);
L(13,7,14,7);
L(13,2,14,2);
L(13,2,13,7);
L(20,2,20,9);
L(20,9,21,9);
L(21,11,21,12);
L(16,10,16,12);
L(16,10,21,10);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_COMMENT,,calculate fuel consumption relativ,1,1,40,2,);
B(B_F,@ADD-2,,12,3,17,7,);
B(B_VAROUT,,MDfuelConSumDecR,17,4,19,6,);
B(B_VARIN,,MDfuelConSumDecR,10,5,12,7,);
B(B_VARIN,,MDfuelConsumptio,10,4,12,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 15 ;
        NETWORK_BODY
B(B_F,@GE-2,,14,0,19,4,);
B(B_F,@SUB,,14,5,19,9,);
B(B_F,sel,,21,2,26,7,);
B(B_VARIN,,1000000,10,2,12,4,);
B(B_VARIN,,MDfuelConSumDecR,11,1,13,3,);
B(B_F,sel,,21,7,26,12,);
B(B_F,@ADD-2,,16,10,21,14,);
B(B_VARIN,,MDfuelConRel_Lit,14,9,16,11,);
B(B_VARIN,,1,14,12,16,14,);
B(B_F,sel,,35,6,40,11,);
B(B_VAROUT,,MDfuelConRel_Lit,40,7,42,9,);
B(B_COMMENT,,Litermenge Spritverbrauch relativ in Liter,41,9,57,10,);
B(B_F,sel,,35,1,40,6,);
B(B_VARIN,,MXresetFuelCon,32,2,34,4,);
B(B_VARIN,,0,31,4,33,6,);
B(B_VAROUT,,MDfuelConSumDecR,40,2,42,4,);
B(B_COMMENT,,Litermenge < 1 Liter in microliter,41,4,54,5,);
L(12,3,14,3);
L(12,8,14,8);
L(19,2,20,2);
L(13,5,21,5);
L(19,6,19,7);
L(19,6,21,6);
L(20,4,21,4);
L(12,3,12,8);
L(13,7,14,7);
L(13,2,14,2);
L(13,2,13,7);
L(20,2,20,9);
L(20,9,21,9);
L(21,11,21,12);
L(16,10,16,12);
L(16,10,21,10);
L(26,9,35,9);
L(34,8,35,8);
L(34,3,34,8);
L(34,3,35,3);
L(26,4,35,4);
L(33,10,35,10);
L(33,5,33,10);
L(33,5,35,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_FB,GPcalcOpHourV020,OpHoures1,16,3,32,9,);
B(B_VAROUT,,MDfuelConRelHour,32,4,34,6,);
B(B_VAROUT,,MDfuelConAbsHour,32,5,34,7,);
B(B_VARIN,,MDfuelConRelHour,14,6,16,8,);
B(B_VARIN,,MDfuelConAbsHour,14,7,16,9,);
B(B_F,@GT-2,,11,1,16,5,);
B(B_VARIN,,MDfuelConsumptio,9,2,11,4,);
B(B_VARIN,,0,9,3,11,5,);
B(B_VARIN,,MXresetFuelCon,14,5,16,7,);
L(16,3,16,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_F,@DIV,,24,6,29,10,);
B(B_VARIN,,0.0,25,3,27,5,);
B(B_F,@GT-2,,27,1,32,5,);
B(B_F,sel,,32,4,37,9,);
B(B_VAROUT,,MDfuelConAbs_LpH,37,5,39,7,);
B(B_VARIN,,0.0,30,6,32,8,);
B(B_F,udint_to_real,,11,6,22,9,);
B(B_VARIN,,MDfuelConAbs_Lit,9,7,11,9,);
B(B_VARIN,,MDfuelConAbsHour,21,2,23,4,);
L(23,3,23,9);
L(23,3,27,3);
L(32,3,32,6);
L(29,8,32,8);
L(22,8,24,8);
L(23,9,24,9);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_F,@DIV,,24,6,29,10,);
B(B_VARIN,,0.0,25,3,27,5,);
B(B_F,@GT-2,,27,1,32,5,);
B(B_F,sel,,32,4,37,9,);
B(B_VAROUT,,MDfuelConRel_LpH,37,5,39,7,);
B(B_VARIN,,0.0,30,6,32,8,);
B(B_VARIN,,MDfuelConRel_Lit,9,7,11,9,);
B(B_F,udint_to_real,,11,6,22,9,);
B(B_VARIN,,MDfuelConRelHour,21,2,23,4,);
L(23,3,23,9);
L(23,3,27,3);
L(32,3,32,6);
L(29,8,32,8);
L(22,8,24,8);
L(23,9,24,9);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,get minimum and maximum engine speed,1,1,40,2,);
B(B_VARIN,,LXspeedDemandOk,9,3,11,5,);
B(B_JUMP,,go_on,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 17 ;
        NETWORK_BODY
B(B_FB,R_TRIG,R_TRIG1,11,2,18,5,);
B(B_VARIN,,TRUE,9,3,11,5,);
B(B_FB,RS,RS1,18,2,23,6,);
B(B_VAROUT,,QXengDemMinEngSp,23,3,25,5,);
B(B_FB,F_TRIG,F_TRIG1,23,6,30,9,);
B(B_FB,RS,RS2,30,6,35,10,);
B(B_VAROUT,,QXengDemMaxEngSp,35,7,37,9,);
B(B_FB,F_TRIG,F_TRIG2,35,10,42,13,);
B(B_FB,SR,SR1,42,10,47,14,);
B(B_VARIN,,FALSE,40,13,42,15,);
B(B_COMMENT,,Auf dem Merker "presentEngSpeed" wird am Anfang die Maximale ø^und minimale Motordrehzahl übertragen. Dies geschieht aber nur ø^auf Anforderung. ,44,1,70,4,);
B(B_COMMENT,,min Drehzahl anfordern,25,2,35,3,);
B(B_COMMENT,,max Drehzahl anfordern,37,6,47,7,);
B(B_VARIN,,IXengDemSpeMinOk,16,5,18,7,);
B(B_VARIN,,IXengDemSpeMaxOk,28,9,30,11,);
B(B_F,@AND-2,,47,12,52,16,0N);
B(B_VAROUT,,LXspeedDemandOk,52,13,54,15,);
L(23,4,23,8);
L(35,8,35,12);
L(42,13,42,14);
L(18,5,18,6);
L(47,12,47,14);
L(30,15,47,15);
L(30,9,30,15);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_F,sel,,11,1,16,6,);
B(B_VAROUT,,MDengMinSpeed,16,2,18,4,);
B(B_VARIN,,LDpresenEngSpeed,9,4,11,6,);
B(B_VARIN,,MDengMinSpeed,9,3,11,5,);
B(B_VARIN,,IXengDemSpeMinOk,9,2,11,4,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_F,sel,,11,1,16,6,);
B(B_VAROUT,,MDengMaxSpeed,16,2,18,4,);
B(B_VARIN,,LDpresenEngSpeed,9,4,11,6,);
B(B_VARIN,,MDengMaxSpeed,9,3,11,5,);
B(B_VARIN,,IXengDemSpeMaxOk,9,2,11,4,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL := go_on: ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_VAROUT,,MDpresenEngSpeed,16,2,18,4,);
B(B_F,sel,,11,1,16,6,);
B(B_VARIN,,LXspeedDemandOk,9,2,11,4,);
B(B_VARIN,,LDpresenEngSpeed,9,4,11,6,);
B(B_VARIN,,0.0,9,3,11,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,set minimum engine speed,1,1,27,2,);
B(B_VAROUT,,MXminEngineSpeed,11,3,13,5,);
B(B_VARIN,,IXengRunning,9,3,11,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 44 ;
        NETWORK_BODY
B(B_COMMENT,,send messages INFO,1,1,40,2,);
B(B_VARIN,,IXengRunning,15,9,17,11,);
B(B_VARIN,,IXengStarting,30,7,32,9,);
B(B_VARIN,,IXengPowerRedTem,30,9,32,11,);
B(B_VARIN,,IXengPowerRedHig,30,10,32,12,);
B(B_VARIN,,IXengFuelTempW,30,15,32,17,);
B(B_VARIN,,IXengFuelTempE,30,16,32,18,);
B(B_VARIN,,IXengCooWatTempW,30,11,32,13,);
B(B_VARIN,,IXengCooWatTempE,30,12,32,14,);
B(B_VARIN,,IXengChaAirTempW,30,13,32,15,);
B(B_VARIN,,IXengChaAirTempE,30,14,32,16,);
B(B_VARIN,,QXengEnableEngin,15,10,17,12,);
B(B_F,@AND-3,,17,7,22,12,N);
B(B_VAROUT,,MXengChargingOFF,23,4,25,6,);
B(B_FB,TOF,TOF1,11,5,16,9,);
B(B_VARIN,,T#1s,9,7,11,9,);
B(B_VARIN,,IXengCharging,9,6,11,8,);
B(B_COMMENT,,Ladekontrolllampe um 1 Sek verzögern. (wie asyn. Meldung) ,1,3,25,4,);
B(B_VARIN,,IXengLubOilPresW,30,18,32,20,);
B(B_VARIN,,IXengLubOilPresE,30,19,32,21,);
B(B_VARIN,,IXengWaterInFuel,30,17,32,19,);
B(B_VARIN,,IXengFuelPressWa,30,20,32,22,);
B(B_VARIN,,IXengFuelPressEr,30,21,32,23,);
B(B_VARIN,,IXengFuelPresRaW,30,23,32,25,);
B(B_VARIN,,IXengFuelPresRaE,30,24,32,26,);
B(B_VARIN,,IXengAirFilterW,15,22,17,24,);
B(B_VARIN,,IXengAirFilterE,15,23,17,25,);
B(B_F,@OR-2,,17,21,22,25,);
B(B_F,@OR-2,,17,25,22,29,);
B(B_VARIN,,IXengCoolWatConW,15,26,17,28,);
B(B_VARIN,,IXengCoolWatConE,15,27,17,29,);
B(B_FB,ENmsgInfoV030,ENmsgInfo1,32,6,42,43,);
B(B_VARIN,,FALSE,30,26,32,28,);
B(B_VARIN,,IXengLubOilCoLoE,30,27,32,29,);
B(B_VARIN,,IXengSpeedHighW,30,30,32,32,);
B(B_VARIN,,IXengSpeedHighE,30,31,32,33,);
B(B_VARIN,,MXengDefWarn,30,32,32,34,);
B(B_VARIN,,MXengDefError,30,33,32,35,);
B(B_VARIN,,IXengEmergenStop,30,34,32,36,);
B(B_VARIN,,IXengRequireStop,30,35,32,37,);
B(B_VARIN,,IXengRequireRepa,30,36,32,38,);
B(B_VARIN,,IXengAsynchError,30,37,32,39,);
B(B_VARIN,,MDchargeAirTemp,30,39,32,41,);
B(B_VARIN,,MDcoolWaterTemp,30,38,32,40,);
B(B_VARIN,,MDlubOilPressure,30,40,32,42,);
B(B_VARIN,,FALSE,30,28,32,30,);
B(B_VARIN,,IXengLubOilCoHiE,30,29,32,31,);
B(B_VARIN,,MDpresenEngSpeed,30,41,32,43,);
L(22,9,32,9);
L(23,5,23,9);
L(16,7,17,7);
L(17,7,17,9);
L(22,23,32,23);
L(22,26,32,26);
L(22,26,22,27);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,required engine repair,1,1,27,2,);
B(B_VARIN,,IXengRequireRepa,9,3,11,5,);
B(B_VAROUT,,MXengRequireRep,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_COMMENT,,required engine stop,1,1,27,2,);
B(B_COMMENT,,Der geforderte Motorstop wird als Symbol auf der Hauptseite angezeigt ,35,1,67,2,);
B(B_FB,TP,TP1,16,7,21,11,);
B(B_VARIN,,T#5s,14,9,16,11,);
B(B_COMMENT,,Fehler liegt mindestens so lange an~ bis Signal reduziert ist. ,35,2,67,3,);
B(B_VARIN,,IXengRequireStop,9,4,11,6,);
B(B_F,@OR-2,,21,3,26,7,);
B(B_VAROUT,,MXengRequireStop,26,4,28,6,);
B(B_F,@OR-2,,11,3,16,7,);
B(B_VARIN,,MXhydrOilContErr,9,5,11,7,);
L(16,5,16,9);
L(21,6,21,9);
L(16,5,21,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 15 ;
        NETWORK_BODY
B(B_FB,IntegratorLimit,Integrator2,25,4,38,13,);
B(B_VAROUT,,LDpowRedRequired,38,5,40,7,);
B(B_VARIN,,0.05,23,7,25,9,);
B(B_VARIN,,0.1,23,8,25,10,);
B(B_COMMENT,,5 Sekunden Abfallzeit ø^10 Sekunden Ansteigszeit ,38,8,55,10,);
B(B_VARIN,,TRUE,23,5,25,7,);
B(B_F,sel,,16,5,21,10,);
B(B_VARIN,,0.5,14,8,16,10,);
B(B_VARIN,,1.0,14,7,16,9,);
B(B_FB,R_TRIG,R_TRIG2,16,10,23,13,);
B(B_VARIN,,TRUE,14,11,16,13,);
B(B_VARIN,,1.0,23,12,25,14,);
B(B_COMMENT,,Beim einschalten mit 1 initalis.,9,13,22,14,);
B(B_COMMENT,,integrated signal limitation,1,1,27,2,);
B(B_VARIN,,MXengRequireStop,9,4,11,6,);
B(B_VARIN,,MXsafetyProgPRA,9,5,11,7,);
B(B_VARIN,,MXhydrOilContWar,9,6,11,8,);
B(B_F,@OR-3,,11,3,16,8,);
L(21,7,25,7);
L(24,10,25,10);
L(24,10,24,12);
L(23,12,24,12);
L(25,11,25,13);
L(16,5,16,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_COMMENT,,engine stop,1,1,40,2,);
B(B_VAROUT,,QXengEnableEngin,31,5,33,7,);
B(B_FB,TOF,TOF2,11,4,16,8,);
B(B_VARIN,,MXglobStopEngine,9,5,11,7,);
B(B_VARIN,,T#2s,9,6,11,8,);
B(B_VARIN,,LXspeedDemandOk,24,6,26,8,);
B(B_F,@AND-2,,26,4,31,8,N);
L(16,6,26,6);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_COMMENT,,engine stopped by EDC,1,1,40,2,);
B(B_VARIN,,QXengEnableEngin,9,4,11,6,);
B(B_VAROUT,,MXengineStopped,16,4,18,6,);
B(B_VARIN,,IXengEmergenStop,9,5,11,7,);
B(B_F,@OR-2,,11,3,16,7,N);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_COMMENT,,engine start and starter activated,1,1,40,2,);
B(B_VAROUT,,QXengStart,21,6,23,8,);
B(B_VARIN,,QXengEnableEngin,14,7,16,9,);
B(B_FB,TOF,TOF3,30,8,35,12,);
B(B_VAROUT,,MXengStarterActi,35,9,37,11,);
B(B_F,@AND-2,,21,8,26,12,0N);
B(B_VARIN,,MXminEngineSpeed,19,10,21,12,);
B(B_VARIN,,T#2s,28,10,30,12,);
B(B_F,@OR-2,,11,3,16,7,);
B(B_VARIN,,IXenEngineStart,9,4,11,6,);
B(B_VARIN,,MXrcStartEngine,9,5,11,7,);
B(B_VARIN,,MXhydrOilShOffOk,14,8,16,10,);
B(B_F,@AND-3,,16,5,21,10,);
L(21,7,21,10);
L(26,10,30,10);
L(16,5,16,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,cooler fan control,1,1,40,2,);
B(B_COMMENT,,Die Lüftersteuerung über Kühlwassertemperaturø^und Ladelufttemperatur erfolgt im EDC,22,3,40,5,);
B(B_VARIN,,FALSE,9,3,11,5,);
B(B_VAROUT,,QXengCANfanSpeed,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_VARIN,,QWoilCoFanSpeed,9,3,11,5,);
B(B_F,sel,,11,1,16,6,N);
B(B_VARIN,,MXrelFanByOilTem,9,2,11,4,);
B(B_VARIN,,1000,9,4,11,6,);
B(B_F,uint_to_int,,16,1,26,4,);
B(B_VAROUT,,QWengFanSpeed,26,2,28,4,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,set maximum allowed engine torque ,1,1,40,2,);
B(B_VARIN,,32660,9,3,11,5,);
B(B_VAROUT,,QWengMaxTorque,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 14 ;
        NETWORK_BODY
B(B_F,int_to_real,,11,5,21,8,);
B(B_VARIN,,IWfootpEngSpeed,9,6,11,8,);
B(B_VARIN,,10.0,19,8,21,10,);
B(B_FB,Integrator,Integrator1,35,4,44,10,N);
B(B_VARIN,,MXremContActive,33,5,35,7,);
B(B_VARIN,,100.0,32,7,34,9,);
B(B_F,@DIV,,21,5,26,9,);
B(B_VAROUT,,LDengSpeedValFoP,44,5,46,7,);
B(B_COMMENT,,engine speed adjustment,1,1,40,2,);
B(B_VARIN,,0.1,42,11,44,13,);
B(B_F,@GE-2,,44,9,49,13,);
B(B_VAROUT,,LXfootpedalActiv,49,10,51,12,);
L(21,8,21,9);
L(34,8,35,8);
L(34,8,34,9);
L(34,9,35,9);
L(26,7,35,7);
L(44,6,44,11);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 20 ;
        NETWORK_BODY
B(B_VARIN,,100.0,10,4,12,6,);
B(B_F,sel,,14,1,19,6,);
B(B_F,sel,,20,5,25,10,);
B(B_FB,IntegratorLimit,Integrator3,35,4,48,13,);
B(B_VARIN,,40.0,33,8,35,10,);
B(B_VARIN,,40.0,33,7,35,9,);
B(B_VARIN,,MXminEngineSpeed,33,5,35,7,);
B(B_VARIN,,0.0,33,11,35,13,);
B(B_F,@AND-2,,24,13,29,17,);
B(B_FB,R_TRIG,R_TRIG3,17,13,24,16,);
B(B_VARIN,,MXjoyEngSpeedDn,10,14,12,16,);
B(B_VARIN,,MXjoyEngSpeedUp,10,15,12,17,);
B(B_F,@OR-3,,12,13,17,18,);
B(B_VARIN,,LXfootpedalActiv,10,16,12,18,);
B(B_VARIN,,MXjoyEngSpeedDn,10,8,12,10,);
B(B_VARIN,,0.0,12,10,14,12,);
B(B_F,sel,,14,7,19,12,);
B(B_VARIN,,MXjoyEngSpeedUp,12,2,14,4,);
B(B_VARIN,,LDengSpeedValJoy,11,3,13,5,);
B(B_VAROUT,,LXmanualEngSpeAd,29,14,31,16,);
B(B_VARIN,,100.0,47,13,49,15,);
B(B_F,limit,,50,3,56,8,);
B(B_VAROUT,,LDengSpeedValJoy,56,4,58,6,);
B(B_VARIN,,0.0,47,2,49,4,);
B(B_VARIN,,MXforcedNeutral,22,18,24,20,);
L(12,5,14,5);
L(12,7,12,9);
L(13,4,13,10);
L(29,10,35,10);
L(25,7,35,7);
L(12,7,20,7);
L(19,8,20,8);
L(19,3,19,8);
L(29,10,29,15);
L(13,10,14,10);
L(12,9,14,9);
L(19,9,20,9);
L(35,11,35,12);
L(13,4,14,4);
L(49,5,50,5);
L(48,6,50,6);
L(49,7,50,7);
L(49,7,49,14);
L(49,3,49,5);
L(24,16,24,19);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 17 ;
        NETWORK_BODY
B(B_COMMENT,,preselect high idle speed,1,1,27,2,);
B(B_F,@OR-2,,12,7,17,11,);
B(B_VARIN,,MXengMinIdleSpd,10,8,12,10,);
B(B_VARIN,,LXfootpedalActiv,10,9,12,11,);
B(B_COMMENT,,http://jira.zdv.liebherr.i:8080/browse/LWNTBEHSHSSW10511521-55,35,1,66,2,);
B(B_F,sel,,19,11,24,16,);
B(B_VARIN,,CDengMinIdleSpd,17,14,19,16,);
B(B_VARIN,,LDengRatMinSpeed,17,13,19,15,);
B(B_FB,TON,TON1,22,7,27,11,N);
B(B_VARIN,,T#5.0s,20,9,22,11,);
B(B_F,sel,,41,10,46,15,);
B(B_VAROUT,,LDengRatMinSpeed,46,11,48,13,);
B(B_VARIN,,0.0,39,13,41,15,);
B(B_VARIN,,MDengRatMinSpeed,20,4,22,6,);
B(B_F,EQ_R,,22,3,27,7,);
B(B_VARIN,,0.0,20,5,22,7,);
B(B_FB,R_TRIG,R_TRIG7,27,7,34,10,);
B(B_FB,R_TRIG,R_TRIG6,27,3,34,6,);
B(B_F,@OR-2,,35,3,40,7,);
L(18,9,18,13);
L(18,13,19,13);
L(17,9,22,9);
L(24,13,41,13);
L(40,12,41,12);
L(40,5,40,12);
L(34,5,35,5);
L(35,6,35,9);
L(34,9,35,9);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_F,sel,,20,4,25,9,);
B(B_VAROUT,,LDengRatMinSpeed,25,5,27,7,);
B(B_F,@GT-2,,14,3,19,7,);
B(B_VARIN,,MDengRatMinSpeed,11,4,13,6,);
B(B_VARIN,,LDengRatMinSpeed,10,5,12,7,);
B(B_COMMENT,,external high rated minimum engine speed ,1,1,27,2,);
L(12,6,14,6);
L(20,5,20,6);
L(13,5,13,8);
L(13,8,20,8);
L(12,6,12,7);
L(12,7,20,7);
L(13,5,14,5);
L(19,5,20,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 21 ;
        NETWORK_BODY
B(B_F,limit,,24,3,30,8,);
B(B_VARIN,,0.0,22,4,24,6,);
B(B_F,@ADD-2,,15,4,20,8,);
B(B_VARIN,,LDengSpeedValFoP,13,6,15,8,);
B(B_VARIN,,LDengSpeedValJoy,13,5,15,7,);
B(B_F,@DIV,,30,3,35,7,);
B(B_F,@MUL-2,,35,3,40,7,);
B(B_F,@ADD-2,,40,3,45,7,);
B(B_VAROUT,,MDengRatSpeedPer,30,1,32,3,);
B(B_VARIN,,100.0,28,8,30,10,);
B(B_COMMENT,,Derzeit wird von LIDEC keine Mindestdrehzahl zur DPF Regeneration gefordert.ø^Bei Manueller Regeneration wird die Drehzahl vom LIDEC selbst eingestellt.ø^MDfiltRegEngSpee,48,9,81,12,);
B(B_F,real_to_int,,45,3,55,6,);
B(B_VAROUT,,QWengRatedSpeed,55,4,57,6,);
B(B_VAROUT,,MDratedEngSpeed,45,1,47,3,);
B(B_F,@GT-2,,18,14,23,18,);
B(B_VARIN,,MDengMinSpeed,14,16,16,18,);
B(B_VARIN,,LDengRatMinSpeed,15,15,17,17,);
B(B_F,sel,,25,15,30,20,);
B(B_F,@SUB,,30,12,35,16,);
B(B_VARIN,,MDengMaxSpeed,28,13,30,15,);
B(B_F,sel,,19,8,24,13,);
B(B_VARIN,,100.0,17,10,19,12,);
B(B_VARIN,,MXforcedNeutral,17,9,19,11,);
B(B_F,to_real,,12,11,19,14,);
B(B_VARIN,,0.0,10,12,12,14,);
L(20,6,24,6);
L(30,2,30,5);
L(30,6,30,9);
L(24,7,24,10);
L(40,6,40,17);
L(45,2,45,5);
L(30,17,40,17);
L(16,17,16,18);
L(16,18,25,18);
L(17,16,17,19);
L(17,19,25,19);
L(23,16,24,16);
L(24,16,24,17);
L(24,17,25,17);
L(17,16,18,16);
L(16,17,18,17);
L(30,15,30,17);
L(35,6,35,14);
L(19,12,19,13);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 16 ;
        NETWORK_BODY
B(B_VARIN,,MXjoyEngSpeStore,10,5,12,7,);
B(B_FB,R_TRIG,R_TRIG4,12,4,19,7,);
B(B_F,@AND-2,,21,7,26,11,);
B(B_FB,RS,RS3,37,4,42,8,);
B(B_VARIN,,MXengSpeedStore,19,9,21,11,);
B(B_COMMENT,,store current engine speed,1,1,27,2,);
B(B_F,@OR-4,,30,7,35,13,);
B(B_VARIN,,MXjoyEngSpeedDn,25,11,27,13,);
B(B_VARIN,,MXjoyEngSpeedUp,26,12,28,14,);
B(B_VARIN,,LXfootpedalActiv,27,13,29,15,);
B(B_VAROUT,,MXengSpeedStore,42,5,44,7,);
L(35,9,36,9);
L(36,7,36,9);
L(36,7,37,7);
L(19,6,37,6);
L(20,6,20,9);
L(20,9,21,9);
L(28,11,30,11);
L(26,9,30,9);
L(27,10,30,10);
L(29,12,30,12);
L(27,10,27,12);
L(28,11,28,13);
L(29,12,29,14);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 15 ;
        NETWORK_BODY
B(B_COMMENT,,engine speed automatic turn to zero,1,1,40,2,);
B(B_VARIN,,T#7s,10,9,12,11,);
B(B_VARIN,,LXfootpedalActiv,16,11,18,13,);
B(B_VARIN,,MXengSpeedStore,16,4,18,6,);
B(B_FB,TOF,TOF4,12,7,17,11,);
B(B_VARIN,,MXpreHigEngSpeed,10,8,12,10,);
B(B_F,@OR-3,,18,6,23,11,000N);
B(B_VAROUT,,MXforcedNeutral,28,7,30,9,);
B(B_F,@OR-2,,23,6,28,10,);
B(B_VARIN,,MXpreLowEngSpeed,21,12,23,14,);
L(18,5,18,8);
L(18,10,18,12);
L(17,9,18,9);
L(23,9,23,13);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_F,@GT-2,,17,5,22,9,);
B(B_VARIN,,MDpresenEngSpeed,15,6,17,8,);
B(B_VARIN,,MXforcedNeutral,20,3,22,5,);
B(B_F,@SUB,,12,8,17,12,);
B(B_VARIN,,LDlastRatedEngSp,10,9,12,11,);
B(B_VARIN,,100.0,10,10,12,12,);
B(B_VAROUT,,LXsetPowLimSig0,27,5,29,7,);
B(B_COMMENT,,reset power regulation ,1,1,27,2,);
B(B_FB,SR,SR2,22,4,27,8,);
L(22,4,22,6);
L(17,8,17,10);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 16 ;
        NETWORK_BODY
B(B_COMMENT,,maximum engine power controller,1,1,27,2,);
B(B_VARIN,,MDpresenEngSpeed,26,6,28,8,);
B(B_VARIN,,CDmaxPower_p_fac,26,8,28,10,);
B(B_VARIN,,CDmaxPow_i_facUp,26,9,28,11,);
B(B_VARIN,,CDmaxPow_i_facDn,26,10,28,12,);
B(B_VARIN,,CDmaxPower_d_fac,26,11,28,13,);
B(B_F,@SUB,,53,4,58,8,);
B(B_VARIN,,1.0,50,3,52,5,);
B(B_FB,GPpidPowRegV020,PID1,28,5,51,14,);
B(B_F,sel,,60,3,65,8,);
B(B_VARIN,,0.0,58,6,60,8,);
B(B_VARIN,,LXsetPowLimSig0,57,1,59,3,);
B(B_VARIN,,LXsetPowLimSig0,26,12,28,14,);
B(B_F,SigMin4,,66,3,73,9,);
B(B_VAROUT,,MDpowerLimReduct,73,4,75,6,);
B(B_VARIN,,LDpowRedRequired,64,8,66,10,);
B(B_F,@SUB,,12,6,17,10,);
B(B_VARIN,,MDratedEngSpeed,10,7,12,9,);
B(B_VARIN,,50.0,10,8,12,10,);
B(B_COMMENT,,Der Grenzlastregler soll auf den Punkt 50U/min unter demø^Nennpunkt regeln~ damit er nicht mit dem Motorreglerø^in konflikt kommt!,2,3,23,6,);
L(52,6,53,6);
L(52,4,52,6);
L(51,7,53,7);
L(58,6,60,6);
L(59,5,60,5);
L(59,2,59,5);
L(65,5,66,5);
L(66,5,66,6);
L(66,7,66,9);
L(17,8,28,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_F,sel,,17,4,22,9,);
B(B_VAROUT,,LDlastRatedEngSp,22,5,24,7,);
B(B_VARIN,,LDlastRatedEngSp,15,7,17,9,);
B(B_VARIN,,MDratedEngSpeed,15,6,17,8,);
B(B_VARIN,,LXmanualEngSpeAd,10,2,12,4,);
B(B_VARIN,,LXsetPowLimSig0,10,3,12,5,);
B(B_VARIN,,MXminEngineSpeed,10,4,12,6,);
B(B_F,@AND-3,,12,1,17,6,N);
L(17,3,17,6);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_F,@LT-2,,12,3,17,7,);
B(B_VARIN,,MDhydrOilTemp,10,4,12,6,);
B(B_VARIN,,-99.9,10,5,12,7,);
B(B_COMMENT,,set hyd. Oiltemperature Sensor brocken,1,1,27,2,);
B(B_VAROUT,,MXhdrOilTemError,17,4,19,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_COMMENT,,AGN DPF,1,1,27,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 5 ;
        NETWORK_BODY
B(B_VAROUT,,MXdpfHEST,18,2,20,4,);
B(B_VARIN,,IWengAgnHighExhT,11,2,13,4,);
B(B_F,@EQ-2,,13,1,18,5,);
B(B_VARIN,,1,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 5 ;
        NETWORK_BODY
B(B_VAROUT,,MXengDefWarn,18,2,20,4,);
B(B_VARIN,,IWengDefWarn,11,2,13,4,);
B(B_F,@EQ-2,,13,1,18,5,);
B(B_VARIN,,1,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 5 ;
        NETWORK_BODY
B(B_VAROUT,,MXengDefError,18,2,20,4,);
B(B_VARIN,,IWengDefError,11,2,13,4,);
B(B_F,@EQ-2,,13,1,18,5,);
B(B_VARIN,,1,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 36 ;
        NETWORK_BODY
B(B_F,@EQ-2,,14,7,19,11,);
B(B_F,@EQ-2,,14,11,19,15,);
B(B_VARIN,,1,10,9,12,11,);
B(B_VARIN,,2,10,13,12,15,);
B(B_F,@EQ-2,,14,19,19,23,);
B(B_F,@EQ-2,,14,23,19,27,);
B(B_VARIN,,3,10,17,12,19,);
B(B_F,@EQ-2,,14,15,19,19,);
B(B_VARIN,,4,10,21,12,23,);
B(B_VARIN,,5,10,25,12,27,);
B(B_VAROUT,,LXagnAutoPrepair,19,8,21,10,);
B(B_VAROUT,,LXagnAutoHeating,19,12,21,14,);
B(B_VAROUT,,LXagnAutoRegen,19,16,21,18,);
B(B_VAROUT,,LXagnAutoEnd,19,24,21,26,);
B(B_VAROUT,,LXagnAutoCool,19,20,21,22,);
B(B_F,@EQ-2,,35,7,40,11,);
B(B_F,@EQ-2,,35,11,40,15,);
B(B_VARIN,,6,31,9,33,11,);
B(B_VARIN,,7,31,13,33,15,);
B(B_F,@EQ-2,,35,19,40,23,);
B(B_F,@EQ-2,,35,23,40,27,);
B(B_VARIN,,8,31,17,33,19,);
B(B_F,@EQ-2,,35,15,40,19,);
B(B_VARIN,,9,31,21,33,23,);
B(B_VARIN,,10,31,25,33,27,);
B(B_VAROUT,,LXagnManuPrepair,40,8,42,10,);
B(B_VAROUT,,LXagnManuHeating,40,12,42,14,);
B(B_VAROUT,,LXagnManuRegen,40,16,42,18,);
B(B_VAROUT,,LXagnManuEnd,40,24,42,26,);
B(B_VAROUT,,LXagnManuCool,40,20,42,22,);
B(B_F,@EQ-2,,56,7,61,11,);
B(B_F,@EQ-2,,56,11,61,15,);
B(B_VARIN,,11,52,9,54,11,);
B(B_VARIN,,12,52,13,54,15,);
B(B_F,@EQ-2,,56,19,61,23,);
B(B_F,@EQ-2,,56,23,61,27,);
B(B_VARIN,,13,52,17,54,19,);
B(B_F,@EQ-2,,56,15,61,19,);
B(B_VARIN,,14,52,21,54,23,);
B(B_VARIN,,15,52,25,54,27,);
B(B_VAROUT,,LXagnServPrepair,61,8,63,10,);
B(B_VAROUT,,LXagnServHeating,61,12,63,14,);
B(B_VAROUT,,LXagnServRegen,61,16,63,18,);
B(B_VAROUT,,LXagnServEnd,61,24,63,26,);
B(B_VAROUT,,LXagnServCool,61,20,63,22,);
B(B_VARIN,,IWengAgnMode,11,5,13,7,);
B(B_F,@EQ-2,,13,1,18,5,);
B(B_VAROUT,,LXagnOff,18,2,20,4,);
B(B_VARIN,,0,11,2,13,4,);
B(B_F,@GE-2,,14,27,19,31,);
B(B_F,@LE-2,,14,31,19,35,);
B(B_F,@AND-2,,19,30,24,34,);
B(B_VAROUT,,LXagnAutoActive,24,31,26,33,);
B(B_F,@GE-2,,35,27,40,31,);
B(B_F,@LE-2,,35,31,40,35,);
B(B_F,@AND-2,,40,30,45,34,);
B(B_VAROUT,,LXagnManuActive,45,31,47,33,);
B(B_F,@GE-2,,56,27,61,31,);
B(B_F,@LE-2,,56,31,61,35,);
B(B_F,@AND-2,,61,30,66,34,);
B(B_VAROUT,,LXagnServActive,66,31,68,33,);
B(B_VARIN,,1,10,29,12,31,);
B(B_VARIN,,5,10,33,12,35,);
B(B_VARIN,,6,31,29,33,31,);
B(B_VARIN,,10,31,33,33,35,);
B(B_VARIN,,11,52,29,54,31,);
B(B_VARIN,,15,52,33,54,35,);
B(B_F,@EQ-2,,77,7,82,11,);
B(B_F,@EQ-2,,77,11,82,15,);
B(B_VARIN,,16,73,9,75,11,);
B(B_VARIN,,17,73,13,75,15,);
B(B_F,@EQ-2,,77,19,82,23,);
B(B_VARIN,,18,73,17,75,19,);
B(B_F,@EQ-2,,77,15,82,19,);
B(B_VARIN,,19,73,21,75,23,);
B(B_VAROUT,,LXagnHcPurgePrep,82,8,84,10,);
B(B_VAROUT,,LXagnHcPurgeHeat,82,12,84,14,);
B(B_VAROUT,,LXagnHcPurgeCool,82,16,84,18,);
B(B_VAROUT,,LXagnHcPurgeEnd,82,20,84,22,);
B(B_F,@GE-2,,77,27,82,31,);
B(B_F,@LE-2,,77,31,82,35,);
B(B_F,@AND-2,,82,30,87,34,);
B(B_VAROUT,,LXagnHcPurgeActi,87,31,89,33,);
B(B_VARIN,,16,73,29,75,31,);
B(B_VARIN,,19,73,33,75,35,);
L(12,10,14,10);
L(13,9,14,9);
L(12,14,14,14);
L(13,13,14,13);
L(12,18,14,18);
L(13,17,14,17);
L(12,22,14,22);
L(13,21,14,21);
L(12,26,14,26);
L(13,25,14,25);
L(33,10,35,10);
L(34,9,35,9);
L(33,14,35,14);
L(34,13,35,13);
L(33,18,35,18);
L(34,17,35,17);
L(33,22,35,22);
L(34,21,35,21);
L(33,26,35,26);
L(34,25,35,25);
L(54,10,56,10);
L(55,9,56,9);
L(54,14,56,14);
L(55,13,56,13);
L(54,18,56,18);
L(55,17,56,17);
L(54,22,56,22);
L(55,21,56,21);
L(54,26,56,26);
L(55,25,56,25);
L(55,6,55,33);
L(55,33,56,33);
L(55,29,56,29);
L(34,29,35,29);
L(34,33,35,33);
L(34,6,34,33);
L(13,29,14,29);
L(13,33,14,33);
L(13,4,13,33);
L(12,30,14,30);
L(12,34,14,34);
L(54,30,56,30);
L(54,34,56,34);
L(33,34,35,34);
L(33,30,35,30);
L(40,29,40,32);
L(61,29,61,32);
L(19,29,19,32);
L(75,10,77,10);
L(76,9,77,9);
L(75,14,77,14);
L(76,13,77,13);
L(75,18,77,18);
L(76,17,77,17);
L(75,22,77,22);
L(76,21,77,21);
L(13,6,76,6);
L(76,33,77,33);
L(76,29,77,29);
L(75,30,77,30);
L(75,34,77,34);
L(82,29,82,32);
L(76,6,76,33);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 24 ;
        NETWORK_BODY
B(B_F,@EQ-2,,18,7,23,11,);
B(B_F,@EQ-2,,18,11,23,15,);
B(B_F,@EQ-2,,18,3,23,7,);
B(B_VAROUT,,LXdpfGrade_1,23,4,25,6,);
B(B_VAROUT,,LXdpfGrade_2,23,8,25,10,);
B(B_VAROUT,,LXdpfGrade_3,23,12,25,14,);
B(B_F,@EQ-2,,18,15,23,19,);
B(B_VAROUT,,LXdpfGrade_4,23,16,25,18,);
B(B_F,@DIV,,12,1,17,5,);
B(B_VARIN,,IWengAgnDpfGrade,10,2,12,4,);
B(B_VARIN,,20,10,3,12,5,);
B(B_VARIN,,1,14,5,16,7,);
B(B_VARIN,,2,14,9,16,11,);
B(B_VARIN,,3,14,13,16,15,);
B(B_F,@EQ-2,,18,19,23,23,);
B(B_VAROUT,,LXdpfGrade_5,23,20,25,22,);
B(B_VARIN,,5,14,21,16,23,);
B(B_VARIN,,4,14,17,16,19,);
L(16,6,18,6);
L(17,5,18,5);
L(16,10,18,10);
L(17,9,18,9);
L(16,14,18,14);
L(17,13,18,13);
L(17,17,18,17);
L(16,22,18,22);
L(17,21,18,21);
L(17,3,17,21);
L(16,18,18,18);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 21 ;
        NETWORK_BODY
B(B_VARIN,,LXdpfGrade_1,10,5,12,7,);
B(B_VARIN,,LXdpfGrade_2,10,6,12,8,);
B(B_F,@OR-2,,15,4,20,8,);
B(B_VARIN,,LXdpfGrade_3,10,8,12,10,);
B(B_F,@OR-2,,12,16,17,20,);
B(B_VARIN,,LXdpfGrade_5,10,18,12,20,);
B(B_VARIN,,LXdpfGrade_4,10,14,12,16,);
B(B_VAROUT,,MXdpfWarn,15,8,17,10,);
B(B_F,@OR-4,,15,10,20,16,);
B(B_VAROUT,,MXdpfError,17,17,19,19,);
B(B_VAROUT,,MXdpfInitPossib,37,10,39,12,);
B(B_VARIN,,LXagnManuActive,30,12,32,14,);
B(B_COMMENT,,Der Touchbutton "disable" muss auch angezeigt werden~ø^wenn die Unterdrückung aktiv ist~ um diese wiederø^deaktivieren zu können.,48,7,72,10,);
B(B_F,@OR-5,,32,1,37,8,);
B(B_VARIN,,MXdpfRegBlocked,30,6,32,8,);
B(B_VARIN,,LXagnManuPrepair,30,2,32,4,);
B(B_VARIN,,LXagnManuRegen,30,4,32,6,);
B(B_VARIN,,LXagnManuHeating,30,3,32,5,);
B(B_F,@AND-4,,32,9,37,15,N0NN);
B(B_F,@AND-2,,45,1,50,5,0N);
B(B_VAROUT,,MXdpfDisabPossib,50,2,52,4,);
B(B_VARIN,,LXagnServActive,43,3,45,5,);
B(B_VARIN,,LXagnServActive,30,13,32,15,);
L(12,6,15,6);
L(12,7,15,7);
L(12,9,12,14);
L(12,15,12,18);
L(12,9,15,9);
L(14,12,15,12);
L(14,6,14,12);
L(13,7,13,13);
L(13,13,15,13);
L(12,14,15,14);
L(12,15,15,15);
L(20,12,32,12);
L(20,6,32,6);
L(32,7,32,11);
L(37,3,45,3);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_FB,RS,RS4,19,5,24,9,);
B(B_VARIN,,LXagnManuPrepair,10,9,12,11,);
B(B_FB,R_TRIG,R_TRIG5,12,8,19,11,);
B(B_VARIN,,MXdpfRegInitiat,17,6,19,8,);
B(B_F,sel,,29,5,34,10,);
B(B_VAROUT,,QWengDpfStartReg,34,6,36,8,);
B(B_VARIN,,0,27,7,29,9,);
B(B_VARIN,,1,27,8,29,10,);
B(B_F,@OR-2,,24,1,29,5,);
B(B_VARIN,,LXagnManuActive,22,2,24,4,);
B(B_VAROUT,,MXdpfRegManActiv,29,2,31,4,);
L(19,8,19,10);
L(24,7,29,7);
L(24,4,24,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 16 ;
        NETWORK_BODY
B(B_F,@AND-2,,19,11,24,15,);
B(B_VARIN,,MXdpfRegBlocked,17,13,19,15,);
B(B_F,@AND-2,,19,7,24,11,);
B(B_FB,RS,RS6,24,7,29,11,);
B(B_F,@OR-2,,12,7,17,11,);
B(B_VARIN,,LXdpfGrade_1,10,8,12,10,);
B(B_VARIN,,LXdpfGrade_2,10,9,12,11,);
B(B_VARIN,,MXdpfRegDisable,16,3,18,5,);
B(B_VARIN,,MXdpfRegManActiv,16,2,18,4,);
B(B_F,@AND-2,,18,1,23,5,);
B(B_F,@OR-2,,29,1,34,5,);
B(B_VAROUT,,MXdpfRegBlocked,34,2,36,4,);
B(B_VAROUT,,QWengDpfEnabReg,45,6,47,8,);
B(B_VARIN,,1,38,7,40,9,);
B(B_VARIN,,0,38,8,40,10,);
B(B_FB,RS,RS5,24,1,29,5,);
B(B_VARIN,,LXagnManuCool,15,5,17,7,);
B(B_F,sel,,40,5,45,10,);
L(24,10,24,13);
L(17,9,19,9);
L(18,13,19,13);
L(18,10,19,10);
L(18,4,18,13);
L(29,4,29,9);
L(34,3,34,7);
L(23,3,24,3);
L(24,4,24,6);
L(17,6,24,6);
L(34,7,40,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_VAROUT,,MXengAgnStopFunc,17,9,19,11,);
B(B_F,@OR-2,,17,5,22,9,);
B(B_VARIN,,LXagnAutoActive,15,6,17,8,);
B(B_VARIN,,MDdpfMinEngTorqu,15,2,17,4,);
B(B_VARIN,,0.0,15,3,17,5,);
B(B_F,@GT-2,,17,1,22,5,);
B(B_F,@AND-2,,22,1,27,5,);
B(B_VAROUT,,LXfiltRegActiv,27,2,29,4,);
B(B_F,@OR-2,,12,8,17,12,);
B(B_VARIN,,LXagnHcPurgeActi,10,10,12,12,);
B(B_VARIN,,LXagnManuActive,10,9,12,11,);
L(22,4,22,7);
L(17,8,17,10);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_COMMENT,,service regeneration (purge HC docer),1,1,32,2,);
B(B_F,@EQ-2,,12,3,17,7,);
B(B_VARIN,,IWengDpfServReq,10,4,12,6,);
B(B_VARIN,,1,10,5,12,7,);
B(B_F,@AND-2,,17,5,22,9,);
B(B_VARIN,,FALSE,15,7,17,9,);
B(B_F,sel,,22,7,27,12,);
B(B_VAROUT,,QWengDpfServReg,27,8,29,10,);
B(B_VARIN,,0,20,9,22,11,);
B(B_VARIN,,1,20,10,22,12,);
B(B_COMMENT,,Diese Bits für Serviceregeneration wurde von LMB nachträglich eingeführt.ø^Dies ist derzeit hier noch nicht implementiert.,28,4,77,8,);
L(17,5,17,7);
L(22,7,22,9);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_VARIN,,MDengTorqueAct,10,4,12,6,);
B(B_VARIN,,0.0,10,6,12,8,);
B(B_VARIN,,0.15,10,7,12,9,);
B(B_VARIN,,0.35,10,8,12,10,);
B(B_VARIN,,0.0,10,9,12,11,);
B(B_VARIN,,100.0,34,1,36,3,);
B(B_FB,GPpidPowRegV020,PID2,12,3,35,12,000000N);
B(B_VARIN,,LXfiltRegActiv,10,10,12,12,);
B(B_VAROUT,,MDfiltRegValvSig,42,3,44,5,);
B(B_F,@MUL-2,,37,2,42,6,);
B(B_VARIN,,MDdpfMinEngTorqu,10,5,12,7,);
L(36,2,36,4);
L(35,5,37,5);
L(36,4,37,4);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 34 ;
        NETWORK_BODY
B(B_VARIN,,723,20,3,22,5,);
B(B_VARIN,,MXdpfRegInitiat,20,4,22,6,);
B(B_VARIN,,MSG_INFO,20,5,22,7,);
B(B_VARIN,,724,20,11,22,13,);
B(B_VARIN,,MXdpfRegDisable,20,12,22,14,);
B(B_VARIN,,728,20,19,22,21,);
B(B_VARIN,,LXdpfGrade_1,20,20,22,22,);
B(B_VARIN,,728,20,27,22,29,);
B(B_VARIN,,LXdpfGrade_2,20,28,22,30,);
B(B_VARIN,,1,21,22,23,24,);
B(B_VARIN,,2,21,30,23,32,);
B(B_FB,MsgUDintReal,Message2,25,2,34,9,);
B(B_FB,MsgUDintReal,Message3,25,10,34,17,);
B(B_FB,MsgUDintReal,Message4,25,18,34,25,);
B(B_FB,MsgUDintReal,Message5,25,26,34,33,);
B(B_F,int_to_udint,,12,8,23,11,);
B(B_VARIN,,IWengAgnDpfGrade,10,9,12,11,);
L(22,4,25,4);
L(22,5,25,5);
L(22,6,25,6);
L(22,12,25,12);
L(22,13,25,13);
L(24,14,25,14);
L(24,6,24,30);
L(22,20,25,20);
L(22,21,25,21);
L(24,22,25,22);
L(22,28,25,28);
L(22,29,25,29);
L(24,30,25,30);
L(23,31,25,31);
L(23,23,25,23);
L(23,7,23,15);
L(23,15,25,15);
L(23,7,25,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 42 ;
        NETWORK_BODY
B(B_VARIN,,728,20,19,22,21,);
B(B_VARIN,,LXdpfGrade_3,20,20,22,22,);
B(B_VARIN,,728,20,27,22,29,);
B(B_VARIN,,LXdpfGrade_4,20,28,22,30,);
B(B_VARIN,,728,20,35,22,37,);
B(B_VARIN,,LXdpfGrade_5,20,36,22,38,);
B(B_VARIN,,806,20,3,22,5,);
B(B_VARIN,,IXengAgnMilWarn,20,4,22,6,);
B(B_VARIN,,MSG_WARNING,20,5,22,7,);
B(B_VARIN,,3,21,22,23,24,);
B(B_VARIN,,4,21,30,23,32,);
B(B_VARIN,,5,21,38,23,40,);
B(B_FB,MsgUDintReal,Message6,25,2,34,9,);
B(B_FB,MsgUDintReal,Message8,25,18,34,25,);
B(B_FB,MsgUDintReal,Message9,25,26,34,33,);
B(B_FB,MsgUDintReal,Message10,25,34,34,41,);
B(B_VARIN,,807,20,11,22,13,);
B(B_VARIN,,IXengAgnMilError,20,12,22,14,);
B(B_FB,MsgUDintReal,Message7,25,10,34,17,);
L(22,20,25,20);
L(22,21,25,21);
L(24,22,25,22);
L(22,28,25,28);
L(22,29,25,29);
L(24,30,25,30);
L(22,36,25,36);
L(22,37,25,37);
L(24,38,25,38);
L(22,4,25,4);
L(22,5,25,5);
L(24,6,24,38);
L(22,6,25,6);
L(23,39,25,39);
L(23,31,25,31);
L(23,23,25,23);
L(22,12,25,12);
L(22,13,25,13);
L(24,14,25,14);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,exit,1,1,40,2,);
B(B_VARIN,,TRUE,10,3,12,5,);
B(B_RETURN,,,12,3,14,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL := init: ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,init,1,1,40,2,);
B(B_VARIN,,TRUE,10,3,12,5,);
B(B_VAROUT,,LXinitOk,12,3,14,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,set module type LIDEC 1 or compatibel,1,1,40,2,);
B(B_VARIN,,TRUE,10,3,12,5,);
B(B_VAROUT,,MXlidec1,12,3,14,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction values for maximum engine power regulator,1,1,27,2,);
B(B_FB,CorrValue_Real,CorrValue_Real1,11,4,23,10,);
B(B_VARIN,,0.12,9,5,11,7,);
B(B_VARIN,,0.0,9,6,11,8,);
B(B_VARIN,,1.0,9,7,11,9,);
B(B_VARIN,,CDmaxPower_p_fac,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_FB,CorrValue_Real,CorrValue_Real2,11,2,23,8,);
B(B_VARIN,,0.04,9,3,11,5,);
B(B_VARIN,,0.0,9,4,11,6,);
B(B_VARIN,,1.0,9,5,11,7,);
B(B_VARIN,,CDmaxPow_i_facUp,9,6,11,8,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_FB,CorrValue_Real,CorrValue_Real3,11,2,23,8,);
B(B_VARIN,,0.02,9,3,11,5,);
B(B_VARIN,,0.0,9,4,11,6,);
B(B_VARIN,,1.0,9,5,11,7,);
B(B_VARIN,,CDmaxPow_i_facDn,9,6,11,8,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_FB,CorrValue_Real,CorrValue_Real4,11,2,23,8,);
B(B_VARIN,,0.0,9,4,11,6,);
B(B_VARIN,,1.0,9,5,11,7,);
B(B_VARIN,,0.0,9,3,11,5,);
B(B_VARIN,,CDmaxPower_d_fac,9,6,11,8,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_COMMENT,,correction value engine minimum idle speed [U/min],1,1,27,2,);
B(B_FB,CorrValue_Real,CorrValue_Real5,11,3,23,9,);
B(B_VARIN,,900.0,9,4,11,6,);
B(B_VARIN,,700.0,9,5,11,7,);
B(B_VARIN,,1300.0,9,6,11,8,);
B(B_VARIN,,CDengMinIdleSpd,9,7,11,9,);
        END_NETWORK_BODY
    END_NET_WORK
END_BODY
END_PROGRAM

PROGRAM GPblackboxV020
	VAR_EXTERNAL 
		IWleftJoystAnal1: INT:=0;
			(*left joystick analog signal 1*)
		IWleftJoystAnal2: INT:=0;
			(*left joystick analog signal 2*)
		IWrightJoystAna1: INT:=0;
			(*right joystick analog signal 1*)
		IWrightJoystAna2: INT:=0;
			(*right joystick analog signal 2*)
		IWloadSenLeBoom: UINT:=0;
			(*lml force transmitter main boom left*)
		IWloadSenRiBoom: UINT:=0;
			(*lml force transmitter main boom right*)
		IWangSenLowBoom: UINT:=0;
			(*lml angle transmitter main boom lower sensor*)
		IWangSenTopBoom: UINT:=0;
			(*lml angle transmitter main boom upper sensor*)
		IWloadSenLeLuJib: UINT:=0;
			(*lml force transmitter luffing jib left*)
		IWloadSenRiLuJib: UINT:=0;
			(*lml force transmitter luffing jib right*)
		IWangSenLoLufJib: UINT:=0;
			(*lml angle transmitter luffing jib lower sensor*)
		IWangSenToLufJib: UINT:=0;
			(*lml angle transmitter luffing jib upper sensor*)
		IWljPres1FalBack: UINT:=0;
			(*pressure sensor 1 luffing jib fall back support*)
		IWljPres2FalBack: UINT:=0;
			(*pressure sensor 2 luffing jib fall back support / leader incl. y-axis*)
		IWderrLoadSenLe: UINT:=0;
			(*lml force transmitter derrick - main boom left*)
		IWderrLoadSenRi: UINT:=0;
			(*lml force transmitter derrick - main boom right*)
		IWderrBallSenLe: UINT:=0;
			(*lml force transmitter derrick - couterweight left*)
		IWderrBallSenRi: UINT:=0;
			(*lml force transmitter derrick - couterweight right*)
		IWforceTranLeft1: UINT:=0;
			(*force transmitter left 1*)
		IWforceTranLeft2: UINT:=0;
			(*force transmitter left 2*)
		IWforceTranRigh1: UINT:=0;
			(*force transmitter right 1*)
		IWforceTranRigh2: UINT:=0;
			(*force transmitter right 2*)
		IWadHg1BrakePres: UINT:=0;
			(*additional device lowering control HG 1 brake pressure*)
		IWadHg2BrakePres: UINT:=0;
			(*additional device lowering control HG 2 brake pressure*)
		QXhg1BrakeNormal: BOOL:=FALSE;
			(*hoisting gear 1 brake*)
		QXhg1BrakeFastSp: BOOL:=FALSE;
			(*HG 1 brake fast speed operation*)
		QXhg2BrakeNormal: BOOL:=FALSE;
			(*hoisting gear 2 brake*)
		QXhg2BrakeFastSp: BOOL:=FALSE;
			(*HG 2 brake fast speed operation*)
		QXlgBrake: BOOL:=FALSE;
			(*luffing gear 1 brake*)
		QXlg2Brake: BOOL:=FALSE;
			(*luffing gear 2 brake*)
		QXderrickWiBrake: BOOL:=FALSE;
			(*derrick winch brake*)
		QXsgBrake: BOOL:=FALSE;
			(*slewing gear brake*)
		QXhg1Clutch: BOOL:=FALSE;
			(*hoisting gear 1 clutch*)
		QXhg2Clutch: BOOL:=FALSE;
			(*hoisting gear 2 clutch*)
		QXhg1_2connectio: BOOL:=FALSE;
			(*connection hg 1 & 2*)
		QXhgWinSynConVal: BOOL:=FALSE;
			(*do not set anywhere*)
		QXstabWinFreef: BOOL:=FALSE;
			(*stabilization winch freefall*)
		QXaddPersWinBrak: BOOL:=FALSE;
			(*aux. winch brake / personal winch brake*)
		QXadPasWinchLift: BOOL:=FALSE;
			(*cable drum lifting/passenger winch lifting*)
		QXadPasWinchLow: BOOL:=FALSE;
			(*cable drum lowering/passenger winch lowering*)
		QXgeneratorOn: BOOL:=FALSE;
			(*add. generator on *)
		QXadMagnetOn: BOOL:=FALSE;
			(*magnetise (on/off)/dd trimot/brake left hose winch/grab adj. S1 front/back*)
		QXadMagnetOff: BOOL:=FALSE;
			(*magnetise off/dd gear box/brake right hose winch/grab adj. S2 front/back*)
		MXstopAllFunctio: BOOL:=FALSE;
			(*stop all excavator functions*)
		MXlmlCalculating: BOOL:=FALSE;
			(*lml is calculating with new adjustments*)
		MXlmlProgError: BOOL:=FALSE;
			(*lml program error*)
		MXminEngineSpeed: BOOL:=FALSE;
			(*minimum engine speed reached*)
		MXlmlDeadlockAct: BOOL:=FALSE;
			(*lml 2010 rigging is activated*)
		MXlmlBridged: BOOL:=FALSE;
			(*X23 lml bridged*)
		MXlmlStarted: BOOL:=FALSE;
			(*lml started (asynchron task was calculated one time)*)
		MXbbActivatByLml: BOOL:=FALSE;
			(*blackbox activated by lml (changes 2010)*)
		MXbbActiveSymbol: BOOL:=FALSE;
			(*blackbox show active recording symbol*)
		MXbbInitSymbol: BOOL:=FALSE;
			(*blackbox show initializing symbol*)
		MXbbErrorSymbol: BOOL:=FALSE;
			(*blackbox show error symbol*)
		MXswitTravelGear: BOOL:=FALSE;
			(*travelling gear is activated*)
		MDlmlMode: REAL:=0.0;
			(*lml mode*)
		MDlmlUtilization: REAL:=0.0;
			(*lml utilization in [%]*)
		MDlmlUtilBackwar: REAL:=0.0;
			(*lml utilization backwards (derrick)*)
		MDlmlLoadBoom: REAL:=0.0;
			(*lml load main boom in [t]*)
		MDlmlMaxLoad1: REAL:=0.0;
			(*lml maximum load main boom in [t]*)
		MDlmlRadiusMBoom: REAL:=0.0;
			(*lml load radius main boom in [m]*)
		MDsgSysPressLe: REAL:=0.0;
			(*slewing gear system pressure left*)
		MDsgSysPressRi: REAL:=0.0;
			(*slewing gear system pressure right*)
		MRccOperatMode: REAL:=0.0;
			(*CC operational mode*)
		MDhg1RopeLenWin: REAL:=0.0;
			(*rope lenght hg 1 on the winch in [m]*)
		MDhg2RopeLenWin: REAL:=0.0;
			(*rope lenght hg 2 on the winch in [m]*)
		MDwindSpeed: REAL:=0.0;
			(*actual wind speed*)
		MDlmlAngleBoom: REAL:=0.0;
			(*lml angle main boom in [°]*)
		MDpresenEngSpeed: REAL:=0.0;
			(*present engine speed in [rpm]*)
		MDengTorqueAct: REAL:=0.0;
			(*engine actual torque [Nm]*)
		MDhg1PumpSignal: REAL:=0.0;
			(*HG 1 analog signal pump in [%]*)
		MDhg2PumpSignal: REAL:=0.0;
			(*HG 2 analog signal pump in [%]*)
		MDlgPumpSignal: REAL:=0.0;
			(*luffing gear analog signal pump in [%]*)
		MDsgPumpSignal: REAL:=0.0;
			(*SG analog signal pump in [%]*)
		MDsgAngle: REAL:=0.0;
			(*sg angle in degree rounded*)
		MDsuperstAngSenX: REAL:=0.0;
			(*superstructure angle sensor X [°]*)
		MDsuperstAngSenY: REAL:=0.0;
			(*superstructure angle sensor Y [°]*)
		MDlmlLoadLuffJib: REAL:=0.0;
			(*lml load luffing jib in [t]*)
		MDlmlMaxLoad2: REAL:=0.0;
			(*lml maximum load luffing jib boom in [t]*)
		MDlmlRadiusLJib: REAL:=0.0;
			(*lml load radius luffing jib boom in [m]*)
		MDlmlAngleLufJib: REAL:=0.0;
			(*lml angle luffing jib in [°]*)
		MDlg2PumpSignal: REAL:=0.0;
			(*LG 2 analog signal pump in [%]*)
		MDdeltaTime: REAL:=0.001;
			(*time to the last scan in sec. [s]*)
		MDlmlCounterWeig: REAL:=0.0;
			(*lml counter weight in tons*)
		MDccDistanceAbso: REAL:=0.0;
			(*CC aktual radius [m] (distance absolut)*)
		MDwheelKitAngle1: REAL:=0.0;
		MDwheelKitAngle2: REAL:=0.0;
		MDwheelKitAngle3: REAL:=0.0;
		MDwheelKitAngle4: REAL:=0.0;
		MDderrPumpSignal: REAL:=0.0;
			(*derrick winch analog signal pump in [%]*)
		MDfloaCouWeiSign: REAL:=0.0;
			(*floating counterweight analog signal*)
		MDhg1SystemPress: REAL:=0.0;
			(*HG 1 system pressure in bar*)
		MDhg2SystemPress: REAL:=0.0;
			(*HG 2 system pressure in bar*)
		MDleadAngleX: REAL:=0.0;
			(*hanging leader angle x*)
		MDleadAngleY: REAL:=0.0;
			(*hanging leader angle y*)
		MDz6PumpSignal: REAL:=0.0;
			(*Z6 analog pump signal*)
		MDz4PumpSignal: REAL:=0.0;
			(*Z4 analog pump signal*)
		MDz2PumpSignal: REAL:=0.0;
			(*Z2 analog pump signal*)
		MDz3PumpSignal: REAL:=0.0;
			(*Z3 analog pump signal*)
		MDvibClampPress: REAL:=0.0;
			(*ad vibrator clamping pressure*)
		MDstabWPresSigOC: REAL:=0.0;
			(*stabilization winch pressure signal (open circuit) *)
		MDstabWPresSigCC: REAL:=0.0;
			(*stabilization winch pressure signal (closed circuit) *)
		MXstabWinchOC: BOOL:=FALSE;
			(*stab winch with open circuit*)
	END_VAR
	VAR_EXTERNAL CONSTANT
		MSG_INFO: UINT:=0;
			(* message priority: "info" *)
		MSG_WARNING: UINT:=0;
			(* message priority: "warning" *)
		REC_DATA_MAX: UINT:=0;
			(* data recorder: calculate maximum value *)
	END_VAR
	VAR_EXTERNAL RETAIN
		MXleaderOper: BOOL:=FALSE;
			(*leader operation active*)
	END_VAR
	VAR_EXTERNAL CONSTANT RETAIN
		CXsuperstAngSens: BOOL:=FALSE;
			(*superstructure angle indication*)
		CXanaStabWinch: BOOL:=FALSE;
			(*additional stabilzation winch (analog hoisting, analog const tension, freefall)*)
		CXadPassWinch: BOOL:=FALSE;
			(*additional: preselection passenger  winch *)
		CXadVibOperat: BOOL:=FALSE;
			(*additional device vibrator operation*)
		CXadMagneticUnit: BOOL:=FALSE;
			(*add device magnetic unit*)
	END_VAR
	VAR 
		LXinit1Ok: BOOL:=FALSE;
		LXinit2Ok: BOOL:=FALSE;
		LXbbStopNewStart: BOOL:=FALSE;
		LXinitializinBB: BOOL:=FALSE;
		LXinitializinRec: BOOL:=FALSE;
		LXbbActive: BOOL:=FALSE;
		LXbbReady1: BOOL:=FALSE;
		LXbbReady2: BOOL:=FALSE;
		LXbbWasReady: BOOL:=FALSE;
		LXtrigger: BOOL:=FALSE;
		LXfired: BOOL:=FALSE;
		LXbbError: BOOL:=FALSE;
		LXerrorLastTrig: BOOL:=FALSE;
		LXsetMaxTrigger: BOOL:=FALSE;
		LXtrigger1Active: BOOL:=FALSE;
		LXtrigger2Active: BOOL:=FALSE;
		LXtrigger3Active: BOOL:=FALSE;
		LXtrigger4Active: BOOL:=FALSE;
		LWtrigger: UINT:=0;
		LWtriggerID1: UINT:=0;
		LWtriggerID2: UINT:=0;
		LWtriggerID3: UINT:=0;
		LWtriggerID4: UINT:=0;
		LDbbError: UDINT:=0;
		LDbbConfError1: UDINT:=0;
		LDbbConfError2: UDINT:=0;
		LDbbMemSize: DINT:=0;
		LDbbMemFree: DINT:=0;
		LDleftJoystAnal1: REAL:=0.0;
		LDleftJoystAnal2: REAL:=0.0;
		LDrightJoystAna1: REAL:=0.0;
		LDrightJoystAna2: REAL:=0.0;
		LDstabWPresSig: REAL:=0.0;
		LTsecSince1970: DT:=DT#1970-01-01-00:00:00;
		R_TRIG1: R_TRIG;
		R_TRIG2: R_TRIG;
		R_TRIG3: R_TRIG;
		R_TRIG4: R_TRIG;
		F_TRIG1: F_TRIG;
		F_TRIG2: F_TRIG;
		F_TRIG3: F_TRIG;
		F_TRIG4: F_TRIG;
		F_TRIG5: F_TRIG;
		TOF1: TOF;
		TOF2: TOF;
		TON1: TON;
		TON2: TON;
		TON3: TON;
		TP1: TP;
		RS1: RS;
		SR1: SR;
		SR2: SR;
		RecOpt1: RecOpt;
		RecStateId1: RecStateId;
		RecStartStop1: RecStartStop;
		RecFire1: RecFire;
		RecFired1: RecFired;
		RecRot1: RecRotation;
		RecDefTrigg1: RecDefTrigger;
		RecDefTrigg2: RecDefTrigger;
		RecDefTrigg3: RecDefTrigger;
		RecDefTrigg4: RecDefTrigger;
		Message1: MsgUDintUDint;
		Message2: MsgUDintUDint;
		Message3: MsgUDintUDint;
		Message4: MsgUDintUDint;
		Message5: MsgUDintUDint;
		Message6: MsgUDintUDint;
		Message7: MsgUDintUDint;
		Data_T_1: RecData_TOD;
		Data_B_1: RecData_Bool;
		Data_B_2: RecData_Bool;
		Data_B_3: RecData_Bool;
		Data_B_4: RecData_Bool;
		Data_B_5: RecData_Bool;
		Data_B_6: RecData_Bool;
		Data_B_7: RecData_Bool;
		Data_B_8: RecData_Bool;
		Data_B_9: RecData_Bool;
		Data_B_10: RecData_Bool;
		Data_B_11: RecData_Bool;
		Data_B_12: RecData_Bool;
		Data_B_13: RecData_Bool;
		Data_B_14: RecData_Bool;
		Data_B_15: RecData_Bool;
		Data_B_16: RecData_Bool;
		Data_B_17: RecData_Bool;
		Data_B_18: RecData_Bool;
		Data_B_19: RecData_Bool;
		Data_B_20: RecData_Bool;
		Data_R_1: RecData_Real;
		Data_R_2: RecData_Real;
		Data_R_3: RecData_Real;
		Data_R_4: RecData_Real;
		Data_R_5: RecData_Real;
		Data_R_6: RecData_Real;
		Data_R_7: RecData_Real;
		Data_R_8: RecData_Real;
		Data_R_9: RecData_Real;
		Data_R_10: RecData_Real;
		Data_R_11: RecData_Real;
		Data_R_12: RecData_Real;
		Data_R_13: RecData_Real;
		Data_R_14: RecData_Real;
		Data_R_15: RecData_Real;
		Data_R_16: RecData_Real;
		Data_R_17: RecData_Real;
		Data_R_18: RecData_Real;
		Data_R_19: RecData_Real;
		Data_R_20: RecData_Real;
		Data_R_21: RecData_Real;
		Data_R_22: RecData_Real;
		Data_R_23: RecData_Real;
		Data_R_24: RecData_Real;
		Data_R_25: RecData_Real;
		Data_R_26: RecData_Real;
		Data_R_27: RecData_Real;
		Data_R_28: RecData_Real;
		Data_R_29: RecData_Real;
		Data_R_30: RecData_Real;
		Data_R_31: RecData_Real;
		Data_R_32: RecData_Real;
		Data_R_33: RecData_Real;
		Data_R_34: RecData_Real;
		Data_R_35: RecData_Real;
		Data_R_36: RecData_Real;
		Data_R_37: RecData_Real;
		Data_R_38: RecData_Real;
		Data_R_39: RecData_Real;
		Data_R_40: RecData_Real;
		Data_R_41: RecData_Real;
		Data_R_42: RecData_Real;
		Data_R_43: RecData_Real;
		Data_R_44: RecData_Real;
		Data_R_45: RecData_Real;
		Data_R_46: RecData_Real;
		Data_R_47: RecData_Real;
		Data_R_48: RecData_Real;
		Data_R_C_1: RecData_Real_Com;
		Data_R_C_2: RecData_Real_Com;
		Data_R_C_3: RecData_Real_Com;
		Data_UI_1: RecData_UInt;
		Data_UI_2: RecData_UInt;
		Data_UI_3: RecData_UInt;
		Data_UI_4: RecData_UInt;
		Data_UI_5: RecData_UInt;
		Data_UI_6: RecData_UInt;
		Data_UI_7: RecData_UInt;
		Data_UI_8: RecData_UInt;
		Data_UI_9: RecData_UInt;
		Data_UI_10: RecData_UInt;
		Data_UI_11: RecData_UInt;
		Data_UI_12: RecData_UInt;
		Data_UI_13: RecData_UInt;
		Data_UI_14: RecData_UInt;
		Data_UI_15: RecData_UInt;
		Data_UI_16: RecData_UInt;
		Data_UI_17: RecData_UInt;
		Data_UI_18: RecData_UInt;
		Data_UI_19: RecData_UInt;
		Data_UI_20: RecData_UInt;
		Data_UI_21: RecData_UInt;
	END_VAR
'FBD'
BODY
    WORKSPACE
        NETWORK_LIST_TYPE := NWTYPEFBD ;
        ACTIVE_NETWORK := 0 ;
    END_WORKSPACE
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,seconds since 1970,1,1,10,2,);
B(B_F,RealTime,,12,2,20,5,);
B(B_VAROUT,,LTsecSince1970,20,3,22,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_COMMENT,,system is initializing,1,1,9,2,);
B(B_VARIN,,LXbbReady1,11,3,13,5,);
B(B_F,@OR-2,,14,2,19,6,NN);
B(B_VARIN,,LXbbReady2,10,4,12,6,);
B(B_FB,SR,SR1,19,6,24,10,);
B(B_VARIN,,FALSE,17,10,19,12,);
B(B_F,@AND-2,,14,6,19,10,);
B(B_VAROUT,,LXbbWasReady,24,7,26,9,);
B(B_VAROUT,,LXinitializinBB,19,3,21,5,);
L(13,4,14,4);
L(12,5,14,5);
L(13,4,13,8);
L(12,5,12,9);
L(19,9,19,11);
L(13,8,14,8);
L(12,9,14,9);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_F,@AND-3,,12,1,17,6,00N);
B(B_VARIN,,LXbbActive,10,4,12,6,);
B(B_VARIN,,LXbbReady1,10,2,12,4,);
B(B_VARIN,,LXbbReady2,10,3,12,5,);
B(B_VAROUT,,LXinitializinRec,17,2,19,4,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,init first time,1,1,9,2,);
B(B_VARIN,,LXinit1Ok,10,3,12,5,);
B(B_F,not,,12,2,17,5,);
B(B_JUMP,,init1,17,3,19,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,init trigger,1,1,9,2,);
B(B_VARIN,,LXinit2Ok,10,3,12,5,);
B(B_F,not,,12,2,17,5,);
B(B_JUMP,,init2,17,3,19,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_COMMENT,,exit,1,1,9,2,);
B(B_FB,TON,TON1,12,5,17,9,);
B(B_VARIN,,TRUE,10,6,12,8,);
B(B_VARIN,,T#5s,10,7,12,9,);
B(B_RETURN,,,22,2,24,4,);
B(B_VARIN,,MXlmlStarted,15,2,17,4,);
B(B_F,@AND-2,,17,1,22,5,NN);
B(B_COMMENT,,Nach einem Systemstart warten bis die LMBø^den richtigen Mode liefert oder nach 5 Sekunde mitø^dem Default-Trigger starten,21,5,41,8,);
L(17,4,17,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 15 ;
        NETWORK_BODY
B(B_COMMENT,,restart blackbox by new lml Mode,1,1,21,2,);
B(B_F,@OR-2,,12,9,17,13,);
B(B_VARIN,,MXlmlProgError,10,10,12,12,);
B(B_VARIN,,MXlmlBridged,10,11,12,13,);
B(B_FB,TOF,TOF1,12,5,17,9,);
B(B_VARIN,,MXlmlCalculating,10,6,12,8,);
B(B_VARIN,,T#1s,10,7,12,9,);
B(B_F,@AND-2,,19,5,24,9,0N);
B(B_F,@OR-3,,31,4,36,9,);
B(B_VAROUT,,LXbbStopNewStart,36,5,38,7,);
B(B_FB,R_TRIG,R_TRIG1,24,2,31,5,);
B(B_VARIN,,TRUE,22,3,24,5,);
B(B_F,@AND-2,,19,9,24,13,);
B(B_COMMENT,,während eine neue LMB-Konfiguration berechnet wird~ wird die Aufzeichnung gestoppt~ø^nach der Neukonfiguration wird ein neues File mit dem neuen TriggerID gestartet. (Rechenleistg),47,4,81,6,);
B(B_COMMENT,,(während einem Error oder Bridged wird aufgezeichnet~ø^denn da ist das Problem nicht bekannt~ also werden Daten gesammelt.),47,6,81,8,);
B(B_COMMENT,,Bei einem Error oder bei bridged während MXcalculating wird mit dem maximalenø^Trigger 4 aufgezeichnet.,47,9,81,11,);
B(B_FB,R_TRIG,R_TRIG2,24,9,31,12,);
B(B_VAROUT,,LXsetMaxTrigger,24,12,26,14,);
L(17,7,19,7);
L(19,8,19,11);
L(24,7,31,7);
L(31,4,31,6);
L(18,7,18,12);
L(18,12,19,12);
L(17,11,19,11);
L(31,8,31,11);
L(24,11,24,13);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 14 ;
        NETWORK_BODY
B(B_COMMENT,,record start and stop,1,1,12,2,);
B(B_FB,RecStartStop,RecStartStop1,12,3,23,8,0N);
B(B_VARIN,,LWtrigger,10,4,12,6,);
B(B_VARIN,,LXbbStopNewStart,10,6,12,8,);
B(B_VAROUT,,LXbbActive,23,4,25,6,);
B(B_COMMENT,,Active: Aufzeichnung läuft (Trgiger kann abgesetzt werden)ø^Ready: Alles o.k.  Die Aufzeichnung kann gestartet werden. (Active Ausgang ist richtig),33,6,67,8,);
B(B_VAROUT,,LXbbReady1,23,5,25,7,);
B(B_COMMENT,,Nachdem gestartet wurde~ wird der Ausalterungsprozess angestossen.ø^Erst wenn ausgealtert wurde kommt das Active. (Bei jeder LMB-Berechnung wird alsoø^auch ausgealtert),33,9,67,12,);
B(B_COMMENT,,Dieses Netzwerk muß vor der Triggerauswahl stehen~ø^damit bei StopNewStart zuerst der alte Trigger gestoppt wird~ø^bevor der neue Trigger gestartet wird.,5,9,28,12,);
L(12,6,12,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 52 ;
        NETWORK_BODY
B(B_COMMENT,,set trigger indetity,1,1,21,2,);
B(B_VARIN,,LXbbStopNewStart,25,3,27,5,);
B(B_F,EQ_R,,14,22,19,26,);
B(B_F,EQ_R,,14,26,19,30,);
B(B_F,@OR-2,,21,25,26,29,);
B(B_F,EQ_R,,14,30,19,34,);
B(B_F,EQ_R,,14,34,19,38,);
B(B_F,EQ_R,,14,38,19,42,);
B(B_VARIN,,4.0,10,36,12,38,);
B(B_F,@OR-3,,21,33,26,38,);
B(B_F,EQ_R,,14,46,19,50,);
B(B_F,@OR-2,,21,45,26,49,);
B(B_F,EQ_R,,14,42,19,46,);
B(B_F,@AND-2,,28,44,33,48,);
B(B_F,sel,,59,44,64,49,);
B(B_F,sel,,72,43,77,48,);
B(B_VAROUT,,LWtrigger,77,44,79,46,);
B(B_F,sel,,46,45,51,50,);
B(B_F,sel,,33,46,38,51,);
B(B_VARIN,,LWtrigger,31,48,33,50,);
B(B_VARIN,,LWtriggerID2,44,48,46,50,);
B(B_VARIN,,LWtriggerID3,57,47,59,49,);
B(B_VARIN,,LWtriggerID4,70,46,72,48,);
B(B_VARIN,,LWtriggerID1,31,49,33,51,);
B(B_F,@AND-2,,28,32,33,36,);
B(B_F,@AND-2,,28,24,33,28,);
B(B_VARIN,,LXsetMaxTrigger,19,4,21,6,);
B(B_F,@AND-2,,28,7,33,11,);
B(B_F,@OR-5,,21,8,26,15,);
B(B_VARIN,,2.0,10,44,12,46,);
B(B_VARIN,,1.0,10,48,12,50,);
B(B_VARIN,,3.0,10,40,12,42,);
B(B_VARIN,,5.0,10,32,12,34,);
B(B_VARIN,,6.0,10,28,12,30,);
B(B_VARIN,,7.0,10,24,12,26,);
B(B_VARIN,,10.0,10,12,12,14,);
B(B_VARIN,,0.0,10,8,12,10,);
B(B_F,@LE-2,,14,6,19,10,);
B(B_F,@GE-2,,14,10,19,14,);
B(B_F,EQ_R,,14,14,19,18,);
B(B_F,EQ_R,,14,18,19,22,);
B(B_VARIN,,9.0,10,16,12,18,);
B(B_VARIN,,8.0,10,20,12,22,);
B(B_VARIN,,MDlmlMode,11,7,13,9,);
L(27,4,27,46);
L(72,9,72,45);
L(59,26,59,46);
L(46,34,46,47);
L(20,8,20,11);
L(19,8,20,8);
L(19,12,21,12);
L(20,11,21,11);
L(20,13,21,13);
L(20,13,20,16);
L(19,20,21,20);
L(21,14,21,20);
L(13,24,14,24);
L(12,25,14,25);
L(12,29,14,29);
L(13,28,14,28);
L(20,27,21,27);
L(20,24,20,27);
L(19,24,20,24);
L(19,28,21,28);
L(13,32,14,32);
L(12,33,14,33);
L(12,37,14,37);
L(12,41,14,41);
L(13,40,14,40);
L(13,36,14,36);
L(19,32,20,32);
L(19,36,21,36);
L(20,37,21,37);
L(20,37,20,40);
L(19,40,20,40);
L(20,32,20,35);
L(20,35,21,35);
L(12,45,14,45);
L(12,49,14,49);
L(13,48,14,48);
L(20,47,21,47);
L(20,44,20,47);
L(19,48,21,48);
L(13,44,14,44);
L(19,44,20,44);
L(64,46,72,46);
L(51,47,59,47);
L(33,46,33,48);
L(38,48,46,48);
L(26,47,28,47);
L(27,46,28,46);
L(26,35,28,35);
L(27,34,28,34);
L(33,34,46,34);
L(26,27,28,27);
L(27,26,28,26);
L(33,26,59,26);
L(13,8,13,48);
L(27,9,28,9);
L(33,9,72,9);
L(26,10,28,10);
L(21,5,21,10);
L(19,16,20,16);
L(13,8,14,8);
L(12,9,14,9);
L(12,13,14,13);
L(13,12,14,12);
L(13,16,14,16);
L(12,17,14,17);
L(12,21,14,21);
L(13,20,14,20);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_COMMENT,,record state,1,1,12,2,);
B(B_VAROUT,,LDbbMemSize,23,5,25,7,);
B(B_VAROUT,,LDbbMemFree,23,6,25,8,);
B(B_FB,RecStateId,RecStateId1,12,3,23,9,);
B(B_VARIN,,LWtrigger,10,4,12,6,);
B(B_VAROUT,,LDbbError,23,7,25,9,);
B(B_VAROUT,,LXbbReady2,23,4,25,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 22 ;
        NETWORK_BODY
B(B_F,@OR-2,,35,8,40,12,);
B(B_FB,F_TRIG,F_TRIG5,45,8,52,11,);
B(B_FB,TP,TP1,40,8,45,12,);
B(B_VARIN,,LXtrigger,33,10,35,12,);
B(B_F,real_to_time,,29,12,40,15,);
B(B_F,@SUB,,24,12,29,16,);
B(B_F,sel,,19,12,24,17,);
B(B_VARIN,,4999.0,17,14,19,16,);
B(B_F,@DIV,,19,17,24,21,);
B(B_VARIN,,MDdeltaTime,17,18,19,20,);
B(B_VARIN,,1000.0,17,19,19,21,);
B(B_COMMENT,,Immer im letzten Durchlauf der angegebenen Zeit (1 Sekunde oder 5 Sekunden)ø^wird der Trigger ausgelöst. (999 ms minus 1 Durchlauf (-> der Trigger selbst)),26,16,55,18,);
B(B_F,@OR-2,,52,7,57,11,);
B(B_COMMENT,,Dieses Netzwerk (Trigger setzen) muß vor der Fehlerabfrageø^des Firde sein. ,57,11,80,13,);
B(B_COMMENT,,In dem Durchlauf~ in dem die SPS den Triggerø^setzt~ muß das Fired false sein. (D.h. die letzte Aufzeichnungø^wurde fertig~ geschrieben~ erledigt),57,14,80,17,);
B(B_F,@AND-2,,57,6,62,10,);
B(B_VAROUT,,LXtrigger,62,7,64,9,);
B(B_FB,R_TRIG,R_TRIG3,28,5,35,8,);
B(B_COMMENT,,set the trigger for logging,1,1,22,2,);
B(B_VARIN,,LXbbActive,26,3,28,5,);
B(B_F,to_real,,12,15,19,18,);
B(B_VARIN,,999.0,10,16,12,18,);
B(B_COMMENT,,5 sec,4,15,8,16,);
B(B_COMMENT,,1 sec,4,16,8,17,);
B(B_FB,TOF,TOF2,13,10,18,14,);
B(B_VARIN,,MXminEngineSpeed,11,11,13,13,);
B(B_VARIN,,T#60s,11,12,13,14,);
L(40,11,40,14);
L(24,15,24,19);
L(52,7,52,9);
L(57,4,57,8);
L(35,7,52,7);
L(35,7,35,10);
L(28,4,28,7);
L(28,4,57,4);
L(19,16,19,17);
L(18,12,19,12);
L(19,12,19,14);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 68 ;
        NETWORK_BODY
B(B_VARIN,,0,21,12,23,14,);
B(B_VARIN,,LDbbConfError1,21,11,23,13,);
B(B_VAROUT,,LXbbError,40,7,42,9,);
B(B_COMMENT,,RecFired1 Error:ø^Wenn im Augenblick in dem der Trigger gesetzt wird~ das RecFired TRUE ist~ø^dann bedeutet das~ daß der letzte Trigger noch nicht fertig ist:ø^Trigger konnte nicht ausgeführt werden~ Datenlogger derzeit nicht funktionsfähig,1,0,0,0,0,0,);
B(B_F,@NE,,23,10,28,14,);
B(B_VARIN,,0,21,16,23,18,);
B(B_VARIN,,LDbbConfError2,21,15,23,17,);
B(B_F,@NE,,23,14,28,18,);
B(B_FB,MsgUDintUDint,Message1,44,16,54,23,);
B(B_VARIN,,604,42,17,44,19,);
B(B_VARIN,,MSG_WARNING,42,19,44,21,);
B(B_FB,MsgUDintUDint,Message2,44,28,54,35,);
B(B_FB,MsgUDintUDint,Message5,44,52,54,59,);
B(B_FB,MsgUDintUDint,Message6,44,60,54,67,);
B(B_VARIN,,605,42,29,44,31,);
B(B_VARIN,,606,42,53,44,55,);
B(B_VARIN,,607,42,61,44,63,);
B(B_VARIN,,MSG_WARNING,42,31,44,33,);
B(B_VARIN,,MSG_WARNING,42,55,44,57,);
B(B_VARIN,,MSG_INFO,42,63,44,65,);
B(B_VARIN,,LDbbConfError1,42,32,44,34,);
B(B_VARIN,,LDbbError,42,56,44,58,);
B(B_FB,MsgUDintUDint,Message3,44,36,54,43,);
B(B_VARIN,,605,42,37,44,39,);
B(B_VARIN,,MSG_WARNING,42,39,44,41,);
B(B_VARIN,,LDbbConfError2,42,40,44,42,);
B(B_VARIN,,LWtrigger,9,33,11,35,);
B(B_FB,RecFired,RecFired1,11,32,22,35,);
B(B_VARIN,,LXtrigger,21,28,23,30,);
B(B_VAROUT,,LXfired,22,33,24,35,);
B(B_F,@AND-3,,23,26,28,31,);
B(B_VARIN,,LXerrorLastTrig,21,27,23,29,);
B(B_COMMENT,,RecFired muß beim Auslösenø^des Triggers FALSE sein.ø^,11,36,23,38,);
B(B_FB,TON,TON3,16,7,21,11,);
B(B_VARIN,,LXinitializinRec,14,8,16,10,);
B(B_VARIN,,T#45s,14,9,16,11,);
B(B_FB,TON,TON2,16,2,21,6,);
B(B_VARIN,,LXinitializinBB,14,3,16,5,);
B(B_VARIN,,T#10s,14,4,16,6,);
B(B_COMMENT,,error blackbox,1,1,14,2,);
B(B_FB,MsgUDintUDint,Message4,44,44,54,51,);
B(B_VARIN,,MSG_WARNING,42,47,44,49,);
B(B_VARIN,,605,42,45,44,47,);
B(B_F,@OR-6,,35,6,40,14,);
B(B_VARIN,,0,21,24,23,26,);
B(B_F,@NE,,23,22,28,26,);
B(B_VARIN,,LDbbError,21,23,23,25,);
B(B_VARIN,,LXbbWasReady,21,19,23,21,);
B(B_F,@AND-2,,23,18,28,22,);
B(B_VARIN,,LXinitializinBB,21,20,23,22,);
B(B_F,@OR-2,,23,6,28,10,);
L(30,9,35,9);
L(29,8,29,19);
L(29,19,44,19);
L(34,13,34,63);
L(30,9,30,31);
L(33,12,33,55);
L(28,12,30,12);
L(31,10,35,10);
L(31,10,31,39);
L(30,31,44,31);
L(31,39,44,39);
L(33,55,44,55);
L(34,63,44,63);
L(28,16,31,16);
L(22,30,22,34);
L(22,30,23,30);
L(28,28,34,28);
L(22,4,22,8);
L(21,4,22,4);
L(21,9,23,9);
L(34,13,35,13);
L(33,12,35,12);
L(32,11,35,11);
L(32,11,32,47);
L(32,47,44,47);
L(28,24,33,24);
L(28,20,32,20);
L(22,8,23,8);
L(28,8,35,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_F,@AND-2,,14,1,19,5,);
B(B_F,@AND-2,,14,5,19,9,0N);
B(B_VARIN,,LXfired,10,3,12,5,);
B(B_VARIN,,LXtrigger,11,2,13,4,);
B(B_FB,RS,RS1,19,1,24,5,);
B(B_VAROUT,,LXerrorLastTrig,24,2,26,4,);
B(B_COMMENT,,Wenn der Trigger nur einemal nicht geschrieben werden konnte~ø^wird der Fehler unterdrückt,22,6,46,8,);
L(13,3,14,3);
L(12,4,14,4);
L(13,3,13,7);
L(13,7,14,7);
L(12,8,14,8);
L(12,4,12,8);
L(19,4,19,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_COMMENT,,fire the trigger,1,1,22,2,);
B(B_VARIN,,LWtrigger,10,5,12,7,);
B(B_FB,RecFire,RecFire1,12,4,18,8,);
B(B_VARIN,,LXtrigger,10,6,12,8,);
B(B_COMMENT,,Dieser Block muß nach der Abfrage RecFired gesetzt werden~ damit die Kontrolle desø^RecFired funktioniert. (Wenn der Trigger gesetzt wurde soll RecFired false sein.),20,4,53,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 18 ;
        NETWORK_BODY
B(B_COMMENT,,show symbols on screen,1,1,22,2,);
B(B_F,@AND-3,,26,2,31,7,0N);
B(B_VAROUT,,MXbbActiveSymbol,31,3,33,5,);
B(B_F,@AND-2,,26,13,31,17,);
B(B_VARIN,,MXlmlBridged,10,5,12,7,);
B(B_VARIN,,MXlmlDeadlockAct,10,6,12,8,);
B(B_F,@OR-2,,12,4,17,8,);
B(B_VAROUT,,MXbbErrorSymbol,31,14,33,16,);
B(B_COMMENT,,Das Initialisierungssymbol wird nur angezeigt~ wenn mit dem Gerätø^auch gefahren werden könnte oder gebrückt ist.ø^Ansonsten stört es eher. (Laut norm muß nur ein Nichtfunktionierenø^angezeigt werden. Hier wird auch die Funktion bei gebrückt ,0,0,0,0,0,0,0,);
B(B_F,@AND-3,,26,8,31,13,);
B(B_VAROUT,,MXbbInitSymbol,31,9,33,11,);
B(B_F,@OR-2,,17,6,22,10,0N);
B(B_VARIN,,MXstopAllFunctio,15,8,17,10,);
B(B_F,@OR-2,,17,10,22,14,);
B(B_VARIN,,LXinitializinBB,15,11,17,13,);
B(B_VARIN,,LXinitializinRec,15,12,17,14,);
B(B_COMMENT,,Monitorsymbole werden nur angezeigt~ø^wenn die LMB die Datenauftzeichnung fordert.,31,1,49,3,);
B(B_VARIN,,MXbbActivatByLml,23,3,25,5,);
B(B_VARIN,,LXbbError,24,15,26,17,);
L(17,6,26,6);
L(25,4,25,15);
L(25,15,26,15);
L(22,12,26,12);
L(25,10,26,10);
L(17,6,17,8);
L(22,8,23,8);
L(23,8,23,11);
L(23,11,26,11);
L(25,4,26,4);
L(24,5,26,5);
L(24,5,24,12);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_FB,MsgUDintUDint,Message7,27,3,37,10,);
B(B_VARIN,,808,25,4,27,6,);
B(B_VARIN,,MSG_INFO,25,6,27,8,);
B(B_COMMENT,,set message Blackbox Recorder OK,1,1,36,2,);
B(B_VARIN,,LXbbError,10,7,12,9,);
B(B_F,@AND-3,,12,4,17,9,NNN);
B(B_VARIN,,LXinitializinBB,10,5,12,7,);
B(B_VARIN,,LXinitializinRec,10,6,12,8,);
L(17,6,27,6);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 5 ;
        NETWORK_BODY
B(B_COMMENT,,exit,1,1,9,2,);
B(B_VARIN,,TRUE,10,2,12,4,);
B(B_RETURN,,,12,2,14,4,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL := init1: ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_COMMENT,,INIT BLACKBOX,1,1,40,2,);
B(B_COMMENT,,-----------------------------------------------------------------------------------------------------------------------------------,1,2,40,3,);
B(B_VARIN,,TRUE,10,4,12,6,);
B(B_VAROUT,,LXinit1Ok,12,4,14,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_COMMENT,,tigger identity 1,1,1,14,2,);
B(B_VARIN,,'bbox',10,3,12,5,);
B(B_COMMENT,,Der Verzeichnisname bleibt immer gleichø^damit die Ausalterung richtig funktioniert.,37,1,53,3,);
B(B_FB,RecDefTrigger,RecDefTrigg1,12,2,23,6,);
B(B_VAROUT,,LWtriggerID1,23,3,25,5,);
B(B_VARIN,,'blackbox',10,4,12,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_COMMENT,,tigger identity 2,1,1,14,2,);
B(B_VARIN,,'bbox',10,3,12,5,);
B(B_FB,RecDefTrigger,RecDefTrigg2,12,2,23,6,);
B(B_VAROUT,,LWtriggerID2,23,3,25,5,);
B(B_VARIN,,'blackbox',10,4,12,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_COMMENT,,tigger identity 3,1,1,14,2,);
B(B_VARIN,,'bbox',10,3,12,5,);
B(B_FB,RecDefTrigger,RecDefTrigg3,12,2,23,6,);
B(B_VAROUT,,LWtriggerID3,23,3,25,5,);
B(B_VARIN,,'blackbox',10,4,12,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_COMMENT,,tigger identity 4,1,1,14,2,);
B(B_VARIN,,'bbox',10,3,12,5,);
B(B_FB,RecDefTrigger,RecDefTrigg4,12,2,23,6,);
B(B_VAROUT,,LWtriggerID4,23,3,25,5,);
B(B_VARIN,,'blackbox',10,4,12,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL := init2: ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_COMMENT,,set trigger active for init,1,1,21,2,);
B(B_FB,R_TRIG,R_TRIG4,12,4,19,7,);
B(B_VARIN,,TRUE,10,5,12,7,);
B(B_FB,F_TRIG,F_TRIG1,20,4,27,7,);
B(B_VAROUT,,LXtrigger1Active,20,7,22,9,);
B(B_VAROUT,,LXtrigger2Active,28,7,30,9,);
B(B_FB,F_TRIG,F_TRIG2,28,4,35,7,);
B(B_VAROUT,,LXtrigger3Active,36,7,38,9,);
B(B_FB,F_TRIG,F_TRIG3,36,4,43,7,);
B(B_VAROUT,,LXtrigger4Active,44,7,46,9,);
B(B_FB,F_TRIG,F_TRIG4,44,4,51,7,);
B(B_VAROUT,,LXinit2Ok,61,5,63,7,);
B(B_VARIN,,FALSE,54,6,56,8,);
B(B_FB,SR,SR2,56,4,61,8,);
B(B_COMMENT,,Dieser Init-Teil wird pro TriggerID einmal durchlaufen.,1,2,21,3,);
L(19,6,20,6);
L(20,6,20,8);
L(27,6,28,6);
L(28,6,28,8);
L(35,6,36,6);
L(36,6,36,8);
L(43,6,44,6);
L(44,6,44,8);
L(51,6,56,6);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 5 ;
        NETWORK_BODY
B(B_COMMENT,,exit when init ok,1,1,9,2,);
B(B_VARIN,,LXinit2Ok,10,2,12,4,);
B(B_RETURN,,,12,2,14,4,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_COMMENT,,set trigger indetity for init,1,1,21,2,);
B(B_F,sel,,38,2,43,7,);
B(B_VARIN,,LWtriggerID3,36,5,38,7,);
B(B_F,sel,,51,1,56,6,);
B(B_VAROUT,,LWtrigger,56,2,58,4,);
B(B_VARIN,,LWtriggerID4,49,4,51,6,);
B(B_F,sel,,25,3,30,8,);
B(B_VARIN,,LWtriggerID2,23,6,25,8,);
B(B_F,sel,,12,4,17,9,);
B(B_VARIN,,LWtriggerID1,10,7,12,9,);
B(B_VARIN,,LWtrigger,10,6,12,8,);
B(B_VARIN,,LXtrigger1Active,10,5,12,7,);
B(B_VARIN,,LXtrigger2Active,23,4,25,6,);
B(B_VARIN,,LXtrigger3Active,36,3,38,5,);
B(B_VARIN,,LXtrigger4Active,49,2,51,4,);
B(B_COMMENT,,Pro Aufzeichnungsgruppe (anderes File/Verzeichnis) wird ein TriggerID definiert.ø^Jeder Trigger ID wird komplett initalisiert.ø^Nur der jeweilige Trigger der zur LMB-Konfig passt wird dann später auch gestartet.,62,3,93,6,);
B(B_COMMENT,,Der TriggerID4 bleibt im LWtrigger. Ist also nach dem init-Teil default.ø^Dieser ist auch jener der komplett alle Werte erfasst incl. Wsp und Balwag,62,6,93,8,);
L(17,6,25,6);
L(30,5,38,5);
L(43,4,51,4);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_COMMENT,,set option,1,1,40,2,);
B(B_FB,RecOpt,RecOpt1,12,4,23,8,);
B(B_COMMENT,,Option:ø^0x01 Die Aufzeichnung soll bei Zündung Aus automatisch beendet werdenø^0x02 Die Aufzeichnung soll digital signiert werden,35,3,63,6,);
B(B_VARIN,,LWtrigger,10,5,12,7,);
B(B_VARIN,,3,10,6,12,8,);
B(B_VAROUT,,LDbbConfError1,23,5,25,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_COMMENT,,set memory space option,1,1,40,2,);
B(B_FB,RecRotation,RecRot1,12,3,23,8,);
B(B_VARIN,,LWtrigger,10,4,12,6,);
B(B_VARIN,,100000,10,5,12,7,);
B(B_VARIN,,1000000,10,6,12,8,);
B(B_COMMENT,,100MB sollen bei Neustart frei sein damit die Aufzeichnung sicher funktioniert.ø^1GB werden als max. angegeben. (Je mehr Blackbox-Daten auf einer Karteø^vorhanden sind umso länger dauert das Einschalten (Verzeichnisse scannen und ausaltern)),0,0,0,0,,0,0,);
B(B_VAROUT,,LDbbConfError2,23,4,25,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_COMMENT,,time stamp,1,1,14,2,);
B(B_FB,RecData_TOD,Data_T_1,12,2,22,7,);
B(B_VARIN,,LTsecSince1970,10,5,12,7,);
B(B_VARIN,,'time',10,4,12,6,);
B(B_VARIN,,LWtrigger,10,3,12,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_COMMENT,,utilization [%],1,1,14,2,);
B(B_VARIN,,LWtrigger,10,3,12,5,);
B(B_VARIN,,1,10,4,12,6,);
B(B_VARIN,,'utilization [%]',10,5,12,7,);
B(B_VARIN,,MDlmlUtilization,10,6,12,8,);
B(B_FB,RecData_Real,Data_R_1,12,2,23,8,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_VARIN,,LWtrigger,10,3,12,5,);
B(B_VARIN,,1,10,4,12,6,);
B(B_VARIN,,'utilization max [%]',10,5,12,7,);
B(B_FB,RecData_Real_Com,Data_R_C_1,12,2,26,9,);
B(B_VARIN,,MDlmlUtilization,10,7,12,9,);
B(B_VARIN,,REC_DATA_MAX,10,6,12,8,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_COMMENT,,utilization backwards [%],1,1,14,2,);
B(B_VARIN,,LWtrigger,10,3,12,5,);
B(B_VARIN,,1,10,4,12,6,);
B(B_VARIN,,'utilization back [%]',10,5,12,7,);
B(B_VARIN,,MDlmlUtilBackwar,10,6,12,8,);
B(B_FB,RecData_Real,Data_R_2,12,2,23,8,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_VARIN,,LWtrigger,10,3,12,5,);
B(B_VARIN,,1,10,4,12,6,);
B(B_VARIN,,'utilization back max [%]',10,5,12,7,);
B(B_FB,RecData_Real_Com,Data_R_C_2,12,2,26,9,);
B(B_VARIN,,MDlmlUtilBackwar,10,7,12,9,);
B(B_VARIN,,REC_DATA_MAX,10,6,12,8,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_COMMENT,,actual load main boom [t],1,1,14,2,);
B(B_VARIN,,LWtrigger,10,3,12,5,);
B(B_VARIN,,1,10,4,12,6,);
B(B_VARIN,,'actual load boom [t]',10,5,12,7,);
B(B_VARIN,,MDlmlLoadBoom,10,6,12,8,);
B(B_FB,RecData_Real,Data_R_3,12,2,23,8,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_COMMENT,,max load main boom [t],1,1,14,2,);
B(B_VARIN,,LWtrigger,10,3,12,5,);
B(B_VARIN,,1,10,4,12,6,);
B(B_VARIN,,'max load boom [t]',10,5,12,7,);
B(B_VARIN,,MDlmlMaxLoad1,10,6,12,8,);
B(B_FB,RecData_Real,Data_R_4,12,2,23,8,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_COMMENT,,load radius main boom [m],1,1,14,2,);
B(B_VARIN,,LWtrigger,10,3,12,5,);
B(B_VARIN,,2,10,4,12,6,);
B(B_VARIN,,'load radius boom [m]',10,5,12,7,);
B(B_VARIN,,MDlmlRadiusMBoom,10,6,12,8,);
B(B_FB,RecData_Real,Data_R_5,12,2,23,8,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_COMMENT,,rope lenght hg 1 [m],1,1,14,2,);
B(B_VARIN,,LWtrigger,10,3,12,5,);
B(B_VARIN,,2,10,4,12,6,);
B(B_VARIN,,'rope lenght hg1 [m]',10,5,12,7,);
B(B_VARIN,,MDhg1RopeLenWin,10,6,12,8,);
B(B_FB,RecData_Real,Data_R_6,12,2,23,8,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_COMMENT,,rope lenght hg 2 [m],1,1,14,2,);
B(B_VARIN,,LWtrigger,10,3,12,5,);
B(B_VARIN,,2,10,4,12,6,);
B(B_VARIN,,'rope lenght hg2 [m]',10,5,12,7,);
B(B_VARIN,,MDhg2RopeLenWin,10,6,12,8,);
B(B_FB,RecData_Real,Data_R_7,12,2,23,8,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_COMMENT,,wind speed [m/s],1,1,14,2,);
B(B_VARIN,,LWtrigger,10,3,12,5,);
B(B_VARIN,,1,10,4,12,6,);
B(B_VARIN,,'wind speed [m/s]',10,5,12,7,);
B(B_VARIN,,MDwindSpeed,10,6,12,8,);
B(B_FB,RecData_Real,Data_R_8,12,2,23,8,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_VARIN,,LWtrigger,10,3,12,5,);
B(B_VARIN,,1,10,4,12,6,);
B(B_VARIN,,'wind speed max [m/s]',10,5,12,7,);
B(B_FB,RecData_Real_Com,Data_R_C_3,12,2,26,9,);
B(B_VARIN,,MDwindSpeed,10,7,12,9,);
B(B_VARIN,,REC_DATA_MAX,10,6,12,8,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_COMMENT,,angle main boom [°],1,1,14,2,);
B(B_VARIN,,LWtrigger,10,3,12,5,);
B(B_VARIN,,1,10,4,12,6,);
B(B_VARIN,,'angle boom [°]',10,5,12,7,);
B(B_VARIN,,MDlmlAngleBoom,10,6,12,8,);
B(B_FB,RecData_Real,Data_R_9,12,2,23,8,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_COMMENT,,engine speed [rpm],1,1,14,2,);
B(B_VARIN,,LWtrigger,10,3,12,5,);
B(B_VARIN,,0,10,4,12,6,);
B(B_VARIN,,'engine speed [rpm]',10,5,12,7,);
B(B_VARIN,,MDpresenEngSpeed,10,6,12,8,);
B(B_FB,RecData_Real,Data_R_10,12,2,23,8,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_COMMENT,,actual engine torque [Nm],1,1,14,2,);
B(B_VARIN,,LWtrigger,10,3,12,5,);
B(B_VARIN,,0,10,4,12,6,);
B(B_VARIN,,'engine torque [Nm]',10,5,12,7,);
B(B_VARIN,,MDengTorqueAct,10,6,12,8,);
B(B_FB,RecData_Real,Data_R_11,12,2,23,8,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_F,int_to_real,,12,2,22,5,);
B(B_VARIN,,IWleftJoystAnal1,10,3,12,5,);
B(B_VAROUT,,LDleftJoystAnal1,22,3,24,5,);
B(B_COMMENT,,joystick left X axis [%x10],1,1,14,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_VARIN,,LWtrigger,10,2,12,4,);
B(B_VARIN,,0,10,3,12,5,);
B(B_VARIN,,'joyst left X [%x10]',10,4,12,6,);
B(B_FB,RecData_Real,Data_R_12,12,1,23,7,);
B(B_VARIN,,LDleftJoystAnal1,10,5,12,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_VAROUT,,LDleftJoystAnal2,22,3,24,5,);
B(B_COMMENT,,joystick left Y axis [%x10],1,1,14,2,);
B(B_F,int_to_real,,12,2,22,5,);
B(B_VARIN,,IWleftJoystAnal2,10,3,12,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_VARIN,,LWtrigger,10,2,12,4,);
B(B_VARIN,,0,10,3,12,5,);
B(B_VARIN,,'joyst left Y [%x10]',10,4,12,6,);
B(B_FB,RecData_Real,Data_R_13,12,1,23,7,);
B(B_VARIN,,LDleftJoystAnal2,10,5,12,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_F,int_to_real,,12,2,22,5,);
B(B_VAROUT,,LDrightJoystAna1,22,3,24,5,);
B(B_COMMENT,,joystick right X axis [%x10],1,1,14,2,);
B(B_VARIN,,IWrightJoystAna1,10,3,12,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_VARIN,,LWtrigger,10,3,12,5,);
B(B_VARIN,,0,10,4,12,6,);
B(B_VARIN,,'joyst right X [%x10]',10,5,12,7,);
B(B_FB,RecData_Real,Data_R_14,12,2,23,8,);
B(B_VARIN,,LDrightJoystAna1,10,6,12,8,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_F,int_to_real,,12,2,22,5,);
B(B_VAROUT,,LDrightJoystAna2,22,3,24,5,);
B(B_COMMENT,,joystick right Y axis [%x10],1,1,14,2,);
B(B_VARIN,,IWrightJoystAna2,10,3,12,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_VARIN,,LWtrigger,10,3,12,5,);
B(B_VARIN,,0,10,4,12,6,);
B(B_VARIN,,'joyst right Y [%x10]',10,5,12,7,);
B(B_FB,RecData_Real,Data_R_15,12,2,23,8,);
B(B_VARIN,,LDrightJoystAna2,10,6,12,8,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_COMMENT,,analog signal hg 1 [%],1,1,14,2,);
B(B_VARIN,,LWtrigger,10,3,12,5,);
B(B_VARIN,,0,10,4,12,6,);
B(B_VARIN,,'analog sig hg1 [%]',10,5,12,7,);
B(B_VARIN,,MDhg1PumpSignal,10,6,12,8,);
B(B_FB,RecData_Real,Data_R_16,12,2,23,8,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_COMMENT,,analog signal hg 2 [%],1,1,14,2,);
B(B_VARIN,,LWtrigger,10,3,12,5,);
B(B_VARIN,,0,10,4,12,6,);
B(B_VARIN,,'analog sig hg2 [%]',10,5,12,7,);
B(B_VARIN,,MDhg2PumpSignal,10,6,12,8,);
B(B_FB,RecData_Real,Data_R_17,12,2,23,8,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_COMMENT,,analog signal lg [%],1,1,14,2,);
B(B_VARIN,,LWtrigger,10,3,12,5,);
B(B_VARIN,,0,10,4,12,6,);
B(B_VARIN,,'analog sig lg [%]',10,5,12,7,);
B(B_VARIN,,MDlgPumpSignal,10,6,12,8,);
B(B_FB,RecData_Real,Data_R_18,12,2,23,8,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_COMMENT,,analog signal lg 2 [%],1,1,14,2,);
B(B_VARIN,,LWtrigger,10,3,12,5,);
B(B_VARIN,,0,10,4,12,6,);
B(B_VARIN,,'analog sig lg2 [%]',10,5,12,7,);
B(B_VARIN,,MDlg2PumpSignal,10,6,12,8,);
B(B_FB,RecData_Real,Data_R_19,12,2,23,8,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_COMMENT,,analog signal sg [%],1,1,14,2,);
B(B_VARIN,,LWtrigger,10,3,12,5,);
B(B_VARIN,,0,10,4,12,6,);
B(B_VARIN,,'analog sig sg [%]',10,5,12,7,);
B(B_VARIN,,MDsgPumpSignal,10,6,12,8,);
B(B_FB,RecData_Real,Data_R_20,12,2,23,8,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_COMMENT,,travelling gear active,1,1,14,2,);
B(B_VARIN,,LWtrigger,10,3,12,5,);
B(B_VARIN,,'travel gear act',10,4,12,6,);
B(B_VARIN,,MXswitTravelGear,10,5,12,7,);
B(B_FB,RecData_Bool,Data_B_1,12,2,23,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_COMMENT,,brake hg 1,1,1,14,2,);
B(B_VARIN,,LWtrigger,10,3,12,5,);
B(B_VARIN,,'brake hg1',10,4,12,6,);
B(B_VARIN,,QXhg1BrakeNormal,10,5,12,7,);
B(B_FB,RecData_Bool,Data_B_2,12,2,23,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_COMMENT,,brake hg 2,1,1,14,2,);
B(B_VARIN,,LWtrigger,10,3,12,5,);
B(B_VARIN,,'brake hg2',10,4,12,6,);
B(B_VARIN,,QXhg2BrakeNormal,10,5,12,7,);
B(B_FB,RecData_Bool,Data_B_3,12,2,23,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_COMMENT,,brake lg,1,1,14,2,);
B(B_VARIN,,LWtrigger,10,3,12,5,);
B(B_VARIN,,'brake lg',10,4,12,6,);
B(B_VARIN,,QXlgBrake,10,5,12,7,);
B(B_FB,RecData_Bool,Data_B_4,12,2,23,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_COMMENT,,brake lg 2,1,1,14,2,);
B(B_VARIN,,LWtrigger,10,3,12,5,);
B(B_VARIN,,'brake lg2',10,4,12,6,);
B(B_VARIN,,QXlg2Brake,10,5,12,7,);
B(B_FB,RecData_Bool,Data_B_5,12,2,23,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_COMMENT,,brake sg,1,1,14,2,);
B(B_VARIN,,LWtrigger,10,3,12,5,);
B(B_VARIN,,'brake sg',10,4,12,6,);
B(B_VARIN,,QXsgBrake,10,5,12,7,);
B(B_FB,RecData_Bool,Data_B_6,12,2,23,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_COMMENT,,clutch hg 1,1,1,14,2,);
B(B_VARIN,,LWtrigger,10,3,12,5,);
B(B_VARIN,,'brake hg1',10,4,12,6,);
B(B_VARIN,,QXhg1Clutch,10,5,12,7,);
B(B_FB,RecData_Bool,Data_B_7,12,2,23,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_COMMENT,,clutch hg 2,1,1,14,2,);
B(B_VARIN,,LWtrigger,10,3,12,5,);
B(B_VARIN,,'brake hg2',10,4,12,6,);
B(B_VARIN,,QXhg2Clutch,10,5,12,7,);
B(B_FB,RecData_Bool,Data_B_8,12,2,23,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_COMMENT,,hg connection winch synchron,1,1,14,2,);
B(B_VARIN,,LWtrigger,10,3,12,5,);
B(B_VARIN,,'hg winch syn val',10,4,12,6,);
B(B_VARIN,,QXhgWinSynConVal,10,5,12,7,);
B(B_FB,RecData_Bool,Data_B_9,12,2,23,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_COMMENT,,hg connection fast speed,1,1,14,2,);
B(B_VARIN,,LWtrigger,10,3,12,5,);
B(B_VARIN,,'hg fast speed con',10,4,12,6,);
B(B_VARIN,,QXhg1_2connectio,10,5,12,7,);
B(B_FB,RecData_Bool,Data_B_10,12,2,23,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_COMMENT,,input main boom force left [muA],1,1,14,2,);
B(B_VARIN,,LWtrigger,10,3,12,5,);
B(B_FB,RecData_UInt,Data_UI_1,12,2,23,7,);
B(B_VARIN,,'inp boom force le',10,4,12,6,);
B(B_VARIN,,IWloadSenLeBoom,10,5,12,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_COMMENT,,input main boom force right [muA],1,1,15,2,);
B(B_VARIN,,LWtrigger,10,3,12,5,);
B(B_FB,RecData_UInt,Data_UI_2,12,2,23,7,);
B(B_VARIN,,'inp boom force ri',10,4,12,6,);
B(B_VARIN,,IWloadSenRiBoom,10,5,12,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_COMMENT,,input main boom angle lower [muA],1,1,15,2,);
B(B_VARIN,,LWtrigger,10,3,12,5,);
B(B_FB,RecData_UInt,Data_UI_3,12,2,23,7,);
B(B_VARIN,,'inp boom angle lower',10,4,12,6,);
B(B_VARIN,,IWangSenLowBoom,10,5,12,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_COMMENT,,input main boom angle top [muA],1,1,15,2,);
B(B_VARIN,,LWtrigger,10,3,12,5,);
B(B_VARIN,,'inp boom angle top',10,4,12,6,);
B(B_VARIN,,IWangSenTopBoom,10,5,12,7,);
B(B_FB,RecData_UInt,Data_UI_4,12,2,23,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_COMMENT,,sg pressure left [bar],1,1,14,2,);
B(B_VARIN,,LWtrigger,10,3,12,5,);
B(B_VARIN,,0,10,4,12,6,);
B(B_VARIN,,'sg press left [bar]',10,5,12,7,);
B(B_VARIN,,MDsgSysPressLe,10,6,12,8,);
B(B_FB,RecData_Real,Data_R_21,12,2,23,8,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_COMMENT,,sg pressure right [bar],1,1,14,2,);
B(B_VARIN,,LWtrigger,10,3,12,5,);
B(B_VARIN,,0,10,4,12,6,);
B(B_VARIN,,'sg press right [bar]',10,5,12,7,);
B(B_VARIN,,MDsgSysPressRi,10,6,12,8,);
B(B_FB,RecData_Real,Data_R_22,12,2,23,8,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_COMMENT,,sg angle [°],1,1,14,2,);
B(B_VARIN,,LWtrigger,10,3,12,5,);
B(B_VARIN,,0,10,4,12,6,);
B(B_VARIN,,'sg angle [°]',10,5,12,7,);
B(B_VARIN,,MDsgAngle,10,6,12,8,);
B(B_FB,RecData_Real,Data_R_23,12,2,23,8,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_COMMENT,,brake hg 1 fast speed,1,1,14,2,);
B(B_VARIN,,LWtrigger,10,3,12,5,);
B(B_VARIN,,'brake hg1 fast sp',10,4,12,6,);
B(B_VARIN,,QXhg1BrakeFastSp,10,5,12,7,);
B(B_FB,RecData_Bool,Data_B_11,12,2,23,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_COMMENT,,brake hg 2 fast speed,1,1,14,2,);
B(B_VARIN,,LWtrigger,10,3,12,5,);
B(B_VARIN,,'brake hg2 fast sp',10,4,12,6,);
B(B_VARIN,,QXhg2BrakeFastSp,10,5,12,7,);
B(B_FB,RecData_Bool,Data_B_12,12,2,23,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_COMMENT,,hg1 pressure [bar],1,1,14,2,);
B(B_VARIN,,LWtrigger,10,3,12,5,);
B(B_VARIN,,0,10,4,12,6,);
B(B_VARIN,,'hg1 press [bar]',10,5,12,7,);
B(B_VARIN,,MDhg1SystemPress,10,6,12,8,);
B(B_FB,RecData_Real,Data_R_39,12,2,23,8,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_COMMENT,,hg2 pressure [bar],1,1,14,2,);
B(B_VARIN,,LWtrigger,10,3,12,5,);
B(B_VARIN,,0,10,4,12,6,);
B(B_VARIN,,'hg2 press [bar]',10,5,12,7,);
B(B_VARIN,,MDhg2SystemPress,10,6,12,8,);
B(B_FB,RecData_Real,Data_R_40,12,2,23,8,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_COMMENT,,input brake pressure hg1 [muA],1,1,15,2,);
B(B_VARIN,,LWtrigger,10,3,12,5,);
B(B_VARIN,,'inp brake press hg1',10,4,12,6,);
B(B_VARIN,,IWadHg1BrakePres,10,5,12,7,);
B(B_FB,RecData_UInt,Data_UI_19,12,2,23,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_COMMENT,,input brake pressure hg2 [muA],1,1,15,2,);
B(B_VARIN,,LWtrigger,10,3,12,5,);
B(B_VARIN,,'inp brake press hg2',10,4,12,6,);
B(B_VARIN,,IWadHg2BrakePres,10,5,12,7,);
B(B_FB,RecData_UInt,Data_UI_20,12,2,23,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_JUMP,,lead,12,1,14,3,N);
B(B_VARIN,,CXsuperstAngSens,10,1,12,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_COMMENT,,superstructure angle X [°],1,1,14,2,);
B(B_VARIN,,LWtrigger,10,3,12,5,);
B(B_VARIN,,1,10,4,12,6,);
B(B_VARIN,,'superstr angle X [°]',10,5,12,7,);
B(B_VARIN,,MDsuperstAngSenX,10,6,12,8,);
B(B_FB,RecData_Real,Data_R_24,12,2,23,8,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_COMMENT,,superstructure angle Y [°],1,1,14,2,);
B(B_VARIN,,LWtrigger,10,3,12,5,);
B(B_VARIN,,1,10,4,12,6,);
B(B_VARIN,,'superstr angle Y [°]',10,5,12,7,);
B(B_VARIN,,MDsuperstAngSenY,10,6,12,8,);
B(B_FB,RecData_Real,Data_R_25,12,2,23,8,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL := lead: ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,MXleaderOper,10,1,12,3,);
B(B_JUMP,,beru,12,1,14,3,N);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_COMMENT,,leader angle X [°],1,1,14,2,);
B(B_VARIN,,LWtrigger,10,3,12,5,);
B(B_VARIN,,1,10,4,12,6,);
B(B_VARIN,,'leader angle X [°]',10,5,12,7,);
B(B_VARIN,,MDleadAngleX,10,6,12,8,);
B(B_FB,RecData_Real,Data_R_41,12,2,23,8,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_COMMENT,,leader angle Y [°],1,1,14,2,);
B(B_VARIN,,LWtrigger,10,3,12,5,);
B(B_VARIN,,1,10,4,12,6,);
B(B_VARIN,,'leader angle Y [°]',10,5,12,7,);
B(B_VARIN,,MDleadAngleY,10,6,12,8,);
B(B_FB,RecData_Real,Data_R_42,12,2,23,8,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_COMMENT,,analog signal z6 [%],1,1,14,2,);
B(B_VARIN,,LWtrigger,10,3,12,5,);
B(B_VARIN,,0,10,4,12,6,);
B(B_VARIN,,'analog sig z6 [%]',10,5,12,7,);
B(B_VARIN,,MDz6PumpSignal,10,6,12,8,);
B(B_FB,RecData_Real,Data_R_43,12,2,23,8,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_COMMENT,,analog signal z4 [%],1,1,14,2,);
B(B_VARIN,,LWtrigger,10,3,12,5,);
B(B_VARIN,,0,10,4,12,6,);
B(B_VARIN,,'analog sig z4 [%]',10,5,12,7,);
B(B_VARIN,,MDz4PumpSignal,10,6,12,8,);
B(B_FB,RecData_Real,Data_R_44,12,2,23,8,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_COMMENT,,analog signal z2 [%],1,1,14,2,);
B(B_VARIN,,LWtrigger,10,3,12,5,);
B(B_VARIN,,0,10,4,12,6,);
B(B_VARIN,,'analog sig z2 [%]',10,5,12,7,);
B(B_VARIN,,MDz2PumpSignal,10,6,12,8,);
B(B_FB,RecData_Real,Data_R_45,12,2,23,8,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_COMMENT,,analog signal z3 [%],1,1,14,2,);
B(B_VARIN,,LWtrigger,10,3,12,5,);
B(B_VARIN,,0,10,4,12,6,);
B(B_VARIN,,'analog sig z3 [%]',10,5,12,7,);
B(B_VARIN,,MDz3PumpSignal,10,6,12,8,);
B(B_FB,RecData_Real,Data_R_46,12,2,23,8,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL := beru: ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,CXanaStabWinch,10,1,12,3,);
B(B_JUMP,,pawi,12,1,14,3,N);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_COMMENT,,stab winch freefall ,1,1,14,2,);
B(B_VARIN,,LWtrigger,10,3,12,5,);
B(B_VARIN,,'stab winch freefall',10,4,12,6,);
B(B_VARIN,,QXstabWinFreef,10,5,12,7,);
B(B_FB,RecData_Bool,Data_B_13,12,2,23,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_F,sel,,12,1,17,6,);
B(B_VARIN,,MXstabWinchOC,10,2,12,4,);
B(B_VARIN,,MDstabWPresSigCC,10,3,12,5,);
B(B_VARIN,,MDstabWPresSigOC,10,4,12,6,);
B(B_VAROUT,,LDstabWPresSig,17,2,19,4,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_COMMENT,,press signal stab winch ,1,1,15,2,);
B(B_VARIN,,'press sig stab winch',10,6,12,8,);
B(B_FB,RecData_Real,Data_R_48,12,3,23,9,);
B(B_VARIN,,LWtrigger,10,4,12,6,);
B(B_VARIN,,0,10,5,12,7,);
B(B_VARIN,,LDstabWPresSig,10,7,12,9,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL := pawi: ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,CXadPassWinch,10,1,12,3,);
B(B_JUMP,,vib,12,1,14,3,N);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_COMMENT,,brake passsenger winch ,1,1,14,2,);
B(B_VARIN,,LWtrigger,10,3,12,5,);
B(B_VARIN,,'brake pw',10,4,12,6,);
B(B_FB,RecData_Bool,Data_B_14,12,2,23,7,);
B(B_VARIN,,QXaddPersWinBrak,10,5,12,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_COMMENT,,passsenger winch lifting ,1,1,14,2,);
B(B_VARIN,,LWtrigger,10,3,12,5,);
B(B_VARIN,,'pw lifting',10,4,12,6,);
B(B_FB,RecData_Bool,Data_B_15,12,2,23,7,);
B(B_VARIN,,QXadPasWinchLift,10,5,12,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_COMMENT,,passsenger winch lowering,1,1,14,2,);
B(B_VARIN,,LWtrigger,10,3,12,5,);
B(B_VARIN,,'pw lowering',10,4,12,6,);
B(B_FB,RecData_Bool,Data_B_16,12,2,23,7,);
B(B_VARIN,,QXadPasWinchLow,10,5,12,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL := vib: ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,CXadVibOperat,10,1,12,3,);
B(B_JUMP,,magun,12,1,14,3,N);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_COMMENT,,clamp pressure [bar],1,1,14,2,);
B(B_VARIN,,LWtrigger,10,3,12,5,);
B(B_VARIN,,0,10,4,12,6,);
B(B_VARIN,,'clamp press [bar]',10,5,12,7,);
B(B_VARIN,,MDvibClampPress,10,6,12,8,);
B(B_FB,RecData_Real,Data_R_47,12,2,23,8,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL := magun: ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,CXadMagneticUnit,10,1,12,3,);
B(B_JUMP,,next1,12,1,14,3,N);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_COMMENT,,brake passsenger winch ,1,1,14,2,);
B(B_VARIN,,LWtrigger,10,3,12,5,);
B(B_VARIN,,'generator on',10,4,12,6,);
B(B_FB,RecData_Bool,Data_B_17,12,2,23,7,);
B(B_VARIN,,QXgeneratorOn,10,5,12,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_COMMENT,,passsenger winch lifting ,1,1,14,2,);
B(B_VARIN,,LWtrigger,10,3,12,5,);
B(B_VARIN,,'magnet on',10,4,12,6,);
B(B_FB,RecData_Bool,Data_B_18,12,2,23,7,);
B(B_VARIN,,QXadMagnetOn,10,5,12,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_COMMENT,,passsenger winch lowering,1,1,14,2,);
B(B_VARIN,,LWtrigger,10,3,12,5,);
B(B_VARIN,,'magnet off',10,4,12,6,);
B(B_FB,RecData_Bool,Data_B_19,12,2,23,7,);
B(B_VARIN,,QXadMagnetOff,10,5,12,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL := next1: ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_COMMENT,,goto derrick when no jib is mounted,1,1,21,2,);
B(B_JUMP,,next2,17,4,19,6,);
B(B_VARIN,,LXtrigger2Active,10,4,12,6,);
B(B_VARIN,,LXtrigger4Active,10,5,12,7,);
B(B_F,@AND-2,,12,3,17,7,NN);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_COMMENT,,actual load luffing jib [t],1,1,14,2,);
B(B_VARIN,,LWtrigger,10,3,12,5,);
B(B_VARIN,,1,10,4,12,6,);
B(B_VARIN,,'actual load jib [t]',10,5,12,7,);
B(B_VARIN,,MDlmlLoadLuffJib,10,6,12,8,);
B(B_FB,RecData_Real,Data_R_26,12,2,23,8,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_COMMENT,,max load luffing jib [t],1,1,14,2,);
B(B_VARIN,,LWtrigger,10,3,12,5,);
B(B_VARIN,,1,10,4,12,6,);
B(B_VARIN,,'max load jib [t]',10,5,12,7,);
B(B_VARIN,,MDlmlMaxLoad2,10,6,12,8,);
B(B_FB,RecData_Real,Data_R_27,12,2,23,8,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_COMMENT,,load radius luffing jib [m],1,1,14,2,);
B(B_VARIN,,LWtrigger,10,3,12,5,);
B(B_VARIN,,2,10,4,12,6,);
B(B_VARIN,,'load radius jib [m]',10,5,12,7,);
B(B_VARIN,,MDlmlRadiusLJib,10,6,12,8,);
B(B_FB,RecData_Real,Data_R_28,12,2,23,8,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_COMMENT,,angle luffing jib [°],1,1,14,2,);
B(B_VARIN,,LWtrigger,10,3,12,5,);
B(B_VARIN,,1,10,4,12,6,);
B(B_VARIN,,'angle jib [°]',10,5,12,7,);
B(B_VARIN,,MDlmlAngleLufJib,10,6,12,8,);
B(B_FB,RecData_Real,Data_R_29,12,2,23,8,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_COMMENT,,input luffing jib force left [muA],1,1,14,2,);
B(B_VARIN,,LWtrigger,10,3,12,5,);
B(B_FB,RecData_UInt,Data_UI_5,12,2,23,7,);
B(B_VARIN,,'inp jib force le',10,4,12,6,);
B(B_VARIN,,IWloadSenLeLuJib,10,5,12,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_COMMENT,,input luffing jib force right [muA],1,1,14,2,);
B(B_VARIN,,LWtrigger,10,3,12,5,);
B(B_FB,RecData_UInt,Data_UI_6,12,2,23,7,);
B(B_VARIN,,'inp jib force le',10,4,12,6,);
B(B_VARIN,,IWloadSenRiLuJib,10,5,12,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_COMMENT,,input luffing jib angle lower [muA],1,1,15,2,);
B(B_VARIN,,LWtrigger,10,3,12,5,);
B(B_FB,RecData_UInt,Data_UI_7,12,2,23,7,);
B(B_VARIN,,'inp jib angle lower',10,4,12,6,);
B(B_VARIN,,IWangSenLoLufJib,10,5,12,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_COMMENT,,input luffing jib angle top [muA],1,1,15,2,);
B(B_VARIN,,LWtrigger,10,3,12,5,);
B(B_FB,RecData_UInt,Data_UI_8,12,2,23,7,);
B(B_VARIN,,'inp jib angle top',10,4,12,6,);
B(B_VARIN,,IWangSenToLufJib,10,5,12,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_COMMENT,,input luffing jib pressure 1 [muA],1,1,15,2,);
B(B_VARIN,,LWtrigger,10,3,12,5,);
B(B_FB,RecData_UInt,Data_UI_9,12,2,23,7,);
B(B_VARIN,,'inp jib press 1',10,4,12,6,);
B(B_VARIN,,IWljPres1FalBack,10,5,12,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_COMMENT,,input luffing jib pressure 2 [muA],1,1,15,2,);
B(B_VARIN,,LWtrigger,10,3,12,5,);
B(B_FB,RecData_UInt,Data_UI_10,12,2,23,7,);
B(B_VARIN,,'inp jib press 2',10,4,12,6,);
B(B_VARIN,,IWljPres2FalBack,10,5,12,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL := next2: ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_VARIN,,LXtrigger3Active,10,4,12,6,);
B(B_VARIN,,LXtrigger4Active,10,5,12,7,);
B(B_COMMENT,,exit when no derrick mounted,1,1,21,2,);
B(B_RETURN,,,17,4,19,6,);
B(B_F,@AND-2,,12,3,17,7,NN);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_COMMENT,,counterweight carrier mode,1,1,15,2,);
B(B_VARIN,,LWtrigger,10,3,12,5,);
B(B_FB,RecData_Real,Data_R_30,12,2,23,8,);
B(B_VARIN,,'coucar mode',10,5,12,7,);
B(B_VARIN,,MRccOperatMode,10,6,12,8,);
B(B_VARIN,,1,10,4,12,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_COMMENT,,actual load counterweight [t],1,1,14,2,);
B(B_VARIN,,LWtrigger,10,3,12,5,);
B(B_VARIN,,1,10,4,12,6,);
B(B_VARIN,,'load counterw [t]',10,5,12,7,);
B(B_FB,RecData_Real,Data_R_31,12,2,23,8,);
B(B_VARIN,,MDlmlCounterWeig,10,6,12,8,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_COMMENT,,radius counterweight [m],1,1,14,2,);
B(B_VARIN,,LWtrigger,10,3,12,5,);
B(B_VARIN,,2,10,4,12,6,);
B(B_VARIN,,'radius counterw [m]',10,5,12,7,);
B(B_VARIN,,MDccDistanceAbso,10,6,12,8,);
B(B_FB,RecData_Real,Data_R_32,12,2,23,8,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_COMMENT,,wheel kit angle 1 [°],1,1,14,2,);
B(B_VARIN,,LWtrigger,10,3,12,5,);
B(B_VARIN,,2,10,4,12,6,);
B(B_VARIN,,'wheel kit ang 1 [°]',10,5,12,7,);
B(B_VARIN,,MDwheelKitAngle1,10,6,12,8,);
B(B_FB,RecData_Real,Data_R_33,12,2,23,8,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_COMMENT,,wheel kit angle 2 [°],1,1,14,2,);
B(B_VARIN,,LWtrigger,10,3,12,5,);
B(B_VARIN,,2,10,4,12,6,);
B(B_VARIN,,'wheel kit ang 2 [°]',10,5,12,7,);
B(B_VARIN,,MDwheelKitAngle2,10,6,12,8,);
B(B_FB,RecData_Real,Data_R_34,12,2,23,8,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_COMMENT,,wheel kit angle 3 [°],1,1,14,2,);
B(B_VARIN,,LWtrigger,10,3,12,5,);
B(B_VARIN,,2,10,4,12,6,);
B(B_VARIN,,'wheel kit ang 3 [°]',10,5,12,7,);
B(B_VARIN,,MDwheelKitAngle3,10,6,12,8,);
B(B_FB,RecData_Real,Data_R_35,12,2,23,8,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_COMMENT,,wheel kit angle 4 [°],1,1,14,2,);
B(B_VARIN,,LWtrigger,10,3,12,5,);
B(B_VARIN,,2,10,4,12,6,);
B(B_VARIN,,'wheel kit ang 4 [°]',10,5,12,7,);
B(B_VARIN,,MDwheelKitAngle4,10,6,12,8,);
B(B_FB,RecData_Real,Data_R_36,12,2,23,8,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_COMMENT,,analog signal lg 3 [%],1,1,14,2,);
B(B_VARIN,,LWtrigger,10,3,12,5,);
B(B_VARIN,,0,10,4,12,6,);
B(B_VARIN,,'analog sig lg3 [%]',10,5,12,7,);
B(B_VARIN,,MDderrPumpSignal,10,6,12,8,);
B(B_FB,RecData_Real,Data_R_37,12,2,23,8,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_COMMENT,,analog signal floating counterweight [%],1,1,16,2,);
B(B_VARIN,,LWtrigger,10,3,12,5,);
B(B_VARIN,,0,10,4,12,6,);
B(B_VARIN,,'analog sig floCo [%]',10,5,12,7,);
B(B_VARIN,,MDfloaCouWeiSign,10,6,12,8,);
B(B_FB,RecData_Real,Data_R_38,12,2,23,8,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_COMMENT,,brake lg 3,1,1,14,2,);
B(B_VARIN,,LWtrigger,10,3,12,5,);
B(B_VARIN,,'brake lg3',10,4,12,6,);
B(B_VARIN,,QXderrickWiBrake,10,5,12,7,);
B(B_FB,RecData_Bool,Data_B_20,12,2,23,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_COMMENT,,input derrick force left [muA],1,1,14,2,);
B(B_VARIN,,LWtrigger,10,3,12,5,);
B(B_FB,RecData_UInt,Data_UI_11,12,2,23,7,);
B(B_VARIN,,'inp derrick force le',10,4,12,6,);
B(B_VARIN,,IWderrLoadSenLe,10,5,12,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_COMMENT,,input derrick force right [muA],1,1,14,2,);
B(B_VARIN,,LWtrigger,10,3,12,5,);
B(B_FB,RecData_UInt,Data_UI_12,12,2,23,7,);
B(B_VARIN,,'inp derrick force ri',10,4,12,6,);
B(B_VARIN,,IWderrLoadSenRi,10,5,12,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_COMMENT,,input counterw force 1 [muA],1,1,14,2,);
B(B_VARIN,,LWtrigger,10,3,12,5,);
B(B_FB,RecData_UInt,Data_UI_13,12,2,23,7,);
B(B_VARIN,,'inp counterw force 1',10,4,12,6,);
B(B_VARIN,,IWderrBallSenLe,10,5,12,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_COMMENT,,input counterw force 2 [muA],1,1,14,2,);
B(B_VARIN,,LWtrigger,10,3,12,5,);
B(B_FB,RecData_UInt,Data_UI_14,12,2,23,7,);
B(B_VARIN,,'inp counterw force 2',10,4,12,6,);
B(B_VARIN,,IWderrBallSenRi,10,5,12,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_COMMENT,,input coucar force left 1 [muA],1,1,14,2,);
B(B_VARIN,,LWtrigger,10,3,12,5,);
B(B_FB,RecData_UInt,Data_UI_15,12,2,23,7,);
B(B_VARIN,,'inp cc force le 1',10,4,12,6,);
B(B_VARIN,,IWforceTranLeft1,10,5,12,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_COMMENT,,input coucar force left 2 [muA],1,1,14,2,);
B(B_VARIN,,LWtrigger,10,3,12,5,);
B(B_FB,RecData_UInt,Data_UI_16,12,2,23,7,);
B(B_VARIN,,'inp cc force le 2',10,4,12,6,);
B(B_VARIN,,IWforceTranLeft2,10,5,12,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_COMMENT,,input coucar force right 1 [muA],1,1,14,2,);
B(B_VARIN,,LWtrigger,10,3,12,5,);
B(B_FB,RecData_UInt,Data_UI_17,12,2,23,7,);
B(B_VARIN,,'inp cc force ri 1',10,4,12,6,);
B(B_VARIN,,IWforceTranRigh1,10,5,12,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_COMMENT,,input coucar force right 2 [muA],1,1,14,2,);
B(B_VARIN,,LWtrigger,10,3,12,5,);
B(B_FB,RecData_UInt,Data_UI_18,12,2,23,7,);
B(B_VARIN,,'inp cc force ri 2',10,4,12,6,);
B(B_VARIN,,IWforceTranRigh2,10,5,12,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 5 ;
        NETWORK_BODY
B(B_COMMENT,,exit,1,1,9,2,);
B(B_VARIN,,TRUE,10,2,12,4,);
B(B_RETURN,,,12,2,14,4,);
        END_NETWORK_BODY
    END_NET_WORK
END_BODY
END_PROGRAM

PROGRAM GPcanJoystV110
	VAR_EXTERNAL 
		IXentrySwiClosed: BOOL:=FALSE;
			(*entry switch closed*)
		IXriJoyFronTopRi: BOOL:=FALSE;
			(*right joystick push button in front at the top right*)
		IXriJoyFronLowRi: BOOL:=FALSE;
			(*right joystick push button in front at the bottom right*)
		IXriJoyFronLowLe: BOOL:=FALSE;
			(*right joystick push button in front at the bottom left*)
		IXriJoyJackSwit: BOOL:=FALSE;
			(*right joystick push button jack switch*)
		IXriJoyFronTopLe: BOOL:=FALSE;
			(*right joystick push button in front at the top left*)
		IXriJoyTopRi: BOOL:=FALSE;
			(*right joystick push button at the top right*)
		IXriJoyTopLe: BOOL:=FALSE;
			(*right joystick push button at the top left*)
		IXleJoyTopRi: BOOL:=FALSE;
			(*left joystick push button at the top right*)
		IXleJoyTopLe: BOOL:=FALSE;
			(*left joystick push button at the top left (horn)*)
		IXleJoyFronTopRi: BOOL:=FALSE;
			(*left joystick push button in front at the top right*)
		IXleJoyFronTopLe: BOOL:=FALSE;
			(*left joystick push button in front at the top left*)
		IXleJoyFronLowRi: BOOL:=FALSE;
			(*left joystick push button in front at the bottom right*)
		IXleJoyFronLowLe: BOOL:=FALSE;
			(*left joystick push button in front at the bottom left*)
		IXleJoyJackSwit: BOOL:=FALSE;
			(*left joystick push button jack switch*)
		IXleJoyErrAnaTW: BOOL:=FALSE;
			(*left joystick error thumb wheel analog signal*)
		IXleJoyErrorAna1: BOOL:=FALSE;
			(*left joystick error analog signal 1*)
		IXleJoyErrorAna2: BOOL:=FALSE;
			(*left joystick error analog signal 2*)
		IXleJoyErrJackSw: BOOL:=FALSE;
			(*left joystick error jack switch*)
		IXleJoyErrTopFrL: BOOL:=FALSE;
			(*left joystick error bottom top front left*)
		IXleJoyErrTopFrR: BOOL:=FALSE;
			(*left joystick error bottom top front right*)
		IXleJoyErrFroLoL: BOOL:=FALSE;
			(*left joystick error bottom front low left*)
		IXleJoyErrFroLoR: BOOL:=FALSE;
			(*left joystick error bottom front low right*)
		IXleJoyErrFroToL: BOOL:=FALSE;
			(*left joystick error bottom front top left*)
		IXleJoyErrFroToR: BOOL:=FALSE;
			(*left joystick error bottom front top right*)
		IXriJoyErrAnaTW: BOOL:=FALSE;
			(*right joystick error thumb wheel analog signal*)
		IXriJoyErrorAna1: BOOL:=FALSE;
			(*right joystick error analog signal 1*)
		IXriJoyErrorAna2: BOOL:=FALSE;
			(*right joystick error analog signal 2*)
		IXriJoyErrJackSw: BOOL:=FALSE;
			(*right joystick error jack switch*)
		IXriJoyErrTopFrL: BOOL:=FALSE;
			(*right joystick error bottom top front left*)
		IXriJoyErrTopFrR: BOOL:=FALSE;
			(*right joystick error bottom top front right*)
		IXriJoyErrFroLoL: BOOL:=FALSE;
			(*right joystick error bottom front low left*)
		IXriJoyErrFroLoR: BOOL:=FALSE;
			(*right joystick error bottom front low right*)
		IXriJoyErrFroToL: BOOL:=FALSE;
			(*right joystick error bottom front top left*)
		IXriJoyErrFroToR: BOOL:=FALSE;
			(*right joystick error bottom front top right*)
		IXswitTravelGear: BOOL:=FALSE;
			(*pressure switch travelling gear*)
		IWleftJoystAnal1: INT:=0;
			(*left joystick analog signal 1*)
		IWleftJoystAnal2: INT:=0;
			(*left joystick analog signal 2*)
		IWrightJoystAna1: INT:=0;
			(*right joystick analog signal 1*)
		IWrightJoystAna2: INT:=0;
			(*right joystick analog signal 2*)
		QXengStart: BOOL:=FALSE;
			(*engine start*)
		QWriJoyAna1Vibr: INT:=0;
			(*right joystick analog signal vibrator 1*)
		QWriJoyAna2Vibr: INT:=0;
			(*right joystick analog signal vibrator 2*)
		QWleJoyAna1Vibr: INT:=0;
			(*left joystick analog signal vibrator 1*)
		QWleJoyAna2Vibr: INT:=0;
			(*left joystick analog signal vibrator 2*)
		MXsgErrorJoyst: BOOL:=FALSE;
			(*SG error joystick*)
		MXhg1WinchMove: BOOL:=FALSE;
			(*hg1 winch is moving*)
		MXhg2WinchMove: BOOL:=FALSE;
			(*hg2 winch is moving*)
		MXremContActive: BOOL:=FALSE;
			(*remote control activated*)
		MXrcChangeContro: BOOL:=FALSE;
			(*remote control switching control rc / cabine*)
		MXhg1ErrorJoyst: BOOL:=FALSE;
			(*hg 1 joystick error*)
		MXhg2ErrorJoyst: BOOL:=FALSE;
			(*hg 2 joystick error*)
		MXlgErrorJoyst: BOOL:=FALSE;
			(*lg joystick error*)
		MXjoystickInZero: BOOL:=FALSE;
			(*joystick in zero position (no control signal is active)*)
		MXjoyGrabAssembl: BOOL:=FALSE;
			(*hydr. grab joystick grab assembly*)
		MXjoyEngSpeStore: BOOL:=FALSE;
			(*engine speed store*)
		MXjoyEngSpeedUp: BOOL:=FALSE;
			(*engine speed adjust up*)
		MXjoyEngSpeedDn: BOOL:=FALSE;
			(*engine speed adjust down *)
		MXjoyBridgeFastS: BOOL:=FALSE;
			(*bridge fast speed on joystick*)
		MXjoyDgcPresel: BOOL:=FALSE;
			(*ad dyn. ground comp. preselection on joystick*)
		MXjoyWinchSyn: BOOL:=FALSE;
			(*ad winch synchronization preselection on joystick*)
		MXjoyGrapCont: BOOL:=FALSE;
			(*ad grap control preselection on joystick*)
		MXjoyLowerCont: BOOL:=FALSE;
			(*ad lower control preselection on joystick*)
		MXjoyStabWiFreeF: BOOL:=FALSE;
			(*ad stabilization winch freefall on joystick*)
		MXjoyStabWiFullP: BOOL:=FALSE;
			(*ad stabilization winch full pull on joystick*)
		MXjoySgFreeTurn: BOOL:=FALSE;
			(*sg free turn preselection on joystick*)
		MXjoyLgChange: BOOL:=FALSE;
			(*change luffing gear on joystick*)
		MXjoyHyGrabPre: BOOL:=FALSE;
			(*ad hydraulic grab preselection on joystick*)
		MXjoyPolyGrOpen: BOOL:=FALSE;
			(*ad polyp grab open digital*)
		MXjoyPolyGrClose: BOOL:=FALSE;
			(*ad polyp grab close digital*)
		MXjoyDdGearBox: BOOL:=FALSE;
			(*joy stick presel gear box drilling drive*)
		MXjoyDrillDrPre: BOOL:=FALSE;
			(*joy stick preselection drilling drive*)
		MXJoyGrabMovBaRi: BOOL:=FALSE;
			(*LeJoyTopRi grap move back or right*)
		MXJoyGrabMovFoLe: BOOL:=FALSE;
			(*LeJoyFronTopRi grap move forward*)
		MXJoyPreSlewLeRi: BOOL:=FALSE;
			(*LeJoyFronTopRi preselection grab slewing or incline le/ri *)
		MXjoyGrabSlewLe: BOOL:=FALSE;
			(*add. hydr. grab slewing left at joy stick button*)
		MXjoyGrabSlewRi: BOOL:=FALSE;
			(*add. hydr. grab slewing right at joy stick button*)
		MXjoyGrMoorFreef: BOOL:=FALSE;
			(*ad. grab mooring freefall on joystick*)
		MXjoyMagUnitOn: BOOL:=FALSE;
			(*joystick button magnet on*)
		MXjoyMagUnitOff: BOOL:=FALSE;
			(*joystick button magnet off*)
		MXjoyGrabSlewPre: BOOL:=FALSE;
			(*add. preselection polyp grab/conc. crusher slewing on Joystick *)
		MXjoySSGrabOpCl: BOOL:=FALSE;
			(*SM/SB: hydr. grab joystick open / close*)
		MXjoyHyGrabTurnL: BOOL:=FALSE;
			(*hydr. grab joystick turn left*)
		MXjoyHyGrabTurnR: BOOL:=FALSE;
			(*hydr. grab joystick turn right*)
		MXpreClamClosJoy: BOOL:=FALSE;
			(*preselection clamp close with joystick button*)
		MXpreHam_VibJoy: BOOL:=FALSE;
			(*preselection vibrator/hammer with joystick*)
		MXexDrPreJoy: BOOL:=FALSE;
			(*preselection excetric drive with joy stick*)
		MXjoyExcentDrIn: BOOL:=FALSE;
			(*excetric drive in with joy stick*)
		MXjoyExcentDrOut: BOOL:=FALSE;
			(*excetric drive out with joy stick*)
		MXjoyLeadAdjust1: BOOL:=FALSE;
			(*leader adjustment 1 on joystick*)
		MXjoyLeadAdjust2: BOOL:=FALSE;
			(*leader adjustment 2 on joystick*)
		MXjoyDestrConTen: BOOL:=FALSE;
			(*add. preselection destruction constant tension (clutch)*)
		MXswitTravelGear: BOOL:=FALSE;
			(*travelling gear is activated*)
		MXpreGrabSlew: BOOL:=FALSE;
			(*preselection  polyp grab/conc. crusher slewing*)
		MXgrabPreJoySig: BOOL:=FALSE;
			(*preselection joy stick signal grab*)
		MXz6EnJoySig: BOOL:=FALSE;
			(*Z6 enable joystick signal*)
		MXz3EnJoySig: BOOL:=FALSE;
			(*Z3 enable jostick signal*)
		MXz4EnJoySig: BOOL:=FALSE;
			(*Z4 enable joystick signal*)
		MXz2EnJoySig: BOOL:=FALSE;
			(*Z2 enable joystick signal*)
		MXlg2EnJoySigSG: BOOL:=FALSE;
			(*lg2 enable joystick signal (sg joystick)*)
		MXlg2EnJoySigLG: BOOL:=FALSE;
			(*lg2 enable joystick signal (lg joystick)*)
		MXlg2EnJoySigHG2: BOOL:=FALSE;
			(*lg2 enable joystick signal (hg2 joystick)*)
		MXz6PreJoySig: BOOL:=FALSE;
			(*Z6 preselect joystick signal*)
		MXz3PreJoySig: BOOL:=FALSE;
			(*Z3 preselect jostick signal*)
		MXz4PreJoySig: BOOL:=FALSE;
			(*Z4 preselect joystick signal*)
		MXz2PreJoySig: BOOL:=FALSE;
			(*Z2 preselect joystick signal*)
		MXlg2PreJoySigSG: BOOL:=FALSE;
			(*lg2 preselect joystick signal (sg joystick)*)
		MXlg2PreJoySigLG: BOOL:=FALSE;
			(*lg2 preselect joystick signal (lg joystick)*)
		MXlg2PreJoySiHG2: BOOL:=FALSE;
			(*lg2 preselect joystick signal (hg2 joystick)*)
		MXrelPassTwiPump: BOOL:=FALSE;
			(*release pump for passenger transportation winch*)
		MXddPreJoySig: BOOL:=FALSE;
			(*drilling drive preselect joystick signal*)
		MXmoorPreJoySig: BOOL:=FALSE;
			(*ad. mooring presel. joy stick signal*)
		MXmoorEnJoySig: BOOL:=FALSE;
			(*mooring enable joystick signal *)
		MXlgJoySigLock: BOOL:=FALSE;
			(*lg joy stick signal locked for other function*)
		MXsgJoySigLock: BOOL:=FALSE;
			(*sg joy stick signal locked for other function*)
		MXgrabEnJoySig: BOOL:=FALSE;
			(*grab enable joystick signal *)
		MXddEnJoySig: BOOL:=FALSE;
			(*drilling drive enable joystick signal *)
		MXgrEnJoySigSlew: BOOL:=FALSE;
			(*add. enable polyp grab/conc. crusher slewing*)
		MXgrAdPreJoySig: BOOL:=FALSE;
			(*preselection joy stick signal grab adjustment *)
		MXgrAdEnJoySig: BOOL:=FALSE;
			(*enable joy stick signal grab adjustment *)
		MXhg1JoySigLock: BOOL:=FALSE;
			(*hg1 joy stick signal locked for other function*)
		MXhg2JoySigLock: BOOL:=FALSE;
			(*hg2 joy stick signal locked for other function*)
		MXderrEnJoySigSG: BOOL:=FALSE;
			(*derrick enable joystick signal (sg joystick)*)
		MXderrEnJoySigLG: BOOL:=FALSE;
			(*derrick enable joystick signal (lg joystick)*)
		MXderrEnJoySiHG2: BOOL:=FALSE;
			(*derrick enable joystick signal (hg2 joystick)*)
		MXecRiJoyAna1Vib: BOOL:=FALSE;
			(*external control release right joyst. vibr.sig.1*)
		MXecRiJoyAna2Vib: BOOL:=FALSE;
			(*external control release right joyst. vibr.sig.2*)
		MXecLeJoyAna1Vib: BOOL:=FALSE;
			(*external control release left joyst. vibr.sig.1*)
		MXecLeJoyAna2Vib: BOOL:=FALSE;
			(*external control release left joyst. vibr.sig.2*)
		MXadLEHydrGrab: BOOL:=FALSE;
			(*add. leffer hydraulic grab control*)
		MXenabKelGrabOpe: BOOL:=FALSE;
			(*enable add. kelly grab operation*)
		MXenabHyGrabHose: BOOL:=FALSE;
			(*enable add. hydr. grab with hose winch *)
		MXadSBHydrGrab: BOOL:=FALSE;
			(*add. soletanche bachy hydraulic grab control*)
		MXadSMHydrGrab: BOOL:=FALSE;
			(*add. soilmec hydraulic grab control*)
		MXenablDrillOper: BOOL:=FALSE;
			(*enable drilling drive operation*)
		MXenablVibOperat: BOOL:=FALSE;
			(*enable vibrator operation*)
		MXenablHamOperat: BOOL:=FALSE;
			(*enable hammer operation*)
		MXpassWinchPres: BOOL:=FALSE;
			(*preselection passenger winch *)
		MXpwEnJoySig: BOOL:=FALSE;
			(*passenger winch enable joystick signal *)
		MXsetZeroTravelG: BOOL:=FALSE;
			(*set zero position travelling gear*)
		MXlgPreLockSig: BOOL:=FALSE;
			(*luffing gear preselection lock signal *)
		MXsgPreLockSig: BOOL:=FALSE;
			(*sg preselection lock signal *)
		MXhg1PreLockSig: BOOL:=FALSE;
			(*hg1 preselection lock signal *)
		MXhg2PreLockSig: BOOL:=FALSE;
			(*hg2 preselection lock signal *)
		MXmomRegEnabled: BOOL:=FALSE;
			(*SG moment regulator enabled*)
		MXassemblyOperat: BOOL:=FALSE;
			(*assembly operation*)
		MXhoCylPreJoySig: BOOL:=FALSE;
			(*hoisting cylinder preselect joystick signal*)
		MXhoCylEnJoySig: BOOL:=FALSE;
			(*hoisting cylinder enable joystick signal*)
		MXaxwPreJoySigLG: BOOL:=FALSE;
			(*aux.winch preselect joystick signal (lg joystick)*)
		MXaxwPreJoySiHG2: BOOL:=FALSE;
			(*aux.winch preselect joystick signal (hg2 joystick)*)
		MXaxwEnJoySigLG: BOOL:=FALSE;
			(*aux.winch enable joystick signal (lg joystick)*)
		MXaxwEnJoySigHG2: BOOL:=FALSE;
			(*aux.winch enable joystick signal (hg2 joystick)*)
		MXadwPreJoySig: BOOL:=FALSE;
			(*add.winch preselect joystick signal (lg joystick)*)
		MXadwEnJoySig: BOOL:=FALSE;
			(*add.winch enable joystick signal (lg joystick)*)
		MXgrabCtrlPres: BOOL:=FALSE;
			(*grab control preselected *)
		MXwinSynPres: BOOL:=FALSE;
			(*winch synchronization preselected*)
		MWecRiJoyAna1Vib: INT:=0;
			(*ext. cont. vibr. right joystick sig. 1*)
		MWecRiJoyAna2Vib: INT:=0;
			(*ext. cont. vibr. right joystick sig. 2*)
		MWecLeJoyAna1Vib: INT:=0;
			(*ext. cont. vibr. left joystick sig. 1*)
		MWecLeJoyAna2Vib: INT:=0;
			(*ext. cont. vibr. left joystick sig. 2*)
		MDhg1JoySignal: REAL:=0.0;
			(*HG 1 joystick signal in +/-[%]*)
		MDhg2JoySignal: REAL:=0.0;
			(*HG 2 joystick signal in +/-[%]*)
		MDlgJoySignal: REAL:=0.0;
			(*LG joystick signal in +/-[%]*)
		MDsgJoySignal: REAL:=0.0;
			(*SG joystick signal in +/-[%]*)
		MDhg1PreJoySig: REAL:=0.0;
			(*HG 1 joystick signal  before MUX +/- [%]*)
		MDhg2PreJoySig: REAL:=0.0;
			(*HG 2 joystick signal before MUX +/-[%]*)
		MDlgPreJoySig: REAL:=0.0;
			(*LG joystick signal before MUX +/-[%]*)
		MDsgPreJoySig: REAL:=0.0;
			(*SG joystick signal before MUX +/-[%]*)
		MDhg1PumpSignal: REAL:=0.0;
			(*HG 1 analog signal pump in [%]*)
		MDhg2PumpSignal: REAL:=0.0;
			(*HG 2 analog signal pump in [%]*)
		MDlgPumpSignal: REAL:=0.0;
			(*LG analog signal pump in [%]*)
		MDlg2PumpSignal: REAL:=0.0;
			(*LG 2 analog signal pump in [%]*)
		MDlg2JoySigSG: REAL:=0.0;
			(*lg2 analog signal joystick sg +/-[%]*)
		MDlg2JoySigLG: REAL:=0.0;
			(*lg2 analog signal joystick lg +/-[%]*)
		MDlg2JoySigHG2: REAL:=0.0;
			(*lg2 analog signal joystick hg2 +/-[%]*)
		MDsgPumpSignal: REAL:=0.0;
			(*SG analog signal pump in [%]*)
		MDderrPumpSignal: REAL:=0.0;
			(*derrick winch analog signal*)
		MDgrabPumpSignal: REAL:=0.0;
			(*hydraulic grab pump analog signal*)
		MDriJoyVibr1Ext: REAL:=0.0;
			(*right joystick vibrator 1 external analog signal*)
		MDriJoyVibr2Ext: REAL:=0.0;
			(*right joystick vibrator 2 external analog signal*)
		MDleJoyVibr1Ext: REAL:=0.0;
			(*left joystick vibrator 1 external analog signal*)
		MDleJoyVibr2Ext: REAL:=0.0;
			(*left joystick vibrator 2 external analog signal*)
		MDz3JoySignal: REAL:=0.0;
			(*leader turning motor / Z3 analog signal joystick +/-[%]*)
		MDz3PumpSignal: REAL:=0.0;
			(*leader turning motor / Z3 analog pump signal*)
		MDz2JoySignal: REAL:=0.0;
			(*Z2 right analog signal joystick +/-[%]*)
		MDz2PumpSignal: REAL:=0.0;
			(*Z2 right analog pump signal*)
		MDz4JoySignal: REAL:=0.0;
			(*Z4 analog signal joystick +/-[%]*)
		MDz4PumpSignal: REAL:=0.0;
			(*Z4 analog pump signal*)
		MDz6JoySignal: REAL:=0.0;
			(*Z2 left analog signal joystick +/-[%]*)
		MDz6PumpSignal: REAL:=0.0;
			(*Z2 left analog pump signal*)
		MDddJoySignal: REAL:=0.0;
			(*drilling drive analog signal joystick +/-[%]*)
		MDddPumpSignal: REAL:=0.0;
			(*drilling drive pump analog signal*)
		MDgrJoySigSlew: REAL:=0.0;
			(*grab slewing analog signal joystick +/-[%]*)
		MDgrabJoySignal: REAL:=0.0;
			(*grab analog signal joystick +/-[%]*)
		MDhoCylJoySignal: REAL:=0.0;
			(*hoisting cylinder analog signal joystick +/-[%]*)
		MDmoorPumpSignal: REAL:=0.0;
			(*mooring pump signal*)
		MDmoorJoySignal: REAL:=0.0;
			(*mooring analog signal joystick +/-[%]*)
		MDpwJoySignal: REAL:=0.0;
			(*passenger winch joy stick signal*)
		MDgrAdJoySignal: REAL:=0.0;
			(*grab adjustment joystick signal*)
		MDgrabAdPuSig: REAL:=0.0;
			(*grab adjustment analog pump signal*)
		MDgrSlewPuSig: REAL:=0.0;
			(*grab slewing pump signal*)
		MDaxwJoySigLG: REAL:=0.0;
			(*aux. winch analog signal joystick lg +/-[%]*)
		MDaxwJoySigHG2: REAL:=0.0;
			(*aux. winch analog signal joystick hg2 +/-[%]*)
		MDaxwPumpSignal: REAL:=0.0;
			(*aux. winch analog signal pump in [%]*)
		MDhocPumpSignal: REAL:=0.0;
			(*hoisting cylinder analog signal pump in [%]*)
		MDadwJoySig: REAL:=0.0;
			(*add. winch analog signal joystick hg2 +/-[%]*)
		MDadwPumpSignal: REAL:=0.0;
			(*add. winch analog signal pump in [%]*)
		MRleJoyYSymNr: REAL:=0.0;
			(*left joystick symbol number Y direction *)
		MRleJoyXSymNr: REAL:=0.0;
			(*left joystick symbol number X direction *)
		MRriJoyYSymNr: REAL:=0.0;
			(*right joystick symbol number Y direction *)
		MRriJoyXSymNr: REAL:=0.0;
			(*right joystick symbol number X direction *)
	END_VAR
	VAR_EXTERNAL CONSTANT
		MSG_ERROR: UINT:=0;
			(* message priority: "error" *)
		MSG_DEBUG: UINT:=0;
	END_VAR
	VAR_EXTERNAL RETAIN
		MX2TJoystick: BOOL:=FALSE;
			(*enable double T joystick*)
		MXhg1RopeLenMeas: BOOL:=FALSE;
			(*rope lenght measuring hg 1 enabled*)
		MXhg2RopeLenMeas: BOOL:=FALSE;
			(*rope lenght measuring hg 2 enabled*)
		MXadHgLowerCont: BOOL:=FALSE;
			(*additional device lowering control for HG*)
	END_VAR
	VAR_EXTERNAL CONSTANT RETAIN
		CX2TJoystick: BOOL:=FALSE;
			(*enable double T joystick*)
		CXjoystVibrHg1: BOOL:=FALSE;
			(*enable joystick vibrator hg 1*)
		CXjoystVibrHg2: BOOL:=FALSE;
			(*enable joystick vibrator hg 2*)
		CXjoystVibrLg: BOOL:=FALSE;
			(*enable joystick vibrator lg*)
		CXjoystVibrSg: BOOL:=FALSE;
			(*enable joystick vibrator sg*)
		CXjoystVibrAux: BOOL:=FALSE;
			(*enable joystick vibrator auxiliary winch*)
		CXadChangeJoysti: BOOL:=FALSE;
			(*add. change joystick hg1 and hg2*)
		CXexDrOnJoyStick: BOOL:=FALSE;
			(*excentric drive on joy stick *)
		CXdestruConsTens: BOOL:=FALSE;
			(*add. constant tension at destruction operation*)
	END_VAR
	VAR 
		LXinitOk: BOOL:=FALSE;
			(*init completed*)
		LXstart: BOOL:=FALSE;
		LXsetStopJoySig: BOOL:=FALSE;
		LXgrSlewPumpZero: BOOL:=FALSE;
		LXsgPumpZero: BOOL:=FALSE;
		LXlgPumpZero: BOOL:=FALSE;
		LXhg1PumpZero: BOOL:=FALSE;
		LXhg2PumpZero: BOOL:=FALSE;
		LXlg2PumpZero: BOOL:=FALSE;
		LXderrPumpZero: BOOL:=FALSE;
		LXz2PumpZero: BOOL:=FALSE;
		LXz4PumpZero: BOOL:=FALSE;
		LXz3PumpZero: BOOL:=FALSE;
		LXz6PumpZero: BOOL:=FALSE;
		LXmoorPumpZero: BOOL:=FALSE;
		LXddPumpZero: BOOL:=FALSE;
		LXpwPumpZero: BOOL:=FALSE;
		LXgrabPumpZero: BOOL:=FALSE;
		LXgrAdPumpZero: BOOL:=FALSE;
		LXriJoyFronTopRi: BOOL:=FALSE;
			(*right joystick push button in front at the top right*)
		LXriJoyFronLowRi: BOOL:=FALSE;
			(*right joystick push button in front at the bottom right*)
		LXriJoyFronLowLe: BOOL:=FALSE;
			(*right joystick push button in front at the bottom left*)
		LXriJoyJackSwit: BOOL:=FALSE;
			(*right joystick push button jack switch*)
		LXriJoyFronTopLe: BOOL:=FALSE;
			(*right joystick push button in front at the top left*)
		LXriJoyTopRi: BOOL:=FALSE;
			(*right joystick push button at the top right*)
		LXriJoyTopLe: BOOL:=FALSE;
			(*right joystick push button at the top left*)
		LXleJoyTopRi: BOOL:=FALSE;
			(*left joystick push button at the top right*)
		LXleJoyTopLe: BOOL:=FALSE;
			(*left joystick push button at the top left (horn)*)
		LXleJoyFronTopRi: BOOL:=FALSE;
			(*left joystick push button in front at the top right*)
		LXleJoyFronTopLe: BOOL:=FALSE;
			(*left joystick push button in front at the top left*)
		LXleJoyFronLowRi: BOOL:=FALSE;
			(*left joystick push button in front at the bottom right*)
		LXleJoyFronLowLe: BOOL:=FALSE;
			(*left joystick push button in front at the bottom left*)
		LXleJoyJackSwit: BOOL:=FALSE;
			(*left joystick push button jack switch*)
		LXsetZeroRight1: BOOL:=FALSE;
		LXsetZeroRight2: BOOL:=FALSE;
		LXsetZeroLeft1: BOOL:=FALSE;
		LXsetZeroLeft2: BOOL:=FALSE;
		LXaxwPumpZero: BOOL:=FALSE;
		LXhocPumpZero: BOOL:=FALSE;
		LXadwPumpZero: BOOL:=FALSE;
		LWleftJoystAnal1: INT:=0;
			(*left joystick analog signal 1*)
		LWleftJoystAnal2: INT:=0;
			(*left joystick analog signal 2*)
		LWrightJoystAna1: INT:=0;
			(*right joystick analog signal 1*)
		LWrightJoystAna2: INT:=0;
			(*right joystick analog signal 2*)
		Message1: MsgRealReal;
		Message2: MsgRealReal;
		Message3: MsgRealReal;
		Message4: MsgRealReal;
		Message5: MsgRealReal;
		Message6: MsgRealReal;
		Message7: MsgRealReal;
		Message8: MsgRealReal;
		Message9: MsgRealReal;
		SR1: SR;
		RS1: RS;
		RS2: RS;
		RS3: RS;
		RS4: RS;
		RS5: RS;
		RS6: RS;
		RS7: RS;
		Word2BitMask1: Word2BitMask;
		R_TRIG1: R_TRIG;
		R_TRIG2: R_TRIG;
		R_TRIG3: R_TRIG;
		R_TRIG4: R_TRIG;
		CorrValue_Bool1: CorrValue_Bool;
		CorrValue_Bool2: CorrValue_Bool;
		CorrValue_Bool3: CorrValue_Bool;
		CorrValue_Bool4: CorrValue_Bool;
		CorrValue_Bool5: CorrValue_Bool;
		CorrValue_Bool6: CorrValue_Bool;
		FB_joy2_8fun1: FB_joy2_10fuV010;
		FB_joy2_8fun2: FB_joy2_10fuV010;
		FB_joy2_8fun3: FB_joy2_10fuV010;
		FB_joy2_8fun4: FB_joy2_10fuV010;
		FB_joy2_8fun5: FB_joy2_10fuV010;
		FB_joy2_8fun6: FB_joy2_10fuV010;
		FB_joy2_8fun7: FB_joy2_10fuV010;
		FB_joy2_8fun8: FB_joy2_10fuV010;
		FB_joy2_8fun9: FB_joy2_10fuV010;
		FB_joy2_8fun10: FB_joy2_10fuV010;
		FB_joy2_8fun11: FB_joy2_10fuV010;
		FB_joy2_8fun12: FB_joy2_10fuV010;
	END_VAR
'FBD'
BODY
    WORKSPACE
        NETWORK_LIST_TYPE := NWTYPEFBD ;
        ACTIVE_NETWORK := 0 ;
    END_WORKSPACE
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,init first time ,1,1,27,2,);
B(B_COMMENT,,Sprung nach init entfällt. Programm sollte ab dem  1 PA durchlaufen werden dem FB initalisiert werden,2,3,39,4,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_FB,SR,SR1,21,3,26,7,);
B(B_VARIN,,MXremContActive,33,5,35,7,);
B(B_F,@AND-2,,35,3,40,7,0N);
B(B_VAROUT,,MX2TJoystick,40,4,42,6,);
B(B_F,@AND-2,,11,3,16,7,N);
B(B_VARIN,,CX2TJoystick,9,5,11,7,);
B(B_VARIN,,LXstart,9,4,11,6,);
B(B_VARIN,,FALSE,19,5,21,7,);
B(B_COMMENT,,check 2-T-joystick,1,1,27,2,);
L(26,5,35,5);
L(16,5,21,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VAROUT,,LXstart,11,1,13,3,);
B(B_VARIN,,TRUE,9,1,11,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 76 ;
        NETWORK_BODY
B(B_F,EQ_R,,14,3,19,7,);
B(B_VARIN,,0.0,11,4,13,6,);
B(B_VARIN,,MDsgPumpSignal,10,5,12,7,);
B(B_F,EQ_R,,14,7,19,11,);
B(B_VARIN,,MDlgPumpSignal,10,9,12,11,);
B(B_F,EQ_R,,14,11,19,15,);
B(B_F,EQ_R,,14,15,19,19,);
B(B_VARIN,,MDhg1PumpSignal,10,13,12,15,);
B(B_VARIN,,MDhg2PumpSignal,10,17,12,19,);
B(B_F,EQ_R,,14,19,19,23,);
B(B_F,EQ_R,,14,23,19,27,);
B(B_VARIN,,MDderrPumpSignal,10,25,12,27,);
B(B_VARIN,,MDlg2PumpSignal,10,21,12,23,);
B(B_COMMENT,,generate pump zero signal,1,1,28,2,);
B(B_VARIN,,MDz2PumpSignal,10,29,12,31,);
B(B_VARIN,,MDz4PumpSignal,10,33,12,35,);
B(B_F,EQ_R,,14,27,19,31,);
B(B_F,EQ_R,,14,31,19,35,);
B(B_F,EQ_R,,14,35,19,39,);
B(B_VARIN,,MDz3PumpSignal,10,37,12,39,);
B(B_F,EQ_R,,14,39,19,43,);
B(B_VARIN,,MDz6PumpSignal,10,41,12,43,);
B(B_VARIN,,MDddPumpSignal,12,73,14,75,);
B(B_F,EQ_R,,14,43,19,47,);
B(B_VARIN,,MDmoorPumpSignal,10,45,12,47,);
B(B_VAROUT,,LXsgPumpZero,19,4,21,6,);
B(B_VAROUT,,LXlgPumpZero,19,8,21,10,);
B(B_VAROUT,,LXhg1PumpZero,19,12,21,14,);
B(B_VAROUT,,LXhg2PumpZero,19,16,21,18,);
B(B_VAROUT,,LXlg2PumpZero,19,20,21,22,);
B(B_VAROUT,,LXderrPumpZero,19,24,21,26,);
B(B_VAROUT,,LXz2PumpZero,19,28,21,30,);
B(B_VAROUT,,LXz4PumpZero,19,32,21,34,);
B(B_VAROUT,,LXz3PumpZero,19,36,21,38,);
B(B_VAROUT,,LXz6PumpZero,19,40,21,42,);
B(B_VAROUT,,LXmoorPumpZero,19,44,21,46,);
B(B_VAROUT,,LXddPumpZero,19,72,21,74,);
B(B_F,EQ_R,,14,47,19,51,);
B(B_VAROUT,,LXgrabPumpZero,19,48,21,50,);
B(B_VARIN,,MDgrabPumpSignal,10,49,12,51,);
B(B_F,EQ_R,,14,51,19,55,);
B(B_VAROUT,,LXgrAdPumpZero,19,52,21,54,);
B(B_VARIN,,MDgrabAdPuSig,10,53,12,55,);
B(B_F,EQ_R,,14,55,19,59,);
B(B_VARIN,,MDgrSlewPuSig,10,57,12,59,);
B(B_VAROUT,,LXgrSlewPumpZero,19,56,21,58,);
B(B_F,EQ_R,,14,59,19,63,);
B(B_VAROUT,,LXaxwPumpZero,19,60,21,62,);
B(B_VARIN,,MDaxwPumpSignal,10,61,12,63,);
B(B_F,EQ_R,,14,63,19,67,);
B(B_VARIN,,MDhocPumpSignal,10,65,12,67,);
B(B_VAROUT,,LXhocPumpZero,19,64,21,66,);
B(B_F,EQ_R,,14,71,19,75,);
B(B_F,EQ_R,,14,67,19,71,);
B(B_VARIN,,MDadwPumpSignal,10,69,12,71,);
B(B_VAROUT,,LXadwPumpZero,19,68,21,70,);
L(13,5,13,73);
L(12,26,14,26);
L(12,22,14,22);
L(13,21,14,21);
L(13,17,14,17);
L(13,13,14,13);
L(13,9,14,9);
L(13,5,14,5);
L(12,6,14,6);
L(12,10,14,10);
L(12,14,14,14);
L(12,18,14,18);
L(12,30,14,30);
L(12,34,14,34);
L(12,38,14,38);
L(13,73,14,73);
L(13,25,14,25);
L(13,29,14,29);
L(13,33,14,33);
L(13,37,14,37);
L(12,42,14,42);
L(13,41,14,41);
L(12,46,14,46);
L(13,45,14,45);
L(13,49,14,49);
L(12,50,14,50);
L(13,53,14,53);
L(12,54,14,54);
L(13,57,14,57);
L(12,58,14,58);
L(13,61,14,61);
L(12,62,14,62);
L(13,65,14,65);
L(12,66,14,66);
L(13,69,14,69);
L(12,70,14,70);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 5 ;
        NETWORK_BODY
B(B_VARIN,,MXrelPassTwiPump,11,2,13,4,);
B(B_F,not,,13,1,18,4,);
B(B_VAROUT,,LXpwPumpZero,18,2,20,4,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_COMMENT,,jump to multiplexer cause of signal of remote control,1,1,27,2,);
B(B_VARIN,,MXremContActive,10,4,12,6,);
B(B_F,@OR-2,,12,3,17,7,);
B(B_VARIN,,MXrcChangeContro,10,5,12,7,);
B(B_JUMP,,mux,17,4,19,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_COMMENT,,set stop joystick signal by certain event,1,1,27,2,);
B(B_VARIN,,IXentrySwiClosed,10,4,12,6,);
B(B_FB,R_TRIG,R_TRIG1,12,3,19,6,);
B(B_VARIN,,QXengStart,10,7,12,9,);
B(B_FB,R_TRIG,R_TRIG2,12,6,19,9,);
B(B_F,@OR-2,,19,3,24,7,);
B(B_VAROUT,,LXsetStopJoySig,24,4,26,6,);
L(19,6,19,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_FB,RS,RS1,17,1,22,5,);
B(B_VARIN,,LXsetStopJoySig,15,2,17,4,);
B(B_VARIN,,0,20,8,22,10,);
B(B_F,sel,,22,5,27,10,);
B(B_VAROUT,,LWrightJoystAna1,27,6,29,8,);
B(B_F,@EQ-2,,12,4,17,8,);
B(B_VARIN,,0,10,5,12,7,);
B(B_VARIN,,IWrightJoystAna1,10,7,12,9,);
B(B_COMMENT,,hold joy stick signal to zero~ till joy stick is back in zeroø^position,32,1,55,3,);
B(B_VAROUT,,LXsetZeroRight1,22,2,24,4,);
L(22,3,22,7);
L(17,4,17,6);
L(12,8,22,8);
L(12,7,12,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_FB,RS,RS2,17,1,22,5,);
B(B_VARIN,,LXsetStopJoySig,15,2,17,4,);
B(B_VARIN,,0,20,8,22,10,);
B(B_F,sel,,22,5,27,10,);
B(B_VAROUT,,LWrightJoystAna2,27,6,29,8,);
B(B_F,@EQ-2,,12,4,17,8,);
B(B_VARIN,,0,10,5,12,7,);
B(B_VARIN,,IWrightJoystAna2,10,7,12,9,);
B(B_COMMENT,,hold joy stick signal to zero~ till joy stick is back in zeroø^position,32,1,55,3,);
B(B_VAROUT,,LXsetZeroRight2,22,2,24,4,);
L(22,3,22,7);
L(17,4,17,6);
L(12,8,22,8);
L(12,7,12,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_FB,RS,RS3,17,1,22,5,);
B(B_VARIN,,LXsetStopJoySig,15,2,17,4,);
B(B_VARIN,,0,20,8,22,10,);
B(B_F,sel,,22,5,27,10,);
B(B_VAROUT,,LWleftJoystAnal1,27,6,29,8,);
B(B_F,@EQ-2,,12,4,17,8,);
B(B_VARIN,,0,10,5,12,7,);
B(B_VARIN,,IWleftJoystAnal1,10,7,12,9,);
B(B_COMMENT,,hold joy stick signal to zero~ till joy stick is back in zeroø^position,32,1,55,3,);
B(B_VAROUT,,LXsetZeroLeft1,22,2,24,4,);
L(22,3,22,7);
L(17,4,17,6);
L(12,8,22,8);
L(12,7,12,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_FB,RS,RS4,17,1,22,5,);
B(B_VARIN,,LXsetStopJoySig,15,2,17,4,);
B(B_VARIN,,0,20,8,22,10,);
B(B_F,sel,,22,5,27,10,);
B(B_VAROUT,,LWleftJoystAnal2,27,6,29,8,);
B(B_F,@EQ-2,,12,4,17,8,);
B(B_VARIN,,0,10,5,12,7,);
B(B_VARIN,,IWleftJoystAnal2,10,7,12,9,);
B(B_COMMENT,,hold joy stick signal to zero~ till joy stick is back in zeroø^position,32,1,55,3,);
B(B_VAROUT,,LXsetZeroLeft2,22,2,24,4,);
L(22,3,22,7);
L(17,4,17,6);
L(12,8,22,8);
L(12,7,12,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_FB,MsgRealReal,Message9,24,3,33,10,);
B(B_VARIN,,LXsetZeroRight1,10,5,12,7,);
B(B_VARIN,,LXsetZeroRight2,10,6,12,8,);
B(B_VARIN,,LXsetZeroLeft1,10,7,12,9,);
B(B_VARIN,,LXsetZeroLeft2,10,8,12,10,);
B(B_VARIN,,MSG_DEBUG,22,6,24,8,);
B(B_COMMENT,,set message in case of joystick neutral position required,1,1,27,2,);
B(B_VARIN,,804,22,4,24,6,);
B(B_VARIN,,MXsetZeroTravelG,10,9,12,11,);
B(B_F,@OR-5,,12,4,17,11,);
L(17,6,24,6);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 25 ;
        NETWORK_BODY
B(B_FB,RS,RS5,30,2,35,6,);
B(B_VARIN,,LXsetStopJoySig,28,3,30,5,);
B(B_VARIN,,0,33,9,35,11,);
B(B_F,sel,,35,6,40,11,);
B(B_F,@EQ-2,,25,5,30,9,);
B(B_VARIN,,0,23,6,25,8,);
B(B_F,BitMask2Word,,12,6,23,24,);
B(B_FB,Word2BitMask,Word2BitMask1,41,6,52,24,);
B(B_COMMENT,,set joystick buttons to zero by certain event,1,1,27,2,);
B(B_VARIN,,IXriJoyFronTopRi,10,7,12,9,);
B(B_VARIN,,IXriJoyFronTopLe,10,8,12,10,);
B(B_VARIN,,IXriJoyFronLowRi,10,9,12,11,);
B(B_VARIN,,IXriJoyFronLowLe,10,10,12,12,);
B(B_VARIN,,IXriJoyTopRi,10,11,12,13,);
B(B_VARIN,,IXriJoyTopLe,10,12,12,14,);
B(B_VARIN,,IXriJoyJackSwit,10,13,12,15,);
B(B_VARIN,,IXleJoyFronTopRi,10,14,12,16,);
B(B_VARIN,,IXleJoyFronTopLe,10,15,12,17,);
B(B_VARIN,,IXleJoyFronLowRi,10,16,12,18,);
B(B_VARIN,,IXleJoyFronLowLe,10,17,12,19,);
B(B_VARIN,,IXleJoyTopLe,10,18,12,20,);
B(B_VARIN,,IXleJoyTopRi,10,19,12,21,);
B(B_VARIN,,IXleJoyJackSwit,10,20,12,22,);
B(B_VARIN,,FALSE,10,21,12,23,);
B(B_VARIN,,FALSE,10,22,12,24,);
B(B_VAROUT,,LXriJoyFronTopRi,52,7,54,9,);
B(B_VAROUT,,LXriJoyFronTopLe,52,8,54,10,);
B(B_VAROUT,,LXriJoyFronLowRi,52,9,54,11,);
B(B_VAROUT,,LXriJoyFronLowLe,52,10,54,12,);
B(B_VAROUT,,LXriJoyTopRi,52,11,54,13,);
B(B_VAROUT,,LXriJoyTopLe,52,12,54,14,);
B(B_VAROUT,,LXriJoyJackSwit,52,13,54,15,);
B(B_VAROUT,,LXleJoyFronTopRi,52,14,54,16,);
B(B_VAROUT,,LXleJoyFronTopLe,52,15,54,17,);
B(B_VAROUT,,LXleJoyFronLowRi,52,16,54,18,);
B(B_VAROUT,,LXleJoyFronLowLe,52,17,54,19,);
B(B_VAROUT,,LXleJoyTopLe,52,18,54,20,);
B(B_VAROUT,,LXleJoyTopRi,52,19,54,21,);
B(B_VAROUT,,LXleJoyJackSwit,52,20,54,22,);
L(35,4,35,8);
L(30,5,30,7);
L(25,9,35,9);
L(25,8,25,9);
L(23,8,25,8);
L(40,8,41,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 14 ;
        NETWORK_BODY
B(B_VARIN,,MX2TJoystick,12,4,14,6,);
B(B_F,sel,,15,3,20,8,);
B(B_COMMENT,,joystick buttons,1,1,27,2,);
B(B_VARIN,,LXleJoyFronLowLe,10,6,12,8,);
B(B_VARIN,,LXriJoyJackSwit,11,5,13,7,);
B(B_F,sel,,15,8,20,13,);
B(B_VARIN,,LXriJoyFronTopRi,13,11,15,13,);
B(B_VAROUT,,MXjoyHyGrabPre,20,4,22,6,);
B(B_VAROUT,,MXjoyGrMoorFreef,20,9,22,11,);
B(B_VAROUT,,MXjoyDrillDrPre,20,5,22,7,);
L(13,6,15,6);
L(13,6,13,11);
L(12,7,15,7);
L(13,11,15,11);
L(14,5,14,10);
L(14,10,15,10);
L(14,5,15,5);
L(20,5,20,6);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_VAROUT,,MXjoyLowerCont,17,2,19,4,);
B(B_VARIN,,MXadHgLowerCont,16,6,18,8,);
B(B_VARIN,,CXadChangeJoysti,10,2,12,4,);
B(B_F,sel,,12,1,17,6,);
B(B_VARIN,,LXriJoyFronTopRi,10,3,12,5,);
B(B_VARIN,,LXleJoyTopRi,10,4,12,6,);
B(B_VARIN,,MXadLEHydrGrab,16,7,18,9,);
B(B_VARIN,,MXenabKelGrabOpe,16,8,18,10,);
B(B_VARIN,,MXenabHyGrabHose,16,9,18,11,);
B(B_F,@AND-5,,18,4,23,11,0NNNN);
B(B_VAROUT,,MXjoyLgChange,23,5,25,7,);
L(17,3,17,6);
L(17,6,18,6);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,preselect dgc / hydr. grab move back-right,1,1,26,2,);
B(B_VARIN,,CXadChangeJoysti,12,4,14,6,);
B(B_F,sel,,14,3,19,8,);
B(B_VARIN,,LXriJoyFronTopRi,10,6,12,8,);
B(B_VARIN,,LXleJoyTopRi,11,5,13,7,);
B(B_VAROUT,,MXJoyGrabMovBaRi,13,8,15,10,);
B(B_VAROUT,,MXjoyDgcPresel,19,4,21,6,);
B(B_VAROUT,,MXjoyMagUnitOn,19,5,21,7,);
B(B_VAROUT,,MXpreHam_VibJoy,19,6,21,8,);
B(B_VAROUT,,MXjoyGrabSlewPre,19,7,21,9,);
B(B_VAROUT,,MXjoyPolyGrClose,13,9,15,11,);
L(13,6,14,6);
L(12,7,14,7);
L(19,5,19,8);
L(13,6,13,10);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 18 ;
        NETWORK_BODY
B(B_VAROUT,,MXjoyDdGearBox,19,4,21,6,);
B(B_F,sel,,14,3,19,8,);
B(B_VARIN,,MX2TJoystick,12,4,14,6,);
B(B_COMMENT,,preselection gear box drilling drive,1,1,26,2,);
B(B_VARIN,,MXadLEHydrGrab,12,10,14,12,);
B(B_VAROUT,,MXjoyGrapCont,19,9,21,11,);
B(B_VARIN,,MXadSBHydrGrab,12,11,14,13,);
B(B_VARIN,,MXadSMHydrGrab,12,12,14,14,);
B(B_VARIN,,MXenabKelGrabOpe,12,13,14,15,);
B(B_VARIN,,MXenabHyGrabHose,12,14,14,16,);
B(B_VARIN,,MXenablDrillOper,12,15,14,17,);
B(B_F,@AND-7,,14,8,19,17,0NNNNNN);
B(B_VARIN,,LXriJoyFronLowLe,11,5,13,7,);
B(B_VARIN,,LXleJoyTopRi,10,6,12,8,);
L(13,6,13,10);
L(13,10,14,10);
L(13,6,14,6);
L(12,7,14,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_COMMENT,,preselect winch syncronisation~ add. hydr. grab assambley mode,1,1,27,2,);
B(B_VARIN,,MXadLEHydrGrab,10,6,12,8,);
B(B_VARIN,,MXenabKelGrabOpe,10,5,12,7,);
B(B_F,@OR-3,,12,4,17,9,);
B(B_VARIN,,MXenabHyGrabHose,10,7,12,9,);
B(B_VAROUT,,MXjoyWinchSyn,23,4,25,6,);
B(B_F,@AND-2,,18,3,23,7,0N);
B(B_VARIN,,LXriJoyFronLowRi,16,3,18,5,);
L(17,6,18,6);
L(18,4,18,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 16 ;
        NETWORK_BODY
B(B_COMMENT,,preselect winch syncronisation~ add. hydr. grab assambley mode,1,1,27,2,);
B(B_VAROUT,,MXjoyGrabAssembl,23,8,25,10,);
B(B_VARIN,,LXleJoyFronLowLe,16,13,18,15,);
B(B_F,sel,,12,8,17,13,);
B(B_VARIN,,LXriJoyFronTopRi,10,10,12,12,);
B(B_VARIN,,LXriJoyFronLowRi,10,11,12,13,);
B(B_VARIN,,MX2TJoystick,10,9,12,11,);
B(B_VARIN,,MXadSBHydrGrab,10,4,12,6,);
B(B_VARIN,,MXadSMHydrGrab,10,5,12,7,);
B(B_F,sel,,18,7,23,12,);
B(B_VARIN,,MXadLEHydrGrab,10,6,12,8,);
B(B_F,@OR-3,,12,3,17,8,);
B(B_VAROUT,,MXpreClamClosJoy,18,13,20,15,);
L(18,11,18,14);
L(17,10,18,10);
L(18,5,18,9);
L(17,5,18,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VAROUT,,MXjoySgFreeTurn,12,1,14,3,);
B(B_VARIN,,LXleJoyFronLowRi,10,1,12,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 18 ;
        NETWORK_BODY
B(B_VARIN,,MXenablVibOperat,10,5,12,7,);
B(B_F,@OR-2,,12,4,17,8,);
B(B_VARIN,,CXexDrOnJoyStick,16,3,18,5,);
B(B_VARIN,,MXenablHamOperat,10,6,12,8,);
B(B_F,@AND-2,,18,3,23,7,);
B(B_F,@AND-2,,32,3,37,7,);
B(B_FB,RS,RS6,48,3,53,7,);
B(B_VAROUT,,MXexDrPreJoy,53,4,55,6,);
B(B_FB,R_TRIG,R_TRIG3,25,7,32,10,);
B(B_F,@AND-2,,38,7,43,11,);
B(B_VARIN,,MXexDrPreJoy,36,9,38,11,);
B(B_VAROUT,,MXjoyMagUnitOff,30,12,32,14,);
B(B_F,@AND-2,,25,11,30,15,N);
B(B_VAROUT,,MXjoyPolyGrOpen,23,15,25,17,);
B(B_VARIN,,LXleJoyTopLe,21,15,23,17,);
B(B_COMMENT,,Hupenknopf,1,1,14,2,);
B(B_COMMENT,,NRS Hupe mit Fussbetätigung wird benötigt,16,1,34,2,);
B(B_F,@OR-2,,43,7,48,11,);
B(B_VARIN,,MXassemblyOperat,41,11,43,13,);
B(B_COMMENT,,Grund für Reset bei Montagbetrieb: ø^Anzeige am Monitor (Überlappung mit Montagebetrieb) ,50,11,70,13,);
L(24,5,24,13);
L(17,6,18,6);
L(18,4,18,5);
L(37,5,48,5);
L(32,6,32,9);
L(23,5,32,5);
L(23,9,25,9);
L(38,5,38,9);
L(48,6,48,9);
L(23,9,23,14);
L(23,14,25,14);
L(24,13,25,13);
L(23,14,23,16);
L(43,10,43,12);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_COMMENT,,stab winch free fall / hydr. grab move forward-left,1,1,26,2,);
B(B_VARIN,,LXleJoyFronTopLe,10,3,12,5,);
B(B_VAROUT,,MXjoyStabWiFreeF,12,3,14,5,);
B(B_VAROUT,,MXjoyLeadAdjust1,12,4,14,6,);
B(B_VAROUT,,MXJoyGrabMovFoLe,12,5,14,7,);
B(B_VAROUT,,MXjoyHyGrabTurnL,12,6,14,8,);
L(12,4,12,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 17 ;
        NETWORK_BODY
B(B_COMMENT,,stab winch full pull / preselect hydr. grab back-forward or right-left,1,1,26,2,);
B(B_VARIN,,LXleJoyFronTopRi,10,3,12,5,);
B(B_VAROUT,,MXjoyStabWiFullP,12,3,14,5,);
B(B_VAROUT,,MXjoyLeadAdjust2,12,4,14,6,);
B(B_VAROUT,,MXjoyHyGrabTurnR,12,5,14,7,);
B(B_FB,R_TRIG,R_TRIG4,13,7,20,10,);
B(B_VARIN,,MXadLEHydrGrab,18,10,20,12,);
B(B_F,@AND-2,,22,12,27,16,);
B(B_VARIN,,MXJoyPreSlewLeRi,20,14,22,16,);
B(B_F,@AND-2,,22,7,27,11,);
B(B_FB,RS,RS7,29,7,34,11,);
B(B_VAROUT,,MXJoyPreSlewLeRi,34,8,36,10,);
L(12,9,13,9);
L(21,9,21,14);
L(21,14,22,14);
L(22,10,22,11);
L(20,11,22,11);
L(27,14,28,14);
L(20,9,22,9);
L(28,10,28,14);
L(28,10,29,10);
L(27,9,29,9);
L(12,4,12,9);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 19 ;
        NETWORK_BODY
B(B_COMMENT,,engine speed down~ add. hydr. grab slewing left~ ex. dr.in,1,1,26,2,);
B(B_VAROUT,,MXjoyEngSpeedDn,19,4,21,6,);
B(B_VAROUT,,MXjoyGrabSlewLe,19,14,21,16,);
B(B_VARIN,,LXriJoyTopRi,11,4,13,6,);
B(B_VARIN,,MXJoyPreSlewLeRi,10,5,12,7,);
B(B_F,@AND-3,,14,3,19,8,0NN);
B(B_VARIN,,MXexDrPreJoy,9,6,11,8,);
B(B_F,@AND-3,,14,8,19,13,0N);
B(B_VAROUT,,MXjoyExcentDrIn,19,9,21,11,);
B(B_F,@AND-3,,14,13,19,18,00N);
L(13,5,13,15);
L(12,16,14,16);
L(12,6,12,16);
L(12,6,14,6);
L(13,5,14,5);
L(11,7,14,7);
L(13,10,14,10);
L(11,7,11,17);
L(11,12,14,12);
L(12,11,14,11);
L(11,17,14,17);
L(13,15,14,15);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 19 ;
        NETWORK_BODY
B(B_F,@AND-3,,14,13,19,18,00N);
B(B_VAROUT,,MXjoyEngSpeedUp,19,4,21,6,);
B(B_VAROUT,,MXjoyGrabSlewRi,19,14,21,16,);
B(B_COMMENT,,engine speed up~ add. hydr. grab slewing right~ ex.dr. out,1,1,26,2,);
B(B_VARIN,,MXJoyPreSlewLeRi,10,5,12,7,);
B(B_VARIN,,LXriJoyTopLe,10,4,12,6,);
B(B_F,@AND-3,,14,3,19,8,0NN);
B(B_F,@AND-3,,14,8,19,13,0N);
B(B_VARIN,,MXexDrPreJoy,9,6,11,8,);
B(B_VAROUT,,MXjoyExcentDrOut,19,9,21,11,);
L(13,5,13,15);
L(13,15,14,15);
L(12,6,12,16);
L(12,16,14,16);
L(12,6,14,6);
L(12,5,14,5);
L(11,7,14,7);
L(11,7,11,17);
L(11,17,14,17);
L(11,12,14,12);
L(12,11,14,11);
L(13,10,14,10);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,LXriJoyFronTopLe,9,1,11,3,);
B(B_VAROUT,,MXjoyEngSpeStore,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 17 ;
        NETWORK_BODY
B(B_VAROUT,,MXjoyBridgeFastS,25,2,27,4,);
B(B_VAROUT,,MXjoyDestrConTen,25,12,27,14,);
B(B_VARIN,,LXleJoyJackSwit,17,2,19,4,);
B(B_F,@AND-3,,20,1,25,6,0NN);
B(B_F,@AND-3,,20,6,25,11,00N);
B(B_VAROUT,,MXjoySSGrabOpCl,25,7,27,9,);
B(B_F,@AND-3,,20,11,25,16,0N);
B(B_F,@OR-2,,11,7,16,11,);
B(B_VARIN,,MXadSBHydrGrab,9,8,11,10,);
B(B_VARIN,,MXadSMHydrGrab,9,9,11,11,);
B(B_VARIN,,CXdestruConsTens,15,14,17,16,);
L(19,3,19,13);
L(18,14,20,14);
L(18,4,18,14);
L(19,3,20,3);
L(17,5,20,5);
L(19,8,20,8);
L(17,5,17,15);
L(17,10,20,10);
L(17,15,20,15);
L(19,13,20,13);
L(18,4,20,4);
L(18,9,20,9);
L(16,9,18,9);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 22 ;
        NETWORK_BODY
B(B_COMMENT,,set joystick in zero,1,1,28,2,);
B(B_VARIN,,0,10,5,12,7,);
B(B_VARIN,,IWrightJoystAna2,9,8,11,10,);
B(B_VARIN,,IWleftJoystAnal1,9,12,11,14,);
B(B_F,@EQ-2,,13,3,18,7,);
B(B_F,@EQ-2,,13,7,18,11,);
B(B_F,@EQ-2,,13,11,18,15,);
B(B_VARIN,,IWleftJoystAnal2,9,16,11,18,);
B(B_F,@EQ-2,,13,15,18,19,);
B(B_VARIN,,IWrightJoystAna1,11,4,13,6,);
B(B_VAROUT,,MXjoystickInZero,26,13,28,15,);
B(B_VAROUT,,MXswitTravelGear,21,19,23,21,);
B(B_VARIN,,IXswitTravelGear,19,19,21,21,);
B(B_F,@AND-5,,21,12,26,19,0000N);
L(12,6,13,6);
L(12,14,13,14);
L(12,10,13,10);
L(19,13,19,16);
L(20,9,20,15);
L(11,9,13,9);
L(11,13,13,13);
L(18,5,21,5);
L(18,9,20,9);
L(18,13,19,13);
L(11,17,13,17);
L(12,18,13,18);
L(12,6,12,18);
L(19,16,21,16);
L(20,15,21,15);
L(21,5,21,14);
L(21,18,21,20);
L(18,17,21,17);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_VAROUT,,MDriJoyVibr1Ext,26,4,28,6,);
B(B_F,@DIV,,11,3,16,7,);
B(B_VARIN,,MWecRiJoyAna1Vib,9,4,11,6,);
B(B_VARIN,,10,9,5,11,7,);
B(B_F,int_to_real,,16,3,26,6,);
B(B_COMMENT,,external joystick vibrator ,1,1,27,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_VAROUT,,MDriJoyVibr2Ext,26,2,28,4,);
B(B_F,@DIV,,11,1,16,5,);
B(B_VARIN,,MWecRiJoyAna2Vib,9,2,11,4,);
B(B_VARIN,,10,9,3,11,5,);
B(B_F,int_to_real,,16,1,26,4,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_VAROUT,,MDleJoyVibr1Ext,26,2,28,4,);
B(B_F,@DIV,,11,1,16,5,);
B(B_VARIN,,MWecLeJoyAna1Vib,9,2,11,4,);
B(B_VARIN,,10,9,3,11,5,);
B(B_F,int_to_real,,16,1,26,4,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_VAROUT,,MDleJoyVibr2Ext,26,2,28,4,);
B(B_F,@DIV,,11,1,16,5,);
B(B_VARIN,,MWecLeJoyAna2Vib,9,2,11,4,);
B(B_VARIN,,10,9,3,11,5,);
B(B_F,int_to_real,,16,1,26,4,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,in case of 2T-Joystick jump to label 2TJoy,1,1,27,2,);
B(B_VARIN,,MX2TJoystick,9,3,11,5,);
B(B_JUMP,,2TJoy,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_VARIN,,LWrightJoystAna1,9,4,11,6,);
B(B_VAROUT,,MDlgPreJoySig,28,4,30,6,);
B(B_F,@DIV,,23,3,28,7,);
B(B_VARIN,,-10.0,20,6,22,8,);
B(B_F,int_to_real,,11,3,21,6,);
B(B_COMMENT,,-/+1000.0 / -10.0 = signal 0-100%,23,7,38,8,);
B(B_COMMENT,,luffing gear,1,1,27,2,);
L(22,6,23,6);
L(22,6,22,7);
L(21,5,23,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,IXriJoyErrorAna1,9,1,11,3,);
B(B_VAROUT,,MXlgErrorJoyst,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_VARIN,,LWleftJoystAnal1,9,4,11,6,);
B(B_VAROUT,,MDsgPreJoySig,28,4,30,6,);
B(B_F,@DIV,,23,3,28,7,);
B(B_VARIN,,10.0,20,6,22,8,);
B(B_F,int_to_real,,11,3,21,6,);
B(B_COMMENT,,+/-1000.0 / 10.0 = signal 0-100%,23,7,38,8,);
B(B_COMMENT,,slewing gear,1,1,27,2,);
L(22,6,23,6);
L(22,6,22,7);
L(21,5,23,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,IXleJoyErrorAna1,9,1,11,3,);
B(B_VAROUT,,MXsgErrorJoyst,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,in case of change hg1 and hg2 joystick jump to label changeX,1,1,27,2,);
B(B_VARIN,,CXadChangeJoysti,9,3,11,5,);
B(B_JUMP,,changeX,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_COMMENT,,hoisting gear 1,1,1,27,2,);
B(B_VARIN,,LWrightJoystAna2,9,4,11,6,);
B(B_F,@DIV,,23,3,28,7,);
B(B_VARIN,,-10.0,20,6,22,8,);
B(B_F,int_to_real,,11,3,21,6,);
B(B_VAROUT,,MDhg1PreJoySig,28,4,30,6,);
B(B_COMMENT,,-/+1000.0 / -10.0 = signal 0-100%,23,7,38,8,);
L(22,6,23,6);
L(22,6,22,7);
L(21,5,23,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,IXriJoyErrorAna2,9,1,11,3,);
B(B_VAROUT,,MXhg1ErrorJoyst,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_VARIN,,LWleftJoystAnal2,9,4,11,6,);
B(B_F,@DIV,,23,3,28,7,);
B(B_VARIN,,-10.0,20,6,22,8,);
B(B_F,int_to_real,,11,3,21,6,);
B(B_VAROUT,,MDhg2PreJoySig,28,4,30,6,);
B(B_COMMENT,,-/+1000.0 / -10.0 = signal 0-100%,23,7,38,8,);
B(B_COMMENT,,hoisting gear 2,1,1,27,2,);
L(22,6,23,6);
L(22,6,22,7);
L(21,5,23,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,IXleJoyErrorAna2,9,1,11,3,);
B(B_VAROUT,,MXhg2ErrorJoyst,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,TRUE,9,1,11,3,);
B(B_JUMP,,nextX,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL := changeX: ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_COMMENT,,joystick signal,1,1,27,2,);
B(B_VARIN,,LWleftJoystAnal2,9,4,11,6,);
B(B_F,@DIV,,23,3,28,7,);
B(B_VARIN,,-10.0,20,6,22,8,);
B(B_F,int_to_real,,11,3,21,6,);
B(B_VAROUT,,MDhg1PreJoySig,28,4,30,6,);
B(B_COMMENT,,-/+1000.0 / -10.0 = signal 0-100%,23,7,38,8,);
L(22,6,23,6);
L(22,6,22,7);
L(21,5,23,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,IXleJoyErrorAna2,9,1,11,3,);
B(B_VAROUT,,MXhg1ErrorJoyst,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_VARIN,,LWrightJoystAna2,9,2,11,4,);
B(B_F,@DIV,,23,1,28,5,);
B(B_VARIN,,-10.0,20,4,22,6,);
B(B_F,int_to_real,,11,1,21,4,);
B(B_VAROUT,,MDhg2PreJoySig,28,2,30,4,);
B(B_COMMENT,,-/+1000.0 / -10.0 = signal 0-100%,23,5,38,6,);
L(22,4,23,4);
L(22,4,22,5);
L(21,3,23,3);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,IXriJoyErrorAna2,9,1,11,3,);
B(B_VAROUT,,MXhg2ErrorJoyst,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL := nextX: ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 18 ;
        NETWORK_BODY
B(B_COMMENT,,output joystick vibrator X joystick ,1,1,27,2,);
B(B_F,sel,,33,9,38,14,);
B(B_VARIN,,MDhg1PumpSignal,31,12,33,14,);
B(B_VARIN,,0.0,31,11,33,13,);
B(B_F,@AND-2,,12,8,17,12,);
B(B_F,@OR-2,,19,8,24,12,0N);
B(B_VARIN,,MXhg1RopeLenMeas,9,10,11,12,);
B(B_F,@AND-2,,26,7,31,11,);
B(B_F,sel,,40,8,45,13,);
B(B_F,sel,,47,7,52,12,);
B(B_F,@MUL-2,,54,7,59,11,);
B(B_VARIN,,10.0,51,12,53,14,);
B(B_VARIN,,MDriJoyVibr1Ext,44,15,46,17,);
B(B_VARIN,,MDhg2PumpSignal,37,14,39,16,);
B(B_F,@AND-2,,33,3,38,7,);
B(B_VARIN,,CXadChangeJoysti,31,4,33,6,);
B(B_VARIN,,MXecRiJoyAna1Vib,44,2,46,4,);
B(B_VARIN,,CXjoystVibrHg1,23,6,25,8,);
B(B_VARIN,,MXhg1WinchMove,10,9,12,11,);
B(B_F,real_to_int,,59,7,69,10,);
B(B_VAROUT,,QWriJoyAna1Vibr,69,8,71,10,);
L(32,11,33,11);
L(32,9,32,11);
L(17,10,19,10);
L(18,11,19,11);
L(18,11,18,13);
L(11,13,18,13);
L(11,11,11,13);
L(11,11,12,11);
L(31,9,32,9);
L(24,10,26,10);
L(25,9,26,9);
L(52,9,54,9);
L(53,10,54,10);
L(53,10,53,13);
L(46,9,47,9);
L(45,10,47,10);
L(46,11,47,11);
L(39,12,40,12);
L(39,12,39,15);
L(46,11,46,16);
L(38,11,40,11);
L(39,10,40,10);
L(38,5,39,5);
L(39,5,39,10);
L(46,3,46,9);
L(32,6,32,9);
L(32,6,33,6);
L(25,7,25,9);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 22 ;
        NETWORK_BODY
B(B_F,@AND-2,,26,10,31,14,);
B(B_F,sel,,33,12,38,17,);
B(B_VARIN,,MDhg2PumpSignal,31,15,33,17,);
B(B_VARIN,,0.0,31,14,33,16,);
B(B_F,@AND-2,,12,11,17,15,);
B(B_F,@OR-2,,19,11,24,15,0N);
B(B_VARIN,,MXhg2RopeLenMeas,9,13,11,15,);
B(B_F,sel,,40,11,45,16,);
B(B_VARIN,,MDhg1PumpSignal,37,17,39,19,);
B(B_F,sel,,47,10,52,15,);
B(B_F,sel,,54,9,59,14,);
B(B_F,@MUL-2,,61,9,66,13,);
B(B_VARIN,,10.0,58,14,60,16,);
B(B_VARIN,,MDleJoyVibr1Ext,51,19,53,21,);
B(B_VARIN,,MDlg2PumpSignal,44,18,46,20,);
B(B_VARIN,,CXjoystVibrHg2,23,9,25,11,);
B(B_VARIN,,MXhg2WinchMove,10,12,12,14,);
B(B_F,real_to_int,,66,9,76,12,);
B(B_VAROUT,,QWleJoyAna1Vibr,76,10,78,12,);
B(B_F,@AND-2,,33,7,38,11,);
B(B_VARIN,,CXadChangeJoysti,31,8,33,10,);
B(B_VARIN,,CXjoystVibrAux,38,5,40,7,);
B(B_VARIN,,MXlg2EnJoySigHG2,38,4,40,6,);
B(B_F,@AND-2,,40,3,45,7,);
B(B_VARIN,,MXecLeJoyAna1Vib,51,1,53,3,);
L(32,14,33,14);
L(32,12,32,14);
L(31,12,32,12);
L(25,12,26,12);
L(17,13,19,13);
L(18,14,19,14);
L(18,14,18,16);
L(11,16,18,16);
L(11,14,11,16);
L(11,14,12,14);
L(24,13,26,13);
L(39,15,40,15);
L(39,15,39,18);
L(38,14,40,14);
L(39,13,40,13);
L(46,12,47,12);
L(53,11,54,11);
L(52,12,54,12);
L(53,13,54,13);
L(59,11,61,11);
L(60,12,61,12);
L(60,12,60,15);
L(46,14,47,14);
L(46,14,46,19);
L(53,13,53,20);
L(45,13,47,13);
L(39,9,39,13);
L(46,5,46,12);
L(32,10,32,12);
L(25,10,25,12);
L(32,10,33,10);
L(38,9,39,9);
L(45,5,46,5);
L(53,2,53,11);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 20 ;
        NETWORK_BODY
B(B_F,sel,,13,10,18,15,);
B(B_VARIN,,0.0,11,12,13,14,);
B(B_F,sel,,27,9,32,14,);
B(B_VARIN,,MDlgPumpSignal,11,13,13,15,);
B(B_VARIN,,CXjoystVibrLg,10,11,12,13,);
B(B_F,sel,,34,8,39,13,);
B(B_VARIN,,MDderrPumpSignal,31,16,33,18,);
B(B_F,sel,,41,7,46,12,);
B(B_VARIN,,MDriJoyVibr2Ext,38,17,40,19,);
B(B_VARIN,,MDlg2PumpSignal,24,15,26,17,);
B(B_F,@AND-2,,13,2,18,6,);
B(B_VARIN,,MXderrEnJoySigLG,11,3,13,5,);
B(B_VARIN,,MXecRiJoyAna2Vib,38,2,40,4,);
B(B_F,@MUL-2,,48,7,53,11,);
B(B_VARIN,,10.0,45,12,47,14,);
B(B_F,real_to_int,,53,7,63,10,);
B(B_VAROUT,,QWriJoyAna2Vibr,63,8,65,10,);
B(B_VARIN,,MXlg2EnJoySigLG,9,5,11,7,);
B(B_F,@AND-2,,20,4,25,8,);
B(B_F,@OR-2,,13,6,18,10,);
B(B_VARIN,,CXjoystVibrAux,9,7,11,9,);
L(26,11,27,11);
L(18,12,27,12);
L(26,13,27,13);
L(26,13,26,16);
L(12,12,13,12);
L(33,10,34,10);
L(32,11,34,11);
L(33,12,34,12);
L(33,12,33,17);
L(33,4,33,10);
L(40,9,41,9);
L(39,10,41,10);
L(40,11,41,11);
L(40,11,40,18);
L(12,5,12,12);
L(12,5,13,5);
L(18,4,33,4);
L(40,3,40,9);
L(46,9,48,9);
L(47,10,47,13);
L(47,10,48,10);
L(26,6,26,11);
L(11,6,20,6);
L(25,6,26,6);
L(19,7,20,7);
L(19,7,19,8);
L(18,8,19,8);
L(11,8,13,8);
L(12,9,13,9);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 20 ;
        NETWORK_BODY
B(B_F,sel,,13,10,18,15,);
B(B_VARIN,,0.0,11,12,13,14,);
B(B_F,sel,,20,9,25,14,);
B(B_VARIN,,MDsgPumpSignal,11,13,13,15,);
B(B_VARIN,,MDlg2PumpSignal,17,15,19,17,);
B(B_VARIN,,CXjoystVibrSg,10,11,12,13,);
B(B_F,sel,,27,8,32,13,);
B(B_VARIN,,MDderrPumpSignal,24,16,26,18,);
B(B_VARIN,,CXjoystVibrLg,10,3,12,5,);
B(B_F,sel,,34,7,39,12,);
B(B_VARIN,,MDleJoyVibr2Ext,31,17,33,19,);
B(B_F,@MUL-2,,41,7,46,11,);
B(B_VARIN,,10.0,38,12,40,14,);
B(B_VARIN,,MXlg2EnJoySigSG,11,7,13,9,);
B(B_F,@AND-2,,13,5,18,9,);
B(B_VARIN,,MXderrEnJoySigSG,11,2,13,4,);
B(B_F,@AND-2,,13,1,18,5,);
B(B_VARIN,,MXecLeJoyAna2Vib,31,1,33,3,);
B(B_F,real_to_int,,46,7,56,10,);
B(B_VAROUT,,QWleJoyAna2Vibr,56,8,58,10,);
L(19,11,20,11);
L(18,12,20,12);
L(19,13,20,13);
L(19,13,19,16);
L(19,7,19,11);
L(12,12,13,12);
L(12,4,13,4);
L(26,10,27,10);
L(25,11,27,11);
L(26,12,27,12);
L(26,12,26,17);
L(26,3,26,10);
L(12,4,12,7);
L(33,9,34,9);
L(32,10,34,10);
L(33,11,34,11);
L(33,11,33,18);
L(39,9,41,9);
L(40,10,41,10);
L(40,10,40,13);
L(12,7,13,7);
L(18,7,19,7);
L(18,3,26,3);
L(33,2,33,9);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,jump over two cross-joysticks,1,1,27,2,);
B(B_VARIN,,TRUE,9,3,11,5,);
B(B_JUMP,,error,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL := 2TJoy: ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_VARIN,,LWleftJoystAnal1,9,2,11,4,);
B(B_VAROUT,,MDsgPreJoySig,28,2,30,4,);
B(B_F,@DIV,,23,1,28,5,);
B(B_VARIN,,10.0,20,4,22,6,);
B(B_F,int_to_real,,11,1,21,4,);
B(B_COMMENT,,+/-1000.0 / 10.0 = signal 0-100%,23,5,38,6,);
L(22,4,23,4);
L(22,4,22,5);
L(21,3,23,3);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,IXleJoyErrorAna1,9,1,11,3,);
B(B_VAROUT,,MXsgErrorJoyst,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_VARIN,,LWleftJoystAnal2,9,2,11,4,);
B(B_VAROUT,,MDlgPreJoySig,28,2,30,4,);
B(B_F,@DIV,,23,1,28,5,);
B(B_VARIN,,-10.0,20,4,22,6,);
B(B_F,int_to_real,,11,1,21,4,);
B(B_COMMENT,,-/+1000.0 / -10.0 = signal 0-100%,23,5,38,6,);
L(22,4,23,4);
L(22,4,22,5);
L(21,3,23,3);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,IXleJoyErrorAna2,9,1,11,3,);
B(B_VAROUT,,MXlgErrorJoyst,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,in case of change hg1 and hg2 joystick jump to label chang2T,1,1,27,2,);
B(B_VARIN,,CXadChangeJoysti,9,3,11,5,);
B(B_JUMP,,chang2T,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_COMMENT,,joystick signal,1,1,27,2,);
B(B_VARIN,,LWrightJoystAna1,9,4,11,6,);
B(B_F,@DIV,,23,3,28,7,);
B(B_VARIN,,-10.0,20,6,22,8,);
B(B_F,int_to_real,,11,3,21,6,);
B(B_VAROUT,,MDhg1PreJoySig,28,4,30,6,);
B(B_COMMENT,,-/+1000.0 / -10.0 = signal 0-100%,23,7,38,8,);
L(22,6,23,6);
L(22,6,22,7);
L(21,5,23,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,IXriJoyErrorAna1,9,1,11,3,);
B(B_VAROUT,,MXhg1ErrorJoyst,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_VARIN,,LWrightJoystAna2,9,2,11,4,);
B(B_F,@DIV,,23,1,28,5,);
B(B_VARIN,,-10.0,20,4,22,6,);
B(B_F,int_to_real,,11,1,21,4,);
B(B_VAROUT,,MDhg2PreJoySig,28,2,30,4,);
B(B_COMMENT,,-/+1000.0 / -10.0 = signal 0-100%,23,5,38,6,);
L(22,4,23,4);
L(22,4,22,5);
L(21,3,23,3);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,IXriJoyErrorAna2,9,1,11,3,);
B(B_VAROUT,,MXhg2ErrorJoyst,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,TRUE,9,1,11,3,);
B(B_JUMP,,next2T,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL := chang2T: ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_COMMENT,,joystick signal,1,1,27,2,);
B(B_VARIN,,LWrightJoystAna2,9,4,11,6,);
B(B_F,@DIV,,23,3,28,7,);
B(B_VARIN,,-10.0,20,6,22,8,);
B(B_F,int_to_real,,11,3,21,6,);
B(B_VAROUT,,MDhg1PreJoySig,28,4,30,6,);
B(B_COMMENT,,-/+1000.0 / -10.0 = signal 0-100%,23,7,38,8,);
L(22,6,23,6);
L(22,6,22,7);
L(21,5,23,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,IXriJoyErrorAna2,9,1,11,3,);
B(B_VAROUT,,MXhg1ErrorJoyst,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_VARIN,,LWrightJoystAna1,9,2,11,4,);
B(B_F,@DIV,,23,1,28,5,);
B(B_VARIN,,-10.0,20,4,22,6,);
B(B_F,int_to_real,,11,1,21,4,);
B(B_VAROUT,,MDhg2PreJoySig,28,2,30,4,);
B(B_COMMENT,,-/+1000.0 / -10.0 = signal 0-100%,23,5,38,6,);
L(22,4,23,4);
L(22,4,22,5);
L(21,3,23,3);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,IXriJoyErrorAna1,9,1,11,3,);
B(B_VAROUT,,MXhg2ErrorJoyst,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL := next2T: ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 17 ;
        NETWORK_BODY
B(B_F,sel,,33,8,38,13,);
B(B_VARIN,,MDhg1PumpSignal,31,11,33,13,);
B(B_VARIN,,0.0,31,10,33,12,);
B(B_F,@AND-2,,12,7,17,11,);
B(B_F,@OR-2,,19,7,24,11,0N);
B(B_VARIN,,MXhg1RopeLenMeas,9,9,11,11,);
B(B_F,@AND-2,,26,6,31,10,);
B(B_F,sel,,40,7,45,12,);
B(B_F,sel,,47,6,52,11,);
B(B_F,@MUL-2,,54,6,59,10,);
B(B_VARIN,,10.0,51,11,53,13,);
B(B_VARIN,,MDriJoyVibr1Ext,44,14,46,16,);
B(B_VARIN,,MDhg2PumpSignal,37,13,39,15,);
B(B_COMMENT,,output joystick vibrator 2T joystick ,1,1,27,2,);
B(B_F,@AND-2,,33,2,38,6,);
B(B_VARIN,,CXadChangeJoysti,31,3,33,5,);
B(B_VARIN,,MXecRiJoyAna1Vib,44,1,46,3,);
B(B_VARIN,,CXjoystVibrHg1,23,5,25,7,);
B(B_VARIN,,MXhg1WinchMove,10,8,12,10,);
B(B_F,real_to_int,,59,6,69,9,);
B(B_VAROUT,,QWriJoyAna1Vibr,69,7,71,9,);
L(32,10,33,10);
L(32,8,32,10);
L(31,8,32,8);
L(17,9,19,9);
L(18,10,19,10);
L(18,10,18,12);
L(11,12,18,12);
L(11,10,11,12);
L(11,10,12,10);
L(24,9,26,9);
L(25,8,26,8);
L(38,10,40,10);
L(39,11,40,11);
L(39,11,39,14);
L(46,8,47,8);
L(45,9,47,9);
L(46,10,47,10);
L(52,8,54,8);
L(53,9,54,9);
L(53,9,53,12);
L(46,10,46,15);
L(39,9,40,9);
L(38,4,39,4);
L(39,4,39,9);
L(46,2,46,8);
L(25,6,25,8);
L(32,5,32,8);
L(32,5,33,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 29 ;
        NETWORK_BODY
B(B_F,@AND-2,,26,16,31,20,);
B(B_F,sel,,33,18,38,23,);
B(B_VARIN,,MDhg2PumpSignal,31,21,33,23,);
B(B_VARIN,,0.0,31,20,33,22,);
B(B_F,@AND-2,,12,17,17,21,);
B(B_F,@OR-2,,19,17,24,21,0N);
B(B_VARIN,,MXhg2RopeLenMeas,9,19,11,21,);
B(B_F,sel,,40,17,45,22,);
B(B_F,sel,,47,16,52,21,);
B(B_F,sel,,54,15,59,20,);
B(B_VARIN,,MDhg1PumpSignal,37,23,39,25,);
B(B_VARIN,,MDlg2PumpSignal,44,24,46,26,);
B(B_VARIN,,MDderrPumpSignal,51,25,53,27,);
B(B_VARIN,,MXderrEnJoySiHG2,31,3,33,5,);
B(B_F,@AND-2,,33,12,38,16,);
B(B_VARIN,,CXjoystVibrHg2,23,15,25,17,);
B(B_VARIN,,MXhg2WinchMove,10,18,12,20,);
B(B_VARIN,,CXadChangeJoysti,31,13,33,15,);
B(B_VARIN,,CXjoystVibrHg2,30,4,32,6,);
B(B_F,@AND-2,,40,8,45,12,);
B(B_VARIN,,MXlg2EnJoySigHG2,38,10,40,12,);
B(B_F,@OR-2,,33,6,38,10,);
B(B_VARIN,,CXjoystVibrAux,31,8,33,10,);
B(B_F,sel,,61,14,66,19,);
B(B_F,@MUL-2,,68,14,73,18,);
B(B_VARIN,,10.0,65,19,67,21,);
B(B_VARIN,,MDriJoyVibr2Ext,58,26,60,28,);
B(B_F,@AND-2,,33,2,38,6,);
B(B_VARIN,,MXecRiJoyAna2Vib,58,1,60,3,);
B(B_F,real_to_int,,73,14,83,17,);
B(B_VAROUT,,QWriJoyAna2Vibr,83,15,85,17,);
L(32,20,33,20);
L(32,18,32,20);
L(31,18,32,18);
L(25,18,26,18);
L(17,19,19,19);
L(18,20,19,20);
L(18,20,18,22);
L(11,22,18,22);
L(11,20,11,22);
L(11,20,12,20);
L(24,19,26,19);
L(46,18,47,18);
L(53,17,54,17);
L(52,18,54,18);
L(59,17,61,17);
L(38,20,40,20);
L(45,19,47,19);
L(39,19,40,19);
L(39,21,39,24);
L(39,21,40,21);
L(46,20,46,25);
L(46,20,47,20);
L(53,19,53,26);
L(53,19,54,19);
L(32,5,32,8);
L(32,5,33,5);
L(38,14,39,14);
L(39,14,39,19);
L(46,10,46,18);
L(53,4,53,17);
L(32,15,33,15);
L(32,15,32,18);
L(25,16,25,18);
L(45,10,46,10);
L(32,8,33,8);
L(38,8,39,8);
L(39,8,39,10);
L(39,10,40,10);
L(66,16,68,16);
L(67,17,68,17);
L(67,17,67,20);
L(60,16,61,16);
L(60,18,61,18);
L(60,18,60,27);
L(38,4,53,4);
L(60,2,60,16);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 21 ;
        NETWORK_BODY
B(B_F,sel,,12,11,17,16,);
B(B_VARIN,,0.0,10,13,12,15,);
B(B_F,sel,,20,10,25,15,);
B(B_VARIN,,MDlgPumpSignal,10,14,12,16,);
B(B_VARIN,,CXjoystVibrLg,9,12,11,14,);
B(B_VARIN,,MDderrPumpSignal,16,16,18,18,);
B(B_F,sel,,27,9,32,14,);
B(B_VARIN,,MDlg2PumpSignal,24,17,26,19,);
B(B_F,sel,,34,8,39,13,);
B(B_VARIN,,MDleJoyVibr1Ext,31,18,33,20,);
B(B_VARIN,,MXecLeJoyAna1Vib,31,2,33,4,);
B(B_VARIN,,CXjoystVibrAux,18,5,20,7,);
B(B_VARIN,,MXlg2EnJoySigHG2,18,4,20,6,);
B(B_F,@AND-2,,20,3,25,7,);
B(B_F,@AND-2,,12,7,17,11,);
B(B_VARIN,,MXderrEnJoySigLG,10,8,12,10,);
B(B_F,@MUL-2,,41,8,46,12,);
B(B_VARIN,,10.0,38,13,40,15,);
B(B_F,real_to_int,,46,8,56,11,);
B(B_VAROUT,,QWleJoyAna1Vibr,56,9,58,11,);
L(18,12,20,12);
L(17,13,20,13);
L(18,14,20,14);
L(18,14,18,17);
L(11,13,12,13);
L(11,10,11,13);
L(18,9,18,12);
L(26,11,27,11);
L(26,13,27,13);
L(25,12,27,12);
L(26,13,26,18);
L(33,10,34,10);
L(32,11,34,11);
L(33,12,34,12);
L(33,12,33,19);
L(26,5,26,11);
L(33,3,33,10);
L(25,5,26,5);
L(11,10,12,10);
L(17,9,18,9);
L(39,10,41,10);
L(40,11,40,14);
L(40,11,41,11);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_F,sel,,12,3,17,8,);
B(B_VARIN,,0.0,10,5,12,7,);
B(B_VARIN,,MDsgPumpSignal,10,6,12,8,);
B(B_F,sel,,19,2,24,7,);
B(B_F,@MUL-2,,26,2,31,6,);
B(B_VARIN,,10.0,23,7,25,9,);
B(B_VARIN,,MXecLeJoyAna2Vib,16,1,18,3,);
B(B_VARIN,,CXjoystVibrSg,10,4,12,6,);
B(B_VARIN,,MDleJoyVibr2Ext,16,8,18,10,);
B(B_F,real_to_int,,31,2,41,5,);
B(B_VAROUT,,QWleJoyAna2Vibr,41,3,43,5,);
L(18,4,19,4);
L(17,5,19,5);
L(18,6,19,6);
L(24,4,26,4);
L(25,5,26,5);
L(25,5,25,8);
L(18,2,18,4);
L(18,6,18,9);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL := error: ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_COMMENT,,error joystick hg 1,1,1,27,2,);
B(B_VARIN,,95,9,5,11,7,);
B(B_VARIN,,MSG_ERROR,9,7,11,9,);
B(B_FB,MsgRealReal,Message1,11,4,20,11,);
B(B_VARIN,,MXhg1ErrorJoyst,9,6,11,8,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_COMMENT,,error joystick hg 2,1,1,27,2,);
B(B_VARIN,,96,9,5,11,7,);
B(B_VARIN,,MSG_ERROR,9,7,11,9,);
B(B_FB,MsgRealReal,Message2,11,4,20,11,);
B(B_VARIN,,MXhg2ErrorJoyst,9,6,11,8,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_COMMENT,,error joystick lg,1,1,27,2,);
B(B_VARIN,,97 ,9,5,11,7,);
B(B_VARIN,,MSG_ERROR,9,7,11,9,);
B(B_FB,MsgRealReal,Message3,11,4,20,11,);
B(B_VARIN,,MXlgErrorJoyst,9,6,11,8,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_COMMENT,,error joystick sg,1,1,27,2,);
B(B_VARIN,,98,9,5,11,7,);
B(B_VARIN,,MSG_ERROR,9,7,11,9,);
B(B_FB,MsgRealReal,Message4,11,4,20,11,);
B(B_VARIN,,MXsgErrorJoyst,9,6,11,8,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_COMMENT,,error joystick right thumb wheel,1,1,27,2,);
B(B_VARIN,,99,9,5,11,7,);
B(B_VARIN,,MSG_ERROR,9,7,11,9,);
B(B_FB,MsgRealReal,Message5,11,4,20,11,);
B(B_VARIN,,IXleJoyErrAnaTW,9,6,11,8,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_COMMENT,,error joystick left thumb wheel,1,1,27,2,);
B(B_VARIN,,100,9,4,11,6,);
B(B_VARIN,,MSG_ERROR,9,6,11,8,);
B(B_FB,MsgRealReal,Message6,11,3,20,10,);
B(B_VARIN,,IXriJoyErrAnaTW,9,5,11,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 15 ;
        NETWORK_BODY
B(B_COMMENT,,error joystick right additional function,1,1,27,2,);
B(B_VARIN,,267,22,5,24,7,);
B(B_VARIN,,MSG_ERROR,22,7,24,9,);
B(B_FB,MsgRealReal,Message7,24,4,33,11,);
B(B_F,@OR-7,,11,5,16,14,);
B(B_VARIN,,IXriJoyErrJackSw,9,6,11,8,);
B(B_VARIN,,IXriJoyErrTopFrL,9,7,11,9,);
B(B_VARIN,,IXriJoyErrTopFrR,9,8,11,10,);
B(B_VARIN,,IXriJoyErrFroLoL,9,9,11,11,);
B(B_VARIN,,IXriJoyErrFroLoR,9,10,11,12,);
B(B_VARIN,,IXriJoyErrFroToL,9,11,11,13,);
B(B_VARIN,,IXriJoyErrFroToR,9,12,11,14,);
L(16,7,24,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 15 ;
        NETWORK_BODY
B(B_COMMENT,,error joystick left additional function,1,1,27,2,);
B(B_VARIN,,268,22,5,24,7,);
B(B_VARIN,,MSG_ERROR,22,7,24,9,);
B(B_FB,MsgRealReal,Message8,24,4,33,11,);
B(B_F,@OR-7,,11,5,16,14,);
B(B_VARIN,,IXleJoyErrJackSw,9,6,11,8,);
B(B_VARIN,,IXleJoyErrTopFrL,9,7,11,9,);
B(B_VARIN,,IXleJoyErrTopFrR,9,8,11,10,);
B(B_VARIN,,IXleJoyErrFroLoL,9,9,11,11,);
B(B_VARIN,,IXleJoyErrFroLoR,9,10,11,12,);
B(B_VARIN,,IXleJoyErrFroToL,9,11,11,13,);
B(B_VARIN,,IXleJoyErrFroToR,9,12,11,14,);
L(16,7,24,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL := mux: ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_VARIN,,MX2TJoystick,9,4,11,6,);
B(B_JUMP,,mux2T,11,4,13,6,);
B(B_COMMENT,,in case of 2T-Joystick jump to label 2TJoy,1,2,27,3,);
B(B_COMMENT,,MULTIPLEXER,1,1,27,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 41 ;
        NETWORK_BODY
B(B_VARIN,,MDlgPreJoySig,23,4,25,6,);
B(B_COMMENT,,luffing gear multiplexer X joystick ,1,1,27,2,);
B(B_COMMENT,,Greiferverstellung SB,54,9,64,10,);
B(B_VARIN,,MXddPreJoySig,23,8,25,10,);
B(B_VARIN,,MXgrabPreJoySig,23,7,25,9,);
B(B_VARIN,,MXlg2PreJoySigLG,23,6,25,8,);
B(B_VARIN,,MXpassWinchPres,23,9,25,11,);
B(B_VARIN,,MXgrAdPreJoySig,23,10,25,12,);
B(B_COMMENT,,https://lissvpme01.zdv.liebherr.i/svn/divisions/lwn/tbehs/TBEHS_PROJ_00008 Pflichtenheft für die Steuerungsvisualisierung im Zuge der Motor- und Steuerungsumstellung/trunk/02_specification and requirements/spStatus002_Meisterschalterbelegung.,0,0,0,0,0,0,0,);
B(B_VARIN,,MXlgPreLockSig,23,5,25,7,);
B(B_COMMENT,,https://lissvpme01.zdv.liebherr.i/svn/divisions/lwn/tbehs/TBEHS_PROJ_00008 Pflichtenheft für die Steuerungsvisualisierung im Zuge der Motor- und Steuerungsumstellung/trunk/02_specification and requirements/spStatus002_Meisterschalterbelegung.,0,0,0,0,0,0,0,);
B(B_COMMENT,,,49,2,120,2,);
B(B_COMMENT,,TBEHS_PROJ_00008 Pflichtenheft für die Steuerungsvisualisierung im Zuge der Motor- und Steuerungsumstellung/trunk/02_specification and requirements/spStatus002_Meisterschalterbelegung.xlsx,42,1,115,2,);
B(B_VARIN,,MXaxwPreJoySigLG,23,11,25,13,);
B(B_VARIN,,TRUE,23,24,25,26,);
B(B_VARIN,,LXlgPumpZero,23,16,25,18,);
B(B_VARIN,,LXddPumpZero,23,19,25,21,);
B(B_VARIN,,LXgrabPumpZero,23,18,25,20,);
B(B_VARIN,,LXlg2PumpZero,9,17,11,19,);
B(B_F,@OR-3,,11,16,16,21,);
B(B_VARIN,,MXlg2EnJoySigSG,9,18,11,20,);
B(B_VARIN,,MXlg2EnJoySigHG2,9,19,11,21,);
B(B_VARIN,,LXpwPumpZero,23,20,25,22,);
B(B_VARIN,,LXgrAdPumpZero,23,21,25,23,);
B(B_VARIN,,LXaxwPumpZero,23,22,25,24,);
B(B_VAROUT,,MDddJoySignal,43,7,45,9,);
B(B_VAROUT,,MDgrabJoySignal,43,6,45,8,);
B(B_VAROUT,,MDlg2JoySigLG,43,5,45,7,);
B(B_VAROUT,,MDpwJoySignal,43,8,45,10,);
B(B_VAROUT,,MDgrAdJoySignal,43,9,45,11,);
B(B_VAROUT,,MDlgJoySignal,43,4,45,6,);
B(B_VAROUT,,MDaxwJoySigLG,43,10,45,12,);
B(B_FB,FB_joy2_10fuV010,FB_joy2_8fun1,25,3,43,40,);
B(B_VAROUT,,MXddEnJoySig,43,18,45,20,);
B(B_VAROUT,,MXlg2EnJoySigLG,43,16,45,18,);
B(B_VAROUT,,MXgrabEnJoySig,43,17,45,19,);
B(B_VAROUT,,MXpwEnJoySig,43,19,45,21,);
B(B_VAROUT,,MXgrAdEnJoySig,43,20,45,22,);
B(B_VAROUT,,MXlgJoySigLock,43,15,45,17,);
B(B_VAROUT,,MXaxwEnJoySigLG,43,21,45,23,);
B(B_VARIN,,22.0,23,27,25,29,);
B(B_VARIN,,3.0,23,28,25,30,);
B(B_VARIN,,4.0,23,29,25,31,);
B(B_VARIN,,14.0,23,30,25,32,);
B(B_VARIN,,13.0,23,31,25,33,);
B(B_VARIN,,15.0,23,33,25,35,);
B(B_VARIN,,25.0,23,32,25,34,);
B(B_VARIN,,9.0,23,34,25,36,);
B(B_VARIN,,TRUE,23,25,25,27,);
B(B_VARIN,,TRUE,23,26,25,28,);
B(B_VARIN,,MXadwPreJoySig,23,12,25,14,);
B(B_VARIN,,LXadwPumpZero,23,23,25,25,);
B(B_VAROUT,,MDadwJoySig,43,11,45,13,);
B(B_VAROUT,,MXadwEnJoySig,43,22,45,24,);
B(B_VARIN,,10.0,23,35,25,37,);
B(B_VAROUT,,MRriJoyXSymNr,43,26,45,28,);
L(16,18,25,18);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 41 ;
        NETWORK_BODY
B(B_VARIN,,MDsgPreJoySig,23,5,25,7,);
B(B_COMMENT,,slewing gear multiplexer X joystick ,1,1,27,2,);
B(B_VARIN,,MXpreGrabSlew,23,10,25,12,);
B(B_VARIN,,MXz6PreJoySig,23,8,25,10,);
B(B_VARIN,,MXz3PreJoySig,23,9,25,11,);
B(B_VARIN,,MXlg2PreJoySigSG,23,7,25,9,);
B(B_VARIN,,MXsgPreLockSig,23,6,25,8,);
B(B_VAROUT,,MDz6JoySignal,43,7,45,9,);
B(B_VAROUT,,MDz3JoySignal,43,8,45,10,);
B(B_VAROUT,,MDlg2JoySigSG,43,6,45,8,);
B(B_VAROUT,,MDgrJoySigSlew,43,9,45,11,);
B(B_VAROUT,,MDsgJoySignal,43,5,45,7,);
B(B_FB,FB_joy2_10fuV010,FB_joy2_8fun2,25,4,43,41,);
B(B_VAROUT,,MXsgJoySigLock,43,16,45,18,);
B(B_VAROUT,,MXz6EnJoySig,43,18,45,20,);
B(B_VAROUT,,MXz3EnJoySig,43,19,45,21,);
B(B_VAROUT,,MXgrEnJoySigSlew,43,20,45,22,);
B(B_VAROUT,,MXlg2EnJoySigSG,43,17,45,19,);
B(B_VAROUT,,MRleJoyXSymNr,43,27,45,29,);
B(B_VARIN,,TRUE,23,25,25,27,);
B(B_VARIN,,TRUE,23,23,25,25,);
B(B_VARIN,,TRUE,23,22,25,24,);
B(B_VARIN,,TRUE,23,24,25,26,);
B(B_VARIN,,LXgrSlewPumpZero,23,21,25,23,);
B(B_VARIN,,LXsgPumpZero,23,17,25,19,);
B(B_VARIN,,LXz6PumpZero,23,19,25,21,);
B(B_VARIN,,LXz3PumpZero,23,20,25,22,);
B(B_VARIN,,LXlg2PumpZero,9,18,11,20,);
B(B_F,@OR-3,,11,17,16,22,);
B(B_VARIN,,MXlg2EnJoySigLG,9,19,11,21,);
B(B_VARIN,,MXlg2EnJoySigHG2,9,20,11,22,);
B(B_VARIN,,TRUE,23,27,25,29,);
B(B_VARIN,,TRUE,23,26,25,28,);
B(B_VARIN,,23.0,23,28,25,30,);
B(B_F,sel,,16,28,21,33,);
B(B_VARIN,,1.0,14,30,16,32,);
B(B_VARIN,,2.0,14,31,16,33,);
B(B_VARIN,,MXmomRegEnabled,14,29,16,31,);
B(B_VARIN,,4.0,23,30,25,32,);
B(B_VARIN,,16.0,23,31,25,33,);
B(B_VARIN,,18.0,23,32,25,34,);
B(B_VARIN,,15.0,23,33,25,35,);
L(16,19,25,19);
L(21,30,25,30);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,in case of change hg1 and hg2 joystick jump to label chmuxX,1,1,27,2,);
B(B_VARIN,,CXadChangeJoysti,9,3,11,5,);
B(B_JUMP,,chmuxX,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 40 ;
        NETWORK_BODY
B(B_VARIN,,MDhg1PreJoySig,22,4,24,6,);
B(B_COMMENT,,hoisting gear 1 multiplexer X joystick ,1,1,27,2,);
B(B_VARIN,,MXmoorPreJoySig,22,6,24,8,);
B(B_VARIN,,MXhg1PreLockSig,22,5,24,7,);
B(B_VAROUT,,MDmoorJoySignal,42,5,44,7,);
B(B_VAROUT,,MDhg1JoySignal,42,4,44,6,);
B(B_FB,FB_joy2_10fuV010,FB_joy2_8fun3,24,3,42,40,);
B(B_VAROUT,,MXhg1JoySigLock,42,15,44,17,);
B(B_VAROUT,,MXmoorEnJoySig,42,16,44,18,);
B(B_VAROUT,,MRriJoyYSymNr,42,26,44,28,);
B(B_VARIN,,TRUE,22,22,24,24,);
B(B_VARIN,,TRUE,22,21,24,23,);
B(B_VARIN,,TRUE,22,20,24,22,);
B(B_VARIN,,LXhg1PumpZero,22,16,24,18,);
B(B_VARIN,,TRUE,22,19,24,21,);
B(B_VARIN,,LXmoorPumpZero,22,17,24,19,);
B(B_VARIN,,TRUE,22,18,24,20,);
B(B_VARIN,,TRUE,22,26,24,28,);
B(B_VARIN,,TRUE,22,25,24,27,);
B(B_VARIN,,20.0,22,27,24,29,);
B(B_VARIN,,26.0,22,29,24,31,);
B(B_F,sel,,16,27,21,32,);
B(B_VARIN,,MXwinSynPres,9,27,11,29,);
B(B_VARIN,,MXgrabCtrlPres,9,28,11,30,);
B(B_F,@OR-2,,11,26,16,30,);
B(B_VARIN,,6.0,14,29,16,31,);
B(B_VARIN,,8.0,14,30,16,32,);
B(B_VARIN,,TRUE,22,24,24,26,);
B(B_VARIN,,TRUE,22,23,24,25,);
L(16,28,16,29);
L(21,29,24,29);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 40 ;
        NETWORK_BODY
B(B_VARIN,,MDhg2PreJoySig,24,4,26,6,);
B(B_COMMENT,,hoisting gear 2 multiplexer X joystick ,1,1,27,2,);
B(B_VARIN,,MXz2PreJoySig,24,7,26,9,);
B(B_VARIN,,MXlg2PreJoySiHG2,24,6,26,8,);
B(B_VARIN,,MXz4PreJoySig,24,8,26,10,);
B(B_VARIN,,MXhg2PreLockSig,24,5,26,7,);
B(B_VARIN,,MXhoCylPreJoySig,24,9,26,11,);
B(B_VARIN,,MXaxwPreJoySiHG2,24,10,26,12,);
B(B_VAROUT,,MDz2JoySignal,44,6,46,8,);
B(B_VAROUT,,MDlg2JoySigHG2,44,5,46,7,);
B(B_VAROUT,,MDz4JoySignal,44,7,46,9,);
B(B_VAROUT,,MDhg2JoySignal,44,4,46,6,);
B(B_VAROUT,,MDhoCylJoySignal,44,8,46,10,);
B(B_VAROUT,,MDaxwJoySigHG2,44,9,46,11,);
B(B_FB,FB_joy2_10fuV010,FB_joy2_8fun4,26,3,44,40,);
B(B_VAROUT,,MXhg2JoySigLock,44,15,46,17,);
B(B_VAROUT,,MXz2EnJoySig,44,17,46,19,);
B(B_VAROUT,,MXlg2EnJoySigHG2,44,16,46,18,);
B(B_VAROUT,,MXz4EnJoySig,44,18,46,20,);
B(B_VAROUT,,MXhoCylEnJoySig,44,19,46,21,);
B(B_VAROUT,,MXaxwEnJoySigHG2,44,20,46,22,);
B(B_VARIN,,TRUE,24,22,26,24,);
B(B_VARIN,,LXhg2PumpZero,24,16,26,18,);
B(B_VARIN,,LXz2PumpZero,24,18,26,20,);
B(B_VARIN,,LXlg2PumpZero,9,17,11,19,);
B(B_F,@OR-3,,11,16,16,21,);
B(B_VARIN,,MXlg2EnJoySigLG,9,18,11,20,);
B(B_VARIN,,MXlg2EnJoySigSG,9,19,11,21,);
B(B_VARIN,,LXz4PumpZero,24,19,26,21,);
B(B_VARIN,,LXhocPumpZero,24,20,26,22,);
B(B_VARIN,,LXaxwPumpZero,24,21,26,23,);
B(B_VARIN,,TRUE,24,26,26,28,);
B(B_VARIN,,TRUE,24,25,26,27,);
B(B_VARIN,,21.0,24,27,26,29,);
B(B_VARIN,,5.0,24,29,26,31,);
B(B_VARIN,,17.0,24,30,26,32,);
B(B_VARIN,,19.0,24,31,26,33,);
B(B_F,sel,,18,27,23,32,);
B(B_VARIN,,7.0,16,29,18,31,);
B(B_VARIN,,0.0,16,30,18,32,);
B(B_VARIN,,MXmoorEnJoySig,11,26,13,28,);
B(B_F,@OR-3,,13,25,18,30,);
B(B_VARIN,,11.0,24,32,26,34,);
B(B_VARIN,,9.0,24,33,26,35,);
B(B_VARIN,,TRUE,24,24,26,26,);
B(B_VARIN,,TRUE,24,23,26,25,);
B(B_VAROUT,,MRleJoyYSymNr,44,26,46,28,);
B(B_VARIN,,MXwinSynPres,11,27,13,29,);
B(B_VARIN,,MXgrabCtrlPres,11,28,13,30,);
L(16,18,26,18);
L(23,29,26,29);
L(18,27,18,29);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 5 ;
        NETWORK_BODY
B(B_VARIN,,TRUE,9,2,11,4,);
B(B_RETURN,,,11,2,13,4,);
B(B_COMMENT,,exit program ,1,1,27,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL := chmuxX: ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 40 ;
        NETWORK_BODY
B(B_COMMENT,,hoisting gear 1 multiplexer X joystick ,1,1,27,2,);
B(B_VARIN,,MDhg1PreJoySig,22,4,24,6,);
B(B_VARIN,,MXz2PreJoySig,22,6,24,8,);
B(B_VARIN,,MXz4PreJoySig,22,7,24,9,);
B(B_VARIN,,MXhg1PreLockSig,22,5,24,7,);
B(B_VAROUT,,MDz2JoySignal,42,5,44,7,);
B(B_VAROUT,,MDz4JoySignal,42,6,44,8,);
B(B_VAROUT,,MDhg1JoySignal,42,4,44,6,);
B(B_FB,FB_joy2_10fuV010,FB_joy2_8fun5,24,3,42,40,);
B(B_VAROUT,,MXhg1JoySigLock,42,15,44,17,);
B(B_VAROUT,,MXz2EnJoySig,42,16,44,18,);
B(B_VAROUT,,MXz4EnJoySig,42,17,44,19,);
B(B_VARIN,,TRUE,22,21,24,23,);
B(B_VARIN,,TRUE,22,20,24,22,);
B(B_VARIN,,LXhg1PumpZero,22,16,24,18,);
B(B_VARIN,,LXz2PumpZero,22,17,24,19,);
B(B_VARIN,,LXz4PumpZero,22,18,24,20,);
B(B_VARIN,,TRUE,22,19,24,21,);
B(B_VARIN,,TRUE,22,26,24,28,);
B(B_VARIN,,TRUE,22,24,24,26,);
B(B_VARIN,,TRUE,22,25,24,27,);
B(B_VARIN,,20.0,22,27,24,29,);
B(B_VARIN,,17.0,22,29,24,31,);
B(B_VARIN,,19.0,22,30,24,32,);
B(B_F,sel,,16,27,21,32,);
B(B_F,@OR-2,,11,24,16,28,);
B(B_F,sel,,10,28,15,33,);
B(B_VARIN,,0.0,8,31,10,33,);
B(B_VARIN,,MXmoorEnJoySig,8,29,10,31,);
B(B_VARIN,,6.0,8,30,10,32,);
B(B_VARIN,,8.0,14,32,16,34,);
B(B_VARIN,,TRUE,22,22,24,24,);
B(B_VARIN,,TRUE,22,23,24,25,);
B(B_VAROUT,,MRleJoyYSymNr,42,26,44,28,);
B(B_VARIN,,MXwinSynPres,9,25,11,27,);
B(B_VARIN,,MXgrabCtrlPres,9,26,11,28,);
L(21,29,24,29);
L(15,30,16,30);
L(16,26,16,29);
L(16,31,16,33);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 40 ;
        NETWORK_BODY
B(B_COMMENT,,hoisting gear 2 multiplexer X joystick ,1,1,27,2,);
B(B_VARIN,,MDhg2PreJoySig,24,4,26,6,);
B(B_VARIN,,MXmoorPreJoySig,24,6,26,8,);
B(B_VARIN,,MXlg2PreJoySiHG2,24,7,26,9,);
B(B_VARIN,,MXhg2PreLockSig,24,5,26,7,);
B(B_VARIN,,MXhoCylPreJoySig,24,8,26,10,);
B(B_VARIN,,MXaxwPreJoySiHG2,24,9,26,11,);
B(B_VAROUT,,MDmoorJoySignal,44,5,46,7,);
B(B_VAROUT,,MDlg2JoySigHG2,44,6,46,8,);
B(B_VAROUT,,MDhg2JoySignal,44,4,46,6,);
B(B_VAROUT,,MDhoCylJoySignal,44,7,46,9,);
B(B_VAROUT,,MDaxwJoySigHG2,44,8,46,10,);
B(B_FB,FB_joy2_10fuV010,FB_joy2_8fun6,26,3,44,40,);
B(B_VAROUT,,MXhg1JoySigLock,44,15,46,17,);
B(B_VAROUT,,MXmoorEnJoySig,44,16,46,18,);
B(B_VAROUT,,MXlg2EnJoySigHG2,44,17,46,19,);
B(B_VAROUT,,MXhoCylEnJoySig,44,18,46,20,);
B(B_VAROUT,,MXaxwEnJoySigHG2,44,19,46,21,);
B(B_VAROUT,,MRriJoyYSymNr,44,26,46,28,);
B(B_VARIN,,TRUE,24,22,26,24,);
B(B_VARIN,,TRUE,24,21,26,23,);
B(B_VARIN,,LXhg2PumpZero,24,16,26,18,);
B(B_VARIN,,LXmoorPumpZero,24,17,26,19,);
B(B_VARIN,,LXlg2PumpZero,9,18,11,20,);
B(B_F,@OR-3,,11,17,16,22,);
B(B_VARIN,,MXlg2EnJoySigLG,9,19,11,21,);
B(B_VARIN,,MXlg2EnJoySigSG,9,20,11,22,);
B(B_VARIN,,LXhocPumpZero,24,19,26,21,);
B(B_VARIN,,LXaxwPumpZero,24,20,26,22,);
B(B_VARIN,,TRUE,24,26,26,28,);
B(B_VARIN,,TRUE,24,25,26,27,);
B(B_VARIN,,21.0,24,27,26,29,);
B(B_VARIN,,26.0,24,29,26,31,);
B(B_VARIN,,4.0,24,30,26,32,);
B(B_F,sel,,18,27,23,32,);
B(B_VARIN,,7.0,16,29,18,31,);
B(B_VARIN,,0.0,16,30,18,32,);
B(B_VARIN,,MXmoorEnJoySig,11,26,13,28,);
B(B_F,@OR-3,,13,25,18,30,);
B(B_VARIN,,11.0,24,31,26,33,);
B(B_VARIN,,9.0,24,32,26,34,);
B(B_VARIN,,TRUE,24,24,26,26,);
B(B_VARIN,,TRUE,24,23,26,25,);
B(B_VARIN,,MXwinSynPres,11,27,13,29,);
B(B_VARIN,,MXgrabCtrlPres,11,28,13,30,);
L(16,19,26,19);
L(23,29,26,29);
L(18,27,18,29);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,exit program ,1,1,27,2,);
B(B_VARIN,,TRUE,9,3,11,5,);
B(B_RETURN,,,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL := mux2T: ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 44 ;
        NETWORK_BODY
B(B_VARIN,,MDlgPreJoySig,23,4,25,6,);
B(B_COMMENT,,luffing gear multiplexer 2T joystick ,1,1,27,2,);
B(B_VARIN,,MXddPreJoySig,23,8,25,10,);
B(B_VARIN,,MXgrabPreJoySig,23,7,25,9,);
B(B_VARIN,,MXlg2PreJoySigLG,23,6,25,8,);
B(B_VARIN,,MXz2PreJoySig,23,9,25,11,);
B(B_VARIN,,MXz4PreJoySig,23,10,25,12,);
B(B_VARIN,,MXpassWinchPres,23,11,25,13,);
B(B_VARIN,,MXgrAdPreJoySig,23,12,25,14,);
B(B_VARIN,,MXlgPreLockSig,23,5,25,7,);
B(B_VARIN,,MXaxwPreJoySigLG,23,13,25,15,);
B(B_VAROUT,,MDddJoySignal,43,7,45,9,);
B(B_VAROUT,,MDgrabJoySignal,43,6,45,8,);
B(B_VAROUT,,MDlg2JoySigLG,43,5,45,7,);
B(B_VAROUT,,MDz2JoySignal,43,8,45,10,);
B(B_VAROUT,,MDz4JoySignal,43,9,45,11,);
B(B_VAROUT,,MDpwJoySignal,43,10,45,12,);
B(B_VAROUT,,MDgrAdJoySignal,43,11,45,13,);
B(B_VAROUT,,MDlgJoySignal,43,4,45,6,);
B(B_VAROUT,,MDaxwJoySigLG,43,12,45,14,);
B(B_FB,FB_joy2_10fuV010,FB_joy2_8fun7,25,3,43,40,);
B(B_VAROUT,,MXddEnJoySig,43,18,45,20,);
B(B_VAROUT,,MXlg2EnJoySigLG,43,16,45,18,);
B(B_VAROUT,,MXgrabEnJoySig,43,17,45,19,);
B(B_VAROUT,,MXz2EnJoySig,43,19,45,21,);
B(B_VAROUT,,MXz4EnJoySig,43,20,45,22,);
B(B_VAROUT,,MXpwEnJoySig,43,21,45,23,);
B(B_VAROUT,,MXgrAdEnJoySig,43,22,45,24,);
B(B_VAROUT,,MXlgJoySigLock,43,15,45,17,);
B(B_VAROUT,,MXaxwEnJoySigLG,43,23,45,25,);
B(B_VAROUT,,MRleJoyYSymNr,43,26,45,28,);
B(B_VARIN,,LXgrAdPumpZero,23,23,25,25,);
B(B_VARIN,,LXlgPumpZero,23,16,25,18,);
B(B_VARIN,,LXddPumpZero,23,19,25,21,);
B(B_VARIN,,LXgrabPumpZero,23,18,25,20,);
B(B_VARIN,,LXlg2PumpZero,9,17,11,19,);
B(B_F,@OR-3,,11,16,16,21,);
B(B_VARIN,,MXlg2EnJoySigSG,9,18,11,20,);
B(B_VARIN,,MXlg2EnJoySigHG2,9,19,11,21,);
B(B_VARIN,,LXz2PumpZero,23,20,25,22,);
B(B_VARIN,,LXz4PumpZero,23,21,25,23,);
B(B_VARIN,,LXpwPumpZero,23,22,25,24,);
B(B_VARIN,,LXaxwPumpZero,23,24,25,26,);
B(B_VARIN,,22.0,23,27,25,29,);
B(B_VARIN,,3.0,23,28,25,30,);
B(B_VARIN,,4.0,23,29,25,31,);
B(B_VARIN,,14.0,23,30,25,32,);
B(B_VARIN,,13.0,23,31,25,33,);
B(B_VARIN,,17.0,23,32,25,34,);
B(B_VARIN,,19.0,23,33,25,35,);
B(B_VARIN,,25.0,23,34,25,36,);
B(B_VARIN,,15.0,23,35,25,37,);
B(B_VARIN,,9.0,23,36,25,38,);
B(B_VARIN,,TRUE,23,26,25,28,);
B(B_VARIN,,MXadwPreJoySig,23,14,25,16,);
B(B_VARIN,,LXadwPumpZero,23,25,25,27,);
B(B_VAROUT,,MDadwJoySig,43,13,45,15,);
B(B_VAROUT,,MXadwEnJoySig,43,24,45,26,);
B(B_VARIN,,10.0,23,37,25,39,);
L(16,18,25,18);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 40 ;
        NETWORK_BODY
B(B_VARIN,,MDsgPreJoySig,24,4,26,6,);
B(B_COMMENT,,slewing gear multiplexer 2T joystick ,1,1,27,2,);
B(B_COMMENT,,Greiferverstellung SB,58,10,68,11,);
B(B_VARIN,,MXpreGrabSlew,24,9,26,11,);
B(B_VARIN,,MXz6PreJoySig,24,7,26,9,);
B(B_VARIN,,MXz3PreJoySig,24,8,26,10,);
B(B_VARIN,,MXlg2PreJoySigSG,24,6,26,8,);
B(B_VARIN,,MXsgPreLockSig,24,5,26,7,);
B(B_VAROUT,,MDz6JoySignal,44,6,46,8,);
B(B_VAROUT,,MDz3JoySignal,44,7,46,9,);
B(B_VAROUT,,MDlg2JoySigSG,44,5,46,7,);
B(B_VAROUT,,MDgrJoySigSlew,44,8,46,10,);
B(B_VAROUT,,MDsgJoySignal,44,4,46,6,);
B(B_FB,FB_joy2_10fuV010,FB_joy2_8fun8,26,3,44,40,);
B(B_VAROUT,,MXsgJoySigLock,44,15,46,17,);
B(B_VAROUT,,MXz6EnJoySig,44,17,46,19,);
B(B_VAROUT,,MXz3EnJoySig,44,18,46,20,);
B(B_VAROUT,,MXgrEnJoySigSlew,44,19,46,21,);
B(B_VAROUT,,MXlg2EnJoySigSG,44,16,46,18,);
B(B_VAROUT,,MRleJoyXSymNr,44,26,46,28,);
B(B_VARIN,,TRUE,24,22,26,24,);
B(B_VARIN,,TRUE,24,21,26,23,);
B(B_VARIN,,TRUE,24,23,26,25,);
B(B_VARIN,,LXgrSlewPumpZero,24,20,26,22,);
B(B_VARIN,,LXsgPumpZero,24,16,26,18,);
B(B_VARIN,,LXz6PumpZero,24,18,26,20,);
B(B_VARIN,,LXz3PumpZero,24,19,26,21,);
B(B_VARIN,,LXlg2PumpZero,9,17,11,19,);
B(B_F,@OR-3,,11,16,16,21,);
B(B_VARIN,,MXlg2EnJoySigLG,9,18,11,20,);
B(B_VARIN,,MXlg2EnJoySigHG2,9,19,11,21,);
B(B_VARIN,,TRUE,24,26,26,28,);
B(B_VARIN,,23.0,24,27,26,29,);
B(B_VARIN,,9.0,24,29,26,31,);
B(B_VARIN,,16.0,24,30,26,32,);
B(B_VARIN,,18.0,24,31,26,33,);
B(B_VARIN,,15.0,24,32,26,34,);
B(B_F,sel,,17,27,22,32,);
B(B_VARIN,,1.0,15,29,17,31,);
B(B_VARIN,,2.0,15,30,17,32,);
B(B_VARIN,,MXmomRegEnabled,15,28,17,30,);
B(B_VARIN,,TRUE,24,24,26,26,);
B(B_VARIN,,TRUE,24,25,26,27,);
L(16,18,26,18);
L(22,29,26,29);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,in case of change hg1 and hg2 joystick jump to label chmux2T,1,1,27,2,);
B(B_VARIN,,CXadChangeJoysti,9,3,11,5,);
B(B_JUMP,,chmux2T,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 40 ;
        NETWORK_BODY
B(B_VARIN,,MDhg1PreJoySig,22,4,24,6,);
B(B_COMMENT,,hoisting gear 1 multiplexer 2T joystick ,1,1,27,2,);
B(B_VARIN,,MXmoorPreJoySig,22,6,24,8,);
B(B_VARIN,,MXhg1PreLockSig,22,5,24,7,);
B(B_VAROUT,,MDmoorJoySignal,42,5,44,7,);
B(B_VAROUT,,MDhg1JoySignal,42,4,44,6,);
B(B_FB,FB_joy2_10fuV010,FB_joy2_8fun9,24,3,42,40,);
B(B_VAROUT,,MXhg1JoySigLock,42,15,44,17,);
B(B_VAROUT,,MXmoorEnJoySig,42,16,44,18,);
B(B_VAROUT,,MRriJoyXSymNr,42,26,44,28,);
B(B_VARIN,,TRUE,22,22,24,24,);
B(B_VARIN,,TRUE,22,21,24,23,);
B(B_VARIN,,TRUE,22,20,24,22,);
B(B_VARIN,,LXhg1PumpZero,22,16,24,18,);
B(B_VARIN,,TRUE,22,19,24,21,);
B(B_VARIN,,LXmoorPumpZero,22,17,24,19,);
B(B_VARIN,,TRUE,22,18,24,20,);
B(B_VARIN,,TRUE,22,26,24,28,);
B(B_VARIN,,TRUE,22,25,24,27,);
B(B_VARIN,,20.0,22,27,24,29,);
B(B_VARIN,,26.0,22,29,24,31,);
B(B_F,sel,,16,27,21,32,);
B(B_F,@OR-2,,11,26,16,30,);
B(B_VARIN,,6.0,14,29,16,31,);
B(B_VARIN,,8.0,14,30,16,32,);
B(B_VARIN,,TRUE,22,24,24,26,);
B(B_VARIN,,TRUE,22,23,24,25,);
B(B_VARIN,,MXwinSynPres,9,27,11,29,);
B(B_VARIN,,MXgrabCtrlPres,9,28,11,30,);
L(21,29,24,29);
L(16,28,16,29);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 40 ;
        NETWORK_BODY
B(B_VARIN,,MDhg2PreJoySig,24,4,26,6,);
B(B_COMMENT,,hoisting gear 2 multiplexer 2T joystick ,1,1,27,2,);
B(B_VARIN,,MXlg2PreJoySiHG2,24,6,26,8,);
B(B_VARIN,,MXhg2PreLockSig,24,5,26,7,);
B(B_VARIN,,MXhoCylPreJoySig,24,7,26,9,);
B(B_VARIN,,MXaxwPreJoySiHG2,24,8,26,10,);
B(B_VAROUT,,MDlg2JoySigHG2,44,5,46,7,);
B(B_VAROUT,,MDhg2JoySignal,44,4,46,6,);
B(B_VAROUT,,MDhoCylJoySignal,44,6,46,8,);
B(B_VAROUT,,MDaxwJoySigHG2,44,7,46,9,);
B(B_FB,FB_joy2_10fuV010,FB_joy2_8fun10,26,3,44,40,);
B(B_VAROUT,,MXhg2JoySigLock,44,15,46,17,);
B(B_VAROUT,,MXlg2EnJoySigHG2,44,16,46,18,);
B(B_VAROUT,,MXhoCylEnJoySig,44,17,46,19,);
B(B_VAROUT,,MXaxwEnJoySigHG2,44,18,46,20,);
B(B_VAROUT,,MRriJoyYSymNr,44,26,46,28,);
B(B_VARIN,,TRUE,24,22,26,24,);
B(B_VARIN,,TRUE,24,21,26,23,);
B(B_VARIN,,TRUE,24,20,26,22,);
B(B_VARIN,,LXhg2PumpZero,24,16,26,18,);
B(B_VARIN,,LXlg2PumpZero,9,17,11,19,);
B(B_F,@OR-3,,11,16,16,21,);
B(B_VARIN,,MXlg2EnJoySigLG,9,18,11,20,);
B(B_VARIN,,MXlg2EnJoySigSG,9,19,11,21,);
B(B_VARIN,,LXhocPumpZero,24,18,26,20,);
B(B_VARIN,,LXaxwPumpZero,24,19,26,21,);
B(B_VARIN,,TRUE,24,26,26,28,);
B(B_VARIN,,TRUE,24,25,26,27,);
B(B_VARIN,,21.0,24,27,26,29,);
B(B_VARIN,,4.0,24,29,26,31,);
B(B_F,sel,,18,27,23,32,);
B(B_VARIN,,7.0,16,29,18,31,);
B(B_VARIN,,0.0,16,30,18,32,);
B(B_VARIN,,MXmoorEnJoySig,11,26,13,28,);
B(B_F,@OR-3,,13,25,18,30,);
B(B_VARIN,,11.0,24,30,26,32,);
B(B_VARIN,,9.0,24,31,26,33,);
B(B_VARIN,,TRUE,24,24,26,26,);
B(B_VARIN,,TRUE,24,23,26,25,);
B(B_VARIN,,MXwinSynPres,11,27,13,29,);
B(B_VARIN,,MXgrabCtrlPres,11,28,13,30,);
L(16,18,26,18);
L(23,29,26,29);
L(18,27,18,29);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 5 ;
        NETWORK_BODY
B(B_VARIN,,TRUE,9,2,11,4,);
B(B_RETURN,,,11,2,13,4,);
B(B_COMMENT,,exit program ,1,1,27,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL := chmux2T: ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 40 ;
        NETWORK_BODY
B(B_VARIN,,MDhg1PreJoySig,22,4,24,6,);
B(B_COMMENT,,hoisting gear 1 multiplexer 2T joystick ,1,1,27,2,);
B(B_VARIN,,MXmoorPreJoySig,22,6,24,8,);
B(B_VARIN,,MXhg1PreLockSig,22,5,24,7,);
B(B_VAROUT,,MDmoorJoySignal,42,5,44,7,);
B(B_VAROUT,,MDhg1JoySignal,42,4,44,6,);
B(B_FB,FB_joy2_10fuV010,FB_joy2_8fun11,24,3,42,40,);
B(B_VAROUT,,MXhg1JoySigLock,42,15,44,17,);
B(B_VAROUT,,MXmoorEnJoySig,42,16,44,18,);
B(B_VAROUT,,MRriJoyYSymNr,42,26,44,28,);
B(B_VARIN,,TRUE,22,21,24,23,);
B(B_VARIN,,TRUE,22,20,24,22,);
B(B_VARIN,,LXhg1PumpZero,22,16,24,18,);
B(B_VARIN,,TRUE,22,19,24,21,);
B(B_VARIN,,LXmoorPumpZero,22,17,24,19,);
B(B_VARIN,,TRUE,22,18,24,20,);
B(B_VARIN,,TRUE,22,26,24,28,);
B(B_VARIN,,TRUE,22,24,24,26,);
B(B_VARIN,,TRUE,22,25,24,27,);
B(B_VARIN,,20.0,22,27,24,29,);
B(B_VARIN,,26.0,22,29,24,31,);
B(B_F,sel,,16,27,21,32,);
B(B_F,@OR-2,,11,26,16,30,);
B(B_VARIN,,6.0,14,29,16,31,);
B(B_VARIN,,8.0,14,30,16,32,);
B(B_VARIN,,TRUE,22,23,24,25,);
B(B_VARIN,,TRUE,22,22,24,24,);
B(B_VARIN,,MXwinSynPres,9,27,11,29,);
B(B_VARIN,,MXgrabCtrlPres,9,28,11,30,);
L(16,28,16,29);
L(21,29,24,29);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 40 ;
        NETWORK_BODY
B(B_VARIN,,MDhg2PreJoySig,24,4,26,6,);
B(B_COMMENT,,hoisting gear 2 multiplexer 2T joystick ,1,1,27,2,);
B(B_VARIN,,MXlg2PreJoySiHG2,24,6,26,8,);
B(B_VARIN,,MXhg2PreLockSig,24,5,26,7,);
B(B_VARIN,,MXhoCylPreJoySig,24,7,26,9,);
B(B_VARIN,,MXaxwPreJoySiHG2,24,8,26,10,);
B(B_VAROUT,,MDlg2JoySigHG2,44,5,46,7,);
B(B_VAROUT,,MDhg2JoySignal,44,4,46,6,);
B(B_VAROUT,,MDhoCylJoySignal,44,6,46,8,);
B(B_VAROUT,,MDaxwJoySigHG2,44,7,46,9,);
B(B_FB,FB_joy2_10fuV010,FB_joy2_8fun12,26,3,44,40,);
B(B_VAROUT,,MXhg2JoySigLock,44,15,46,17,);
B(B_VAROUT,,MXlg2EnJoySigHG2,44,16,46,18,);
B(B_VAROUT,,MXhoCylEnJoySig,44,17,46,19,);
B(B_VAROUT,,MXaxwEnJoySigHG2,44,18,46,20,);
B(B_VAROUT,,MRriJoyXSymNr,44,26,46,28,);
B(B_VARIN,,TRUE,24,21,26,23,);
B(B_VARIN,,TRUE,24,20,26,22,);
B(B_VARIN,,LXhg2PumpZero,24,16,26,18,);
B(B_VARIN,,LXlg2PumpZero,9,17,11,19,);
B(B_F,@OR-3,,11,16,16,21,);
B(B_VARIN,,MXlg2EnJoySigLG,9,18,11,20,);
B(B_VARIN,,MXlg2EnJoySigSG,9,19,11,21,);
B(B_VARIN,,LXhocPumpZero,24,18,26,20,);
B(B_VARIN,,LXaxwPumpZero,24,19,26,21,);
B(B_VARIN,,TRUE,24,26,26,28,);
B(B_VARIN,,TRUE,24,24,26,26,);
B(B_VARIN,,TRUE,24,25,26,27,);
B(B_VARIN,,21.0,24,27,26,29,);
B(B_VARIN,,4.0,24,29,26,31,);
B(B_F,sel,,18,27,23,32,);
B(B_VARIN,,7.0,16,29,18,31,);
B(B_VARIN,,0.0,16,30,18,32,);
B(B_VARIN,,MXmoorEnJoySig,11,26,13,28,);
B(B_F,@OR-3,,13,25,18,30,);
B(B_VARIN,,11.0,24,30,26,32,);
B(B_VARIN,,9.0,24,31,26,33,);
B(B_VARIN,,TRUE,24,23,26,25,);
B(B_VARIN,,TRUE,24,22,26,24,);
B(B_VARIN,,MXwinSynPres,11,27,13,29,);
B(B_VARIN,,MXgrabCtrlPres,11,28,13,30,);
L(16,18,26,18);
L(23,29,26,29);
L(18,27,18,29);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_RETURN,,,11,3,13,5,);
B(B_VARIN,,LXinitOk,9,3,11,5,);
B(B_COMMENT,,exit programm after init ,1,1,27,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL := init: ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,init lml program,1,1,27,2,);
B(B_VARIN,,TRUE,9,3,11,5,);
B(B_VAROUT,,LXinitOk,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value lml enabled,1,1,27,2,);
B(B_FB,CorrValue_Bool,CorrValue_Bool1,11,4,23,10,);
B(B_VARIN,,FALSE,9,5,11,7,);
B(B_VARIN,,FALSE,9,6,11,8,);
B(B_VARIN,,TRUE,9,7,11,9,);
B(B_VARIN,,CX2TJoystick,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value joystick vibrator enabled,1,1,27,2,);
B(B_FB,CorrValue_Bool,CorrValue_Bool2,11,4,23,10,);
B(B_VARIN,,FALSE,9,5,11,7,);
B(B_VARIN,,FALSE,9,6,11,8,);
B(B_VARIN,,TRUE,9,7,11,9,);
B(B_VARIN,,CXjoystVibrHg1,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value joystick vibrator enabled,1,1,27,2,);
B(B_FB,CorrValue_Bool,CorrValue_Bool3,11,4,23,10,);
B(B_VARIN,,FALSE,9,5,11,7,);
B(B_VARIN,,FALSE,9,6,11,8,);
B(B_VARIN,,TRUE,9,7,11,9,);
B(B_VARIN,,CXjoystVibrHg2,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value joystick vibrator enabled,1,1,27,2,);
B(B_FB,CorrValue_Bool,CorrValue_Bool4,11,4,23,10,);
B(B_VARIN,,FALSE,9,5,11,7,);
B(B_VARIN,,FALSE,9,6,11,8,);
B(B_VARIN,,TRUE,9,7,11,9,);
B(B_VARIN,,CXjoystVibrLg,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value joystick vibrator enabled,1,1,27,2,);
B(B_FB,CorrValue_Bool,CorrValue_Bool5,11,4,23,10,);
B(B_VARIN,,FALSE,9,5,11,7,);
B(B_VARIN,,FALSE,9,6,11,8,);
B(B_VARIN,,TRUE,9,7,11,9,);
B(B_VARIN,,CXjoystVibrSg,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value change joystick hg1 and hg2,1,1,27,2,);
B(B_FB,CorrValue_Bool,CorrValue_Bool6,11,4,23,10,);
B(B_VARIN,,FALSE,9,5,11,7,);
B(B_VARIN,,FALSE,9,6,11,8,);
B(B_VARIN,,TRUE,9,7,11,9,);
B(B_VARIN,,CXadChangeJoysti,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
END_BODY
END_PROGRAM

PROGRAM GPgeneralV630
(*name of author: Manfred Schapler
version: 1.0
date: 04/97
modification:*)
(*name of author: Manfred Schapler
version: 1.0
date: 04/97
modification:*)
	VAR_EXTERNAL 
		ITXfreefallOper: BOOL:=FALSE;
			(*preselection freefall operation *)
		ITXengReqStop: BOOL:=FALSE;
			(*preselection requested engine stop *)
		ITXcylOperat: BOOL:=FALSE;
			(*preselection cylinder operation *)
		ITXaFrameCylOut: BOOL:=FALSE;
			(*preselection a frame cylinder out (rising)*)
		ITXaFrameCylIn: BOOL:=FALSE;
			(*preselection a frame cylinder in (lowering)*)
		ITXlimSwBridged: BOOL:=FALSE;
			(*preselection limit switch bridged*)
		IXassemblyOperat: BOOL:=FALSE;
			(*key switch 1: assembly operation*)
		IXentrySwiClosed: BOOL:=FALSE;
			(*entry switch closed*)
		IXlg2LowerLimOk: BOOL:=FALSE;
			(*lower limit switch LG 2 o.k.*)
		IXlgUpperLimOk: BOOL:=FALSE;
			(*upper limit switch LG o.k.*)
		IXlgAFraUppLimOk: BOOL:=FALSE;
			(*upper limit switch main boom a-frame (8 degree)*)
		IXunsecuredFreef: BOOL:=FALSE;
			(*unsecured freefall*)
		IXcentLubBear: BOOL:=FALSE;
			(*add central lubrication indic. bearing*)
		IXcentLubSlewRi: BOOL:=FALSE;
			(*add central lubrication indic. slewing ring*)
		IXludvPumpExtRel: BOOL:=FALSE;
			(*external release LUDV pump*)
		IWfuelTankCont: UINT:=0;
			(*content Dieseltank*)
		IWsuperstAngSenX: UINT:=0;
			(*superstructure angle sensor X*)
		IWsuperstAngSenY: UINT:=0;
			(*superstructure angle sensor Y*)
		QTXfreefallOper: BOOL:=FALSE;
			(*enable freefall operation *)
		QTXengReqStop: BOOL:=FALSE;
			(*enable requested engine stop *)
		QTXhg1FastSpeed: BOOL:=FALSE;
			(*enable hg1 fast speed operation *)
		QTXhg2FastSpeed: BOOL:=FALSE;
			(*enable hg2 fast speed operation *)
		QTXlimSwBridged: BOOL:=FALSE;
			(*enable limit switch bridged*)
		QTXcylOpera: BOOL:=FALSE;
			(*enable cylinder operation*)
		QTXaFrameCylOut: BOOL:=FALSE;
			(*enable a frame cylinder out (rising)*)
		QTXaFrameCylIn: BOOL:=FALSE;
			(*enable a frame cylinder in (lowering)*)
		QXlgBrake: BOOL:=FALSE;
			(*LG brake*)
		QXflashingLight: BOOL:=FALSE;
			(*additional device flashing light*)
		QXreleasCylOpera: BOOL:=FALSE;
			(*release cylinder operation*)
		QXmovementWarnin: BOOL:=FALSE;
			(*movement warning acoustical*)
		QXadwBrake: BOOL:=FALSE;
			(*add winch brake / personal winch brake*)
		QXlg2Brake: BOOL:=FALSE;
			(*LG 2 brake*)
		QXhg1Clutch: BOOL:=FALSE;
			(*HG 1 clutch*)
		QXhg1BrakeNormal: BOOL:=FALSE;
			(*HG 1 brake normal speed operation*)
		QXhg1BrakeFastSp: BOOL:=FALSE;
			(*HG 1 brake fast speed operation*)
		QXhg2Clutch: BOOL:=FALSE;
			(*HG 2 clutch*)
		QXhg2BrakeNormal: BOOL:=FALSE;
			(*HG 2 brake normal speed operation*)
		QXhg2BrakeFastSp: BOOL:=FALSE;
			(*HG 2 brake fast speed operation*)
		QXaFrameCylDown: BOOL:=FALSE;
			(*a-frame cylinder in*)
		QXaFrameCylUp: BOOL:=FALSE;
			(*a-frame cylinder out*)
		QXdestruConsTens: BOOL:=FALSE;
			(*ad constant tension at destruction operation*)
		QXreleaseAddPump: BOOL:=FALSE;
			(*additional pump / leader valves / grab valves / pass.trans.winch*)
		MXlmlHSMode: BOOL:=FALSE;
			(*lml excavator mode*)
		MXlmlDeactive: BOOL:=FALSE;
			(*lml deactivated*)
		MXassemblyOperat: BOOL:=FALSE;
			(*assembly operation*)
		MXflashSignal: BOOL:=FALSE;
			(*flash signal [1,66 Hz]*)
		MXslowFlashSig: BOOL:=FALSE;
			(*flash signal [0,83 Hz]*)
		MXengineStopped: BOOL:=FALSE;
			(*engine stopped by engine electronic*)
		MXengAgnStopFunc: BOOL:=FALSE;
			(*engine DPF regeneration stops all function*)
		MXlimitSwBridged: BOOL:=FALSE;
			(*X23 limit switches bridged for assembly operation*)
		MXhg1pselFreefal: BOOL:=FALSE;
			(*HG 1 preselected freefall*)
		MXhg2pselFreefal: BOOL:=FALSE;
			(*HG 2 preselected freefall*)
		MXlockFreefall: BOOL:=FALSE;
			(*lock freefall*)
		MXhg1AnalSigPos: BOOL:=FALSE;
			(*hg1 analog signal positiv*)
		MXhg1AnalSigNeg: BOOL:=FALSE;
			(*hg1 analog signal negativ*)
		MXhg1ExtControl: BOOL:=FALSE;
			(*HG 1 external enable to all outputs*)
		MXhg1UpLimBridge: BOOL:=FALSE;
			(*upper limit switch brigde hoisting gear 1*)
		MXhg2AnalSigPos: BOOL:=FALSE;
			(*hg2 analog signal positiv*)
		MXhg2ExtControl: BOOL:=FALSE;
			(*HG 2 external enable to all outputs*)
		MXhg2AnalSigNeg: BOOL:=FALSE;
			(*hg2 analog signal negativ*)
		MXhg1GlobStopUp: BOOL:=FALSE;
			(*HG 1 global stop rapid up*)
		MXhg2GlobStopUp: BOOL:=FALSE;
			(*HG 2 global stop rapid up*)
		MXhg1GlobStopDow: BOOL:=FALSE;
			(*HG 1 global stop rapid down*)
		MXhg2GlobStopDow: BOOL:=FALSE;
			(*HG 2 global stop rapid down*)
		MXhg2UpLimBridge: BOOL:=FALSE;
			(*upper limit switch brigde hoisting gear 2*)
		MXhg1EnPowStage: BOOL:=FALSE;
			(*HG 1 enable power stage lifting or lowering*)
		MXhg2EnPowStage: BOOL:=FALSE;
			(*HG 2 enable power stage lifting or lowering*)
		MXadStopHg1Up: BOOL:=FALSE;
			(*additional device stop hg1 lifting*)
		MXadStopHg2Up: BOOL:=FALSE;
			(*additional device stop hg2 lifting*)
		MXadStopHg1Dn: BOOL:=FALSE;
			(*additional device stop hg1 lowering*)
		MXadStopHg2Dn: BOOL:=FALSE;
			(*additional device stop hg2 lowering*)
		MXlgAnalSigNeg: BOOL:=FALSE;
			(*lg analog signal negativ*)
		MXlgUpStopFaBaSu: BOOL:=FALSE;
			(*lg up stop by fall back support angle and limit switsch*)
		MXlgEnPowStage: BOOL:=FALSE;
			(*LG enable power stage lifting or lowering*)
		MXlg2GlobalStopU: BOOL:=FALSE;
			(*luffing gear 2 global stop up*)
		MXlg2GlobalStopD: BOOL:=FALSE;
			(*luffing gear 2 global stop down*)
		MXlg2EnPowStage: BOOL:=FALSE;
			(*LG 2 enable power stage lifting or lowering*)
		MXsgEnPowStage: BOOL:=FALSE;
			(*SG enable power stage right or left*)
		MXlgGlobalStopDn: BOOL:=FALSE;
			(*lg global stop down*)
		MXlgGlobalStopUp: BOOL:=FALSE;
			(*lg global stop up*)
		MXlgUpAngleStop: BOOL:=FALSE;
			(*LG up stop by angle*)
		MXlgDnAngleStop: BOOL:=FALSE;
			(*LG down stop by angle*)
		MXlgStopUpByFlap: BOOL:=FALSE;
			(*lg2 flap is not working (defect)*)
		MXlgStopDnByFlap: BOOL:=FALSE;
			(*lg2 fall back support luffing jib is in flap*)
		MXsgGlobalStopRi: BOOL:=FALSE;
			(*SG global stop right*)
		MXsgGlobalStopLe: BOOL:=FALSE;
			(*SG global stop left*)
		MXlmlStopBackwar: BOOL:=FALSE;
			(*lml stop backwards (derrick)*)
		MXminEngineSpeed: BOOL:=FALSE;
			(*minimum engine speed reached*)
		MXstopAllFunctio: BOOL:=FALSE;
			(*stop all excavator functions*)
		MXstopModulError: BOOL:=FALSE;
			(*set stop in case of module error*)
		MXaddHydrActive: BOOL:=FALSE;
			(*addittional hydraulics active*)
		MXlmlPressSenErr: BOOL:=FALSE;
			(*lml pressure sensor error fall back support luffing jib*)
		MXlmlProgError: BOOL:=FALSE;
			(*lml program error*)
		MXad1LockFreefal: BOOL:=FALSE;
			(*ad 1 lock freefall*)
		MXad2LockFreefal: BOOL:=FALSE;
			(*ad 2 lock freefall*)
		MXad3LockFreefal: BOOL:=FALSE;
			(*ad 3 lock freefall*)
		MXdgcResRopeHg1: BOOL:=FALSE;
			(*external reset rope length measuring hg1 by DGC*)
		MXdgcResRopeHg2: BOOL:=FALSE;
			(*external reset rope length measuring hg2 by DGC*)
		MXextResRopeHg1: BOOL:=FALSE;
			(*external reset rope lenght hg1*)
		MXextResRopeHg2: BOOL:=FALSE;
			(*external reset rope lenght hg2*)
		MXadwUpLimOk: BOOL:=FALSE;
			(*additional winch: upper limit switch o.k.*)
		MXaxwUpLimOk: BOOL:=FALSE;
			(*auxiliary winch:  upper limit switch o.k.*)
		MXstopByRadLimMb: BOOL:=FALSE;
			(*stop main boom down by radius limitaion*)
		MXstopByHigLimMb: BOOL:=FALSE;
			(*stop main boom up by hight limitaion*)
		MXstopByRadLimLj: BOOL:=FALSE;
			(*stop luffing jib down by radius limitaion*)
		MXstopByHigLimLj: BOOL:=FALSE;
			(*stop luffing jib up by hight limitaion*)
		MXlg2UpAngleStop: BOOL:=FALSE;
			(*luffing gear 2 stop up by angle*)
		MXlg2DnAngleStop: BOOL:=FALSE;
			(*luffing gear 2 stop down by angle*)
		MXhydrGrabActive: BOOL:=FALSE;
			(*ad hydr. grap is active*)
		MXexitAddHydr: BOOL:=FALSE;
			(*additional hydraulic exit programm*)
		MXexitStabWinch: BOOL:=FALSE;
			(*ad stabilization winch exit programm*)
		MXexitDynGndComp: BOOL:=FALSE;
			(*ad dyn. ground comp. exit programm*)
		MXexitHangLeader: BOOL:=FALSE;
			(*exit hanging leader programm *)
		MXjoyEngSpeedUp: BOOL:=FALSE;
			(*engine speed adjust up*)
		MXjoyEngSpeedDn: BOOL:=FALSE;
			(*engine speed adjust down *)
		MXjoyGrabAssembl: BOOL:=FALSE;
			(*hydr. grab joystick grab assembly*)
		MXjoyHyGrabPre: BOOL:=FALSE;
			(*ad hydraulic grab preselection on joystick*)
		MXad2Working: BOOL:=FALSE;
			(*additional device 2 working*)
		MXad3Working: BOOL:=FALSE;
			(*additional device 3 working*)
		MXenabHyGrabOper: BOOL:=FALSE;
			(*enable hydr.grab operation*)
		MXenablVibOperat: BOOL:=FALSE;
			(*enable vibrator operation*)
		MXenablHamOperat: BOOL:=FALSE;
			(*enable hammer operation*)
		MXvibratWorking: BOOL:=FALSE;
			(*vibrator working*)
		MXexDrWorking: BOOL:=FALSE;
			(*excentric drive working*)
		MXclampWorking: BOOL:=FALSE;
			(*clamping jaw working*)
		MXhammerWorking: BOOL:=FALSE;
			(*hammer working*)
		MXhg1LockClutch: BOOL:=FALSE;
			(*HG 1 global lock clutch*)
		MXhg2LockClutch: BOOL:=FALSE;
			(*HG 2 global lock clutch*)
		MXad1Hg1LockClut: BOOL:=FALSE;
			(*add.1 HG 1 global lock clutch*)
		MXad2Hg1LockClut: BOOL:=FALSE;
			(*add.2 HG 1 global lock clutch*)
		MXad1Hg2LockClut: BOOL:=FALSE;
			(*add.1 HG 2 global lock clutch*)
		MXad2Hg2LockClut: BOOL:=FALSE;
			(*add.2 HG 2 global lock clutch*)
		MXhg1LockFastSpe: BOOL:=FALSE;
			(*hg 1 lock fast speed*)
		MXhg2LockFastSpe: BOOL:=FALSE;
			(*hg 2 lock fast speed*)
		MXhg1EnabFastSpe: BOOL:=FALSE;
			(*enable fast speed operation hg1*)
		MXhg2EnabFastSpe: BOOL:=FALSE;
			(*enable fast speed operation hg2*)
		MXadWinSynWork: BOOL:=FALSE;
			(*ad winch synchronize working*)
		MXadGrabCoWork: BOOL:=FALSE;
			(*ad grab control working*)
		MXpdeResRopeHg2: BOOL:=FALSE;
			(*external reset rope length measuring hg2 by PDE*)
		MXenabHangLeader: BOOL:=FALSE;
			(*add. enable hanging leader*)
		MXleaderStopBack: BOOL:=FALSE;
			(*leader stop backward*)
		MXpwSlackRopeOk: BOOL:=FALSE;
			(*passenger winch slack rope o.k.*)
		MXpwGlobalStopUp: BOOL:=FALSE;
			(*passenger winch global stop up*)
		MXlmlBridged: BOOL:=FALSE;
			(*lml bridged*)
		MXadHydAdToLudv1: BOOL:=FALSE;
			(*added sig. to add.hyd.sig. LUDV pu1*)
		MXadHydAdToLudv2: BOOL:=FALSE;
			(*added sig. to add.hyd.sig. LUDV pu2*)
		MXenabMagnetUnit: BOOL:=FALSE;
			(*enable add. magnetic unit*)
		MXexitAddMagUnit: BOOL:=FALSE;
			(*exit add. magnetic unit*)
		MXexitHydrGrab: BOOL:=FALSE;
			(*exit add. hydraulic grab (concrete crusher)*)
		MXlowPowLimitAct: BOOL:=FALSE;
			(*lower power limitation active*)
		MXnewModeSelect: BOOL:=FALSE;
			(*new mode is selected*)
		MXlmlSingleScale: BOOL:=FALSE;
			(*lml single scale sensors (not redundant)*)
		MXwindSpeedAct: BOOL:=FALSE;
			(*wind speed sensor present*)
		MXenabDgcOperat: BOOL:=FALSE;
			(*add. dynamic ground compaction enable*)
		MXcylOperatWork: BOOL:=FALSE;
			(*enable cylinder operation working*)
		MXpreHigEngSpeed: BOOL:=FALSE;
			(*preselect high engine speed*)
		MXad1Working: BOOL:=FALSE;
			(*additional device 1 working*)
		MXmomRegEnabled: BOOL:=FALSE;
			(*SG moment regulator enabled*)
		MXadSBHydrGrab: BOOL:=FALSE;
			(*add. soletanche bachy hydraulic grab control*)
		MXadSMHydrGrab: BOOL:=FALSE;
			(*add. soilmec hydraulic grab control*)
		MXadLEHydrGrab: BOOL:=FALSE;
			(*add. leffer hydraulic grab control*)
		MXhgFastSpeed: BOOL:=FALSE;
			(*HG 1 and 2 fast speed operation preselected*)
		MXhg1LedFastSpe: BOOL:=FALSE;
			(*enable led fast speed operation hg1*)
		MXhg2LedFastSpe: BOOL:=FALSE;
			(*enable led fast speed operation hg2*)
		MXgrabMooStopHg1: BOOL:=FALSE;
			(*stop hoisting gear 1 at grap mooring start*)
		MXgrabMooStopHg2: BOOL:=FALSE;
			(*stop hoisting gear 2 at grap mooring start*)
		MXhg1SlacRoStopD: BOOL:=FALSE;
			(*add. hydr. grab slack hg1 rope stop down*)
		MXhg2SlacRoStopD: BOOL:=FALSE;
			(*add. hydr. grab slack hg2 rope stop down*)
		MXenabAutHoseWin: BOOL:=FALSE;
			(*add. hydraulic grab automatic hose winch*)
		MXpdeConnection: BOOL:=TRUE;
			(*pde connection Master Slave*)
		MXad3Hg1LockClut: BOOL:=FALSE;
			(*add.3 HG 1 global lock clutch*)
		MXad3Hg2LockClut: BOOL:=FALSE;
			(*add.3 HG 2 global lock clutch*)
		MXpdeResRopeHg1: BOOL:=FALSE;
			(*external reset rope length measuring hg1 by PDE*)
		MXexitLEHydrGrab: BOOL:=FALSE;
			(*exit add. Leffer hydraulic grab *)
		MXexitSSHydrGrab: BOOL:=FALSE;
			(*exit add. SM/SB hydraulic grab *)
		MXgrabGlobalStop: BOOL:=FALSE;
			(*ad global stop polyp grab*)
		MXemergOperat: BOOL:=FALSE;
			(*emergency operation*)
		MXhg1StopLimLift: BOOL:=FALSE;
			(*hg1 stop lifting by hg hight limitation*)
		MXhg2StopLimLift: BOOL:=FALSE;
			(*hg2 stop lifting by hg hight limitation*)
		MXhg1StopLimLowe: BOOL:=FALSE;
			(*hg1 stop lowering by hg hight limitation*)
		MXhg2StopLimLowe: BOOL:=FALSE;
			(*hg2 stop lowering by hg hight limitation*)
		MXhg1LedFastWin: BOOL:=FALSE;
			(*enable led fast winch operation hg1*)
		MXhg2LedFastWin: BOOL:=FALSE;
			(*enable led fast winch operation hg2*)
		MXenabKelGrabOpe: BOOL:=FALSE;
			(*enable add. kelly grab operation*)
		MXenabHyGrabHose: BOOL:=FALSE;
			(*enable add. hydr. grab with hose winch *)
		MXaFrameCylPrese: BOOL:=FALSE;
			(*a frame cylinder preselcted*)
		MXrelAFrameCyl: BOOL:=FALSE;
			(*a frame cylinder released*)
		MXaFrameSensorEr: BOOL:=FALSE;
			(*a frame load sensor error*)
		MXlowPoOilCoApar: BOOL:=FALSE;
			(*separat lowering power regulation valve and oil cooler drive*)
		MXlmlStarted: BOOL:=FALSE;
			(*lml invalid data*)
		MXenablDrillOper: BOOL:=FALSE;
			(*enable drilling drive operation*)
		MXddEnabPowStage: BOOL:=FALSE;
			(*drilling drive enable power stage left/right*)
		MXrelLeaderPump: BOOL:=FALSE;
			(*release pump for leader valves*)
		MXrelPassTwiPump: BOOL:=FALSE;
			(*release pump for passenger transportation winch*)
		MXrelGrabValves: BOOL:=FALSE;
			(*release pumpe for grab valves*)
		MXmoorEnPowStage: BOOL:=FALSE;
			(*mooring enable power stage lifting or lowering*)
		MXadMooringActiv: BOOL:=FALSE;
			(*mooring activ*)
		MXadSlidTabLiSwi: BOOL:=FALSE;
			(*add. limit switch sliding table (pievote piece)*)
		MXleaderMounted: BOOL:=FALSE;
			(*leader mounted*)
		MXslidTabStopUp: BOOL:=FALSE;
			(*stop sliding table up when crashes with pivot piece *)
		MXleadHighWinPre: BOOL:=FALSE;
			(*preselection leader high adjusting winch*)
		MXremContActive: BOOL:=FALSE;
			(*remote control activated*)
		MXrcStopAllFunct: BOOL:=FALSE;
			(*remote control stop all functions*)
		MXremContPresel: BOOL:=FALSE;
			(*remote control preselected by X12 Button*)
		MXcouCarActive: BOOL:=FALSE;
			(*counterweight carrier active*)
		MXrcLockFreeTurn: BOOL:=FALSE;
			(*remote control lock sg free turn*)
		MXrcLudvMachine: BOOL:=FALSE;
			(*remote control machine type is ludv (open hydraulic circuit)*)
		MXpreLowEngSpeed: BOOL:=FALSE;
			(*preselect low engine speed*)
		MXsgLockMomReg: BOOL:=FALSE;
			(*sg lock sg moment regulator*)
		MXswitTravelGear: BOOL:=FALSE;
			(*travelling gear is activated*)
		MXengStarterActi: BOOL:=FALSE;
			(*engine starter activated*)
		MXanyFunctActive: BOOL:=FALSE;
			(*any function active, ludv stopp*)
		MXecHG1StopDn: BOOL:=FALSE;
			(*external control stop hoisting gear 1 lowering*)
		MXecHG1StopUp: BOOL:=FALSE;
			(*external control stop hoisting gear 1 lifting*)
		MXecHG2StopDn: BOOL:=FALSE;
			(*external control stop hoisting gear 2 lowering*)
		MXecHG2StopUp: BOOL:=FALSE;
			(*external control stop hoisting gear 2 lifting*)
		MXecLGStopUp: BOOL:=FALSE;
			(*external control stop luffing gear lifting*)
		MXecLGStopDn: BOOL:=FALSE;
			(*external control stop luffing gear lowering*)
		MXecSgStopRi: BOOL:=FALSE;
			(*external control stop slewing gear right*)
		MXecSgStopLe: BOOL:=FALSE;
			(*external control stop slewing gear left*)
		MXecAuxWinStopDn: BOOL:=FALSE;
			(*external control stop auxiliary winch lowering*)
		MXecAuxWinStopUp: BOOL:=FALSE;
			(*external control stop auxiliary winch lifting*)
		MXecAddWinStopDn: BOOL:=FALSE;
			(*external control stop additional winch lowering*)
		MXecAddWinStopUp: BOOL:=FALSE;
			(*external control stop additional winch lifting*)
		MXecPreHigEngSp: BOOL:=FALSE;
			(*external control pres. high engine speed*)
		MXecRelAddPump: BOOL:=FALSE;
			(*external control release add pump *)
		MXecRelLeadPump: BOOL:=FALSE;
			(*external control release leader pump*)
		MXecHg1ExitProg: BOOL:=FALSE;
			(*external control presel. exit hg1 programm*)
		MXecHg2ExitProg: BOOL:=FALSE;
			(*external control presel. exit hg2 programm*)
		MXecConnectErr: BOOL:=FALSE;
			(*external control connection error *)
		MXecWatchdogErr: BOOL:=FALSE;
			(*external control watchdog error*)
		MXecComTimeout: BOOL:=FALSE;
			(*external control communication timeout*)
		MXstopFunLmlConf: BOOL:=FALSE;
			(*stop all function, wrong lml configuration*)
		MXenabMainOperat: BOOL:=FALSE;
			(*main operation enable*)
		MXhydrOilContErr: BOOL:=FALSE;
			(*hydraulic oil tank content error*)
		MXengStopReq: BOOL:=FALSE;
			(*engine stop required*)
		MXsafetyProgSAF: BOOL:=FALSE;
			(*safety program stop all function*)
		MXjoyDestrConTen: BOOL:=FALSE;
			(*add. preselection destruction constant tension (clutch)*)
		MXlmlBlockHg1: BOOL:=FALSE;
			(*lml block hg1 by load location 2 and lml mode 3*)
		MXlmlBlockHg2: BOOL:=FALSE;
			(*lml block hg1 by load location 2 and lml mode 3*)
		MXlmlStopLgUp: BOOL:=FALSE;
			(*lml stop lg up*)
		MXlmlStopLgDn: BOOL:=FALSE;
			(*lml stop lg down*)
		MXpwUpLimOk: BOOL:=FALSE;
			(*passenger winch: upper limit switch o.k.*)
		MXwalSgStopRight: BOOL:=FALSE;
			(*wal stop sg right*)
		MXwalSgStopLeft: BOOL:=FALSE;
			(*wal stop sg left*)
		MX600barPreTrans: BOOL:=FALSE;
			(*600bar pressure transmitter used*)
		MX600barPreTraSG: BOOL:=FALSE;
			(*600bar pressure transmitter used at slewing gear*)
		MXfuelContWarn: BOOL:=FALSE;
			(*fuel content too low warning*)
		MXfuelContError: BOOL:=FALSE;
			(*fuel content too low error*)
		MXstopLudvPumps: BOOL:=FALSE;
			(*stop ludv pumps *)
		MXadBAHydrGrab: BOOL:=FALSE;
			(*enable bauer hydraulik grab operation*)
		MXadBAMilOperat: BOOL:=FALSE;
			(*enable bauer mill grab operation*)
		MXglobStopEngine: BOOL:=FALSE;
			(*global stop engine*)
		MXhgByLudvSectio: BOOL:=FALSE;
			(*hg driven by LUDV section*)
		MXsgByLudvSectio: BOOL:=FALSE;
			(*sg driven by LUDV section*)
		MXLiftCrane: BOOL:=FALSE;
			(*crawler crane is lift crane type*)
		MXderrickPossib: BOOL:=FALSE;
			(*lift crane: derrick is possible*)
		MXrcStopEngine: BOOL:=FALSE;
			(*remote control stop engine*)
		MXspeLifLockTrim: BOOL:=FALSE;
			(*special lifting function lock hg trimot*)
		MXspeLifLockFaSp: BOOL:=FALSE;
			(*special lifting function lock hg fast speed*)
		MXlockSpeFastSpe: BOOL:=FALSE;
			(*hg lock special fast speed one winch on two pumps*)
		MXwinSynLockTrim: BOOL:=FALSE;
			(*winch synchronisation lock trimot*)
		MXhg1LockTrimot: BOOL:=FALSE;
			(*hg1 lock trimot*)
		MXhg2LockTrimot: BOOL:=FALSE;
			(*hg2 lock trimot*)
		MXdgcLockHg1Trim: BOOL:=FALSE;
			(*dyn. ground comp. lock trimot hg1*)
		MXdgcLockHg2Trim: BOOL:=FALSE;
			(*dyn. ground comp. lock trimot hg1*)
		MXacReleasMachin: BOOL:=FALSE;
			(*ac blocks machine, access denied*)
		MXmachWiGearBox: BOOL:=FALSE;
			(*machine with gear box*)
		MXsetZeroTravelG: BOOL:=FALSE;
			(*set zero position travelling gear*)
		MXforcedNeutral: BOOL:=FALSE;
			(*force neutral engine speed*)
		MXhgSpecialLift: BOOL:=FALSE;
			(*hg special sensitive lifting function active*)
		MXenabDragliOper: BOOL:=FALSE;
			(*enable dragline operation*)
		MXlgJoySigLock: BOOL:=FALSE;
			(*lg joy stick signal locked for other function*)
		MXlgPreLockSig: BOOL:=FALSE;
			(*luffing gear preselection lock signal *)
		MXhg2PreLockSig: BOOL:=FALSE;
			(*hg2 preselection lock signal *)
		MXhg1PreLockSig: BOOL:=FALSE;
			(*hg1 preselection lock signal *)
		MXsgPreLockSig: BOOL:=FALSE;
			(*sg preselection lock signal *)
		MXinclShutOff: BOOL:=FALSE;
			(*crane inclination shut off*)
		MXinclShutOffScr: BOOL:=FALSE;
			(*crane inclination shut off screen*)
		MXinclShutPreScr: BOOL:=FALSE;
			(*crane inclination prewarning shut off screen*)
		MXgrabStopLG: BOOL:=FALSE;
			(*grab operation stopp Luffing gear*)
		MXsmallSuperstr: BOOL:=FALSE;
			(*machine type small superstructure*)
		MXluffingCylinde: BOOL:=FALSE;
			(*machine type luffing cylinder instead of a-frame*)
		MXaxwGlobalStopU: BOOL:=FALSE;
			(*aux. winch global stop up*)
		MXaxwGlobalStopD: BOOL:=FALSE;
			(*aux. winch global stop down*)
		MXaxwEnPowStage: BOOL:=FALSE;
			(*aux winch enable power stage*)
		MXjoystickInZero: BOOL:=FALSE;
			(*joystick in zero position (no control signal is active)*)
		MXhocEnPowStage: BOOL:=FALSE;
			(*hoisting cylinder enable power stage*)
		MXadwEnPowStage: BOOL:=FALSE;
			(*add winch enable power stage*)
		MXadwGlobalStopU: BOOL:=FALSE;
			(*add. winch global stop up*)
		MXadwGlobalStopD: BOOL:=FALSE;
			(*add. winch global stop down*)
		MX1LudvWorkSect: BOOL:=FALSE;
			(*only one ludv working section *)
		MXuseLudvPump3: BOOL:=FALSE;
			(*use ludv pump P3*)
		MXuseLudvPump4: BOOL:=FALSE;
			(*use ludv pump P4*)
		MXmachWiTrimot: BOOL:=FALSE;
			(*machine with electrical trimot *)
		MXretarderSecAct: BOOL:=FALSE;
			(*retarder section active*)
		MXstabWinchOC: BOOL:=FALSE;
			(*stab winch with open circuit*)
		MXextLudvSecAct: BOOL:=FALSE;
			(*external LUDV section active*)
		MXaddMagUnitPre: BOOL:=FALSE;
			(*add. magnetic unit preselected*)
		MXexitAddOilSupp: BOOL:=FALSE;
			(*exit add. hydr. oil supply*)
		MXpresAddOilSupp: BOOL:=FALSE;
			(*add. hydr. oil supply preselected*)
		MXenabAddOilSupp: BOOL:=FALSE;
			(*enable additional oil supply *)
		MXludvSectActiv: BOOL:=FALSE;
			(*ludv section is active*)
		MXludvSecP1activ: BOOL:=FALSE;
			(*ludv working section P1 active*)
		MXludvSecP2activ: BOOL:=FALSE;
			(*ludv working section P2 active*)
		MXtgGlobalStop: BOOL:=FALSE;
			(*tg global stop *)
		MXengMinIdleSpd: BOOL:=FALSE;
			(*speed up to minimum idle speed*)
		MDaFrameLoadSens: REAL:=0.0;
			(*a frame load sensor in kN*)
		MDdeltaTime: REAL:=0.001;
			(*time to the last scan in sec.*)
		MDlmlLoadBoom: REAL:=0.0;
			(*lml load main boom in to*)
		MDlmlLoadLuffJib: REAL:=0.0;
			(*lml load luffing jib in to*)
		MDlmlUtilization: REAL:=0.0;
			(*lml utilization in %*)
		MDlmlUtilBackwar: REAL:=0.0;
			(*lml utilization backwards (derrick)*)
		MDadHydAdToLudv1: REAL:=0.0;
			(*added signal to add. hydr. signal for LUDV pu1*)
		MDadHydAdToLudv2: REAL:=0.0;
			(*added signal to add. hydr. signal for LUDV pu2*)
		MDlgPumpSignal: REAL:=0.0;
			(*LG analog signal pump in [%]*)
		MDsgPumpSignal: REAL:=0.0;
			(*SG analog signal pump in [%]*)
		MDlmlMode: REAL:=0.0;
			(*lml mode*)
		MDsuperstAngSenX: REAL:=0.0;
			(*superstructure angle sensor X [°]*)
		MDsuperstAngSenY: REAL:=0.0;
			(*superstructure angle sensor Y [°]*)
		MDfuelCont: REAL:=0.00;
			(*fuel content [%]*)
		MDsuperstrAngAbs: REAL:=0.0;
			(*superstructure angle absolut [°]*)
		MDaxwPumpSignal: REAL:=0.0;
			(*aux. winch analog signal pump in [%]*)
	END_VAR
	VAR_EXTERNAL CONSTANT
		MSG_INFO: UINT:=0;
		MSG_WARNING: UINT:=0;
			(* message priority: "warning" *)
		MSG_ERROR: UINT:=0;
			(* message priority: "error" *)
		PI: REAL:=3.141592653;
	END_VAR
	VAR_EXTERNAL RETAIN
		MXlmlLuffJibEnab: BOOL:=FALSE;
			(*lml luffing jib enabled*)
		MXmachTypeOk: BOOL:=FALSE;
			(*machine type is activated*)
		MXmachTypeHS8030: BOOL:=FALSE;
			(*machine type HS8030 activated*)
		MXmachTypeHS8040: BOOL:=FALSE;
			(*machine type HS8040 activated*)
		MXmachTypeHS8050: BOOL:=FALSE;
			(*machine type HS8050 activated*)
		MXmachTypeHS8070: BOOL:=FALSE;
			(*machine type HS8070 activated*)
		MXmachTypeHS8100: BOOL:=FALSE;
			(*machine type HS8100 activated*)
		MXmachTypeHS8120: BOOL:=FALSE;
			(*machine type HS8120 activated*)
		MXmachTypeHS8160: BOOL:=FALSE;
			(*machine type HS8160 activated*)
		MXmachTypeHS8200: BOOL:=FALSE;
			(*machine type HS8200 activated*)
		MXmachTypeLR1100: BOOL:=FALSE;
			(*machine type LR1100 activated*)
		MXmachTypeLR1130: BOOL:=FALSE;
			(*machine type LR1130 activated*)
		MXmachTypeLR1160: BOOL:=FALSE;
			(*machine type LR1160 activated*)
		MXmachTypeLR1200: BOOL:=FALSE;
			(*machine type LR1200 activated*)
		MXmachTypeLR1300: BOOL:=FALSE;
			(*machine type LR1300 activated*)
		MXenExtOperMode: BOOL:=FALSE;
			(*enable external operation mode*)
		MXlmlTypeDutyCyc: BOOL:=FALSE;
			(*lml type is duty cycle machine*)
		MXlmlFix_LuffJib: BOOL:=FALSE;
			(*lml fixed or luffing jib enabled*)
		MXlmlRiggingAct: BOOL:=FALSE;
			(*lml 2010 rigging is activated*)
		MXleaderOper: BOOL:=FALSE;
			(*leader operation active*)
		MXmod57SetActive: BOOL:=FALSE;
			(*set modul 57 active*)
		MXmod57SetCritic: BOOL:=FALSE;
			(*set modul 57 critical*)
		MXmod18SetActive: BOOL:=FALSE;
			(*set modul 18 active*)
		MXmod18SetCritic: BOOL:=FALSE;
			(*set modul 18 critical*)
		MXmod10SetActive: BOOL:=FALSE;
			(*set modul 10 active*)
		MXmod10SetCritic: BOOL:=FALSE;
			(*set modul 10 critical*)
		MXmod34SetActive: BOOL:=FALSE;
			(*set modul 34 active*)
		MXmod34SetCritic: BOOL:=FALSE;
			(*set modul 34 critical*)
		MXmod19SetActive: BOOL:=FALSE;
			(*set modul 19 active*)
		MXmod19SetCritic: BOOL:=FALSE;
			(*set modul 19 critical*)
		MXmod43SetActive: BOOL:=FALSE;
			(*set modul 43 active*)
		MXmod43SetCritic: BOOL:=FALSE;
			(*set modul 43 critical*)
		MXkeybX25SetAct: BOOL:=FALSE;
			(*set keyboard X25 active*)
		MXkeybX22SetAct: BOOL:=FALSE;
			(*set keyboard X22 active*)
		MXkeybX22SetCrit: BOOL:=FALSE;
			(*set keyboard X22 critical*)
		MXlgLockDragline: BOOL:=FALSE;
			(*luffing gear locked at dragline operation *)
		MXmod14SetActive: BOOL:=FALSE;
			(*set modul 14 active*)
		MXmod14SetCritic: BOOL:=FALSE;
			(*set modul 14 critical*)
		MXmod49SetActive: BOOL:=FALSE;
			(*set modul 49 active*)
		MXmod58SetActive: BOOL:=FALSE;
			(*set modul 58 active*)
		MXlockLg: BOOL:=FALSE;
			(*lock luffing gear*)
		MXlockHg1: BOOL:=FALSE;
			(*lock hg1*)
		MXlockHg2: BOOL:=FALSE;
			(*lock hg2*)
		MXlockSg: BOOL:=FALSE;
			(*lock slewing gear*)
		MXlockTg: BOOL:=FALSE;
			(*lock travelling gear*)
	END_VAR
	VAR_EXTERNAL CONSTANT RETAIN
		CXhg1RopeLenMeas: BOOL:=FALSE;
			(*rope lenght measuring hg 1*)
		CXhg2RopeLenMeas: BOOL:=FALSE;
			(*rope lenght measuring hg 2*)
		CXtgWarning: BOOL:=FALSE;
			(*enable travelling gear warning*)
		CXsgWarning: BOOL:=FALSE;
			(*enable slewing gear warning*)
		CXwindSpeedSenso: BOOL:=FALSE;
			(*wind speed sensor present*)
		CXadDynGrouComp: BOOL:=FALSE;
			(*additional device dynamic ground compaction*)
		CXadHydrGrab: BOOL:=FALSE;
			(*ad hydraulic grab control without hose winch*)
		CXadVibOperat: BOOL:=FALSE;
			(*additional device vibrator operation*)
		CXadHamOperat: BOOL:=FALSE;
			(*additional device hammer operation *)
		CXadHangLeader: BOOL:=FALSE;
			(*add. device hanging leader*)
		CXadPassWinch: BOOL:=FALSE;
			(*additional: passenger  winch*)
		CXadMagneticUnit: BOOL:=FALSE;
			(*add device magnetic unit*)
		CXlmlNotRedundan: BOOL:=FALSE;
			(*additional: lml not redundant*)
		CXhgFastSpeed: BOOL:=FALSE;
			(*HG 1 and 2 normal fast speed operation*)
		CXadLEHydrGrab: BOOL:=FALSE;
			(*add. leffer hydraulic grab control*)
		CXadSBHydrGrab: BOOL:=FALSE;
			(*add. soletanche bachy hydraulic grab control*)
		CXadSMHydrGrab: BOOL:=FALSE;
			(*add. soilmec hydraulic grab control*)
		CXadBAHydrGrab: BOOL:=FALSE;
			(*add. bauer hydraulic grab control*)
		CXadRopLenCorrec: BOOL:=FALSE;
			(*rope length correction of the main boom movement*)
		CXadHydrGrabHose: BOOL:=FALSE;
			(*add. device hydraulic grab with hose winch*)
		CXadKellyHydGrab: BOOL:=FALSE;
			(*add. device hydraulic kelly grab operation*)
		CXdestruConsTens: BOOL:=FALSE;
			(*add. constant tension at destruction operation*)
		CXadDrillOperat: BOOL:=FALSE;
			(*additional device drilling drive operation *)
		CXanaStabWinch: BOOL:=FALSE;
			(*additional stabilzation winch (analog hoisting, analog const tension, freefall)*)
		CXsuperstAngSens: BOOL:=FALSE;
			(*superstructure angle indication*)
		CXadBAMilOperat: BOOL:=FALSE;
			(*add. device bauer milling operation*)
		CXconTensWinch: BOOL:=FALSE;
			(*constant tension winch (fixed const tension, lowering)*)
		CXlrMooringPrese: BOOL:=FALSE;
			(*mooring for leader operation preselect*)
		CXwalPresel: BOOL:=FALSE;
			(*ad work area limitation active*)
		CXaFrameErectCyl: BOOL:=FALSE;
			(*additional device a frame erection cylinder (only 8065) *)
		CXadDragliOpMode: BOOL:=FALSE;
			(*add. dragline operation mode*)
		CXadInclSwOffDev: BOOL:=FALSE;
			(*add. inclination switch off device*)
		CWp1MaxValue: UINT:=0;
			(*ludv pump 1 max. value [l/min]*)
		CWp1cur50liter: UINT:=0;
			(*ludv pump 1 current for 50l/min*)
		CWp1cur100liter: UINT:=0;
			(*ludv pump 1 current for 100l/min*)
		CWp1cur150liter: UINT:=0;
			(*ludv pump 1 current for 150l/min*)
		CWp1cur200liter: UINT:=0;
			(*ludv pump 1 current for 200l/min*)
		CWp1cur250liter: UINT:=0;
			(*ludv pump 1 current for 250l/min*)
		CWp1cur300liter: UINT:=0;
			(*ludv pump 1 current for 300l/min*)
		CWp2MaxValue: UINT:=0;
			(*ludv pump 1 max. value [l/min]*)
		CWp2cur50liter: UINT:=0;
			(*ludv pump 2 current for 50l/min*)
		CWp2cur100liter: UINT:=0;
			(*ludv pump 2 current for 100l/min*)
		CWp2cur150liter: UINT:=0;
			(*ludv pump 2 current for 150l/min*)
		CWp2cur200liter: UINT:=0;
			(*ludv pump 2 current for 200l/min*)
		CWp2cur250liter: UINT:=0;
			(*ludv pump 2 current for 250l/min*)
		CWp2cur300liter: UINT:=0;
			(*ludv pump 2 current for 300l/min*)
		CWp1MinCurValveA: UINT:=0;
			(*p1 ludv section min.current (A side)*)
		CWp1MaxCurValveA: UINT:=0;
			(*p1 ludv section max.current (A side)*)
		CWp1MinCurValveB: UINT:=0;
			(*p1 ludv section min.current (B side) main*)
		CWp1MaxCurValveB: UINT:=0;
			(*p1 ludv section max.current (B side) main*)
		CWp2MinCurValveA: UINT:=0;
			(*p1 ludv section min.current (A side)*)
		CWp2MaxCurValveA: UINT:=0;
			(*p1 ludv section max.current (A side)*)
		CWp2MinCurValveB: UINT:=0;
			(*p1 ludv section min.current (B side) main*)
		CWp2MaxCurValveB: UINT:=0;
			(*p1 ludv section max.current (B side) main*)
		CDengSpPumpRed: REAL:=0.0;
			(*engine speed for pump reduction [U/min]*)
		CDinclSwOffRange: REAL:=0.0;
			(*threshold of crane inclination switch off device [°]*)
		CDengMinIdleSpd: REAL:=0.0;
			(*engine minimum engine speed [rpm]*)
	END_VAR
	VAR 
		LXinitOk: BOOL:=FALSE;
		LXstart: BOOL:=FALSE;
		LXgrabStopLgDow: BOOL:=FALSE;
		LXgrabStopHg1Dow: BOOL:=FALSE;
		LXgrabStopHg2Dow: BOOL:=FALSE;
		LXlmlSingleScale: BOOL:=FALSE;
		LXaFrameCylUp: BOOL:=FALSE;
		LXaFrameCylDown: BOOL:=FALSE;
		LXstopCylOperat: BOOL:=FALSE;
		LXerrAngSenXShrt: BOOL:=FALSE;
		LXerrAngSenXBrk: BOOL:=FALSE;
		LXerrAngSenYShrt: BOOL:=FALSE;
		LXerrAngSenYBrk: BOOL:=FALSE;
		LXinclShutOff: BOOL:=FALSE;
		LDnewTime: UDINT:=0;
		LDoldTime: UDINT:=0;
		LDsuperAngAbsMax: REAL:=0.0;
		LDhystInclSwOff: REAL:=0.0;
		LDinclSwPreRange: REAL:=0.0;
		LD1: REAL:=0.0;
		LD2: REAL:=0.0;
		RS1: RS;
		RS2: RS;
		RS3: RS;
		SR_lock_lg: SR;
		SR1: SR;
		SR2: SR;
		SR3: SR;
		SR4: SR;
		F_TRIG1: F_TRIG;
		R_TRIG1: R_TRIG;
		R_TRIG2: R_TRIG;
		R_TRIG3: R_TRIG;
		R_TRIG4: R_TRIG;
		R_TRIG5: R_TRIG;
		TON1: TON;
		TON2: TON;
		TON3: TON;
		TON4: TON;
		TON5: TON;
		TON6: TON;
		TON7: TON;
		TON8: TON;
		TON9: TON;
		TON10: TON;
		TOF1: TOF;
		TOF2: TOF;
		WndComp1: WndComp;
		WndComp2: WndComp;
		WndComp3: WndComp;
		WndComp4: WndComp;
		WndComp5: WndComp;
		WndComp6: WndComp;
		CorrValue_Bool1: CorrValue_Bool;
		CorrValue_Bool2: CorrValue_Bool;
		CorrValue_Bool3: CorrValue_Bool;
		CorrValue_Bool4: CorrValue_Bool;
		CorrValue_Bool5: CorrValue_Bool;
		CorrValue_Bool6: CorrValue_Bool;
		CorrValue_Bool7: CorrValue_Bool;
		CorrValue_Bool8: CorrValue_Bool;
		CorrValue_Bool9: CorrValue_Bool;
		CorrValue_UInt1: CorrValue_UInt;
		CorrValue_UInt2: CorrValue_UInt;
		CorrValue_UInt3: CorrValue_UInt;
		CorrValue_UInt4: CorrValue_UInt;
		CorrValue_UInt5: CorrValue_UInt;
		CorrValue_UInt6: CorrValue_UInt;
		CorrValue_UInt7: CorrValue_UInt;
		CorrValue_UInt8: CorrValue_UInt;
		CorrValue_UInt9: CorrValue_UInt;
		CorrValue_UInt10: CorrValue_UInt;
		CorrValue_UInt11: CorrValue_UInt;
		CorrValue_UInt12: CorrValue_UInt;
		CorrValue_UInt13: CorrValue_UInt;
		CorrValue_UInt14: CorrValue_UInt;
		CorrValue_UInt15: CorrValue_UInt;
		CorrValue_UInt16: CorrValue_UInt;
		CorrValue_UInt17: CorrValue_UInt;
		CorrValue_UInt18: CorrValue_UInt;
		CorrValue_UInt19: CorrValue_UInt;
		CorrValue_UInt20: CorrValue_UInt;
		CorrValue_UInt21: CorrValue_UInt;
		CorrValue_UInt22: CorrValue_UInt;
		CorrValue_Real1: CorrValue_Real;
		CorrValue_Real2: CorrValue_Real;
		CorrValue_Real3: CorrValue_Real;
		Message1: MsgRealReal;
		Message2: MsgRealReal;
		Message3: MsgUDintUDint;
		Message4: MsgUDintUDint;
		Message5: MsgRealReal;
		Message6: MsgRealReal;
		Message7: MsgRealReal;
		Message8: MsgRealReal;
		Message9: MsgRealReal;
		Message10: MsgRealReal;
		Message11: MsgRealReal;
		Message12: MsgRealReal;
		Message13: MsgRealReal;
		Message14: MsgRealReal;
		Message15: MsgRealReal;
		Message16: MsgRealReal;
		Message17: MsgRealReal;
		Message18: MsgRealReal;
		PwrSrcState1: PowerSourceState;
		ScaleAI1: ScaleAI;
		ScaleAI4: ScaleAI;
		ScaleAI5: ScaleAI;
	END_VAR
'FBD'
BODY
    WORKSPACE
        NETWORK_LIST_TYPE := NWTYPEFBD ;
        ACTIVE_NETWORK := 0 ;
    END_WORKSPACE
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 51 ;
        NETWORK_BODY
B(B_COMMENT,,set functions by machine type,1,1,27,2,);
B(B_VARIN,,MXmachTypeLR1100,9,22,11,24,);
B(B_VARIN,,MXmachTypeLR1130,9,23,11,25,);
B(B_COMMENT,,MXrelFanByOilTem,34,2,45,3,);
B(B_COMMENT,,MXhgSet2ndPump,34,3,45,4,);
B(B_VARIN,,MXmachTypeLR1160,9,24,11,26,);
B(B_VARIN,,MXmachTypeLR1200,9,25,11,27,);
B(B_VARIN,,MXmachTypeHS8040,9,20,11,22,);
B(B_VARIN,,MXmachTypeHS8050,9,21,11,23,);
B(B_VAROUT,,MXaFrameCylPrese,25,6,27,8,);
B(B_VARIN,,MXmachTypeHS8200,9,6,11,8,);
B(B_VAROUT,,MXlowPoOilCoApar,19,3,21,5,);
B(B_VAROUT,,MXhgByLudvSectio,25,20,27,22,);
B(B_VAROUT,,MXsgByLudvSectio,25,21,27,23,);
B(B_VAROUT,,MXrcLudvMachine,25,22,27,24,);
B(B_F,@OR-7,,20,18,25,27,);
B(B_VAROUT,,MXLiftCrane,25,30,27,32,);
B(B_F,@OR-4,,20,36,25,42,);
B(B_VAROUT,,MXsmallSuperstr,25,37,27,39,);
B(B_VARIN,,MXmachTypeHS8070,9,40,11,42,);
B(B_VAROUT,,MX1LudvWorkSect,25,23,27,25,);
B(B_F,@OR-6,,20,42,25,50,);
B(B_VAROUT,,MXmachWiTrimot,25,43,27,45,);
B(B_F,@OR-3,,20,11,25,16,);
B(B_VAROUT,,MXuseLudvPump3,25,12,27,14,);
B(B_VAROUT,,MXuseLudvPump4,25,13,27,15,);
B(B_F,@OR-5,,20,29,25,36,);
B(B_VARIN,,MXmachTypeHS8100,18,45,20,47,);
B(B_VARIN,,MXmachTypeHS8120,18,46,20,48,);
B(B_VARIN,,MXmachTypeHS8160,18,47,20,49,);
B(B_VARIN,,MXmachTypeHS8200,18,48,20,50,);
B(B_VAROUT,,MXstabWinchOC,25,19,27,21,);
B(B_F,not,,26,24,31,27,);
B(B_VAROUT,,MXmachWiGearBox,31,25,33,27,);
B(B_F,@OR-4,,20,5,25,11,);
B(B_VARIN,,MXmachTypeLR1300,9,27,11,29,);
B(B_VAROUT,,MXderrickPossib,25,27,27,29,);
B(B_VARIN,,MXmachTypeHS8030,9,16,11,18,);
B(B_VAROUT,,MXluffingCylinde,25,16,27,18,);
L(11,26,20,26);
L(11,25,20,25);
L(11,24,20,24);
L(19,4,19,7);
L(13,9,13,26);
L(11,21,20,21);
L(11,22,20,22);
L(11,23,20,23);
L(25,20,25,26);
L(13,26,13,34);
L(13,34,20,34);
L(14,33,20,33);
L(14,25,14,33);
L(15,32,20,32);
L(15,24,15,32);
L(16,23,16,31);
L(19,38,20,38);
L(18,39,20,39);
L(18,21,18,39);
L(17,40,20,40);
L(17,22,17,40);
L(11,41,20,41);
L(18,41,18,44);
L(18,44,20,44);
L(25,13,25,14);
L(19,15,20,15);
L(18,14,20,14);
L(18,14,18,21);
L(17,13,20,13);
L(17,13,17,22);
L(16,31,20,31);
L(12,45,20,45);
L(25,26,26,26);
L(14,10,20,10);
L(13,9,20,9);
L(12,8,12,28);
L(12,8,20,8);
L(14,10,14,25);
L(11,7,20,7);
L(12,28,12,45);
L(12,35,20,35);
L(11,28,25,28);
L(11,17,25,17);
L(19,15,19,17);
L(19,20,20,20);
L(19,17,19,38);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_COMMENT,,set 600bar pressure transmitters ,1,1,27,2,);
B(B_VAROUT,,MX600barPreTrans,11,3,13,5,);
B(B_VARIN,,TRUE,9,3,11,5,);
B(B_VAROUT,,MX600barPreTraSG,11,4,13,6,);
L(11,4,11,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 14 ;
        NETWORK_BODY
B(B_COMMENT,,activate module 57 for rope lenght measuring,1,1,27,2,);
B(B_VAROUT,,MXmod57SetActive,18,4,20,6,);
B(B_VARIN,,CXwalPresel,10,6,12,8,);
B(B_COMMENT,,Modul wird per Korrekturwert aktiviert . ,33,1,64,2,);
B(B_VARIN,,CXadDynGrouComp,9,7,11,9,);
B(B_F,@OR-4,,13,3,18,9,);
B(B_VARIN,,CXhg1RopeLenMeas,11,4,13,6,);
B(B_VARIN,,CXhg2RopeLenMeas,11,5,13,7,);
B(B_F,@OR-2,,13,9,18,13,);
B(B_VAROUT,,MXmod57SetCritic,18,10,20,12,);
B(B_VARIN,,MXenabDgcOperat,11,11,13,13,);
L(12,7,13,7);
L(11,8,13,8);
L(12,7,12,11);
L(12,11,13,11);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 40 ;
        NETWORK_BODY
B(B_COMMENT,,activate additional module 18 ,1,1,27,2,);
B(B_VARIN,,CXadDynGrouComp,24,4,26,6,);
B(B_VARIN,,CXadHydrGrab,24,5,26,7,);
B(B_VARIN,,CXadHamOperat,24,8,26,10,);
B(B_VARIN,,CXadVibOperat,24,7,26,9,);
B(B_VARIN,,CXadLEHydrGrab,24,6,26,8,);
B(B_VARIN,,CXadSMHydrGrab,24,9,26,11,);
B(B_VARIN,,CXadSBHydrGrab,24,10,26,12,);
B(B_VARIN,,CXadHydrGrabHose,24,11,26,13,);
B(B_VARIN,,CXadKellyHydGrab,24,12,26,14,);
B(B_VARIN,,CXadDrillOperat,24,13,26,15,);
B(B_VARIN,,CXadBAMilOperat,24,14,26,16,);
B(B_VARIN,,CXadBAHydrGrab,24,15,26,17,);
B(B_VARIN,,CXlrMooringPrese,23,16,25,18,);
B(B_VAROUT,,MXmod18SetActive,31,4,33,6,);
B(B_VAROUT,,MXmod18SetCritic,31,21,33,23,);
B(B_COMMENT,,Modul wird per Korrekturwert aktiviert . ,43,1,74,2,);
B(B_COMMENT,,Modul wird systemkritisch gesetzt~ wenn Betriebsart vorgewählt ist. ,43,2,74,3,);
B(B_VAROUT,,MXmod14SetActive,31,5,33,7,);
B(B_VAROUT,,MXmod14SetCritic,31,22,33,24,);
B(B_VARIN,,MXenabDgcOperat,24,26,26,28,);
B(B_VARIN,,MXenabHyGrabOper,24,27,26,29,);
B(B_VARIN,,MXadLEHydrGrab,24,28,26,30,);
B(B_VARIN,,MXenablVibOperat,24,29,26,31,);
B(B_VARIN,,MXenablHamOperat,24,30,26,32,);
B(B_VARIN,,MXadSMHydrGrab,24,31,26,33,);
B(B_VARIN,,MXadSBHydrGrab,24,32,26,34,);
B(B_VARIN,,MXenabHyGrabHose,24,33,26,35,);
B(B_VARIN,,MXenabKelGrabOpe,24,34,26,36,);
B(B_VARIN,,MXenablDrillOper,24,35,26,37,);
B(B_VARIN,,MXadBAMilOperat,24,36,26,38,);
B(B_VARIN,,MXadBAHydrGrab,24,37,26,39,);
B(B_VARIN,,MXmachTypeHS8030,22,17,24,19,);
B(B_VARIN,,MXmachWiTrimot,21,18,23,20,);
B(B_F,@OR-16,,26,3,31,21,);
B(B_F,@OR-16,,26,21,31,39,);
B(B_VARIN,,MXstabWinchOC,15,24,17,26,);
B(B_F,@AND-2,,17,22,22,26,0N);
B(B_VARIN,,CXanaStabWinch,10,23,12,25,);
B(B_F,@OR-2,,12,21,17,25,);
B(B_VARIN,,CXconTensWinch,10,22,12,24,);
L(25,17,25,23);
L(24,18,24,24);
L(23,19,23,25);
L(23,19,26,19);
L(24,18,26,18);
L(25,17,26,17);
L(31,22,31,23);
L(31,5,31,6);
L(22,20,26,20);
L(22,20,22,26);
L(22,26,26,26);
L(23,25,26,25);
L(24,24,26,24);
L(25,23,26,23);
L(17,23,17,24);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 38 ;
        NETWORK_BODY
B(B_VARIN,,CXadHydrGrab,12,5,14,7,);
B(B_VARIN,,CXadHangLeader,12,4,14,6,);
B(B_VARIN,,CXadVibOperat,12,7,14,9,);
B(B_VARIN,,CXadLEHydrGrab,12,6,14,8,);
B(B_VARIN,,CXadSMHydrGrab,12,8,14,10,);
B(B_VARIN,,CXadSBHydrGrab,12,9,14,11,);
B(B_VARIN,,CXadHydrGrabHose,12,10,14,12,);
B(B_VARIN,,CXadKellyHydGrab,12,11,14,13,);
B(B_VARIN,,CXadDrillOperat,12,12,14,14,);
B(B_VARIN,,CXadBAHydrGrab,12,13,14,15,);
B(B_VARIN,,CXadBAMilOperat,12,14,14,16,);
B(B_VARIN,,CXadHamOperat,12,15,14,17,);
B(B_VARIN,,CXadMagneticUnit,11,16,13,18,);
B(B_VARIN,,CXadPassWinch,10,17,12,19,);
B(B_VARIN,,CXdestruConsTens,9,18,11,20,);
B(B_COMMENT,,activate additional module 10,1,1,27,2,);
B(B_VAROUT,,MXmod10SetActive,19,4,21,6,);
B(B_VAROUT,,MXmod10SetCritic,19,21,21,23,);
B(B_COMMENT,,Modul wird per Korrekturwert aktiviert . ,30,1,61,2,);
B(B_COMMENT,,Modul wird systemkritisch gesetzt~ wenn Betriebsart vorgewählt ist. ,30,2,61,3,);
B(B_F,@OR-15,,14,3,19,20,);
B(B_VARIN,,MXadBAMilOperat,12,34,14,36,);
B(B_VARIN,,MXenablHamOperat,12,35,14,37,);
B(B_VARIN,,MXleaderOper,12,24,14,26,);
B(B_VARIN,,MXenabHyGrabOper,12,25,14,27,);
B(B_VARIN,,MXenablVibOperat,12,27,14,29,);
B(B_VARIN,,MXadLEHydrGrab,12,26,14,28,);
B(B_VARIN,,MXadSMHydrGrab,12,28,14,30,);
B(B_VARIN,,MXadSBHydrGrab,12,29,14,31,);
B(B_VARIN,,MXenabHyGrabHose,12,30,14,32,);
B(B_VARIN,,MXenabKelGrabOpe,12,31,14,33,);
B(B_VARIN,,MXenablDrillOper,12,32,14,34,);
B(B_VARIN,,MXadBAHydrGrab,12,33,14,35,);
B(B_F,@OR-15,,14,20,19,37,);
L(13,17,13,22);
L(13,17,14,17);
L(12,18,14,18);
L(12,18,12,23);
L(12,23,14,23);
L(11,19,14,19);
L(11,19,11,24);
L(11,24,14,24);
L(13,22,14,22);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_COMMENT,,activate additional module 34,1,1,27,2,);
B(B_F,@OR-3,,11,3,16,8,);
B(B_VARIN,,MXenablDrillOper,9,4,11,6,);
B(B_VARIN,,MXadBAHydrGrab,9,5,11,7,);
B(B_VARIN,,MXadBAMilOperat,9,6,11,8,);
B(B_VAROUT,,MXmod34SetCritic,16,4,18,6,);
B(B_VAROUT,,MXmod34SetActive,16,5,18,7,);
L(16,5,16,6);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 25 ;
        NETWORK_BODY
B(B_COMMENT,,activate additional module 19,1,1,27,2,);
B(B_VARIN,,CXadHangLeader,20,4,22,6,);
B(B_VARIN,,CXadHydrGrab,20,5,22,7,);
B(B_VARIN,,CXadHydrGrabHose,20,6,22,8,);
B(B_VARIN,,CXadKellyHydGrab,20,7,22,9,);
B(B_VARIN,,CXadLEHydrGrab,20,8,22,10,);
B(B_VARIN,,CXadSBHydrGrab,20,9,22,11,);
B(B_VARIN,,CXadSMHydrGrab,20,10,22,12,);
B(B_VAROUT,,MXmod19SetActive,27,4,29,6,);
B(B_VARIN,,MXstabWinchOC,14,14,16,16,);
B(B_F,@AND-2,,16,12,21,16,);
B(B_VARIN,,CXanaStabWinch,9,13,11,15,);
B(B_F,@OR-2,,11,11,16,15,);
B(B_VARIN,,CXconTensWinch,9,12,11,14,);
B(B_F,@OR-8,,22,3,27,13,);
B(B_VAROUT,,MXmod19SetCritic,27,15,29,17,);
B(B_VARIN,,MXleaderOper,20,16,22,18,);
B(B_VARIN,,MXenabHyGrabOper,20,17,22,19,);
B(B_VARIN,,MXenabHyGrabHose,20,18,22,20,);
B(B_VARIN,,MXenabKelGrabOpe,20,19,22,21,);
B(B_VARIN,,MXadLEHydrGrab,20,20,22,22,);
B(B_VARIN,,MXadSBHydrGrab,20,21,22,23,);
B(B_VARIN,,MXadSMHydrGrab,20,22,22,24,);
B(B_F,@OR-8,,22,14,27,24,);
L(16,13,16,14);
L(21,12,21,16);
L(21,12,22,12);
L(21,16,22,16);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_COMMENT,,activate additional module 43,1,1,27,2,);
B(B_VARIN,,CXsuperstAngSens,9,4,11,6,);
B(B_VARIN,,CXadHydrGrab,9,6,11,8,);
B(B_VARIN,,CXadVibOperat,9,5,11,7,);
B(B_VAROUT,,MXmod43SetActive,16,4,18,6,);
B(B_COMMENT,,Modul wird per Korrekturwert aktiviert . ,30,1,61,2,);
B(B_VARIN,,CXadInclSwOffDev,9,7,11,9,);
B(B_F,@OR-4,,11,3,16,9,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_COMMENT,,activate additional module 43,1,1,27,2,);
B(B_VARIN,,MXenablVibOperat,9,4,11,6,);
B(B_VARIN,,MXenablHamOperat,9,5,11,7,);
B(B_VAROUT,,MXmod43SetCritic,16,4,18,6,);
B(B_COMMENT,,Modul wird systemkritisch gesetzt~ wenn Betriebsart vorgewählt ist. ,30,1,61,2,);
B(B_VARIN,,CXadInclSwOffDev,9,6,11,8,);
B(B_F,@OR-3,,11,3,16,8,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,activate keyboard X25,1,1,27,2,);
B(B_VARIN,,MXleaderOper,9,3,11,5,);
B(B_VAROUT,,MXkeybX25SetAct,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,activate keyboard X22,1,1,27,2,);
B(B_VARIN,,CXadHydrGrabHose,9,4,11,6,);
B(B_VARIN,,CXadLEHydrGrab,9,5,11,7,);
B(B_VARIN,,CXadSBHydrGrab,9,6,11,8,);
B(B_VARIN,,CXadSMHydrGrab,9,7,11,9,);
B(B_VAROUT,,MXkeybX22SetAct,16,4,18,6,);
B(B_VARIN,,CXadKellyHydGrab,9,8,11,10,);
B(B_F,@OR-5,,11,3,16,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,activate keyboard X22,1,1,27,2,);
B(B_VAROUT,,MXkeybX22SetCrit,16,4,18,6,);
B(B_COMMENT,,Modul wird systemkritisch gesetzt~ wenn Betriebsart vorgewählt ist. ,29,1,60,2,);
B(B_VARIN,,MXenabHyGrabHose,9,4,11,6,);
B(B_VARIN,,MXenabKelGrabOpe,9,5,11,7,);
B(B_VARIN,,MXadLEHydrGrab,9,6,11,8,);
B(B_VARIN,,MXadSBHydrGrab,9,7,11,9,);
B(B_VARIN,,MXadSMHydrGrab,9,8,11,10,);
B(B_F,@OR-5,,11,3,16,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,activate module 49 for rope lenght measuring,1,1,27,2,);
B(B_VARIN,,CXadDynGrouComp,9,3,11,5,);
B(B_VAROUT,,MXmod49SetActive,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,activate module 58 ,1,1,27,2,);
B(B_VARIN,,CXadDrillOperat,9,3,11,5,);
B(B_VAROUT,,MXmod58SetActive,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_VARIN,,LXinitOk,9,4,11,6,);
B(B_COMMENT,,init first time,1,1,27,2,);
B(B_F,not,,11,3,16,6,);
B(B_JUMP,,init,16,4,18,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 14 ;
        NETWORK_BODY
B(B_VAROUT,,MXhgFastSpeed,18,4,20,6,);
B(B_F,sel,,13,3,18,8,);
B(B_F,sel,,13,8,18,13,);
B(B_VARIN,,CXlmlNotRedundan,11,10,13,12,);
B(B_VARIN,,LXlmlSingleScale,11,11,13,13,);
B(B_VARIN,,CXhgFastSpeed,9,5,11,7,);
B(B_VARIN,,MXhgFastSpeed,9,6,11,8,);
B(B_COMMENT,,preselect fast speed (gear box) ,19,6,45,7,);
B(B_COMMENT,,protect correction value change while program activ,1,1,27,2,);
B(B_VARIN,,LXstart,10,4,12,6,);
B(B_VAROUT,,LXlmlSingleScale,18,9,20,11,);
L(12,5,12,10);
L(12,10,13,10);
L(11,6,13,6);
L(11,7,13,7);
L(12,5,13,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,TRUE,9,1,11,3,);
B(B_VAROUT,,LXstart,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 16 ;
        NETWORK_BODY
B(B_COMMENT,,set not redundant lml when hs mode enabled,1,1,27,2,);
B(B_VARIN,,LXlmlSingleScale,14,8,16,10,);
B(B_F,@AND-3,,16,7,21,12,0NN);
B(B_VARIN,,MDlmlMode,9,12,11,14,);
B(B_F,@GT-2,,11,11,16,15,);
B(B_VARIN,,1.0,9,13,11,15,);
B(B_VARIN,,MXmachTypeHS8200,14,9,16,11,);
B(B_F,@OR-3,,21,3,26,8,N);
B(B_VAROUT,,MXlmlSingleScale,26,4,28,6,);
B(B_VARIN,,MXlmlStarted,19,4,21,6,);
B(B_VARIN,,MXlmlHSMode,19,5,21,7,);
L(21,7,21,9);
L(16,11,16,13);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_COMMENT,,set lml deactive,1,1,27,2,);
B(B_VARIN,,MXenabHangLeader,9,5,11,7,);
B(B_VARIN,,MXenabDragliOper,9,4,11,6,);
B(B_F,@OR-2,,11,3,16,7,);
B(B_VAROUT,,MXlmlDeactive,16,4,18,6,);
B(B_COMMENT,,ACHTUNG: Die LMB darf nur von den Betriebsarten Mäkler und Schleppschaufel deaktiviert werden.ø^Diese BA's können nur bei MXlmlDutyCycle gesetzt werden. (EN474-12)ø^Bei Geräten nach EN13000 (alle LR) darf die LMB nicht deaktiviert werden könn,0,0,0,0,0,0,0,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_COMMENT,,wind speed sensor present,1,1,27,2,);
B(B_VAROUT,,MXwindSpeedAct,16,4,18,6,);
B(B_VARIN,,MXlmlFix_LuffJib,9,5,11,7,);
B(B_VARIN,,CXwindSpeedSenso,9,6,11,8,);
B(B_VARIN,,MXlmlTypeDutyCyc,9,4,11,6,);
B(B_F,@OR-3,,11,3,16,8,N);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 17 ;
        NETWORK_BODY
B(B_COMMENT,,set stop all function and message for lml configuration error ,1,1,27,2,);
B(B_VARIN,,MXlmlFix_LuffJib,14,8,16,10,);
B(B_F,@AND-2,,16,7,21,11,);
B(B_F,@OR-2,,11,9,16,13,N);
B(B_VARIN,,MXenabMainOperat,9,10,11,12,);
B(B_VARIN,,MXleaderOper,9,11,11,13,);
B(B_VARIN,,MXhgSpecialLift,14,4,16,6,);
B(B_VARIN,,MXlmlHSMode,14,5,16,7,);
B(B_F,@AND-2,,16,3,21,7,);
B(B_F,@OR-2,,21,6,26,10,);
B(B_VAROUT,,MXstopFunLmlConf,26,7,28,9,);
B(B_FB,MsgRealReal,Message1,29,9,38,16,);
B(B_VARIN,,262,27,10,29,12,);
B(B_VARIN,,MSG_ERROR,27,12,29,14,);
B(B_COMMENT,,Mode 3 nur im main mode möglich + nicht im Mäklerbetriebø^Grund u.a.: Anzeigen am Monitor nicht sichtbar~ø^Mode 3 ist reiner Kranbetrieb~ ,40,7,63,10,);
B(B_COMMENT,,Bei sensibler Hub muss Seilsicherheit ein sein.,40,3,63,5,);
L(16,10,16,11);
L(26,8,26,12);
L(26,12,29,12);
L(21,5,21,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_VARIN,,MXpdeConnection,9,3,11,5,);
B(B_F,not,,11,2,16,5,);
B(B_VAROUT,,MXpdeConnection,16,3,18,5,);
B(B_COMMENT,,check connection to PDE-Master,1,1,27,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_COMMENT,,flash signal (Blinkgeber),1,1,27,2,);
B(B_VARIN,,MXflashSignal,9,5,11,7,);
B(B_FB,TON,TON1,11,4,16,8,);
B(B_VARIN,,T#0.3s,9,6,11,8,);
B(B_F,not,,18,4,23,7,);
B(B_FB,TON,TON2,25,4,30,8,);
B(B_VARIN,,T#0.3s,22,7,24,9,);
B(B_VAROUT,,MXflashSignal,30,5,32,7,);
L(24,7,25,7);
L(24,7,24,8);
L(16,6,18,6);
L(23,6,25,6);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_COMMENT,,slow flash signal (Blinkgeber),1,1,27,2,);
B(B_VARIN,,MXslowFlashSig,9,5,11,7,);
B(B_FB,TON,TON9,11,4,16,8,);
B(B_VARIN,,T#0.6s,9,6,11,8,);
B(B_F,not,,18,4,23,7,);
B(B_FB,TON,TON10,25,4,30,8,);
B(B_VARIN,,T#0.6s,22,7,24,9,);
B(B_VAROUT,,MXslowFlashSig,30,5,32,7,);
L(24,7,25,7);
L(24,7,24,8);
L(16,6,18,6);
L(23,6,25,6);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_F,READ_PROZ_ms,,11,3,22,6,);
B(B_F,time_to_udint,,24,3,35,6,);
B(B_VAROUT,,LDnewTime,35,4,37,6,);
B(B_COMMENT,,time to the last scan,1,1,27,2,);
L(22,5,24,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_VARIN,,LDnewTime,9,4,11,6,);
B(B_F,@SUB,,11,3,16,7,);
B(B_VARIN,,LDoldTime,9,5,11,7,);
B(B_F,udint_to_real,,18,3,29,6,);
B(B_F,@DIV,,31,3,36,7,);
B(B_VARIN,,1000.0,29,6,31,8,);
B(B_F,limit,,38,2,44,7,);
B(B_VAROUT,,MDdeltaTime,44,3,46,5,);
B(B_VARIN,,0.001,35,1,37,3,);
B(B_VARIN,,0.5,35,7,37,9,);
L(31,6,31,7);
L(36,5,38,5);
L(37,2,37,4);
L(37,4,38,4);
L(37,6,37,8);
L(37,6,38,6);
L(29,5,31,5);
L(16,5,18,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,LDnewTime,9,1,11,3,);
B(B_VAROUT,,LDoldTime,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 26 ;
        NETWORK_BODY
B(B_COMMENT,,preselection stop engine,1,1,27,2,);
B(B_FB,TON,TON3,11,9,16,13,);
B(B_F,@AND-3,,18,3,23,8,00N);
B(B_VARIN,,MXflashSignal,16,4,18,6,);
B(B_VARIN,,T#2.0s,9,11,11,13,);
B(B_F,@AND-2,,18,8,23,12,);
B(B_VARIN,,MXstopModulError,23,12,25,14,);
B(B_VARIN,,MXhydrOilContErr,23,13,25,15,);
B(B_VARIN,,MXrcStopEngine,23,14,25,16,);
B(B_VARIN,,MXminEngineSpeed,23,22,25,24,);
B(B_VARIN,,T#1.0s,23,23,25,25,);
B(B_VAROUT,,MXengStopReq,36,11,38,13,);
B(B_VARIN,,ITXengReqStop,9,5,11,7,);
B(B_F,@OR-2,,24,3,29,7,);
B(B_VAROUT,,QTXengReqStop,29,4,31,6,);
B(B_FB,SR,SR1,31,10,36,14,);
B(B_VARIN,,MXacReleasMachin,23,15,25,17,);
B(B_F,@OR-6,,25,10,30,18,0000NN);
B(B_VARIN,,MXlmlStarted,18,18,20,20,);
B(B_VARIN,,MXlmlDeactive,18,20,20,22,);
B(B_FB,TON,TON4,25,21,30,25,N);
B(B_F,@OR-3,,20,17,25,22,);
B(B_VARIN,,MXlmlProgError,18,19,20,21,);
L(16,11,18,11);
L(16,7,16,11);
L(11,6,18,6);
L(16,7,18,7);
L(17,6,17,10);
L(17,10,18,10);
L(23,10,24,10);
L(31,13,31,23);
L(11,6,11,11);
L(23,5,24,5);
L(24,6,24,12);
L(24,12,25,12);
L(30,12,31,12);
L(25,17,25,19);
L(30,23,31,23);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 36 ;
        NETWORK_BODY
B(B_COMMENT,,ludv consumer active ,1,1,27,2,);
B(B_F,@AND-2,,15,3,20,7,);
B(B_VARIN,,MXhgByLudvSectio,13,5,15,7,);
B(B_VARIN,,MXhg1EnPowStage,13,4,15,6,);
B(B_VARIN,,MXhg2EnPowStage,13,9,15,11,);
B(B_F,@AND-2,,15,7,20,11,);
B(B_VARIN,,MXsgEnPowStage,13,13,15,15,);
B(B_VARIN,,MXsgByLudvSectio,13,12,15,14,);
B(B_F,@AND-2,,15,11,20,15,);
B(B_VARIN,,MXswitTravelGear,20,15,22,17,);
B(B_VARIN,,IXludvPumpExtRel,20,16,22,18,);
B(B_VARIN,,MXlgEnPowStage,20,17,22,19,);
B(B_VARIN,,MXlg2EnPowStage,20,18,22,20,);
B(B_VARIN,,MXaxwEnPowStage,20,19,22,21,);
B(B_VARIN,,MXhocEnPowStage,20,20,22,22,);
B(B_VARIN,,MXlgEnPowStage,20,21,22,23,);
B(B_VARIN,,MXadwEnPowStage,20,22,22,24,);
B(B_VARIN,,MXcylOperatWork,20,23,22,25,);
B(B_VARIN,,MXretarderSecAct,20,24,22,26,);
B(B_COMMENT,,http://jira.zdv.liebherr.i:8080/browse/LWNTBEHSHSSW10511521-43,31,1,68,2,);
B(B_VARIN,,MXenabAddOilSupp,20,25,22,27,);
B(B_VARIN,,MXludvSecP1activ,20,26,22,28,);
B(B_VARIN,,MXludvSecP2activ,20,27,22,29,);
B(B_F,@OR-17,,22,11,27,30,);
B(B_VAROUT,,MXludvSectActiv,27,12,29,14,);
B(B_VARIN,,MXuseLudvPump3,9,30,11,32,);
B(B_F,@OR-2,,11,29,16,33,);
B(B_VARIN,,MXuseLudvPump4,9,31,11,33,);
B(B_F,@AND-2,,17,29,22,33,);
B(B_VARIN,,MXextLudvSecAct,15,33,17,35,);
L(15,6,15,9);
L(17,32,17,34);
L(16,31,17,31);
L(22,29,22,31);
L(20,5,22,5);
L(22,5,22,13);
L(20,9,21,9);
L(21,9,21,14);
L(21,14,22,14);
L(20,13,20,15);
L(20,15,22,15);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 42 ;
        NETWORK_BODY
B(B_F,@AND-2,,12,15,17,19,);
B(B_F,@AND-2,,12,11,17,15,);
B(B_VARIN,,QXhg2Clutch,10,17,12,19,);
B(B_VARIN,,QXhg1Clutch,10,12,12,14,);
B(B_VARIN,,MXpreHigEngSpeed,9,13,11,15,);
B(B_COMMENT,,preselection high engine speed,1,1,27,2,);
B(B_VARIN,,MXhg1EnPowStage,26,13,28,15,);
B(B_VARIN,,MXlgEnPowStage,26,17,28,19,);
B(B_VARIN,,MXhg2EnPowStage,26,15,28,17,);
B(B_VARIN,,MXlg2EnPowStage,26,18,28,20,);
B(B_VARIN,,MXvibratWorking,26,9,28,11,);
B(B_VARIN,,MXexDrWorking,26,10,28,12,);
B(B_VARIN,,MXclampWorking,26,11,28,13,);
B(B_VARIN,,MXhammerWorking,26,12,28,14,);
B(B_VARIN,,MXmoorEnPowStage,26,7,28,9,);
B(B_VARIN,,MXrelLeaderPump,26,8,28,10,);
B(B_F,@OR-3,,34,2,39,7,);
B(B_VARIN,,MXjoyEngSpeedUp,32,4,34,6,);
B(B_VARIN,,MXjoyEngSpeedDn,32,3,34,5,);
B(B_VAROUT,,MXpreHigEngSpeed,39,3,41,5,);
B(B_VAROUT,,MXanyFunctActive,34,7,36,9,);
B(B_VARIN,,MXaxwEnPowStage,26,19,28,21,);
B(B_F,@OR-25,,28,6,33,33,);
B(B_VARIN,,MXswitTravelGear,10,24,12,26,);
B(B_F,@AND-2,,12,23,17,27,0N);
B(B_VARIN,,MXstopLudvPumps,10,25,12,27,);
B(B_F,@AND-2,,12,28,17,32,0N);
B(B_VARIN,,MXsgEnPowStage,10,29,12,31,);
B(B_VARIN,,MXmomRegEnabled,9,30,11,32,);
B(B_F,@AND-2,,21,31,26,35,0N);
B(B_FB,WndComp,WndComp1,12,35,19,41,);
B(B_VARIN,,MDsgPumpSignal,10,36,12,38,);
B(B_VARIN,,-5.0,10,37,12,39,);
B(B_VARIN,,5.0,10,38,12,40,);
B(B_VARIN,,0.0,10,39,12,41,);
B(B_VARIN,,MXad1Working,26,25,28,27,);
B(B_VARIN,,MXad3Working,26,27,28,29,);
B(B_VARIN,,MXad2Working,26,26,28,28,);
B(B_VARIN,,MXcylOperatWork,26,23,28,25,);
B(B_VARIN,,MXhydrGrabActive,26,22,28,24,);
B(B_VARIN,,MXddEnabPowStage,26,28,28,30,);
B(B_VARIN,,MXecPreHigEngSp,26,40,28,42,);
B(B_VARIN,,MXhocEnPowStage,26,21,28,23,);
B(B_VARIN,,MXadwEnPowStage,26,20,28,22,);
L(17,13,18,13);
L(18,13,18,15);
L(11,14,12,14);
L(11,14,11,17);
L(11,17,12,17);
L(18,15,28,15);
L(17,17,28,17);
L(34,6,34,8);
L(33,8,34,8);
L(11,31,12,31);
L(20,34,21,34);
L(20,34,20,37);
L(19,37,20,37);
L(11,31,11,33);
L(11,33,21,33);
L(27,31,27,33);
L(26,33,27,33);
L(17,25,28,25);
L(17,30,28,30);
L(27,31,28,31);
L(28,32,28,41);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_COMMENT,,preselect high idle speed,1,1,27,2,);
B(B_F,@OR-2,,11,3,16,7,);
B(B_VARIN,,MXanyFunctActive,9,4,11,6,);
B(B_VARIN,,MXludvSectActiv,9,5,11,7,);
B(B_VAROUT,,MXengMinIdleSpd,16,4,18,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_COMMENT,,preselect low engine speed,1,1,27,2,);
B(B_F,@OR-2,,17,6,22,10,0N);
B(B_FB,TON,TON5,11,6,16,10,);
B(B_VARIN,,T#5.0s,9,8,11,10,);
B(B_VARIN,,MXengStopReq,9,4,11,6,);
B(B_F,@AND-2,,23,3,28,7,);
B(B_VARIN,,MXanyFunctActive,15,10,17,12,);
B(B_VAROUT,,MXpreLowEngSpeed,28,4,30,6,);
B(B_COMMENT,,kontrolliertes Herunterfahren des Dieselmotors:ø^Mit der Error Meldung wird ein Stop ausgelöst~ø^dann die Drehzahl heruntergefahren~ø^dann der Motor gestoppt,27,7,46,11,);
B(B_COMMENT,,safety time,4,7,10,8,);
B(B_COMMENT,,Zurerst sollten Werke zurückgefahren und dann erst ø^die Drehzahl gesenkt werden.,32,1,52,3,);
L(23,6,23,8);
L(11,5,23,5);
L(11,5,11,8);
L(16,8,17,8);
L(17,9,17,11);
L(22,8,23,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_COMMENT,,shut off engine ,1,1,27,2,);
B(B_FB,TON,TON6,11,5,16,9,);
B(B_VARIN,,T#2.0s,9,7,11,9,);
B(B_F,@AND-2,,16,4,21,8,);
B(B_VAROUT,,MXglobStopEngine,21,5,23,7,);
B(B_VARIN,,MXforcedNeutral,9,6,11,8,);
B(B_VARIN,,MXengStopReq,14,3,16,5,);
L(16,4,16,6);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 32 ;
        NETWORK_BODY
B(B_COMMENT,,global stop all functions,1,1,27,2,);
B(B_VARIN,,MXnewModeSelect,12,21,14,23,);
B(B_VARIN,,MXengineStopped,12,19,14,21,);
B(B_VARIN,,MXminEngineSpeed,12,20,14,22,);
B(B_F,@AND-2,,14,14,19,18,NN);
B(B_VAROUT,,MXstopAllFunctio,27,15,29,17,);
B(B_F,@AND-3,,14,8,19,13,NNN);
B(B_F,@OR-2,,22,14,27,18,);
B(B_F,@AND-3,,14,3,19,8,0NN);
B(B_F,@OR-2,,22,3,27,7,);
B(B_VARIN,,IXentrySwiClosed,10,6,12,8,);
B(B_VARIN,,MXremContActive,11,5,13,7,);
B(B_VARIN,,MXswitTravelGear,12,4,14,6,);
B(B_VAROUT,,MXstopLudvPumps,27,9,29,11,);
B(B_VARIN,,MXcylOperatWork,9,9,11,11,);
B(B_VAROUT,,LXstopCylOperat,27,4,29,6,);
B(B_VARIN,,MXrcStopAllFunct,12,22,14,24,);
B(B_VARIN,,MXecConnectErr,12,23,14,25,);
B(B_VARIN,,MXecWatchdogErr,12,24,14,26,);
B(B_VARIN,,MXecComTimeout,12,25,14,27,);
B(B_VARIN,,MXstopFunLmlConf,12,26,14,28,);
B(B_VARIN,,MXsafetyProgSAF,12,27,14,29,);
B(B_VARIN,,MXengAgnStopFunc,12,28,14,30,);
B(B_VARIN,,MXengStopReq,12,29,14,31,);
B(B_F,@OR-11,,14,18,19,31,0N);
B(B_VARIN,,MXsetZeroTravelG,9,12,11,14,);
B(B_F,@OR-4,,22,8,27,14,);
L(12,7,12,17);
L(12,7,14,7);
L(13,6,14,6);
L(13,16,14,16);
L(12,17,14,17);
L(13,6,13,16);
L(13,11,14,11);
L(12,12,14,12);
L(19,5,22,5);
L(21,6,21,20);
L(21,6,22,6);
L(19,16,22,16);
L(20,5,20,11);
L(20,11,22,11);
L(21,12,22,12);
L(11,10,14,10);
L(21,17,22,17);
L(19,20,21,20);
L(19,10,22,10);
L(11,13,22,13);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_VARIN,,IXentrySwiClosed,9,4,11,6,);
B(B_VARIN,,MSG_INFO,9,5,11,7,);
B(B_VARIN,,597,9,3,11,5,);
B(B_VARIN,,MDlmlUtilization,9,6,11,8,);
B(B_VARIN,,MDlmlUtilBackwar,9,7,11,9,);
B(B_FB,MsgRealReal,Message2,11,2,20,9,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_COMMENT,,select freefall,1,1,27,2,);
B(B_VARIN,,MXhg1pselFreefal,9,4,11,6,);
B(B_VARIN,,MXhg2pselFreefal,9,5,11,7,);
B(B_F,@OR-2,,11,3,16,7,);
B(B_F,@AND-3,,18,6,23,11,N);
B(B_F,@OR-2,,25,3,30,7,);
B(B_VAROUT,,QTXfreefallOper,30,4,32,6,);
B(B_VARIN,,ITXfreefallOper,16,9,18,11,);
B(B_VARIN,,MXflashSignal,16,8,18,10,);
L(16,5,25,5);
L(24,6,25,6);
L(24,6,24,8);
L(23,8,24,8);
L(17,5,17,8);
L(17,8,18,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 19 ;
        NETWORK_BODY
B(B_COMMENT,,message freefall,1,1,27,2,);
B(B_F,sel,,19,7,24,12,);
B(B_VARIN,,IXunsecuredFreef,17,8,19,10,);
B(B_VARIN,,0,17,9,19,11,);
B(B_FB,MsgUDintUDint,Message3,33,3,43,10,);
B(B_VARIN,,MXhg1pselFreefal,31,5,33,7,);
B(B_VARIN,,598,31,4,33,6,);
B(B_VARIN,,MSG_INFO,31,6,33,8,);
B(B_VARIN,,1,31,7,33,9,);
B(B_FB,MsgUDintUDint,Message4,33,11,43,18,);
B(B_VARIN,,598,31,12,33,14,);
B(B_VARIN,,MSG_INFO,31,14,33,16,);
B(B_VARIN,,2,31,15,33,17,);
B(B_VARIN,,MXhg2pselFreefal,31,13,33,15,);
B(B_F,to_udint,,11,11,19,14,);
B(B_VARIN,,1,9,12,11,14,);
L(24,17,33,17);
L(24,9,24,17);
L(24,9,33,9);
L(19,11,19,13);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 15 ;
        NETWORK_BODY
B(B_COMMENT,,lock freefall operation,1,1,27,2,);
B(B_F,@AND-2,,16,10,21,14,0N);
B(B_VARIN,,MXadLEHydrGrab,20,8,22,10,);
B(B_VARIN,,MXenabAutHoseWin,14,12,16,14,);
B(B_F,@OR-2,,11,9,16,13,);
B(B_VARIN,,MXenabKelGrabOpe,9,10,11,12,);
B(B_VARIN,,MXenabHyGrabHose,9,11,11,13,);
B(B_VARIN,,MXad2LockFreefal,20,5,22,7,);
B(B_VARIN,,MXad3LockFreefal,20,6,22,8,);
B(B_VARIN,,MXad1LockFreefal,20,4,22,6,);
B(B_VAROUT,,MXlockFreefall,27,4,29,6,);
B(B_F,@OR-6,,22,3,27,11,);
B(B_VARIN,,MXremContPresel,20,7,22,9,);
L(22,10,22,12);
L(21,12,22,12);
L(16,11,16,12);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_VARIN,,MXhg1LedFastSpe,9,4,11,6,);
B(B_VAROUT,,QTXhg1FastSpeed,16,4,18,6,);
B(B_COMMENT,,enable fast speed hg1,1,1,27,2,);
B(B_VARIN,,MXhg1LedFastWin,9,5,11,7,);
B(B_F,@OR-2,,11,3,16,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_COMMENT,,enable fast speed hg2,1,1,27,2,);
B(B_VARIN,,MXhg2LedFastSpe,9,4,11,6,);
B(B_VAROUT,,QTXhg2FastSpeed,16,4,18,6,);
B(B_VARIN,,MXhg2LedFastWin,9,5,11,7,);
B(B_F,@OR-2,,11,3,16,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 20 ;
        NETWORK_BODY
B(B_COMMENT,,set assembly operation,1,1,27,2,);
B(B_FB,MsgRealReal,Message5,30,2,39,9,);
B(B_VAROUT,,MXassemblyOperat,12,3,14,5,);
B(B_VARIN,,IXassemblyOperat,10,4,12,6,);
B(B_FB,R_TRIG,R_TRIG1,13,8,20,11,);
B(B_F,sel,,22,9,27,14,);
B(B_F,sel,,22,14,27,19,);
B(B_VARIN,,MDlmlLoadLuffJib,20,17,22,19,);
B(B_VARIN,,MDlmlLoadBoom,18,12,20,14,);
B(B_VARIN,,269,28,3,30,5,);
B(B_VARIN,,MSG_WARNING,28,5,30,7,);
B(B_VAROUT,,LD1,30,10,32,12,);
B(B_VAROUT,,LD2,29,15,31,17,);
B(B_VARIN,,LD1,18,11,20,13,);
B(B_VARIN,,LD2,20,16,22,18,);
L(12,5,30,5);
L(12,10,13,10);
L(12,4,12,10);
L(20,13,22,13);
L(21,16,22,16);
L(21,10,21,16);
L(20,10,21,10);
L(21,11,22,11);
L(20,12,22,12);
L(28,7,28,11);
L(28,7,30,7);
L(29,8,30,8);
L(27,16,29,16);
L(27,11,30,11);
L(29,8,29,16);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 33 ;
        NETWORK_BODY
B(B_COMMENT,,set output flashing light and movement warner,1,1,27,2,);
B(B_F,@AND-2,,30,4,35,8,);
B(B_VAROUT,,QXflashingLight,35,5,37,7,);
B(B_VAROUT,,QXmovementWarnin,35,18,37,20,);
B(B_F,@AND-2,,30,17,35,21,);
B(B_VARIN,,MXminEngineSpeed,27,3,29,5,);
B(B_VARIN,,MXswitTravelGear,16,19,18,21,);
B(B_VARIN,,IXentrySwiClosed,16,20,18,22,);
B(B_F,@AND-3,,18,18,23,23,);
B(B_F,@OR-2,,13,22,18,26,N);
B(B_VARIN,,CXtgWarning,11,24,13,26,);
B(B_VARIN,,MXlmlTypeDutyCyc,11,23,13,25,);
B(B_F,@AND-2,,18,25,23,29,);
B(B_F,@OR-2,,13,28,18,32,N);
B(B_VARIN,,CXsgWarning,11,30,13,32,);
B(B_VARIN,,MXlmlTypeDutyCyc,11,29,13,31,);
B(B_VARIN,,MXsgEnPowStage,16,26,18,28,);
B(B_F,@OR-2,,23,18,28,22,);
B(B_F,@OR-4,,23,5,28,11,);
B(B_VARIN,,MXassemblyOperat,21,6,23,8,);
B(B_VARIN,,MXremContActive,21,7,23,9,);
B(B_F,@AND-2,,17,14,22,18,);
B(B_F,@AND-3,,17,9,22,14,);
B(B_VARIN,,MXsgEnPowStage,15,16,17,18,);
B(B_VARIN,,MXswitTravelGear,15,10,17,12,);
B(B_VARIN,,IXentrySwiClosed,15,11,17,13,);
B(B_VARIN,,MXlmlTypeDutyCyc,15,13,17,15,);
L(29,6,30,6);
L(28,7,30,7);
L(29,19,30,19);
L(29,4,29,19);
L(18,28,18,30);
L(18,22,18,24);
L(23,21,23,27);
L(28,20,30,20);
L(22,16,23,16);
L(23,10,23,16);
L(22,9,23,9);
L(22,9,22,11);
L(17,13,17,16);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 17 ;
        NETWORK_BODY
B(B_COMMENT,,bridge limit switches for assembly operation,1,1,27,2,);
B(B_VARIN,,ITXlimSwBridged,9,6,11,8,);
B(B_FB,R_TRIG,R_TRIG2,11,5,18,8,);
B(B_F,@AND-2,,21,11,26,15,);
B(B_VAROUT,,QTXlimSwBridged,41,6,43,8,);
B(B_VAROUT,,MXlimitSwBridged,41,5,43,7,);
B(B_F,@AND-3,,21,4,26,9,);
B(B_FB,MsgRealReal,Message6,45,9,54,16,);
B(B_VARIN,,266,43,10,45,12,);
B(B_VARIN,,MSG_INFO,43,12,45,14,);
B(B_VARIN,,MXassemblyOperat,16,9,18,11,);
B(B_VARIN,,MXlimitSwBridged,19,13,21,15,);
B(B_FB,RS,RS1,35,4,40,8,);
B(B_F,@OR-2,,28,10,33,14,N);
B(B_VARIN,,MXjoystickInZero,18,3,20,5,);
L(19,13,21,13);
L(19,7,19,13);
L(18,7,21,7);
L(34,7,35,7);
L(34,7,34,12);
L(20,6,21,6);
L(41,12,45,12);
L(41,6,41,12);
L(26,13,28,13);
L(27,10,27,12);
L(18,10,27,10);
L(20,8,20,10);
L(20,8,21,8);
L(26,6,35,6);
L(40,6,41,6);
L(27,12,28,12);
L(33,12,34,12);
L(20,4,20,6);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_COMMENT,,detection if engine runs on emergency mode,1,1,27,2,);
B(B_FB,PowerSourceState,PwrSrcState1,10,4,24,9,);
B(B_FB,MsgRealReal,Message7,37,5,46,12,);
B(B_VARIN,,573,35,6,37,8,);
B(B_VARIN,,MSG_WARNING,35,8,37,10,);
B(B_VAROUT,,MXemergOperat,24,9,26,11,);
L(24,8,24,10);
L(24,8,37,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 41 ;
        NETWORK_BODY
B(B_COMMENT,,fuel tank content,1,1,27,2,);
B(B_FB,WndComp,WndComp3,28,8,35,14,);
B(B_VARIN,,15.0,26,10,28,12,);
B(B_FB,TON,TON7,37,9,42,13,);
B(B_FB,TOF,TOF1,43,9,48,13,);
B(B_VARIN,,T#10.0s,35,14,37,16,);
B(B_VARIN,,3.0,26,12,28,14,);
B(B_FB,WndComp,WndComp4,28,16,35,22,);
B(B_VARIN,,5.0,26,18,28,20,);
B(B_FB,TON,TON8,37,17,42,21,);
B(B_FB,TOF,TOF2,43,17,48,21,);
B(B_VARIN,,T#10.0s,35,22,37,24,);
B(B_VARIN,,3.0,26,20,28,22,);
B(B_VARIN,,IWfuelTankCont,10,5,12,7,);
B(B_FB,ScaleAI,ScaleAI1,12,4,20,9,);
B(B_VARIN,,100.0,10,6,12,8,);
B(B_FB,MsgRealReal,Message8,59,8,68,15,);
B(B_VARIN,,636,57,9,59,11,);
B(B_FB,MsgRealReal,Message9,59,16,68,23,);
B(B_VARIN,,MSG_INFO,57,11,59,13,);
B(B_VARIN,,MSG_WARNING,57,19,59,21,);
B(B_VARIN,,637,57,17,59,19,);
B(B_VAROUT,,MXfuelContWarn,50,5,52,7,);
B(B_VAROUT,,MDfuelCont,23,5,25,7,);
B(B_VAROUT,,MXfuelContError,49,15,51,17,);
B(B_FB,MsgRealReal,Message10,35,25,44,32,);
B(B_VARIN,,34,33,26,35,28,);
B(B_VARIN,,MSG_ERROR,33,28,35,30,);
B(B_F,@AND-2,,22,34,27,38,0N);
B(B_FB,SR,SR2,27,34,32,38,0N);
B(B_VARIN,,MXengStarterActi,18,36,20,38,);
B(B_VARIN,,MSG_ERROR,38,36,40,38,);
B(B_VARIN,,33,38,34,40,36,);
B(B_FB,MsgRealReal,Message11,40,33,49,40,);
L(22,7,22,28);
L(35,11,37,11);
L(42,11,43,11);
L(37,12,37,15);
L(37,15,43,15);
L(43,12,43,15);
L(35,19,37,19);
L(42,19,43,19);
L(37,20,37,23);
L(37,23,43,23);
L(43,20,43,23);
L(23,18,28,18);
L(23,10,28,10);
L(20,7,22,7);
L(20,8,21,8);
L(20,6,23,6);
L(23,6,23,18);
L(48,19,59,19);
L(48,11,59,11);
L(49,16,49,19);
L(50,6,50,11);
L(22,28,35,28);
L(21,36,22,36);
L(32,36,40,36);
L(21,39,27,39);
L(27,37,27,39);
L(20,37,22,37);
L(21,8,21,39);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 56 ;
        NETWORK_BODY
B(B_FB,ScaleAI,ScaleAI5,11,15,19,20,);
B(B_FB,ScaleAI,ScaleAI4,11,4,19,9,);
B(B_VARIN,,20.0,9,6,11,8,);
B(B_VARIN,,IWsuperstAngSenX,9,5,11,7,);
B(B_VARIN,,20.0,9,17,11,19,);
B(B_VARIN,,IWsuperstAngSenY,9,16,11,18,);
B(B_COMMENT,,superstructure angle sensors,1,1,27,2,);
B(B_COMMENT,,+/-10°,5,8,9,9,);
B(B_F,@MUL-2,,32,7,37,11,);
B(B_F,@MUL-2,,32,12,37,16,);
B(B_F,cos,,37,7,42,10,);
B(B_F,cos,,37,12,42,15,);
B(B_F,@MUL-2,,42,7,47,11,);
B(B_F,acos,,47,7,52,10,);
B(B_F,@DIV,,27,10,32,14,);
B(B_VARIN,,PI,25,11,27,13,);
B(B_VARIN,,180.0,25,12,27,14,);
B(B_F,@DIV,,47,10,52,14,);
B(B_F,@MUL-2,,52,7,57,11,);
B(B_VARIN,,180.0,45,11,47,13,);
B(B_VARIN,,PI,45,12,47,14,);
B(B_COMMENT,,grd -> rad -> grd,42,15,50,16,);
B(B_VAROUT,,MDsuperstrAngAbs,57,8,59,10,);
B(B_VAROUT,,MDsuperstAngSenX,32,5,34,7,);
B(B_VAROUT,,MDsuperstAngSenY,32,16,34,18,);
B(B_F,@AND-2,,25,21,30,25,);
B(B_F,@AND-2,,25,31,30,35,);
B(B_F,@AND-2,,25,39,30,43,);
B(B_F,@AND-2,,25,48,30,52,);
B(B_F,@SUB,,27,15,32,19,);
B(B_VARIN,,10.0,25,17,27,19,);
B(B_F,@SUB,,27,4,32,8,);
B(B_VARIN,,10.0,25,6,27,8,);
B(B_VARIN,,MSG_ERROR,35,23,37,25,);
B(B_VARIN,,584,35,21,37,23,);
B(B_FB,MsgRealReal,Message12,37,20,46,27,);
B(B_VAROUT,,LXerrAngSenXShrt,30,18,32,20,);
B(B_VAROUT,,LXerrAngSenYShrt,30,36,32,38,);
B(B_VARIN,,MSG_ERROR,35,41,37,43,);
B(B_VARIN,,586,35,39,37,41,);
B(B_FB,MsgRealReal,Message14,37,38,46,45,);
B(B_VARIN,,CXsuperstAngSens,15,52,17,54,);
B(B_VARIN,,CXadInclSwOffDev,15,53,17,55,);
B(B_F,@OR-2,,17,51,22,55,);
B(B_F,@AND-2,,34,48,39,52,0N);
B(B_FB,SR,SR4,39,48,44,52,0N);
B(B_VARIN,,MSG_ERROR,48,50,50,52,);
B(B_VARIN,,585,48,48,50,50,);
B(B_FB,MsgRealReal,Message15,50,47,59,54,);
B(B_VARIN,,MXengStarterActi,31,46,33,48,);
B(B_VAROUT,,LXerrAngSenYBrk,44,45,46,47,);
B(B_F,@AND-2,,34,31,39,35,0N);
B(B_FB,SR,SR3,39,31,44,35,0N);
B(B_VARIN,,MSG_ERROR,48,33,50,35,);
B(B_VARIN,,583,48,31,50,33,);
B(B_VARIN,,MXengStarterActi,31,29,33,31,);
B(B_FB,MsgRealReal,Message13,50,30,59,37,);
B(B_VAROUT,,LXerrAngSenXBrk,45,28,47,30,);
B(B_COMMENT,,http://jira.zdv.liebherr.i:8080/browse/LWNTBEHSHSSW10511521-27,27,2,62,3,);
B(B_COMMENT,,inclination switch off device ,1,2,27,3,);
L(19,8,22,8);
L(19,18,21,18);
L(19,7,23,7);
L(19,19,20,19);
L(42,10,42,14);
L(32,10,32,14);
L(52,10,52,12);
L(32,6,32,9);
L(32,15,32,17);
L(23,23,25,23);
L(23,24,25,24);
L(22,33,25,33);
L(21,41,25,41);
L(20,50,25,50);
L(19,17,27,17);
L(19,6,27,6);
L(30,23,37,23);
L(30,19,30,23);
L(23,7,23,23);
L(22,8,22,33);
L(30,37,30,41);
L(30,41,37,41);
L(21,18,21,41);
L(20,19,20,50);
L(22,53,23,53);
L(23,24,23,53);
L(23,34,25,34);
L(23,42,25,42);
L(23,51,25,51);
L(30,50,34,50);
L(32,53,39,53);
L(39,51,39,53);
L(32,50,32,53);
L(33,51,34,51);
L(44,50,50,50);
L(33,47,33,51);
L(44,46,44,50);
L(30,33,34,33);
L(32,36,39,36);
L(39,34,39,36);
L(32,33,32,36);
L(33,34,34,34);
L(44,33,50,33);
L(33,30,33,34);
L(45,29,45,33);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 31 ;
        NETWORK_BODY
B(B_COMMENT,,set crane inclination shut off,1,1,27,2,);
B(B_COMMENT,,http://jira.zdv.liebherr.i:8080/browse/LWNTBEHSHSSW10511521-27,32,1,67,2,);
B(B_FB,WndComp,WndComp5,14,18,21,24,);
B(B_VARIN,,MDsuperstrAngAbs,11,19,13,21,);
B(B_FB,WndComp,WndComp6,14,24,21,30,);
B(B_VARIN,,LDinclSwPreRange,9,27,11,29,);
B(B_F,@AND-2,,24,12,29,16,);
B(B_F,@OR-4,,24,6,29,12,);
B(B_VARIN,,LXerrAngSenXShrt,22,7,24,9,);
B(B_VARIN,,LXerrAngSenXBrk,22,8,24,10,);
B(B_VARIN,,LXerrAngSenYShrt,22,9,24,11,);
B(B_VARIN,,LXerrAngSenYBrk,22,10,24,12,);
B(B_F,@AND-2,,32,11,37,15,N);
B(B_VAROUT,,MXinclShutOffScr,37,12,39,14,);
B(B_F,@OR-2,,32,6,37,10,);
B(B_VARIN,,MXlmlHSMode,36,5,38,7,);
B(B_VARIN,,CXadInclSwOffDev,21,13,23,15,);
B(B_VARIN,,CDinclSwOffRange,10,21,12,23,);
B(B_VARIN,,LDhystInclSwOff,10,22,12,24,);
B(B_FB,MsgRealReal,Message18,40,14,49,21,);
B(B_VARIN,,809,38,15,40,17,);
B(B_VARIN,,MSG_WARNING,38,17,40,19,);
B(B_VARIN,,LDsuperAngAbsMax,38,19,40,21,);
B(B_VARIN,,CDinclSwOffRange,38,18,40,20,);
B(B_F,@AND-3,,31,24,36,29,N);
B(B_VAROUT,,MXinclShutPreScr,36,25,38,27,);
B(B_VAROUT,,LXinclShutOff,31,21,33,23,);
B(B_VARIN,,MXlmlBridged,36,4,38,6,);
B(B_F,@AND-3,,38,3,43,8,NN);
B(B_VAROUT,,MXinclShutOff,43,4,45,6,);
L(12,22,14,22);
L(13,20,13,26);
L(13,20,14,20);
L(13,26,14,26);
L(12,29,14,29);
L(11,28,14,28);
L(31,9,31,14);
L(30,13,32,13);
L(31,9,32,9);
L(37,8,38,8);
L(22,15,24,15);
L(23,14,24,14);
L(23,14,23,27);
L(29,8,32,8);
L(29,14,32,14);
L(30,8,30,26);
L(21,22,22,22);
L(12,23,12,29);
L(12,23,14,23);
L(22,15,22,22);
L(37,13,37,17);
L(37,17,40,17);
L(23,27,31,27);
L(21,28,31,28);
L(30,26,31,26);
L(22,22,31,22);
L(38,7,38,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_VARIN,,0.0,24,10,26,12,);
B(B_VARIN,,LXinclShutOff,24,2,26,4,);
B(B_VAROUT,,LDsuperAngAbsMax,32,5,34,7,);
B(B_F,sel,,20,5,25,10,);
B(B_F,sel,,27,4,32,9,N);
B(B_F,@GT-2,,13,3,18,7,);
B(B_VARIN,,LDsuperAngAbsMax,9,5,11,7,);
B(B_VARIN,,MDsuperstrAngAbs,10,4,12,6,);
B(B_COMMENT,,drag indicator for absolut angle [°],1,1,27,2,);
L(19,5,19,7);
L(26,8,27,8);
L(26,8,26,11);
L(26,3,26,6);
L(19,7,20,7);
L(25,7,27,7);
L(26,6,27,6);
L(18,5,19,5);
L(12,5,12,9);
L(12,9,20,9);
L(12,5,13,5);
L(11,6,13,6);
L(13,6,13,8);
L(13,8,20,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_VARIN,,CDinclSwOffRange,9,5,11,7,);
B(B_F,@DIV,,11,4,16,8,);
B(B_VARIN,,100.0,9,6,11,8,);
B(B_COMMENT,,hysteresis and prewarning of crane inclination threshold [°],1,1,27,2,);
B(B_F,@MUL-2,,17,3,22,7,);
B(B_VAROUT,,LDhystInclSwOff,22,4,24,6,);
B(B_VARIN,,5.0,15,2,17,4,);
B(B_F,@MUL-2,,17,7,22,11,);
B(B_VARIN,,90.0,15,9,17,11,);
B(B_VAROUT,,LDinclSwPreRange,22,8,24,10,);
B(B_COMMENT,,Schwelle der Vorwarnung wie bei LMB Warnung ,35,9,55,10,);
L(17,3,17,5);
L(16,6,17,6);
L(17,6,17,9);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 22 ;
        NETWORK_BODY
B(B_COMMENT,,enable cylinder operation,1,1,27,2,);
B(B_FB,RS,RS2,33,6,38,10,);
B(B_VARIN,,ITXcylOperat,9,7,11,9,);
B(B_FB,R_TRIG,R_TRIG3,11,6,18,9,);
B(B_VARIN,,QXreleasCylOpera,18,11,20,13,);
B(B_F,@AND-2,,20,9,25,13,);
B(B_F,@OR-2,,33,17,38,21,N);
B(B_VAROUT,,QTXcylOpera,43,17,45,19,);
B(B_VARIN,,MXlowPowLimitAct,31,18,33,20,);
B(B_VARIN,,MXflashSignal,31,19,33,21,);
B(B_VARIN,,LXstopCylOperat,23,13,25,15,);
B(B_VARIN,,MXassemblyOperat,24,14,26,16,);
B(B_F,@AND-2,,45,3,50,7,N);
B(B_VARIN,,MXlowPowLimitAct,43,2,45,4,);
B(B_VAROUT,,QXreleasCylOpera,50,4,52,6,);
B(B_VAROUT,,MXcylOperatWork,50,5,52,7,);
B(B_F,@OR-3,,40,4,45,9,);
B(B_VARIN,,LXaFrameCylUp,37,4,39,6,);
B(B_VARIN,,LXaFrameCylDown,38,3,40,5,);
B(B_F,@AND-2,,38,16,43,20,);
B(B_F,@OR-4,,27,9,32,15,00N);
B(B_VARIN,,IXentrySwiClosed,18,17,20,19,);
B(B_FB,F_TRIG,F_TRIG1,20,16,27,19,);
L(33,9,33,11);
L(19,8,19,11);
L(18,8,33,8);
L(19,11,20,11);
L(38,8,38,18);
L(25,12,25,14);
L(26,13,26,15);
L(45,3,45,5);
L(50,5,50,6);
L(38,8,40,8);
L(39,7,40,7);
L(39,5,39,7);
L(40,4,40,6);
L(25,12,27,12);
L(26,13,27,13);
L(25,11,27,11);
L(32,11,33,11);
L(27,14,27,18);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 35 ;
        NETWORK_BODY
B(B_FB,R_TRIG,R_TRIG4,11,12,18,15,);
B(B_VARIN,,ITXaFrameCylOut,9,13,11,15,);
B(B_F,@OR-3,,20,20,25,25,00N);
B(B_VARIN,,MXstopAllFunctio,18,21,20,23,);
B(B_VARIN,,ITXaFrameCylIn,18,22,20,24,);
B(B_VARIN,,MXassemblyOperat,18,23,20,25,);
B(B_F,@AND-2,,20,16,25,20,);
B(B_VARIN,,MXrelAFrameCyl,18,18,20,20,);
B(B_VARIN,,MXcylOperatWork,25,14,27,16,);
B(B_VARIN,,MXaFrameCylPrese,24,25,26,27,);
B(B_F,@OR-4,,29,18,34,24,N00N);
B(B_FB,RS,RS3,36,12,41,16,);
B(B_VARIN,,MXmachTypeHS8070,27,31,29,33,);
B(B_VARIN,,IXlgUpperLimOk,27,30,29,32,);
B(B_VARIN,,CXaFrameErectCyl,27,32,29,34,);
B(B_F,@AND-5,,29,27,34,34,N);
B(B_COMMENT,,release a-frame cylinder up,1,1,27,2,);
B(B_VARIN,,MXaFrameSensorEr,33,3,35,5,);
B(B_FB,WndComp,WndComp2,26,5,33,11,);
B(B_VARIN,,MDaFrameLoadSens,24,6,26,8,);
B(B_VARIN,,50.0,24,7,26,9,);
B(B_VARIN,,10.0,24,9,26,11,);
B(B_F,@AND-2,,36,5,41,9,N);
B(B_VARIN,,MXlgAnalSigNeg,41,2,43,4,);
B(B_VAROUT,,MXrelAFrameCyl,44,7,46,9,);
B(B_F,@AND-4,,45,10,50,16,);
B(B_VAROUT,,QXaFrameCylUp,56,11,58,13,);
B(B_F,@OR-2,,51,10,56,14,);
B(B_F,@OR-2,,52,17,57,21,);
B(B_VAROUT,,QTXaFrameCylOut,57,18,59,20,);
B(B_VAROUT,,LXaFrameCylUp,51,28,53,30,);
L(19,14,19,18);
L(11,14,11,30);
L(26,18,26,21);
L(25,18,26,18);
L(19,18,20,18);
L(27,15,27,20);
L(26,26,43,26);
L(26,23,26,26);
L(26,23,29,23);
L(26,21,29,21);
L(25,22,29,22);
L(27,20,29,20);
L(34,20,35,20);
L(35,15,35,20);
L(35,15,36,15);
L(18,14,36,14);
L(27,22,27,29);
L(27,29,29,29);
L(11,30,29,30);
L(35,4,35,7);
L(33,8,36,8);
L(35,7,36,7);
L(42,7,42,13);
L(41,7,42,7);
L(43,3,43,12);
L(44,8,44,14);
L(43,15,43,26);
L(43,15,45,15);
L(41,14,45,14);
L(42,13,45,13);
L(43,12,45,12);
L(50,12,51,12);
L(51,13,51,29);
L(34,29,51,29);
L(44,14,44,19);
L(44,19,52,19);
L(51,20,52,20);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 18 ;
        NETWORK_BODY
B(B_COMMENT,,release a-frame cylinder down,1,1,27,2,);
B(B_VARIN,,MXcylOperatWork,16,4,18,6,);
B(B_VARIN,,ITXaFrameCylIn,16,5,18,7,);
B(B_VARIN,,IXlgAFraUppLimOk,16,6,18,8,);
B(B_VARIN,,MXaFrameCylPrese,16,7,18,9,);
B(B_F,@AND-5,,18,3,23,10,00N0N);
B(B_VARIN,,MXstopAllFunctio,9,9,11,11,);
B(B_VARIN,,ITXaFrameCylOut,9,10,11,12,);
B(B_VARIN,,MXassemblyOperat,9,11,11,13,);
B(B_F,@OR-3,,11,8,16,13,00N);
B(B_VARIN,,ITXaFrameCylIn,16,13,18,15,);
B(B_VARIN,,MXmachTypeHS8070,16,14,18,16,);
B(B_VARIN,,CXaFrameErectCyl,16,15,18,17,);
B(B_VAROUT,,QXaFrameCylDown,29,4,31,6,);
B(B_VAROUT,,QTXaFrameCylIn,29,5,31,7,);
B(B_F,@OR-2,,24,3,29,7,);
B(B_VAROUT,,LXaFrameCylDown,24,12,26,14,);
B(B_F,@AND-4,,18,11,23,17,N);
L(23,5,24,5);
L(16,10,17,10);
L(17,9,18,9);
L(17,9,17,13);
L(29,5,29,6);
L(24,6,24,13);
L(17,13,18,13);
L(23,13,24,13);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 27 ;
        NETWORK_BODY
B(B_COMMENT,,stop hoisting gear at hydr. grab operation,1,1,27,2,);
B(B_F,@AND-3,,17,8,22,13,0NN);
B(B_VARIN,,MXenabAutHoseWin,15,11,17,13,);
B(B_VARIN,,MXjoyGrabAssembl,15,10,17,12,);
B(B_F,@OR-3,,24,11,29,16,);
B(B_F,@AND-2,,17,15,22,19,0N);
B(B_VARIN,,MXhg2SlacRoStopD,15,16,17,18,);
B(B_VARIN,,MXjoyGrabAssembl,15,17,17,19,);
B(B_VAROUT,,LXgrabStopHg2Dow,29,12,31,14,);
B(B_F,@OR-3,,24,18,29,23,);
B(B_VAROUT,,LXgrabStopHg1Dow,29,19,31,21,);
B(B_VARIN,,MXgrabMooStopHg1,22,20,24,22,);
B(B_F,@AND-2,,17,22,22,26,0N);
B(B_VARIN,,MXhg1SlacRoStopD,15,23,17,25,);
B(B_VARIN,,MXjoyGrabAssembl,15,24,17,26,);
B(B_VARIN,,MXgrabMooStopHg2,20,13,22,15,);
B(B_VARIN,,MXadLEHydrGrab,9,4,11,6,);
B(B_VARIN,,MXadSMHydrGrab,9,5,11,7,);
B(B_VARIN,,MXadSBHydrGrab,9,6,11,8,);
B(B_VARIN,,MXenabKelGrabOpe,9,7,11,9,);
B(B_F,@OR-5,,11,3,16,10,);
B(B_VARIN,,MXenabHyGrabHose,9,8,11,10,);
B(B_COMMENT,,assembly mode at hydr. grab,24,9,36,10,);
L(22,10,23,10);
L(23,10,23,20);
L(22,17,24,17);
L(24,15,24,17);
L(23,20,24,20);
L(23,13,24,13);
L(22,24,24,24);
L(24,22,24,24);
L(22,14,24,14);
L(17,5,17,10);
L(16,5,17,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 18 ;
        NETWORK_BODY
B(B_F,@AND-3,,21,5,26,10,N);
B(B_VARIN,,MXlgLockDragline,19,6,21,8,);
B(B_FB,R_TRIG,R_TRIG5,11,11,18,14,);
B(B_VARIN,,MXjoyHyGrabPre,9,12,11,14,);
B(B_VARIN,,MXenabDragliOper,16,8,18,10,);
B(B_FB,SR,SR_lock_lg,28,5,33,9,);
B(B_F,@OR-3,,21,10,26,15,N0N);
B(B_VARIN,,MXlgJoySigLock,19,14,21,16,);
B(B_COMMENT,,ACHTUNG: Das RS wird im init Teil gesetzt,33,3,50,4,);
B(B_VARIN,,MXgrabStopLG,32,14,34,16,);
B(B_VAROUT,,MXlgLockDragline,33,4,35,6,);
B(B_COMMENT,,preselection lock luffing gear,1,1,27,2,);
B(B_COMMENT,,http://jira.zdv.liebherr.i/browse/LWNTBEHSHSSW10511521-20,28,1,53,2,);
B(B_VARIN,,MXlockLg,33,15,35,17,);
B(B_VAROUT,,MXlgPreLockSig,40,6,42,8,);
B(B_F,@OR-3,,35,5,40,10,);
L(19,8,21,8);
L(20,9,21,9);
L(18,13,19,13);
L(19,8,19,13);
L(20,9,20,12);
L(18,9,20,9);
L(19,13,21,13);
L(26,7,28,7);
L(27,8,27,12);
L(27,8,28,8);
L(20,12,21,12);
L(26,12,27,12);
L(21,14,21,15);
L(34,8,34,15);
L(33,5,33,7);
L(33,7,35,7);
L(34,8,35,8);
L(35,9,35,16);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,preselection lock hoisting gear1,1,1,27,2,);
B(B_VARIN,,MXlockHg1,9,3,11,5,);
B(B_VAROUT,,MXhg1PreLockSig,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,preselection lock hoisting gear2,1,1,27,2,);
B(B_VARIN,,MXlockHg2,9,3,11,5,);
B(B_VAROUT,,MXhg2PreLockSig,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,preselection lock slewing gear,1,1,27,2,);
B(B_VARIN,,MXlockSg,9,3,11,5,);
B(B_VAROUT,,MXsgPreLockSig,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,preselection lock travelling gear,1,1,27,2,);
B(B_VARIN,,MXlockTg,9,3,11,5,);
B(B_VAROUT,,MXtgGlobalStop,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 22 ;
        NETWORK_BODY
B(B_COMMENT,,stop hoisting gear by utilization backwards,1,1,27,2,);
B(B_VAROUT,,MXhg1GlobStopDow,25,13,27,15,);
B(B_VARIN,,MXadStopHg2Dn,15,5,17,7,);
B(B_VARIN,,MXleaderStopBack,16,14,18,16,);
B(B_VARIN,,MXadStopHg1Dn,18,15,20,17,);
B(B_VARIN,,MXlmlBlockHg1,18,16,20,18,);
B(B_VARIN,,LXgrabStopHg2Dow,16,4,18,6,);
B(B_VARIN,,LXgrabStopHg1Dow,18,17,20,19,);
B(B_VARIN,,MXecHG2StopDn,17,3,19,5,);
B(B_VARIN,,MXecHG1StopDn,18,18,20,20,);
B(B_F,@AND-2,,11,8,16,12,0N);
B(B_VARIN,,MXlmlStopBackwar,9,9,11,11,);
B(B_VARIN,,MXlmlBridged,9,10,11,12,);
B(B_VARIN,,MXlmlBlockHg2,14,6,16,8,);
B(B_VARIN,,MXlockHg1,18,19,20,21,);
B(B_VARIN,,MXlockHg2,18,2,20,4,);
B(B_F,@OR-7,,20,12,25,21,);
B(B_VAROUT,,MXhg2GlobStopDow,25,4,27,6,);
B(B_F,@OR-7,,20,3,25,12,);
L(17,6,17,8);
L(18,15,20,15);
L(18,11,18,15);
L(17,8,20,8);
L(18,5,18,7);
L(18,7,20,7);
L(19,4,19,6);
L(19,6,20,6);
L(18,11,20,11);
L(16,10,20,10);
L(17,10,17,14);
L(16,7,16,9);
L(16,9,20,9);
L(17,14,20,14);
L(20,3,20,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_VARIN,,MXadStopHg1Up,9,2,11,4,);
B(B_VAROUT,,MXhg1GlobStopUp,16,2,18,4,);
B(B_VARIN,,MXleaderStopBack,9,3,11,5,);
B(B_VARIN,,MXlmlBlockHg1,9,4,11,6,);
B(B_VARIN,,MXecHG1StopUp,9,5,11,7,);
B(B_VARIN,,MXinclShutOff,9,6,11,8,);
B(B_F,@OR-6,,11,1,16,9,);
B(B_VARIN,,MXlockHg1,9,7,11,9,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_VARIN,,MXadStopHg2Up,9,2,11,4,);
B(B_VAROUT,,MXhg2GlobStopUp,16,2,18,4,);
B(B_VARIN,,MXleaderStopBack,9,3,11,5,);
B(B_VARIN,,MXlmlBlockHg2,9,4,11,6,);
B(B_VARIN,,MXecHG2StopUp,9,5,11,7,);
B(B_VARIN,,MXinclShutOff,9,6,11,8,);
B(B_F,@OR-6,,11,1,16,9,);
B(B_VARIN,,MXlockHg2,9,7,11,9,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 33 ;
        NETWORK_BODY
B(B_COMMENT,,stop luffing gear and auxiliary winch 1 up,1,1,27,2,);
B(B_F,@AND-2,,16,18,21,22,N);
B(B_VARIN,,IXlg2LowerLimOk,14,19,16,21,);
B(B_VARIN,,MXlmlLuffJibEnab,14,20,16,22,);
B(B_F,@AND-3,,16,22,21,27,N);
B(B_VARIN,,MXrelAFrameCyl,14,23,16,25,);
B(B_VARIN,,MXaFrameCylPrese,14,24,16,26,);
B(B_VARIN,,MXlmlRiggingAct,9,27,11,29,);
B(B_VARIN,,MXassemblyOperat,9,26,11,28,);
B(B_F,@OR-2,,11,25,16,29,);
B(B_F,@OR-14,,25,7,30,23,000000000N);
B(B_VARIN,,MXleaderStopBack,22,29,24,31,);
B(B_VARIN,,MXlgUpAngleStop,23,12,25,14,);
B(B_VARIN,,MXlmlPressSenErr,23,11,25,13,);
B(B_VARIN,,MXlgStopUpByFlap,23,10,25,12,);
B(B_VARIN,,MXlgUpStopFaBaSu,23,14,25,16,);
B(B_VARIN,,MXecLGStopUp,23,15,25,17,);
B(B_VARIN,,MXlmlStopLgUp,23,16,25,18,);
B(B_VARIN,,MXmachTypeOk,23,17,25,19,);
B(B_VARIN,,MXstopByHigLimMb,23,13,25,15,);
B(B_F,@AND-2,,18,2,23,6,);
B(B_VARIN,,MXhg1StopLimLift,16,3,18,5,);
B(B_VARIN,,CXadRopLenCorrec,16,4,18,6,);
B(B_F,@AND-2,,16,6,21,10,);
B(B_VARIN,,CXadRopLenCorrec,14,8,16,10,);
B(B_VARIN,,MXhg2StopLimLift,14,7,16,9,);
B(B_VAROUT,,MXlgGlobalStopUp,30,8,32,10,);
B(B_VARIN,,MXlockLg,23,30,25,32,);
L(22,8,22,10);
L(22,19,22,20);
L(21,20,22,20);
L(23,20,23,24);
L(16,26,16,27);
L(21,24,23,24);
L(24,9,25,9);
L(22,10,25,10);
L(22,19,25,19);
L(23,20,25,20);
L(21,8,22,8);
L(24,4,24,9);
L(23,4,24,4);
L(24,21,24,30);
L(24,21,25,21);
L(25,22,25,31);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_F,@AND-3,,17,5,22,10,0NN);
B(B_VARIN,,MXenabAutHoseWin,15,8,17,10,);
B(B_VARIN,,MXjoyGrabAssembl,15,7,17,9,);
B(B_VARIN,,MXenabKelGrabOpe,9,4,11,6,);
B(B_VARIN,,MXenabHyGrabHose,9,5,11,7,);
B(B_VAROUT,,LXgrabStopLgDow,22,6,24,8,);
B(B_F,@OR-2,,11,3,16,7,);
B(B_COMMENT,,stop luffing gear down at hydr. grab operation,1,1,27,2,);
L(17,5,17,7);
L(16,5,17,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 39 ;
        NETWORK_BODY
B(B_COMMENT,,stop luffing gear and auxiliary winch 1 down,1,1,27,2,);
B(B_VARIN,,MXlgDnAngleStop,20,7,22,9,);
B(B_VARIN,,MXlgStopDnByFlap,19,8,21,10,);
B(B_VARIN,,MXecLGStopDn,21,6,23,8,);
B(B_F,@AND-2,,12,11,17,15,);
B(B_VARIN,,CXadRopLenCorrec,10,13,12,15,);
B(B_VARIN,,MXhg1StopLimLowe,10,12,12,14,);
B(B_F,@AND-2,,12,15,17,19,);
B(B_VARIN,,CXadRopLenCorrec,10,17,12,19,);
B(B_VARIN,,MXhg2StopLimLowe,10,16,12,18,);
B(B_VARIN,,MXinclShutOff,16,4,18,6,);
B(B_VARIN,,MXlmlStopLgDn,16,5,18,7,);
B(B_F,@OR-2,,18,3,23,7,);
B(B_VARIN,,MXstopByRadLimMb,18,9,20,11,);
B(B_F,@AND-3,,17,25,22,30,N);
B(B_VARIN,,MXrelAFrameCyl,15,26,17,28,);
B(B_VARIN,,MXaFrameCylPrese,15,27,17,29,);
B(B_VARIN,,MXlmlRiggingAct,10,30,12,32,);
B(B_VARIN,,MXassemblyOperat,10,29,12,31,);
B(B_F,@OR-2,,12,28,17,32,);
B(B_VARIN,,MXslidTabStopUp,16,32,18,34,);
B(B_VARIN,,MXadSlidTabLiSwi,16,33,18,35,);
B(B_VARIN,,MXleaderMounted,16,34,18,36,);
B(B_VARIN,,MXlimitSwBridged,16,35,18,37,);
B(B_F,@AND-4,,18,31,23,37,000N);
B(B_F,@OR-16,,25,11,30,29,0000000NNNNN);
B(B_VAROUT,,MXlgGlobalStopDn,30,12,32,14,);
B(B_VARIN,,MXaxwUpLimOk,23,20,25,22,);
B(B_VARIN,,MXadwUpLimOk,23,21,25,23,);
B(B_VARIN,,MXmachTypeOk,23,23,25,25,);
B(B_VARIN,,MXpwSlackRopeOk,23,19,25,21,);
B(B_VARIN,,MXpwUpLimOk,23,22,25,24,);
B(B_VARIN,,LXgrabStopLgDow,23,24,25,26,);
B(B_VARIN,,MXlockLg,23,37,25,39,);
L(19,13,19,18);
L(22,8,22,15);
L(21,9,21,16);
L(18,19,25,19);
L(18,17,18,19);
L(19,18,25,18);
L(20,17,25,17);
L(21,16,25,16);
L(22,15,25,15);
L(23,14,25,14);
L(23,7,23,14);
L(17,13,19,13);
L(17,17,18,17);
L(20,10,20,17);
L(23,5,24,5);
L(23,26,25,26);
L(17,29,17,30);
L(22,27,23,27);
L(23,26,23,27);
L(23,33,24,33);
L(24,5,24,13);
L(24,27,24,33);
L(24,13,25,13);
L(24,27,25,27);
L(25,28,25,38);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_COMMENT,,global stop add winch,1,1,27,2,);
B(B_F,@OR-2,,12,3,17,7,);
B(B_VARIN,,MXinclShutOff,10,5,12,7,);
B(B_VARIN,,MXecAddWinStopUp,10,4,12,6,);
B(B_VAROUT,,MXadwGlobalStopU,17,4,19,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_VARIN,,MXecAddWinStopDn,10,2,12,4,);
B(B_F,@OR-2,,12,1,17,5,);
B(B_VAROUT,,MXadwGlobalStopD,17,2,19,4,);
B(B_COMMENT,,MXleaderStopBack ? ,1,5,11,6,);
B(B_VARIN,,FALSE,10,3,12,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 15 ;
        NETWORK_BODY
B(B_COMMENT,,stop luffing gear 2,1,1,27,2,);
B(B_VARIN,,MXlg2UpAngleStop,17,10,19,12,);
B(B_F,@AND-2,,12,7,17,11,);
B(B_VARIN,,CXadRopLenCorrec,10,9,12,11,);
B(B_VARIN,,MXhg2StopLimLift,10,8,12,10,);
B(B_F,@AND-2,,13,3,18,7,);
B(B_VARIN,,MXhg1StopLimLift,11,4,13,6,);
B(B_VARIN,,CXadRopLenCorrec,11,5,13,7,);
B(B_F,@OR-5,,19,7,24,14,);
B(B_VARIN,,MXlmlStopLgUp,17,11,19,13,);
B(B_VARIN,,MXstopByHigLimLj,17,12,19,14,);
B(B_VAROUT,,MXlg2GlobalStopU,24,8,26,10,);
L(17,9,18,9);
L(18,9,18,10);
L(18,10,19,10);
L(18,5,19,5);
L(19,5,19,9);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 14 ;
        NETWORK_BODY
B(B_VARIN,,MXlg2DnAngleStop,16,8,18,10,);
B(B_F,@AND-2,,11,5,16,9,);
B(B_VARIN,,CXadRopLenCorrec,9,7,11,9,);
B(B_F,@AND-2,,12,1,17,5,);
B(B_VARIN,,CXadRopLenCorrec,10,3,12,5,);
B(B_VARIN,,MXhg2StopLimLowe,9,6,11,8,);
B(B_VARIN,,MXhg1StopLimLowe,10,2,12,4,);
B(B_VARIN,,MXlmlStopLgDn,16,9,18,11,);
B(B_F,@OR-6,,18,5,23,13,);
B(B_VARIN,,MXinclShutOff,16,10,18,12,);
B(B_VARIN,,MXstopByRadLimLj,16,11,18,13,);
B(B_VAROUT,,MXlg2GlobalStopD,23,6,25,8,);
L(17,3,18,3);
L(18,3,18,7);
L(16,7,17,7);
L(17,7,17,8);
L(17,8,18,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 20 ;
        NETWORK_BODY
B(B_COMMENT,,global stop aux winch,1,1,27,2,);
B(B_VARIN,,MXecAuxWinStopUp,10,4,12,6,);
B(B_F,@OR-2,,12,3,17,7,);
B(B_VARIN,,MXinclShutOff,10,5,12,7,);
B(B_VARIN,,MXenabHangLeader,15,11,17,13,);
B(B_F,@AND-2,,18,7,23,11,N);
B(B_VARIN,,MXhg1UpLimBridge,10,8,12,10,);
B(B_VARIN,,MXhg2UpLimBridge,10,9,12,11,);
B(B_F,@AND-2,,12,7,17,11,);
B(B_VARIN,,MXslidTabStopUp,17,13,19,15,);
B(B_VARIN,,MXadSlidTabLiSwi,17,14,19,16,);
B(B_VARIN,,MXleaderMounted,17,15,19,17,);
B(B_F,@AND-5,,19,12,24,19,0000N);
B(B_VARIN,,MXlimitSwBridged,17,17,19,19,);
B(B_VARIN,,MXleadHighWinPre,17,16,19,18,);
B(B_VAROUT,,MXaxwGlobalStopU,31,4,33,6,);
B(B_F,@OR-3,,26,3,31,8,);
L(17,5,24,5);
L(17,10,18,10);
L(17,10,17,12);
L(17,9,18,9);
L(23,9,24,9);
L(24,6,24,9);
L(24,14,25,14);
L(25,7,25,14);
L(24,6,26,6);
L(25,7,26,7);
L(24,5,26,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_VARIN,,MXecAuxWinStopDn,10,2,12,4,);
B(B_VARIN,,MXleaderStopBack,10,3,12,5,);
B(B_F,@OR-2,,12,1,17,5,);
B(B_VAROUT,,MXaxwGlobalStopD,17,2,19,4,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_COMMENT,,stop slewing gear,1,1,27,2,);
B(B_VAROUT,,MXsgGlobalStopRi,16,4,18,6,);
B(B_VARIN,,MXwalSgStopRight,9,4,11,6,);
B(B_VARIN,,MXecSgStopRi,9,5,11,7,);
B(B_F,@OR-3,,11,3,16,8,);
B(B_VARIN,,MXlockSg,9,6,11,8,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_COMMENT,,stop slewing gear,1,1,27,2,);
B(B_VAROUT,,MXsgGlobalStopLe,16,4,18,6,);
B(B_VARIN,,MXwalSgStopLeft,9,4,11,6,);
B(B_VARIN,,MXecSgStopLe,9,5,11,7,);
B(B_F,@OR-3,,11,3,16,8,);
B(B_VARIN,,MXlockSg,9,6,11,8,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_VARIN,,MXinclShutOff,9,3,11,5,);
B(B_VAROUT,,MXpwGlobalStopUp,11,3,13,5,);
B(B_COMMENT,,stopp passenger winch ,1,1,27,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 27 ;
        NETWORK_BODY
B(B_COMMENT,,set extern control hg1 while security check is active,1,1,27,2,);
B(B_F,@OR-2,,18,12,23,16,);
B(B_VAROUT,,MXhg2ExtControl,23,13,25,15,);
B(B_F,@AND-3,,11,12,16,17,0NN);
B(B_VARIN,,MXadMooringActiv,9,13,11,15,);
B(B_VARIN,,QTXhg1FastSpeed,9,14,11,16,);
B(B_VARIN,,QTXhg2FastSpeed,9,15,11,17,);
B(B_VARIN,,MXhg2EnPowStage,9,19,11,21,);
B(B_VARIN,,QXhg2Clutch,9,20,11,22,);
B(B_VARIN,,MXecHg2ExitProg,9,18,11,20,);
B(B_VARIN,,MXecHg1ExitProg,9,4,11,6,);
B(B_VARIN,,MXhg1EnPowStage,9,5,11,7,);
B(B_VARIN,,QXhg1Clutch,9,6,11,8,);
B(B_VARIN,,QXhg1BrakeNormal,9,7,11,9,);
B(B_VARIN,,QXhg1BrakeFastSp,9,8,11,10,);
B(B_VARIN,,QXhg2BrakeNormal,9,21,11,23,);
B(B_VARIN,,QXhg2BrakeFastSp,9,22,11,24,);
B(B_VARIN,,MXhg2AnalSigPos,9,23,11,25,);
B(B_VARIN,,MXhg2AnalSigNeg,9,24,11,26,);
B(B_F,@AND-7,,11,17,16,26,0NNNNNN);
B(B_F,@AND-7,,11,3,16,12,0NNNNNN);
B(B_VARIN,,MXhg1AnalSigPos,9,9,11,11,);
B(B_VARIN,,MXhg1AnalSigNeg,9,10,11,12,);
B(B_VAROUT,,MXhg1ExtControl,23,9,25,11,);
B(B_F,@OR-2,,18,8,23,12,);
L(17,11,17,14);
L(16,14,18,14);
L(17,15,18,15);
L(17,15,17,19);
L(17,5,17,10);
L(16,19,17,19);
L(16,5,17,5);
L(17,10,18,10);
L(17,11,18,11);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_COMMENT,,external reset rope length measuring,1,1,27,2,);
B(B_VARIN,,MXdgcResRopeHg1,9,4,11,6,);
B(B_VAROUT,,MXextResRopeHg1,16,4,18,6,);
B(B_F,@OR-2,,11,3,16,7,);
B(B_VARIN,,MXpdeResRopeHg1,9,5,11,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_VARIN,,MXpdeResRopeHg2,9,2,11,4,);
B(B_F,@OR-2,,11,1,16,5,);
B(B_VARIN,,MXdgcResRopeHg2,9,3,11,5,);
B(B_VAROUT,,MXextResRopeHg2,16,2,18,4,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 15 ;
        NETWORK_BODY
B(B_COMMENT,,lock freefall hoisting gear 1,1,1,27,2,);
B(B_VARIN,,MXadSMHydrGrab,9,9,11,11,);
B(B_VARIN,,MXadSBHydrGrab,9,10,11,12,);
B(B_F,@OR-2,,11,8,16,12,);
B(B_F,@AND-2,,17,8,22,12,0N);
B(B_VARIN,,MXenabAutHoseWin,15,12,17,14,);
B(B_VARIN,,MXad1Hg1LockClut,20,4,22,6,);
B(B_VAROUT,,MXhg1LockClutch,27,4,29,6,);
B(B_VARIN,,MXad2Hg1LockClut,20,5,22,7,);
B(B_VARIN,,MXad3Hg1LockClut,20,6,22,8,);
B(B_F,@OR-4,,22,3,27,9,);
L(16,10,17,10);
L(17,11,17,13);
L(22,8,22,10);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_COMMENT,,lock freefall hoisting gear 2,1,1,27,2,);
B(B_VARIN,,MXad1Hg2LockClut,9,4,11,6,);
B(B_VAROUT,,MXhg2LockClutch,16,4,18,6,);
B(B_VARIN,,MXad2Hg2LockClut,9,5,11,7,);
B(B_F,@OR-3,,11,3,16,8,);
B(B_VARIN,,MXad3Hg2LockClut,9,6,11,8,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 23 ;
        NETWORK_BODY
B(B_VARIN,,MXhg2EnabFastSpe,14,12,16,14,);
B(B_F,@AND-2,,18,10,23,14,0N);
B(B_F,@AND-2,,18,14,23,18,0N);
B(B_VARIN,,MXhg1EnabFastSpe,16,16,18,18,);
B(B_COMMENT,,lock fast speed,1,1,27,2,);
B(B_VARIN,,MXadGrabCoWork,9,10,11,12,);
B(B_VARIN,,MXadWinSynWork,9,9,11,11,);
B(B_F,@OR-2,,11,8,16,12,);
B(B_F,@OR-2,,27,9,32,13,);
B(B_F,@OR-2,,27,13,32,17,);
B(B_VAROUT,,MXhg1LockFastSpe,32,10,34,12,);
B(B_VAROUT,,MXhg2LockFastSpe,32,14,34,16,);
B(B_F,@OR-3,,27,17,32,22,);
B(B_VAROUT,,MXlockSpeFastSpe,32,18,34,20,);
B(B_F,@OR-3,,20,3,25,8,);
B(B_VARIN,,MXspeLifLockFaSp,18,4,20,6,);
B(B_VARIN,,MXadLEHydrGrab,18,5,20,7,);
B(B_VARIN,,MXenabHyGrabHose,18,6,20,8,);
L(17,12,18,12);
L(17,16,18,16);
L(16,13,18,13);
L(16,10,17,10);
L(17,10,17,16);
L(26,15,27,15);
L(26,11,27,11);
L(23,12,27,12);
L(23,16,27,16);
L(26,19,27,19);
L(25,20,27,20);
L(25,12,25,20);
L(24,21,27,21);
L(24,16,24,21);
L(26,5,26,19);
L(25,5,26,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_VAROUT,,MXgrabGlobalStop,11,3,13,5,);
B(B_VARIN,,MXaddHydrActive,9,3,11,5,);
B(B_COMMENT,,global stop grab operation ,1,1,27,2,);
B(B_COMMENT,,VRM aktiv stoppt Greifer ø^keine Gleichzeitigkeit möglich ,28,3,44,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_COMMENT,,lock sg moment regulator,1,1,27,2,);
B(B_VARIN,,MXcouCarActive,9,4,11,6,);
B(B_VARIN,,MXrcLockFreeTurn,9,5,11,7,);
B(B_F,@OR-2,,11,3,16,7,);
B(B_VAROUT,,MXsgLockMomReg,16,4,18,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 14 ;
        NETWORK_BODY
B(B_COMMENT,,hg lock trimot hg,1,1,27,2,);
B(B_F,@OR-3,,13,3,18,8,);
B(B_F,@OR-3,,13,8,18,13,);
B(B_VAROUT,,MXhg1LockTrimot,18,4,20,6,);
B(B_VAROUT,,MXhg2LockTrimot,18,9,20,11,);
B(B_VARIN,,MXdgcLockHg1Trim,11,4,13,6,);
B(B_VARIN,,MXdgcLockHg2Trim,11,11,13,13,);
B(B_VARIN,,MXwinSynLockTrim,10,5,12,7,);
B(B_VARIN,,MXspeLifLockTrim,9,6,11,8,);
L(12,6,12,10);
L(12,10,13,10);
L(12,6,13,6);
L(11,7,13,7);
L(11,7,11,11);
L(11,11,13,11);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 25 ;
        NETWORK_BODY
B(B_COMMENT,,exit programms depend on preselections,1,1,27,2,);
B(B_VARIN,,MXenablHamOperat,9,7,11,9,);
B(B_VARIN,,MXenablVibOperat,9,6,11,8,);
B(B_VAROUT,,MXexitAddMagUnit,25,17,27,19,);
B(B_VARIN,,MXremContPresel,9,8,11,10,);
B(B_F,@OR-3,,11,5,16,10,);
B(B_F,@OR-3,,20,3,25,8,);
B(B_VAROUT,,MXexitStabWinch,25,4,27,6,);
B(B_VARIN,,MXenabDgcOperat,17,19,19,21,);
B(B_VARIN,,MXenablDrillOper,17,20,19,22,);
B(B_VARIN,,MXenExtOperMode,17,21,19,23,);
B(B_VARIN,,MXleaderOper,18,4,20,6,);
B(B_VARIN,,MXadLEHydrGrab,10,17,12,19,);
B(B_VARIN,,MXadSBHydrGrab,10,14,12,16,);
B(B_VARIN,,MXadSMHydrGrab,10,15,12,17,);
B(B_VARIN,,MXenabKelGrabOpe,10,16,12,18,);
B(B_F,@OR-4,,12,13,17,19,);
B(B_VARIN,,MXenabDragliOper,15,10,17,12,);
B(B_F,@OR-2,,20,8,25,12,);
B(B_VAROUT,,MXexitAddHydr,25,9,27,11,);
B(B_COMMENT,,wegen MS Belegung,32,6,41,7,);
B(B_VARIN,,MXpresAddOilSupp,17,22,19,24,);
B(B_F,@OR-6,,20,16,25,24,);
L(18,6,20,6);
L(19,20,20,20);
L(19,21,20,21);
L(19,22,20,22);
L(18,6,18,19);
L(16,7,18,7);
L(17,15,19,15);
L(18,19,20,19);
L(19,7,19,18);
L(19,7,20,7);
L(18,10,20,10);
L(17,11,20,11);
L(19,18,20,18);
L(19,23,20,23);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,Magnetanlage schließt Rammsteuerungø^und Greifer/Rüttler/Hammer aus wegenø^Mehrfachbelegungen der oberen Tastenø^am linken Joystick,29,1,45,5,);
B(B_VAROUT,,MXexitHydrGrab,10,1,12,3,);
B(B_VAROUT,,MXexitLEHydrGrab,10,2,12,4,);
B(B_VAROUT,,MXexitSSHydrGrab,10,3,12,5,);
B(B_VAROUT,,MXexitDynGndComp,10,4,12,6,);
B(B_VARIN,,MXenabMagnetUnit,8,1,10,3,);
L(10,2,10,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_COMMENT,,exit hanging leader operation,2,1,28,2,);
B(B_VARIN,,MXenabHyGrabOper,9,4,11,6,);
B(B_VARIN,,MXadLEHydrGrab,9,5,11,7,);
B(B_VARIN,,MXadSBHydrGrab,9,6,11,8,);
B(B_VARIN,,MXadSMHydrGrab,9,7,11,9,);
B(B_VAROUT,,MXexitHangLeader,16,4,18,6,);
B(B_COMMENT,,no hanging leader operation when hydr. grab is preselected,20,3,46,4,);
B(B_VARIN,,MXenabKelGrabOpe,9,8,11,10,);
B(B_VARIN,,MXenabHyGrabHose,9,9,11,11,);
B(B_VARIN,,MXenExtOperMode,9,10,11,12,);
B(B_F,@OR-7,,11,3,16,12,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,exit add oil supply,1,1,27,2,);
B(B_VARIN,,MXaddMagUnitPre,9,3,11,5,);
B(B_VAROUT,,MXexitAddOilSupp,11,3,13,5,);
B(B_COMMENT,,entweder oder ,29,1,52,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,added signals  to add. hyd. signal LUDV Pump 1:,1,1,27,2,);
B(B_VARIN,,MDlgPumpSignal,9,3,11,5,);
B(B_VAROUT,,MDadHydAdToLudv1,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_VARIN,,QXlgBrake,9,2,11,4,);
B(B_VARIN,,QXadwBrake,9,3,11,5,);
B(B_F,@OR-2,,11,1,16,5,);
B(B_VAROUT,,MXadHydAdToLudv1,16,2,18,4,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,added signals  to add. hyd. signal LUDV Pump 2:,1,1,27,2,);
B(B_VARIN,,MDaxwPumpSignal,9,3,11,5,);
B(B_VAROUT,,MDadHydAdToLudv2,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,QXlg2Brake,9,1,11,3,);
B(B_VAROUT,,MXadHydAdToLudv2,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_COMMENT,,add. constant tension at destruction operation,1,1,27,2,);
B(B_F,@AND-4,,11,3,16,9,);
B(B_VAROUT,,QXdestruConsTens,16,4,18,6,);
B(B_VARIN,,MXjoyDestrConTen,9,4,11,6,);
B(B_VARIN,,CXdestruConsTens,9,5,11,7,);
B(B_VARIN,,MXminEngineSpeed,9,6,11,8,);
B(B_VARIN,,QXhg2Clutch,9,7,11,9,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_VARIN,,MXrelPassTwiPump,9,5,11,7,);
B(B_VARIN,,MXrelLeaderPump,9,4,11,6,);
B(B_VAROUT,,QXreleaseAddPump,16,4,18,6,);
B(B_COMMENT,,release additional pumpe,1,1,27,2,);
B(B_VARIN,,MXrelGrabValves,9,6,11,8,);
B(B_VARIN,,MXecRelAddPump,9,7,11,9,);
B(B_VARIN,,MXecRelLeadPump,9,8,11,10,);
B(B_F,@OR-5,,11,3,16,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,additional device central lubrication bearing,1,1,27,2,);
B(B_FB,MsgRealReal,Message16,11,3,20,10,);
B(B_VARIN,,400,9,4,11,6,);
B(B_VARIN,,MSG_ERROR,9,6,11,8,);
B(B_VARIN,,IXcentLubBear,9,5,11,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,additional device central lubrication slewing ring,1,1,27,2,);
B(B_FB,MsgRealReal,Message17,11,3,20,10,);
B(B_VARIN,,401,9,4,11,6,);
B(B_VARIN,,MSG_ERROR,9,6,11,8,);
B(B_VARIN,,IXcentLubSlewRi,9,5,11,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,exit program,1,1,27,2,);
B(B_VARIN,,TRUE,9,3,11,5,);
B(B_RETURN,,,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL := init: ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,init program,1,1,27,2,);
B(B_VARIN,,TRUE,9,3,11,5,);
B(B_VAROUT,,LXinitOk,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_VARIN,,MXlgLockDragline,9,2,11,4,);
B(B_VARIN,,FALSE,9,3,11,5,);
B(B_VAROUT,,MXlgLockDragline,16,2,18,4,);
B(B_FB,SR,SR_lock_lg,11,1,16,5,);
B(B_COMMENT,,Merker muss beim 1 Dl gesetzt sein,18,5,33,6,);
B(B_VAROUT,,MXlgPreLockSig,16,3,18,5,);
L(16,3,16,4);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_FB,CorrValue_Bool,CorrValue_Bool1,11,4,23,10,);
B(B_VARIN,,CXtgWarning,9,8,11,10,);
B(B_VARIN,,FALSE,9,6,11,8,);
B(B_VARIN,,TRUE,9,7,11,9,);
B(B_VARIN,,TRUE,9,5,11,7,);
B(B_COMMENT,,additional travelling gear warning,1,1,27,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_FB,CorrValue_Bool,CorrValue_Bool2,11,4,23,10,);
B(B_VARIN,,CXsgWarning,9,8,11,10,);
B(B_VARIN,,FALSE,9,6,11,8,);
B(B_VARIN,,TRUE,9,7,11,9,);
B(B_VARIN,,TRUE,9,5,11,7,);
B(B_COMMENT,,additional slewing gear warning,1,1,27,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value lml not redundant,1,1,27,2,);
B(B_FB,CorrValue_Bool,CorrValue_Bool3,11,4,23,10,);
B(B_VARIN,,FALSE,9,5,11,7,);
B(B_VARIN,,FALSE,9,6,11,8,);
B(B_VARIN,,TRUE,9,7,11,9,);
B(B_VARIN,,CXlmlNotRedundan,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value lml not redundant,1,1,27,2,);
B(B_FB,CorrValue_Bool,CorrValue_Bool4,11,4,23,10,);
B(B_VARIN,,FALSE,9,5,11,7,);
B(B_VARIN,,FALSE,9,6,11,8,);
B(B_VARIN,,TRUE,9,7,11,9,);
B(B_VARIN,,CXdestruConsTens,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value superstructure angle indication,1,1,27,2,);
B(B_FB,CorrValue_Bool,CorrValue_Bool5,11,4,23,10,);
B(B_VARIN,,FALSE,9,5,11,7,);
B(B_VARIN,,FALSE,9,6,11,8,);
B(B_VARIN,,TRUE,9,7,11,9,);
B(B_VARIN,,CXsuperstAngSens,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value wind speed sensor,1,1,27,2,);
B(B_FB,CorrValue_Bool,CorrValue_Bool6,11,4,23,10,);
B(B_VARIN,,FALSE,9,5,11,7,);
B(B_VARIN,,FALSE,9,6,11,8,);
B(B_VARIN,,TRUE,9,7,11,9,);
B(B_VARIN,,CXwindSpeedSenso,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value a Frame erection cylinder (only HS8070 ) ,1,1,27,2,);
B(B_FB,CorrValue_Bool,CorrValue_Bool7,11,4,23,10,);
B(B_VARIN,,FALSE,9,5,11,7,);
B(B_VARIN,,FALSE,9,6,11,8,);
B(B_VARIN,,TRUE,9,7,11,9,);
B(B_VARIN,,CXaFrameErectCyl,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value dragline operation maode,1,1,27,2,);
B(B_FB,CorrValue_Bool,CorrValue_Bool8,11,4,23,10,);
B(B_VARIN,,FALSE,9,5,11,7,);
B(B_VARIN,,FALSE,9,6,11,8,);
B(B_VARIN,,TRUE,9,7,11,9,);
B(B_VARIN,,CXadDragliOpMode,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value inclination shut off device,1,1,27,2,);
B(B_FB,CorrValue_Bool,CorrValue_Bool9,11,4,23,10,);
B(B_VARIN,,FALSE,9,5,11,7,);
B(B_VARIN,,FALSE,9,6,11,8,);
B(B_VARIN,,TRUE,9,7,11,9,);
B(B_VARIN,,CXadInclSwOffDev,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value minimum current ludv section p1 (B side),1,1,27,2,);
B(B_FB,CorrValue_UInt,CorrValue_UInt1,11,4,23,10,);
B(B_VARIN,,350,9,5,11,7,);
B(B_VARIN,,50,9,6,11,8,);
B(B_VARIN,,500,9,7,11,9,);
B(B_VARIN,,CWp1MinCurValveB,9,8,11,10,);
B(B_COMMENT,,main direction,25,3,35,4,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value maximum current ludv section p1 (B side),1,1,27,2,);
B(B_FB,CorrValue_UInt,CorrValue_UInt2,11,4,23,10,);
B(B_VARIN,,740,9,5,11,7,);
B(B_VARIN,,510,9,6,11,8,);
B(B_VARIN,,1000,9,7,11,9,);
B(B_VARIN,,CWp1MaxCurValveB,9,8,11,10,);
B(B_COMMENT,,main direction,25,3,35,4,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value minimum current ludv section p1 (A side),1,1,27,2,);
B(B_FB,CorrValue_UInt,CorrValue_UInt3,11,4,23,10,);
B(B_VARIN,,350,9,5,11,7,);
B(B_VARIN,,50,9,6,11,8,);
B(B_VARIN,,500,9,7,11,9,);
B(B_VARIN,,CWp1MinCurValveA,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value maximum current ludv section p1 (A side),1,1,27,2,);
B(B_FB,CorrValue_UInt,CorrValue_UInt4,11,4,23,10,);
B(B_VARIN,,740,9,5,11,7,);
B(B_VARIN,,510,9,6,11,8,);
B(B_VARIN,,1000,9,7,11,9,);
B(B_VARIN,,CWp1MaxCurValveA,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value ludv 1 volume control maximum value [l/min],1,1,27,2,);
B(B_FB,CorrValue_UInt,CorrValue_UInt5,11,4,23,10,);
B(B_VARIN,,300,9,5,11,7,);
B(B_VARIN,,0,9,6,11,8,);
B(B_VARIN,,900,9,7,11,9,);
B(B_VARIN,,CWp1MaxValue,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value ludv section p1 for 50 l/min ,1,1,27,2,);
B(B_FB,CorrValue_UInt,CorrValue_UInt6,11,4,23,10,);
B(B_VARIN,,350,9,5,11,7,);
B(B_VARIN,,CWp1MinCurValveB,9,6,11,8,);
B(B_VARIN,,CWp1MaxCurValveB,9,7,11,9,);
B(B_VARIN,,CWp1cur50liter,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value ludv section p1 for 100 l/min ,1,1,27,2,);
B(B_FB,CorrValue_UInt,CorrValue_UInt7,11,4,23,10,);
B(B_VARIN,,400,9,5,11,7,);
B(B_VARIN,,CWp1cur100liter,9,8,11,10,);
B(B_VARIN,,CWp1MinCurValveB,9,6,11,8,);
B(B_VARIN,,CWp1MaxCurValveB,9,7,11,9,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value ludv section p1 for 150 l/min ,1,1,27,2,);
B(B_FB,CorrValue_UInt,CorrValue_UInt8,11,4,23,10,);
B(B_VARIN,,485,9,5,11,7,);
B(B_VARIN,,CWp1cur150liter,9,8,11,10,);
B(B_VARIN,,CWp1MinCurValveB,9,6,11,8,);
B(B_VARIN,,CWp1MaxCurValveB,9,7,11,9,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value ludv section p1 for 200 l/min ,1,1,27,2,);
B(B_FB,CorrValue_UInt,CorrValue_UInt9,11,4,23,10,);
B(B_VARIN,,575,9,5,11,7,);
B(B_VARIN,,CWp1cur200liter,9,8,11,10,);
B(B_VARIN,,CWp1MinCurValveB,9,6,11,8,);
B(B_VARIN,,CWp1MaxCurValveB,9,7,11,9,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value ludv section p1 for 250 l/min ,1,1,27,2,);
B(B_FB,CorrValue_UInt,CorrValue_UInt10,11,4,23,10,);
B(B_VARIN,,660,9,5,11,7,);
B(B_VARIN,,CWp1cur250liter,9,8,11,10,);
B(B_VARIN,,CWp1MinCurValveB,9,6,11,8,);
B(B_VARIN,,CWp1MaxCurValveB,9,7,11,9,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value ludv section p1 for 300 l/min ,1,1,27,2,);
B(B_FB,CorrValue_UInt,CorrValue_UInt11,11,4,23,10,);
B(B_VARIN,,730,9,5,11,7,);
B(B_VARIN,,CWp1cur300liter,9,8,11,10,);
B(B_VARIN,,CWp1MinCurValveB,9,6,11,8,);
B(B_VARIN,,CWp1MaxCurValveB,9,7,11,9,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value minimum current ludv section p2 (B side),1,1,27,2,);
B(B_FB,CorrValue_UInt,CorrValue_UInt12,11,4,23,10,);
B(B_VARIN,,350,9,5,11,7,);
B(B_VARIN,,50,9,6,11,8,);
B(B_VARIN,,500,9,7,11,9,);
B(B_VARIN,,CWp2MinCurValveB,9,8,11,10,);
B(B_COMMENT,,main direction,25,3,35,4,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value maximum current ludv section p2 (B side),1,1,27,2,);
B(B_FB,CorrValue_UInt,CorrValue_UInt13,11,4,23,10,);
B(B_VARIN,,740,9,5,11,7,);
B(B_VARIN,,510,9,6,11,8,);
B(B_VARIN,,1000,9,7,11,9,);
B(B_VARIN,,CWp2MaxCurValveB,9,8,11,10,);
B(B_COMMENT,,main direction,25,3,35,4,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value minimum current ludv section p2 (A side),1,1,27,2,);
B(B_FB,CorrValue_UInt,CorrValue_UInt14,11,4,23,10,);
B(B_VARIN,,350,9,5,11,7,);
B(B_VARIN,,50,9,6,11,8,);
B(B_VARIN,,500,9,7,11,9,);
B(B_VARIN,,CWp2MinCurValveA,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value maximum current ludv section p2 (A side),1,1,27,2,);
B(B_FB,CorrValue_UInt,CorrValue_UInt15,11,4,23,10,);
B(B_VARIN,,740,9,5,11,7,);
B(B_VARIN,,510,9,6,11,8,);
B(B_VARIN,,1000,9,7,11,9,);
B(B_VARIN,,CWp2MaxCurValveA,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value ludv 2 section maximum value [l/min],1,1,27,2,);
B(B_FB,CorrValue_UInt,CorrValue_UInt16,11,4,23,10,);
B(B_VARIN,,300,9,5,11,7,);
B(B_VARIN,,0,9,6,11,8,);
B(B_VARIN,,900,9,7,11,9,);
B(B_VARIN,,CWp2MaxValue,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value ludv section p2 for 50 l/min ,1,1,27,2,);
B(B_FB,CorrValue_UInt,CorrValue_UInt17,11,4,23,10,);
B(B_VARIN,,350,9,5,11,7,);
B(B_VARIN,,CWp2cur50liter,9,8,11,10,);
B(B_VARIN,,CWp2MinCurValveB,9,6,11,8,);
B(B_VARIN,,CWp2MaxCurValveB,9,7,11,9,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value ludv section p2 for 100 l/min ,1,1,27,2,);
B(B_FB,CorrValue_UInt,CorrValue_UInt18,11,4,23,10,);
B(B_VARIN,,400,9,5,11,7,);
B(B_VARIN,,CWp2cur100liter,9,8,11,10,);
B(B_VARIN,,CWp2MinCurValveB,9,6,11,8,);
B(B_VARIN,,CWp2MaxCurValveB,9,7,11,9,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value ludv section p2 for 150 l/min ,1,1,27,2,);
B(B_FB,CorrValue_UInt,CorrValue_UInt19,11,4,23,10,);
B(B_VARIN,,485,9,5,11,7,);
B(B_VARIN,,CWp2cur150liter,9,8,11,10,);
B(B_VARIN,,CWp2MinCurValveB,9,6,11,8,);
B(B_VARIN,,CWp2MaxCurValveB,9,7,11,9,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value ludv section p2 for 200 l/min ,1,1,27,2,);
B(B_FB,CorrValue_UInt,CorrValue_UInt20,11,4,23,10,);
B(B_VARIN,,575,9,5,11,7,);
B(B_VARIN,,CWp2cur200liter,9,8,11,10,);
B(B_VARIN,,CWp2MinCurValveB,9,6,11,8,);
B(B_VARIN,,CWp2MaxCurValveB,9,7,11,9,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value ludv section p2 for 250 l/min ,1,1,27,2,);
B(B_FB,CorrValue_UInt,CorrValue_UInt21,11,4,23,10,);
B(B_VARIN,,660,9,5,11,7,);
B(B_VARIN,,CWp2cur250liter,9,8,11,10,);
B(B_VARIN,,CWp2MinCurValveB,9,6,11,8,);
B(B_VARIN,,CWp2MaxCurValveB,9,7,11,9,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value ludv section p2 for 300 l/min ,1,1,27,2,);
B(B_FB,CorrValue_UInt,CorrValue_UInt22,11,4,23,10,);
B(B_VARIN,,730,9,5,11,7,);
B(B_VARIN,,CWp2cur300liter,9,8,11,10,);
B(B_VARIN,,CWp2MinCurValveB,9,6,11,8,);
B(B_VARIN,,CWp2MaxCurValveB,9,7,11,9,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_COMMENT,,correction value engine speed for pump reduction [U/min],1,1,27,2,);
B(B_FB,CorrValue_Real,CorrValue_Real1,11,3,23,9,);
B(B_VARIN,,CDengSpPumpRed,9,7,11,9,);
B(B_VARIN,,1500.0,9,4,11,6,);
B(B_VARIN,,900.0,9,5,11,7,);
B(B_VARIN,,2000.0,9,6,11,8,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_COMMENT,,correction value range of crane inclination threshold [°] ,1,1,27,2,);
B(B_FB,CorrValue_Real,CorrValue_Real2,11,3,23,9,);
B(B_VARIN,,CDinclSwOffRange,9,7,11,9,);
B(B_VARIN,,5.0,9,4,11,6,);
B(B_VARIN,,0.1,9,5,11,7,);
B(B_VARIN,,20.0,9,6,11,8,);
        END_NETWORK_BODY
    END_NET_WORK
END_BODY
END_PROGRAM

PROGRAM GPgeoProgV010
	VAR_EXTERNAL 
		IDsgCounter: DINT:=0;
			(*counter slewing gear*)
		MXlgAnalSigPos: BOOL:=FALSE;
			(*lg analog signal positiv*)
		MXlgAnalSigNeg: BOOL:=FALSE;
			(*lg analog signal negativ*)
		MXlg2AnalSigPos: BOOL:=FALSE;
			(*lg 2 analog signal positiv*)
		MXlg2AnalSigNeg: BOOL:=FALSE;
			(*lg 2 analog signal negativ*)
		MXsgAnalSigPos: BOOL:=FALSE;
			(*sg analog signal positiv*)
		MXsgAnalSigNeg: BOOL:=FALSE;
			(*sg analog signal negativ*)
		MXstopByHigLimMb: BOOL:=FALSE;
			(*stop main boom up by hight limitaion*)
		MXstopByHigLimLj: BOOL:=FALSE;
			(*stop luffing jib up by hight limitaion*)
		MXstopByRadLimMb: BOOL:=FALSE;
			(*stop main boom down by radius limitaion*)
		MXstopByRadLimLj: BOOL:=FALSE;
			(*stop luffing jib down by radius limitaion*)
		MXwalLgMin: BOOL:=FALSE;
			(*wal stop lg minimum radius*)
		MXwalLgMax: BOOL:=FALSE;
			(*wal stop lg maximum radius*)
		MXwalLg2Min: BOOL:=FALSE;
			(*wal stop lg2 minimum radius*)
		MXwalLg2Max: BOOL:=FALSE;
			(*wal stop lg2 maximum radius*)
		MXwalSgStopLeft: BOOL:=FALSE;
			(*wal stop sg left*)
		MXwalSgStopRight: BOOL:=FALSE;
			(*wal stop sg right*)
		MXlmlErrGeometri: BOOL:=FALSE;
			(*lml error geometrical sensors*)
		MXwalCheckSgSen: BOOL:=FALSE;
			(*wal check sg angle sensor*)
		MXsgAngSenError: BOOL:=FALSE;
			(*sg angle sensor error*)
		MDdeltaTime: REAL:=0.001;
			(*time to the last scan in sec.*)
		MDlmlAngleBoom: REAL:=0.0;
			(*lml angle main boom in °*)
		MDlmlAngleLufJib: REAL:=0.0;
			(*lml angle luffing jib in °*)
		MDlmlAngBoomDown: REAL:=0.0;
			(*lower angle of the main boom*)
		MDlmlAngLuJiDown: REAL:=0.0;
			(*lower angle of the luffing jib*)
		MDlmlLenMainBoom: REAL:=0.0;
			(*lml length main boom [m]*)
		MDlmlLenJib: REAL:=0.0;
			(*lml length jib [m]*)
		MRwalMaxRadius: REAL:=0.00;
			(*wal maximum radius of the machine*)
		MDlmlRadiusMBoom: REAL:=0.0;
			(*lml load radius in main boom [m]*)
		MDlmlRadiusLJib: REAL:=0.0;
			(*lml load radius in luffing jib [m]*)
		MDsgAngle: REAL:=0.0;
			(*sg angle in degree*)
		MDlgPumpSignal: REAL:=0.0;
			(*luffing gear analog signal pump in [%]*)
		MDlg2PumpSignal: REAL:=0.0;
			(*luffing gear 2 analog signal pump in [%]*)
		MDsgPumpSignal: REAL:=0.0;
			(*slewing gear analog signal pump in [%]*)
		MDderrPumpSignal: REAL:=0.0;
			(*derrick winch analog signal*)
		MDlgIntTime: REAL:=0.0;
			(*luffing gear 1 integrator time down*)
		MDlg2IntTime: REAL:=0.0;
			(*luffing gear 2 integrator time down*)
		MRwalLi1Int1AngM: REAL:=0.00;
			(*wal main boom sg angle border line 1 intersection 1 max radius*)
		MRwalLi1Int2AngM: REAL:=0.00;
			(*wal main boom sg angle border line 1  intersection 2 max radius*)
		MRwalLi2Int1AngM: REAL:=0.00;
			(*wal main boom sg angle border line 2  intersection 1 max radius*)
		MRwalLi2Int2AngM: REAL:=0.00;
			(*wal main boom sg angle border line 2  intersection 2 max radius*)
		MRwalLi1Int1AngJ: REAL:=0.00;
			(*wal luffing jib sg angle border line 1  intersection 1 max radius*)
		MRwalLi1Int2AngJ: REAL:=0.00;
			(*wal luffing jib sg angle border line 1  intersection 2  max radius*)
		MRwalLi2Int1AngJ: REAL:=0.00;
			(*wal luffing jib sg angle border line 2  intersection 1 max radius*)
		MRwalLi2Int2AngJ: REAL:=0.00;
			(*wal luffing jib sg angle border line 2  intersection 2 max radius*)
		MRwalStDisMaBoLg: REAL:=0.0;
			(*wal main boom horizontal stop distance by luffing gear*)
		MRwalStDisJibLg2: REAL:=0.0;
			(*wal luffing jib horizontal stop distance by luffing gear 2*)
		MRwalStopAngSlew: REAL:=0.0;
			(*wal stop angle by slewing gear*)
		MRwalDistToStop: REAL:=0.0;
			(*wal distance to collision stop*)
	END_VAR
	VAR_EXTERNAL CONSTANT
		PI: REAL:=3.141592653;
	END_VAR
	VAR_EXTERNAL RETAIN
		MXwalRadMaBoAct: BOOL:=FALSE;
			(*wal radius limitation main boom activated*)
		MXwalRadLJibAct: BOOL:=FALSE;
			(*wal radius limitation luffing jib activated*)
		MXwalHigMaBoAct: BOOL:=FALSE;
			(*wal hight limitation main boom activated*)
		MXwalHigLJibAct: BOOL:=FALSE;
			(*wal hight limitation luffing jib activated*)
		MXwalLinMaBoAct: BOOL:=FALSE;
			(*wal line limitation main boom activated*)
		MXwalLinLuJiAct: BOOL:=FALSE;
			(*wal line limitation luffing jib activated*)
		MXwalSecMaBoAct: BOOL:=FALSE;
			(*wal sector limitation main boom activated*)
		MXwalSecLuJiAct: BOOL:=FALSE;
			(*wal sector limitation luffing jib activated*)
		MXwalSlewAct: BOOL:=FALSE;
			(*wal sg limitation activated*)
		MXsgLimitation: BOOL:=FALSE;
			(*sg limitaion enabled*)
		MDradiusLimitMaB: REAL:=0.0;
			(*radius limitation main boom [m]*)
		MDradiusLimitJib: REAL:=0.0;
			(*radius limitation luffing Jib [m]*)
		MDhightLimitMaB: REAL:=0.0;
			(*hight limitation main boom [m]*)
		MDhightLimitJib: REAL:=0.0;
			(*hight limitation luffing Jib [m]*)
		MDsgLimitLeft: REAL:=0.0;
			(*sg limit left angle in degree*)
		MDsgLimitRight: REAL:=0.0;
			(*sg limit right angle in degree*)
		MRwalLine1P1RadM: REAL:=0.0;
			(*wal line 1 point 1 radius main boom*)
		MRwalLine1P1AngM: REAL:=0.0;
			(*wal line 1 point 1 angle main boom*)
		MRwalLine1P2RadM: REAL:=0.0;
			(*wal line 1 point 2 radius main boom*)
		MRwalLine1P2AngM: REAL:=0.0;
			(*wal line 1 point 2 angle main boom*)
		MRwalLine2P1RadM: REAL:=0.0;
			(*wal line 2 point 1 radius main boom*)
		MRwalLine2P1AngM: REAL:=0.0;
			(*wal line 2 point 1 angle main boom*)
		MRwalLine2P2RadM: REAL:=0.0;
			(*wal line 2 point 2 radius main boom*)
		MRwalLine2P2AngM: REAL:=0.0;
			(*wal line 2 point 2 angle main boom*)
		MRwalLine1P1RadJ: REAL:=0.0;
			(*wal line 1 point 1 radius main boom*)
		MRwalLine1P1AngJ: REAL:=0.0;
			(*wal line 1 point 1 angle main boom*)
		MRwalLine1P2RadJ: REAL:=0.0;
			(*wal line 1 point 2 radius main boom*)
		MRwalLine1P2AngJ: REAL:=0.0;
			(*wal line 1 point 2 angle main boom*)
		MRwalLine2P1RadJ: REAL:=0.0;
			(*wal line 2 point 1 radius main boom*)
		MRwalLine2P1AngJ: REAL:=0.0;
			(*wal line 2 point 1 angle main boom*)
		MRwalLine2P2RadJ: REAL:=0.0;
			(*wal line 2 point 2 radius main boom*)
		MRwalLine2P2AngJ: REAL:=0.0;
			(*wal line 2 point 2 angle main boom*)
		MRwalSect1P1RadM: REAL:=0.0;
			(*wal sector 1 point 1 radius main boom*)
		MRwalSect1P1AngM: REAL:=0.0;
			(*wal sector 1 point 1 angle main boom*)
		MRwalSect1P2RadM: REAL:=0.0;
			(*wal sector 1 point 2 radius main boom*)
		MRwalSect1P2AngM: REAL:=0.0;
			(*wal sector 1 point 2 angle main boom*)
		MRwalSect1P3RadM: REAL:=0.0;
			(*wal sector 1 point 3 radius main boom*)
		MRwalSect1P3AngM: REAL:=0.0;
			(*wal sector 1 point 3 angle main boom*)
		MRwalSect1P1RadJ: REAL:=0.0;
			(*wal sector 1 point 1 radius luffing jib*)
		MRwalSect1P1AngJ: REAL:=0.0;
			(*wal sector 1 point 1 angle luffing jib*)
		MRwalSect1P2RadJ: REAL:=0.0;
			(*wal sector 1 point 2 radius luffing jib*)
		MRwalSect1P2AngJ: REAL:=0.0;
			(*wal sector 1 point 2 angle luffing jib*)
		MRwalSect1P3RadJ: REAL:=0.0;
			(*wal sector 1 point 3 radius luffing jib*)
		MRwalSect1P3AngJ: REAL:=0.0;
			(*wal sector 1 point 3 angle luffing jib*)
	END_VAR
	VAR_EXTERNAL CONSTANT RETAIN
		CXwalPresel: BOOL:=FALSE;
			(*ad work area limitation active*)
		CDsgIntTimeDn: REAL:=0.0;
			(*slewing gear integrator time down*)
		CDsgmidStopSpe: REAL:=0.0;
			(*sg middle stop speed calulation depending on max speed*)
	END_VAR
	VAR 
		LXinitOk: BOOL:=FALSE;
		LXsgTurnsRight: BOOL:=FALSE;
		LXsgTurnsLeft: BOOL:=FALSE;
		LXsgLimStopLeft: BOOL:=FALSE;
		LXsgMbLin1StopLe: BOOL:=FALSE;
		LXsgMbLin2StopLe: BOOL:=FALSE;
		LXsgLjLin1StopLe: BOOL:=FALSE;
		LXsgLjLin2StopLe: BOOL:=FALSE;
		LXsgMbSectStopLe: BOOL:=FALSE;
		LXsgLjSectStopLe: BOOL:=FALSE;
		LXsgLimStopRight: BOOL:=FALSE;
		LXsgMbLin1StopRi: BOOL:=FALSE;
		LXsgMbLin2StopRi: BOOL:=FALSE;
		LXsgLjLin1StopRi: BOOL:=FALSE;
		LXsgLjLin2StopRi: BOOL:=FALSE;
		LXsgMbSectStopRi: BOOL:=FALSE;
		LXsgLjSectStopRi: BOOL:=FALSE;
		LXlgStopDnByRaL: BOOL:=FALSE;
		LXlg2StopDnByRaL: BOOL:=FALSE;
		LXlgStopUpByRaL: BOOL:=FALSE;
		LXlg2StopUpByRaL: BOOL:=FALSE;
		LXmaBoStopLine1: BOOL:=FALSE;
		LXmaBoStopLine2: BOOL:=FALSE;
		LXmaBoStopSect: BOOL:=FALSE;
		LXluJiStopLine1: BOOL:=FALSE;
		LXluJiStopLine2: BOOL:=FALSE;
		LXluJiStopSect: BOOL:=FALSE;
		LRAngleMaBoLaSc: REAL:=0.0;
		LRAngleLuJiLaSc: REAL:=0.0;
		LRangSpeedMaBo: REAL:=0.0;
		LRangSpeedLuJi: REAL:=0.0;
		LRangSpeedSlew: REAL:=0.0;
		LRangSpeUnfilt: REAL:=0.0;
		LRhorizSpeedMaBo: REAL:=0.0;
		LRhorizSpeedLuJi: REAL:=0.0;
		LRstopRadMaBo: REAL:=0.0;
		LRstopRadJib: REAL:=0.0;
		LRstopAngleSg: REAL:=0.0;
		LRdistCoLgMinMB: REAL:=0.0;
		LRdistCoLgMaxMB: REAL:=0.0;
		LRdistCollSg: REAL:=0.0;
		LRdistCoLgMinLJ: REAL:=0.0;
		LRdistCoLgMaxLJ: REAL:=0.0;
		LRdistCollLin1MB: REAL:=0.0;
		LRdistCollLin2MB: REAL:=0.0;
		LRdistCollLin1LJ: REAL:=0.0;
		LRdistCollLin2LJ: REAL:=0.0;
		LRdistCollSectMB: REAL:=0.0;
		LRdistCollSectLJ: REAL:=0.0;
		LRsgLimDistToSt: REAL:=0.0;
		LRradLimDistToSt: REAL:=0.0;
		LRlinLimDistToSt: REAL:=0.0;
		LRsecLimDistToSt: REAL:=0.0;
		LDsgCounterLaSc1: DINT:=0;
		LDsgCounterLaSc2: DINT:=0;
		SR1: SR;
		SR2: SR;
		SR3: SR;
		SR4: SR;
		SR5: SR;
		SR6: SR;
		GPfilter10_1: GPfilter10V020;
		GeoRadSlew1: GPgeoRadSlewV010;
		GeoRadSlew2: GPgeoRadSlewV010;
		GPgeoLine1: GPgeoLineV010;
		GPgeoLine2: GPgeoLineV010;
		GPgeoLine3: GPgeoLineV010;
		GPgeoLine4: GPgeoLineV010;
		GPgeoSect1: GPgeoSectorV010;
		GPgeoSect2: GPgeoSectorV010;
		CorrValue_Bool1: CorrValue_Bool;
		CorrValue_Real1: CorrValue_Real;
	END_VAR
'FBD'
BODY
    WORKSPACE
        NETWORK_LIST_TYPE := NWTYPEFBD ;
        ACTIVE_NETWORK := 0 ;
    END_WORKSPACE
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_VARIN,,LXinitOk,9,4,11,6,);
B(B_COMMENT,,init first time,1,1,27,2,);
B(B_F,not,,11,3,16,6,);
B(B_JUMP,,init,16,4,18,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_RETURN,,,11,3,13,5,N);
B(B_VARIN,,CXwalPresel,9,3,11,5,);
B(B_COMMENT,,exit program when not enabled,1,1,27,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,check sg angle sensor,1,1,27,2,);
B(B_VARIN,,MXwalLinMaBoAct,9,4,11,6,);
B(B_VARIN,,MXwalSecMaBoAct,9,5,11,7,);
B(B_VARIN,,MXwalSlewAct,9,8,11,10,);
B(B_VARIN,,MXwalLinLuJiAct,9,6,11,8,);
B(B_VARIN,,MXwalSecLuJiAct,9,7,11,9,);
B(B_F,@OR-5,,11,3,16,10,);
B(B_VAROUT,,MXwalCheckSgSen,16,4,18,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_VARIN,,MDlmlAngBoomDown,9,5,11,7,);
B(B_VARIN,,LRAngleMaBoLaSc,9,6,11,8,);
B(B_F,@SUB,,11,4,16,8,);
B(B_F,@MUL-2,,16,4,21,8,);
B(B_F,@DIV,,21,4,26,8,);
B(B_VARIN,,PI,14,8,16,10,);
B(B_VARIN,,180.0,19,8,21,10,);
B(B_F,@DIV,,26,4,31,8,);
B(B_VARIN,,MDdeltaTime,24,9,26,11,);
B(B_COMMENT,,Winkelunterschiedø^zum letzten Durchlaufø^°/scan,3,8,12,11,);
B(B_COMMENT,,Umrechnung inø^rad / scan,13,10,20,12,);
B(B_COMMENT,,rad / s,27,3,31,4,);
B(B_COMMENT,,precalculation of the stop point main boom radius,1,1,27,2,);
B(B_VAROUT,,LRangSpeedMaBo,31,5,33,7,);
L(16,7,16,9);
L(21,7,21,9);
L(26,7,26,10);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_F,@MUL-2,,11,1,16,5,);
B(B_VARIN,,LRangSpeedMaBo,9,2,11,4,);
B(B_VARIN,,MDlmlLenMainBoom,9,3,11,5,);
B(B_F,@MUL-2,,16,1,21,5,);
B(B_VAROUT,,LRhorizSpeedMaBo,21,2,23,4,);
B(B_F,sin,,11,5,16,8,);
B(B_VARIN,,MDlmlAngleBoom,9,6,11,8,);
B(B_COMMENT,,Projection der Winkelgeschwindigkeitø^auf die Horizontale -> Radiusveränderungø^rad/s * m * sin alpha = m/s,17,5,33,8,);
L(16,4,16,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_VARIN,,LRhorizSpeedMaBo,9,2,11,4,);
B(B_F,@DIV,,11,1,16,5,);
B(B_VARIN,,1.5,9,3,11,5,);
B(B_F,@DIV,,11,5,16,9,);
B(B_VARIN,,MDlgIntTime,9,7,11,9,);
B(B_VARIN,,MDlgPumpSignal,9,6,11,8,);
B(B_F,@MUL-2,,16,1,21,5,);
B(B_VAROUT,,MRwalStDisMaBoLg,21,2,23,4,);
B(B_COMMENT,,aktueller Anhalteweg s:ø^s = (v/2) * (Sig/CDint),17,5,27,7,);
B(B_COMMENT,,Hier wird als Durchschnittsgeschwindigkeit zum stoppen nicht v / 2 genommen~ø^sondern v / 1~5 (dies wurde auch in der Messung so nachvollzogen),32,2,61,4,);
B(B_COMMENT,,Grund: Bei theoretisch linearem Abbremsen müsste die halbe Geschwindigkeitø^als Durchschnittsgeschwindigkeit angenommen werden.,32,5,61,7,);
B(B_COMMENT,,In der Praxis muß aber das System zunächst reagieren~ der tatsächlicheø^Abbremsvorgang ist nicht linear.,32,7,61,9,);
L(16,4,16,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 14 ;
        NETWORK_BODY
B(B_F,@ADD-2,,13,5,18,9,);
B(B_VARIN,,MRwalStDisMaBoLg,9,7,11,9,);
B(B_VARIN,,MDlmlRadiusMBoom,10,6,12,8,);
B(B_F,@SUB,,13,9,18,13,);
B(B_F,sel,,18,4,23,9,);
B(B_F,limit,,23,3,29,8,);
B(B_VAROUT,,LRstopRadMaBo,29,4,31,6,);
B(B_VARIN,,1.0,21,3,23,5,);
B(B_VARIN,,0.0,11,3,13,5,);
B(B_F,@GT-2,,13,1,18,5,);
B(B_VARIN,,LRhorizSpeedMaBo,11,2,13,4,);
L(12,7,12,11);
L(12,11,13,11);
L(11,12,13,12);
L(11,8,11,12);
L(11,8,13,8);
L(12,7,13,7);
L(18,8,18,11);
L(23,6,23,7);
L(23,4,23,5);
L(18,3,18,6);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 19 ;
        NETWORK_BODY
B(B_VARIN,,MDlmlAngLuJiDown,9,5,11,7,);
B(B_VARIN,,LRAngleLuJiLaSc,9,6,11,8,);
B(B_F,@SUB,,11,4,16,8,);
B(B_COMMENT,,Winkelunterschiedø^zum letzten Durchlaufø^°/scan,3,8,12,11,);
B(B_COMMENT,,precalculation of the stop point luffing jib radius,1,1,27,2,);
B(B_F,@SUB,,16,4,21,8,);
B(B_F,@MUL-2,,21,4,26,8,);
B(B_F,@DIV,,26,4,31,8,);
B(B_VARIN,,PI,19,8,21,10,);
B(B_VARIN,,180.0,24,8,26,10,);
B(B_F,@DIV,,31,4,36,8,);
B(B_VARIN,,MDdeltaTime,29,9,31,11,);
B(B_COMMENT,,Umrechnung inø^rad / scan,18,10,25,12,);
B(B_COMMENT,,rad / s,32,3,36,4,);
B(B_VAROUT,,LRangSpeedLuJi,36,5,38,7,);
B(B_VARIN,,MDlmlAngBoomDown,9,12,11,14,);
B(B_VARIN,,LRAngleMaBoLaSc,9,13,11,15,);
B(B_F,@SUB,,11,11,16,15,);
B(B_COMMENT,,Der Winkelunterschied des Hauptauslegers wird abgezogen~ø^um die reine Winkelgeschwindigkeit der Wippe zu berechnen,3,15,27,17,);
L(21,7,21,9);
L(26,7,26,9);
L(31,7,31,10);
L(16,7,16,13);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_F,@MUL-2,,11,1,16,5,);
B(B_VARIN,,LRangSpeedLuJi,9,2,11,4,);
B(B_VARIN,,MDlmlLenJib,9,3,11,5,);
B(B_F,@MUL-2,,16,1,21,5,);
B(B_F,sin,,11,5,16,8,);
B(B_VARIN,,MDlmlAngleLufJib,9,6,11,8,);
B(B_VAROUT,,LRhorizSpeedLuJi,21,2,23,4,);
B(B_COMMENT,,Projection der Winkelgeschwindigkeitø^auf die Horizontale -> Radiusveränderungø^rad/s * m * sin alpha = m/s,17,5,33,8,);
L(16,4,16,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_VARIN,,LRhorizSpeedLuJi,9,2,11,4,);
B(B_F,@DIV,,11,1,16,5,);
B(B_VARIN,,1.5,9,3,11,5,);
B(B_F,@MUL-2,,16,1,21,5,);
B(B_F,@DIV,,11,5,16,9,);
B(B_VARIN,,MDlg2IntTime,9,7,11,9,);
B(B_VARIN,,MDlg2PumpSignal,9,6,11,8,);
B(B_F,@ADD-2,,32,1,37,5,);
B(B_VAROUT,,MRwalStDisJibLg2,37,2,39,4,);
B(B_COMMENT,,aktueller Anhalteweg s:ø^s = (v/2) * (Sig/CDint),17,5,27,7,);
B(B_VARIN,,MRwalStDisMaBoLg,30,3,32,5,);
B(B_COMMENT,,Anhalteweg des Hauptauslegers mußø^zu jenem der Wippe dazuaddiert werdenø^um den absoluten Anhalteweg zu erhalten.,28,5,45,8,);
B(B_COMMENT,,Hier wird als Durchschnittsgeschwindigkeit zum stoppen nicht v / 2 genommen~ø^sondern v / 1~5 (dies wurde auch in der Messung so nachvollzogen),48,2,79,4,);
B(B_COMMENT,,Grund: Bei theoretisch linearem Abbremsen müsste die halbe Geschwindigkeitø^als Durchschnittsgeschwindigkeit angenommen werden.,48,5,79,7,);
B(B_COMMENT,,In der Praxis muß aber das System zunächst reagieren~ der tatsächlicheø^Abbremsvorgang ist nicht linear.,48,7,79,9,);
L(16,4,16,7);
L(21,3,32,3);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 17 ;
        NETWORK_BODY
B(B_F,@ADD-2,,16,8,21,12,);
B(B_VARIN,,MRwalStDisJibLg2,12,10,14,12,);
B(B_VARIN,,MDlmlRadiusLJib,13,9,15,11,);
B(B_F,@SUB,,16,12,21,16,);
B(B_F,sel,,21,7,26,12,);
B(B_F,limit,,26,5,32,10,);
B(B_VARIN,,1.0,24,6,26,8,);
B(B_VAROUT,,LRstopRadJib,32,6,34,8,);
B(B_F,@GT-2,,16,4,21,8,);
B(B_F,@ADD-2,,11,4,16,8,);
B(B_VARIN,,LRhorizSpeedMaBo,9,6,11,8,);
B(B_VARIN,,0.0,14,8,16,10,);
B(B_VARIN,,LRhorizSpeedLuJi,9,5,11,7,);
B(B_COMMENT,,Zur reinen Horizontalgeschwindigkeit der Wippspitze mußø^jene des Hauptauslegers dazuaddiert werden~ um dieø^Richtung der absoluten Horizontalgeschwindigkeit zu erhalten.,8,1,32,4,);
L(15,10,16,10);
L(14,11,16,11);
L(14,11,14,15);
L(14,15,16,15);
L(15,14,16,14);
L(15,10,15,14);
L(21,11,21,14);
L(26,8,26,9);
L(21,6,21,9);
L(16,7,16,9);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 14 ;
        NETWORK_BODY
B(B_COMMENT,,precalculation of the stop point slewing gear,1,1,27,2,);
B(B_VARIN,,IDsgCounter,9,7,11,9,);
B(B_VARIN,,LDsgCounterLaSc2,9,8,11,10,);
B(B_F,@SUB,,11,6,16,10,);
B(B_F,dint_to_real,,16,6,27,9,);
B(B_F,@DIV,,27,6,32,10,);
B(B_VARIN,,2.0,25,9,27,11,);
B(B_F,@DIV,,32,6,37,10,);
B(B_F,@DIV,,37,6,42,10,);
B(B_COMMENT,,° / s,38,5,41,6,);
B(B_VARIN,,MDdeltaTime,35,11,37,13,);
B(B_VARIN,,40.0,30,10,32,12,);
B(B_COMMENT,,Flanken/2 scan,17,5,24,6,);
B(B_COMMENT,,°/scan,33,3,38,4,);
B(B_COMMENT,,Flanken/scan,28,5,34,6,);
B(B_FB,GPfilter10V020,GPfilter10_1,47,6,61,11,);
B(B_VARIN,,4,45,9,47,11,);
B(B_VARIN,,0.0,45,8,47,10,);
B(B_VAROUT,,LRangSpeedSlew,61,7,63,9,);
B(B_COMMENT,,Die Auflösung des Drehwinkelgebers (inc) ist 0~1°ø^Wenn langsam gefahren wird~ dann ist die berechnete Drehwerksgeschwindigkeitø^mehrere Durchläufe 0. Dann einen Durchlauf 4.,72,1,104,4,);
B(B_COMMENT,,Bei so langsamer DW-Fahrt ist auch der Stopweg minimal.ø^,72,4,104,5,);
B(B_COMMENT,,Die Geschwindigkeit wird direkt aus dem Incrementalgebersignal herausgerechnetø^damit hier über 4 Zyklen gemittelt werden kann. Der Winkelwert kann nicht gefiltert werden~ø^da der 0/360° Sprung ebenfalls gefiltert würde.,72,6,106,9,);
B(B_COMMENT,,Die Geschwindigkeitsberechunung wird über zwei Durchläuft gemacht~ø^somit werden Sprünge flacher,72,9,104,11,);
B(B_COMMENT,,Die Geschwindigkeitsberechnung wird über vier durchläufe gemittelt,72,12,99,13,);
B(B_VAROUT,,LRangSpeUnfilt,43,4,45,6,);
L(27,9,27,10);
L(37,9,37,12);
L(32,9,32,11);
L(42,8,47,8);
L(43,5,43,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_COMMENT,,set actual sg direction,1,1,27,2,);
B(B_F,@GT-2,,13,3,18,7,);
B(B_F,@LT-2,,13,7,18,11,);
B(B_VARIN,,LRangSpeedSlew,10,4,12,6,);
B(B_VARIN,,0.0,9,5,11,7,);
B(B_VAROUT,,LXsgTurnsRight,18,4,20,6,);
B(B_VAROUT,,LXsgTurnsLeft,18,8,20,10,);
L(12,5,13,5);
L(12,5,12,9);
L(12,9,13,9);
L(11,6,13,6);
L(11,10,13,10);
L(11,6,11,10);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_VARIN,,LRangSpeedSlew,9,2,11,4,);
B(B_F,@DIV,,11,1,16,5,);
B(B_VARIN,,CDsgmidStopSpe,9,3,11,5,);
B(B_F,@MUL-2,,16,1,21,5,);
B(B_COMMENT,,aktueller Anhalteweg phi:ø^s = (v/2) * (Sig/CDint),17,7,27,9,);
B(B_F,abs,,21,1,26,4,);
B(B_VARIN,,0.5,24,4,26,6,);
B(B_F,@ADD-2,,26,1,31,5,);
B(B_VAROUT,,MRwalStopAngSlew,31,2,33,4,);
B(B_F,@DIV,,11,5,16,9,);
B(B_VARIN,,CDsgIntTimeDn,9,7,11,9,);
B(B_VARIN,,MDsgPumpSignal,9,6,11,8,);
B(B_COMMENT,,Hier wird als Durchschnittsgeschwindigkeit zum stoppen nicht v / 2 genommen~ø^sondern v / CDsgmidStopSpe (die mittlere Bremsgeschwindigkeit ist vom Schieberø^abhängig und wurde deshalb als Korrekturwert ausgeführt,46,2,78,5,);
B(B_COMMENT,,Grund: Bei theoretisch linearem Abbremsen müsste die halbe Geschwindigkeitø^als Durchschnittsgeschwindigkeit angenommen werden.,46,5,78,7,);
B(B_COMMENT,,In der Praxis muß aber das System zunächst reagieren~ der tatsächlicheø^Abbremsvorgang ist nicht linear.,46,7,78,9,);
B(B_COMMENT,,0.5° werden als Sicherheitsreserveø^dazuaddiert (bei Messungen ermitteltø^wegen Bremsverzögerung usw.),28,5,43,8,);
L(16,4,16,7);
L(26,4,26,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 14 ;
        NETWORK_BODY
B(B_F,@ADD-2,,13,5,18,9,);
B(B_F,@SUB,,13,9,18,13,);
B(B_VARIN,,MRwalStopAngSlew,9,7,11,9,);
B(B_VARIN,,MDsgAngle,10,6,12,8,);
B(B_F,sel,,18,4,23,9,);
B(B_F,@LT-2,,13,1,18,5,);
B(B_VARIN,,LRangSpeedSlew,11,2,13,4,);
B(B_VARIN,,0.0,11,3,13,5,);
B(B_VAROUT,,LRstopAngleSg,23,5,25,7,);
L(12,7,13,7);
L(12,7,12,11);
L(12,11,13,11);
L(11,8,13,8);
L(11,8,11,12);
L(11,12,13,12);
L(18,8,18,11);
L(18,3,18,6);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 5 ;
        NETWORK_BODY
B(B_COMMENT,,set values for next scan,1,1,27,2,);
B(B_VARIN,,MDlmlAngBoomDown,9,3,11,5,);
B(B_VAROUT,,LRAngleMaBoLaSc,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VAROUT,,LRAngleLuJiLaSc,11,1,13,3,);
B(B_VARIN,,MDlmlAngLuJiDown,9,1,11,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VAROUT,,LDsgCounterLaSc2,11,1,13,3,);
B(B_VARIN,,LDsgCounterLaSc1,9,1,11,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VAROUT,,LDsgCounterLaSc1,11,1,13,3,);
B(B_VARIN,,IDsgCounter,9,1,11,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 16 ;
        NETWORK_BODY
B(B_VARIN,,MDhightLimitMaB,28,6,30,8,);
B(B_COMMENT,,distance for radius and slewing limitation,1,1,27,2,);
B(B_VARIN,,LRstopRadMaBo,28,4,30,6,);
B(B_F,@SUB,,11,11,16,15,);
B(B_VARIN,,90.0,9,12,11,14,);
B(B_VARIN,,MDsgLimitRight,9,13,11,15,);
B(B_F,@SUB,,11,7,16,11,);
B(B_VARIN,,90.0,9,8,11,10,);
B(B_VARIN,,MDsgLimitLeft,9,9,11,11,);
B(B_VARIN,,MDradiusLimitMaB,28,7,30,9,);
B(B_F,@SUB,,11,3,16,7,);
B(B_VARIN,,90.0,9,4,11,6,);
B(B_VARIN,,LRstopAngleSg,9,5,11,7,);
B(B_COMMENT,,Umrechnung vom Koordinatensystem des Gerätesø^ins Koordinatensystem der GeoLib,18,13,38,15,);
B(B_VAROUT,,LRdistCoLgMinMB,49,8,51,10,);
B(B_VAROUT,,LRdistCoLgMaxMB,49,9,51,11,);
B(B_VAROUT,,LRdistCollSg,49,10,51,12,);
B(B_FB,GPgeoRadSlewV010,GeoRadSlew1,30,3,49,12,);
B(B_VAROUT,,LXlgStopDnByRaL,49,5,51,7,);
B(B_VAROUT,,LXlgStopUpByRaL,49,4,51,6,);
B(B_VAROUT,,LXsgLimStopLeft,49,6,51,8,);
B(B_VAROUT,,LXsgLimStopRight,49,7,51,9,);
L(17,10,17,13);
L(17,10,30,10);
L(16,13,17,13);
L(16,9,30,9);
L(16,5,17,5);
L(17,5,17,6);
L(17,6,30,6);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_VARIN,,MDhightLimitJib,28,4,30,6,);
B(B_VARIN,,LRstopRadJib,28,2,30,4,);
B(B_VARIN,,MDradiusLimitJib,28,5,30,7,);
B(B_F,@SUB,,11,2,16,6,);
B(B_VARIN,,90.0,9,3,11,5,);
B(B_VARIN,,LRstopAngleSg,9,4,11,6,);
B(B_FB,GPgeoRadSlewV010,GeoRadSlew2,30,1,49,10,);
B(B_VAROUT,,LRdistCoLgMinLJ,49,6,51,8,);
B(B_VAROUT,,LRdistCoLgMaxLJ,49,7,51,9,);
B(B_VAROUT,,LXlg2StopUpByRaL,49,2,51,4,);
B(B_VAROUT,,LXlg2StopDnByRaL,49,3,51,5,);
L(16,4,30,4);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 15 ;
        NETWORK_BODY
B(B_VARIN,,MRwalLine1P1RadM,28,6,30,8,);
B(B_VARIN,,MRwalLine1P2RadM,28,8,30,10,);
B(B_VARIN,,MRwalMaxRadius,28,3,30,5,);
B(B_FB,GPgeoLineV010,GPgeoLine1,30,2,51,11,);
B(B_COMMENT,,line limitation main boom,1,1,27,2,);
B(B_VARIN,,LRstopRadMaBo,28,4,30,6,);
B(B_COMMENT,,Umrechnung vom Koordinatensystem des Gerätesø^ins Koordinatensystem der GeoLib,18,11,38,13,);
B(B_F,@SUB,,11,10,16,14,);
B(B_VARIN,,90.0,9,11,11,13,);
B(B_F,@SUB,,11,6,16,10,);
B(B_VARIN,,90.0,9,7,11,9,);
B(B_VARIN,,MRwalLine1P1AngM,9,8,11,10,);
B(B_VARIN,,MRwalLine1P2AngM,9,12,11,14,);
B(B_F,@SUB,,11,2,16,6,);
B(B_VARIN,,90.0,9,3,11,5,);
B(B_VARIN,,LRstopAngleSg,9,4,11,6,);
B(B_F,@SUB,,63,5,68,9,);
B(B_VARIN,,90.0,61,6,63,8,);
B(B_F,@SUB,,63,9,68,13,);
B(B_VARIN,,90.0,61,10,63,12,);
B(B_VAROUT,,MRwalLi1Int1AngM,68,6,70,8,);
B(B_VAROUT,,MRwalLi1Int2AngM,68,10,70,12,);
B(B_VAROUT,,LRdistCollLin1MB,51,6,53,8,);
B(B_VAROUT,,LXmaBoStopLine1,51,3,53,5,);
B(B_VAROUT,,LXsgMbLin1StopLe,51,4,53,6,);
B(B_VAROUT,,LXsgMbLin1StopRi,51,5,53,7,);
L(17,10,17,12);
L(17,10,30,10);
L(16,8,30,8);
L(16,12,17,12);
L(16,4,17,4);
L(17,4,17,6);
L(17,6,30,6);
L(51,8,63,8);
L(52,12,63,12);
L(52,9,52,12);
L(51,9,52,9);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 14 ;
        NETWORK_BODY
B(B_VARIN,,MRwalLine2P1RadM,28,5,30,7,);
B(B_VARIN,,MRwalLine2P2RadM,28,7,30,9,);
B(B_VARIN,,MRwalMaxRadius,28,2,30,4,);
B(B_FB,GPgeoLineV010,GPgeoLine2,30,1,51,10,);
B(B_COMMENT,,Umrechnung vom Koordinatensystem des Gerätesø^ins Koordinatensystem der GeoLib,18,10,38,12,);
B(B_VARIN,,LRstopRadMaBo,28,3,30,5,);
B(B_F,@SUB,,11,9,16,13,);
B(B_VARIN,,90.0,9,10,11,12,);
B(B_F,@SUB,,11,5,16,9,);
B(B_VARIN,,90.0,9,6,11,8,);
B(B_VARIN,,MRwalLine2P2AngM,9,11,11,13,);
B(B_VARIN,,MRwalLine2P1AngM,9,7,11,9,);
B(B_F,@SUB,,11,1,16,5,);
B(B_VARIN,,90.0,9,2,11,4,);
B(B_VARIN,,LRstopAngleSg,9,3,11,5,);
B(B_F,@SUB,,63,4,68,8,);
B(B_VARIN,,90.0,61,5,63,7,);
B(B_F,@SUB,,63,8,68,12,);
B(B_VARIN,,90.0,61,9,63,11,);
B(B_VAROUT,,MRwalLi2Int1AngM,68,5,70,7,);
B(B_VAROUT,,MRwalLi2Int2AngM,68,9,70,11,);
B(B_VAROUT,,LRdistCollLin2MB,51,5,53,7,);
B(B_VAROUT,,LXmaBoStopLine2,51,2,53,4,);
B(B_VAROUT,,LXsgMbLin2StopLe,51,3,53,5,);
B(B_VAROUT,,LXsgMbLin2StopRi,51,4,53,6,);
L(17,9,17,11);
L(17,9,30,9);
L(16,7,30,7);
L(16,11,17,11);
L(16,3,17,3);
L(17,3,17,5);
L(17,5,30,5);
L(51,7,63,7);
L(52,11,63,11);
L(52,8,52,11);
L(51,8,52,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 15 ;
        NETWORK_BODY
B(B_VARIN,,MRwalLine1P1RadJ,28,6,30,8,);
B(B_VARIN,,MRwalLine1P2RadJ,28,8,30,10,);
B(B_VARIN,,MRwalMaxRadius,28,3,30,5,);
B(B_COMMENT,,Umrechnung vom Koordinatensystem des Gerätesø^ins Koordinatensystem der GeoLib,17,11,37,13,);
B(B_FB,GPgeoLineV010,GPgeoLine3,30,2,51,11,);
B(B_COMMENT,,line limitation luffing jib,1,1,27,2,);
B(B_VARIN,,LRstopRadJib,28,4,30,6,);
B(B_F,@SUB,,10,10,15,14,);
B(B_VARIN,,90.0,8,11,10,13,);
B(B_F,@SUB,,10,6,15,10,);
B(B_VARIN,,90.0,8,7,10,9,);
B(B_VARIN,,MRwalLine1P1AngJ,8,8,10,10,);
B(B_VARIN,,MRwalLine1P2AngJ,8,12,10,14,);
B(B_F,@SUB,,10,2,15,6,);
B(B_VARIN,,90.0,8,3,10,5,);
B(B_VARIN,,LRstopAngleSg,8,4,10,6,);
B(B_F,@SUB,,63,5,68,9,);
B(B_VARIN,,90.0,61,6,63,8,);
B(B_F,@SUB,,63,9,68,13,);
B(B_VARIN,,90.0,61,10,63,12,);
B(B_VAROUT,,MRwalLi1Int1AngJ,68,6,70,8,);
B(B_VAROUT,,MRwalLi1Int2AngJ,68,10,70,12,);
B(B_VAROUT,,LRdistCollLin1LJ,51,6,53,8,);
B(B_VAROUT,,LXluJiStopLine1,51,3,53,5,);
B(B_VAROUT,,LXsgLjLin1StopRi,51,5,53,7,);
B(B_VAROUT,,LXsgLjLin1StopLe,51,4,53,6,);
L(16,10,16,12);
L(16,10,30,10);
L(15,8,30,8);
L(15,12,16,12);
L(15,4,16,4);
L(16,4,16,6);
L(16,6,30,6);
L(51,8,63,8);
L(52,12,63,12);
L(52,9,52,12);
L(51,9,52,9);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 14 ;
        NETWORK_BODY
B(B_VARIN,,MRwalLine2P1RadJ,28,5,30,7,);
B(B_VARIN,,MRwalLine2P2RadJ,28,7,30,9,);
B(B_VARIN,,MRwalMaxRadius,28,2,30,4,);
B(B_FB,GPgeoLineV010,GPgeoLine4,30,1,51,10,);
B(B_COMMENT,,Umrechnung vom Koordinatensystem des Gerätesø^ins Koordinatensystem der GeoLib,17,10,37,12,);
B(B_VARIN,,LRstopRadJib,28,3,30,5,);
B(B_F,@SUB,,10,9,15,13,);
B(B_VARIN,,90.0,8,10,10,12,);
B(B_F,@SUB,,10,5,15,9,);
B(B_VARIN,,90.0,8,6,10,8,);
B(B_VARIN,,MRwalLine2P2AngJ,8,11,10,13,);
B(B_VARIN,,MRwalLine2P1AngJ,8,7,10,9,);
B(B_F,@SUB,,10,1,15,5,);
B(B_VARIN,,LRstopAngleSg,8,3,10,5,);
B(B_VARIN,,90.0,8,2,10,4,);
B(B_F,@SUB,,63,4,68,8,);
B(B_VARIN,,90.0,61,5,63,7,);
B(B_F,@SUB,,63,8,68,12,);
B(B_VARIN,,90.0,61,9,63,11,);
B(B_VAROUT,,MRwalLi2Int1AngJ,68,5,70,7,);
B(B_VAROUT,,MRwalLi2Int2AngJ,68,9,70,11,);
B(B_VAROUT,,LRdistCollLin2LJ,51,5,53,7,);
B(B_VAROUT,,LXluJiStopLine2,51,2,53,4,);
B(B_VAROUT,,LXsgLjLin2StopRi,51,4,53,6,);
B(B_VAROUT,,LXsgLjLin2StopLe,51,3,53,5,);
L(16,9,16,11);
L(16,9,30,9);
L(15,7,30,7);
L(15,11,16,11);
L(15,3,16,3);
L(16,3,16,5);
L(16,5,30,5);
L(51,7,63,7);
L(52,11,63,11);
L(52,8,52,11);
L(51,8,52,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 25 ;
        NETWORK_BODY
B(B_VARIN,,MRwalSect1P1RadM,28,6,30,8,);
B(B_VARIN,,MRwalSect1P2RadM,28,8,30,10,);
B(B_VARIN,,MRwalSect1P3RadM,28,10,30,12,);
B(B_VARIN,,MRwalMaxRadius,28,3,30,5,);
B(B_VARIN,,LRstopRadMaBo,28,4,30,6,);
B(B_F,@SUB,,10,10,15,14,);
B(B_VARIN,,90.0,8,11,10,13,);
B(B_F,@SUB,,10,6,15,10,);
B(B_VARIN,,90.0,8,7,10,9,);
B(B_VARIN,,MRwalSect1P2AngM,8,12,10,14,);
B(B_VARIN,,MRwalSect1P1AngM,8,8,10,10,);
B(B_F,@SUB,,10,14,15,18,);
B(B_VARIN,,90.0,8,15,10,17,);
B(B_VARIN,,MRwalSect1P3AngM,8,16,10,18,);
B(B_F,@SUB,,10,2,15,6,);
B(B_VARIN,,90.0,8,3,10,5,);
B(B_VARIN,,LRstopAngleSg,8,4,10,6,);
B(B_VAROUT,,LXmaBoStopSect,48,3,50,5,);
B(B_VAROUT,,LRdistCollSectMB,48,6,50,8,);
B(B_VAROUT,,LXsgMbSectStopLe,48,4,50,6,);
B(B_VAROUT,,LXsgMbSectStopRi,48,5,50,7,);
B(B_VARIN,,LXsgTurnsRight,28,12,30,14,);
B(B_VARIN,,LXsgTurnsLeft,28,13,30,15,);
B(B_FB,GPgeoSectorV010,GPgeoSect1,30,2,48,17,);
B(B_COMMENT,,Umrechnung vom Koordinatensystem des Gerätesø^ins Koordinatensystem der GeoLib,2,18,22,20,);
B(B_F,@LT-2,,24,20,29,24,);
B(B_VARIN,,MDlgPumpSignal,22,21,24,23,);
B(B_VARIN,,0.0,22,22,24,24,);
B(B_VARIN,,MDsgAngle,26,15,28,17,);
L(16,10,16,12);
L(16,10,30,10);
L(15,8,30,8);
L(17,12,30,12);
L(17,12,17,16);
L(15,12,16,12);
L(15,16,17,16);
L(15,4,16,4);
L(16,4,16,6);
L(16,6,30,6);
L(29,15,30,15);
L(29,15,29,22);
L(28,16,30,16);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 25 ;
        NETWORK_BODY
B(B_VARIN,,MRwalSect1P1RadJ,28,6,30,8,);
B(B_VARIN,,MRwalSect1P2RadJ,28,8,30,10,);
B(B_VARIN,,MRwalSect1P3RadJ,28,10,30,12,);
B(B_VARIN,,MRwalMaxRadius,28,3,30,5,);
B(B_VARIN,,LRstopRadJib,28,4,30,6,);
B(B_F,@SUB,,10,10,15,14,);
B(B_VARIN,,90.0,8,11,10,13,);
B(B_F,@SUB,,10,6,15,10,);
B(B_VARIN,,90.0,8,7,10,9,);
B(B_VARIN,,MRwalSect1P2AngJ,8,12,10,14,);
B(B_VARIN,,MRwalSect1P1AngJ,8,8,10,10,);
B(B_F,@SUB,,10,14,15,18,);
B(B_VARIN,,90.0,8,15,10,17,);
B(B_VARIN,,MRwalSect1P3AngJ,8,16,10,18,);
B(B_F,@SUB,,10,2,15,6,);
B(B_VARIN,,90.0,8,3,10,5,);
B(B_VARIN,,LRstopAngleSg,8,4,10,6,);
B(B_VAROUT,,LXluJiStopSect,48,3,50,5,);
B(B_VAROUT,,LRdistCollSectLJ,48,6,50,8,);
B(B_VAROUT,,LXsgLjSectStopLe,48,4,50,6,);
B(B_VAROUT,,LXsgLjSectStopRi,48,5,50,7,);
B(B_VARIN,,LXsgTurnsRight,28,12,30,14,);
B(B_VARIN,,LXsgTurnsLeft,28,13,30,15,);
B(B_FB,GPgeoSectorV010,GPgeoSect2,30,2,48,17,);
B(B_COMMENT,,Umrechnung vom Koordinatensystem des Gerätesø^ins Koordinatensystem der GeoLib,2,18,22,20,);
B(B_VARIN,,MDsgAngle,26,15,28,17,);
B(B_F,@LT-2,,24,20,29,24,);
B(B_VARIN,,MDlg2PumpSignal,22,21,24,23,);
B(B_VARIN,,0.0,22,22,24,24,);
L(16,10,16,12);
L(16,10,30,10);
L(15,8,30,8);
L(17,12,30,12);
L(17,12,17,16);
L(15,12,16,12);
L(15,16,17,16);
L(15,4,16,4);
L(16,4,16,6);
L(16,6,30,6);
L(28,16,30,16);
L(29,15,30,15);
L(29,15,29,22);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 19 ;
        NETWORK_BODY
B(B_COMMENT,,stop radius minimum,1,1,27,2,);
B(B_VARIN,,MXwalHigMaBoAct,13,6,15,8,);
B(B_F,@AND-2,,15,5,20,9,);
B(B_VARIN,,MXwalHigLJibAct,13,12,15,14,);
B(B_F,@AND-2,,15,11,20,15,);
B(B_F,@OR-2,,10,8,15,12,);
B(B_VARIN,,LXlgStopUpByRaL,8,9,10,11,);
B(B_VARIN,,MXlmlErrGeometri,8,10,10,12,);
B(B_F,@OR-2,,10,14,15,18,);
B(B_VARIN,,MXlmlErrGeometri,8,16,10,18,);
B(B_VARIN,,LXlg2StopUpByRaL,8,15,10,17,);
B(B_FB,SR,SR1,29,5,34,9,0N);
B(B_VARIN,,MXlgAnalSigPos,27,7,29,9,);
B(B_FB,SR,SR2,29,11,34,15,0N);
B(B_VARIN,,MXlg2AnalSigPos,27,13,29,15,);
B(B_VAROUT,,MXstopByHigLimLj,34,12,36,14,);
B(B_F,@OR-2,,34,5,39,9,);
B(B_VAROUT,,MXwalLg2Min,34,13,36,15,);
B(B_VAROUT,,MXwalLgMin,34,3,36,5,);
B(B_VAROUT,,MXstopByHigLimMb,39,6,41,8,);
L(15,14,15,16);
L(15,8,15,10);
L(34,8,34,14);
L(34,4,34,7);
L(20,13,29,13);
L(20,7,29,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 49 ;
        NETWORK_BODY
B(B_F,@AND-2,,15,4,20,8,);
B(B_VARIN,,MXwalRadMaBoAct,13,5,15,7,);
B(B_COMMENT,,stop radius maximum,1,1,27,2,);
B(B_F,@AND-2,,15,10,20,14,);
B(B_VARIN,,MXwalLinMaBoAct,13,11,15,13,);
B(B_VARIN,,LXmaBoStopLine1,8,14,10,16,);
B(B_VARIN,,LXmaBoStopLine2,8,15,10,17,);
B(B_F,@AND-2,,15,18,20,22,);
B(B_VARIN,,MXwalSecMaBoAct,13,19,15,21,);
B(B_F,@AND-2,,15,32,20,36,);
B(B_VARIN,,MXwalLinLuJiAct,13,33,15,35,);
B(B_VARIN,,MXwalSecLuJiAct,13,41,15,43,);
B(B_VARIN,,LXluJiStopLine2,8,37,10,39,);
B(B_VARIN,,LXluJiStopLine1,8,36,10,38,);
B(B_VARIN,,MXwalRadLJibAct,13,27,15,29,);
B(B_F,@AND-2,,15,26,20,30,);
B(B_F,@OR-3,,23,26,28,31,);
B(B_F,@OR-3,,23,4,28,9,);
B(B_F,@OR-2,,10,7,15,11,);
B(B_VARIN,,MXlmlErrGeometri,8,9,10,11,);
B(B_VARIN,,LXlgStopDnByRaL,8,8,10,10,);
B(B_F,@OR-2,,10,29,15,33,);
B(B_VARIN,,LXlg2StopDnByRaL,8,30,10,32,);
B(B_VARIN,,MXlmlErrGeometri,8,31,10,33,);
B(B_F,@OR-4,,10,13,15,19,);
B(B_VARIN,,MXlmlErrGeometri,8,16,10,18,);
B(B_VARIN,,MXsgAngSenError,8,17,10,19,);
B(B_F,@AND-2,,15,40,20,44,);
B(B_F,@OR-4,,10,35,15,41,);
B(B_VARIN,,MXlmlErrGeometri,8,38,10,40,);
B(B_VARIN,,MXsgAngSenError,8,39,10,41,);
B(B_VARIN,,LXluJiStopSect,8,44,10,46,);
B(B_VARIN,,MXlmlErrGeometri,8,45,10,47,);
B(B_F,@OR-3,,10,43,15,48,);
B(B_VARIN,,MXsgAngSenError,8,46,10,48,);
B(B_VARIN,,LXmaBoStopSect,8,22,10,24,);
B(B_VARIN,,MXlmlErrGeometri,8,23,10,25,);
B(B_F,@OR-3,,10,21,15,26,);
B(B_VARIN,,MXsgAngSenError,8,24,10,26,);
B(B_F,@OR-2,,42,4,47,8,);
B(B_VAROUT,,MXstopByRadLimLj,42,27,44,29,);
B(B_VAROUT,,MXstopByRadLimMb,47,5,49,7,);
B(B_VAROUT,,MXwalLg2Max,42,28,44,30,);
B(B_VAROUT,,MXwalLgMax,42,2,44,4,);
B(B_VARIN,,MXlg2AnalSigNeg,35,28,37,30,);
B(B_FB,SR,SR4,37,26,42,30,0N);
B(B_FB,SR,SR3,37,4,42,8,0N);
B(B_VARIN,,MXlgAnalSigNeg,35,6,37,8,);
L(15,13,15,15);
L(20,12,21,12);
L(20,20,22,20);
L(21,7,21,12);
L(15,35,15,37);
L(20,34,21,34);
L(21,29,21,34);
L(21,29,23,29);
L(22,30,23,30);
L(20,28,23,28);
L(22,8,23,8);
L(21,7,23,7);
L(20,6,23,6);
L(22,8,22,20);
L(15,7,15,9);
L(22,30,22,42);
L(15,29,15,31);
L(20,42,22,42);
L(15,43,15,45);
L(15,21,15,23);
L(42,3,42,6);
L(42,7,42,29);
L(28,6,37,6);
L(28,28,37,28);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 54 ;
        NETWORK_BODY
B(B_COMMENT,,stop slewing gear,1,1,27,2,);
B(B_F,@AND-2,,15,34,20,38,);
B(B_F,@AND-2,,15,29,20,33,);
B(B_VARIN,,LXsgMbLin2StopRi,8,37,10,39,);
B(B_VARIN,,LXsgMbLin1StopRi,8,36,10,38,);
B(B_VARIN,,MXsgAngSenError,19,27,21,29,);
B(B_F,@AND-2,,10,23,15,27,);
B(B_VARIN,,LXsgLjSectStopLe,8,24,10,26,);
B(B_VARIN,,MXwalSecLuJiAct,8,25,10,27,);
B(B_VARIN,,LXsgMbSectStopLe,8,20,10,22,);
B(B_F,@AND-2,,10,19,15,23,);
B(B_VARIN,,MXwalSecMaBoAct,8,21,10,23,);
B(B_F,@OR-2,,15,19,20,23,);
B(B_VARIN,,LXsgMbLin1StopLe,8,10,10,12,);
B(B_VARIN,,LXsgMbLin2StopLe,8,11,10,13,);
B(B_F,@AND-2,,15,8,20,12,);
B(B_F,@AND-2,,15,3,20,7,);
B(B_F,@AND-2,,10,49,15,53,);
B(B_VARIN,,LXsgLjSectStopRi,8,50,10,52,);
B(B_VARIN,,MXwalSecLuJiAct,8,51,10,53,);
B(B_VARIN,,LXsgMbSectStopRi,8,46,10,48,);
B(B_F,@AND-2,,10,45,15,49,);
B(B_VARIN,,MXwalSecMaBoAct,8,47,10,49,);
B(B_F,@OR-2,,15,45,20,49,);
B(B_FB,SR,SR6,36,28,41,32,0N);
B(B_VARIN,,MXsgAnalSigPos,34,30,36,32,);
B(B_VAROUT,,MXwalSgStopRight,41,29,43,31,);
B(B_F,@OR-2,,10,9,15,13,);
B(B_F,@OR-2,,10,15,15,19,);
B(B_VARIN,,LXsgLjLin1StopLe,8,16,10,18,);
B(B_VARIN,,LXsgLjLin2StopLe,8,17,10,19,);
B(B_F,@AND-2,,15,14,20,18,);
B(B_F,@OR-2,,10,35,15,39,);
B(B_F,@OR-2,,10,41,15,45,);
B(B_VARIN,,LXsgLjLin2StopRi,8,43,10,45,);
B(B_VARIN,,LXsgLjLin1StopRi,8,42,10,44,);
B(B_F,@AND-2,,15,40,20,44,);
B(B_VARIN,,LXsgLimStopRight,13,31,15,33,);
B(B_VARIN,,MXsgLimitation,13,30,15,32,);
B(B_VARIN,,MXwalLinMaBoAct,13,7,15,9,);
B(B_VARIN,,MXsgLimitation,13,4,15,6,);
B(B_VARIN,,LXsgLimStopLeft,13,5,15,7,);
B(B_VARIN,,MXwalLinMaBoAct,13,33,15,35,);
B(B_VARIN,,MXwalLinLuJiAct,13,13,15,15,);
B(B_VARIN,,MXwalLinLuJiAct,13,39,15,41,);
B(B_F,@OR-5,,22,28,27,35,);
B(B_FB,SR,SR5,36,16,41,20,0N);
B(B_VARIN,,MXsgAnalSigNeg,34,18,36,20,);
B(B_VAROUT,,MXwalSgStopLeft,41,17,43,19,);
B(B_F,@OR-5,,22,16,27,23,);
L(21,22,21,30);
L(20,31,22,31);
L(20,32,22,32);
L(22,34,22,47);
L(21,22,22,22);
L(22,5,22,18);
L(21,10,21,19);
L(20,10,21,10);
L(20,5,22,5);
L(20,47,22,47);
L(20,21,22,21);
L(15,22,15,25);
L(15,48,15,51);
L(15,8,15,10);
L(15,34,15,36);
L(15,14,15,16);
L(15,40,15,42);
L(20,32,20,36);
L(21,30,22,30);
L(27,30,36,30);
L(21,33,22,33);
L(21,33,21,42);
L(20,42,21,42);
L(27,18,36,18);
L(21,19,22,19);
L(20,16,20,20);
L(20,20,22,20);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_VARIN,,MXwalSlewAct,8,4,10,6,);
B(B_F,sel,,10,3,15,8,);
B(B_VARIN,,LRdistCollSg,8,6,10,8,);
B(B_VARIN,,999.9,8,5,10,7,);
B(B_VAROUT,,LRsgLimDistToSt,15,4,17,6,);
B(B_COMMENT,,set distance to stop,1,1,27,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 22 ;
        NETWORK_BODY
B(B_F,sel,,10,1,15,6,);
B(B_VARIN,,MXwalHigMaBoAct,8,2,10,4,);
B(B_VARIN,,LRdistCoLgMinMB,8,4,10,6,);
B(B_F,sel,,10,6,15,11,);
B(B_VARIN,,LRdistCoLgMaxMB,8,9,10,11,);
B(B_VARIN,,MXwalRadMaBoAct,8,7,10,9,);
B(B_VARIN,,999.9,8,3,10,5,);
B(B_VARIN,,999.9,8,8,10,10,);
B(B_F,min-2,,15,5,20,9,);
B(B_F,sel,,10,11,15,16,);
B(B_VARIN,,MXwalHigLJibAct,8,12,10,14,);
B(B_VARIN,,LRdistCoLgMinLJ,8,14,10,16,);
B(B_F,sel,,10,16,15,21,);
B(B_VARIN,,LRdistCoLgMaxLJ,8,19,10,21,);
B(B_VARIN,,MXwalRadLJibAct,8,17,10,19,);
B(B_VARIN,,999.9,8,13,10,15,);
B(B_VARIN,,999.9,8,18,10,20,);
B(B_F,min-2,,20,10,25,14,);
B(B_F,min-2,,25,15,30,19,);
B(B_VAROUT,,LRradLimDistToSt,30,16,32,18,);
L(15,3,15,7);
L(20,7,20,12);
L(25,12,25,17);
L(15,13,20,13);
L(15,18,25,18);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 22 ;
        NETWORK_BODY
B(B_F,min-2,,15,5,20,9,);
B(B_F,min-2,,20,10,25,14,);
B(B_F,min-2,,25,15,30,19,);
B(B_VAROUT,,LRlinLimDistToSt,30,16,32,18,);
B(B_F,sel,,10,6,15,11,);
B(B_F,sel,,10,11,15,16,);
B(B_F,sel,,10,16,15,21,);
B(B_F,sel,,10,1,15,6,);
B(B_VARIN,,LRdistCollLin1MB,8,4,10,6,);
B(B_VARIN,,LRdistCollLin2MB,8,9,10,11,);
B(B_VARIN,,LRdistCollLin1LJ,8,14,10,16,);
B(B_VARIN,,LRdistCollLin2LJ,8,19,10,21,);
B(B_VARIN,,MXwalLinMaBoAct,8,2,10,4,);
B(B_VARIN,,MXwalLinLuJiAct,8,12,10,14,);
B(B_VARIN,,MXwalLinMaBoAct,8,7,10,9,);
B(B_VARIN,,MXwalLinLuJiAct,8,17,10,19,);
B(B_VARIN,,999.9,8,3,10,5,);
B(B_VARIN,,999.9,8,8,10,10,);
B(B_VARIN,,999.9,8,13,10,15,);
B(B_VARIN,,999.9,8,18,10,20,);
L(20,7,20,12);
L(25,12,25,17);
L(15,13,20,13);
L(15,18,25,18);
L(15,3,15,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_F,min-2,,15,5,20,9,);
B(B_VAROUT,,LRsecLimDistToSt,20,6,22,8,);
B(B_F,sel,,10,1,15,6,);
B(B_F,sel,,10,6,15,11,);
B(B_VARIN,,LRdistCollSectMB,8,4,10,6,);
B(B_VARIN,,LRdistCollSectLJ,8,9,10,11,);
B(B_VARIN,,MXwalSecMaBoAct,8,2,10,4,);
B(B_VARIN,,MXwalSecLuJiAct,8,7,10,9,);
B(B_VARIN,,999.9,8,3,10,5,);
B(B_VARIN,,999.9,8,8,10,10,);
L(15,3,15,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 19 ;
        NETWORK_BODY
B(B_F,min-2,,10,9,15,13,);
B(B_F,min-2,,10,13,15,17,);
B(B_F,min-2,,15,12,20,16,);
B(B_VARIN,,LRradLimDistToSt,8,11,10,13,);
B(B_VARIN,,LRsgLimDistToSt,8,10,10,12,);
B(B_VARIN,,LRsecLimDistToSt,8,15,10,17,);
B(B_VARIN,,LRlinLimDistToSt,8,14,10,16,);
B(B_F,sel,,20,11,25,16,);
B(B_VAROUT,,MRwalDistToStop,25,12,27,14,);
B(B_VARIN,,MXwalLgMin,13,2,15,4,);
B(B_VARIN,,MXwalLg2Min,13,3,15,5,);
B(B_VARIN,,MXwalLgMax,13,4,15,6,);
B(B_VARIN,,MXwalLg2Max,13,5,15,7,);
B(B_VARIN,,MXwalSgStopLeft,13,6,15,8,);
B(B_VARIN,,MXwalSgStopRight,13,7,15,9,);
B(B_F,@OR-6,,15,1,20,9,);
B(B_VARIN,,0.0,18,16,20,18,);
L(15,11,15,14);
L(20,15,20,17);
L(20,3,20,13);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL := exit: ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,exit program,1,1,27,2,);
B(B_VARIN,,TRUE,9,3,11,5,);
B(B_RETURN,,,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL := init: ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,init program,1,1,27,2,);
B(B_VARIN,,TRUE,9,3,11,5,);
B(B_VAROUT,,LXinitOk,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_FB,CorrValue_Bool,CorrValue_Bool1,11,4,23,10,);
B(B_VARIN,,CXwalPresel,9,8,11,10,);
B(B_VARIN,,FALSE,9,6,11,8,);
B(B_VARIN,,TRUE,9,7,11,9,);
B(B_VARIN,,FALSE,9,5,11,7,);
B(B_COMMENT,,enable work area limitaion,1,1,27,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_VARIN,,CDsgmidStopSpe,9,8,11,10,);
B(B_VARIN,,1.0,9,6,11,8,);
B(B_VARIN,,3.0,9,7,11,9,);
B(B_VARIN,,1.5,9,5,11,7,);
B(B_COMMENT,,middle stop speed of the slewing gear,1,1,27,2,);
B(B_FB,CorrValue_Real,CorrValue_Real1,11,4,23,10,);
        END_NETWORK_BODY
    END_NET_WORK
END_BODY
END_PROGRAM

PROGRAM GPhydrOilV010
	VAR_EXTERNAL 
		IXentrySwiClosed: BOOL:=FALSE;
			(*entry switch closed*)
		IXhydrOilShutOff: BOOL:=FALSE;
			(*hydraulic oil shut-off device*)
		IXhydrFiltFeedOk: BOOL:=FALSE;
			(*hydraulic filter feed pressure o.k.*)
		IXhydrFilReturOk: BOOL:=FALSE;
			(*hydraulic filter return flow o.k.*)
		IXpumWeaInHg1: BOOL:=FALSE;
			(*add pump wear indication hg1*)
		IXpumWeaInHg2: BOOL:=FALSE;
			(*add pump wear indication hg2*)
		IXpumWeaInSg: BOOL:=FALSE;
			(*add pump wear indication sg*)
		IXpumWeaInLUDV12: BOOL:=FALSE;
			(*add pump wear indication LUDV 1/2*)
		IXpumWeaInLUDV3: BOOL:=FALSE;
			(*add pump wear indication LUDV 3*)
		IWhydrTankCont: UINT:=0;
			(*hydraulic tank content*)
		QWpContLowPowLim: UINT:=0;
			(*lower power limitation pressure control *)
		QWoilCoFanSpeed: UINT:=0;
			(*fan speed oil cooler *)
		MXminEngineSpeed: BOOL:=FALSE;
			(*minimum engine speed reached*)
		MXadOilHeatAct: BOOL:=FALSE;
			(*additional device oil heating active*)
		MXlowPowLimitAct: BOOL:=FALSE;
			(*lower power limitation active*)
		MXhdrOilTemError: BOOL:=FALSE;
			(*error hydr. oil temperature sensor*)
		MXlowPoOilCoApar: BOOL:=FALSE;
			(*separat lowering power regulation valve and oil cooler drive*)
		MXwarnHydrOilTem: BOOL:=FALSE;
			(*hydraulic oil temperature warning*)
		MXhydrOilContWar: BOOL:=FALSE;
			(*hydraulic oil tank content warning*)
		MXhydrOilContErr: BOOL:=FALSE;
			(*hydraulic oil tank content error*)
		MXhydrOilContHig: BOOL:=FALSE;
			(*hydraulic oil tank content to high*)
		MXhydrOilShOffOk: BOOL:=FALSE;
			(*hydraulic oil tank shut off device OK*)
		MXfeedFiltWarn: BOOL:=FALSE;
			(*feed pressure filter warning*)
		MXreturnFiltWarn: BOOL:=FALSE;
			(*return flow filter warning*)
		MXengStarterActi: BOOL:=FALSE;
			(*engine starter activated*)
		MXhgByLudvSectio: BOOL:=FALSE;
			(*hg driven by LUDV section*)
		MXretarderSecAct: BOOL:=FALSE;
			(*retarder section active*)
		MDhydrOilTemp: REAL:=0.0;
			(*hydraulic oil temperature [°C]*)
		MDengRatSpeedPer: REAL:=0.0;
			(*engine rated engine speed in percent [%]*)
		MDpresenEngSpeed: REAL:=0.0;
			(*present engine speed in rpm*)
		MDengMaxSpeed: REAL:=0.0;
			(*engine maximum speed*)
		MDhydrTankCont: REAL:=0.0;
			(*hydraulic tank content [%]*)
		MDhydrOilContWar: REAL:=0.0;
			(*hydraulic oil content warning [%]*)
		MDhydrOilContErr: REAL:=0.0;
			(*hydraulic oil content error [%]*)
		MDhydrOilContHig: REAL:=0.0;
			(*hydraulic oil content to high [%]*)
	END_VAR
	VAR_EXTERNAL CONSTANT
		MSG_INFO: UINT:=0;
		MSG_WARNING: UINT:=0;
			(* message priority: "warning" *)
		MSG_ERROR: UINT:=0;
			(* message priority: "error" *)
	END_VAR
	VAR_EXTERNAL CONSTANT RETAIN
		CWpContMinCPowLi: UINT:=0;
			(*power limit. minimum current pressure control valve *)
		CWpContMaxCPowLi: UINT:=0;
			(*power limit. maximum current pressure control valve *)
		CWfanDrMinCurPum: UINT:=0;
			(*fan drive min. current valve*)
		CWfanDrMaxCurPum: UINT:=0;
			(*fan drive max. current valve*)
		CDadOilHeatTemp: REAL:=0.0;
			(*ad oil heating temperature start heating*)
	END_VAR
	VAR 
		LXinitOk: BOOL:=FALSE;
			(*init completed*)
		LXadOilHeatAct: BOOL:=FALSE;
		LXhydrOilGT40dgr: BOOL:=FALSE;
		LDpSigOilHeat: REAL:=0.0;
		LDpSigLowerLim: REAL:=0.0;
		LDminRegSpeed: REAL:=0.0;
		LDmaxRegSpeed: REAL:=0.0;
		LDhydrTempMax: REAL:=0.0;
		SR1: SR;
		TON1: TON;
		TON2: TON;
		TOF1: TOF;
		TOF2: TOF;
		TOF3: TOF;
		TOF4: TOF;
		TOF5: TOF;
		TOF6: TOF;
		WndComp1: WndComp;
		WndComp2: WndComp;
		WndComp3: WndComp;
		WndComp4: WndComp;
		PowerStage1: PowerStage;
		PowerStage2: PowerStage;
		ScaleAI1: ScaleAI;
		CorrValue_Real1: CorrValue_Real;
		CorrValue_UInt1: CorrValue_UInt;
		CorrValue_UInt2: CorrValue_UInt;
		CorrValue_UInt3: CorrValue_UInt;
		CorrValue_UInt4: CorrValue_UInt;
		Message1: MsgRealReal;
		Message2: MsgRealReal;
		Message3: MsgRealReal;
		Message4: MsgRealReal;
		Message5: MsgRealReal;
		Message6: MsgRealReal;
		Message7: MsgRealReal;
		Message8: MsgRealReal;
		Message9: MsgRealReal;
		Message10: MsgRealReal;
		Message11: MsgRealReal;
		Message12: MsgRealReal;
		Message13: MsgRealReal;
		Message14: MsgRealReal;
	END_VAR
'FBD'
BODY
    WORKSPACE
        NETWORK_LIST_TYPE := NWTYPEFBD ;
        ACTIVE_NETWORK := 0 ;
    END_WORKSPACE
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_COMMENT,,hydraulic oil programm ,1,1,27,2,);
B(B_VARIN,,LXinitOk,9,4,11,6,);
B(B_F,not,,11,3,16,6,);
B(B_JUMP,,init,16,4,18,6,);
B(B_COMMENT,,oil heating ø^lower limitationø^oil tank content ø^oil tank shut off deviceø^oil cooler fan controlø^oil filterø^additional device pump wear indication,31,1,48,8,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_FB,WndComp,WndComp1,11,3,18,9,);
B(B_VARIN,,CDadOilHeatTemp,9,5,11,7,);
B(B_VARIN,,MDhydrOilTemp,9,4,11,6,);
B(B_VARIN,,10.0,9,7,11,9,);
B(B_VARIN,,MXminEngineSpeed,19,9,21,11,);
B(B_VARIN,,T#3s,19,10,21,12,);
B(B_FB,TON,TON1,21,8,26,12,);
B(B_F,@AND-4,,29,3,34,9,00N);
B(B_VARIN,,IXentrySwiClosed,27,4,29,6,);
B(B_VARIN,,MXhdrOilTemError,27,6,29,8,);
B(B_VAROUT,,LXadOilHeatAct,34,4,36,6,);
L(26,10,28,10);
L(18,6,29,6);
L(28,8,29,8);
L(28,8,28,10);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 16 ;
        NETWORK_BODY
B(B_COMMENT,,pressure signal for oil heating,1,1,27,2,);
B(B_VARIN,,0.0,9,7,11,9,);
B(B_VARIN,,20.0,9,8,11,10,);
B(B_VARIN,,60.0,9,9,11,11,);
B(B_VARIN,,100.0,9,10,11,12,);
B(B_VARIN,,MDengRatSpeedPer,9,11,11,13,);
B(B_VARIN,,25.0,9,12,11,14,);
B(B_VARIN,,100.0,9,13,11,15,);
B(B_F,sel,,28,4,33,9,);
B(B_VARIN,,0.0,26,6,28,8,);
B(B_F,GPkx_dV010,,11,6,20,15,);
B(B_COMMENT,,ca.800 U/min min Druck von 20%ø^ca.1500 U/min max Druck von 100%,35,1,50,3,);
B(B_VAROUT,,LDpSigOilHeat,33,5,35,7,);
B(B_COMMENT,,ca1500U/min,2,9,8,10,);
B(B_COMMENT,,ca.800U/min,2,7,8,8,);
B(B_VARIN,,LXadOilHeatAct,26,5,28,7,);
L(20,8,28,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_COMMENT,,calculate maximum engine speed ,1,1,27,2,);
B(B_F,@ADD-2,,18,3,23,7,);
B(B_VAROUT,,LDminRegSpeed,23,4,25,6,);
B(B_VARIN,,100.0,16,5,18,7,);
B(B_F,@ADD-2,,23,6,28,10,);
B(B_VAROUT,,LDmaxRegSpeed,28,7,30,9,);
B(B_VARIN,,MDengMaxSpeed,16,4,18,6,);
B(B_F,sel,,18,7,23,12,);
B(B_VARIN,,MXlowPoOilCoApar,16,8,18,10,);
B(B_VARIN,,100.0,16,9,18,11,);
B(B_COMMENT,,Bei Geräten mit getrennter Ölkühlerversorgung und LSø^System stehen größere Bremsleistungen zur Verfügung.ø^Diese werden jedoch nur in anspruch genommen~ wennø^die Bremsung bis 2100U/min nicht reicht. Also überø^2100U/min wird hier noch stärk,0,0,0,0,0,0,0,);
B(B_F,to_real,,11,10,18,13,);
B(B_VARIN,,200.0,9,11,11,13,);
B(B_COMMENT,,Bei Geräten mit getrennter Ölkühlerversorgung und LS-Systemø^steht mehr Bremsleistung zur Verfügung. Die maximale Bremsleistungø^pro U/min überdrehen darf jedoch nicht zu hoch sein~ da das Systemø^sonst schwingt.,43,3,70,7,);
B(B_COMMENT,,(Bei 20U/min überdrehen und sofort stark bremsen -> schwingen desø^Systems) Deshalb wird der Regelberich vergrößert~ um somit beiø^Überdrehen über 2100U/min die größere Bremsleistung doch nochø^nützen zu können.,43,7,70,11,);
L(23,5,23,8);
L(18,11,18,12);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_COMMENT,,pressure signal for lower limitation,1,1,27,2,);
B(B_VARIN,,LDminRegSpeed,9,4,11,6,);
B(B_VARIN,,0.0,9,5,11,7,);
B(B_VARIN,,LDmaxRegSpeed,9,6,11,8,);
B(B_VARIN,,100.0,9,7,11,9,);
B(B_VARIN,,MDpresenEngSpeed,9,8,11,10,);
B(B_VARIN,,0.0,9,9,11,11,);
B(B_VARIN,,100.0,9,10,11,12,);
B(B_F,GPkx_dV010,,11,3,20,12,);
B(B_COMMENT,,2000 U/min min Druck von 0%ø^2100 U/min max Druck von 100%,29,1,44,3,);
B(B_VAROUT,,LDpSigLowerLim,20,4,22,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_F,@GT-2,,11,3,16,7,);
B(B_VARIN,,LDpSigLowerLim,9,4,11,6,);
B(B_VARIN,,0.0,9,5,11,7,);
B(B_COMMENT,,reset cylinder operation ,1,1,27,2,);
B(B_VAROUT,,MXlowPowLimitAct,16,4,18,6,);
B(B_COMMENT,,depend on type of machine (tbd) ,28,3,51,4,);
B(B_COMMENT,,wieso? Wenn der Motor überdreht soll gebremst werden!,28,5,52,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 17 ;
        NETWORK_BODY
B(B_COMMENT,,power stage volume control lower limitation,1,1,27,2,);
B(B_FB,PowerStage,PowerStage1,22,6,31,14,);
B(B_VARIN,,0.0,20,9,22,11,);
B(B_VARIN,,100.0,20,10,22,12,);
B(B_VAROUT,,QWpContLowPowLim,31,7,33,9,);
B(B_COMMENT,,steigende Kennlinie: ø^wenig Strom wenig Ölmengeø^viel Strom viel Ölmenge ,31,9,45,12,);
B(B_F,SigMax4,,11,7,18,13,);
B(B_VARIN,,CWpContMinCPowLi,18,13,20,15,);
B(B_VARIN,,CWpContMaxCPowLi,19,14,21,16,);
B(B_VARIN,,LDpSigOilHeat,9,8,11,10,);
B(B_VARIN,,LDpSigLowerLim,9,11,11,13,);
B(B_VARIN,,LXadOilHeatAct,13,4,15,6,);
B(B_VARIN,,MXlowPowLimitAct,13,5,15,7,);
B(B_F,@OR-2,,15,3,20,7,);
B(B_VAROUT,,MXretarderSecAct,21,4,23,6,);
L(21,8,22,8);
L(18,9,22,9);
L(21,13,22,13);
L(21,13,21,15);
L(20,12,20,14);
L(20,12,22,12);
L(11,9,11,11);
L(20,5,21,5);
L(21,5,21,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,set global oil heating active,1,1,27,2,);
B(B_VARIN,,LXadOilHeatAct,9,3,11,5,);
B(B_VAROUT,,MXadOilHeatAct,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_COMMENT,,hydraulic oil temperature,1,1,27,2,);
B(B_F,@GT-2,,11,6,16,10,);
B(B_FB,MsgRealReal,Message1,25,5,34,12,);
B(B_VARIN,,41,23,6,25,8,);
B(B_VARIN,,MSG_WARNING,23,8,25,10,);
B(B_VAROUT,,MXwarnHydrOilTem,17,3,19,5,);
B(B_VARIN,,LDhydrTempMax,23,9,25,11,);
B(B_VARIN,,85.0,9,8,11,10,);
B(B_VARIN,,MDhydrOilTemp,9,7,11,9,);
L(16,8,25,8);
L(17,4,17,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_VARIN,,0.0,24,9,26,11,);
B(B_VARIN,,MXwarnHydrOilTem,24,1,26,3,);
B(B_VAROUT,,LDhydrTempMax,32,4,34,6,);
B(B_F,sel,,20,4,25,9,);
B(B_F,sel,,27,3,32,8,N);
B(B_F,@GT-2,,13,2,18,6,);
B(B_VARIN,,LDhydrTempMax,9,4,11,6,);
B(B_VARIN,,MDhydrOilTemp,10,3,12,5,);
L(19,4,19,6);
L(26,7,27,7);
L(26,7,26,10);
L(26,2,26,5);
L(19,6,20,6);
L(25,6,27,6);
L(26,5,27,5);
L(18,4,19,4);
L(12,4,12,8);
L(12,8,20,8);
L(12,4,13,4);
L(11,5,13,5);
L(13,5,13,7);
L(13,7,20,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 47 ;
        NETWORK_BODY
B(B_COMMENT,,hydraulic oil tank content,1,1,27,2,);
B(B_VARIN,,IWhydrTankCont,10,5,12,7,);
B(B_FB,ScaleAI,ScaleAI1,12,4,20,9,);
B(B_VARIN,,100.0,10,6,12,8,);
B(B_FB,MsgRealReal,Message3,22,32,31,39,);
B(B_VARIN,,642,17,33,19,35,);
B(B_VARIN,,MSG_ERROR,17,35,19,37,);
B(B_VAROUT,,MDhydrTankCont,22,5,24,7,);
B(B_F,@AND-2,,21,40,26,44,0N);
B(B_VARIN,,MXengStarterActi,17,42,19,44,);
B(B_FB,SR,SR1,26,40,31,44,0N);
B(B_FB,MsgRealReal,Message2,39,39,48,46,);
B(B_VARIN,,641,37,40,39,42,);
B(B_VARIN,,MSG_ERROR,37,42,39,44,);
B(B_VARIN,,MDhydrOilContWar,17,10,19,12,);
B(B_VARIN,,MDhydrOilContErr,17,18,19,20,);
B(B_VARIN,,MDhydrOilContHig,17,26,19,28,);
B(B_FB,WndComp,WndComp2,25,8,32,14,);
B(B_FB,TON,TON2,40,9,45,13,);
B(B_FB,TOF,TOF1,46,9,51,13,);
B(B_VARIN,,5.0,23,12,25,14,);
B(B_VARIN,,5.0,23,20,25,22,);
B(B_FB,MsgRealReal,Message4,62,8,71,15,);
B(B_VARIN,,643,60,9,62,11,);
B(B_VARIN,,MSG_INFO,60,11,62,13,);
B(B_VAROUT,,MXhydrOilContWar,52,6,54,8,);
B(B_FB,WndComp,WndComp3,25,23,32,29,);
B(B_VARIN,,1.0,23,27,25,29,);
B(B_F,@AND-2,,34,9,39,13,0N);
B(B_F,@AND-2,,34,17,39,21,0N);
B(B_F,@AND-2,,34,25,39,29,0N);
B(B_FB,MsgRealReal,Message5,50,24,59,31,);
B(B_VARIN,,MSG_WARNING,48,27,50,29,);
B(B_VARIN,,646,48,25,50,27,);
B(B_VARIN,,T#5.0s,38,13,40,15,);
B(B_VAROUT,,MXhydrOilContHig,40,23,42,25,);
B(B_FB,WndComp,WndComp4,25,16,32,22,);
B(B_FB,MsgRealReal,Message6,62,16,71,23,);
B(B_VARIN,,MSG_WARNING,60,19,62,21,);
B(B_VARIN,,644,60,17,62,19,);
B(B_FB,TOF,TOF2,46,17,51,21,);
B(B_VAROUT,,MXhydrOilContErr,52,15,54,17,);
B(B_VARIN,,T#3.0s,44,13,46,15,);
B(B_VARIN,,T#3.0s,44,19,46,21,);
L(20,6,22,6);
L(22,6,22,25);
L(19,34,22,34);
L(19,36,22,36);
L(21,35,22,35);
L(20,7,21,7);
L(21,7,21,35);
L(26,43,26,45);
L(20,45,26,45);
L(20,8,20,45);
L(20,42,21,42);
L(19,43,21,43);
L(31,42,39,42);
L(22,10,25,10);
L(19,11,25,11);
L(22,25,25,25);
L(19,27,25,27);
L(22,18,25,18);
L(19,19,25,19);
L(45,11,46,11);
L(40,12,40,14);
L(46,12,46,14);
L(51,11,62,11);
L(52,7,52,11);
L(32,11,34,11);
L(39,11,40,11);
L(33,12,34,12);
L(33,20,34,20);
L(33,12,33,20);
L(33,28,33,30);
L(33,28,34,28);
L(32,27,34,27);
L(39,27,50,27);
L(40,24,40,27);
L(32,19,34,19);
L(39,19,46,19);
L(52,16,52,19);
L(51,19,62,19);
L(20,15,33,15);
L(21,30,33,30);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_FB,MsgRealReal,Message7,23,4,32,11,);
B(B_VARIN,,MSG_WARNING,21,7,23,9,);
B(B_VARIN,,645,21,5,23,7,);
B(B_VARIN,,IXhydrOilShutOff,9,6,11,8,);
B(B_F,not,,11,5,16,8,);
B(B_COMMENT,,hydraulic oil tank shut off device,1,1,27,2,);
B(B_VAROUT,,MXhydrOilShOffOk,11,3,13,5,);
L(16,7,23,7);
L(11,4,11,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_F,@SUB,,11,6,16,10,);
B(B_F,@MUL-2,,16,6,21,10,);
B(B_VARIN,,0.0,19,4,21,6,);
B(B_VARIN,,99.9,19,10,21,12,);
B(B_F,limit,,21,5,27,10,);
B(B_F,@SUB,,27,4,32,8,);
B(B_VARIN,,100.0,25,3,27,5,);
B(B_VARIN,,10.0,14,10,16,12,);
B(B_VARIN,,0.0,39,6,41,8,);
B(B_FB,PowerStage,PowerStage2,41,3,50,11,);
B(B_VARIN,,100.0,39,7,41,9,);
B(B_VARIN,,CWfanDrMinCurPum,39,8,41,10,);
B(B_VARIN,,CWfanDrMaxCurPum,39,9,41,11,);
B(B_VARIN,,55.0,9,8,11,10,);
B(B_VARIN,,MDhydrOilTemp,9,7,11,9,);
B(B_VAROUT,,QWoilCoFanSpeed,50,4,52,6,);
B(B_COMMENT,,oil cooler fan control,1,1,27,2,);
B(B_COMMENT,,fail safe: ^wenig Strom->  große  Ölmengeø^viel Strom -> wenig Ölmenge ,51,7,68,10,);
B(B_F,@AND-2,,36,0,41,4,0N);
B(B_VARIN,,MXhgByLudvSectio,34,2,36,4,);
B(B_VARIN,,MXminEngineSpeed,34,1,36,3,);
L(27,4,27,6);
L(21,5,21,7);
L(21,9,21,11);
L(16,9,16,11);
L(32,6,41,6);
L(41,2,41,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 14 ;
        NETWORK_BODY
B(B_COMMENT,,hydraulic filter,1,1,27,2,);
B(B_F,@AND-2,,23,3,28,7,N);
B(B_VAROUT,,LXhydrOilGT40dgr,22,8,24,10,);
B(B_FB,MsgRealReal,Message8,48,2,57,9,);
B(B_VARIN,,639,46,3,48,5,);
B(B_VARIN,,MSG_INFO,46,5,48,7,);
B(B_FB,TOF,TOF3,29,3,34,7,);
B(B_VARIN,,T#5s,27,7,29,9,);
B(B_FB,TOF,TOF4,16,3,21,7,);
B(B_VARIN,,IXhydrFiltFeedOk,14,4,16,6,);
B(B_VARIN,,T#0.5s,14,5,16,7,);
B(B_VAROUT,,MXfeedFiltWarn,34,3,36,5,);
B(B_F,@OR-2,,16,7,21,11,);
B(B_F,@GT-2,,11,7,16,11,);
B(B_VARIN,,MDhydrOilTemp,9,8,11,10,);
B(B_VARIN,,40.0,9,9,11,11,);
B(B_VARIN,,MXhdrOilTemError,14,11,16,13,);
B(B_COMMENT,,http://jira.zdv.liebherr.i/browse/LWNTBEHSHSSW10511521-46,17,11,41,12,);
L(22,6,23,6);
L(22,6,22,9);
L(21,9,22,9);
L(21,5,23,5);
L(28,5,29,5);
L(34,5,48,5);
L(29,6,29,8);
L(34,4,34,5);
L(16,10,16,12);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_VARIN,,T#0.5s,9,5,11,7,);
B(B_VARIN,,IXhydrFilReturOk,9,4,11,6,);
B(B_FB,TOF,TOF5,11,3,16,7,);
B(B_F,@AND-2,,18,3,23,7,N);
B(B_VARIN,,LXhydrOilGT40dgr,15,7,17,9,);
B(B_FB,TOF,TOF6,24,3,29,7,);
B(B_VARIN,,T#5s,22,7,24,9,);
B(B_FB,MsgRealReal,Message9,43,2,52,9,);
B(B_VARIN,,638,41,3,43,5,);
B(B_VARIN,,MSG_INFO,41,5,43,7,);
B(B_VAROUT,,MXreturnFiltWarn,29,3,31,5,);
L(16,5,18,5);
L(17,6,18,6);
L(17,6,17,8);
L(23,5,24,5);
L(24,6,24,8);
L(29,5,43,5);
L(29,4,29,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,additional device pump wear indication hg1,1,1,27,2,);
B(B_FB,MsgRealReal,Message10,11,3,20,10,);
B(B_VARIN,,22,9,4,11,6,);
B(B_VARIN,,MSG_ERROR,9,6,11,8,);
B(B_VARIN,,IXpumWeaInHg1,9,5,11,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,additional device pump wear indication hg2,1,1,27,2,);
B(B_FB,MsgRealReal,Message11,11,3,20,10,);
B(B_VARIN,,23,9,4,11,6,);
B(B_VARIN,,MSG_ERROR,9,6,11,8,);
B(B_VARIN,,IXpumWeaInHg2,9,5,11,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,additional device pump wear indication sg,1,1,27,2,);
B(B_FB,MsgRealReal,Message12,11,3,20,10,);
B(B_VARIN,,26,9,4,11,6,);
B(B_VARIN,,MSG_ERROR,9,6,11,8,);
B(B_VARIN,,IXpumWeaInSg,9,5,11,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,additional device pump wear indication LUDV 1/2,1,1,27,2,);
B(B_FB,MsgRealReal,Message13,11,3,20,10,);
B(B_VARIN,,29,9,4,11,6,);
B(B_VARIN,,MSG_ERROR,9,6,11,8,);
B(B_VARIN,,IXpumWeaInLUDV12,9,5,11,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,additional device pump wear indication LUDV 3,1,1,27,2,);
B(B_FB,MsgRealReal,Message14,11,3,20,10,);
B(B_VARIN,,32,9,4,11,6,);
B(B_VARIN,,MSG_ERROR,9,6,11,8,);
B(B_VARIN,,IXpumWeaInLUDV3,9,5,11,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,exit program,1,1,27,2,);
B(B_VARIN,,TRUE,9,3,11,5,);
B(B_RETURN,,,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL := init: ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,init additional device program,1,1,27,2,);
B(B_VARIN,,TRUE,9,3,11,5,);
B(B_VAROUT,,LXinitOk,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_FB,CorrValue_Real,CorrValue_Real1,11,2,23,8,);
B(B_VARIN,,CDadOilHeatTemp,9,6,11,8,);
B(B_VARIN,,-20.0,9,3,11,5,);
B(B_VARIN,,-45.0,9,4,11,6,);
B(B_VARIN,,20.0,9,5,11,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value minimum current pressure valve lower control,1,1,27,2,);
B(B_FB,CorrValue_UInt,CorrValue_UInt1,11,4,23,10,);
B(B_VARIN,,200,9,5,11,7,);
B(B_VARIN,,0,9,6,11,8,);
B(B_VARIN,,1000,9,7,11,9,);
B(B_VARIN,,CWpContMinCPowLi,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value maximum current pressure valve lower control,1,1,27,2,);
B(B_FB,CorrValue_UInt,CorrValue_UInt2,11,4,23,10,);
B(B_VARIN,,800,9,5,11,7,);
B(B_VARIN,,0,9,6,11,8,);
B(B_VARIN,,1000,9,7,11,9,);
B(B_VARIN,,CWpContMaxCPowLi,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value minimum current oil cooler fan speed,1,1,27,2,);
B(B_FB,CorrValue_UInt,CorrValue_UInt3,11,4,23,10,);
B(B_VARIN,,0,9,5,11,7,);
B(B_VARIN,,0,9,6,11,8,);
B(B_VARIN,,400,9,7,11,9,);
B(B_VARIN,,CWfanDrMinCurPum,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value maximum current oil cooler fan speed,1,1,27,2,);
B(B_FB,CorrValue_UInt,CorrValue_UInt4,11,4,23,10,);
B(B_VARIN,,600,9,5,11,7,);
B(B_VARIN,,400,9,6,11,8,);
B(B_VARIN,,1000,9,7,11,9,);
B(B_VARIN,,CWfanDrMaxCurPum,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
END_BODY
END_PROGRAM

PROGRAM GPinitV020
	VAR_EXTERNAL 
		IXremoteControl: BOOL:=FALSE;
			(*remote control activated*)
		MXremContPresel: BOOL:=FALSE;
			(*remote control preselected by X12 Button*)
		MXremContActive: BOOL:=FALSE;
			(*remote control activated*)
		MXstopModulError: BOOL:=FALSE;
			(*set stop in case of module error*)
		MXacModulIsActiv: BOOL:=FALSE;
			(*ac IMMO Module is active*)
	END_VAR
	VAR_EXTERNAL CONSTANT
		MSG_USER_HS: UDINT:=0;
			(* message subgroup "hs" for group "user" *)
		MSG_INFO: UINT:=0;
			(* message priority: "info" *)
		MSG_ERROR: UINT:=0;
			(* message priority: "error" *)
	END_VAR
	VAR_EXTERNAL RETAIN
		MXmachSerialOk: BOOL:=FALSE;
			(*machine serial is activated*)
		MXmachTypeOk: BOOL:=FALSE;
			(*machine type is activated*)
		MXenExtOperMode: BOOL:=FALSE;
			(*enable external operation mode*)
		MXmod57SetActive: BOOL:=FALSE;
			(*set modul 57 active*)
		MXmod57SetCritic: BOOL:=FALSE;
			(*set modul 57 critical*)
		MXmod18SetActive: BOOL:=FALSE;
			(*set modul 18 active*)
		MXmod18SetCritic: BOOL:=FALSE;
			(*set modul 18 critical*)
		MXmod10SetActive: BOOL:=FALSE;
			(*set modul 10 active*)
		MXmod10SetCritic: BOOL:=FALSE;
			(*set modul 10 critical*)
		MXmod34SetActive: BOOL:=FALSE;
			(*set modul 34 active*)
		MXmod34SetCritic: BOOL:=FALSE;
			(*set modul 34 critical*)
		MXmod19SetActive: BOOL:=FALSE;
			(*set modul 19 active*)
		MXmod19SetCritic: BOOL:=FALSE;
			(*set modul 19 critical*)
		MXmod43SetActive: BOOL:=FALSE;
			(*set modul 43 active*)
		MXmod43SetCritic: BOOL:=FALSE;
			(*set modul 43 critical*)
		MXkeybX25SetAct: BOOL:=FALSE;
			(*set keyboard X25 active*)
		MXkeybX22SetAct: BOOL:=FALSE;
			(*set keyboard X22 active*)
		MXkeybX22SetCrit: BOOL:=FALSE;
			(*set keyboard X22 critical*)
		MXmod107SetCriti: BOOL:=FALSE;
			(*set immo module 107 critical*)
		MXmod14SetActive: BOOL:=FALSE;
			(*set modul 14 active*)
		MXmod14SetCritic: BOOL:=FALSE;
			(*set modul 14 critical*)
		MXmod49SetActive: BOOL:=FALSE;
			(*set modul 49 active*)
		MXmod58SetActive: BOOL:=FALSE;
			(*set modul 58 active*)
	END_VAR
	VAR_EXTERNAL CONSTANT RETAIN
		CDmachinSerialNr: UDINT:=0;
			(*serial number of machine*)
		CDmachinSpecType: REAL:=0.0;
			(*specific type of the machine*)
		CXremoteControl: BOOL:=FALSE;
			(*remote control additional device selected*)
	END_VAR
	VAR 
		LXinitOk: BOOL:=FALSE;
		LXdummy: BOOL:=FALSE;
		LXmod10IsActiv: BOOL:=FALSE;
		LXmod18IsActiv: BOOL:=FALSE;
		LXmod19IsActiv: BOOL:=FALSE;
		LXmod34IsActiv: BOOL:=FALSE;
		LXmod43IsActiv: BOOL:=FALSE;
		LXmod57IsActiv: BOOL:=FALSE;
		LXmod74IsActiv: BOOL:=FALSE;
		LXmod75IsActiv: BOOL:=FALSE;
		LXmod98IsActiv: BOOL:=FALSE;
		LXmod99IsActiv: BOOL:=FALSE;
		LXmod107IsActiv: BOOL:=FALSE;
		LXmod14IsActiv: BOOL:=FALSE;
		LXmod58IsActiv: BOOL:=FALSE;
		LXmod49IsActiv: BOOL:=FALSE;
		ModuleState1: ModuleState;
		ModuleState2: ModuleState;
		ModuleState3: ModuleState;
		ModuleState4: ModuleState;
		ModuleState5: ModuleState;
		ModuleState6: ModuleState;
		ModuleState7: ModuleState;
		ModuleState8: ModuleState;
		ModuleState9: ModuleState;
		ModuleState10: ModuleState;
		ModuleState11: ModuleState;
		ModuleState12: ModuleState;
		ModuleState13: ModuleState;
		ModuleState14: ModuleState;
		Message1: MsgUDintUDint;
		Message2: MsgUDintUDint;
		Message3: MsgUDintUDint;
		Message4: MsgUDintUDint;
		Message5: MsgUDintUDint;
		Message6: MsgUDintUDint;
		Message7: MsgUDintUDint;
		Message8: MsgUDintUDint;
		Message9: MsgUDintUDint;
		Message10: MsgUDintUDint;
		Message11: MsgUDintUDint;
		Message12: MsgUDintUDint;
		Message13: MsgUDintUDint;
		Message14: MsgUDintUDint;
	END_VAR
'FBD'
BODY
    WORKSPACE
        NETWORK_LIST_TYPE := NWTYPEFBD ;
        ACTIVE_NETWORK := 0 ;
    END_WORKSPACE
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_VARIN,,LXinitOk,9,3,11,5,);
B(B_JUMP,,modul,11,3,13,5,);
B(B_COMMENT,,jump to next at 2nd run,1,1,31,2,);
B(B_COMMENT,,Info: Dieser init-Teil befindet sich nicht in der init-Task~ da beimø^Durchlaufen der Inint-Task noch keine Eingänge abgefragt wurden!,18,3,43,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_F,MsgUserSubgroup,,11,3,24,6,);
B(B_VARIN,,MSG_USER_HS,9,4,11,6,);
B(B_VAROUT,,LXdummy,24,4,26,6,);
B(B_COMMENT,,set subgroup for message system,1,1,31,2,);
B(B_COMMENT,,Das muss am Anfang stehen~ sonst wird die Message im 1 DL nicht erkannt,33,1,68,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_VARIN,,IXremoteControl,9,4,11,6,);
B(B_VARIN,,CXremoteControl,9,5,11,7,);
B(B_VAROUT,,MXremContPresel,16,4,18,6,);
B(B_COMMENT,,set preselection of the remote control,1,1,31,2,);
B(B_VAROUT,,MXremContActive,16,5,18,7,);
B(B_F,@AND-3,,11,3,16,8,00N);
B(B_VARIN,,MXenExtOperMode,9,6,11,8,);
L(16,5,16,6);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_VARIN,,100001,9,5,11,7,);
B(B_COMMENT,,check machine serial,1,1,27,2,);
B(B_VARIN,,CDmachinSerialNr,9,4,11,6,);
B(B_VAROUT,,MXmachSerialOk,16,4,18,6,);
B(B_F,@GT-2,,11,3,16,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_COMMENT,,check machine type,1,1,27,2,);
B(B_VARIN,,0.0,9,5,11,7,);
B(B_VARIN,,CDmachinSpecType,9,4,11,6,);
B(B_F,@GT-2,,11,3,16,7,);
B(B_VAROUT,,MXmachTypeOk,16,4,18,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,TRUE,9,1,11,3,);
B(B_VAROUT,,LXinitOk,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL := modul: ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_COMMENT,,activate module 57 for rope lenght measuring,1,1,27,2,);
B(B_FB,ModuleState,ModuleState1,13,4,25,10,);
B(B_VARIN,,2,11,5,13,7,);
B(B_VARIN,,57,11,6,13,8,);
B(B_FB,MsgUDintUDint,Message1,39,4,49,11,);
B(B_VARIN,,689,37,5,39,7,);
B(B_VARIN,,MSG_ERROR,37,7,39,9,);
B(B_VARIN,,2,37,8,39,10,);
B(B_VARIN,,57,37,9,39,11,);
B(B_F,@AND-2,,27,5,32,9,N);
B(B_VARIN,,MXmod57SetActive,10,10,12,12,);
B(B_VARIN,,FALSE,9,8,11,10,);
B(B_VAROUT,,LXmod57IsActiv,26,3,28,5,);
B(B_COMMENT,,part of modul 41,29,1,47,2,);
L(12,8,13,8);
L(26,8,27,8);
L(25,7,27,7);
L(32,7,39,7);
L(26,8,26,11);
L(12,11,26,11);
L(12,8,12,11);
L(11,9,13,9);
L(26,4,26,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_COMMENT,,activate additional module 18 ,1,1,27,2,);
B(B_FB,ModuleState,ModuleState2,14,4,26,10,);
B(B_VARIN,,2,12,5,14,7,);
B(B_VARIN,,18,12,6,14,8,);
B(B_FB,MsgUDintUDint,Message2,40,4,50,11,);
B(B_VARIN,,689,38,5,40,7,);
B(B_VARIN,,MSG_ERROR,38,7,40,9,);
B(B_VARIN,,2,38,8,40,10,);
B(B_VARIN,,18,38,9,40,11,);
B(B_F,@AND-2,,28,5,33,9,N);
B(B_VARIN,,MXmod18SetActive,11,10,13,12,);
B(B_VARIN,,FALSE,10,8,12,10,);
B(B_VAROUT,,LXmod18IsActiv,27,3,29,5,);
L(27,8,28,8);
L(13,8,14,8);
L(26,7,28,7);
L(33,7,40,7);
L(13,11,27,11);
L(27,8,27,11);
L(13,8,13,11);
L(12,9,14,9);
L(27,4,27,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_COMMENT,,activate additional module 10,1,1,27,2,);
B(B_FB,ModuleState,ModuleState3,14,4,26,10,);
B(B_VARIN,,2,12,5,14,7,);
B(B_VARIN,,10,12,6,14,8,);
B(B_FB,MsgUDintUDint,Message3,40,4,50,11,);
B(B_VARIN,,689,38,5,40,7,);
B(B_VARIN,,MSG_ERROR,38,7,40,9,);
B(B_VARIN,,2,38,8,40,10,);
B(B_VARIN,,10,38,9,40,11,);
B(B_VAROUT,,LXmod10IsActiv,27,3,29,5,);
B(B_VARIN,,MXmod10SetActive,11,10,13,12,);
B(B_VARIN,,FALSE,10,8,12,10,);
B(B_F,@AND-2,,28,5,33,9,N);
L(13,8,14,8);
L(27,8,28,8);
L(27,4,27,7);
L(13,11,27,11);
L(27,8,27,11);
L(13,8,13,11);
L(12,9,14,9);
L(26,7,28,7);
L(33,7,40,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_COMMENT,,activate additional module 34,1,1,27,2,);
B(B_FB,ModuleState,ModuleState4,12,4,24,10,);
B(B_VARIN,,2,10,5,12,7,);
B(B_VARIN,,34,10,6,12,8,);
B(B_FB,MsgUDintUDint,Message4,38,4,48,11,);
B(B_VARIN,,689,36,5,38,7,);
B(B_VARIN,,MSG_ERROR,36,7,38,9,);
B(B_VARIN,,2,36,8,38,10,);
B(B_VARIN,,34,36,9,38,11,);
B(B_COMMENT,,Modul wird automatisch aktiviert. ,28,1,59,2,);
B(B_VARIN,,TRUE,10,7,12,9,);
B(B_VARIN,,FALSE,10,8,12,10,);
B(B_F,@AND-2,,26,5,31,9,N);
B(B_VARIN,,MXmod34SetActive,23,10,25,12,);
B(B_VAROUT,,LXmod34IsActiv,25,3,27,5,);
L(25,8,26,8);
L(24,7,26,7);
L(31,7,38,7);
L(25,8,25,11);
L(25,4,25,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_COMMENT,,activate additional module 19,1,1,27,2,);
B(B_FB,ModuleState,ModuleState5,14,4,26,10,);
B(B_VARIN,,2,12,5,14,7,);
B(B_VARIN,,19,12,6,14,8,);
B(B_FB,MsgUDintUDint,Message5,40,4,50,11,);
B(B_VARIN,,689,38,5,40,7,);
B(B_VARIN,,MSG_ERROR,38,7,40,9,);
B(B_VARIN,,2,38,8,40,10,);
B(B_VARIN,,19,38,9,40,11,);
B(B_VARIN,,MXmod19SetActive,11,10,13,12,);
B(B_F,@AND-2,,28,5,33,9,N);
B(B_VARIN,,FALSE,10,8,12,10,);
B(B_VAROUT,,LXmod19IsActiv,27,3,29,5,);
L(27,8,28,8);
L(13,8,14,8);
L(13,8,13,11);
L(27,8,27,11);
L(13,11,27,11);
L(26,7,28,7);
L(33,7,40,7);
L(12,9,14,9);
L(27,4,27,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_COMMENT,,activate additional module 43,1,1,27,2,);
B(B_FB,ModuleState,ModuleState6,14,3,26,9,);
B(B_VARIN,,2,12,4,14,6,);
B(B_VARIN,,43,12,5,14,7,);
B(B_FB,MsgUDintUDint,Message6,40,3,50,10,);
B(B_VARIN,,689,38,4,40,6,);
B(B_VARIN,,MSG_ERROR,38,6,40,8,);
B(B_VARIN,,2,38,7,40,9,);
B(B_VARIN,,43,38,8,40,10,);
B(B_VARIN,,MXmod43SetActive,11,9,13,11,);
B(B_F,@AND-2,,28,4,33,8,N);
B(B_VAROUT,,LXmod43IsActiv,27,2,29,4,);
B(B_VARIN,,FALSE,10,7,12,9,);
L(13,10,27,10);
L(27,7,27,10);
L(13,7,13,10);
L(27,7,28,7);
L(26,6,28,6);
L(33,6,40,6);
L(27,3,27,6);
L(13,7,14,7);
L(12,8,14,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_COMMENT,,activate additional module 14,1,1,27,2,);
B(B_FB,ModuleState,ModuleState13,14,4,26,10,);
B(B_VARIN,,2,12,5,14,7,);
B(B_VARIN,,14,12,6,14,8,);
B(B_FB,MsgUDintUDint,Message12,40,4,50,11,);
B(B_VARIN,,689,38,5,40,7,);
B(B_VARIN,,MSG_ERROR,38,7,40,9,);
B(B_VARIN,,2,38,8,40,10,);
B(B_VARIN,,14,38,9,40,11,);
B(B_F,@AND-2,,28,5,33,9,N);
B(B_VARIN,,MXmod14SetActive,11,10,13,12,);
B(B_VARIN,,FALSE,10,8,12,10,);
B(B_VAROUT,,LXmod14IsActiv,27,3,29,5,);
L(27,8,28,8);
L(13,8,14,8);
L(26,7,28,7);
L(33,7,40,7);
L(13,11,27,11);
L(27,8,27,11);
L(13,8,13,11);
L(12,9,14,9);
L(27,4,27,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_COMMENT,,activate additional module 58,1,1,27,2,);
B(B_FB,ModuleState,ModuleState7,13,4,25,10,);
B(B_VARIN,,2,11,5,13,7,);
B(B_VARIN,,58,11,6,13,8,);
B(B_FB,MsgUDintUDint,Message14,39,4,49,11,);
B(B_VARIN,,689,37,5,39,7,);
B(B_VARIN,,MSG_ERROR,37,7,39,9,);
B(B_VARIN,,2,37,8,39,10,);
B(B_VARIN,,58,37,9,39,11,);
B(B_F,@AND-2,,27,5,32,9,N);
B(B_VARIN,,MXmod58SetActive,10,10,12,12,);
B(B_VARIN,,FALSE,9,8,11,10,);
B(B_VAROUT,,LXmod58IsActiv,26,3,28,5,);
B(B_COMMENT,,keine systemkritische Abschaltung notwendig,50,2,70,3,);
B(B_COMMENT,,part of modul 42,28,1,46,2,);
L(12,8,13,8);
L(26,8,27,8);
L(25,7,27,7);
L(32,7,39,7);
L(26,8,26,11);
L(12,11,26,11);
L(12,8,12,11);
L(11,9,13,9);
L(26,4,26,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_FB,ModuleState,ModuleState8,11,3,23,9,);
B(B_VARIN,,1,9,4,11,6,);
B(B_VARIN,,75,9,5,11,7,);
B(B_VARIN,,MXkeybX25SetAct,9,6,11,8,);
B(B_VARIN,,FALSE,9,7,11,9,);
B(B_COMMENT,,check X25 mounted ,1,1,27,2,);
B(B_VAROUT,,LXmod75IsActiv,23,5,25,7,);
B(B_COMMENT,,Achtung~ Modul kann abgesteckt werden,30,1,61,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_FB,ModuleState,ModuleState9,11,2,23,8,);
B(B_VARIN,,1,9,3,11,5,);
B(B_VARIN,,99,9,4,11,6,);
B(B_VARIN,,MXkeybX25SetAct,9,5,11,7,);
B(B_VARIN,,FALSE,9,6,11,8,);
B(B_VAROUT,,LXmod99IsActiv,23,4,25,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_FB,MsgUDintUDint,Message7,24,2,34,9,);
B(B_COMMENT,,Meldung wenn sich Modul nicht meldet~ wenn es benötigt wird,36,1,67,2,);
B(B_VARIN,,689,22,3,24,5,);
B(B_VARIN,,MSG_ERROR,22,5,24,7,);
B(B_VARIN,,1,22,6,24,8,);
B(B_VARIN,,75,22,7,24,9,);
B(B_VARIN,,MXkeybX25SetAct,9,5,11,7,);
B(B_VARIN,,LXmod75IsActiv,9,4,11,6,);
B(B_F,@AND-2,,11,3,16,7,N);
L(16,5,24,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_FB,MsgUDintUDint,Message8,24,2,34,9,);
B(B_VARIN,,689,22,3,24,5,);
B(B_VARIN,,MSG_ERROR,22,5,24,7,);
B(B_VARIN,,1,22,6,24,8,);
B(B_VARIN,,99,22,7,24,9,);
B(B_COMMENT,,Meldung wenn sich Modul nicht meldet~ wenn es benötigt wird,36,1,67,2,);
B(B_VARIN,,MXkeybX25SetAct,9,5,11,7,);
B(B_VARIN,,LXmod99IsActiv,9,4,11,6,);
B(B_F,@AND-2,,11,3,16,7,N);
L(16,5,24,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_FB,ModuleState,ModuleState10,11,3,23,9,);
B(B_VARIN,,1,9,4,11,6,);
B(B_VARIN,,74,9,5,11,7,);
B(B_VARIN,,MXkeybX22SetAct,9,6,11,8,);
B(B_VARIN,,FALSE,9,7,11,9,);
B(B_COMMENT,,check X22 mounted ,1,1,27,2,);
B(B_VAROUT,,LXmod74IsActiv,23,5,25,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_FB,ModuleState,ModuleState11,11,2,23,8,);
B(B_VARIN,,1,9,3,11,5,);
B(B_VARIN,,98,9,4,11,6,);
B(B_VARIN,,MXkeybX22SetAct,9,5,11,7,);
B(B_VARIN,,FALSE,9,6,11,8,);
B(B_VAROUT,,LXmod98IsActiv,23,4,25,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_FB,MsgUDintUDint,Message9,24,2,34,9,);
B(B_COMMENT,,Meldung wenn sich Modul nicht meldet~ wenn es benötigt wird,36,1,67,2,);
B(B_VARIN,,689,22,3,24,5,);
B(B_VARIN,,MSG_ERROR,22,5,24,7,);
B(B_VARIN,,1,22,6,24,8,);
B(B_VARIN,,74,22,7,24,9,);
B(B_VARIN,,LXmod74IsActiv,9,4,11,6,);
B(B_VARIN,,MXkeybX22SetAct,9,5,11,7,);
B(B_F,@AND-2,,11,3,16,7,N);
L(16,5,24,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_FB,MsgUDintUDint,Message10,24,2,34,9,);
B(B_VARIN,,689,22,3,24,5,);
B(B_VARIN,,MSG_ERROR,22,5,24,7,);
B(B_VARIN,,1,22,6,24,8,);
B(B_VARIN,,98,22,7,24,9,);
B(B_COMMENT,,Meldung wenn sich Modul nicht meldet~ wenn es benötigt wird,36,1,67,2,);
B(B_VARIN,,MXkeybX22SetAct,9,5,11,7,);
B(B_VARIN,,LXmod98IsActiv,9,4,11,6,);
B(B_F,@AND-2,,11,3,16,7,N);
L(16,5,24,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 15 ;
        NETWORK_BODY
B(B_COMMENT,,activate module 107 IMMO,1,1,27,2,);
B(B_FB,ModuleState,ModuleState12,11,4,23,10,);
B(B_FB,MsgUDintUDint,Message11,46,4,56,11,);
B(B_VARIN,,689,44,5,46,7,);
B(B_VARIN,,1,44,8,46,10,);
B(B_VARIN,,107,44,9,46,11,);
B(B_VAROUT,,LXmod107IsActiv,24,3,26,5,);
B(B_VARIN,,TRUE,9,7,11,9,);
B(B_VARIN,,FALSE,9,8,11,10,);
B(B_VARIN,,107,9,6,11,8,);
B(B_VARIN,,1,9,5,11,7,);
B(B_VARIN,,MXmod107SetCriti,22,10,24,12,);
B(B_F,@AND-2,,24,8,29,12,N);
B(B_F,not,,24,5,29,8,);
B(B_VARIN,,MSG_INFO,35,10,37,12,);
B(B_VARIN,,MSG_ERROR,35,11,37,13,);
B(B_F,sel,,37,8,42,13,);
B(B_VAROUT,,MXacModulIsActiv,24,2,26,4,);
L(24,7,24,10);
L(23,7,24,7);
L(29,7,46,7);
L(42,8,42,10);
L(42,8,46,8);
L(29,10,37,10);
L(24,3,24,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_COMMENT,,activate module 49 for redundant rope lenght measuring,1,1,27,2,);
B(B_FB,ModuleState,ModuleState14,13,4,25,10,);
B(B_VARIN,,2,11,5,13,7,);
B(B_VARIN,,49,11,6,13,8,);
B(B_FB,MsgUDintUDint,Message13,39,4,49,11,);
B(B_VARIN,,689,37,5,39,7,);
B(B_VARIN,,MSG_ERROR,37,7,39,9,);
B(B_VARIN,,2,37,8,39,10,);
B(B_VARIN,,49,37,9,39,11,);
B(B_F,@AND-2,,27,5,32,9,N);
B(B_VARIN,,MXmod49SetActive,10,10,12,12,);
B(B_VARIN,,FALSE,9,8,11,10,);
B(B_VAROUT,,LXmod49IsActiv,26,3,28,5,);
B(B_COMMENT,,part of modul 17,28,1,46,2,);
B(B_COMMENT,,keine systemkritische Abschaltung notwendig,50,2,70,3,);
L(12,8,13,8);
L(26,8,27,8);
L(25,7,27,7);
L(32,7,39,7);
L(26,8,26,11);
L(12,11,26,11);
L(12,8,12,11);
L(11,9,13,9);
L(26,4,26,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 53 ;
        NETWORK_BODY
B(B_VARIN,,LXmod98IsActiv,9,41,11,43,);
B(B_VARIN,,MXkeybX22SetCrit,9,42,11,44,);
B(B_F,@AND-2,,11,40,16,44,N);
B(B_VARIN,,LXmod74IsActiv,9,37,11,39,);
B(B_F,@AND-2,,11,36,16,40,N);
B(B_VARIN,,MXkeybX22SetCrit,9,38,11,40,);
B(B_VARIN,,LXmod99IsActiv,9,33,11,35,);
B(B_F,@AND-2,,11,32,16,36,N);
B(B_VARIN,,MXkeybX25SetAct,9,34,11,36,);
B(B_VARIN,,LXmod75IsActiv,9,29,11,31,);
B(B_F,@AND-2,,11,28,16,32,N);
B(B_VARIN,,MXkeybX25SetAct,9,30,11,32,);
B(B_VARIN,,LXmod43IsActiv,9,25,11,27,);
B(B_F,@AND-2,,11,24,16,28,N);
B(B_VARIN,,MXmod43SetCritic,9,26,11,28,);
B(B_VARIN,,MXmod19SetCritic,9,22,11,24,);
B(B_VARIN,,LXmod19IsActiv,9,21,11,23,);
B(B_F,@AND-2,,11,20,16,24,N);
B(B_VARIN,,MXmod34SetCritic,9,18,11,20,);
B(B_VARIN,,LXmod34IsActiv,9,17,11,19,);
B(B_F,@AND-2,,11,16,16,20,N);
B(B_VARIN,,MXmod10SetCritic,9,14,11,16,);
B(B_VARIN,,LXmod10IsActiv,9,13,11,15,);
B(B_F,@AND-2,,11,12,16,16,N);
B(B_VARIN,,MXmod18SetCritic,9,10,11,12,);
B(B_VARIN,,LXmod18IsActiv,9,9,11,11,);
B(B_F,@AND-2,,11,8,16,12,N);
B(B_VARIN,,MXmod57SetCritic,9,6,11,8,);
B(B_VARIN,,LXmod57IsActiv,9,5,11,7,);
B(B_F,@AND-2,,11,4,16,8,N);
B(B_COMMENT,,set stop module error ,1,1,27,2,);
B(B_VAROUT,,MXstopModulError,32,5,34,7,);
B(B_VARIN,,LXmod107IsActiv,9,45,11,47,);
B(B_VARIN,,MXmod107SetCriti,9,46,11,48,);
B(B_F,@AND-2,,11,44,16,48,N);
B(B_F,@OR-12,,27,4,32,18,);
B(B_VARIN,,MXmod14SetCritic,9,50,11,52,);
B(B_VARIN,,LXmod14IsActiv,9,49,11,51,);
B(B_F,@AND-2,,11,48,16,52,N);
L(17,7,27,7);
L(17,7,17,10);
L(16,10,17,10);
L(18,8,18,14);
L(18,8,27,8);
L(19,9,19,18);
L(20,10,20,22);
L(19,9,27,9);
L(20,10,27,10);
L(21,11,27,11);
L(21,11,21,26);
L(16,18,19,18);
L(16,14,18,14);
L(16,22,20,22);
L(16,26,21,26);
L(22,12,27,12);
L(22,12,22,30);
L(16,30,22,30);
L(23,13,23,34);
L(16,34,23,34);
L(23,13,27,13);
L(24,14,24,38);
L(24,14,27,14);
L(16,38,24,38);
L(25,15,27,15);
L(25,15,25,42);
L(16,42,25,42);
L(16,46,26,46);
L(26,16,26,46);
L(26,16,27,16);
L(16,6,27,6);
L(16,50,27,50);
L(27,17,27,50);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,LXinitOk,9,1,11,3,);
B(B_RETURN,,,11,1,13,3,);
B(B_COMMENT,,Info: Dieser init-Teil befindet sich nicht in der init-Task~ da beimø^Durchlaufen der Inint-Task noch keine Eingänge abgefragt wurden!,26,1,51,3,);
        END_NETWORK_BODY
    END_NET_WORK
END_BODY
END_PROGRAM

PROGRAM GPlidatV030
	VAR_EXTERNAL 
		MXstopAllFunctio: BOOL:=FALSE;
			(*stop all excavator functions*)
		MXanyFunctActive: BOOL:=FALSE;
			(*any function active, ludv stopp*)
		MXminEngineSpeed: BOOL:=FALSE;
			(*minimum engine speed reached*)
		MXswitTravelGear: BOOL:=FALSE;
			(*travelling gear is activated*)
		MXenabRemAccess: BOOL:=TRUE;
			(*enable remote access by modem*)
		MXremAccessState: BOOL:=FALSE;
			(*actual state of remote access by modem*)
		MXservSetAckn: BOOL:=FALSE;
			(*service set ackowledge*)
		MXservSetNotAckn: BOOL:=FALSE;
			(*service set not ackowledge*)
		MXnewModeSelect: BOOL:=FALSE;
			(*new mode is selected*)
		MXenabMainOperat: BOOL:=FALSE;
			(*main operation enable*)
		MXenabDgcOperat: BOOL:=FALSE;
			(*add. dynamic ground compaction enable*)
		MXenablVibOperat: BOOL:=FALSE;
			(*enable vibrator operation*)
		MXenablHamOperat: BOOL:=FALSE;
			(*enable hammer operation*)
		MXenabHyGrabOper: BOOL:=FALSE;
			(*enable hydr.Grab operation*)
		MXadLEHydrGrab: BOOL:=FALSE;
			(*add. leffer hydraulic grab control*)
		MXadSBHydrGrab: BOOL:=FALSE;
			(*add. soletanche bachy hydraulic grab control*)
		MXadSMHydrGrab: BOOL:=FALSE;
			(*add. soilmec hydraulic grab control*)
		MXenabHyGrabHose: BOOL:=FALSE;
			(*enable add. hydr. grab with hose winch *)
		MXenabKelGrabOpe: BOOL:=FALSE;
			(*enable add. kelly grab operation*)
		MXenablDrillOper: BOOL:=FALSE;
			(*enable drilling drive operation*)
		MXenabDragliOper: BOOL:=FALSE;
			(*enable dragline operation*)
		MXPuPu1Enable: BOOL:=FALSE;
			(*FE operational mode*)
		MXPuPu2Enable: BOOL:=FALSE;
			(*FE operational mode*)
		MXddEnaSobBaOp: BOOL:=FALSE;
			(*FE operational mode*)
		MXddEnaSobBatOp: BOOL:=FALSE;
			(*FE operational mode*)
		MXddEnaVdwOperat: BOOL:=FALSE;
			(*FE operational mode*)
		MXenSmOperat: BOOL:=FALSE;
			(*FE operational mode*)
		MXddEnaKellyBaOp: BOOL:=FALSE;
			(*FE operational mode*)
		MXddEnKellyBatOp: BOOL:=FALSE;
			(*FE operational mode*)
		MXenRsvOperMode: BOOL:=FALSE;
			(*FE operational mode*)
		MXenDsmOperMode: BOOL:=FALSE;
			(*FE operational mode*)
		MDpresenEngSpeed: REAL:=0.0;
			(*present engine speed [rpm]*)
		MDfuelCont: REAL:=0.00;
			(*fuel tank content [%]*)
		MWmaInfFuel: INT:=0;
			(*LiDAT fuel content*)
		MRservHourToNext: REAL:=0.0;
			(*service hours until next service*)
		MDSrvMachStdRemT: REAL:=0.0;
			(*LiDAT operation hours to next service*)
		MDmaInfOpTime: REAL:=0.0;
			(*LiDAT operation hours engine*)
		MDgpsLatitude: REAL:=0.0;
			(*gps coordinates latitude in degree, positive is north, negative is south*)
		MDgpsLongitude: REAL:=0.0;
			(*gps coordinates longitude in degree, positive is east, negative is west*)
		MDgpsAltitude: REAL:=0.0;
			(*gps coordinates altitude in m*)
		MDacKeySerial: UDINT:=0;
			(*AC serial of the actual ignition key*)
	END_VAR
	VAR_EXTERNAL CONSTANT
		MSG_LID: UDINT:=0;
			(* message group "remote" *)
		MSG_LID_EVENT: UDINT:=0;
			(* message subgroup "event" for group "lidat" *)
		MSG_APP: UDINT:=0;
			(* message group "applicat" *)
		MSG_APP_SERVICE: UDINT:=0;
			(* message subgroup "service" for group "applicat" *)
		MSG_INFO: UINT:=0;
			(* message priority: "info" *)
		MSG_UNAWARE: UINT:=0;
			(* message priority: "unaware" *)
	END_VAR
	VAR_EXTERNAL RETAIN
		MXenExtOperMode: BOOL:=FALSE;
			(*enable external operation mode*)
		MXserviceNotAckn: BOOL:=FALSE;
			(*service not acknowledged*)
		MXmachSerialOk: BOOL:=FALSE;
			(*machine serial is activated*)
		MXmachTypeOk: BOOL:=FALSE;
			(*machine type is activated*)
		MXmachTypeLB16: BOOL:=FALSE;
			(*machine type LB16 activated*)
		MXmachTypeLB20: BOOL:=FALSE;
			(*machine type LB20 activated*)
		MXmachTypeLB24: BOOL:=FALSE;
			(*machine type LB24 activated*)
		MXmachTypeLB28: BOOL:=FALSE;
			(*machine type LB28 activated*)
		MXmachTypeLB36: BOOL:=FALSE;
			(*machine type LB36 activated*)
		MXmachTypeLRB125: BOOL:=FALSE;
			(*machine type LRB125 activated*)
		MXmachTypeLRB155: BOOL:=FALSE;
			(*machine type LRB155 activated*)
		MXmachTypeLRB255: BOOL:=FALSE;
			(*machine type LRB255 activated*)
		MXmachTypeLR1100: BOOL:=FALSE;
			(*machine type LR1100 activated*)
		MXmachTypeLR1130: BOOL:=FALSE;
			(*machine type LR1130 activated*)
		MXmachTypeLR1160: BOOL:=FALSE;
			(*machine type LR1160 activated*)
		MXmachTypeLR1200: BOOL:=FALSE;
			(*machine type LR1200 activated*)
		MXmachTypeLR1280: BOOL:=FALSE;
			(*machine type LR1280 activated*)
		MXmachTypeLR1300: BOOL:=FALSE;
			(*machine type LR1300 activated*)
		MXmachTypeHS8030: BOOL:=FALSE;
			(*machine type HS8045 activated*)
		MXmachTypeHS8040: BOOL:=FALSE;
			(*machine type HS8040 activated*)
		MXmachTypeHS8050: BOOL:=FALSE;
			(*machine type HS8050 activated*)
		MXmachTypeHS8070: BOOL:=FALSE;
			(*machine type HS8070 activated*)
		MXmachTypeHS8100: BOOL:=FALSE;
			(*machine type HS8100 activated*)
		MXmachTypeHS8120: BOOL:=FALSE;
			(*machine type HS8120 activated*)
		MXmachTypeHS8160: BOOL:=FALSE;
			(*machine type HS8160 activated*)
		MXmachTypeHS8200: BOOL:=FALSE;
			(*machine type HS8200 activated*)
		MXleaderOper: BOOL:=FALSE;
			(*leader operation active*)
		MXcoucarOper: BOOL:=FALSE;
			(*counterweight carrier operation mode active*)
		MXtranspOper: BOOL:=FALSE;
			(*transportation operation mode active*)
		MDengOperatHour: REAL:=0.0;
			(*operation houres diesel engine*)
		MRservHourNext: REAL:=0.0;
			(*service hours next service*)
		MDmaFuelConsSum: UDINT:=0;
			(*LiDAT fuel consumption absolut [l]*)
		MDfuelConAbs_Lit: UDINT:=0;
			(*engine fuel consumption absolut [l]*)
	END_VAR
	VAR_EXTERNAL CONSTANT RETAIN
		CDmachinSerialNr: UDINT:=0;
			(*serial number of the machine*)
		CDmachinSpecType: REAL:=0.0;
			(*specific type of the machine*)
	END_VAR
	VAR 
		LXinitOk: BOOL:=FALSE;
		LXgpsValid: BOOL:=FALSE;
		LXlidatState1: BOOL:=FALSE;
		LXlidatState2: BOOL:=FALSE;
		LXlidatState3: BOOL:=FALSE;
		LXlidatState4: BOOL:=FALSE;
		LDLidOpTime: UDINT:=0;
		LDopModeCode: UDINT:=0;
		LRmachinSpecType: REAL:=0.0;
		Message0: MSGGrpEdgePut2UD;
		Message1: MSGGrpEdgePut2UD;
		Message2: MSGGrpEdgePut2UD;
		Message3: MSGGrpEdgePut2UD;
		Message4: MSGGrpEdgePut2UD;
		Message5: MSGStkd2UD2UD;
		Message6: MSGStkd2UD2UD;
		Message7: MSGStkd2UD2UD;
		Message8: MSGGrpEdgePut2UD;
		Message9: MSGGrpEdgePut2UD;
		Message10: MSGGrpEdgePut2UD;
		Message11: MSGGrpEdgePut2UD;
		R_TRIG1: R_TRIG;
		R_TRIG2: R_TRIG;
		R_TRIG3: R_TRIG;
		R_TRIG4: R_TRIG;
		R_TRIG5: R_TRIG;
		R_TRIG6: R_TRIG;
		R_TRIG7: R_TRIG;
		R_TRIG8: R_TRIG;
		F_TRIG1: F_TRIG;
		F_TRIG2: F_TRIG;
		F_TRIG3: F_TRIG;
		F_TRIG4: F_TRIG;
		F_TRIG5: F_TRIG;
		TOF1: TOF;
		GPS1: GPScoordinate;
		RemAccSet1: RemoteAccessSet;
		RemAccGet1: RemoteAccessGet;
		CorrValue_UDInt1: CorrValue_UDInt;
		CorrValue_Real1: CorrValue_Real;
	END_VAR
'FBD'
BODY
    WORKSPACE
        NETWORK_LIST_TYPE := NWTYPEFBD ;
        ACTIVE_NETWORK := 0 ;
    END_WORKSPACE
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 5 ;
        NETWORK_BODY
B(B_VARIN,,MDengOperatHour,9,2,11,4,);
B(B_VARIN,,3600.0,9,3,11,5,);
B(B_F,@MUL-2,,11,1,16,5,);
B(B_F,real_to_udint,,16,1,27,4,);
B(B_VAROUT,,LDLidOpTime,27,2,29,4,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_VARIN,,LXinitOk,9,4,11,6,);
B(B_COMMENT,,init first time,1,1,27,2,);
B(B_F,not,,11,3,16,6,);
B(B_JUMP,,init,16,4,18,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_COMMENT,,enable remot access by modem,1,1,27,2,);
B(B_FB,RemoteAccessSet,RemAccSet1,14,4,25,7,);
B(B_VARIN,,MXenabRemAccess,12,5,14,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_COMMENT,,check remot access by modem,1,1,27,2,);
B(B_FB,RemoteAccessGet,RemAccGet1,14,4,27,7,);
B(B_VAROUT,,MXremAccessState,27,5,29,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 19 ;
        NETWORK_BODY
B(B_COMMENT,,get GPS coordinates,1,1,27,2,);
B(B_FB,GPScoordinate,GPS1,11,4,22,11,);
B(B_F,@DIV,,34,6,39,10,);
B(B_F,@DIV,,34,10,39,14,);
B(B_F,@DIV,,34,14,39,18,);
B(B_VARIN,,1000000.0,32,8,34,10,);
B(B_VARIN,,1000000.0,32,12,34,14,);
B(B_VARIN,,1000.0,32,16,34,18,);
B(B_F,dint_to_real,,23,6,34,9,);
B(B_F,dint_to_real,,23,10,34,13,);
B(B_F,dint_to_real,,23,14,34,17,);
B(B_VAROUT,,LXgpsValid,22,5,24,7,);
B(B_VAROUT,,MDgpsLatitude,39,7,41,9,);
B(B_VAROUT,,MDgpsLongitude,39,11,41,13,);
B(B_VAROUT,,MDgpsAltitude,39,15,41,17,);
L(22,8,23,8);
L(22,9,23,9);
L(23,9,23,12);
L(22,10,22,16);
L(22,16,23,16);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,set message time to next service,1,1,27,2,);
B(B_VAROUT,,MDSrvMachStdRemT,11,3,13,5,);
B(B_VARIN,,MRservHourToNext,9,3,11,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,calculate fuel consumption absolut,1,1,40,2,);
B(B_VARIN,,MDfuelConAbs_Lit,9,3,11,5,);
B(B_VAROUT,,MDmaFuelConsSum,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_COMMENT,,set actual fuel content,1,1,27,2,);
B(B_VARIN,,MDfuelCont,9,4,11,6,);
B(B_F,real_to_int,,11,3,21,6,);
B(B_VAROUT,,MWmaInfFuel,21,4,23,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,set operational hours engine,1,1,27,2,);
B(B_VAROUT,,MDmaInfOpTime,11,3,13,5,);
B(B_VARIN,,MDengOperatHour,9,3,11,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 15 ;
        NETWORK_BODY
B(B_F,not,,19,3,24,6,);
B(B_VAROUT,,LXlidatState1,24,4,26,6,);
B(B_VAROUT,,LXlidatState2,24,7,26,9,);
B(B_VAROUT,,LXlidatState3,24,11,26,13,);
B(B_COMMENT,,set lidat state,1,1,27,2,);
B(B_VARIN,,MXminEngineSpeed,16,4,18,6,);
B(B_F,@AND-2,,19,6,24,10,0N);
B(B_F,@AND-2,,19,10,24,14,);
B(B_FB,TOF,TOF1,11,7,16,11,);
B(B_VARIN,,T#30s,9,9,11,11,);
B(B_VARIN,,MXanyFunctActive,9,8,11,10,);
B(B_COMMENT,,LXlidatState4 wird in LWN nicht gesetzt~ da das FW eine untergeodnete Rolle spielt.ø^Der State FW kommt vom Radlader. Für diese Maschine ist der Fahrbetrieb elementar!,31,12,65,14,);
L(18,5,19,5);
L(18,8,19,8);
L(17,13,19,13);
L(18,12,19,12);
L(18,5,18,12);
L(17,9,17,13);
L(16,9,19,9);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_VARIN,,LXlidatState1,7,2,9,4,);
B(B_FB,R_TRIG,R_TRIG1,9,1,16,4,);
B(B_VARIN,,MSG_LID,18,4,20,6,);
B(B_VARIN,,MSG_LID_EVENT,18,5,20,7,);
B(B_VARIN,,MSG_UNAWARE,18,7,20,9,);
B(B_VARIN,,16#93000001,18,6,20,8,);
B(B_VARIN,,2466250754,18,8,20,10,);
B(B_VARIN,,LDLidOpTime,18,9,20,11,);
B(B_FB,MSGGrpEdgePut2UD,Message1,20,1,32,11,);
L(16,3,20,3);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_VARIN,,LXlidatState2,7,2,9,4,);
B(B_FB,R_TRIG,R_TRIG2,9,1,16,4,);
B(B_VARIN,,MSG_LID,18,4,20,6,);
B(B_VARIN,,MSG_LID_EVENT,18,5,20,7,);
B(B_VARIN,,MSG_UNAWARE,18,7,20,9,);
B(B_VARIN,,16#93000001,18,6,20,8,);
B(B_VARIN,,LDLidOpTime,18,9,20,11,);
B(B_VARIN,,2466250755,18,8,20,10,);
B(B_FB,MSGGrpEdgePut2UD,Message2,20,1,32,11,);
L(16,3,20,3);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_VARIN,,LXlidatState3,7,2,9,4,);
B(B_FB,R_TRIG,R_TRIG3,9,1,16,4,);
B(B_VARIN,,MSG_LID,18,4,20,6,);
B(B_VARIN,,MSG_LID_EVENT,18,5,20,7,);
B(B_VARIN,,MSG_UNAWARE,18,7,20,9,);
B(B_VARIN,,16#93000001,18,6,20,8,);
B(B_VARIN,,LDLidOpTime,18,9,20,11,);
B(B_VARIN,,2466250756,18,8,20,10,);
B(B_FB,MSGGrpEdgePut2UD,Message3,20,1,32,11,);
L(16,3,20,3);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_VARIN,,LXlidatState4,7,2,9,4,);
B(B_FB,R_TRIG,R_TRIG4,9,1,16,4,);
B(B_VARIN,,MSG_LID,18,4,20,6,);
B(B_VARIN,,MSG_LID_EVENT,18,5,20,7,);
B(B_VARIN,,MSG_UNAWARE,18,7,20,9,);
B(B_VARIN,,16#93000001,18,6,20,8,);
B(B_VARIN,,LDLidOpTime,18,9,20,11,);
B(B_VARIN,,2466250757,18,8,20,10,);
B(B_FB,MSGGrpEdgePut2UD,Message4,20,1,32,11,);
L(16,3,20,3);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 20 ;
        NETWORK_BODY
B(B_VARIN,,MSG_APP,37,6,39,8,);
B(B_VARIN,,MSG_APP_SERVICE,37,7,39,9,);
B(B_VARIN,,16#A101,37,8,39,10,);
B(B_VARIN,,MSG_UNAWARE,37,9,39,11,);
B(B_VARIN,,2264965379,37,10,39,12,);
B(B_VARIN,,MDacKeySerial,37,11,39,13,);
B(B_VARIN,,MSG_APP,37,12,39,14,);
B(B_VARIN,,MSG_APP_SERVICE,37,13,39,15,);
B(B_VARIN,,16#A10B,37,14,39,16,);
B(B_VARIN,,MSG_UNAWARE,37,15,39,17,);
B(B_FB,MSGStkd2UD2UD,Message5,39,3,49,19,);
B(B_VARIN,,3600.0,12,17,14,19,);
B(B_F,@MUL-2,,14,15,19,19,);
B(B_F,real_to_udint,,19,15,30,18,);
B(B_VARIN,,LDLidOpTime,37,17,39,19,);
B(B_VARIN,,MRservHourNext,12,16,14,18,);
B(B_COMMENT,,set service message acknowledged,1,1,27,2,);
B(B_VARIN,,MXservSetAckn,22,4,24,6,);
B(B_F,@AND-3,,24,3,29,8,0NN);
B(B_FB,F_TRIG,F_TRIG1,17,7,24,10,);
B(B_VARIN,,MXserviceNotAckn,15,5,17,7,);
B(B_COMMENT,,16#8700A103,26,11,32,12,);
L(30,17,39,17);
L(29,5,39,5);
L(24,7,24,9);
L(17,6,24,6);
L(17,6,17,9);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 20 ;
        NETWORK_BODY
B(B_VARIN,,MSG_APP,37,6,39,8,);
B(B_VARIN,,MSG_APP_SERVICE,37,7,39,9,);
B(B_VARIN,,16#8700A111,37,8,39,10,);
B(B_VARIN,,MSG_UNAWARE,37,9,39,11,);
B(B_VARIN,,2264965379,37,10,39,12,);
B(B_VARIN,,MDacKeySerial,37,11,39,13,);
B(B_VARIN,,MSG_APP,37,12,39,14,);
B(B_VARIN,,MSG_APP_SERVICE,37,13,39,15,);
B(B_VARIN,,16#8700A112,37,14,39,16,);
B(B_VARIN,,MSG_UNAWARE,37,15,39,17,);
B(B_FB,MSGStkd2UD2UD,Message6,39,3,49,19,);
B(B_VARIN,,3600.0,12,17,14,19,);
B(B_F,@MUL-2,,14,15,19,19,);
B(B_F,real_to_udint,,19,15,30,18,);
B(B_VARIN,,LDLidOpTime,37,17,39,19,);
B(B_VARIN,,MRservHourNext,12,16,14,18,);
B(B_COMMENT,,set service message acknowledged after service window,1,1,27,2,);
B(B_VARIN,,MXservSetAckn,22,4,24,6,);
B(B_COMMENT,,16#8700A103,26,11,32,12,);
B(B_VARIN,,MXserviceNotAckn,22,5,24,7,);
B(B_F,@AND-2,,24,3,29,7,);
L(30,17,39,17);
L(29,5,39,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 19 ;
        NETWORK_BODY
B(B_COMMENT,,set service message NOT acknowledged,1,1,27,2,);
B(B_VARIN,,MSG_APP,37,5,39,7,);
B(B_VARIN,,MSG_APP_SERVICE,37,6,39,8,);
B(B_VARIN,,16#A100,37,7,39,9,);
B(B_VARIN,,MSG_UNAWARE,37,8,39,10,);
B(B_VARIN,,2264965379,37,9,39,11,);
B(B_VARIN,,MSG_APP,37,11,39,13,);
B(B_VARIN,,MSG_APP_SERVICE,37,12,39,14,);
B(B_VARIN,,16#A102,37,13,39,15,);
B(B_VARIN,,MSG_UNAWARE,37,14,39,16,);
B(B_FB,MSGStkd2UD2UD,Message7,39,2,49,18,);
B(B_VARIN,,3600.0,12,16,14,18,);
B(B_F,@MUL-2,,14,14,19,18,);
B(B_F,real_to_udint,,19,14,30,17,);
B(B_VARIN,,LDLidOpTime,37,16,39,18,);
B(B_VARIN,,MRservHourNext,12,15,14,17,);
B(B_VARIN,,MXservSetNotAckn,37,3,39,5,);
B(B_COMMENT,,16#8700A103,26,10,32,11,);
L(30,16,39,16);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 22 ;
        NETWORK_BODY
B(B_F,sel,,12,14,17,19,);
B(B_VARIN,,MXenabMainOperat,10,15,12,17,);
B(B_VARIN,,2466250791,10,17,12,19,);
B(B_F,sel,,19,13,24,18,);
B(B_F,sel,,26,12,31,17,);
B(B_F,sel,,33,11,38,16,);
B(B_F,sel,,40,10,45,15,);
B(B_F,sel,,47,9,52,14,);
B(B_F,sel,,54,8,59,13,);
B(B_F,sel,,61,7,66,12,);
B(B_VARIN,,MXenabDgcOperat,16,12,18,14,);
B(B_VARIN,,MXenablVibOperat,23,11,25,13,);
B(B_VARIN,,MXenabHyGrabOper,37,9,39,11,);
B(B_VARIN,,MXenablHamOperat,30,10,32,12,);
B(B_F,sel,,68,6,73,11,);
B(B_F,sel,,75,5,80,10,);
B(B_F,sel,,82,4,87,9,);
B(B_F,sel,,89,3,94,8,);
B(B_VARIN,,LDopModeCode,10,16,12,18,);
B(B_VARIN,,2466250792,16,19,18,21,);
B(B_F,sel,,96,2,101,7,);
B(B_VAROUT,,LDopModeCode,101,3,103,5,);
B(B_VARIN,,MXenabDragliOper,93,1,95,3,);
B(B_VARIN,,MXenExtOperMode,86,2,88,4,);
B(B_VARIN,,MXenablDrillOper,79,3,81,5,);
B(B_VARIN,,MXenabKelGrabOpe,72,4,74,6,);
B(B_VARIN,,MXenabHyGrabHose,65,5,67,7,);
B(B_VARIN,,MXadSMHydrGrab,58,6,60,8,);
B(B_VARIN,,MXadSBHydrGrab,51,7,53,9,);
B(B_VARIN,,MXadLEHydrGrab,44,8,46,10,);
B(B_VARIN,,2466250793,23,18,25,20,);
B(B_VARIN,,2466250794,30,17,32,19,);
B(B_VARIN,,2466250795,37,16,39,18,);
B(B_VARIN,,2466250796,44,15,46,17,);
B(B_VARIN,,2466250797,51,14,53,16,);
B(B_VARIN,,2466250798,58,13,60,15,);
B(B_VARIN,,2466250799,65,12,67,14,);
B(B_VARIN,,2466250800,72,11,74,13,);
B(B_VARIN,,2466250801,79,10,81,12,);
B(B_VARIN,,2466250802,86,9,88,11,);
B(B_VARIN,,2466250803,93,8,95,10,);
B(B_COMMENT,,set message operational mode,1,1,27,2,);
L(18,13,18,15);
L(95,2,95,4);
L(88,3,88,5);
L(81,4,81,6);
L(74,5,74,7);
L(67,6,67,8);
L(60,7,60,9);
L(53,8,53,10);
L(46,9,46,11);
L(39,10,39,12);
L(32,11,32,13);
L(25,12,25,14);
L(24,15,26,15);
L(25,14,26,14);
L(18,17,18,20);
L(18,17,19,17);
L(17,16,19,16);
L(18,15,19,15);
L(25,16,25,19);
L(25,16,26,16);
L(32,15,32,18);
L(31,14,33,14);
L(32,13,33,13);
L(32,15,33,15);
L(39,14,39,17);
L(38,13,40,13);
L(39,12,40,12);
L(39,14,40,14);
L(46,13,46,16);
L(45,12,47,12);
L(46,11,47,11);
L(46,13,47,13);
L(53,12,53,15);
L(52,11,54,11);
L(53,10,54,10);
L(53,12,54,12);
L(60,11,60,14);
L(59,10,61,10);
L(60,9,61,9);
L(60,11,61,11);
L(67,10,67,13);
L(66,9,68,9);
L(67,8,68,8);
L(67,10,68,10);
L(74,9,74,12);
L(73,8,75,8);
L(74,7,75,7);
L(74,9,75,9);
L(81,8,81,11);
L(80,7,82,7);
L(81,6,82,6);
L(81,8,82,8);
L(88,7,88,10);
L(87,6,89,6);
L(88,5,89,5);
L(88,7,89,7);
L(95,6,95,9);
L(94,5,96,5);
L(95,4,96,4);
L(95,6,96,6);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 20 ;
        NETWORK_BODY
B(B_F,sel,,12,12,17,17,);
B(B_VARIN,,LDopModeCode,10,14,12,16,);
B(B_VARIN,,FALSE,10,13,12,15,);
B(B_VARIN,,2466250804,10,15,12,17,);
B(B_F,sel,,26,10,31,15,);
B(B_F,sel,,33,9,38,14,);
B(B_F,sel,,40,8,45,13,);
B(B_F,sel,,47,7,52,12,);
B(B_F,sel,,54,6,59,11,);
B(B_F,sel,,61,5,66,10,);
B(B_VARIN,,MXPuPu2Enable,23,9,25,11,);
B(B_VARIN,,MXddEnaSobBatOp,37,7,39,9,);
B(B_VARIN,,MXddEnaSobBaOp,30,8,32,10,);
B(B_F,sel,,68,4,73,9,);
B(B_F,sel,,75,3,80,8,);
B(B_F,sel,,82,2,87,7,);
B(B_VARIN,,MXenDsmOperMode,79,1,81,3,);
B(B_VARIN,,MXenRsvOperMode,72,2,74,4,);
B(B_VARIN,,MXddEnKellyBatOp,65,3,67,5,);
B(B_VARIN,,MXddEnaKellyBaOp,58,4,60,6,);
B(B_VARIN,,MXenSmOperat,51,5,53,7,);
B(B_VARIN,,MXddEnaVdwOperat,44,6,46,8,);
B(B_VARIN,,2466250806,23,16,25,18,);
B(B_VARIN,,2466250807,30,15,32,17,);
B(B_VARIN,,2466250808,37,14,39,16,);
B(B_VARIN,,2466250809,44,13,46,15,);
B(B_VARIN,,2466250810,51,12,53,14,);
B(B_VARIN,,2466250811,58,11,60,13,);
B(B_VARIN,,2466250812,65,10,67,12,);
B(B_VARIN,,2466250813,72,9,74,11,);
B(B_VARIN,,246625014,79,8,81,10,);
B(B_VAROUT,,LDopModeCode,87,3,89,5,);
B(B_F,sel,,19,11,24,16,);
B(B_VARIN,,MXPuPu1Enable,16,10,18,12,);
B(B_VARIN,,2466250805,16,17,18,19,);
B(B_COMMENT,,release operation modes FE,1,1,27,2,);
B(B_COMMENT,,without: main~ vibrator~ hammer~ external control (see HS/LR),7,4,31,5,);
L(81,2,81,4);
L(74,3,74,5);
L(67,4,67,6);
L(60,5,60,7);
L(53,6,53,8);
L(46,7,46,9);
L(39,8,39,10);
L(32,9,32,11);
L(25,10,25,12);
L(24,13,26,13);
L(25,12,26,12);
L(25,14,25,17);
L(25,14,26,14);
L(32,13,32,16);
L(31,12,33,12);
L(32,11,33,11);
L(32,13,33,13);
L(39,12,39,15);
L(38,11,40,11);
L(39,10,40,10);
L(39,12,40,12);
L(46,11,46,14);
L(45,10,47,10);
L(46,9,47,9);
L(46,11,47,11);
L(53,10,53,13);
L(52,9,54,9);
L(53,8,54,8);
L(53,10,54,10);
L(60,9,60,12);
L(59,8,61,8);
L(60,7,61,7);
L(60,9,61,9);
L(67,8,67,11);
L(66,7,68,7);
L(67,6,68,6);
L(67,8,68,8);
L(74,7,74,10);
L(73,6,75,6);
L(74,5,75,5);
L(74,7,75,7);
L(81,6,81,9);
L(80,5,82,5);
L(81,4,82,4);
L(81,6,82,6);
L(18,11,18,13);
L(17,14,19,14);
L(18,13,19,13);
L(18,15,18,18);
L(18,15,19,15);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 49 ;
        NETWORK_BODY
B(B_FB,R_TRIG,R_TRIG5,14,5,21,8,);
B(B_VARIN,,MSG_LID,35,8,37,10,);
B(B_VARIN,,MSG_LID_EVENT,35,9,37,11,);
B(B_VARIN,,MSG_INFO,35,11,37,13,);
B(B_VARIN,,16#93000001,35,10,37,12,);
B(B_VARIN,,LDopModeCode,35,12,37,14,);
B(B_VARIN,,LDLidOpTime,35,13,37,15,);
B(B_FB,MSGGrpEdgePut2UD,Message8,37,5,49,15,);
B(B_VARIN,,MSG_LID,35,19,37,21,);
B(B_VARIN,,MSG_LID_EVENT,35,20,37,22,);
B(B_VARIN,,MSG_INFO,35,22,37,24,);
B(B_VARIN,,16#93000001,35,21,37,23,);
B(B_VARIN,,2466250815,35,23,37,25,);
B(B_VARIN,,LDLidOpTime,35,24,37,26,);
B(B_FB,MSGGrpEdgePut2UD,Message9,37,16,49,26,);
B(B_VARIN,,MSG_LID,35,30,37,32,);
B(B_VARIN,,MSG_LID_EVENT,35,31,37,33,);
B(B_VARIN,,MSG_INFO,35,33,37,35,);
B(B_VARIN,,16#93000001,35,32,37,34,);
B(B_VARIN,,2466250816,35,34,37,36,);
B(B_VARIN,,LDLidOpTime,35,35,37,37,);
B(B_FB,MSGGrpEdgePut2UD,Message10,37,27,49,37,);
B(B_VARIN,,MSG_LID,35,41,37,43,);
B(B_VARIN,,MSG_LID_EVENT,35,42,37,44,);
B(B_VARIN,,MSG_INFO,35,44,37,46,);
B(B_VARIN,,16#93000001,35,43,37,45,);
B(B_VARIN,,2466250817,35,45,37,47,);
B(B_VARIN,,LDLidOpTime,35,46,37,48,);
B(B_FB,MSGGrpEdgePut2UD,Message11,37,38,49,48,);
B(B_FB,R_TRIG,R_TRIG6,14,17,21,20,);
B(B_VARIN,,MXleaderOper,12,18,14,20,);
B(B_F,@AND-2,,23,16,28,20,);
B(B_F,@AND-2,,23,20,28,24,);
B(B_FB,F_TRIG,F_TRIG3,14,21,21,24,);
B(B_FB,R_TRIG,R_TRIG8,14,39,21,42,);
B(B_VARIN,,MXtranspOper,12,40,14,42,);
B(B_F,@AND-2,,23,38,28,42,);
B(B_F,@AND-2,,23,42,28,46,);
B(B_FB,F_TRIG,F_TRIG5,14,43,21,46,);
B(B_FB,R_TRIG,R_TRIG7,14,28,21,31,);
B(B_VARIN,,MXcoucarOper,12,29,14,31,);
B(B_F,@AND-2,,23,27,28,31,);
B(B_F,@AND-2,,23,31,28,35,);
B(B_FB,F_TRIG,F_TRIG4,14,32,21,35,);
B(B_FB,F_TRIG,F_TRIG2,23,5,30,8,);
B(B_COMMENT,,Msg wird um einen scan verzögert~ damit die boolschen Variablenø^der Hauptbetriebsart richtig gesetzt sind.,23,1,48,3,);
B(B_F,@AND-2,,9,5,14,9,);
B(B_VARIN,,MXnewModeSelect,7,6,9,8,);
B(B_VARIN,,FALSE,7,7,9,9,);
B(B_COMMENT,,Derzeit noch unterdrückt~ da der JIRA Issueø^http://jira.zdv.liebherr.i/browse/LIDAT-1348ø^laut Roman Wambacher nicht passt undø^zuerst geklärt werden muss.,1,9,18,13,);
L(21,23,23,23);
L(22,7,22,44);
L(21,19,23,19);
L(14,19,14,23);
L(21,45,23,45);
L(21,41,23,41);
L(14,41,14,45);
L(28,41,28,44);
L(28,41,37,41);
L(28,40,37,40);
L(21,34,23,34);
L(21,30,23,30);
L(14,30,14,34);
L(28,29,37,29);
L(28,30,37,30);
L(28,30,28,33);
L(28,18,37,18);
L(28,19,37,19);
L(28,19,28,22);
L(22,44,23,44);
L(22,40,23,40);
L(22,33,23,33);
L(22,29,23,29);
L(22,22,23,22);
L(22,18,23,18);
L(21,7,23,7);
L(30,7,37,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_RETURN,,,14,1,16,3,);
B(B_VARIN,,TRUE,12,1,14,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL := init: ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VAROUT,,LXinitOk,14,1,16,3,);
B(B_VARIN,,TRUE,12,1,14,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_VARIN,,TRUE,12,2,14,4,);
B(B_VARIN,,MSG_LID,12,4,14,6,);
B(B_VARIN,,MSG_LID_EVENT,12,5,14,7,);
B(B_VARIN,,MSG_UNAWARE,12,7,14,9,);
B(B_VARIN,,16#93000001,12,6,14,8,);
B(B_VARIN,,2466250754,12,8,14,10,);
B(B_VARIN,,LDLidOpTime,12,9,14,11,);
B(B_FB,MSGGrpEdgePut2UD,Message0,14,1,26,11,);
B(B_COMMENT,,Diese MachineState Messgaes wurden von LBH übernommen.ø^Hier: Bei Zündung-Ein wird die Message übertragen: Motor gestoppt.,35,1,60,3,);
B(B_COMMENT,,LWN überträgt zunächst jeden Statewechsel direkt als Message.ø^(LBH mittelt immer über 5 Minuten),35,3,60,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value serial number of the machine,1,1,27,2,);
B(B_VARIN,,100001,9,5,11,7,);
B(B_VARIN,,100001,9,6,11,8,);
B(B_VARIN,,999999,9,7,11,9,);
B(B_VARIN,,CDmachinSerialNr,9,8,11,10,);
B(B_FB,CorrValue_UDInt,CorrValue_UDInt1,11,4,24,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value specific type of the machine,1,1,27,2,);
B(B_VARIN,,CDmachinSpecType,9,8,11,10,);
B(B_FB,CorrValue_Real,CorrValue_Real1,11,4,23,10,);
B(B_VARIN,,0.0,9,5,11,7,);
B(B_VARIN,,0.0,9,6,11,8,);
B(B_VARIN,,999999.99,9,7,11,9,);
B(B_COMMENT,,ACHTUNG: CorrValue_Real1 wird weiterø^unten nochmals gesetzt,24,5,40,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_COMMENT,,set machine specific type (only when nothing selected),1,1,27,2,);
B(B_F,@AND-2,,11,3,16,7,0N);
B(B_JUMP,,maType,16,4,18,6,);
B(B_VARIN,,MXmachTypeOk,9,5,11,7,);
B(B_VARIN,,MXmachSerialOk,9,4,11,6,);
B(B_COMMENT,,Hier wird der specific type auf einen Grundwert gesetzt~ø^wenn er nicht eingestellt wurde.,30,4,52,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 39 ;
        NETWORK_BODY
B(B_COMMENT,,set machine type~ when specific type ist given,1,1,27,2,);
B(B_F,@EQ-2,,23,6,28,10,);
B(B_VARIN,,16,19,8,21,10,);
B(B_F,@EQ-2,,23,10,28,14,);
B(B_VARIN,,20,19,12,21,14,);
B(B_F,@EQ-2,,23,14,28,18,);
B(B_VARIN,,24,19,16,21,18,);
B(B_F,@EQ-2,,23,18,28,22,);
B(B_VARIN,,28,19,20,21,22,);
B(B_F,@EQ-2,,23,22,28,26,);
B(B_VARIN,,36,19,24,21,26,);
B(B_F,@EQ-2,,23,26,28,30,);
B(B_VARIN,,125,19,28,21,30,);
B(B_F,@EQ-2,,23,30,28,34,);
B(B_VARIN,,155,19,32,21,34,);
B(B_F,@EQ-2,,23,34,28,38,);
B(B_VARIN,,255,19,36,21,38,);
B(B_VARIN,,CDmachinSpecType,9,4,11,6,);
B(B_F,trunc_to_int,,11,3,22,6,);
B(B_VAROUT,,MXmachTypeLB16,28,7,30,9,);
B(B_VAROUT,,MXmachTypeLB20,28,11,30,13,);
B(B_VAROUT,,MXmachTypeLB24,28,15,30,17,);
B(B_VAROUT,,MXmachTypeLB28,28,19,30,21,);
B(B_VAROUT,,MXmachTypeLB36,28,23,30,25,);
B(B_VAROUT,,MXmachTypeLRB125,28,27,30,29,);
B(B_VAROUT,,MXmachTypeLRB155,28,31,30,33,);
B(B_VAROUT,,MXmachTypeLRB255,28,35,30,37,);
B(B_F,@EQ-2,,42,6,47,10,);
B(B_VARIN,,1100,38,8,40,10,);
B(B_F,@EQ-2,,42,10,47,14,);
B(B_VARIN,,1130,38,12,40,14,);
B(B_VAROUT,,MXmachTypeLR1100,47,7,49,9,);
B(B_VAROUT,,MXmachTypeLR1130,47,11,49,13,);
B(B_F,@EQ-2,,42,14,47,18,);
B(B_VARIN,,1160,38,16,40,18,);
B(B_F,@EQ-2,,42,18,47,22,);
B(B_VARIN,,1200,38,20,40,22,);
B(B_VAROUT,,MXmachTypeLR1160,47,15,49,17,);
B(B_VAROUT,,MXmachTypeLR1200,47,19,49,21,);
B(B_F,@EQ-2,,42,22,47,26,);
B(B_VARIN,,1280,38,24,40,26,);
B(B_F,@EQ-2,,42,26,47,30,);
B(B_VARIN,,1300,38,28,40,30,);
B(B_VAROUT,,MXmachTypeLR1300,47,27,49,29,);
B(B_VAROUT,,MXmachTypeLR1280,47,23,49,25,);
B(B_F,@EQ-2,,62,10,67,14,);
B(B_VARIN,,8040,58,12,60,14,);
B(B_F,@EQ-2,,62,14,67,18,);
B(B_VARIN,,8050,58,16,60,18,);
B(B_F,@EQ-2,,62,18,67,22,);
B(B_VARIN,,8070,58,20,60,22,);
B(B_F,@EQ-2,,62,22,67,26,);
B(B_VARIN,,8100,58,24,60,26,);
B(B_F,@EQ-2,,62,26,67,30,);
B(B_VARIN,,8120,58,28,60,30,);
B(B_F,@EQ-2,,62,30,67,34,);
B(B_VARIN,,8160,58,32,60,34,);
B(B_F,@EQ-2,,62,34,67,38,);
B(B_VARIN,,8200,58,36,60,38,);
B(B_VAROUT,,MXmachTypeHS8040,67,11,69,13,);
B(B_VAROUT,,MXmachTypeHS8050,67,15,69,17,);
B(B_VAROUT,,MXmachTypeHS8070,67,19,69,21,);
B(B_VAROUT,,MXmachTypeHS8100,67,23,69,25,);
B(B_VAROUT,,MXmachTypeHS8120,67,27,69,29,);
B(B_VAROUT,,MXmachTypeHS8160,67,31,69,33,);
B(B_VAROUT,,MXmachTypeHS8200,67,35,69,37,);
B(B_F,@EQ-2,,62,6,67,10,);
B(B_VARIN,,8030,58,8,60,10,);
B(B_VAROUT,,MXmachTypeHS8030,67,7,69,9,);
L(21,9,23,9);
L(22,8,23,8);
L(21,13,23,13);
L(22,12,23,12);
L(21,17,23,17);
L(22,16,23,16);
L(21,21,23,21);
L(22,20,23,20);
L(21,25,23,25);
L(22,24,23,24);
L(21,29,23,29);
L(22,28,23,28);
L(21,33,23,33);
L(22,32,23,32);
L(21,37,23,37);
L(22,36,23,36);
L(40,9,42,9);
L(41,8,42,8);
L(40,13,42,13);
L(41,12,42,12);
L(40,17,42,17);
L(41,16,42,16);
L(40,21,42,21);
L(41,20,42,20);
L(40,25,42,25);
L(41,24,42,24);
L(40,29,42,29);
L(41,28,42,28);
L(61,36,62,36);
L(60,13,62,13);
L(61,12,62,12);
L(60,17,62,17);
L(61,16,62,16);
L(60,21,62,21);
L(61,20,62,20);
L(60,25,62,25);
L(61,24,62,24);
L(60,29,62,29);
L(61,28,62,28);
L(60,33,62,33);
L(61,32,62,32);
L(60,37,62,37);
L(60,9,62,9);
L(61,8,62,8);
L(22,5,61,5);
L(22,5,22,36);
L(41,5,41,28);
L(61,5,61,36);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_RETURN,,,14,1,16,3,);
B(B_VARIN,,TRUE,12,1,14,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL := maType: ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 44 ;
        NETWORK_BODY
B(B_COMMENT,,set machine type LB,1,1,27,2,);
B(B_F,@GE-2,,13,3,18,7,);
B(B_VARIN,,115001,9,5,11,7,);
B(B_VARIN,,115099,9,9,11,11,);
B(B_F,@GE-2,,13,11,18,15,);
B(B_VARIN,,115100,9,13,11,15,);
B(B_VARIN,,115299,9,17,11,19,);
B(B_F,@AND-2,,18,3,23,7,);
B(B_F,@AND-2,,18,11,23,15,);
B(B_VAROUT,,MXmachTypeLB16,23,4,25,6,);
B(B_VAROUT,,MXmachTypeLB20,23,12,25,14,);
B(B_VARIN,,CDmachinSerialNr,10,4,12,6,);
B(B_F,@GE-2,,13,19,18,23,);
B(B_VARIN,,115300,9,21,11,23,);
B(B_VARIN,,115499,9,25,11,27,);
B(B_F,@AND-2,,18,19,23,23,);
B(B_VAROUT,,MXmachTypeLB24,23,20,25,22,);
B(B_F,@GE-2,,13,27,18,31,);
B(B_VARIN,,115500,9,29,11,31,);
B(B_VARIN,,115799,9,33,11,35,);
B(B_F,@AND-2,,18,27,23,31,);
B(B_VAROUT,,MXmachTypeLB28,23,28,25,30,);
B(B_F,@GE-2,,13,35,18,39,);
B(B_VARIN,,115800,9,37,11,39,);
B(B_VARIN,,115899,9,41,11,43,);
B(B_F,@AND-2,,18,35,23,39,);
B(B_VAROUT,,MXmachTypeLB36,23,36,25,38,);
B(B_F,@LE-2,,13,7,18,11,);
B(B_F,@LE-2,,13,15,18,19,);
B(B_F,@LE-2,,13,23,18,27,);
B(B_F,@LE-2,,13,31,18,35,);
B(B_F,@LE-2,,13,39,18,43,);
L(11,6,13,6);
L(11,10,13,10);
L(11,14,13,14);
L(11,18,13,18);
L(12,5,13,5);
L(12,13,13,13);
L(18,14,18,17);
L(18,6,18,9);
L(11,22,13,22);
L(11,26,13,26);
L(12,21,13,21);
L(18,22,18,25);
L(11,30,13,30);
L(11,34,13,34);
L(12,29,13,29);
L(18,30,18,33);
L(11,38,13,38);
L(11,42,13,42);
L(12,37,13,37);
L(18,38,18,41);
L(12,5,12,41);
L(12,9,13,9);
L(12,17,13,17);
L(12,25,13,25);
L(12,33,13,33);
L(12,41,13,41);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_F,sel,,11,5,16,10,);
B(B_VARIN,,LRmachinSpecType,9,7,11,9,);
B(B_VARIN,,16.04,9,8,11,10,);
B(B_VARIN,,MXmachTypeLB16,9,6,11,8,);
B(B_F,sel,,25,4,30,9,);
B(B_F,sel,,39,3,44,8,);
B(B_F,sel,,53,2,58,7,);
B(B_F,sel,,67,1,72,6,);
B(B_VAROUT,,LRmachinSpecType,72,2,74,4,);
B(B_VARIN,,MXmachTypeLB24,37,4,39,6,);
B(B_VARIN,,MXmachTypeLB28,51,3,53,5,);
B(B_VARIN,,MXmachTypeLB36,65,2,67,4,);
B(B_VARIN,,MXmachTypeLB20,23,5,25,7,);
B(B_VARIN,,20.04,23,7,25,9,);
B(B_VARIN,,24.04,37,6,39,8,);
B(B_VARIN,,28.04,51,5,53,7,);
B(B_VARIN,,36.04,65,4,67,6,);
B(B_COMMENT,,SpecType Kennung für LB mit Master4 und Dieselmotoren Stufe 3A/Tier3 und Stufe 3B/Tier4pi,47,8,91,9,);
L(58,4,67,4);
L(44,5,53,5);
L(30,6,39,6);
L(16,7,25,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 28 ;
        NETWORK_BODY
B(B_COMMENT,,set machine type LRB,1,1,27,2,);
B(B_F,@GE-2,,13,3,18,7,);
B(B_VARIN,,111001,9,5,11,7,);
B(B_VARIN,,111399,9,9,11,11,);
B(B_F,@AND-2,,18,3,23,7,);
B(B_VARIN,,CDmachinSerialNr,10,4,12,6,);
B(B_F,@GE-2,,13,11,18,15,);
B(B_VARIN,,111400,9,13,11,15,);
B(B_VARIN,,111599,9,17,11,19,);
B(B_F,@AND-2,,18,11,23,15,);
B(B_F,@GE-2,,13,19,18,23,);
B(B_VARIN,,111600,9,21,11,23,);
B(B_VARIN,,111899,9,25,11,27,);
B(B_F,@AND-2,,18,19,23,23,);
B(B_F,@LE-2,,13,7,18,11,);
B(B_F,@LE-2,,13,15,18,19,);
B(B_F,@LE-2,,13,23,18,27,);
B(B_VAROUT,,MXmachTypeLRB125,23,4,25,6,);
B(B_VAROUT,,MXmachTypeLRB155,23,12,25,14,);
B(B_VAROUT,,MXmachTypeLRB255,23,20,25,22,);
L(11,6,13,6);
L(11,10,13,10);
L(12,5,13,5);
L(18,6,18,9);
L(11,14,13,14);
L(11,18,13,18);
L(12,13,13,13);
L(18,14,18,17);
L(11,22,13,22);
L(11,26,13,26);
L(12,21,13,21);
L(18,22,18,25);
L(12,9,13,9);
L(12,17,13,17);
L(12,25,13,25);
L(12,5,12,25);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_F,sel,,11,3,16,8,);
B(B_VARIN,,LRmachinSpecType,9,5,11,7,);
B(B_VARIN,,125.04,9,6,11,8,);
B(B_VARIN,,MXmachTypeLRB125,9,4,11,6,);
B(B_F,sel,,25,2,30,7,);
B(B_VARIN,,MXmachTypeLRB155,23,3,25,5,);
B(B_VARIN,,155.04,23,5,25,7,);
B(B_F,sel,,39,1,44,6,);
B(B_VARIN,,MXmachTypeLRB255,37,2,39,4,);
B(B_VARIN,,255.04,37,4,39,6,);
B(B_VAROUT,,LRmachinSpecType,44,2,46,4,);
B(B_COMMENT,,SpecType Kennung für LRB mit Master4 und Dieselmotoren Stufe 3A/Tier3 und Stufe 3B/Tier4pi,33,7,77,8,);
L(16,5,25,5);
L(30,4,39,4);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 52 ;
        NETWORK_BODY
B(B_COMMENT,,set machine type LR,1,1,27,2,);
B(B_F,@GE-2,,13,3,18,7,);
B(B_VARIN,,133001,9,5,11,7,);
B(B_VARIN,,133999,9,9,11,11,);
B(B_F,@GE-2,,13,11,18,15,);
B(B_VARIN,,137020,9,13,11,15,);
B(B_VARIN,,137999,9,17,11,19,);
B(B_F,@AND-2,,18,3,23,7,);
B(B_F,@AND-2,,18,11,23,15,);
B(B_VARIN,,CDmachinSerialNr,10,4,12,6,);
B(B_F,@GE-2,,13,19,18,23,);
B(B_VARIN,,134080,9,21,11,23,);
B(B_VARIN,,134999,9,25,11,27,);
B(B_F,@AND-2,,18,19,23,23,);
B(B_F,@GE-2,,13,27,18,31,);
B(B_VARIN,,135001,9,29,11,31,);
B(B_VARIN,,135999,9,33,11,35,);
B(B_F,@AND-2,,18,27,23,31,);
B(B_F,@GE-2,,13,35,18,39,);
B(B_VARIN,,136070,9,37,11,39,);
B(B_VARIN,,136999,9,41,11,43,);
B(B_F,@AND-2,,18,35,23,39,);
B(B_F,@GE-2,,13,43,18,47,);
B(B_VARIN,,138001,9,45,11,47,);
B(B_VARIN,,138999,9,49,11,51,);
B(B_F,@AND-2,,18,43,23,47,);
B(B_VAROUT,,MXmachTypeLR1100,23,4,25,6,);
B(B_VAROUT,,MXmachTypeLR1130,23,12,25,14,);
B(B_VAROUT,,MXmachTypeLR1160,23,20,25,22,);
B(B_VAROUT,,MXmachTypeLR1200,23,28,25,30,);
B(B_VAROUT,,MXmachTypeLR1280,23,36,25,38,);
B(B_VAROUT,,MXmachTypeLR1300,23,44,25,46,);
B(B_F,@LE-2,,13,7,18,11,);
B(B_F,@LE-2,,13,15,18,19,);
B(B_F,@LE-2,,13,23,18,27,);
B(B_F,@LE-2,,13,31,18,35,);
B(B_F,@LE-2,,13,39,18,43,);
B(B_F,@LE-2,,13,47,18,51,);
L(11,6,13,6);
L(11,10,13,10);
L(11,14,13,14);
L(11,18,13,18);
L(12,5,13,5);
L(12,13,13,13);
L(18,14,18,17);
L(18,6,18,9);
L(11,22,13,22);
L(11,26,13,26);
L(12,21,13,21);
L(18,22,18,25);
L(11,30,13,30);
L(11,34,13,34);
L(12,29,13,29);
L(18,30,18,33);
L(11,38,13,38);
L(11,42,13,42);
L(12,37,13,37);
L(18,38,18,41);
L(11,46,13,46);
L(11,50,13,50);
L(12,45,13,45);
L(18,46,18,49);
L(12,5,12,49);
L(12,9,13,9);
L(12,17,13,17);
L(12,25,13,25);
L(12,33,13,33);
L(12,41,13,41);
L(12,49,13,49);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_F,sel,,11,6,16,11,);
B(B_VARIN,,LRmachinSpecType,9,8,11,10,);
B(B_VARIN,,1100.03,9,9,11,11,);
B(B_VARIN,,MXmachTypeLR1100,9,7,11,9,);
B(B_F,sel,,25,5,30,10,);
B(B_F,sel,,39,4,44,9,);
B(B_F,sel,,53,3,58,8,);
B(B_F,sel,,67,2,72,7,);
B(B_VARIN,,MXmachTypeLR1160,37,5,39,7,);
B(B_VARIN,,MXmachTypeLR1200,51,4,53,6,);
B(B_VARIN,,MXmachTypeLR1280,65,3,67,5,);
B(B_VARIN,,MXmachTypeLR1130,23,6,25,8,);
B(B_VARIN,,1130.03,23,8,25,10,);
B(B_VARIN,,1160.03,37,7,39,9,);
B(B_VARIN,,1200.03,51,6,53,8,);
B(B_VARIN,,1280.03,65,5,67,7,);
B(B_F,sel,,81,1,86,6,);
B(B_VARIN,,MXmachTypeLR1300,79,2,81,4,);
B(B_VARIN,,1300.03,79,4,81,6,);
B(B_VAROUT,,LRmachinSpecType,86,2,88,4,);
B(B_COMMENT,,SpecType Kennung für LR mit Master4 und Dieselmotoren Stufe 3B/Tier4pi,5,1,44,2,);
L(58,5,67,5);
L(44,6,53,6);
L(30,7,39,7);
L(16,8,25,8);
L(72,4,81,4);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 46 ;
        NETWORK_BODY
B(B_COMMENT,,set machine type HS 8x5 and HS 8xxx,1,1,27,2,);
B(B_F,@GE-2,,13,5,18,9,);
B(B_VARIN,,182300,9,7,11,9,);
B(B_F,@GE-2,,13,21,18,25,);
B(B_VARIN,,182900,9,23,11,25,);
B(B_F,@AND-2,,18,5,23,9,);
B(B_F,@AND-2,,18,21,23,25,);
B(B_VAROUT,,MXmachTypeHS8050,23,6,25,8,);
B(B_VAROUT,,MXmachTypeHS8030,23,22,25,24,);
B(B_VARIN,,CDmachinSerialNr,10,3,12,5,);
B(B_F,@LT-2,,13,9,18,13,);
B(B_F,@LT-2,,13,25,18,29,);
B(B_F,@GE-2,,13,13,18,17,);
B(B_VARIN,,182500,9,15,11,17,);
B(B_F,@AND-2,,18,13,23,17,);
B(B_VAROUT,,MXmachTypeHS8040,23,14,25,16,);
B(B_F,@LT-2,,13,17,18,21,);
B(B_VARIN,,182999,9,27,11,29,);
B(B_F,@GE-2,,13,37,18,41,);
B(B_VARIN,,183500,9,39,11,41,);
B(B_F,@AND-2,,18,37,23,41,);
B(B_VAROUT,,MXmachTypeHS8070,23,38,25,40,);
B(B_F,@LT-2,,13,41,18,45,);
B(B_F,@GE-2,,13,29,18,33,);
B(B_VARIN,,183600,9,31,11,33,);
B(B_VARIN,,182499,9,35,11,37,);
B(B_F,@AND-2,,18,29,23,33,);
B(B_VAROUT,,MXmachTypeHS8050,23,30,25,32,);
B(B_F,@LE-2,,13,33,18,37,);
B(B_VARIN,,183999,9,43,11,45,);
B(B_F,@GE-2,,48,2,53,6,);
B(B_VARIN,,184800,44,4,46,6,);
B(B_VARIN,,184999,44,8,46,10,);
B(B_F,@AND-2,,53,2,58,6,);
B(B_VAROUT,,MXmachTypeHS8100,58,3,60,5,);
B(B_F,@LE-2,,48,6,53,10,);
B(B_F,@GE-2,,48,10,53,14,);
B(B_VARIN,,185200,44,12,46,14,);
B(B_VARIN,,185999,44,16,46,18,);
B(B_F,@AND-2,,53,10,58,14,);
B(B_VAROUT,,MXmachTypeHS8120,58,11,60,13,);
B(B_F,@LE-2,,48,14,53,18,);
B(B_F,@GE-2,,48,18,53,22,);
B(B_VARIN,,187500,44,20,46,22,);
B(B_VARIN,,187999,44,24,46,26,);
B(B_F,@AND-2,,53,18,58,22,);
B(B_VAROUT,,MXmachTypeHS8160,58,19,60,21,);
B(B_F,@LE-2,,48,22,53,26,);
B(B_F,@GE-2,,48,26,53,30,);
B(B_VARIN,,188250,44,28,46,30,);
B(B_VARIN,,188999,44,32,46,34,);
B(B_F,@AND-2,,53,26,58,30,);
B(B_VAROUT,,MXmachTypeHS8200,58,27,60,29,);
B(B_F,@LE-2,,48,30,53,34,);
L(11,8,13,8);
L(11,12,13,12);
L(11,24,13,24);
L(11,28,13,28);
L(12,23,13,23);
L(18,24,18,27);
L(18,8,18,11);
L(12,4,12,43);
L(12,7,13,7);
L(12,11,13,11);
L(12,27,13,27);
L(11,16,13,16);
L(11,20,13,20);
L(12,15,13,15);
L(18,16,18,19);
L(11,12,11,16);
L(12,4,48,4);
L(11,20,11,24);
L(12,19,13,19);
L(11,40,13,40);
L(11,44,13,44);
L(12,39,13,39);
L(18,40,18,43);
L(11,32,13,32);
L(11,36,13,36);
L(12,31,13,31);
L(18,32,18,35);
L(12,35,13,35);
L(47,4,47,32);
L(46,5,48,5);
L(46,9,48,9);
L(53,5,53,8);
L(47,8,48,8);
L(46,13,48,13);
L(46,17,48,17);
L(53,13,53,16);
L(47,16,48,16);
L(46,21,48,21);
L(46,25,48,25);
L(47,20,48,20);
L(53,21,53,24);
L(47,24,48,24);
L(46,29,48,29);
L(46,33,48,33);
L(53,29,53,32);
L(47,28,48,28);
L(47,12,48,12);
L(47,32,48,32);
L(12,43,13,43);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 14 ;
        NETWORK_BODY
B(B_COMMENT,,SpecType Kennung für HS mit Master4 und Dieselmotoren Stufe 3B/Tier4pi,1,1,40,2,);
B(B_F,sel,,25,7,30,12,);
B(B_VARIN,,8040.01,23,10,25,12,);
B(B_VARIN,,MXmachTypeHS8040,23,8,25,10,);
B(B_F,sel,,39,6,44,11,);
B(B_F,sel,,53,5,58,10,);
B(B_F,sel,,67,4,72,9,);
B(B_F,sel,,81,3,86,8,);
B(B_VARIN,,MXmachTypeHS8070,51,6,53,8,);
B(B_VARIN,,MXmachTypeHS8100,65,5,67,7,);
B(B_VARIN,,MXmachTypeHS8120,79,4,81,6,);
B(B_VARIN,,MXmachTypeHS8050,37,7,39,9,);
B(B_VARIN,,8050.01,37,9,39,11,);
B(B_VARIN,,8070.01,51,8,53,10,);
B(B_VARIN,,8100.01,65,7,67,9,);
B(B_VARIN,,8120.01,79,6,81,8,);
B(B_F,sel,,95,2,100,7,);
B(B_VARIN,,MXmachTypeHS8160,93,3,95,5,);
B(B_VARIN,,8160.01,93,5,95,7,);
B(B_F,sel,,109,1,114,6,);
B(B_VARIN,,MXmachTypeHS8200,107,2,109,4,);
B(B_VARIN,,8200.01,107,4,109,6,);
B(B_VAROUT,,LRmachinSpecType,114,2,116,4,);
B(B_F,sel,,11,8,16,13,);
B(B_VARIN,,LRmachinSpecType,9,10,11,12,);
B(B_VARIN,,8030.01,9,11,11,13,);
B(B_VARIN,,MXmachTypeHS8030,9,9,11,11,);
L(72,6,81,6);
L(58,7,67,7);
L(44,8,53,8);
L(30,9,39,9);
L(86,5,95,5);
L(100,4,109,4);
L(16,10,25,10);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value specific type of the machine,1,1,27,2,);
B(B_VARIN,,LRmachinSpecType,9,6,11,8,);
B(B_VARIN,,CDmachinSpecType,9,8,11,10,);
B(B_FB,CorrValue_Real,CorrValue_Real1,11,4,23,10,);
L(11,7,11,8);
L(11,6,11,7);
        END_NETWORK_BODY
    END_NET_WORK
END_BODY
END_PROGRAM

PROGRAM GPmdeProgV130
	VAR_EXTERNAL 
		IWrightJoystAna1: INT:=0;
			(*right joystick analog signal 1*)
		IWrightJoystAna2: INT:=0;
			(*right joystick analog signal 2*)
		IWleftJoystAnal1: INT:=0;
			(*left joystick analog signal 1*)
		IWleftJoystAnal2: INT:=0;
			(*left joystick analog signal 2*)
		IDcounterHg1: DINT:=0;
			(*counter rope lenght hg1*)
		IDcounterHg2: DINT:=0;
			(*counter rope lenght hg2*)
		QXhg1BrakeNormal: BOOL:=FALSE;
			(*HG 1 brake normal speed operation*)
		QXhg1BrakeFastSp: BOOL:=FALSE;
			(*HG 1 brake fast speed operation*)
		QXhg2BrakeNormal: BOOL:=FALSE;
			(*HG 2 brake normal speed operation*)
		QXhg2BrakeFastSp: BOOL:=FALSE;
			(*HG 2 brake fast speed operation*)
		QXsgBrake: BOOL:=FALSE;
			(*SG brake*)
		QXlgBrake: BOOL:=FALSE;
			(*LG brake*)
		QWsgRight: UINT:=0;
			(*SG pump 1 right*)
		QWsgLeft: UINT:=0;
			(*SG pump 1 left*)
		MXenabDgcOperat: BOOL:=FALSE;
			(*add. dynamic ground compaction enable*)
		MXenablVibOperat: BOOL:=FALSE;
			(*enable vibrator operation*)
		MXenablHamOperat: BOOL:=FALSE;
			(*enable hammer operation*)
		MXenablMilOperat: BOOL:=FALSE;
			(*enable milling operation*)
		MXenabHyGrabOper: BOOL:=FALSE;
			(*enable hydr.Grab operation*)
		MXenablDrillOper: BOOL:=FALSE;
			(*enable drilling drive operation*)
		MXenabKelGrabOpe: BOOL:=FALSE;
			(*enable add. kelly grab operation*)
		MXmdeStBk1BW1: BOOL:=FALSE;
			(*mde status brake 1 boom winch 1*)
		MXmdeStBk1W1: BOOL:=FALSE;
			(*mde status brake 1 winch 1*)
		MXmdeStBk2W1: BOOL:=FALSE;
			(*mde status brake 2 winch 1*)
		MXmdeStBk1W2: BOOL:=FALSE;
			(*mde status brake 1 winch 2*)
		MXmdeStBk2W2: BOOL:=FALSE;
			(*mde status brake 2 winch 2*)
		MXmdeStBk1SS1: BOOL:=FALSE;
			(*mde status brake 1 slewing system 1*)
		MDpresenEngSpeed: REAL:=0.0;
			(*present engine speed in rpm*)
		MDfuelConsum_lph: REAL:=0.0;
			(*engine actual fuel consumption [l/h] not filtered*)
		MDcoolWaterTemp: REAL:=0.0;
			(*cooling water temperature in °C*)
		MDlubOilPressure: REAL:=0.0;
			(*lub oil pressure in bar*)
		MDchargeAirPress: REAL:=0.0;
			(*charge air pressure in bar*)
		MDratedEngSpeed: REAL:=0.0;
			(*rated engine speed in rpm*)
		MDengTorqueAct: REAL:=0.0;
			(*engine actual torque [Nm]*)
		MDengMaxSpeed: REAL:=0.0;
			(*engine maximum speed*)
		MDengPowerAct: REAL:=0.0;
			(*engine actual power [kW]*)
		MDchargeAirTemp: REAL:=0.0;
			(*charge air temperatur [°C]*)
		MDhydrOilTemp: REAL:=0.0;
			(*hydraulic oil temperature in °C *)
		MDbatteryVoltage: REAL:=0.0;
			(*battery voltage*)
		MDhg1SystemPress: REAL:=0.0;
			(*HG 1 system pressure in bar*)
		MDhg2SystemPress: REAL:=0.0;
			(*HG 2 system pressure in bar*)
		MDhg1PumpSignal: REAL:=0.0;
			(*HG 1 analog signal pump in [%]*)
		MDhg2PumpSignal: REAL:=0.0;
			(*HG 2 analog signal pump in [%]*)
		MDsgPressDiff: REAL:=0.0;
			(*sg pressure difference in bar*)
		MDlmlUtilization: REAL:=0.0;
			(*lml utilization in %*)
		MDlmlLoadBoom: REAL:=0.0;
			(*lml load main boom in to*)
		MDlmlRadiusMBoom: REAL:=0.0;
			(*lml load radius main boom in m*)
		MDaFrameLoadSens: REAL:=0.0;
			(*a frame load sensor in [kN]*)
		MDmdeRvDiEn1: REAL:=0.0;
			(*MDE: revolutions diesel eingine 1 [rpm]*)
		MDmdeTqDiEn1: REAL:=0.0;
			(*MDE: torque diesel engine 1 [Nm]*)
		MDmdePrChAirEn1: REAL:=0.0;
			(*MDE: charge air pressure diesel engine 1 [bar]*)
		MDmdeTmChAirEn1: REAL:=0.0;
			(*MDE: charge air temperature diesel engine 1 [°C]*)
		MDmdeTmCoWaEn1: REAL:=0.0;
			(*MDE: cooling water temperature diesel engine 1 [°C]*)
		MDmdePrLbOilEn1: REAL:=0.0;
			(*MDE: lub oil pressure diesel engine [bar]*)
		MDmdeVoBat1: REAL:=0.0;
			(*MDE: voltage battery 1 [V]*)
		MDmdeSgLxJs1: REAL:=0.0;
			(*MDE: signal x-direction left joystick 1 [%]*)
		MDmdeSgLyJs1: REAL:=0.0;
			(*MDE: signal y-direction left joystick 1 [%]*)
		MDmdeSgRxJs1: REAL:=0.0;
			(*MDE: signal x-direction right joystick 1 [%]*)
		MDmdeSgRyJs1: REAL:=0.0;
			(*MDE: signal y-direction right joystick 1 [%]*)
		MDmdeOm1: REAL:=0.0;
			(*MDE: operation mode 1*)
		MDmdeOm2: REAL:=0.0;
			(*mde operation mode 2*)
		MDmdeRvPu1W1: REAL:=0.0;
			(*MDE: revolutions pump 1 winch 1 [rpm]*)
		MDmdeRvPu2W1: REAL:=0.0;
			(*MDE: revolutions pump 2 winch 1 [rpm]*)
		MDmdePrPu1W1: REAL:=0.0;
			(*MDE: pressure pump 1 winch 1 [bar]*)
		MDmdePrPu2W1: REAL:=0.0;
			(*MDE: pressure pump 2 winch 1 [bar]*)
		MDmdePvPu1W1: REAL:=0.0;
			(*MDE: pivoting range pump 1 winch 1 [%]*)
		MDmdePvPu2W1: REAL:=0.0;
			(*MDE: pivoting range pump 2 winch 1 [%]*)
		MDmdePwPu1W1: REAL:=0.0;
			(*MDE: power pump 1 winch 1 [kW]*)
		MDmdePwPu2W1: REAL:=0.0;
			(*MDE: power pump 2 winch 1 [kW]*)
		MDmdeRvPu1W2: REAL:=0.0;
			(*MDE: revolutions pump 1 winch 2 [rpm]*)
		MDmdeRvPu2W2: REAL:=0.0;
			(*MDE: revolutions pump 2 winch 2 [rpm]*)
		MDmdePrPu1W2: REAL:=0.0;
			(*MDE: pressure pump 1 winch 2 [bar]*)
		MDmdePrPu2W2: REAL:=0.0;
			(*MDE: pressure pump 2 winch 2 [bar]*)
		MDmdePvPu1W2: REAL:=0.0;
			(*MDE: pivoting range pump 1 winch 2 [%]*)
		MDmdePvPu2W2: REAL:=0.0;
			(*MDE: pivoting range pump 2 winch 2 [%]*)
		MDmdePwPu1W2: REAL:=0.0;
			(*MDE: power pump 1 winch 2 [kW]*)
		MDmdePwPu2W2: REAL:=0.0;
			(*MDE: power pump 2 winch 2 [kW]*)
		MDmdeRvPu1SS1: REAL:=0.0;
			(*MDE: revolutions pump 1 slewing system 1 [rpm]*)
		MDmdePrPu1SS1: REAL:=0.0;
			(*MDE: pressure pump 1 slewing system 1 [bar]*)
		MDmdePvPu1SS1: REAL:=0.0;
			(*MDE: pivoting range pump 1 slewing system 1 [%]*)
		MDmdePwPu1SS1: REAL:=0.0;
			(*MDE: power pump 1 slewing system 1 [kW]*)
		MDmdeTmHOilTa1: REAL:=0.0;
			(*MDE: temperature hydraulic oil tank 1 [°C]*)
		MDmdeUtHS1: REAL:=0.0;
			(*MDE: utilisation hoisting system 1 [%]*)
		MDmdeRvW1: REAL:=0.0;
			(*MDE: revolutions winch 1 [rpm]*)
		MDmdeTqG1W1: REAL:=0.0;
			(*MDE: input torque gear 1 winch 1 [Nm]*)
		MDmdeRvW2: REAL:=0.0;
			(*MDE: revolutions winch 2 [rpm]*)
		MDmdeTqG1W2: REAL:=0.0;
			(*MDE: input torque gear 1 winch 2 [Nm]*)
		MDmdeFcAnRod: REAL:=0.0;
			(*MDE: force anchoring rod [kN]*)
		MDmdeHgGeRaDG1: REAL:=0.0;
			(*gear ratio of gear box 1, hoisting winch *)
		MDmdeSgGeRaDG1: REAL:=0.0;
			(*gear ratio of gear box 1, slewing gear*)
		MDmdeTmOut1: REAL:=0.0;
			(*mde outside temperature 1 [°C]*)
		MDmdePwDiEn1: REAL:=0.0;
			(*mde power diesel engine 1 [kW]*)
		MDmdeRvEn: REAL:=0.0;
			(*MDE: revolutions engine [rpm]*)
		MDmdeExDiEn1: REAL:=0.0;
			(*mde engine exploitation diesel engine 1 [%]*)
		MDmdeUtOm: REAL:=0.0;
			(*MDE: utilisation operation mode [%]*)
		MDmdeCoFuelEn1: REAL:=0.0;
			(*mde engine fuel consumption [l/h]*)
		MDmdeFcRoW1: REAL:=0.0;
			(*mde rope force winch 1 [kN]*)
		MDmdeFcRoW2: REAL:=0.0;
			(*mde rope force winch 2 [kN]*)
		MDmdeRdHS1: REAL:=0.0;
			(*mde radius hoisting system 1 [m]*)
		MDmdeAnSS1: REAL:=0.0;
			(*mde angle slewing system 1 [°]*)
		MDmdeSpRoW1: REAL:=0.0;
			(*mde rope speed winch 1 [m/min]*)
		MDmdeSpRoW2: REAL:=0.0;
			(*mde rope speed winch 2 [m/min]*)
		MDmdeLdHS1: REAL:=0.0;
			(*mde load hoisting system 1 [to]*)
		MDmdePrSS1: REAL:=0.0;
			(*mde pressure difference slewing system 1 [bar]*)
		MDmdeSpWind: REAL:=0.0;
			(*mde wind speed *)
		MDoutdoorTemp: REAL:=0.0;
			(*outdoor termperature [°C]*)
		MDwindSpeed: REAL:=0.0;
			(*actual wind speed*)
		MDhg1RopeSpeed: REAL:=0.0;
			(*hg 1 rope speed in  m/min*)
		MDhg2RopeSpeed: REAL:=0.0;
			(*hg 2 rope speed in  m/min*)
		MDsgAngle: REAL:=0.0;
			(*sg angle in degree*)
		MWmdeIfPwDiEn1: INT:=0;
			(*MDE: power diesel engine 1 [kW]*)
		MWmdeIfVolPu1W1: INT:=0;
			(*MDE: volume pump 1 winch 1 [cm³]*)
		MWmdeIfVolPu2W1: INT:=0;
			(*MDE: volume pump 2 winch 1 [cm³]*)
		MWmdeIfVolPu1W2: INT:=0;
			(*MDE: volume pump 1 winch 2 [cm³]*)
		MWmdeIfVolPu2W2: INT:=0;
			(*MDE: volume pump 2 winch 2 [cm³]*)
		MWmdeIfVolPu1SS1: INT:=0;
			(*MDE: volume pump 1 slewing system 1 [cm³]*)
	END_VAR
	VAR_EXTERNAL CONSTANT
		MSG_ERROR: UINT:=0;
			(* message priority: "error" *)
	END_VAR
	VAR_EXTERNAL CONSTANT RETAIN
		CWsgminCurPumRi: UINT:=0;
			(*SG minimum current pump right*)
		CWsgminCurPumLe: UINT:=0;
			(*SG minimum current pump left*)
		CDhg1GearRatio: REAL:=0.0;
			(*hg 1 gear ratio from the winch to the incrementalsensor*)
		CDhg2GearRatio: REAL:=0.0;
			(*hg 2 gear ratio from the winch to the incrementalsensor*)
		CDhg1ImPIncSen: REAL:=0.0;
			(*hg 1 impulses per rotation of the incrementalsenor*)
		CDhg2ImPIncSen: REAL:=0.0;
			(*hg 2 impulses per rotation of the incrementalsesor*)
	END_VAR
	VAR 
		LXinitOk: BOOL:=FALSE;
			(*init completed*)
		LDmdeVolPu1W1: REAL:=0.0;
			(*volume pump 1 winch 1 [cm³]*)
		LDmdeVolPu2W1: REAL:=0.0;
			(*volume pump 2 winch 1 [cm³]*)
		LDmdeVolPu1W2: REAL:=0.0;
			(*volume pump 1 winch 2 [cm³]*)
		LDmdeVolPu2W2: REAL:=0.0;
			(*volume pump 2 winch 2 [cm³]*)
		LDmdeVolPu1SS1: REAL:=0.0;
			(*volume pump 1 slewing system 1 [cm³]*)
		LDmdeTqPu1W1: REAL:=0.0;
			(*torque pump 1 winch 1 [Nm]*)
		LDmdeTqPu1W2: REAL:=0.0;
			(*torque pump 1 winch 2 [Nm]*)
		LDmdeTqPu2W1: REAL:=0.0;
			(*torque pump 2 winch 1 [Nm]*)
		LDmdeTqPu2W2: REAL:=0.0;
			(*torque pump 2 winch 2 [Nm]*)
		ADspeedCalc1: ADspeedCalcV011;
		ADspeedCalc2: ADspeedCalcV011;
		GPfilter1: GPfilter10V010;
		Message1: MsgRealReal;
		MDhydrPump1: MDhydrPump;
		MDhydrPump2: MDhydrPump;
		MDhydrPump3: MDhydrPump;
		MDhydrPump4: MDhydrPump;
		MDhydrPump5: MDhydrPump;
		MDpivotingRange1: MDpivotingRange;
	END_VAR
'FBD'
BODY
    WORKSPACE
        NETWORK_LIST_TYPE := NWTYPEFBD ;
        ACTIVE_NETWORK := 0 ;
    END_WORKSPACE
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_COMMENT,,init first time,1,1,27,2,);
B(B_F,not,,11,3,16,6,);
B(B_VARIN,,LXinitOk,9,4,11,6,);
B(B_JUMP,,init,16,4,18,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 26 ;
        NETWORK_BODY
B(B_COMMENT,,operation Mode 1,1,1,27,2,);
B(B_VARIN,,1.0,11,10,13,12,);
B(B_F,sel,,13,8,18,13,);
B(B_F,sel,,21,7,26,12,);
B(B_VARIN,,3.0,19,10,21,12,);
B(B_VARIN,,MXenabDgcOperat,11,9,13,11,);
B(B_VARIN,,MXenablVibOperat,19,6,21,8,);
B(B_F,sel,,29,6,34,11,);
B(B_VARIN,,4.0,27,9,29,11,);
B(B_F,sel,,37,5,42,10,);
B(B_VARIN,,5.0,35,8,37,10,);
B(B_F,sel,,45,4,50,9,);
B(B_VARIN,,6.0,43,7,45,9,);
B(B_F,sel,,61,2,66,7,);
B(B_VARIN,,8.0,59,5,61,7,);
B(B_F,sel,,53,3,58,8,);
B(B_VARIN,,7.0,51,6,53,8,);
B(B_VAROUT,,MDmdeOm1,66,3,68,5,);
B(B_VARIN,,MXenablMilOperat,59,1,61,3,);
B(B_VARIN,,MXenablHamOperat,27,5,29,7,);
B(B_VARIN,,MXenablDrillOper,51,2,53,4,);
B(B_VARIN,,MXenabKelGrabOpe,43,3,45,5,);
B(B_VARIN,,MXenabHyGrabOper,35,4,37,6,);
B(B_F,to_real,,5,12,12,15,);
B(B_VARIN,,2.0,3,13,5,15,);
B(B_COMMENT,,1	Mainmodeø^2	Rammsteuerungø^3	Rüttlerø^4	Hammerø^5	Greiferø^6	Kelly Greiferø^7	Bohrbetriebø^8	Fräseø^9	ø^10	,30,12,48,22,);
B(B_COMMENT,,11	ø^12	SOBø^13	VDWø^14	SMOø^15	Kellyø^16	Push&Pullø^17	ø^18	ø^19,48,12,66,22,);
B(B_COMMENT,,Bitte neue Betriebsarten in Tabelle auf dem Netz auch eintragen; ø^Die MDE kann aktuell 19 Betriebsarten ,30,22,66,24,);
L(18,10,21,10);
L(21,7,21,9);
L(26,9,29,9);
L(29,6,29,8);
L(34,8,37,8);
L(37,5,37,7);
L(42,7,45,7);
L(45,4,45,6);
L(61,2,61,4);
L(53,3,53,5);
L(50,6,53,6);
L(58,5,61,5);
L(13,12,13,14);
L(12,14,13,14);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_VARIN,,0.0,9,3,11,5,);
B(B_VAROUT,,MDmdeOm2,11,3,13,5,);
B(B_COMMENT,,operation Mode 1,1,1,27,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_F,@EQ-2,,11,4,16,8,);
B(B_VARIN,,MWmdeIfPwDiEn1,9,5,11,7,);
B(B_VARIN,,0,9,6,11,8,);
B(B_FB,MsgRealReal,Message1,25,3,34,10,);
B(B_VARIN,,MSG_ERROR,23,6,25,8,);
B(B_VARIN,,805,23,4,25,6,);
B(B_COMMENT,,set message in case of engine power equal zero ,1,1,27,2,);
B(B_COMMENT,,wenn Motorleistung 0 geladen wird~ kann davon aus-ø^gegangen werden~ das etwas am Database nicht stimmt,40,2,61,4,);
L(16,6,25,6);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,revolution diesel engine 1 [rpm],1,2,28,3,);
B(B_VARIN,,MDpresenEngSpeed,9,4,11,6,);
B(B_VAROUT,,MDmdeRvDiEn1,11,4,13,6,);
B(B_COMMENT,,DIESEL ENGINE,1,1,28,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 5 ;
        NETWORK_BODY
B(B_VARIN,,MDengTorqueAct,9,3,11,5,);
B(B_VAROUT,,MDmdeTqDiEn1,11,3,13,5,);
B(B_COMMENT,,torque diesel engine 1 [Nm],1,1,28,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 5 ;
        NETWORK_BODY
B(B_VARIN,,MDengPowerAct,9,3,11,5,);
B(B_VAROUT,,MDmdePwDiEn1,11,3,13,5,);
B(B_COMMENT,,power diesel engine 1 [kw],1,1,28,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 18 ;
        NETWORK_BODY
B(B_F,@SUB,,26,9,31,13,);
B(B_F,@DIV,,31,9,36,13,);
B(B_F,limit,,36,8,42,13,);
B(B_VARIN,,1.0,34,14,36,16,);
B(B_VARIN,,-1.0,34,7,36,9,);
B(B_F,@ADD-2,,19,9,24,13,);
B(B_VARIN,,MDratedEngSpeed,15,11,17,13,);
B(B_VARIN,,0.03,10,15,12,17,);
B(B_F,@MUL-2,,12,13,17,17,);
B(B_F,sel,,43,7,48,12,);
B(B_F,@MUL-2,,50,10,55,14,);
B(B_VARIN,,100.0,48,12,50,14,);
B(B_VARIN,,0.0,41,13,43,15,);
B(B_F,@LT-2,,37,4,42,8,);
B(B_VARIN,,10.0,35,6,37,8,);
B(B_VARIN,,MDengMaxSpeed,10,14,12,16,);
B(B_VARIN,,MDpresenEngSpeed,9,5,11,7,);
B(B_FB,GPfilter10V010,GPfilter1,11,4,25,8,);
B(B_VARIN,,0.0,9,6,11,8,);
B(B_COMMENT,,Drückung auf null wenn ø^Motor steht,26,3,37,5,);
B(B_COMMENT,,exploitation diesel engine 1 [%],1,1,28,2,);
B(B_VAROUT,,MDmdeExDiEn1,55,11,57,13,);
L(36,8,36,10);
L(18,11,19,11);
L(17,12,19,12);
L(18,11,18,15);
L(17,15,31,15);
L(31,12,31,15);
L(36,12,36,15);
L(49,9,49,12);
L(49,12,50,12);
L(48,9,49,9);
L(42,10,43,10);
L(43,11,43,14);
L(24,11,26,11);
L(25,6,25,12);
L(25,12,26,12);
L(43,6,43,9);
L(25,6,37,6);
L(42,6,43,6);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 5 ;
        NETWORK_BODY
B(B_VARIN,,MDchargeAirPress,9,3,11,5,);
B(B_VAROUT,,MDmdePrChAirEn1,11,3,13,5,);
B(B_COMMENT,,charge air pressure diesel engine 1 [bar] ,1,1,28,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 5 ;
        NETWORK_BODY
B(B_VARIN,,MDchargeAirTemp,9,3,11,5,);
B(B_VAROUT,,MDmdeTmChAirEn1,11,3,13,5,);
B(B_COMMENT,,charge air temprature diesel engine 1 [°C] ,1,1,28,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 5 ;
        NETWORK_BODY
B(B_VARIN,,MDcoolWaterTemp,9,3,11,5,);
B(B_VAROUT,,MDmdeTmCoWaEn1,11,3,13,5,);
B(B_COMMENT,,cooling water temprature diesel engine 1 [°C] ,1,1,28,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 5 ;
        NETWORK_BODY
B(B_VARIN,,MDlubOilPressure,9,3,11,5,);
B(B_VAROUT,,MDmdePrLbOilEn1,11,3,13,5,);
B(B_COMMENT,,lub oil pressure diesel engine 1 [bar] ,1,1,28,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 5 ;
        NETWORK_BODY
B(B_VAROUT,,MDmdeCoFuelEn1,11,3,13,5,);
B(B_VARIN,,MDfuelConsum_lph,9,3,11,5,);
B(B_COMMENT,,fuel consumption diesel engine 1 [l/h] ,1,1,28,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_COMMENT,,x-direction left joystick 1 cabin 1 [%],1,2,28,3,);
B(B_F,@MUL-2,,21,4,26,8,);
B(B_F,int_to_real,,11,4,21,7,);
B(B_VAROUT,,MDmdeSgLxJs1,26,5,28,7,);
B(B_VARIN,,0.1,19,7,21,9,);
B(B_VARIN,,IWleftJoystAnal2,9,5,11,7,);
B(B_COMMENT,,Joystick,1,1,28,2,);
L(21,7,21,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_COMMENT,,y-direction left joystick 1 cabin 1 [%],1,1,28,2,);
B(B_F,@MUL-2,,21,3,26,7,);
B(B_VARIN,,0.1,19,6,21,8,);
B(B_F,int_to_real,,11,3,21,6,);
B(B_VAROUT,,MDmdeSgLyJs1,26,4,28,6,);
B(B_VARIN,,IWleftJoystAnal1,9,4,11,6,);
L(21,6,21,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_COMMENT,,x-direction right joystick 1 cabin 1 [%],1,1,28,2,);
B(B_F,@MUL-2,,21,3,26,7,);
B(B_VARIN,,0.1,19,6,21,8,);
B(B_F,int_to_real,,11,3,21,6,);
B(B_VARIN,,IWrightJoystAna2,9,4,11,6,);
B(B_VAROUT,,MDmdeSgRxJs1,26,4,28,6,);
L(21,6,21,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_COMMENT,,y-direction right joystick 1 cabin 1 [%],1,1,28,2,);
B(B_F,@MUL-2,,21,3,26,7,);
B(B_VARIN,,0.1,19,6,21,8,);
B(B_F,int_to_real,,11,3,21,6,);
B(B_VARIN,,IWrightJoystAna1,9,4,11,6,);
B(B_VAROUT,,MDmdeSgRyJs1,26,4,28,6,);
L(21,6,21,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_COMMENT,,temperature hydraulic oil tank 1 [°C],1,2,28,3,);
B(B_VARIN,,MDhydrOilTemp,9,4,11,6,);
B(B_VAROUT,,MDmdeTmHOilTa1,11,4,13,6,);
B(B_COMMENT,,Aggregat,1,1,28,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_VARIN,,MDbatteryVoltage,9,4,11,6,);
B(B_VAROUT,,MDmdeVoBat1,11,4,13,6,);
B(B_COMMENT,,battery voltage [V] ,1,2,28,3,);
B(B_COMMENT,,electric system,1,1,28,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_COMMENT,,revolution engine speed [rpm] diesel or e-motor,1,2,28,3,);
B(B_VAROUT,,MDmdeRvEn,11,4,13,6,);
B(B_VARIN,,MDpresenEngSpeed,9,4,11,6,);
B(B_COMMENT,,distribution gear,1,1,28,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_COMMENT,,WINDE 1,1,1,28,2,);
B(B_COMMENT,,volume pump 1 winch 1 [cm³],1,2,28,3,);
B(B_F,int_to_real,,11,4,21,7,);
B(B_VAROUT,,LDmdeVolPu1W1,21,5,23,7,);
B(B_VARIN,,MWmdeIfVolPu1W1,9,5,11,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_COMMENT,,volume pump 2 winch 1 [cm³],1,1,28,2,);
B(B_F,int_to_real,,11,3,21,6,);
B(B_VAROUT,,LDmdeVolPu2W1,21,4,23,6,);
B(B_VARIN,,MWmdeIfVolPu2W1,9,4,11,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_COMMENT,,revolutions pump 1 winch 1 [rpm],1,1,28,2,);
B(B_VAROUT,,MDmdeRvPu1W1,16,4,18,6,);
B(B_F,@MUL-2,,11,3,16,7,);
B(B_VARIN,,MDmdeRvEn,9,4,11,6,);
B(B_VARIN,,MDmdeHgGeRaDG1,9,5,11,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_COMMENT,,revolutions pump 2 winch 1 [rpm],1,1,28,2,);
B(B_VAROUT,,MDmdeRvPu2W1,16,4,18,6,);
B(B_F,@MUL-2,,11,3,16,7,);
B(B_VARIN,,MDmdeRvEn,9,4,11,6,);
B(B_VARIN,,MDmdeHgGeRaDG1,9,5,11,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,pressure pump 1 winch 1 [bar],1,1,28,2,);
B(B_VAROUT,,MDmdePrPu1W1,11,3,13,5,);
B(B_VARIN,,MDhg1SystemPress,9,3,11,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,pressure pump 2 winch 1 [bar],1,1,28,2,);
B(B_VAROUT,,MDmdePrPu2W1,11,3,13,5,);
B(B_VARIN,,MDhg1SystemPress,9,3,11,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,pivoting range pump 1 winch 1 [%],1,1,28,2,);
B(B_VARIN,,MDhg1PumpSignal,9,3,11,5,);
B(B_VAROUT,,MDmdePvPu1W1,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,pivoting range pump 1 winch 1 [%],1,1,28,2,);
B(B_VARIN,,MDhg1PumpSignal,9,3,11,5,);
B(B_VAROUT,,MDmdePvPu2W1,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_FB,MDhydrPump,MDhydrPump1,11,3,25,9,);
B(B_COMMENT,,power pump 1 winch 1 [kW],1,1,28,2,);
B(B_VARIN,,LDmdeVolPu1W1,9,4,11,6,);
B(B_VARIN,,MDmdePvPu1W1,9,5,11,7,);
B(B_VARIN,,MDmdePrPu1W1,9,6,11,8,);
B(B_VARIN,,MDmdeRvPu1W1,9,7,11,9,);
B(B_VAROUT,,MDmdePwPu1W1,25,6,27,8,);
B(B_VAROUT,,LDmdeTqPu1W1,25,5,27,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_FB,MDhydrPump,MDhydrPump2,11,3,25,9,);
B(B_COMMENT,,power pump 2 winch 1 [kW],1,1,28,2,);
B(B_VARIN,,LDmdeVolPu2W1,9,4,11,6,);
B(B_VARIN,,MDmdePvPu2W1,9,5,11,7,);
B(B_VARIN,,MDmdePrPu2W1,9,6,11,8,);
B(B_VARIN,,MDmdeRvPu2W1,9,7,11,9,);
B(B_VAROUT,,MDmdePwPu2W1,25,6,27,8,);
B(B_VAROUT,,LDmdeTqPu2W1,25,5,27,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_COMMENT,,input torque gear 1 winch 1 [Nm],1,1,28,2,);
B(B_VARIN,,LDmdeTqPu1W1,9,4,11,6,);
B(B_VARIN,,LDmdeTqPu2W1,9,5,11,7,);
B(B_F,@ADD-2,,11,3,16,7,);
B(B_VAROUT,,MDmdeTqG1W1,16,4,18,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_VARIN,,CDhg1GearRatio,9,3,11,5,);
B(B_F,@MUL-3,,11,2,16,7,);
B(B_VARIN,,IDcounterHg1,24,2,26,4,);
B(B_FB,ADspeedCalcV011,ADspeedCalc1,26,1,41,6,);
B(B_VAROUT,,MDmdeRvW1,41,2,43,4,);
B(B_VARIN,,5.0,24,4,26,6,);
B(B_VARIN,,CDhg1ImPIncSen,9,4,11,6,);
B(B_VARIN,,4.0,9,5,11,7,);
B(B_COMMENT,,4 Flanken,1,6,7,7,);
L(16,4,26,4);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,brake normal ,1,1,28,2,);
B(B_VAROUT,,MXmdeStBk1W1,11,3,13,5,);
B(B_VARIN,,QXhg1BrakeNormal,9,3,11,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,brake fast speed,1,1,28,2,);
B(B_VAROUT,,MXmdeStBk2W1,11,3,13,5,);
B(B_VARIN,,QXhg1BrakeFastSp,9,3,11,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_VAROUT,,MDmdeFcRoW1,11,3,13,5,);
B(B_VARIN,,0.0,9,3,11,5,);
B(B_COMMENT,,rope force winch 1 [kN],1,1,28,2,);
B(B_COMMENT,,derzeit kann der Seilzug nicht eindeutig festegestellt werden ,30,1,64,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_VAROUT,,MDmdeSpRoW1,11,3,13,5,);
B(B_VARIN,,MDhg1RopeSpeed,9,3,11,5,);
B(B_COMMENT,,rope speed winch 1 [m/min],1,1,28,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_COMMENT,,WINDE 2,1,1,28,2,);
B(B_COMMENT,,volume pump 1 winch 2 [cm³],1,2,28,3,);
B(B_F,int_to_real,,11,4,21,7,);
B(B_VAROUT,,LDmdeVolPu1W2,21,5,23,7,);
B(B_VARIN,,MWmdeIfVolPu1W2,9,5,11,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_COMMENT,,volume pump 2 winch 2 [cm³],1,1,28,2,);
B(B_F,int_to_real,,11,3,21,6,);
B(B_VAROUT,,LDmdeVolPu2W2,21,4,23,6,);
B(B_VARIN,,MWmdeIfVolPu2W2,9,4,11,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_COMMENT,,revolutions pump 1 winch 2 [rpm],1,1,28,2,);
B(B_VAROUT,,MDmdeRvPu1W2,16,4,18,6,);
B(B_F,@MUL-2,,11,3,16,7,);
B(B_VARIN,,MDmdeRvEn,9,4,11,6,);
B(B_VARIN,,MDmdeHgGeRaDG1,9,5,11,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_COMMENT,,revolutions pump 2 winch 2 [rpm],1,1,28,2,);
B(B_VAROUT,,MDmdeRvPu2W2,16,4,18,6,);
B(B_F,@MUL-2,,11,3,16,7,);
B(B_VARIN,,MDmdeRvEn,9,4,11,6,);
B(B_VARIN,,MDmdeHgGeRaDG1,9,5,11,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,pressure pump 1 winch 2 [bar],1,1,28,2,);
B(B_VAROUT,,MDmdePrPu1W2,11,3,13,5,);
B(B_VARIN,,MDhg2SystemPress,9,3,11,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,pressure pump 2 winch 2 [bar],1,1,28,2,);
B(B_VAROUT,,MDmdePrPu2W2,11,3,13,5,);
B(B_VARIN,,MDhg2SystemPress,9,3,11,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,pivoting range pump 1 winch 2 [%],1,1,28,2,);
B(B_VARIN,,MDhg2PumpSignal,9,3,11,5,);
B(B_VAROUT,,MDmdePvPu1W2,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,pivoting range pump 1 winch 2 [%],1,1,28,2,);
B(B_VARIN,,MDhg2PumpSignal,9,3,11,5,);
B(B_VAROUT,,MDmdePvPu2W2,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_FB,MDhydrPump,MDhydrPump3,11,3,25,9,);
B(B_COMMENT,,power pump 1 winch 2 [kW],1,1,28,2,);
B(B_VARIN,,LDmdeVolPu1W2,9,4,11,6,);
B(B_VARIN,,MDmdePvPu1W2,9,5,11,7,);
B(B_VARIN,,MDmdePrPu1W2,9,6,11,8,);
B(B_VARIN,,MDmdeRvPu1W2,9,7,11,9,);
B(B_VAROUT,,MDmdePwPu1W2,25,6,27,8,);
B(B_VAROUT,,LDmdeTqPu1W2,25,5,27,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_FB,MDhydrPump,MDhydrPump4,11,3,25,9,);
B(B_COMMENT,,power pump 2 winch 2 [kW],1,1,28,2,);
B(B_VARIN,,LDmdeVolPu2W2,9,4,11,6,);
B(B_VARIN,,MDmdePvPu2W2,9,5,11,7,);
B(B_VARIN,,MDmdePrPu2W2,9,6,11,8,);
B(B_VARIN,,MDmdeRvPu2W2,9,7,11,9,);
B(B_VAROUT,,MDmdePwPu2W2,25,6,27,8,);
B(B_VAROUT,,LDmdeTqPu2W2,25,5,27,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_COMMENT,,input torque gear 1 winch 2 [Nm],1,1,28,2,);
B(B_VARIN,,LDmdeTqPu1W2,9,4,11,6,);
B(B_VARIN,,LDmdeTqPu2W2,9,5,11,7,);
B(B_F,@ADD-2,,11,3,16,7,);
B(B_VAROUT,,MDmdeTqG1W2,16,4,18,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_F,@MUL-3,,11,2,16,7,);
B(B_VARIN,,CDhg2ImPIncSen,9,4,11,6,);
B(B_VARIN,,4.0,9,5,11,7,);
B(B_VARIN,,CDhg2GearRatio,9,3,11,5,);
B(B_VARIN,,IDcounterHg2,24,2,26,4,);
B(B_FB,ADspeedCalcV011,ADspeedCalc2,26,1,41,6,);
B(B_VAROUT,,MDmdeRvW2,41,2,43,4,);
B(B_VARIN,,5.0,24,4,26,6,);
B(B_COMMENT,,4 Flanken,1,6,7,7,);
L(16,4,26,4);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,brake normal ,1,1,28,2,);
B(B_VAROUT,,MXmdeStBk1W2,11,3,13,5,);
B(B_VARIN,,QXhg2BrakeNormal,9,3,11,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,brake fast speed,1,1,28,2,);
B(B_VAROUT,,MXmdeStBk2W2,11,3,13,5,);
B(B_VARIN,,QXhg2BrakeFastSp,9,3,11,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_VAROUT,,MDmdeFcRoW2,11,3,13,5,);
B(B_VARIN,,0.0,9,3,11,5,);
B(B_COMMENT,,rope force winch 2 [kN],1,1,28,2,);
B(B_COMMENT,,derzeit kann der Seilzug nicht eindeutig festegestellt werden ,30,1,64,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_VAROUT,,MDmdeSpRoW2,11,3,13,5,);
B(B_VARIN,,MDhg2RopeSpeed,9,3,11,5,);
B(B_COMMENT,,rope speed winch 2 [m/min],1,1,28,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_COMMENT,,DREHWERK,1,1,28,2,);
B(B_COMMENT,,volume pump 1 slewing system 1 [cm³],1,2,28,3,);
B(B_F,int_to_real,,11,4,21,7,);
B(B_VAROUT,,LDmdeVolPu1SS1,21,5,23,7,);
B(B_VARIN,,MWmdeIfVolPu1SS1,9,5,11,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_COMMENT,,revolutions pump 1 slewing system 1 [rpm],1,1,28,2,);
B(B_VAROUT,,MDmdeRvPu1SS1,16,4,18,6,);
B(B_F,@MUL-2,,11,3,16,7,);
B(B_VARIN,,MDmdeRvEn,9,4,11,6,);
B(B_VARIN,,MDmdeSgGeRaDG1,9,5,11,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_COMMENT,,pressure pump 1 slewing system 1 [bar] and pressure difference,1,1,28,2,);
B(B_F,abs,,11,3,16,6,);
B(B_VARIN,,MDsgPressDiff,9,4,11,6,);
B(B_VAROUT,,MDmdePrPu1SS1,16,4,18,6,);
B(B_VAROUT,,MDmdePrSS1,11,6,13,8,);
L(11,5,11,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,pivoting range pump 1 slewing system 1 [%],1,1,28,2,);
B(B_VARIN,,CWsgminCurPumRi,9,4,11,6,);
B(B_FB,MDpivotingRange,MDpivotingRange1,11,3,30,10,);
B(B_VAROUT,,MDmdePvPu1SS1,30,4,32,6,);
B(B_VARIN,,CWsgminCurPumLe,9,5,11,7,);
B(B_VARIN,,QWsgRight,9,6,11,8,);
B(B_VARIN,,QWsgLeft,9,7,11,9,);
B(B_VARIN,,400,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_FB,MDhydrPump,MDhydrPump5,11,3,25,9,);
B(B_COMMENT,,power pump 1 slewing system 1 [kW],1,1,28,2,);
B(B_VARIN,,LDmdeVolPu1SS1,9,4,11,6,);
B(B_VARIN,,MDmdePvPu1SS1,9,5,11,7,);
B(B_VARIN,,MDmdePrPu1SS1,9,6,11,8,);
B(B_VARIN,,MDmdeRvPu1SS1,9,7,11,9,);
B(B_VAROUT,,MDmdePwPu1SS1,25,6,27,8,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,brake normal ,1,1,28,2,);
B(B_VAROUT,,MXmdeStBk1SS1,11,3,13,5,);
B(B_VARIN,,QXsgBrake,9,3,11,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_VARIN,,MDsgAngle,9,3,11,5,);
B(B_VAROUT,,MDmdeAnSS1,11,3,13,5,);
B(B_COMMENT,,angle slewing system 1 [°],1,1,28,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,BOOM SYSTEM,1,1,28,2,);
B(B_VAROUT,,MXmdeStBk1BW1,11,3,13,5,);
B(B_VARIN,,QXlgBrake,9,3,11,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_COMMENT,,utilisation hoisting system 1 [%],1,2,28,3,);
B(B_COMMENT,,HOISTING SYSTEM,1,1,28,2,);
B(B_VARIN,,MDlmlUtilization,9,4,11,6,);
B(B_VAROUT,,MDmdeUtOm,11,4,13,6,);
B(B_VAROUT,,MDmdeUtHS1,11,5,13,7,);
B(B_COMMENT,,Last im gesamten Haltestrang ,16,7,28,8,);
L(11,5,11,6);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_VARIN,,MDlmlLoadBoom,9,3,11,5,);
B(B_COMMENT,,load hoisting system 1 [to],1,1,28,2,);
B(B_VAROUT,,MDmdeLdHS1,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_VARIN,,MDlmlRadiusMBoom,9,3,11,5,);
B(B_COMMENT,,radius hoisting system 1 [m],1,1,28,2,);
B(B_VAROUT,,MDmdeRdHS1,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_COMMENT,,force anchoring rod [kN],1,2,28,3,);
B(B_COMMENT,,ANCHORING SYSTEM,1,1,28,2,);
B(B_VARIN,,MDaFrameLoadSens,9,4,11,6,);
B(B_VAROUT,,MDmdeFcAnRod,11,4,13,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,temperature outdoor [°C],1,1,28,2,);
B(B_VAROUT,,MDmdeTmOut1,12,3,14,5,);
B(B_VARIN,,MDoutdoorTemp,10,3,12,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_VAROUT,,MDmdeSpWind,12,3,14,5,);
B(B_VARIN,,MDwindSpeed,10,3,12,5,);
B(B_COMMENT,,temperature outdoor [°C],1,1,28,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,exit mde program,1,1,27,2,);
B(B_VARIN,,TRUE,9,3,11,5,);
B(B_RETURN,,,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL := init: ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,init mde program,1,1,27,2,);
B(B_VARIN,,TRUE,9,3,11,5,);
B(B_VAROUT,,LXinitOk,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
END_BODY
END_PROGRAM

PROGRAM GPoperatHourV110
	VAR_EXTERNAL 
		QXhg1BrakeNormal: BOOL:=FALSE;
			(*hoisting gear 1 brake*)
		QXhg1BrakeFastSp: BOOL:=FALSE;
			(*hoisting gear 1 brake*)
		QXhg1Clutch: BOOL:=FALSE;
			(*hoisting gear 1 clutch*)
		QXhg2BrakeNormal: BOOL:=FALSE;
			(*hoisting gear 2 brake*)
		QXhg2BrakeFastSp: BOOL:=FALSE;
			(*hoisting gear 1 brake*)
		QXhg2Clutch: BOOL:=FALSE;
			(*hoisting gear 2 clutch*)
		QXlgBrake: BOOL:=FALSE;
			(*luffing gear 1 brake*)
		QXlg2Brake: BOOL:=FALSE;
			(*luffing gear 2 brake*)
		QXderrickWiBrake: BOOL:=FALSE;
			(*derrick winch brake*)
		QXsgBrake: BOOL:=FALSE;
			(*slewing gear brake*)
		MXstopAllFunctio: BOOL:=FALSE;
			(*stop all excavator functions*)
		MXminEngineSpeed: BOOL:=FALSE;
			(*minimum engine speed reached*)
		MXswitTravelGear: BOOL:=FALSE;
			(*travelling gear is activated*)
		MXresetOpHour: BOOL:=FALSE;
			(*reset operational houres*)
		MXddEnabPowStage: BOOL:=FALSE;
			(*drilling drive enable power stage left/right*)
		MXvibratWorking: BOOL:=FALSE;
			(*vibrator working*)
		MXhammerWorking: BOOL:=FALSE;
			(*hammer working*)
		MXhydrGrabActive: BOOL:=FALSE;
			(*ad hydr. grab is active*)
		MXaddHydrActive: BOOL:=FALSE;
			(*addittional hydraulics active*)
	END_VAR
	VAR_EXTERNAL RETAIN
		MDhg1OperatHour: REAL:=0.0;
			(*operation hours hoisting gear 1*)
		MDhg2OperatHour: REAL:=0.0;
			(*operation hours hoisting gear 2*)
		MDlgOperatHour: REAL:=0.0;
			(*operation hours luffing gear (main boom)*)
		MDlg2OperatHour: REAL:=0.0;
			(*operation hours luffing gear 2 (luffin jib)*)
		MDlg3OperatHour: REAL:=0.0;
			(*operation hours derrick winch*)
		MDsgOperatHour: REAL:=0.0;
			(*operation hours slewing gear*)
		MDtgOperatHour: REAL:=0.0;
			(*operation hours travelling gear*)
		MDengOperatHour: REAL:=0.0;
			(*operation houres diesel engine*)
		MDadhOperHour: REAL:=0.0;
			(*operation houres additional hydraulic *)
		MDgrbOperHour: REAL:=0.0;
			(*operation houres hydraulic grab*)
		MDddOperHour: REAL:=0.0;
			(*operation houres drilling drive*)
		MDvibOperHour: REAL:=0.0;
			(*operation houres vibrator*)
		MDhamOperHour: REAL:=0.0;
			(*operation houres hammer*)
		MDhg1OperHourRel: REAL:=0.0;
			(*operation hours hoisting gear 1 relative*)
		MDhg2OperHourRel: REAL:=0.0;
			(*operation hours hoisting gear 2 relative*)
		MDlgOperHourRel: REAL:=0.0;
			(*operation hours luffing gear (main boom) relative*)
		MDlg2OperHourRel: REAL:=0.0;
			(*operation hours luffing gear 2 (luffin jib) relative*)
		MDlg3OperHourRel: REAL:=0.0;
			(*operation hours derrick winch relative*)
		MDsgOperHourRel: REAL:=0.0;
			(*operation hours slewing gear relative*)
		MDtgOperHourRel: REAL:=0.0;
			(*operation hours travelling gear relative*)
		MDengOperHourRel: REAL:=0.0;
			(*operation hours diesel engine relative*)
		MDadhOperHourRel: REAL:=0.0;
			(*operation houres additional hydraulic relative*)
		MDgrbOperHourRel: REAL:=0.0;
			(*operation houres hydraulic grab relative*)
		MDddOperHourRel: REAL:=0.0;
			(*operation houres drilling drive relative*)
		MDvibOperHourRel: REAL:=0.0;
			(*operation houres vibrator relative*)
		MDhamOperHourRel: REAL:=0.0;
			(*operation houres hammer relative*)
	END_VAR
	VAR 
		OpHour1: GPcalcOpHourV020;
		OpHour2: GPcalcOpHourV020;
		OpHour3: GPcalcOpHourV020;
		OpHour4: GPcalcOpHourV020;
		OpHour5: GPcalcOpHourV020;
		OpHour6: GPcalcOpHourV020;
		OpHour7: GPcalcOpHourV020;
		OpHour8: GPcalcOpHourV020;
		OpHour9: GPcalcOpHourV020;
		OpHour10: GPcalcOpHourV020;
		OpHour11: GPcalcOpHourV020;
		OpHour12: GPcalcOpHourV020;
		OpHour13: GPcalcOpHourV020;
	END_VAR
'FBD'
BODY
    WORKSPACE
        NETWORK_LIST_TYPE := NWTYPEFBD ;
        ACTIVE_NETWORK := 0 ;
    END_WORKSPACE
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_COMMENT,,operation houres hoisting gear 1,1,1,27,2,);
B(B_VARIN,,QXhg1Clutch,9,6,11,8,);
B(B_VARIN,,QXhg1BrakeNormal,9,4,11,6,);
B(B_F,@OR-3,,11,3,16,8,);
B(B_VARIN,,QXhg1BrakeFastSp,9,5,11,7,);
B(B_FB,GPcalcOpHourV020,OpHour1,16,6,32,12,);
B(B_VAROUT,,MDhg1OperatHour,32,8,34,10,);
B(B_VAROUT,,MDhg1OperHourRel,32,7,34,9,);
B(B_VARIN,,MDhg1OperatHour,14,10,16,12,);
B(B_VARIN,,MDhg1OperHourRel,14,9,16,11,);
B(B_VARIN,,MXresetOpHour,14,8,16,10,);
L(16,5,16,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_COMMENT,,operation houres hoisting gear 2,1,1,27,2,);
B(B_VARIN,,QXhg2Clutch,9,6,11,8,);
B(B_F,@OR-3,,11,3,16,8,);
B(B_VARIN,,QXhg2BrakeNormal,9,4,11,6,);
B(B_VARIN,,QXhg2BrakeFastSp,9,5,11,7,);
B(B_FB,GPcalcOpHourV020,OpHour2,16,6,32,12,);
B(B_VAROUT,,MDhg2OperatHour,32,8,34,10,);
B(B_VAROUT,,MDhg2OperHourRel,32,7,34,9,);
B(B_VARIN,,MDhg2OperatHour,14,10,16,12,);
B(B_VARIN,,MDhg2OperHourRel,14,9,16,11,);
B(B_VARIN,,MXresetOpHour,14,8,16,10,);
L(16,5,16,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,operation houres luffing gear 1 (main boom),1,1,27,2,);
B(B_FB,GPcalcOpHourV020,OpHour3,11,4,27,10,);
B(B_VAROUT,,MDlgOperatHour,27,6,29,8,);
B(B_VAROUT,,MDlgOperHourRel,27,5,29,7,);
B(B_VARIN,,MDlgOperatHour,9,8,11,10,);
B(B_VARIN,,MDlgOperHourRel,9,7,11,9,);
B(B_VARIN,,MXresetOpHour,9,6,11,8,);
B(B_VARIN,,QXlgBrake,9,5,11,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,operation houres luffing gear 2 (luffing jib),1,1,27,2,);
B(B_VARIN,,QXlg2Brake,9,5,11,7,);
B(B_FB,GPcalcOpHourV020,OpHour4,11,4,27,10,);
B(B_VAROUT,,MDlg2OperatHour,27,6,29,8,);
B(B_VAROUT,,MDlg2OperHourRel,27,5,29,7,);
B(B_VARIN,,MDlg2OperatHour,9,8,11,10,);
B(B_VARIN,,MDlg2OperHourRel,9,7,11,9,);
B(B_VARIN,,MXresetOpHour,9,6,11,8,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_VARIN,,QXderrickWiBrake,9,5,11,7,);
B(B_FB,GPcalcOpHourV020,OpHour5,11,4,27,10,);
B(B_VAROUT,,MDlg3OperatHour,27,6,29,8,);
B(B_VAROUT,,MDlg3OperHourRel,27,5,29,7,);
B(B_VARIN,,MDlg3OperatHour,9,8,11,10,);
B(B_VARIN,,MDlg3OperHourRel,9,7,11,9,);
B(B_VARIN,,MXresetOpHour,9,6,11,8,);
B(B_COMMENT,,operation houres luffing gear 3 (derrick winch),1,1,27,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_VARIN,,QXsgBrake,9,5,11,7,);
B(B_FB,GPcalcOpHourV020,OpHour6,11,4,27,10,);
B(B_VAROUT,,MDsgOperatHour,27,6,29,8,);
B(B_VAROUT,,MDsgOperHourRel,27,5,29,7,);
B(B_VARIN,,MDsgOperatHour,9,8,11,10,);
B(B_VARIN,,MDsgOperHourRel,9,7,11,9,);
B(B_VARIN,,MXresetOpHour,9,6,11,8,);
B(B_COMMENT,,operation houres slewing gear,1,1,27,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_COMMENT,,operation houres travelling gear,1,1,27,2,);
B(B_F,@AND-2,,11,3,16,7,0N);
B(B_VARIN,,MXstopAllFunctio,9,5,11,7,);
B(B_VARIN,,MXswitTravelGear,9,4,11,6,);
B(B_FB,GPcalcOpHourV020,OpHour7,16,5,32,11,);
B(B_VAROUT,,MDtgOperatHour,32,7,34,9,);
B(B_VAROUT,,MDtgOperHourRel,32,6,34,8,);
B(B_VARIN,,MDtgOperatHour,14,9,16,11,);
B(B_VARIN,,MDtgOperHourRel,14,8,16,10,);
B(B_VARIN,,MXresetOpHour,14,7,16,9,);
L(16,5,16,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_VARIN,,MXminEngineSpeed,9,5,11,7,);
B(B_FB,GPcalcOpHourV020,OpHour8,11,4,27,10,);
B(B_VAROUT,,MDengOperatHour,27,6,29,8,);
B(B_VAROUT,,MDengOperHourRel,27,5,29,7,);
B(B_VARIN,,MDengOperatHour,9,8,11,10,);
B(B_VARIN,,MDengOperHourRel,9,7,11,9,);
B(B_VARIN,,MXresetOpHour,9,6,11,8,);
B(B_COMMENT,,operation houres diesel engine,1,1,27,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,operation houres drilling drive,1,1,27,2,);
B(B_FB,GPcalcOpHourV020,OpHour9,11,3,27,9,);
B(B_VAROUT,,MDddOperHour,27,5,29,7,);
B(B_VARIN,,MDddOperHour,9,7,11,9,);
B(B_VAROUT,,MDddOperHourRel,27,4,29,6,);
B(B_VARIN,,MDddOperHourRel,9,6,11,8,);
B(B_VARIN,,MXresetOpHour,9,5,11,7,);
B(B_VARIN,,MXddEnabPowStage,9,4,11,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_COMMENT,,operation houres vibrator operation,1,1,27,2,);
B(B_VAROUT,,MDvibOperHour,27,5,29,7,);
B(B_FB,GPcalcOpHourV020,OpHour10,11,3,27,9,);
B(B_VARIN,,MDvibOperHour,9,7,11,9,);
B(B_VAROUT,,MDvibOperHourRel,27,4,29,6,);
B(B_VARIN,,MDvibOperHourRel,9,6,11,8,);
B(B_VARIN,,MXresetOpHour,9,5,11,7,);
B(B_VARIN,,MXvibratWorking,9,4,11,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_COMMENT,,operation houres hammer operation,1,1,27,2,);
B(B_FB,GPcalcOpHourV020,OpHour11,11,3,27,9,);
B(B_VAROUT,,MDhamOperHour,27,5,29,7,);
B(B_VARIN,,MDhamOperHour,9,7,11,9,);
B(B_VAROUT,,MDhamOperHourRel,27,4,29,6,);
B(B_VARIN,,MDhamOperHourRel,9,6,11,8,);
B(B_VARIN,,MXresetOpHour,9,5,11,7,);
B(B_VARIN,,MXhammerWorking,9,4,11,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_COMMENT,,operation houres grab operation,1,1,27,2,);
B(B_VARIN,,MXhydrGrabActive,9,4,11,6,);
B(B_FB,GPcalcOpHourV020,OpHour12,11,3,27,9,);
B(B_VAROUT,,MDgrbOperHour,27,5,29,7,);
B(B_VARIN,,MDgrbOperHour,9,7,11,9,);
B(B_VAROUT,,MDgrbOperHourRel,27,4,29,6,);
B(B_VARIN,,MDgrbOperHourRel,9,6,11,8,);
B(B_VARIN,,MXresetOpHour,9,5,11,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,operation houres additional hydraulic peration (casing oscillator),1,1,27,2,);
B(B_FB,GPcalcOpHourV020,OpHour13,11,4,27,10,);
B(B_VAROUT,,MDadhOperHour,27,6,29,8,);
B(B_VARIN,,MDadhOperHour,9,8,11,10,);
B(B_VAROUT,,MDadhOperHourRel,27,5,29,7,);
B(B_VARIN,,MDadhOperHourRel,9,7,11,9,);
B(B_VARIN,,MXresetOpHour,9,6,11,8,);
B(B_VARIN,,MXaddHydrActive,9,5,11,7,);
        END_NETWORK_BODY
    END_NET_WORK
END_BODY
END_PROGRAM

PROGRAM HG1progV180
(*name of author: Manfred Schapler
version: 1.0
date: 04/97
modification:*)
(*name of author: Manfred Schapler
version: 1.0
date: 04/97
modification:*)
	VAR_EXTERNAL 
		ITXhg1FastSpeed: BOOL:=FALSE;
			(*preselection hg1 fast speed operation *)
		ITXfreefallOper: BOOL:=FALSE;
			(*preselection freefall operation *)
		IXhg1StandStInd: BOOL:=FALSE;
			(*standstill indicator winch HG 1*)
		IXhg1FeedPressOk: BOOL:=FALSE;
			(*feed pressure HG 1 o.k.*)
		IXhg1BrakePresOk: BOOL:=FALSE;
			(*brake pressure HG 1 o.k.*)
		IXhg1LowerLimOk: BOOL:=FALSE;
			(*lower limit switch HG 1 o.k.*)
		IXhg1UpperLimOk: BOOL:=FALSE;
			(*upper limit switch HG 1 o.k.*)
		IXunsecuredFreef: BOOL:=FALSE;
			(*key switch 2: unsecured freefall*)
		IXhgRelFreefall: BOOL:=FALSE;
			(*clutch valve release freefall*)
		IXhg1NoRopeLimit: BOOL:=FALSE;
			(*ad no rope tension limitation HG1*)
		IWhg1SystemPress: UINT:=0;
			(*system pressure HG 1 / bentonit pump*)
		IDcounterHg1: DINT:=0;
			(*counter rope lenght hg1*)
		QXhg1BrakeNormal: BOOL:=FALSE;
			(*HG 1 brake normal speed operation*)
		QXhg1BrakeFastSp: BOOL:=FALSE;
			(*HG 1 brake fast speed operation*)
		QXhg1Clutch: BOOL:=FALSE;
			(*HG 1 clutch*)
		QWhg1Lifting: UINT:=0;
			(*HG 1 pump lifting / bentonit pump high pressure*)
		QWhg1Lowering: UINT:=0;
			(*HG 1 pump lowering / bentonit pump low pressure*)
		QWhg1Trimot: UINT:=0;
			(*HG 1 pump trimot*)
		MXhg1AnalSigPos: BOOL:=FALSE;
			(*hg1 analog signal positiv*)
		MXhg1AnalSigNeg: BOOL:=FALSE;
			(*hg1 analog signal negativ*)
		MXminEngineSpeed: BOOL:=FALSE;
			(*minimum engine speed reached*)
		MXstopAllFunctio: BOOL:=FALSE;
			(*stop all excavator functions*)
		MXlockFreefall: BOOL:=FALSE;
			(*lock freefall*)
		MXhg1ExtAnalSign: BOOL:=FALSE;
			(*HG 1 other, external analog signal*)
		MXhg1LocStopInt: BOOL:=FALSE;
			(*HG 1 local stop integrated*)
		MXhg1LocStopRapU: BOOL:=FALSE;
			(*HG 1 local stop rapid lifting*)
		MXhg1LocStopRapD: BOOL:=FALSE;
			(*HG 1 local stop rapid lowering*)
		MXhg1GlobStopUp: BOOL:=FALSE;
			(*HG 1 global stop rapid up*)
		MXhg1GlobStopDow: BOOL:=FALSE;
			(*HG 1 global stop rapid down*)
		MXhg1WinchStand: BOOL:=FALSE;
			(*HG 1 winch standing still*)
		MXhg1WinchMove: BOOL:=FALSE;
			(*hg1 winch is moving*)
		MXhg1PumpInZero: BOOL:=FALSE;
			(*HG 1 pump in zero*)
		MXhg1EnPowStage: BOOL:=FALSE;
			(*HG 1 enable pump lifting or lowering*)
		MXhg1EnablTrimot: BOOL:=FALSE;
			(*HG 1 enable trimot*)
		MXhg1pselFreefal: BOOL:=FALSE;
			(*HG 1 preselected freefall*)
		MXhg1LockClutch: BOOL:=FALSE;
			(*HG 1 global lock clutch*)
		MXhg1ExtControl: BOOL:=FALSE;
			(*HG 1 external enable to all outputs*)
		MXhg1WinchLift: BOOL:=FALSE;
			(*hg1 winch is lifting*)
		MXhg1WinchLower: BOOL:=FALSE;
			(*hg2 winch is lowering*)
		MXhg1ErrPressInd: BOOL:=FALSE;
			(*hg 1 error system pressure indicator*)
		MXhg1LockFastSpe: BOOL:=FALSE;
			(*hg 1 lock fast speed*)
		MXadHg1LoweLimit: BOOL:=FALSE;
			(*lower limit switch for HG 1*)
		MXlmlStop: BOOL:=FALSE;
			(*lml stop*)
		MXlimitSwBridged: BOOL:=FALSE;
			(*X23 limit switches bridged for assembly operation*)
		MXhg1LockTrimot: BOOL:=FALSE;
			(*hg1 lock trimot*)
		MXhg1ClutchExt: BOOL:=FALSE;
			(*ad dgc hg1 clutch external control*)
		MXjoyBridgeFastS: BOOL:=FALSE;
			(*bridge fast speed on joystick*)
		MXhg1EnabFastSpe: BOOL:=FALSE;
			(*enable fast speed operation hg1*)
		MXhg1UpLimBridge: BOOL:=FALSE;
			(*upper limit switch brigde hoisting gear 1*)
		MXhg1LoLimBridge: BOOL:=FALSE;
			(*lower limit switch brigde hoisting gear 1*)
		MXdrillFreefPres: BOOL:=FALSE;
			(*preselection freefall drilling mode*)
		MXhg1ExitProg: BOOL:=FALSE;
			(*HG 1 exit programm*)
		MXhg1LedFastSpe: BOOL:=FALSE;
			(*enable led fast speed operation hg1*)
		MXhgFastSpeed: BOOL:=FALSE;
			(*HG 1 and 2 fast speed operation preselected*)
		MXengStarterActi: BOOL:=FALSE;
			(*engine starter activated*)
		MXhg1StopLimLift: BOOL:=FALSE;
			(*hg1 stop lifting by hg hight limitation*)
		MXhg1StopLimLowe: BOOL:=FALSE;
			(*hg1 stop lowering by hg hight limitation*)
		MXhg1SymStopLift: BOOL:=FALSE;
			(*hg1 stop lifting by hg hight limitation*)
		MXhg1SymStopLowe: BOOL:=FALSE;
			(*hg1 stop lowering by hg hight limitation*)
		MXlmlBridged: BOOL:=FALSE;
			(*lml bridged*)
		MXhgHightLimAct: BOOL:=FALSE;
			(*hg hight limitation activ*)
		MXhg1SpeedRedAct: BOOL:=FALSE;
			(*hg speed reduction is active*)
		MXhg1EnaExitProg: BOOL:=FALSE;
			(*enable exit hg1 programm*)
		MDhg1JoySignal: REAL:=0.0;
			(*HG 1 joystick signal in +/-[%]*)
		MDhg1SystemPress: REAL:=0.0;
			(*HG 1 system pressure in bar*)
		MDhg1ExtAnalSign: REAL:=0.0;
			(*HG 1 external analog signal*)
		MXlmlRedAllFunct: BOOL:=FALSE;
			(*lml reduces all functions*)
		MXlmlRedLoaIncFu: BOOL:=FALSE;
			(*lml reduces all load increasing functions*)
		MX600barPreTrans: BOOL:=FALSE;
			(*600bar pressure transmitter used*)
		MXhgByLudvSectio: BOOL:=FALSE;
			(*hg driven by LUDV section*)
		MXLiftCrane: BOOL:=FALSE;
			(*crawler crane is lift crane type*)
		MDlmlSpeedRed_Hg: REAL:=0.0;
			(*lml speed reduction value HG (lml changes 2010: spped reduction for electronical controlled crane functions)*)
		MDhg1PumpSignal: REAL:=0.0;
			(*HG 1 analog signal pump in [%]*)
		MDhg1TrimotSigna: REAL:=0.0;
			(*HG 1 analog signal trimot in [%]*)
		MDpowerLimReduct: REAL:=0.0;
			(*maximum engine power regulator limitation reduction [%]*)
		MDhg1LowRegLimSi: REAL:=0.0;
			(*hg 1 lowering regulation limitation signal*)
		MDhg2LowRegLimSi: REAL:=0.0;
			(*hg 2 lowering regulation limitation signal*)
		MDhg1AnalogSig: REAL:=0.0;
			(*joystick analog signal for hg1*)
		MDhg1RopeSpeed: REAL:=0.0;
			(*hg 1 rope speed in  m/min*)
		MDscRopeLenHg1: REAL:=0.0;
			(*screen indication rope lenght hg1*)
		MDhgSpeedReduct: REAL:=0.0;
			(*hg speed reduction factor*)
	END_VAR
	VAR_EXTERNAL CONSTANT
		MSG_INFO: UINT:=0;
		MSG_ERROR: UINT:=0;
	END_VAR
	VAR_EXTERNAL RETAIN
		MXhg1RopeLenMeas: BOOL:=FALSE;
			(*rope lenght measuring hg 1 enabled*)
		MXhg1Preselect: BOOL:=FALSE;
			(*hg1  preselected*)
		MXmachTypeOk: BOOL:=FALSE;
			(*machine type is activated*)
		MDhg1PressMemory: REAL:=0.0;
			(*HG 1 pressure memory*)
		MDhgHightLimitUp: REAL:=0.0;
			(*hg hight limitation Up [m]*)
		MDhgHightLimitDn: REAL:=0.0;
			(*hg hight limitation Down [m]*)
	END_VAR
	VAR_EXTERNAL CONSTANT RETAIN
		CXadHg1LoweLimit: BOOL:=FALSE;
			(*additional device lower limit switch*)
		CXhg1Preselect: BOOL:=FALSE;
			(*HG 1 is preselected (installed)*)
		CWhg1minCurPumUp: UINT:=0;
			(*HG 1 minimum current pump up*)
		CWhg1minCurPumDn: UINT:=0;
			(*HG 1 minimum current pump down*)
		CWhg1maxCurPumUp: UINT:=0;
			(*HG 1 maximum current pump up*)
		CWhg1maxCurPumDn: UINT:=0;
			(*HG 1 maximum current pump down*)
		CWhg1minCurTrimo: UINT:=0;
			(*HG 1 minimum current trimot up*)
		CWhg1maxCurTrimo: UINT:=0;
			(*HG 1 maximum current trimot down*)
		CDhg1IntTimeUp: REAL:=0.0;
			(*HG 1 integrator time up*)
		CDhg1IntTimeDn: REAL:=0.0;
			(*HG 1 integrator time down*)
		CDhg1LeakOilSign: REAL:=0.0;
			(*HG 1 leakoil compensation Signal in [%]*)
		CDlowLimSignal: REAL:=0.0;
			(*lower limitation regulator analog signal 270bar*)
		CDhg1maxPressFSp: REAL:=0.0;
			(*HG 1 maximum pressure for normal fast speed operation*)
		CDhgMaxWinchSp: REAL:=0.0;
			(*hg hight limitation max. winch speed [m/min]*)
	END_VAR
	VAR 
		LXinitOk: BOOL:=FALSE;
			(*init completed*)
		LXhg1PressLoaded: BOOL:=FALSE;
			(*HG 1 system pressure loaded*)
		LXhg1EnTrimotAna: BOOL:=FALSE;
			(*enable trimot from analog part*)
		LXhg1LoadPressSy: BOOL:=FALSE;
			(*give system pressure into system*)
		LXstoreSysPress: BOOL:=FALSE;
			(*store system pressure*)
		LXenLeakoilComp: BOOL:=FALSE;
			(*enable leakoil compensation*)
		LXstart: BOOL:=FALSE;
		LDcounterHg1_t0: DINT:=0;
			(*counter rope lenght hg1 by last scan*)
		LDintTimeUp: REAL:=0.0;
		LDintTimeDown: REAL:=0.0;
		LDredLifting: REAL:=0.0;
		LDredLowering: REAL:=0.0;
		LDscalePress: REAL:=0.0;
		CorrValue_UInt1: CorrValue_UInt;
		CorrValue_UInt2: CorrValue_UInt;
		CorrValue_UInt3: CorrValue_UInt;
		CorrValue_UInt4: CorrValue_UInt;
		CorrValue_UInt5: CorrValue_UInt;
		CorrValue_UInt6: CorrValue_UInt;
		CorrValue_Real1: CorrValue_Real;
		CorrValue_Real2: CorrValue_Real;
		CorrValue_Real3: CorrValue_Real;
		CorrValue_Real4: CorrValue_Real;
		CorrValue_Real5: CorrValue_Real;
		CorrValue_Real6: CorrValue_Real;
		CorrValue_Bool1: CorrValue_Bool;
		CorrValue_Bool2: CorrValue_Bool;
		Message1: MsgRealReal;
		Message2: MsgRealReal;
		Message3: MsgRealReal;
		Message4: MsgRealReal;
		Message5: MsgRealReal;
		ScaleAI1: ScaleAI;
		TON2: TON;
		TOF1: TOF;
		TOF2: TOF;
		R_TRIG1: R_TRIG;
		SR1: SR;
		digital1: HGdigLogPartV036;
		analog1: HGanalogPartV039;
		PowerStage1: PowerStageOpnEnd;
		PowerStage2: PowerStageOpnEnd;
		PowerStage3: PowerStage;
		WndComp1: WndComp;
	END_VAR
'FBD'
BODY
    WORKSPACE
        NETWORK_LIST_TYPE := NWTYPEFBD ;
        ACTIVE_NETWORK := 0 ;
    END_WORKSPACE
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_COMMENT,,exit,1,1,40,2,);
B(B_VARIN,,MXmachTypeOk,9,4,11,6,);
B(B_RETURN,,,16,4,18,6,);
B(B_VARIN,,MXhgByLudvSectio,9,5,11,7,);
B(B_F,@OR-2,,11,3,16,7,N);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_COMMENT,,init first time,1,1,27,2,);
B(B_VARIN,,LXinitOk,9,4,11,6,);
B(B_F,not,,11,3,16,6,);
B(B_JUMP,,init,16,4,18,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_COMMENT,,protect correction value change while program activ,1,1,27,2,);
B(B_VAROUT,,MXhg1Preselect,16,4,18,6,);
B(B_F,sel,,11,3,16,8,);
B(B_VARIN,,CXhg1Preselect,9,5,11,7,);
B(B_VARIN,,MXhg1Preselect,9,6,11,8,);
B(B_VARIN,,LXstart,9,4,11,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VAROUT,,LXstart,11,1,13,3,);
B(B_VARIN,,TRUE,9,1,11,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_COMMENT,,exit programm when not preselected,1,1,27,2,);
B(B_VARIN,,MXhg1EnPowStage,10,4,12,6,);
B(B_VARIN,,MXhg1PumpInZero,10,6,12,8,);
B(B_VARIN,,QXhg1Clutch,10,5,12,7,);
B(B_F,@OR-2,,19,8,24,12,0N);
B(B_F,@AND-5,,12,3,17,10,NN);
B(B_VARIN,,MXhg1Preselect,9,8,11,10,);
B(B_VARIN,,MXhg1ExitProg,10,7,12,9,);
B(B_JUMP,,exit,24,9,26,11,);
L(18,5,18,10);
L(18,10,19,10);
L(17,5,18,5);
L(11,9,12,9);
L(11,9,11,11);
L(11,11,19,11);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_F,sel,,18,3,23,8,);
B(B_VARIN,,400.0,16,5,18,7,);
B(B_F,to_real,,11,6,18,9,);
B(B_VARIN,,600.0,9,7,11,9,);
B(B_VAROUT,,LDscalePress,23,4,25,6,);
B(B_VARIN,,MX600barPreTrans,16,4,18,6,);
B(B_COMMENT,,select scale of pressure transmitter,1,1,27,2,);
L(18,7,18,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 22 ;
        NETWORK_BODY
B(B_COMMENT,,input system pressure,1,1,27,2,);
B(B_VARIN,,IWhg1SystemPress,9,5,11,7,);
B(B_FB,ScaleAI,ScaleAI1,11,4,19,9,);
B(B_VAROUT,,MDhg1SystemPress,19,5,21,7,);
B(B_VARIN,,LDscalePress,9,6,11,8,);
B(B_FB,SR,SR1,26,15,31,19,0N);
B(B_F,@AND-2,,21,15,26,19,0N);
B(B_VARIN,,MXengStarterActi,17,17,19,19,);
B(B_FB,MsgRealReal,Message2,38,14,47,21,);
B(B_VARIN,,143,36,15,38,17,);
B(B_VARIN,,MSG_ERROR,36,17,38,19,);
B(B_F,@OR-2,,32,11,37,15,);
B(B_VAROUT,,MXhg1ErrPressInd,37,12,39,14,);
B(B_FB,MsgRealReal,Message1,34,4,43,11,);
B(B_VARIN,,144,32,5,34,7,);
B(B_VARIN,,MSG_ERROR,32,7,34,9,);
L(19,8,20,8);
L(20,17,21,17);
L(19,18,21,18);
L(20,19,26,19);
L(26,18,26,19);
L(31,17,38,17);
L(20,8,20,19);
L(32,14,32,17);
L(21,7,21,13);
L(21,13,32,13);
L(19,7,34,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 19 ;
        NETWORK_BODY
B(B_COMMENT,,standstill indicator,1,1,27,2,);
B(B_FB,WndComp,WndComp1,18,7,25,13,);
B(B_VARIN,,5.0,16,9,18,11,);
B(B_VARIN,,2.0,16,11,18,13,);
B(B_F,sel,,29,6,34,11,);
B(B_VAROUT,,MXhg1WinchStand,34,7,36,9,);
B(B_VARIN,,MXhg1RopeLenMeas,26,3,28,5,);
B(B_VARIN,,IXhg1StandStInd,25,4,27,6,);
B(B_F,abs,,11,6,16,9,);
B(B_VARIN,,MDhg1RopeSpeed,9,7,11,9,);
B(B_F,sel,,29,12,34,17,);
B(B_FB,TON,TON2,21,14,26,18,);
B(B_VARIN,,IDcounterHg1,9,15,11,17,);
B(B_VARIN,,LDcounterHg1_t0,9,16,11,18,);
B(B_F,@EQ-2,,11,14,16,18,);
B(B_VARIN,,T#0.1s,19,16,21,18,);
B(B_F,not,,34,12,39,15,);
B(B_VAROUT,,MXhg1WinchMove,39,13,41,15,);
L(17,8,17,9);
L(17,9,18,9);
L(25,10,29,10);
L(27,9,29,9);
L(28,8,29,8);
L(16,8,17,8);
L(28,4,28,14);
L(28,14,29,14);
L(27,5,27,15);
L(27,15,29,15);
L(16,16,21,16);
L(26,16,29,16);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 18 ;
        NETWORK_BODY
B(B_COMMENT,,check winch is lifting or lowering for special leakoilcompensation,1,1,27,2,);
B(B_COMMENT,,only when rope lenght measuring is installed,1,2,27,3,);
B(B_VARIN,,IDcounterHg1,10,5,12,7,);
B(B_FB,TOF,TOF1,28,4,33,8,);
B(B_VAROUT,,MXhg1WinchLift,33,5,35,7,);
B(B_VAROUT,,MXhg1WinchLower,33,11,35,13,);
B(B_FB,TOF,TOF2,28,10,33,14,);
B(B_VARIN,,T#0.1s,25,14,27,16,);
B(B_F,@GT-2,,21,4,26,8,);
B(B_F,@LT-2,,21,10,26,14,);
B(B_VARIN,,LDcounterHg1_t0,10,8,12,10,);
B(B_F,@SUB,,14,13,19,17,);
B(B_VARIN,,1,9,15,11,17,);
B(B_F,@ADD-2,,14,7,19,11,);
L(27,7,27,15);
L(27,13,28,13);
L(12,6,21,6);
L(26,6,28,6);
L(13,12,21,12);
L(26,12,28,12);
L(27,7,28,7);
L(13,6,13,12);
L(19,15,20,15);
L(20,13,20,15);
L(20,13,21,13);
L(20,7,20,9);
L(20,7,21,7);
L(12,9,12,15);
L(12,15,14,15);
L(11,10,14,10);
L(11,10,11,16);
L(11,16,14,16);
L(12,9,14,9);
L(19,9,20,9);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,IDcounterHg1,9,1,11,3,);
B(B_VAROUT,,LDcounterHg1_t0,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,lower limit switch,1,1,27,2,);
B(B_VARIN,,IXhg1LowerLimOk,14,4,16,6,);
B(B_F,@OR-2,,16,3,21,7,);
B(B_F,@OR-2,,23,6,28,10,);
B(B_VARIN,,MXlimitSwBridged,21,8,23,10,);
B(B_VAROUT,,MXadHg1LoweLimit,22,4,24,6,);
B(B_VAROUT,,MXhg1LoLimBridge,28,7,30,9,);
B(B_F,@AND-2,,11,6,16,10,NN);
B(B_VARIN,,MXLiftCrane,9,8,11,10,);
B(B_VARIN,,CXadHg1LoweLimit,9,7,11,9,);
L(22,8,23,8);
L(22,5,22,8);
L(21,5,22,5);
L(16,6,16,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_COMMENT,,upper limit switch,1,1,27,2,);
B(B_F,@OR-2,,11,3,16,7,);
B(B_VARIN,,MXlimitSwBridged,9,5,11,7,);
B(B_VAROUT,,MXhg1UpLimBridge,16,4,18,6,);
B(B_VARIN,,IXhg1UpperLimOk,9,4,11,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 15 ;
        NETWORK_BODY
B(B_COMMENT,,send messages,1,1,27,2,);
B(B_FB,MsgRealReal,Message3,12,4,21,11,0N);
B(B_VARIN,,249,10,5,12,7,);
B(B_VARIN,,IXhg1UpperLimOk,10,6,12,8,);
B(B_FB,MsgRealReal,Message4,31,4,40,11,0N);
B(B_VARIN,,698,29,5,31,7,);
B(B_VARIN,,IXhg1LowerLimOk,29,6,31,8,);
B(B_FB,MsgRealReal,Message5,50,4,59,11,);
B(B_VARIN,,524,48,5,50,7,);
B(B_VARIN,,IXhg1NoRopeLimit,48,6,50,8,);
B(B_VARIN,,MSG_INFO,9,11,11,13,);
B(B_COMMENT,,Info: diese Message wird abgesetzt wennø^die Seilzugbegrenzung überbrückt wurde,50,11,66,13,);
L(11,12,49,12);
L(49,8,49,12);
L(49,8,50,8);
L(30,8,31,8);
L(30,8,30,12);
L(11,8,11,12);
L(11,8,12,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,exit program by external controlling,1,1,27,2,);
B(B_VARIN,,MXhg1ExtControl,9,3,11,5,);
B(B_JUMP,,exit,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 25 ;
        NETWORK_BODY
B(B_VARIN,,MXhg1ExtAnalSign,19,13,21,15,);
B(B_F,sel,,21,12,26,17,);
B(B_VARIN,,MDhg1JoySignal,19,14,21,16,);
B(B_VARIN,,MDhg1ExtAnalSign,19,15,21,17,);
B(B_VARIN,,0.0,29,14,31,16,);
B(B_F,sel,,31,11,36,16,);
B(B_F,@GT-2,,31,16,36,20,);
B(B_F,@LT-2,,31,20,36,24,);
B(B_VARIN,,0.0,29,18,31,20,);
B(B_VARIN,,0.0,29,22,31,24,);
B(B_VAROUT,,MXhg1AnalSigNeg,36,21,38,23,);
B(B_VAROUT,,MXhg1AnalSigPos,36,17,38,19,);
B(B_VAROUT,,MDhg1AnalogSig,36,12,38,14,);
B(B_COMMENT,,analog signal selector and stop hg 1,2,1,28,2,);
B(B_F,@AND-2,,12,5,17,9,0N);
B(B_F,@AND-2,,12,9,17,13,0N);
B(B_VARIN,,MXhg1LocStopRapU,10,6,12,8,);
B(B_VARIN,,MXhg1LocStopInt,17,3,19,5,);
B(B_VARIN,,MXhg1LocStopRapD,10,10,12,12,);
B(B_VARIN,,MXhg1AnalSigNeg,10,7,12,9,);
B(B_VARIN,,MXhg1AnalSigPos,10,11,12,13,);
B(B_F,@OR-3,,21,7,26,12,);
L(26,14,31,14);
L(27,14,27,22);
L(27,18,31,18);
L(27,22,31,22);
L(27,9,27,13);
L(27,13,31,13);
L(19,4,19,9);
L(19,9,21,9);
L(17,7,18,7);
L(18,7,18,10);
L(18,10,21,10);
L(17,11,21,11);
L(26,9,27,9);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 24 ;
        NETWORK_BODY
B(B_COMMENT,,rapid stop hg 1,1,1,27,2,);
B(B_VARIN,,MXhg1LocStopRapU,20,4,22,6,);
B(B_VARIN,,MXhg1LocStopRapD,20,5,22,7,);
B(B_F,@OR-2,,22,3,27,7,);
B(B_VAROUT,,LDintTimeUp,34,9,36,11,);
B(B_F,sel,,29,8,34,13,);
B(B_VARIN,,100.0,9,10,11,12,);
B(B_F,sel,,20,10,25,15,);
B(B_F,@LT-2,,13,8,18,12,);
B(B_VARIN,,CDhg1IntTimeUp,10,7,12,9,);
B(B_F,sel,,29,16,34,21,);
B(B_VAROUT,,LDintTimeDown,34,17,36,19,);
B(B_VARIN,,100.0,9,18,11,20,);
B(B_F,sel,,20,18,25,23,);
B(B_F,@LT-2,,13,16,18,20,);
B(B_VARIN,,CDhg1IntTimeDn,10,15,12,17,);
L(27,11,29,11);
L(27,12,29,12);
L(27,5,28,5);
L(28,10,29,10);
L(11,11,13,11);
L(11,11,11,14);
L(12,13,20,13);
L(11,14,20,14);
L(19,10,19,12);
L(19,12,20,12);
L(12,10,13,10);
L(18,10,19,10);
L(26,8,26,11);
L(26,11,27,11);
L(25,12,27,12);
L(12,8,26,8);
L(12,8,12,13);
L(28,18,29,18);
L(28,5,28,18);
L(11,19,13,19);
L(11,19,11,22);
L(12,21,20,21);
L(11,22,20,22);
L(19,18,19,20);
L(19,20,20,20);
L(12,18,13,18);
L(18,18,19,18);
L(26,16,26,19);
L(12,16,26,16);
L(12,16,12,21);
L(25,20,29,20);
L(26,19,29,19);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 35 ;
        NETWORK_BODY
B(B_VARIN,,MXhg1AnalSigPos,26,6,28,8,);
B(B_VARIN,,MXhg1AnalSigNeg,26,7,28,9,);
B(B_VARIN,,MXhg1PumpInZero,26,8,28,10,);
B(B_VARIN,,IXhg1FeedPressOk,26,16,28,18,);
B(B_VAROUT,,MXhg1EnPowStage,51,10,53,12,);
B(B_VARIN,,112,26,17,28,19,);
B(B_VARIN,,MXstopAllFunctio,26,12,28,14,);
B(B_VARIN,,MXhg1WinchStand,26,15,28,17,);
B(B_VAROUT,,MXhg1EnablTrimot,51,11,53,13,);
B(B_VAROUT,,MXhg1LocStopInt,51,12,53,14,);
B(B_VAROUT,,MXhg1LocStopRapU,51,13,53,15,);
B(B_VAROUT,,LXstoreSysPress,51,15,53,17,);
B(B_VAROUT,,LXenLeakoilComp,51,16,53,18,);
B(B_VAROUT,,MXhg1pselFreefal,51,17,53,19,);
B(B_VAROUT,,MXhg1LedFastSpe,51,18,53,20,);
B(B_VAROUT,,MXhg1LocStopRapD,51,14,53,16,);
B(B_VARIN,,IXhg1BrakePresOk,26,18,28,20,);
B(B_VARIN,,ITXhg1FastSpeed,26,21,28,23,);
B(B_VARIN,,ITXfreefallOper,26,22,28,24,);
B(B_VARIN,,MXhg1LockClutch,26,25,28,27,);
B(B_VARIN,,MXhg1LoLimBridge,26,19,28,21,);
B(B_VAROUT,,QXhg1BrakeFastSp,53,8,55,10,);
B(B_VAROUT,,LXhg1LoadPressSy,53,6,55,8,);
B(B_VAROUT,,QXhg1BrakeNormal,53,7,55,9,);
B(B_F,@OR-2,,53,2,58,6,);
B(B_VAROUT,,QXhg1Clutch,58,3,60,5,);
B(B_VARIN,,MXhg1ClutchExt,51,3,53,5,);
B(B_VARIN,,IXunsecuredFreef,26,24,28,26,);
B(B_VAROUT,,MXhg1EnabFastSpe,51,19,53,21,);
B(B_VARIN,,MXjoyBridgeFastS,26,30,28,32,);
B(B_VARIN,,MXminEngineSpeed,26,27,28,29,);
B(B_VARIN,,CDhg1maxPressFSp,26,29,28,31,);
B(B_VARIN,,MXhg1LockFastSpe,26,31,28,33,);
B(B_VARIN,,MXhgFastSpeed,26,28,28,30,);
B(B_VARIN,,MXdrillFreefPres,26,26,28,28,);
B(B_VARIN,,MXhg1UpLimBridge,26,20,28,22,);
B(B_VARIN,,IXhgRelFreefall,10,23,12,25,);
B(B_VARIN,,MXlockFreefall,10,24,12,26,);
B(B_F,@AND-2,,12,22,17,26,0N);
B(B_VARIN,,MDhg1PressMemory,26,32,28,34,);
B(B_FB,HGdigLogPartV036,digital1,28,5,51,34,);
B(B_F,@AND-2,,11,18,16,22,0N);
B(B_VARIN,,MXhg1LockTrimot,9,20,11,22,);
B(B_VARIN,,LXhg1EnTrimotAna,9,19,11,21,);
B(B_F,@AND-2,,11,14,16,18,0N);
B(B_VARIN,,MXlmlStop,9,15,11,17,);
B(B_VARIN,,MXlmlBridged,9,16,11,18,);
B(B_F,@OR-2,,11,10,16,14,);
B(B_COMMENT,,digital logic hg 1,1,1,27,2,);
B(B_VARIN,,MXhg1ErrPressInd,9,4,11,6,);
B(B_VARIN,,LXhg1PressLoaded,9,3,11,5,);
B(B_F,@OR-2,,11,2,16,6,);
B(B_F,@OR-2,,11,6,16,10,);
B(B_VARIN,,MXhg1GlobStopUp,9,7,11,9,);
B(B_VARIN,,MXhg1StopLimLift,9,8,11,10,);
B(B_VARIN,,MXhg1GlobStopDow,9,11,11,13,);
B(B_VARIN,,MXhg1StopLimLowe,9,12,11,14,);
L(17,4,17,10);
L(17,15,17,20);
L(52,5,52,10);
L(52,5,53,5);
L(17,24,28,24);
L(51,7,53,7);
L(51,8,53,8);
L(51,9,53,9);
L(17,10,28,10);
L(51,10,52,10);
L(17,15,28,15);
L(16,14,28,14);
L(16,20,17,20);
L(16,14,16,16);
L(16,11,28,11);
L(16,4,17,4);
L(16,8,16,11);
L(16,12,28,12);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 22 ;
        NETWORK_BODY
B(B_COMMENT,,signal reduction lifting,1,1,27,2,);
B(B_F,sel,,10,6,15,11,);
B(B_VARIN,,MXhg1SpeedRedAct,8,7,10,9,);
B(B_VARIN,,MDhgSpeedReduct,8,9,10,11,);
B(B_F,sel,,10,11,15,16,);
B(B_VARIN,,MDlmlSpeedRed_Hg,8,14,10,16,);
B(B_VARIN,,MXlmlRedAllFunct,8,12,10,14,);
B(B_F,sel,,10,16,15,21,);
B(B_VARIN,,MDlmlSpeedRed_Hg,8,19,10,21,);
B(B_VARIN,,MXlmlRedLoaIncFu,8,17,10,19,);
B(B_VARIN,,1.0,8,8,10,10,);
B(B_VARIN,,1.0,8,13,10,15,);
B(B_VARIN,,1.0,8,18,10,20,);
B(B_F,SigMin4,,17,3,24,9,);
B(B_VAROUT,,LDredLifting,24,4,26,6,);
B(B_VARIN,,MDpowerLimReduct,15,4,17,6,);
L(15,6,17,6);
L(16,7,17,7);
L(15,18,17,18);
L(17,8,17,18);
L(15,13,16,13);
L(16,7,16,13);
L(15,6,15,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 16 ;
        NETWORK_BODY
B(B_F,SigMin4,,17,3,24,9,);
B(B_VAROUT,,LDredLowering,24,4,26,6,);
B(B_COMMENT,,signal reduction lowering,1,1,27,2,);
B(B_VARIN,,MDhg2LowRegLimSi,15,4,17,6,);
B(B_F,sel,,10,5,15,10,);
B(B_VARIN,,MXhg1SpeedRedAct,8,6,10,8,);
B(B_VARIN,,MDhgSpeedReduct,8,8,10,10,);
B(B_F,sel,,10,10,15,15,);
B(B_VARIN,,MDlmlSpeedRed_Hg,8,13,10,15,);
B(B_VARIN,,MXlmlRedAllFunct,8,11,10,13,);
B(B_VARIN,,1.0,8,7,10,9,);
B(B_VARIN,,1.0,8,12,10,14,);
L(16,8,16,12);
L(16,8,17,8);
L(15,7,17,7);
L(17,5,17,6);
L(15,12,16,12);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 27 ;
        NETWORK_BODY
B(B_VAROUT,,MXhg1PumpInZero,48,7,50,9,);
B(B_VAROUT,,LXhg1PressLoaded,48,8,50,10,);
B(B_VAROUT,,MDhg1PumpSignal,48,5,50,7,);
B(B_VAROUT,,MDhg1TrimotSigna,48,6,50,8,);
B(B_VARIN,,MDhg1AnalogSig,23,5,25,7,);
B(B_VARIN,,MDhg1SystemPress,23,6,25,8,);
B(B_VAROUT,,LXhg1EnTrimotAna,48,9,50,11,);
B(B_COMMENT,,analog part hg 1,1,1,27,2,);
B(B_VAROUT,,MDhg1LowRegLimSi,48,10,50,12,);
B(B_VAROUT,,MDhg1PressMemory,48,11,50,13,);
B(B_VAROUT,,MXhg1SymStopLift,48,14,50,16,);
B(B_VAROUT,,MXhg1SymStopLowe,48,15,50,17,);
B(B_VAROUT,,MXhg1StopLimLift,48,12,50,14,);
B(B_VAROUT,,MXhg1StopLimLowe,48,13,50,15,);
B(B_VARIN,,LDintTimeDown,23,10,25,12,);
B(B_VARIN,,LDintTimeUp,23,9,25,11,);
B(B_VARIN,,LXenLeakoilComp,23,11,25,13,);
B(B_VARIN,,CDhg1LeakOilSign,23,12,25,14,);
B(B_VARIN,,MXhg1WinchLift,23,13,25,15,);
B(B_VARIN,,MXhg1WinchLower,23,14,25,16,);
B(B_FB,HGanalogPartV039,analog1,25,4,48,26,);
B(B_VARIN,,LXhg1LoadPressSy,23,16,25,18,);
B(B_VARIN,,LXstoreSysPress,23,17,25,19,);
B(B_VARIN,,CDlowLimSignal,23,15,25,17,);
B(B_VARIN,,QXhg1Clutch,9,18,11,20,);
B(B_F,@OR-2,,11,17,16,21,);
B(B_VARIN,,MXhg1ErrPressInd,9,19,11,21,);
B(B_VARIN,,MDhg1PressMemory,23,19,25,21,);
B(B_VARIN,,MDscRopeLenHg1,23,21,25,23,);
B(B_VARIN,,MDhgHightLimitDn,23,24,25,26,);
B(B_VARIN,,MDhgHightLimitUp,23,23,25,25,);
B(B_VARIN,,MXhgHightLimAct,23,20,25,22,);
B(B_VARIN,,CDhgMaxWinchSp,23,22,25,24,);
B(B_VARIN,,LDredLifting,23,7,25,9,);
B(B_VARIN,,LDredLowering,23,8,25,10,);
L(16,19,25,19);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 14 ;
        NETWORK_BODY
B(B_COMMENT,,power stage hg1 lifting,1,1,27,2,);
B(B_VARIN,,MXhg1EnPowStage,9,5,11,7,);
B(B_VARIN,,MDhg1PumpSignal,9,6,11,8,);
B(B_VARIN,,0.0,9,7,11,9,);
B(B_VARIN,,100.0,9,8,11,10,);
B(B_FB,PowerStageOpnEnd,PowerStage1,11,4,25,13,);
B(B_VARIN,,CWhg1maxCurPumUp,9,11,11,13,);
B(B_VARIN,,CWhg1minCurPumUp,9,10,11,12,);
B(B_VAROUT,,QWhg1Lifting,25,5,27,7,);
B(B_VARIN,,130.0,9,9,11,11,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 14 ;
        NETWORK_BODY
B(B_COMMENT,,power stage hg1 lowering,1,1,27,2,);
B(B_VARIN,,MXhg1EnPowStage,9,5,11,7,);
B(B_VARIN,,MDhg1PumpSignal,9,6,11,8,);
B(B_VARIN,,0.0,9,7,11,9,);
B(B_VARIN,,-100.0,9,8,11,10,);
B(B_FB,PowerStageOpnEnd,PowerStage2,11,4,25,13,);
B(B_VARIN,,CWhg1maxCurPumDn,9,11,11,13,);
B(B_VARIN,,CWhg1minCurPumDn,9,10,11,12,);
B(B_VAROUT,,QWhg1Lowering,25,5,27,7,);
B(B_VARIN,,-130.0,9,9,11,11,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_COMMENT,,power stage hg1 trimot,1,1,27,2,);
B(B_VARIN,,MXhg1EnablTrimot,9,5,11,7,);
B(B_VARIN,,MDhg1TrimotSigna,9,6,11,8,);
B(B_FB,PowerStage,PowerStage3,11,4,20,12,);
B(B_VAROUT,,QWhg1Trimot,20,5,22,7,);
B(B_VARIN,,CWhg1minCurTrimo,9,9,11,11,);
B(B_VARIN,,CWhg1maxCurTrimo,9,10,11,12,);
B(B_VARIN,,0.0,9,7,11,9,);
B(B_VARIN,,100.0,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_VARIN,,FALSE,9,3,11,5,);
B(B_VAROUT,,MXhg1EnaExitProg,11,3,13,5,);
B(B_COMMENT,,disable exit hoisting gear 1 program,1,1,27,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,exit hoisting gear 1 program,1,1,27,2,);
B(B_VARIN,,TRUE,9,3,11,5,);
B(B_RETURN,,,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL := exit: ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 36 ;
        NETWORK_BODY
B(B_COMMENT,,exit program and set defined values ,1,1,27,2,);
B(B_VARIN,,TRUE,9,5,11,7,);
B(B_FB,R_TRIG,R_TRIG1,11,4,18,7,);
B(B_F,sel,,19,25,24,30,);
B(B_VAROUT,,MDhg1PressMemory,24,26,26,28,);
B(B_F,sel,,19,30,24,35,);
B(B_VAROUT,,MDhg1LowRegLimSi,24,31,26,33,);
B(B_VARIN,,0.0,15,28,17,30,);
B(B_VARIN,,MDhg1PressMemory,15,27,17,29,);
B(B_VARIN,,MDhg1LowRegLimSi,17,32,19,34,);
B(B_VARIN,,100.0,17,33,19,35,);
B(B_F,sel,,19,20,24,25,);
B(B_F,sel,,19,15,24,20,);
B(B_VAROUT,,MXhg1UpLimBridge,24,21,26,23,);
B(B_VAROUT,,MXhg1LoLimBridge,24,16,26,18,);
B(B_F,sel,,19,10,24,15,);
B(B_VAROUT,,MXhg1WinchStand,24,11,26,13,);
B(B_F,sel,,19,5,24,10,);
B(B_VAROUT,,MXhg1PumpInZero,24,6,26,8,);
B(B_VARIN,,MXhg1PumpInZero,15,7,17,9,);
B(B_VARIN,,TRUE,15,23,17,25,);
B(B_VARIN,,MXhg1LoLimBridge,14,17,16,19,);
B(B_VARIN,,MXhg1UpLimBridge,14,22,16,24,);
B(B_VARIN,,MXhg1WinchStand,14,12,16,14,);
L(18,32,19,32);
L(17,28,19,28);
L(17,29,19,29);
L(18,27,19,27);
L(18,6,18,32);
L(18,22,19,22);
L(18,17,19,17);
L(18,12,19,12);
L(18,7,19,7);
L(17,8,19,8);
L(17,9,19,9);
L(17,14,19,14);
L(17,19,19,19);
L(17,24,19,24);
L(16,18,19,18);
L(17,9,17,24);
L(16,23,19,23);
L(16,13,19,13);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_VARIN,,TRUE,9,3,11,5,);
B(B_VAROUT,,MXhg1EnaExitProg,11,3,13,5,);
B(B_COMMENT,,enable exit hoisting gear 1 program,1,1,27,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,exit hoisting gear 1 program,1,1,27,2,);
B(B_VARIN,,TRUE,9,3,11,5,);
B(B_RETURN,,,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL := init: ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,init hoisting gear 1 program,1,1,27,2,);
B(B_VARIN,,TRUE,9,3,11,5,);
B(B_VAROUT,,LXinitOk,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_FB,CorrValue_Bool,CorrValue_Bool1,11,4,23,10,);
B(B_VARIN,,CXhg1Preselect,9,8,11,10,);
B(B_VARIN,,FALSE,9,6,11,8,);
B(B_VARIN,,TRUE,9,7,11,9,);
B(B_VARIN,,TRUE,9,5,11,7,);
B(B_COMMENT,,preselection if hg1 is mounted (installed),1,1,27,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_FB,CorrValue_Bool,CorrValue_Bool2,11,4,23,10,);
B(B_VARIN,,CXadHg1LoweLimit,9,8,11,10,);
B(B_VARIN,,FALSE,9,6,11,8,);
B(B_VARIN,,TRUE,9,7,11,9,);
B(B_VARIN,,TRUE,9,5,11,7,);
B(B_COMMENT,,set additional device lower limit switch hoisting gear 1,1,1,27,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value minimum current pump up,1,1,27,2,);
B(B_FB,CorrValue_UInt,CorrValue_UInt1,11,4,23,10,);
B(B_VARIN,,215,9,5,11,7,);
B(B_VARIN,,150,9,6,11,8,);
B(B_VARIN,,500,9,7,11,9,);
B(B_VARIN,,CWhg1minCurPumUp,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value minimum current pump down,1,1,27,2,);
B(B_FB,CorrValue_UInt,CorrValue_UInt2,11,4,23,10,);
B(B_VARIN,,215,9,5,11,7,);
B(B_VARIN,,150,9,6,11,8,);
B(B_VARIN,,500,9,7,11,9,);
B(B_VARIN,,CWhg1minCurPumDn,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value maximum current pump up,1,1,27,2,);
B(B_FB,CorrValue_UInt,CorrValue_UInt3,11,4,23,10,);
B(B_VARIN,,610,9,5,11,7,);
B(B_VARIN,,500,9,6,11,8,);
B(B_VARIN,,1000,9,7,11,9,);
B(B_VARIN,,CWhg1maxCurPumUp,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value maximum current pump down,1,1,27,2,);
B(B_FB,CorrValue_UInt,CorrValue_UInt4,11,4,23,10,);
B(B_VARIN,,610,9,5,11,7,);
B(B_VARIN,,500,9,6,11,8,);
B(B_VARIN,,1000,9,7,11,9,);
B(B_VARIN,,CWhg1maxCurPumDn,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value minimum current trimot,1,1,27,2,);
B(B_FB,CorrValue_UInt,CorrValue_UInt5,11,4,23,10,);
B(B_VARIN,,215,9,5,11,7,);
B(B_VARIN,,150,9,6,11,8,);
B(B_VARIN,,500,9,7,11,9,);
B(B_VARIN,,CWhg1minCurTrimo,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value maximum current trimot,1,1,27,2,);
B(B_FB,CorrValue_UInt,CorrValue_UInt6,11,4,23,10,);
B(B_VARIN,,320,9,5,11,7,);
B(B_VARIN,,150,9,6,11,8,);
B(B_VARIN,,800,9,7,11,9,);
B(B_VARIN,,CWhg1maxCurTrimo,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value integrator time hg 1 up,1,1,27,2,);
B(B_VARIN,,50.0,9,5,11,7,);
B(B_VARIN,,10.0,9,6,11,8,);
B(B_VARIN,,300.0,9,7,11,9,);
B(B_VARIN,,CDhg1IntTimeUp,9,8,11,10,);
B(B_FB,CorrValue_Real,CorrValue_Real1,11,4,23,10,);
B(B_COMMENT,,Max=rapid stop,23,7,30,8,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value integrator time hg 1down,1,1,27,2,);
B(B_VARIN,,50.0,9,5,11,7,);
B(B_VARIN,,10.0,9,6,11,8,);
B(B_VARIN,,300.0,9,7,11,9,);
B(B_VARIN,,CDhg1IntTimeDn,9,8,11,10,);
B(B_FB,CorrValue_Real,CorrValue_Real2,11,4,23,10,);
B(B_COMMENT,,Max=rapid stop,23,7,30,8,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value leakoil compensation signal in [%],1,1,27,2,);
B(B_FB,CorrValue_Real,CorrValue_Real3,11,4,23,10,);
B(B_VARIN,,CDhg1LeakOilSign,9,8,11,10,);
B(B_VARIN,,15.0,9,5,11,7,);
B(B_VARIN,,0.0,9,6,11,8,);
B(B_VARIN,,50.0,9,7,11,9,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value maximum system pressure fast speed operation,1,1,27,2,);
B(B_FB,CorrValue_Real,CorrValue_Real4,11,4,23,10,);
B(B_VARIN,,120.0,9,5,11,7,);
B(B_VARIN,,0.0,9,6,11,8,);
B(B_VARIN,,175.0,9,7,11,9,);
B(B_VARIN,,CDhg1maxPressFSp,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value lower limit regulator analog signal 270bar sys_press,1,1,27,2,);
B(B_FB,CorrValue_Real,CorrValue_Real5,11,4,23,10,);
B(B_VARIN,,60.0,9,5,11,7,);
B(B_VARIN,,0.0,9,6,11,8,);
B(B_VARIN,,100.0,9,7,11,9,);
B(B_VARIN,,CDlowLimSignal,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value maximum rope speed [m/min] ,1,1,27,2,);
B(B_VARIN,,50.0,9,5,11,7,);
B(B_VARIN,,1.0,9,6,11,8,);
B(B_VARIN,,300.0,9,7,11,9,);
B(B_VARIN,,CDhgMaxWinchSp,9,8,11,10,);
B(B_FB,CorrValue_Real,CorrValue_Real6,11,4,23,10,);
        END_NETWORK_BODY
    END_NET_WORK
END_BODY
END_PROGRAM

PROGRAM HG1progV190
(*name of author: Josef Schmid
version: 1.0
date: 07/99
modification:*)
(*name of author: Manfred Schapler
date: 04/97
modification:*)
	VAR_EXTERNAL 
		IXhg1StandStInd: BOOL:=FALSE;
			(*standstill indicator winch HG 1*)
		IXhg1UpperLimOk: BOOL:=FALSE;
			(*upper limit switch HG 1 o.k.*)
		IXhg1LowerLimOk: BOOL:=FALSE;
			(*lower limit switch HG 1 o.k.*)
		IXhg1BrakePresOk: BOOL:=FALSE;
			(*brake pressure HG 1 o.k.*)
		ITXfreefallOper: BOOL:=FALSE;
			(*preselection freefall operation *)
		IXhgRelFreefall: BOOL:=FALSE;
			(*clutch valve release freefall*)
		IXunsecuredFreef: BOOL:=FALSE;
			(*key switch 2: unsecured freefall*)
		MXhg1LockClutch: BOOL:=FALSE;
			(*HG 1 global lock clutch*)
		MXlockFreefall: BOOL:=FALSE;
			(*lock freefall operation*)
		MXhg1pselFreefal: BOOL:=FALSE;
			(*HG 1 preselected freefall*)
		MDpowerLimReduct: REAL:=0.0;
			(*maximum engine power regulator reduction to x[%]*)
		IDcounterHg1: DINT:=0;
			(*counter rope lenght hg1*)
		QXhg1BrakeNormal: BOOL:=FALSE;
			(*HG 1 brake normal speed operation*)
		QXhg1Clutch: BOOL:=FALSE;
			(*HG 1 clutch*)
		QWhg1Lifting: UINT:=0;
			(*HG 1 valve lifting*)
		QWhg1Lowering: UINT:=0;
			(*HG 1 valve lowering*)
		MXhg1AnalSigPos: BOOL:=FALSE;
			(*hg1 analog signal positiv*)
		MXhg1AnalSigNeg: BOOL:=FALSE;
			(*hg1 analog signal negativ*)
		MXstopAllFunctio: BOOL:=FALSE;
			(*stop all excavator functions*)
		MXhg1ExtAnalSign: BOOL:=FALSE;
			(*HG 1 other, external analog signal*)
		MXhg1LocStopInt: BOOL:=FALSE;
			(*HG 1 local stop integrated*)
		MXhg1LocStopRapU: BOOL:=FALSE;
			(*HG 1 local stop rapid lifting*)
		MXhg1LocStopRapD: BOOL:=FALSE;
			(*HG 1 local stop rapid lowering*)
		MXhg1GlobStopUp: BOOL:=FALSE;
			(*HG 1 global stop rapid up*)
		MXhg1GlobStopDow: BOOL:=FALSE;
			(*HG 1 global stop rapid down*)
		MXhg1WinchStand: BOOL:=FALSE;
			(*HG 1 winch standing still*)
		MXhg1PumpInZero: BOOL:=FALSE;
			(*HG 1 pump in zero*)
		MXhg1EnPowStage: BOOL:=FALSE;
			(*HG 1 enable power stage lifting or lowering*)
		MXhg1ExtControl: BOOL:=FALSE;
			(*HG 1 external enable to all outputs*)
		MXhg1ClutchExt: BOOL:=FALSE;
			(*hg1 clutch externat control*)
		MXhg1WinchLift: BOOL:=FALSE;
			(*hg1 winch is lifting*)
		MXhg1WinchLower: BOOL:=FALSE;
			(*hg2 winch is lowering*)
		MXadHg1LoweLimit: BOOL:=FALSE;
			(*lower limit switch for HG 1*)
		MXlmlStop: BOOL:=FALSE;
			(*lml stop*)
		MXlimitSwBridged: BOOL:=FALSE;
			(*X23 limit switches bridged for assembly operation*)
		MXlmlBridged: BOOL:=FALSE;
			(*X23 lml bridged*)
		MXhg1ExitProg: BOOL:=FALSE;
			(*HG 1 exit programm*)
		MXhg1UpLimBridge: BOOL:=FALSE;
			(*upper limit switch brigde hoisting gear 1*)
		MXhg1LoLimBridge: BOOL:=FALSE;
			(*lower limit switch brigde hoisting gear 1*)
		MXhgHightLimAct: BOOL:=FALSE;
			(*hg hight limitation activ*)
		MXhg1StopLimLift: BOOL:=FALSE;
			(*hg1 stop lifting by hg hight limitation*)
		MXhg1StopLimLowe: BOOL:=FALSE;
			(*hg1 stop lowering by hg hight limitation*)
		MXhg1SymStopLift: BOOL:=FALSE;
			(*hg1 symbol stop lifting hg hight limitation*)
		MXhg1SymStopLowe: BOOL:=FALSE;
			(*hg1 symbol stop lowering hg hight limitation*)
		MXlmlRedAllFunct: BOOL:=FALSE;
			(*lml reduces all functions*)
		MXlmlRedLoaIncFu: BOOL:=FALSE;
			(*lml reduces all load increasing functions*)
		MXhg1SpeedRedAct: BOOL:=FALSE;
			(*hg 1 speed reduction is active*)
		MXhg1WinchMove: BOOL:=FALSE;
			(*hg1 winch is moving*)
		MXhg1EnaExitProg: BOOL:=FALSE;
			(*enable exit hg1 programm*)
		MXhgByLudvSectio: BOOL:=FALSE;
			(*hg driven by LUDV section*)
		MXLiftCrane: BOOL:=FALSE;
			(*crawler crane is lift crane type*)
		MDhgSpeedReduct: REAL:=0.0;
			(*hg speed reduction factor*)
		MDhg1JoySignal: REAL:=0.0;
			(*HG 1 joystick signal in +/-[%]*)
		MDhg1ExtAnalSign: REAL:=0.0;
			(*HG 1 external analog signal in [%]*)
		MDhg1PumpSignal: REAL:=0.0;
			(*HG 1 analog signal pump in [%]*)
		MDratedEngSpeed: REAL:=0.0;
			(*rated engine speed in rpm*)
		MDhg1AnalogSig: REAL:=0.0;
			(*analog signal joy stick hg1*)
		MDhg1LowRegLimSi: REAL:=0.0;
			(*hg 1 lowering regulation limitation signal*)
		MDscRopeLenHg1: REAL:=0.0;
			(*screen indication rope lenght hg1*)
		MDlmlSpeedRed_Hg: REAL:=0.0;
			(*lml speed reduction value HG (lml changes 2010: spped reduction for electronical controlled crane functions)*)
		MDhg1RopeSpeed: REAL:=0.0;
			(*hg 1 rope speed in  m/min*)
	END_VAR
	VAR_EXTERNAL CONSTANT
		MSG_INFO: UINT:=0;
	END_VAR
	VAR_EXTERNAL RETAIN
		MXhg1Preselect: BOOL:=FALSE;
			(*hg1  preselected*)
		MXhg1RopeLenMeas: BOOL:=FALSE;
			(*rope lenght measuring hg 1 enabled*)
		MXmachTypeOk: BOOL:=FALSE;
			(*machine type is activated*)
		MDhgHightLimitUp: REAL:=0.0;
			(*hg hight limitation Up [m]*)
		MDhgHightLimitDn: REAL:=0.0;
			(*hg hight limitation Down [m]*)
	END_VAR
	VAR_EXTERNAL CONSTANT RETAIN
		CXhg1Preselect: BOOL:=FALSE;
			(*HG 1 is preselected (installed)*)
		CXadHg1LoweLimit: BOOL:=FALSE;
			(*additional device lower limit switch for HG 1*)
		CWhg1minCurPumUp: UINT:=0;
			(*HG 1 minimum current pump up*)
		CWhg1minCurPumDn: UINT:=0;
			(*HG 1 minimum current pump down*)
		CWhg1maxCurPumUp: UINT:=0;
			(*HG 1 maximum current pump up*)
		CWhg1maxCurPumDn: UINT:=0;
			(*HG 1 maximum current pump down*)
		CDhg1IntTimeUp: REAL:=0.0;
			(*HG 1 integrator time rising signal*)
		CDhg1IntTimeDn: REAL:=0.0;
			(*HG 1 integrator time falling signal*)
		CDhgMaxWinchSp: REAL:=0.0;
			(*hg hight limitation max. winch speed [m/min]*)
		CDengSpPumpRed: REAL:=0.0;
			(*engine speed for pump reduction [U/min]*)
	END_VAR
	VAR 
		LXstart: BOOL:=FALSE;
			(*start bit*)
		LXinitOk: BOOL:=FALSE;
			(*init completed*)
		LDcounterHg1_t0: DINT:=0;
			(*counter rope lenght hg1 by last scan*)
		LDintTimeUp: REAL:=0.0;
		LDintTimeDown: REAL:=0.0;
		LDredLifting: REAL:=0.0;
		LDredLowering: REAL:=0.0;
		CorrValue_UInt1: CorrValue_UInt;
		CorrValue_UInt2: CorrValue_UInt;
		CorrValue_UInt3: CorrValue_UInt;
		CorrValue_UInt4: CorrValue_UInt;
		CorrValue_Real1: CorrValue_Real;
		CorrValue_Real2: CorrValue_Real;
		CorrValue_Bool1: CorrValue_Bool;
		Message1: MsgRealReal;
		Message2: MsgRealReal;
		TON1: TON;
		TOF1: TOF;
		TOF2: TOF;
		R_TRIG1: R_TRIG;
		WndComp1: WndComp;
		digital1: HGdigLogPartV022;
		analog1: HGanalogPartV024;
		PowerStage1: PowerStage;
		PowerStage2: PowerStage;
	END_VAR
'FBD'
BODY
    WORKSPACE
        NETWORK_LIST_TYPE := NWTYPEFBD ;
        ACTIVE_NETWORK := 0 ;
    END_WORKSPACE
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_COMMENT,,exit,1,1,40,2,);
B(B_VARIN,,MXmachTypeOk,9,4,11,6,);
B(B_RETURN,,,16,4,18,6,);
B(B_VARIN,,MXhgByLudvSectio,9,5,11,7,);
B(B_F,@OR-2,,11,3,16,7,NN);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_COMMENT,,init first time,1,1,27,2,);
B(B_VARIN,,LXinitOk,9,4,11,6,);
B(B_F,not,,11,3,16,6,);
B(B_JUMP,,init,16,4,18,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_COMMENT,,protect correction value change while program activ,1,1,27,2,);
B(B_VAROUT,,MXhg1Preselect,16,4,18,6,);
B(B_F,sel,,11,3,16,8,);
B(B_VARIN,,CXhg1Preselect,9,5,11,7,);
B(B_VARIN,,MXhg1Preselect,9,6,11,8,);
B(B_VARIN,,LXstart,9,4,11,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VAROUT,,LXstart,11,1,13,3,);
B(B_VARIN,,TRUE,9,1,11,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_COMMENT,,exit programm when not preselected,1,1,27,2,);
B(B_VARIN,,MXhg1EnPowStage,10,4,12,6,);
B(B_VARIN,,MXhg1PumpInZero,10,6,12,8,);
B(B_VARIN,,QXhg1Clutch,10,5,12,7,);
B(B_F,@OR-2,,19,8,24,12,0N);
B(B_F,@AND-5,,12,3,17,10,NN);
B(B_VARIN,,MXhg1Preselect,9,8,11,10,);
B(B_VARIN,,MXhg1ExitProg,10,7,12,9,);
B(B_JUMP,,exit,24,9,26,11,);
L(18,5,18,10);
L(18,10,19,10);
L(17,5,18,5);
L(11,9,12,9);
L(11,9,11,11);
L(11,11,19,11);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 19 ;
        NETWORK_BODY
B(B_COMMENT,,standstill indicator,1,1,27,2,);
B(B_FB,WndComp,WndComp1,18,7,25,13,);
B(B_VARIN,,5.0,16,9,18,11,);
B(B_VARIN,,2.0,16,11,18,13,);
B(B_F,sel,,29,6,34,11,);
B(B_VAROUT,,MXhg1WinchStand,34,7,36,9,);
B(B_VARIN,,MXhg1RopeLenMeas,26,3,28,5,);
B(B_VARIN,,IXhg1StandStInd,25,4,27,6,);
B(B_F,abs,,11,6,16,9,);
B(B_VARIN,,MDhg1RopeSpeed,9,7,11,9,);
B(B_F,sel,,29,12,34,17,);
B(B_FB,TON,TON1,21,14,26,18,);
B(B_VARIN,,IDcounterHg1,9,15,11,17,);
B(B_VARIN,,LDcounterHg1_t0,9,16,11,18,);
B(B_F,@EQ-2,,11,14,16,18,);
B(B_VARIN,,T#0.1s,19,16,21,18,);
B(B_F,not,,34,12,39,15,);
B(B_VAROUT,,MXhg1WinchMove,39,13,41,15,);
L(17,8,17,9);
L(17,9,18,9);
L(25,10,29,10);
L(27,9,29,9);
L(28,8,29,8);
L(16,8,17,8);
L(28,4,28,14);
L(28,14,29,14);
L(27,5,27,15);
L(27,15,29,15);
L(16,16,21,16);
L(26,16,29,16);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 18 ;
        NETWORK_BODY
B(B_VARIN,,IDcounterHg1,10,5,12,7,);
B(B_FB,TOF,TOF1,28,4,33,8,);
B(B_VAROUT,,MXhg1WinchLift,33,5,35,7,);
B(B_FB,TOF,TOF2,28,10,33,14,);
B(B_VAROUT,,MXhg1WinchLower,33,11,35,13,);
B(B_VARIN,,T#0.1s,25,14,27,16,);
B(B_F,@GT-2,,21,4,26,8,);
B(B_F,@LT-2,,21,10,26,14,);
B(B_F,@SUB,,14,13,19,17,);
B(B_VARIN,,LDcounterHg1_t0,10,8,12,10,);
B(B_VARIN,,1,9,15,11,17,);
B(B_F,@ADD-2,,14,7,19,11,);
B(B_COMMENT,,check if winch is lifting or lowering for rope length display and for controlø^of cutting off connection between LUDV pump 1 and pump 2,1,1,28,3,);
L(13,6,13,12);
L(12,9,12,15);
L(27,13,28,13);
L(27,7,27,15);
L(27,7,28,7);
L(12,6,21,6);
L(26,6,28,6);
L(26,12,28,12);
L(13,12,21,12);
L(12,15,14,15);
L(11,16,14,16);
L(11,10,11,16);
L(11,10,14,10);
L(20,7,20,9);
L(20,7,21,7);
L(19,15,20,15);
L(20,13,20,15);
L(20,13,21,13);
L(12,9,14,9);
L(19,9,20,9);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,IDcounterHg1,9,1,11,3,);
B(B_VAROUT,,LDcounterHg1_t0,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,lower limit switch,1,1,27,2,);
B(B_F,@AND-2,,11,6,16,10,NN);
B(B_VARIN,,MXLiftCrane,9,8,11,10,);
B(B_VARIN,,CXadHg1LoweLimit,9,7,11,9,);
B(B_VARIN,,IXhg1LowerLimOk,14,4,16,6,);
B(B_F,@OR-2,,16,3,21,7,);
B(B_F,@OR-2,,23,6,28,10,);
B(B_VARIN,,MXlimitSwBridged,21,8,23,10,);
B(B_VAROUT,,MXadHg1LoweLimit,22,4,24,6,);
B(B_VAROUT,,MXhg1LoLimBridge,28,7,30,9,);
L(22,8,23,8);
L(22,5,22,8);
L(21,5,22,5);
L(16,6,16,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_COMMENT,,upper limit switch,1,1,27,2,);
B(B_F,@OR-2,,11,3,16,7,);
B(B_VARIN,,MXlimitSwBridged,9,5,11,7,);
B(B_VAROUT,,MXhg1UpLimBridge,16,4,18,6,);
B(B_VARIN,,IXhg1UpperLimOk,9,4,11,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 14 ;
        NETWORK_BODY
B(B_COMMENT,,send message from limit switch,1,1,27,2,);
B(B_FB,MsgRealReal,Message1,11,4,20,11,0N);
B(B_VARIN,,249,9,5,11,7,);
B(B_VARIN,,IXhg1UpperLimOk,9,6,11,8,);
B(B_FB,MsgRealReal,Message2,30,4,39,11,0N);
B(B_VARIN,,698,28,5,30,7,);
B(B_VARIN,,IXhg1LowerLimOk,28,6,30,8,);
B(B_VARIN,,MSG_INFO,8,11,10,13,);
L(10,8,10,12);
L(10,8,11,8);
L(10,12,29,12);
L(29,8,29,12);
L(29,8,30,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,exit program by external controlling,1,1,27,2,);
B(B_VARIN,,MXhg1ExtControl,9,3,11,5,);
B(B_RETURN,,,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 25 ;
        NETWORK_BODY
B(B_VARIN,,MXhg1ExtAnalSign,19,13,21,15,);
B(B_F,sel,,21,12,26,17,);
B(B_VARIN,,MDhg1JoySignal,19,14,21,16,);
B(B_VARIN,,MDhg1ExtAnalSign,19,15,21,17,);
B(B_VARIN,,0.0,29,14,31,16,);
B(B_F,sel,,31,11,36,16,);
B(B_F,@GT-2,,31,16,36,20,);
B(B_F,@LT-2,,31,20,36,24,);
B(B_VARIN,,0.0,29,18,31,20,);
B(B_VARIN,,0.0,29,22,31,24,);
B(B_VAROUT,,MXhg1AnalSigNeg,36,21,38,23,);
B(B_VAROUT,,MXhg1AnalSigPos,36,17,38,19,);
B(B_VAROUT,,MDhg1AnalogSig,36,12,38,14,);
B(B_COMMENT,,analog signal selector and stop hg 1,2,1,28,2,);
B(B_F,@AND-2,,12,5,17,9,0N);
B(B_F,@AND-2,,12,9,17,13,0N);
B(B_VARIN,,MXhg1LocStopRapU,10,6,12,8,);
B(B_VARIN,,MXhg1LocStopInt,17,3,19,5,);
B(B_VARIN,,MXhg1LocStopRapD,10,10,12,12,);
B(B_VARIN,,MXhg1AnalSigNeg,10,7,12,9,);
B(B_VARIN,,MXhg1AnalSigPos,10,11,12,13,);
B(B_F,@OR-3,,21,7,26,12,);
L(26,14,31,14);
L(27,14,27,22);
L(27,18,31,18);
L(27,22,31,22);
L(27,9,27,13);
L(27,13,31,13);
L(19,4,19,9);
L(19,9,21,9);
L(17,7,18,7);
L(18,7,18,10);
L(18,10,21,10);
L(17,11,21,11);
L(26,9,27,9);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 24 ;
        NETWORK_BODY
B(B_COMMENT,,rapid stop hg 1,1,1,27,2,);
B(B_VARIN,,MXhg1LocStopRapU,20,4,22,6,);
B(B_VARIN,,MXhg1LocStopRapD,20,5,22,7,);
B(B_F,@OR-2,,22,3,27,7,);
B(B_VAROUT,,LDintTimeUp,34,9,36,11,);
B(B_F,sel,,29,8,34,13,);
B(B_VARIN,,100.0,9,10,11,12,);
B(B_F,sel,,20,10,25,15,);
B(B_F,@LT-2,,13,8,18,12,);
B(B_VARIN,,CDhg1IntTimeUp,10,7,12,9,);
B(B_F,sel,,29,16,34,21,);
B(B_VAROUT,,LDintTimeDown,34,17,36,19,);
B(B_VARIN,,100.0,9,18,11,20,);
B(B_F,sel,,20,18,25,23,);
B(B_F,@LT-2,,13,16,18,20,);
B(B_VARIN,,CDhg1IntTimeDn,10,15,12,17,);
L(27,11,29,11);
L(27,12,29,12);
L(27,5,28,5);
L(28,10,29,10);
L(11,11,13,11);
L(11,11,11,14);
L(12,13,20,13);
L(11,14,20,14);
L(19,10,19,12);
L(19,12,20,12);
L(12,10,13,10);
L(18,10,19,10);
L(26,8,26,11);
L(26,11,27,11);
L(25,12,27,12);
L(12,8,26,8);
L(12,8,12,13);
L(28,18,29,18);
L(28,5,28,18);
L(11,19,13,19);
L(11,19,11,22);
L(12,21,20,21);
L(11,22,20,22);
L(19,18,19,20);
L(19,20,20,20);
L(12,18,13,18);
L(18,18,19,18);
L(26,16,26,19);
L(12,16,26,16);
L(12,16,12,21);
L(25,20,29,20);
L(26,19,29,19);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 24 ;
        NETWORK_BODY
B(B_COMMENT,,digital logic hg 1,1,1,27,2,);
B(B_VARIN,,MXhg1AnalSigPos,26,7,28,9,);
B(B_VARIN,,MXhg1AnalSigNeg,26,8,28,10,);
B(B_VARIN,,MXstopAllFunctio,26,11,28,13,);
B(B_VARIN,,MXhg1LoLimBridge,26,13,28,15,);
B(B_VAROUT,,MXhg1LocStopRapD,51,11,53,13,);
B(B_VAROUT,,MXhg1LocStopRapU,51,10,53,12,);
B(B_VAROUT,,MXhg1EnPowStage,51,9,53,11,);
B(B_VAROUT,,MXhg1LocStopInt,51,12,53,14,);
B(B_VAROUT,,MXhg1pselFreefal,51,13,53,15,);
B(B_VARIN,,MXhg1PumpInZero,26,15,28,17,);
B(B_VARIN,,ITXfreefallOper,26,16,28,18,);
B(B_VARIN,,IXhg1BrakePresOk,26,18,28,20,);
B(B_VARIN,,MXhg1WinchStand,26,20,28,22,);
B(B_VARIN,,IXunsecuredFreef,26,19,28,21,);
B(B_VAROUT,,QXhg1Clutch,58,4,60,6,);
B(B_VAROUT,,QXhg1BrakeNormal,53,7,55,9,);
B(B_VARIN,,MXhg1ClutchExt,51,4,53,6,);
B(B_FB,HGdigLogPartV022,digital1,28,6,51,23,);
B(B_VARIN,,MXhg1LockClutch,26,21,28,23,);
B(B_F,@OR-2,,53,3,58,7,);
B(B_VARIN,,MXhg1UpLimBridge,26,14,28,16,);
B(B_F,@AND-2,,11,11,16,15,0N);
B(B_VARIN,,MXlmlStop,9,12,11,14,);
B(B_VARIN,,MXlmlBridged,9,13,11,15,);
B(B_VARIN,,MXhg1GlobStopDow,9,8,11,10,);
B(B_VARIN,,MXhg1GlobStopUp,9,4,11,6,);
B(B_F,@OR-2,,11,3,16,7,);
B(B_F,@OR-2,,11,7,16,11,);
B(B_VARIN,,MXhg1StopLimLift,9,5,11,7,);
B(B_VARIN,,MXhg1StopLimLowe,9,9,11,11,);
B(B_F,@AND-2,,11,16,16,20,0N);
B(B_VARIN,,IXhgRelFreefall,9,17,11,19,);
B(B_VARIN,,MXlockFreefall,9,18,11,20,);
L(52,6,53,6);
L(52,6,52,9);
L(51,8,53,8);
L(51,9,52,9);
L(18,11,28,11);
L(19,10,28,10);
L(19,5,19,10);
L(18,9,18,11);
L(16,13,28,13);
L(16,18,28,18);
L(16,9,18,9);
L(16,5,19,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 22 ;
        NETWORK_BODY
B(B_COMMENT,,signal reduction lifting,1,1,27,2,);
B(B_F,sel,,10,6,15,11,);
B(B_VARIN,,MXhg1SpeedRedAct,8,7,10,9,);
B(B_VARIN,,MDhgSpeedReduct,8,9,10,11,);
B(B_F,sel,,10,11,15,16,);
B(B_VARIN,,MDlmlSpeedRed_Hg,8,14,10,16,);
B(B_VARIN,,MXlmlRedAllFunct,8,12,10,14,);
B(B_F,sel,,10,16,15,21,);
B(B_VARIN,,MDlmlSpeedRed_Hg,8,19,10,21,);
B(B_VARIN,,MXlmlRedLoaIncFu,8,17,10,19,);
B(B_VARIN,,1.0,8,8,10,10,);
B(B_VARIN,,1.0,8,13,10,15,);
B(B_VARIN,,1.0,8,18,10,20,);
B(B_F,SigMin4,,17,3,24,9,);
B(B_VAROUT,,LDredLifting,24,4,26,6,);
B(B_VARIN,,MDpowerLimReduct,15,4,17,6,);
L(15,6,17,6);
L(16,7,17,7);
L(15,18,17,18);
L(17,8,17,18);
L(15,13,16,13);
L(16,7,16,13);
L(15,6,15,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 17 ;
        NETWORK_BODY
B(B_F,sel,,10,6,15,11,);
B(B_VARIN,,MXhg1SpeedRedAct,8,7,10,9,);
B(B_VARIN,,MDhgSpeedReduct,8,9,10,11,);
B(B_F,sel,,10,11,15,16,);
B(B_VARIN,,MDlmlSpeedRed_Hg,8,14,10,16,);
B(B_VARIN,,MXlmlRedAllFunct,8,12,10,14,);
B(B_F,SigMin4,,17,3,24,9,);
B(B_VARIN,,1.0,8,8,10,10,);
B(B_VARIN,,1.0,8,13,10,15,);
B(B_VAROUT,,LDredLowering,24,4,26,6,);
B(B_COMMENT,,signal reduction lowering,1,1,27,2,);
B(B_VARIN,,1.0,15,5,17,7,);
B(B_VARIN,,MDpowerLimReduct,15,4,17,6,);
L(15,13,16,13);
L(16,8,16,13);
L(15,7,15,8);
L(16,8,17,8);
L(15,7,17,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 19 ;
        NETWORK_BODY
B(B_COMMENT,,analog part hg 1,1,1,27,2,);
B(B_VAROUT,,MDhg1PumpSignal,34,5,36,7,);
B(B_VAROUT,,MXhg1PumpInZero,34,6,36,8,);
B(B_VARIN,,MDratedEngSpeed,9,6,11,8,);
B(B_VARIN,,MDhg1AnalogSig,9,5,11,7,);
B(B_VARIN,,CDengSpPumpRed,9,7,11,9,);
B(B_VAROUT,,MXhg1StopLimLift,34,7,36,9,);
B(B_VAROUT,,MXhg1StopLimLowe,34,8,36,10,);
B(B_VAROUT,,MXhg1SymStopLift,34,9,36,11,);
B(B_VAROUT,,MXhg1SymStopLowe,34,10,36,12,);
B(B_VARIN,,LDintTimeDown,9,11,11,13,);
B(B_VARIN,,MDscRopeLenHg1,9,12,11,14,);
B(B_VARIN,,MDhgHightLimitDn,9,15,11,17,);
B(B_VARIN,,MDhgHightLimitUp,9,14,11,16,);
B(B_VARIN,,CDhgMaxWinchSp,9,13,11,15,);
B(B_VARIN,,MXhgHightLimAct,9,16,11,18,);
B(B_VARIN,,LDintTimeUp,9,10,11,12,);
B(B_VARIN,,LDredLowering,9,9,11,11,);
B(B_VARIN,,LDredLifting,9,8,11,10,);
B(B_FB,HGanalogPartV024,analog1,11,4,34,18,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 14 ;
        NETWORK_BODY
B(B_COMMENT,,power stage hg 1 lifting,1,1,27,2,);
B(B_VARIN,,MXhg1EnPowStage,9,5,11,7,);
B(B_VARIN,,MDhg1PumpSignal,9,6,11,8,);
B(B_FB,PowerStage,PowerStage1,11,4,20,12,);
B(B_VAROUT,,QWhg1Lifting,20,5,22,7,);
B(B_VARIN,,CWhg1minCurPumUp,9,9,11,11,);
B(B_VARIN,,CWhg1maxCurPumUp,9,10,11,12,);
B(B_VARIN,,0.0,9,7,11,9,);
B(B_VARIN,,100.0,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_COMMENT,,power stage hg 1 lowering,1,1,27,2,);
B(B_VARIN,,MXhg1EnPowStage,9,5,11,7,);
B(B_VARIN,,MDhg1PumpSignal,9,6,11,8,);
B(B_FB,PowerStage,PowerStage2,11,4,20,12,);
B(B_VAROUT,,QWhg1Lowering,20,5,22,7,);
B(B_VARIN,,CWhg1minCurPumDn,9,9,11,11,);
B(B_VARIN,,CWhg1maxCurPumDn,9,10,11,12,);
B(B_VARIN,,0.0,9,7,11,9,);
B(B_VARIN,,-100.0,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_VARIN,,FALSE,9,3,11,5,);
B(B_VAROUT,,MXhg1EnaExitProg,11,3,13,5,);
B(B_COMMENT,,disable exit hoisting gear 1 program,1,1,27,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,exit hoisting gear 1 program,1,1,27,2,);
B(B_VARIN,,TRUE,9,3,11,5,);
B(B_RETURN,,,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL := exit: ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 31 ;
        NETWORK_BODY
B(B_COMMENT,,exit program and set defined values ,1,1,27,2,);
B(B_VARIN,,TRUE,9,5,11,7,);
B(B_FB,R_TRIG,R_TRIG1,11,4,18,7,);
B(B_F,sel,,19,25,24,30,);
B(B_VAROUT,,MDhg1LowRegLimSi,24,26,26,28,);
B(B_VARIN,,MDhg1LowRegLimSi,17,27,19,29,);
B(B_VARIN,,100.0,17,28,19,30,);
B(B_F,sel,,19,20,24,25,);
B(B_F,sel,,19,15,24,20,);
B(B_VAROUT,,MXhg1UpLimBridge,24,21,26,23,);
B(B_VAROUT,,MXhg1LoLimBridge,24,16,26,18,);
B(B_F,sel,,19,10,24,15,);
B(B_VAROUT,,MXhg1WinchStand,24,11,26,13,);
B(B_F,sel,,19,5,24,10,);
B(B_VAROUT,,MXhg1PumpInZero,24,6,26,8,);
B(B_VARIN,,MXhg1PumpInZero,15,7,17,9,);
B(B_VARIN,,TRUE,15,23,17,25,);
B(B_VARIN,,MXhg1LoLimBridge,14,17,16,19,);
B(B_VARIN,,MXhg1UpLimBridge,14,22,16,24,);
B(B_VARIN,,MXhg1WinchStand,14,12,16,14,);
L(18,27,19,27);
L(18,6,18,27);
L(18,22,19,22);
L(18,17,19,17);
L(18,12,19,12);
L(18,7,19,7);
L(17,8,19,8);
L(17,9,19,9);
L(17,14,19,14);
L(17,19,19,19);
L(17,24,19,24);
L(16,18,19,18);
L(17,9,17,24);
L(16,23,19,23);
L(16,13,19,13);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_VARIN,,TRUE,9,3,11,5,);
B(B_VAROUT,,MXhg1EnaExitProg,11,3,13,5,);
B(B_COMMENT,,enable exit hoisting gear 1 program,1,1,27,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,exit hoisting gear 1 program,1,1,27,2,);
B(B_VARIN,,TRUE,9,3,11,5,);
B(B_RETURN,,,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL := init: ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,init hoisting gear 1 program,1,1,27,2,);
B(B_VARIN,,TRUE,9,3,11,5,);
B(B_VAROUT,,LXinitOk,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_FB,CorrValue_Bool,CorrValue_Bool1,11,4,23,10,);
B(B_VARIN,,CXadHg1LoweLimit,9,8,11,10,);
B(B_VARIN,,FALSE,9,6,11,8,);
B(B_VARIN,,TRUE,9,7,11,9,);
B(B_VARIN,,TRUE,9,5,11,7,);
B(B_COMMENT,,set additional device lower limit switch hoisting gear  1,1,1,27,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value minimum current valve up,1,1,27,2,);
B(B_FB,CorrValue_UInt,CorrValue_UInt1,11,4,23,10,);
B(B_VARIN,,350,9,5,11,7,);
B(B_VARIN,,200,9,6,11,8,);
B(B_VARIN,,450,9,7,11,9,);
B(B_VARIN,,CWhg1minCurPumUp,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value minimum current pump down,1,1,27,2,);
B(B_FB,CorrValue_UInt,CorrValue_UInt2,11,4,23,10,);
B(B_VARIN,,350,9,5,11,7,);
B(B_VARIN,,200,9,6,11,8,);
B(B_VARIN,,450,9,7,11,9,);
B(B_VARIN,,CWhg1minCurPumDn,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value maximum current pump up,1,1,27,2,);
B(B_FB,CorrValue_UInt,CorrValue_UInt3,11,4,23,10,);
B(B_VARIN,,730,9,5,11,7,);
B(B_VARIN,,450,9,6,11,8,);
B(B_VARIN,,1000,9,7,11,9,);
B(B_VARIN,,CWhg1maxCurPumUp,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value maximum current pump down,1,1,27,2,);
B(B_FB,CorrValue_UInt,CorrValue_UInt4,11,4,23,10,);
B(B_VARIN,,730,9,5,11,7,);
B(B_VARIN,,450,9,6,11,8,);
B(B_VARIN,,1000,9,7,11,9,);
B(B_VARIN,,CWhg1maxCurPumDn,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value integrator time hg 1 up,1,1,27,2,);
B(B_VARIN,,50.0,9,5,11,7,);
B(B_VARIN,,10.0,9,6,11,8,);
B(B_VARIN,,100.0,9,7,11,9,);
B(B_VARIN,,CDhg1IntTimeUp,9,8,11,10,);
B(B_FB,CorrValue_Real,CorrValue_Real1,11,4,23,10,);
B(B_COMMENT,,Max=rapid stop,23,7,30,8,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value integrator time hg 1 down,1,1,27,2,);
B(B_VARIN,,50.0,9,5,11,7,);
B(B_VARIN,,10.0,9,6,11,8,);
B(B_VARIN,,100.0,9,7,11,9,);
B(B_VARIN,,CDhg1IntTimeDn,9,8,11,10,);
B(B_FB,CorrValue_Real,CorrValue_Real2,11,4,23,10,);
B(B_COMMENT,,Max=rapid stop,23,7,30,8,);
        END_NETWORK_BODY
    END_NET_WORK
END_BODY
END_PROGRAM

PROGRAM HG2progV180
(*name of author: Manfred Schapler
version: 1.0
date: 07/97
modification:*)
(*name of author: Manfred Schapler
date: 07/97
modification:*)
	VAR_EXTERNAL 
		ITXfreefallOper: BOOL:=FALSE;
			(*preselection freefall operation *)
		ITXhg2FastSpeed: BOOL:=FALSE;
			(*preselection hg2 fast speed operation *)
		IXhg2StandStInd: BOOL:=FALSE;
			(*standstill indicator winch HG 1*)
		IXhg2FeedPressOk: BOOL:=FALSE;
			(*feed pressure HG 2 o.k.*)
		IXhg2BrakePresOk: BOOL:=FALSE;
			(*brake pressure HG 2 o.k.*)
		IXhg2LowerLimOk: BOOL:=FALSE;
			(*lower limit switch HG 2 o.k.*)
		IXhg2UpperLimOk: BOOL:=FALSE;
			(*upper limit switch HG 2 o.k.*)
		IXunsecuredFreef: BOOL:=FALSE;
			(*key switch 2: unsecured freefall*)
		IXhgRelFreefall: BOOL:=FALSE;
			(*clutch valve release freefall*)
		IXhg2NoRopeLimit: BOOL:=FALSE;
			(*ad no rope tension limitation HG2*)
		IWhg2SystemPress: UINT:=0;
			(*system pressure HG 2*)
		IDcounterHg2: DINT:=0;
			(*counter rope lenght hg2*)
		QXhg2BrakeNormal: BOOL:=FALSE;
			(*HG 2 brake normal speed operation*)
		QXhg2BrakeFastSp: BOOL:=FALSE;
			(*HG 2 brake fast speed operation*)
		QXhg2Clutch: BOOL:=FALSE;
			(*HG 2 clutch*)
		QWhg2Lifting: UINT:=0;
			(*HG 2 pump lifting*)
		QWhg2Lowering: UINT:=0;
			(*HG 2 pump lowering*)
		QWhg2Trimot: UINT:=0;
			(*HG 2 pump trimot*)
		MXhg2AnalSigPos: BOOL:=FALSE;
			(*hg2 analog signal positiv*)
		MXhg2AnalSigNeg: BOOL:=FALSE;
			(*hg2 analog signal negativ*)
		MXminEngineSpeed: BOOL:=FALSE;
			(*minimum engine speed reached*)
		MXstopAllFunctio: BOOL:=FALSE;
			(*stop all excavator functions*)
		MXlockFreefall: BOOL:=FALSE;
			(*lock freefall*)
		MXhg2ExtAnalSign: BOOL:=FALSE;
			(*HG 2 other, external analog signal*)
		MXhg2LocStopInt: BOOL:=FALSE;
			(*HG 2 local stop integrated*)
		MXhg2LocStopRapU: BOOL:=FALSE;
			(*HG 2 local stop rapid lifting*)
		MXhg2LocStopRapD: BOOL:=FALSE;
			(*HG 2 local stop rapid lowering*)
		MXhg2GlobStopUp: BOOL:=FALSE;
			(*HG 2 global stop rapid*)
		MXhg2GlobStopDow: BOOL:=FALSE;
			(*HG 2 global stop integrated*)
		MXhg2WinchStand: BOOL:=FALSE;
			(*HG 2 winch standing still*)
		MXhg2WinchMove: BOOL:=FALSE;
			(*hg2 winch is moving*)
		MXhg2PumpInZero: BOOL:=FALSE;
			(*HG 2 pump in zero*)
		MXhg2EnPowStage: BOOL:=FALSE;
			(*HG 2 enable power stage lifting or lowering*)
		MXhg2EnablTrimot: BOOL:=FALSE;
			(*HG 2 enable trimot*)
		MXhg2pselFreefal: BOOL:=FALSE;
			(*HG 2 preselected freefall*)
		MXhg2LockClutch: BOOL:=FALSE;
			(*HG 2 global lock clutch*)
		MXhg2ExtControl: BOOL:=FALSE;
			(*HG 2 external enable to all outputs*)
		MXhg2WinchLift: BOOL:=FALSE;
			(*hg1 winch is lifting*)
		MXhg2WinchLower: BOOL:=FALSE;
			(*hg2 winch is lowering*)
		MXhg2ErrPressInd: BOOL:=FALSE;
			(*hg 2 error system pressure indicator*)
		MXhg2LockFastSpe: BOOL:=FALSE;
			(*hg 2 lock fast speed*)
		MXadHg2LoweLimit: BOOL:=FALSE;
			(*lower limit switch for HG 2*)
		MXlmlStop: BOOL:=FALSE;
			(*lml stop*)
		MXlimitSwBridged: BOOL:=FALSE;
			(*X23 limit switches bridged for assembly operation*)
		MXhg2LockTrimot: BOOL:=FALSE;
			(*hg2 lock trimot*)
		MXhg2ClutchExt: BOOL:=FALSE;
			(*ad dgc hg1 clutch external control*)
		MXjoyBridgeFastS: BOOL:=FALSE;
			(*bridge fast speed on joystick*)
		MXhg2EnabFastSpe: BOOL:=FALSE;
			(*enable fast speed operation hg2*)
		MXhg2LoLimBridge: BOOL:=FALSE;
			(*lower limit switch brigde hoisting gear 2*)
		MXhg2UpLimBridge: BOOL:=FALSE;
			(*upper limit switch brigde hoisting gear 2*)
		MXdrillFreefPres: BOOL:=FALSE;
			(*preselection freefall drilling mode*)
		MXhg2ExitProg: BOOL:=FALSE;
			(*HG 2 exit programm*)
		MXhg2LedFastSpe: BOOL:=FALSE;
			(*enable led fast speed operation hg2*)
		MXhgFastSpeed: BOOL:=FALSE;
			(*HG 1 and 2 fast speed operation preselected*)
		MXengStarterActi: BOOL:=FALSE;
			(*engine starter activated*)
		MXlmlBridged: BOOL:=FALSE;
			(*lml bridged*)
		MXhg2StopLimLift: BOOL:=FALSE;
			(*hg2 stop lifting by hg hight limitation*)
		MXhg2StopLimLowe: BOOL:=FALSE;
			(*hg2 stop lowering by hg hight limitation*)
		MXhg2SymStopLift: BOOL:=FALSE;
			(*hg2 stop lifting by hg hight limitation*)
		MXhg2SymStopLowe: BOOL:=FALSE;
			(*hg2 stop lowering by hg hight limitation*)
		MXhgHightLimAct: BOOL:=FALSE;
			(*hg hight limitation activ*)
		MXhg2SpeedRedAct: BOOL:=FALSE;
			(*hg 1 speed reduction is active*)
		MXlmlRedAllFunct: BOOL:=FALSE;
			(*lml reduces all functions*)
		MXlmlRedLoaIncFu: BOOL:=FALSE;
			(*lml reduces all load increasing functions*)
		MXhg2EnaExitProg: BOOL:=FALSE;
			(*enable exit hg2 programm*)
		MX600barPreTrans: BOOL:=FALSE;
			(*600bar pressure transmitter used*)
		MXhgByLudvSectio: BOOL:=FALSE;
			(*hg driven by LUDV section*)
		MXLiftCrane: BOOL:=FALSE;
			(*crawler crane is lift crane type*)
		MDlmlSpeedRed_Hg: REAL:=0.0;
			(*lml speed reduction value HG (lml changes 2010: spped reduction for electronical controlled crane functions)*)
		MDhg2JoySignal: REAL:=0.0;
			(*HG 2 joystick signal in +/-[%]*)
		MDhg2SystemPress: REAL:=0.0;
			(*HG 2 system pressure in bar*)
		MDhg2ExtAnalSign: REAL:=0.0;
			(*HG 2 external analog signal in [%]*)
		MDhg2PumpSignal: REAL:=0.0;
			(*HG 2 analog signal pump in [%]*)
		MDhg2TrimotSigna: REAL:=0.0;
			(*HG 2 analog signal trimot in [%]*)
		MDpowerLimReduct: REAL:=0.0;
			(*maximum engine power regulator reduction to x[%]*)
		MDhg1LowRegLimSi: REAL:=0.0;
			(*hg 1 lowering regulation limitation signal*)
		MDhg2LowRegLimSi: REAL:=0.0;
			(*hg 2 lowering regulation limitation signal*)
		MDhg2AnalogSig: REAL:=0.0;
			(*joystick analog signal for hg2*)
		MDhg2RopeSpeed: REAL:=0.0;
			(*hg 2 rope speed in  m/min*)
		MDscRopeLenHg2: REAL:=0.0;
			(*screen indication rope lenght hg2*)
		MDhgSpeedReduct: REAL:=0.0;
			(*hg speed reduction factor*)
	END_VAR
	VAR_EXTERNAL CONSTANT
		MSG_INFO: UINT:=0;
		MSG_ERROR: UINT:=0;
	END_VAR
	VAR_EXTERNAL RETAIN
		MXhg2RopeLenMeas: BOOL:=FALSE;
			(*rope lenght measuring hg 2 enabled*)
		MXhg2Preselect: BOOL:=FALSE;
			(*hg2  preselected*)
		MXmachTypeOk: BOOL:=FALSE;
			(*machine type is activated*)
		MDhg2PressMemory: REAL:=0.0;
			(*HG 2 pressure memory*)
		MDhgHightLimitUp: REAL:=0.0;
			(*hg hight limitation Up [m]*)
		MDhgHightLimitDn: REAL:=0.0;
			(*hg hight limitation Down [m]*)
	END_VAR
	VAR_EXTERNAL CONSTANT RETAIN
		CXadHg2LoweLimit: BOOL:=FALSE;
			(*additional device lower limit switch for HG 2*)
		CXhg2Preselect: BOOL:=FALSE;
			(*HG 2 is preselected (installed)*)
		CWhg2minCurPumUp: UINT:=0;
			(*HG 2 minimum current pump up*)
		CWhg2minCurPumDn: UINT:=0;
			(*HG 2 minimum current pump down*)
		CWhg2maxCurPumUp: UINT:=0;
			(*HG 2 maximum current pump up*)
		CWhg2maxCurPumDn: UINT:=0;
			(*HG 2 maximum current pump down*)
		CWhg2minCurTrimo: UINT:=0;
			(*HG 2 minimum current trimot up*)
		CWhg2maxCurTrimo: UINT:=0;
			(*HG 2 maximum current trimot down*)
		CDhg2IntTimeUp: REAL:=0.0;
			(*HG 2 integrator time rising signal*)
		CDhg2IntTimeDn: REAL:=0.0;
			(*HG 2 integrator time down falling signal*)
		CDhg2LeakOilSign: REAL:=0.0;
			(*HG 2 leakoil compensation Signal in [%]*)
		CDhg2MaxPressFSp: REAL:=0.0;
			(*HG 2 maximum pressure for normal fast speed operation*)
		CDlowLimSignal: REAL:=0.0;
			(*lower limitation regulator analog signal 270bar*)
		CDhgMaxWinchSp: REAL:=0.0;
			(*hg hight limitation max. winch speed [m/min]*)
	END_VAR
	VAR 
		LXinitOk: BOOL:=FALSE;
			(*init completed*)
		LXhg2PressLoaded: BOOL:=FALSE;
			(*HG 1 system pressure loaded*)
		LXhg2EnTrimotAna: BOOL:=FALSE;
			(*enable trimot from analog part*)
		LXhg2LoadPressSy: BOOL:=FALSE;
			(*give system pressure into system*)
		LXstoreSysPress: BOOL:=FALSE;
			(*store system pressure*)
		LXenLeakoilComp: BOOL:=FALSE;
			(*enable leakoil compensation*)
		LXstart: BOOL:=FALSE;
		LDcounterHg2_t0: DINT:=0;
			(*counter rope lenght hg2 by last scan*)
		LDintTimeUp: REAL:=0.0;
		LDintTimeDown: REAL:=0.0;
		LDredLifting: REAL:=0.0;
		LDredLowering: REAL:=0.0;
		LDscalePress: REAL:=0.0;
		CorrValue_Bool1: CorrValue_Bool;
		CorrValue_Bool2: CorrValue_Bool;
		CorrValue_UInt1: CorrValue_UInt;
		CorrValue_UInt2: CorrValue_UInt;
		CorrValue_UInt3: CorrValue_UInt;
		CorrValue_UInt4: CorrValue_UInt;
		CorrValue_UInt5: CorrValue_UInt;
		CorrValue_UInt6: CorrValue_UInt;
		CorrValue_Real1: CorrValue_Real;
		CorrValue_Real2: CorrValue_Real;
		CorrValue_Real3: CorrValue_Real;
		CorrValue_Real4: CorrValue_Real;
		Message1: MsgRealReal;
		Message2: MsgRealReal;
		Message3: MsgRealReal;
		Message4: MsgRealReal;
		Message5: MsgRealReal;
		ScaleAI1: ScaleAI;
		TON2: TON;
		TOF1: TOF;
		TOF2: TOF;
		SR1: SR;
		R_TRIG1: R_TRIG;
		digital1: HGdigLogPartV036;
		analog1: HGanalogPartV039;
		PowerStage1: PowerStageOpnEnd;
		PowerStage2: PowerStageOpnEnd;
		PowerStage3: PowerStage;
		WndComp1: WndComp;
	END_VAR
'FBD'
BODY
    WORKSPACE
        NETWORK_LIST_TYPE := NWTYPEFBD ;
        ACTIVE_NETWORK := 0 ;
    END_WORKSPACE
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_COMMENT,,exit,1,1,40,2,);
B(B_VARIN,,MXmachTypeOk,9,4,11,6,);
B(B_RETURN,,,16,4,18,6,);
B(B_VARIN,,MXhgByLudvSectio,9,5,11,7,);
B(B_F,@OR-2,,11,3,16,7,N);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_COMMENT,,init first time,1,1,27,2,);
B(B_VARIN,,LXinitOk,9,4,11,6,);
B(B_F,not,,11,3,16,6,);
B(B_JUMP,,init,16,4,18,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_COMMENT,,protect correction value change while program activ,1,1,27,2,);
B(B_VAROUT,,MXhg2Preselect,16,4,18,6,);
B(B_F,sel,,11,3,16,8,);
B(B_VARIN,,CXhg2Preselect,9,5,11,7,);
B(B_VARIN,,MXhg2Preselect,9,6,11,8,);
B(B_VARIN,,LXstart,9,4,11,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VAROUT,,LXstart,11,1,13,3,);
B(B_VARIN,,TRUE,9,1,11,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_COMMENT,,exit programm when not preselected,1,1,27,2,);
B(B_VARIN,,MXhg2EnPowStage,10,4,12,6,);
B(B_VARIN,,MXhg2PumpInZero,10,6,12,8,);
B(B_VARIN,,QXhg2Clutch,10,5,12,7,);
B(B_F,@OR-2,,19,8,24,12,0N);
B(B_F,@AND-5,,12,3,17,10,NN);
B(B_VARIN,,MXhg2Preselect,9,8,11,10,);
B(B_VARIN,,MXhg2ExitProg,10,7,12,9,);
B(B_JUMP,,exit,24,9,26,11,);
L(18,5,18,10);
L(18,10,19,10);
L(17,5,18,5);
L(11,9,12,9);
L(11,9,11,11);
L(11,11,19,11);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_F,sel,,18,3,23,8,);
B(B_VARIN,,400.0,16,5,18,7,);
B(B_F,to_real,,11,6,18,9,);
B(B_VARIN,,600.0,9,7,11,9,);
B(B_VAROUT,,LDscalePress,23,4,25,6,);
B(B_VARIN,,MX600barPreTrans,16,4,18,6,);
B(B_COMMENT,,select scale of pressure transmitter,1,1,27,2,);
L(18,7,18,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 22 ;
        NETWORK_BODY
B(B_COMMENT,,input system pressure,1,1,27,2,);
B(B_FB,SR,SR1,26,15,31,19,0N);
B(B_F,@AND-2,,21,15,26,19,0N);
B(B_VARIN,,MXengStarterActi,17,17,19,19,);
B(B_F,@OR-2,,32,11,37,15,);
B(B_VARIN,,IWhg2SystemPress,9,5,11,7,);
B(B_FB,ScaleAI,ScaleAI1,11,4,19,9,);
B(B_VARIN,,LDscalePress,9,6,11,8,);
B(B_FB,MsgRealReal,Message1,34,4,43,11,);
B(B_VARIN,,136,32,5,34,7,);
B(B_VARIN,,MSG_ERROR,32,7,34,9,);
B(B_FB,MsgRealReal,Message2,38,14,47,21,);
B(B_VARIN,,135,36,15,38,17,);
B(B_VARIN,,MSG_ERROR,36,17,38,19,);
B(B_VAROUT,,MDhg2SystemPress,19,5,21,7,);
B(B_VAROUT,,MXhg2ErrPressInd,37,12,39,14,);
L(19,8,20,8);
L(20,17,21,17);
L(19,18,21,18);
L(20,19,26,19);
L(26,18,26,19);
L(31,17,38,17);
L(20,8,20,19);
L(32,14,32,17);
L(21,7,21,13);
L(21,13,32,13);
L(19,7,34,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 19 ;
        NETWORK_BODY
B(B_COMMENT,,standstill indicator,1,1,27,2,);
B(B_FB,WndComp,WndComp1,18,7,25,13,);
B(B_VARIN,,5.0,16,9,18,11,);
B(B_VARIN,,2.0,16,11,18,13,);
B(B_F,sel,,29,6,34,11,);
B(B_VAROUT,,MXhg2WinchStand,34,7,36,9,);
B(B_VARIN,,MXhg2RopeLenMeas,26,3,28,5,);
B(B_VARIN,,IXhg2StandStInd,25,4,27,6,);
B(B_F,abs,,11,6,16,9,);
B(B_VARIN,,MDhg2RopeSpeed,9,7,11,9,);
B(B_F,sel,,29,12,34,17,);
B(B_FB,TON,TON2,21,14,26,18,);
B(B_VARIN,,IDcounterHg2,9,15,11,17,);
B(B_VARIN,,LDcounterHg2_t0,9,16,11,18,);
B(B_F,@EQ-2,,11,14,16,18,);
B(B_VARIN,,T#0.1s,19,16,21,18,);
B(B_F,not,,34,12,39,15,);
B(B_VAROUT,,MXhg2WinchMove,39,13,41,15,);
L(17,8,17,9);
L(17,9,18,9);
L(25,10,29,10);
L(27,9,29,9);
L(28,8,29,8);
L(16,8,17,8);
L(28,4,28,14);
L(28,14,29,14);
L(27,5,27,15);
L(27,15,29,15);
L(16,16,21,16);
L(26,16,29,16);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 18 ;
        NETWORK_BODY
B(B_COMMENT,,check winch is lift or lowering for special leakoilcompensation,1,1,27,2,);
B(B_COMMENT,,only when rope lenght measuring is installed,1,2,27,3,);
B(B_VARIN,,IDcounterHg2,10,5,12,7,);
B(B_FB,TOF,TOF1,28,4,33,8,);
B(B_VAROUT,,MXhg2WinchLift,33,5,35,7,);
B(B_FB,TOF,TOF2,28,10,33,14,);
B(B_VAROUT,,MXhg2WinchLower,33,11,35,13,);
B(B_VARIN,,T#0.1s,25,14,27,16,);
B(B_F,@GT-2,,21,4,26,8,);
B(B_F,@LT-2,,21,10,26,14,);
B(B_F,@SUB,,14,13,19,17,);
B(B_VARIN,,LDcounterHg2_t0,10,8,12,10,);
B(B_VARIN,,1,9,15,11,17,);
B(B_F,@ADD-2,,14,7,19,11,);
L(13,6,13,12);
L(12,9,12,15);
L(27,13,28,13);
L(27,7,27,15);
L(27,7,28,7);
L(12,6,21,6);
L(26,6,28,6);
L(26,12,28,12);
L(13,12,21,12);
L(12,15,14,15);
L(11,16,14,16);
L(11,10,11,16);
L(11,10,14,10);
L(20,7,20,9);
L(20,7,21,7);
L(19,15,20,15);
L(20,13,20,15);
L(20,13,21,13);
L(12,9,14,9);
L(19,9,20,9);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,IDcounterHg2,9,1,11,3,);
B(B_VAROUT,,LDcounterHg2_t0,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,lower limit switch,1,1,27,2,);
B(B_VARIN,,IXhg2LowerLimOk,14,4,16,6,);
B(B_F,@OR-2,,16,3,21,7,);
B(B_VAROUT,,MXadHg2LoweLimit,22,4,24,6,);
B(B_F,@OR-2,,23,6,28,10,);
B(B_VARIN,,MXlimitSwBridged,21,8,23,10,);
B(B_VAROUT,,MXhg2LoLimBridge,28,7,30,9,);
B(B_F,@AND-2,,11,6,16,10,NN);
B(B_VARIN,,MXLiftCrane,9,8,11,10,);
B(B_VARIN,,CXadHg2LoweLimit,9,7,11,9,);
L(22,8,23,8);
L(22,5,22,8);
L(21,5,22,5);
L(16,6,16,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_COMMENT,,upper limit switch,1,1,27,2,);
B(B_F,@OR-2,,11,3,16,7,);
B(B_VARIN,,MXlimitSwBridged,9,5,11,7,);
B(B_VAROUT,,MXhg2UpLimBridge,16,4,18,6,);
B(B_VARIN,,IXhg2UpperLimOk,9,4,11,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 15 ;
        NETWORK_BODY
B(B_COMMENT,,send messages,1,1,27,2,);
B(B_FB,MsgRealReal,Message3,12,4,21,11,0N);
B(B_VARIN,,250,10,5,12,7,);
B(B_VARIN,,IXhg2UpperLimOk,10,6,12,8,);
B(B_FB,MsgRealReal,Message4,31,4,40,11,0N);
B(B_VARIN,,699,29,5,31,7,);
B(B_VARIN,,IXhg2LowerLimOk,29,6,31,8,);
B(B_FB,MsgRealReal,Message5,50,4,59,11,);
B(B_VARIN,,525,48,5,50,7,);
B(B_VARIN,,IXhg2NoRopeLimit,48,6,50,8,);
B(B_VARIN,,MSG_INFO,9,11,11,13,);
B(B_COMMENT,,Info: diese Message wird abgesetzt wennø^die Seilzugbegrenzung überbrückt wurde,50,11,66,13,);
L(11,12,49,12);
L(49,8,49,12);
L(49,8,50,8);
L(30,8,31,8);
L(30,8,30,12);
L(11,8,11,12);
L(11,8,12,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,exit program by external controlling,1,1,27,2,);
B(B_VARIN,,MXhg2ExtControl,9,3,11,5,);
B(B_JUMP,,exit,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 25 ;
        NETWORK_BODY
B(B_VARIN,,MXhg2ExtAnalSign,19,13,21,15,);
B(B_F,sel,,21,12,26,17,);
B(B_VARIN,,MDhg2JoySignal,19,14,21,16,);
B(B_VARIN,,MDhg2ExtAnalSign,19,15,21,17,);
B(B_VARIN,,0.0,29,14,31,16,);
B(B_F,sel,,31,11,36,16,);
B(B_F,@GT-2,,31,16,36,20,);
B(B_F,@LT-2,,31,20,36,24,);
B(B_VARIN,,0.0,29,18,31,20,);
B(B_VARIN,,0.0,29,22,31,24,);
B(B_VAROUT,,MXhg2AnalSigNeg,36,21,38,23,);
B(B_VAROUT,,MXhg2AnalSigPos,36,17,38,19,);
B(B_VAROUT,,MDhg2AnalogSig,36,12,38,14,);
B(B_COMMENT,,analog signal selector and stop hg 2,2,1,28,2,);
B(B_F,@AND-2,,12,5,17,9,0N);
B(B_F,@AND-2,,12,9,17,13,0N);
B(B_VARIN,,MXhg2LocStopRapU,10,6,12,8,);
B(B_VARIN,,MXhg2LocStopInt,17,3,19,5,);
B(B_VARIN,,MXhg2LocStopRapD,10,10,12,12,);
B(B_VARIN,,MXhg2AnalSigNeg,10,7,12,9,);
B(B_VARIN,,MXhg2AnalSigPos,10,11,12,13,);
B(B_F,@OR-3,,21,7,26,12,);
L(26,14,31,14);
L(27,14,27,22);
L(27,18,31,18);
L(27,22,31,22);
L(27,9,27,13);
L(27,13,31,13);
L(19,4,19,9);
L(19,9,21,9);
L(17,7,18,7);
L(18,7,18,10);
L(18,10,21,10);
L(17,11,21,11);
L(26,9,27,9);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 24 ;
        NETWORK_BODY
B(B_F,@OR-2,,22,3,27,7,);
B(B_F,sel,,29,8,34,13,);
B(B_VARIN,,100.0,9,10,11,12,);
B(B_F,sel,,20,10,25,15,);
B(B_F,@LT-2,,13,8,18,12,);
B(B_F,sel,,29,16,34,21,);
B(B_VARIN,,100.0,9,18,11,20,);
B(B_F,sel,,20,18,25,23,);
B(B_F,@LT-2,,13,16,18,20,);
B(B_COMMENT,,rapid stop hg 2,1,1,27,2,);
B(B_VARIN,,MXhg2LocStopRapU,20,4,22,6,);
B(B_VARIN,,MXhg2LocStopRapD,20,5,22,7,);
B(B_VAROUT,,LDintTimeUp,34,9,36,11,);
B(B_VAROUT,,LDintTimeDown,34,17,36,19,);
B(B_VARIN,,CDhg2IntTimeUp,10,7,12,9,);
B(B_VARIN,,CDhg2IntTimeDn,10,15,12,17,);
L(27,11,29,11);
L(27,12,29,12);
L(27,5,28,5);
L(28,10,29,10);
L(11,11,13,11);
L(11,11,11,14);
L(12,13,20,13);
L(11,14,20,14);
L(19,10,19,12);
L(19,12,20,12);
L(12,10,13,10);
L(18,10,19,10);
L(26,8,26,11);
L(26,11,27,11);
L(25,12,27,12);
L(12,8,26,8);
L(12,8,12,13);
L(28,18,29,18);
L(28,5,28,18);
L(11,19,13,19);
L(11,19,11,22);
L(12,21,20,21);
L(11,22,20,22);
L(19,18,19,20);
L(19,20,20,20);
L(12,18,13,18);
L(18,18,19,18);
L(26,16,26,19);
L(12,16,26,16);
L(12,16,12,21);
L(25,20,29,20);
L(26,19,29,19);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 37 ;
        NETWORK_BODY
B(B_COMMENT,,digital logic hg 2,1,1,27,2,);
B(B_VARIN,,MXhg2AnalSigPos,26,8,28,10,);
B(B_VARIN,,MXhg2AnalSigNeg,26,9,28,11,);
B(B_VARIN,,MXhg2PumpInZero,26,10,28,12,);
B(B_VARIN,,IXhg2FeedPressOk,26,18,28,20,);
B(B_VAROUT,,MXhg2EnPowStage,51,12,53,14,);
B(B_VARIN,,113,26,19,28,21,);
B(B_VARIN,,MXstopAllFunctio,26,14,28,16,);
B(B_VARIN,,MXhg2WinchStand,26,17,28,19,);
B(B_VAROUT,,MXhg2EnablTrimot,51,13,53,15,);
B(B_VAROUT,,MXhg2LocStopInt,51,14,53,16,);
B(B_VAROUT,,MXhg2LocStopRapU,51,15,53,17,);
B(B_VAROUT,,LXstoreSysPress,51,17,53,19,);
B(B_VAROUT,,LXenLeakoilComp,51,18,53,20,);
B(B_VAROUT,,MXhg2pselFreefal,51,19,53,21,);
B(B_VAROUT,,MXhg2LedFastSpe,51,20,53,22,);
B(B_VAROUT,,MXhg2LocStopRapD,51,16,53,18,);
B(B_VARIN,,IXhg2BrakePresOk,26,20,28,22,);
B(B_VARIN,,ITXhg2FastSpeed,26,23,28,25,);
B(B_VARIN,,ITXfreefallOper,26,24,28,26,);
B(B_VARIN,,MXhg2LockClutch,26,27,28,29,);
B(B_VARIN,,MXhg2LoLimBridge,26,21,28,23,);
B(B_VARIN,,MXlockFreefall,9,27,11,29,);
B(B_VARIN,,IXhgRelFreefall,9,26,11,28,);
B(B_F,@AND-2,,11,25,16,29,0N);
B(B_VAROUT,,QXhg2BrakeFastSp,53,10,55,12,);
B(B_VAROUT,,LXhg2LoadPressSy,53,8,55,10,);
B(B_VAROUT,,QXhg2BrakeNormal,53,9,55,11,);
B(B_VARIN,,MXhg2ClutchExt,51,5,53,7,);
B(B_VAROUT,,QXhg2Clutch,58,5,60,7,);
B(B_VARIN,,IXunsecuredFreef,26,26,28,28,);
B(B_VAROUT,,MXhg2EnabFastSpe,51,21,53,23,);
B(B_VARIN,,MXhg2UpLimBridge,26,22,28,24,);
B(B_VARIN,,MXjoyBridgeFastS,26,32,28,34,);
B(B_VARIN,,MXminEngineSpeed,26,29,28,31,);
B(B_VARIN,,CDhg2maxPressFSp,26,31,28,33,);
B(B_VARIN,,MXhg2LockFastSpe,26,33,28,35,);
B(B_VARIN,,MXhgFastSpeed,26,30,28,32,);
B(B_VARIN,,MXdrillFreefPres,26,28,28,30,);
B(B_FB,HGdigLogPartV036,digital1,28,7,51,36,);
B(B_VARIN,,MDhg2PressMemory,26,34,28,36,);
B(B_F,@OR-2,,53,4,58,8,);
B(B_F,@OR-2,,11,4,16,8,);
B(B_VARIN,,LXhg2PressLoaded,9,5,11,7,);
B(B_VARIN,,MXhg2ErrPressInd,9,6,11,8,);
B(B_F,@AND-2,,11,20,16,24,0N);
B(B_VARIN,,LXhg2EnTrimotAna,9,21,11,23,);
B(B_VARIN,,MXhg2LockTrimot,9,22,11,24,);
B(B_F,@AND-2,,11,16,16,20,0N);
B(B_VARIN,,MXlmlStop,9,17,11,19,);
B(B_VARIN,,MXlmlBridged,9,18,11,20,);
B(B_F,@OR-2,,11,12,16,16,);
B(B_F,@OR-2,,11,8,16,12,);
B(B_VARIN,,MXhg2StopLimLowe,9,14,11,16,);
B(B_VARIN,,MXhg2GlobStopUp,9,9,11,11,);
B(B_VARIN,,MXhg2StopLimLift,9,10,11,12,);
B(B_VARIN,,MXhg2GlobStopDow,9,13,11,15,);
L(16,27,17,27);
L(17,26,17,27);
L(17,26,28,26);
L(17,6,17,12);
L(52,7,52,12);
L(52,7,53,7);
L(51,9,53,9);
L(51,10,53,10);
L(51,11,53,11);
L(17,12,28,12);
L(51,12,52,12);
L(16,16,28,16);
L(16,6,17,6);
L(16,22,17,22);
L(16,16,16,18);
L(17,17,17,22);
L(17,17,28,17);
L(16,10,16,13);
L(16,13,28,13);
L(16,14,28,14);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 22 ;
        NETWORK_BODY
B(B_COMMENT,,signal reduction lifting,1,1,27,2,);
B(B_F,sel,,10,6,15,11,);
B(B_VARIN,,MXhg2SpeedRedAct,8,7,10,9,);
B(B_VARIN,,MDhgSpeedReduct,8,9,10,11,);
B(B_F,sel,,10,11,15,16,);
B(B_VARIN,,MDlmlSpeedRed_Hg,8,14,10,16,);
B(B_VARIN,,MXlmlRedAllFunct,8,12,10,14,);
B(B_F,sel,,10,16,15,21,);
B(B_VARIN,,MDlmlSpeedRed_Hg,8,19,10,21,);
B(B_VARIN,,MXlmlRedLoaIncFu,8,17,10,19,);
B(B_VARIN,,1.0,8,8,10,10,);
B(B_VARIN,,1.0,8,13,10,15,);
B(B_VARIN,,1.0,8,18,10,20,);
B(B_F,SigMin4,,17,3,24,9,);
B(B_VAROUT,,LDredLifting,24,4,26,6,);
B(B_VARIN,,MDpowerLimReduct,15,4,17,6,);
L(15,6,17,6);
L(16,7,17,7);
L(15,18,17,18);
L(17,8,17,18);
L(15,13,16,13);
L(16,7,16,13);
L(15,6,15,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 16 ;
        NETWORK_BODY
B(B_F,SigMin4,,17,3,24,9,);
B(B_VAROUT,,LDredLowering,24,4,26,6,);
B(B_COMMENT,,signal reduction lowering,1,1,27,2,);
B(B_VARIN,,MDhg1LowRegLimSi,15,4,17,6,);
B(B_F,sel,,10,5,15,10,);
B(B_VARIN,,MXhg2SpeedRedAct,8,6,10,8,);
B(B_VARIN,,MDhgSpeedReduct,8,8,10,10,);
B(B_F,sel,,10,10,15,15,);
B(B_VARIN,,MDlmlSpeedRed_Hg,8,13,10,15,);
B(B_VARIN,,MXlmlRedAllFunct,8,11,10,13,);
B(B_VARIN,,1.0,8,7,10,9,);
B(B_VARIN,,1.0,8,12,10,14,);
L(16,8,16,12);
L(16,8,17,8);
L(15,7,17,7);
L(17,5,17,6);
L(15,12,16,12);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 27 ;
        NETWORK_BODY
B(B_VAROUT,,MXhg2PumpInZero,48,7,50,9,);
B(B_VAROUT,,LXhg2PressLoaded,48,8,50,10,);
B(B_VAROUT,,MDhg2PumpSignal,48,5,50,7,);
B(B_VAROUT,,MDhg2TrimotSigna,48,6,50,8,);
B(B_VARIN,,MDhg2AnalogSig,23,5,25,7,);
B(B_VARIN,,MDhg2SystemPress,23,6,25,8,);
B(B_VAROUT,,LXhg2EnTrimotAna,48,9,50,11,);
B(B_COMMENT,,analog part hg 2,1,1,27,2,);
B(B_VAROUT,,MDhg2LowRegLimSi,48,10,50,12,);
B(B_VAROUT,,MDhg2PressMemory,48,11,50,13,);
B(B_VAROUT,,MXhg2SymStopLift,48,14,50,16,);
B(B_VAROUT,,MXhg2SymStopLowe,48,15,50,17,);
B(B_VAROUT,,MXhg2StopLimLift,48,12,50,14,);
B(B_VAROUT,,MXhg2StopLimLowe,48,13,50,15,);
B(B_VARIN,,LDintTimeDown,23,10,25,12,);
B(B_VARIN,,LDintTimeUp,23,9,25,11,);
B(B_VARIN,,LXenLeakoilComp,23,11,25,13,);
B(B_VARIN,,CDhg2LeakOilSign,23,12,25,14,);
B(B_VARIN,,MXhg2WinchLift,23,13,25,15,);
B(B_VARIN,,MXhg2WinchLower,23,14,25,16,);
B(B_FB,HGanalogPartV039,analog1,25,4,48,26,);
B(B_VARIN,,LDredLifting,23,7,25,9,);
B(B_VARIN,,LDredLowering,23,8,25,10,);
B(B_VARIN,,LXhg2LoadPressSy,23,16,25,18,);
B(B_VARIN,,LXstoreSysPress,23,17,25,19,);
B(B_VARIN,,CDlowLimSignal,23,15,25,17,);
B(B_F,@OR-2,,11,17,16,21,);
B(B_VARIN,,QXhg2Clutch,9,18,11,20,);
B(B_VARIN,,MXhg2ErrPressInd,9,19,11,21,);
B(B_VARIN,,MDhg2PressMemory,23,19,25,21,);
B(B_VARIN,,MDscRopeLenHg2,23,21,25,23,);
B(B_VARIN,,MDhgHightLimitDn,23,24,25,26,);
B(B_VARIN,,MDhgHightLimitUp,23,23,25,25,);
B(B_VARIN,,MXhgHightLimAct,23,20,25,22,);
B(B_VARIN,,CDhgMaxWinchSp,23,22,25,24,);
L(16,19,25,19);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 14 ;
        NETWORK_BODY
B(B_COMMENT,,power stage hg2 lifting,1,1,27,2,);
B(B_VARIN,,MXhg2EnPowStage,9,5,11,7,);
B(B_VARIN,,MDhg2PumpSignal,9,6,11,8,);
B(B_VARIN,,0.0,9,7,11,9,);
B(B_VARIN,,100.0,9,8,11,10,);
B(B_VARIN,,CWhg2minCurPumUp,9,10,11,12,);
B(B_VARIN,,CWhg2maxCurPumUp,9,11,11,13,);
B(B_FB,PowerStageOpnEnd,PowerStage1,11,4,25,13,);
B(B_VAROUT,,QWhg2Lifting,25,5,27,7,);
B(B_VARIN,,130.0,9,9,11,11,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 14 ;
        NETWORK_BODY
B(B_COMMENT,,power stage hg2 lowering,1,1,27,2,);
B(B_VARIN,,MXhg2EnPowStage,9,5,11,7,);
B(B_VARIN,,MDhg2PumpSignal,9,6,11,8,);
B(B_VARIN,,0.0,9,7,11,9,);
B(B_VARIN,,-100.0,9,8,11,10,);
B(B_VARIN,,CWhg2minCurPumDn,9,10,11,12,);
B(B_VARIN,,CWhg2maxCurPumDn,9,11,11,13,);
B(B_FB,PowerStageOpnEnd,PowerStage2,11,4,25,13,);
B(B_VAROUT,,QWhg2Lowering,25,5,27,7,);
B(B_VARIN,,-130.0,9,9,11,11,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_COMMENT,,power stage hg2 trimot,1,1,27,2,);
B(B_VARIN,,MXhg2EnablTrimot,9,5,11,7,);
B(B_VARIN,,MDhg2TrimotSigna,9,6,11,8,);
B(B_FB,PowerStage,PowerStage3,11,4,20,12,);
B(B_VAROUT,,QWhg2Trimot,20,5,22,7,);
B(B_VARIN,,CWhg2minCurTrimo,9,9,11,11,);
B(B_VARIN,,CWhg2maxCurTrimo,9,10,11,12,);
B(B_VARIN,,0.0,9,7,11,9,);
B(B_VARIN,,100.0,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_VARIN,,FALSE,9,3,11,5,);
B(B_VAROUT,,MXhg2EnaExitProg,11,3,13,5,);
B(B_COMMENT,,disable exit hoisting gear 2 program,1,1,27,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,exit hoisting gear 2 program,1,1,27,2,);
B(B_VARIN,,TRUE,9,3,11,5,);
B(B_RETURN,,,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL := exit: ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 36 ;
        NETWORK_BODY
B(B_COMMENT,,exit program and set defined values ,1,1,27,2,);
B(B_VARIN,,TRUE,9,5,11,7,);
B(B_FB,R_TRIG,R_TRIG1,11,4,18,7,);
B(B_F,sel,,19,25,24,30,);
B(B_VAROUT,,MDhg2PressMemory,24,26,26,28,);
B(B_F,sel,,19,30,24,35,);
B(B_VAROUT,,MDhg2LowRegLimSi,24,31,26,33,);
B(B_VARIN,,0.0,15,28,17,30,);
B(B_VARIN,,MDhg2PressMemory,15,27,17,29,);
B(B_VARIN,,MDhg2LowRegLimSi,17,32,19,34,);
B(B_VARIN,,100.0,17,33,19,35,);
B(B_F,sel,,19,20,24,25,);
B(B_F,sel,,19,15,24,20,);
B(B_VAROUT,,MXhg2UpLimBridge,24,21,26,23,);
B(B_VAROUT,,MXhg2LoLimBridge,24,16,26,18,);
B(B_F,sel,,19,10,24,15,);
B(B_VAROUT,,MXhg2WinchStand,24,11,26,13,);
B(B_F,sel,,19,5,24,10,);
B(B_VAROUT,,MXhg2PumpInZero,24,6,26,8,);
B(B_VARIN,,MXhg2PumpInZero,15,7,17,9,);
B(B_VARIN,,TRUE,15,23,17,25,);
B(B_VARIN,,MXhg2LoLimBridge,14,17,16,19,);
B(B_VARIN,,MXhg2UpLimBridge,14,22,16,24,);
B(B_VARIN,,MXhg2WinchStand,14,12,16,14,);
L(18,32,19,32);
L(17,28,19,28);
L(17,29,19,29);
L(18,27,19,27);
L(18,6,18,32);
L(18,22,19,22);
L(18,17,19,17);
L(18,12,19,12);
L(18,7,19,7);
L(17,8,19,8);
L(17,9,19,9);
L(17,14,19,14);
L(17,19,19,19);
L(17,24,19,24);
L(16,18,19,18);
L(17,9,17,24);
L(16,23,19,23);
L(16,13,19,13);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_VARIN,,TRUE,9,3,11,5,);
B(B_VAROUT,,MXhg2EnaExitProg,11,3,13,5,);
B(B_COMMENT,,enable exit hoisting gear 2 program,1,1,27,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,exit hoisting gear 2 program,1,1,27,2,);
B(B_VARIN,,TRUE,9,3,11,5,);
B(B_RETURN,,,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL := init: ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,init hoisting gear 2 program,1,1,27,2,);
B(B_VARIN,,TRUE,9,3,11,5,);
B(B_VAROUT,,LXinitOk,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_FB,CorrValue_Bool,CorrValue_Bool1,11,4,23,10,);
B(B_VARIN,,CXhg2Preselect,9,8,11,10,);
B(B_VARIN,,FALSE,9,6,11,8,);
B(B_VARIN,,TRUE,9,7,11,9,);
B(B_VARIN,,TRUE,9,5,11,7,);
B(B_COMMENT,,preselection if hg2 is mounted (installed),1,1,27,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_FB,CorrValue_Bool,CorrValue_Bool2,11,4,23,10,);
B(B_VARIN,,CXadHg2LoweLimit,9,8,11,10,);
B(B_VARIN,,FALSE,9,6,11,8,);
B(B_VARIN,,TRUE,9,7,11,9,);
B(B_VARIN,,TRUE,9,5,11,7,);
B(B_COMMENT,,set additional device lower limit switch hoisting gear  2,1,1,27,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value minimum current pump up,1,1,27,2,);
B(B_FB,CorrValue_UInt,CorrValue_UInt1,11,4,23,10,);
B(B_VARIN,,215,9,5,11,7,);
B(B_VARIN,,150,9,6,11,8,);
B(B_VARIN,,500,9,7,11,9,);
B(B_VARIN,,CWhg2minCurPumUp,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value minimum current pump down,1,1,27,2,);
B(B_FB,CorrValue_UInt,CorrValue_UInt2,11,4,23,10,);
B(B_VARIN,,215,9,5,11,7,);
B(B_VARIN,,150,9,6,11,8,);
B(B_VARIN,,500,9,7,11,9,);
B(B_VARIN,,CWhg2minCurPumDn,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value maximum current pump up,1,1,27,2,);
B(B_FB,CorrValue_UInt,CorrValue_UInt3,11,4,23,10,);
B(B_VARIN,,610,9,5,11,7,);
B(B_VARIN,,500,9,6,11,8,);
B(B_VARIN,,1000,9,7,11,9,);
B(B_VARIN,,CWhg2maxCurPumUp,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value maximum current pump down,1,1,27,2,);
B(B_FB,CorrValue_UInt,CorrValue_UInt4,11,4,23,10,);
B(B_VARIN,,610,9,5,11,7,);
B(B_VARIN,,500,9,6,11,8,);
B(B_VARIN,,1000,9,7,11,9,);
B(B_VARIN,,CWhg2maxCurPumDn,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value minimum current trimot,1,1,27,2,);
B(B_FB,CorrValue_UInt,CorrValue_UInt5,11,4,23,10,);
B(B_VARIN,,215,9,5,11,7,);
B(B_VARIN,,150,9,6,11,8,);
B(B_VARIN,,500,9,7,11,9,);
B(B_VARIN,,CWhg2minCurTrimo,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value maximum current trimot,1,1,27,2,);
B(B_FB,CorrValue_UInt,CorrValue_UInt6,11,4,23,10,);
B(B_VARIN,,320,9,5,11,7,);
B(B_VARIN,,150,9,6,11,8,);
B(B_VARIN,,800,9,7,11,9,);
B(B_VARIN,,CWhg2maxCurTrimo,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value integrator time hg 2 up,1,1,27,2,);
B(B_VARIN,,50.0,9,5,11,7,);
B(B_VARIN,,10.0,9,6,11,8,);
B(B_VARIN,,300.0,9,7,11,9,);
B(B_VARIN,,CDhg2IntTimeUp,9,8,11,10,);
B(B_FB,CorrValue_Real,CorrValue_Real1,11,4,23,10,);
B(B_COMMENT,,Max=rapid stop,23,7,30,8,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value integrator time hg 2 down,1,1,27,2,);
B(B_VARIN,,50.0,9,5,11,7,);
B(B_VARIN,,10.0,9,6,11,8,);
B(B_VARIN,,300.0,9,7,11,9,);
B(B_VARIN,,CDhg2IntTimeDn,9,8,11,10,);
B(B_FB,CorrValue_Real,CorrValue_Real2,11,4,23,10,);
B(B_COMMENT,,Max=rapid stop,23,7,30,8,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value leakoil compensation signal in [%],1,1,27,2,);
B(B_FB,CorrValue_Real,CorrValue_Real3,11,4,23,10,);
B(B_VARIN,,CDhg2LeakOilSign,9,8,11,10,);
B(B_VARIN,,15.0,9,5,11,7,);
B(B_VARIN,,0.0,9,6,11,8,);
B(B_VARIN,,50.0,9,7,11,9,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value maximum system pressure fast speed operation,1,1,27,2,);
B(B_FB,CorrValue_Real,CorrValue_Real4,11,4,23,10,);
B(B_VARIN,,120.0,9,5,11,7,);
B(B_VARIN,,0.0,9,6,11,8,);
B(B_VARIN,,175.0,9,7,11,9,);
B(B_VARIN,,CDhg2MaxPressFSp,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
END_BODY
END_PROGRAM

PROGRAM HG2progV190
(*name of author: Josef Schmid
version: 1.0
date: 07/99
modification:*)
(*name of author: Manfred Schapler
date: 04/97
modification:*)
	VAR_EXTERNAL 
		IXhg2StandStInd: BOOL:=FALSE;
			(*standstill indicator winch HG 2*)
		IXhg2UpperLimOk: BOOL:=FALSE;
			(*upper limit switch HG 2 o.k.*)
		IXhg2LowerLimOk: BOOL:=FALSE;
			(*lower limit switch HG 2 o.k.*)
		IXhg2BrakePresOk: BOOL:=FALSE;
			(*brake pressure HG 2 o.k.*)
		ITXfreefallOper: BOOL:=FALSE;
			(*preselection freefall operation *)
		IXhgRelFreefall: BOOL:=FALSE;
			(*clutch valve release freefall*)
		IXunsecuredFreef: BOOL:=FALSE;
			(*key switch 2: unsecured freefall*)
		MXlockFreefall: BOOL:=FALSE;
			(*lock freefall operation*)
		MXhg2pselFreefal: BOOL:=FALSE;
			(*HG 2 preselected freefall*)
		MXhg2LockClutch: BOOL:=FALSE;
			(*HG 2 global lock clutch*)
		MDpowerLimReduct: REAL:=0.0;
			(*maximum engine power regulator reduction to x[%]*)
		IDcounterHg2: DINT:=0;
			(*counter rope lenght hg2*)
		QXhg2BrakeNormal: BOOL:=FALSE;
			(*HG 2 brake normal speed operation*)
		QXhg2Clutch: BOOL:=FALSE;
			(*HG 2 clutch*)
		QWhg2Lifting: UINT:=0;
			(*HG 2 pump lifting*)
		QWhg2Lowering: UINT:=0;
			(*HG 2 pump lowering*)
		MXhg2AnalSigPos: BOOL:=FALSE;
			(*hg2 analog signal positiv*)
		MXhg2AnalSigNeg: BOOL:=FALSE;
			(*hg2 analog signal negativ*)
		MXstopAllFunctio: BOOL:=FALSE;
			(*stop all excavator functions*)
		MXhg2ExtAnalSign: BOOL:=FALSE;
			(*HG 2 other, external analog signal*)
		MXhg2LocStopInt: BOOL:=FALSE;
			(*HG 2 local stop integrated*)
		MXhg2LocStopRapU: BOOL:=FALSE;
			(*HG 2 local stop rapid lifting*)
		MXhg2LocStopRapD: BOOL:=FALSE;
			(*HG 2 local stop rapid lowering*)
		MXhg2GlobStopUp: BOOL:=FALSE;
			(*HG 2 global stop rapid up*)
		MXhg2GlobStopDow: BOOL:=FALSE;
			(*HG 2 global stop rapid down*)
		MXhg2WinchStand: BOOL:=FALSE;
			(*HG 2 winch standing still*)
		MXhg2PumpInZero: BOOL:=FALSE;
			(*HG 2 pump in zero*)
		MXhg2EnPowStage: BOOL:=FALSE;
			(*HG 2 enable power stage lifting or lowering*)
		MXhg2ExtControl: BOOL:=FALSE;
			(*HG 2 external enable to all outputs*)
		MXhg2ClutchExt: BOOL:=FALSE;
			(*hg2 clutch externat control*)
		MXhg2WinchLift: BOOL:=FALSE;
			(*hg2 winch is lifting*)
		MXhg2WinchLower: BOOL:=FALSE;
			(*hg2 winch is lowering*)
		MXadHg2LoweLimit: BOOL:=FALSE;
			(*lower limit switch for HG 2*)
		MXlmlStop: BOOL:=FALSE;
			(*lml stop*)
		MXlimitSwBridged: BOOL:=FALSE;
			(*X23 limit switches bridged for assembly operation*)
		MXlmlBridged: BOOL:=FALSE;
			(*X23 lml bridged*)
		MXhg2ExitProg: BOOL:=FALSE;
			(*HG 1 exit programm*)
		MXhg2UpLimBridge: BOOL:=FALSE;
			(*upper limit switch brigde hoisting gear 2*)
		MXhg2LoLimBridge: BOOL:=FALSE;
			(*lower limit switch brigde hoisting gear 2*)
		MXhg2SymStopLift: BOOL:=FALSE;
			(*hg2 symbol stop lifting hg hight limitation*)
		MXhg2SymStopLowe: BOOL:=FALSE;
			(*hg2 symbol stop lowering hg hight limitation*)
		MXhg2StopLimLift: BOOL:=FALSE;
			(*hg2 stop lifting by hg hight limitation*)
		MXhg2StopLimLowe: BOOL:=FALSE;
			(*hg2 stop lowering by hg hight limitation*)
		MXhgHightLimAct: BOOL:=FALSE;
			(*hg hight limitation activ*)
		MXlmlRedAllFunct: BOOL:=FALSE;
			(*lml reduces all functions*)
		MXlmlRedLoaIncFu: BOOL:=FALSE;
			(*lml reduces all load increasing functions*)
		MXhg2SpeedRedAct: BOOL:=FALSE;
			(*hg 2 speed reduction is active*)
		MXhg2WinchMove: BOOL:=FALSE;
			(*hg2 winch is moving*)
		MXhg2EnaExitProg: BOOL:=FALSE;
			(*enable exit hg2 programm*)
		MXhgByLudvSectio: BOOL:=FALSE;
			(*hg driven by LUDV section*)
		MXLiftCrane: BOOL:=FALSE;
			(*crawler crane is lift crane type*)
		MDhgSpeedReduct: REAL:=0.0;
			(*hg speed reduction factor*)
		MDhg2JoySignal: REAL:=0.0;
			(*HG 2 joystick signal in +/-[%]*)
		MDhg2AnalogSig: REAL:=0.0;
			(*analog signal joy stick hg2*)
		MDhg2ExtAnalSign: REAL:=0.0;
			(*HG 2 external analog signal in [%]*)
		MDhg2PumpSignal: REAL:=0.0;
			(*HG 2 analog signal pump in [%]*)
		MDratedEngSpeed: REAL:=0.0;
			(*rated engine speed in rpm*)
		MDhg2LowRegLimSi: REAL:=0.0;
			(*hg 2 lowering regulation limitation signal*)
		MDscRopeLenHg2: REAL:=0.0;
			(*screen indication rope lenght hg2*)
		MDlmlSpeedRed_Hg: REAL:=0.0;
			(*lml speed reduction value HG (lml changes 2010: spped reduction for electronical controlled crane functions)*)
		MDhg2RopeSpeed: REAL:=0.0;
			(*hg 2 rope speed in  m/min*)
	END_VAR
	VAR_EXTERNAL CONSTANT
		MSG_INFO: UINT:=0;
	END_VAR
	VAR_EXTERNAL RETAIN
		MXhg2RopeLenMeas: BOOL:=FALSE;
			(*rope lenght measuring HG 2 enabled*)
		MXhg2Preselect: BOOL:=FALSE;
			(*hg2  preselected*)
		MXmachTypeOk: BOOL:=FALSE;
			(*machine type is activated*)
		MDhgHightLimitUp: REAL:=0.0;
			(*hg hight limitation Up [m]*)
		MDhgHightLimitDn: REAL:=0.0;
			(*hg hight limitation Down [m]*)
	END_VAR
	VAR_EXTERNAL CONSTANT RETAIN
		CXhg2Preselect: BOOL:=FALSE;
			(*HG 2 is preselected (installed)*)
		CXadHg2LoweLimit: BOOL:=FALSE;
			(*additional device lower limit switch for HG 2*)
		CWhg2minCurPumUp: UINT:=0;
			(*HG 2 minimum current pump up*)
		CWhg2maxCurPumUp: UINT:=0;
			(*HG 2 maximum current pump up*)
		CWhg2minCurPumDn: UINT:=0;
			(*HG 2 minimum current pump down*)
		CWhg2maxCurPumDn: UINT:=0;
			(*HG 2 maximum current pump down*)
		CDhg2IntTimeUp: REAL:=0.0;
			(*HG 2 integrator time rising signal*)
		CDhg2IntTimeDn: REAL:=0.0;
			(*HG 2 integrator time falling signal*)
		CDhgMaxWinchSp: REAL:=0.0;
			(*hg hight limitation max. winch speed [m/min]*)
		CDengSpPumpRed: REAL:=0.0;
			(*engine speed for pump reduction [U/min]*)
	END_VAR
	VAR 
		LXstart: BOOL:=FALSE;
			(*Start bit*)
		LXinitOk: BOOL:=FALSE;
			(*init completed*)
		LDcounterHg2_t0: DINT:=0;
			(*counter rope lenght hg2 by last scan*)
		LDintTimeUp: REAL:=0.0;
		LDintTimeDown: REAL:=0.0;
		LDredLifting: REAL:=0.0;
		LDredLowering: REAL:=0.0;
		CorrValue_UInt1: CorrValue_UInt;
		CorrValue_UInt2: CorrValue_UInt;
		CorrValue_UInt3: CorrValue_UInt;
		CorrValue_UInt4: CorrValue_UInt;
		CorrValue_Real1: CorrValue_Real;
		CorrValue_Real2: CorrValue_Real;
		CorrValue_Bool1: CorrValue_Bool;
		Message1: MsgRealReal;
		Message2: MsgRealReal;
		TON1: TON;
		TOF1: TOF;
		TOF2: TOF;
		R_TRIG1: R_TRIG;
		WndComp1: WndComp;
		digital1: HGdigLogPartV022;
		analog1: HGanalogPartV024;
		PowerStage1: PowerStage;
		PowerStage2: PowerStage;
	END_VAR
'FBD'
BODY
    WORKSPACE
        NETWORK_LIST_TYPE := NWTYPEFBD ;
        ACTIVE_NETWORK := 0 ;
    END_WORKSPACE
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_COMMENT,,exit,1,1,40,2,);
B(B_VARIN,,MXmachTypeOk,9,4,11,6,);
B(B_RETURN,,,16,4,18,6,);
B(B_VARIN,,MXhgByLudvSectio,9,5,11,7,);
B(B_F,@OR-2,,11,3,16,7,NN);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_COMMENT,,init first time,1,1,27,2,);
B(B_VARIN,,LXinitOk,9,4,11,6,);
B(B_F,not,,11,3,16,6,);
B(B_JUMP,,init,16,4,18,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_COMMENT,,protect correction value change while program activ,1,1,27,2,);
B(B_VAROUT,,MXhg2Preselect,16,4,18,6,);
B(B_F,sel,,11,3,16,8,);
B(B_VARIN,,CXhg2Preselect,9,5,11,7,);
B(B_VARIN,,MXhg2Preselect,9,6,11,8,);
B(B_VARIN,,LXstart,9,4,11,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VAROUT,,LXstart,11,1,13,3,);
B(B_VARIN,,TRUE,9,1,11,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_COMMENT,,exit programm when not preselected,1,1,27,2,);
B(B_VARIN,,MXhg2EnPowStage,10,4,12,6,);
B(B_VARIN,,MXhg2PumpInZero,10,6,12,8,);
B(B_VARIN,,QXhg2Clutch,10,5,12,7,);
B(B_F,@OR-2,,19,8,24,12,0N);
B(B_F,@AND-5,,12,3,17,10,NN);
B(B_VARIN,,MXhg2Preselect,9,8,11,10,);
B(B_VARIN,,MXhg2ExitProg,10,7,12,9,);
B(B_JUMP,,exit,24,9,26,11,);
L(18,5,18,10);
L(18,10,19,10);
L(17,5,18,5);
L(11,9,12,9);
L(11,9,11,11);
L(11,11,19,11);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 19 ;
        NETWORK_BODY
B(B_COMMENT,,standstill indicator,1,1,27,2,);
B(B_FB,WndComp,WndComp1,18,7,25,13,);
B(B_VARIN,,5.0,16,9,18,11,);
B(B_VARIN,,2.0,16,11,18,13,);
B(B_F,sel,,29,6,34,11,);
B(B_VAROUT,,MXhg2WinchStand,34,7,36,9,);
B(B_VARIN,,MXhg2RopeLenMeas,26,3,28,5,);
B(B_VARIN,,IXhg2StandStInd,25,4,27,6,);
B(B_F,abs,,11,6,16,9,);
B(B_VARIN,,MDhg2RopeSpeed,9,7,11,9,);
B(B_F,sel,,29,12,34,17,);
B(B_FB,TON,TON1,21,14,26,18,);
B(B_VARIN,,IDcounterHg2,9,15,11,17,);
B(B_VARIN,,LDcounterHg2_t0,9,16,11,18,);
B(B_F,@EQ-2,,11,14,16,18,);
B(B_VARIN,,T#0.1s,19,16,21,18,);
B(B_F,not,,34,12,39,15,);
B(B_VAROUT,,MXhg2WinchMove,39,13,41,15,);
L(17,8,17,9);
L(17,9,18,9);
L(25,10,29,10);
L(27,9,29,9);
L(28,8,29,8);
L(16,8,17,8);
L(28,4,28,14);
L(28,14,29,14);
L(27,5,27,15);
L(27,15,29,15);
L(16,16,21,16);
L(26,16,29,16);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 18 ;
        NETWORK_BODY
B(B_COMMENT,,check if winch is lifting or lowering for rope length display and for controlø^of cutting off connection between LUDV pump 1 and pump 2,1,1,29,3,);
B(B_VARIN,,IDcounterHg2,10,5,12,7,);
B(B_FB,TOF,TOF1,28,4,33,8,);
B(B_VAROUT,,MXhg2WinchLift,33,5,35,7,);
B(B_FB,TOF,TOF2,28,10,33,14,);
B(B_VAROUT,,MXhg2WinchLower,33,11,35,13,);
B(B_VARIN,,T#0.1s,25,14,27,16,);
B(B_F,@GT-2,,21,4,26,8,);
B(B_F,@LT-2,,21,10,26,14,);
B(B_F,@SUB,,14,13,19,17,);
B(B_VARIN,,LDcounterHg2_t0,10,8,12,10,);
B(B_VARIN,,1,9,15,11,17,);
B(B_F,@ADD-2,,14,7,19,11,);
L(13,6,13,12);
L(12,9,12,15);
L(27,13,28,13);
L(27,7,27,15);
L(27,7,28,7);
L(12,6,21,6);
L(26,6,28,6);
L(26,12,28,12);
L(13,12,21,12);
L(12,15,14,15);
L(11,16,14,16);
L(11,10,11,16);
L(11,10,14,10);
L(20,7,20,9);
L(20,7,21,7);
L(19,15,20,15);
L(20,13,20,15);
L(20,13,21,13);
L(12,9,14,9);
L(19,9,20,9);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,IDcounterHg2,9,1,11,3,);
B(B_VAROUT,,LDcounterHg2_t0,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,lower limit switch,1,1,27,2,);
B(B_VARIN,,IXhg2LowerLimOk,14,4,16,6,);
B(B_F,@OR-2,,16,3,21,7,);
B(B_VAROUT,,MXadHg2LoweLimit,22,4,24,6,);
B(B_F,@OR-2,,23,6,28,10,);
B(B_VARIN,,MXlimitSwBridged,21,8,23,10,);
B(B_VAROUT,,MXhg2LoLimBridge,28,7,30,9,);
B(B_F,@AND-2,,11,6,16,10,NN);
B(B_VARIN,,MXLiftCrane,9,8,11,10,);
B(B_VARIN,,CXadHg2LoweLimit,9,7,11,9,);
L(22,8,23,8);
L(22,5,22,8);
L(21,5,22,5);
L(16,6,16,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_COMMENT,,upper limit switch,1,1,27,2,);
B(B_F,@OR-2,,11,3,16,7,);
B(B_VARIN,,MXlimitSwBridged,9,5,11,7,);
B(B_VAROUT,,MXhg2UpLimBridge,16,4,18,6,);
B(B_VARIN,,IXhg2UpperLimOk,9,4,11,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 14 ;
        NETWORK_BODY
B(B_COMMENT,,send message from upper limit switch,1,1,27,2,);
B(B_FB,MsgRealReal,Message1,12,4,21,11,0N);
B(B_VARIN,,249,10,5,12,7,);
B(B_VARIN,,IXhg2UpperLimOk,10,6,12,8,);
B(B_VARIN,,MSG_INFO,9,11,11,13,);
B(B_VARIN,,699,29,5,31,7,);
B(B_VARIN,,IXhg2LowerLimOk,29,6,31,8,);
B(B_FB,MsgRealReal,Message2,31,4,40,11,0N);
L(30,8,30,12);
L(11,12,30,12);
L(11,8,11,12);
L(11,8,12,8);
L(30,8,31,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,exit program by external controlling,1,1,27,2,);
B(B_VARIN,,MXhg2ExtControl,9,3,11,5,);
B(B_RETURN,,,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 25 ;
        NETWORK_BODY
B(B_VARIN,,MXhg2ExtAnalSign,19,13,21,15,);
B(B_F,sel,,21,12,26,17,);
B(B_VARIN,,MDhg2JoySignal,19,14,21,16,);
B(B_VARIN,,MDhg2ExtAnalSign,19,15,21,17,);
B(B_VARIN,,0.0,29,14,31,16,);
B(B_F,sel,,31,11,36,16,);
B(B_F,@GT-2,,31,16,36,20,);
B(B_F,@LT-2,,31,20,36,24,);
B(B_VARIN,,0.0,29,18,31,20,);
B(B_VARIN,,0.0,29,22,31,24,);
B(B_VAROUT,,MXhg2AnalSigNeg,36,21,38,23,);
B(B_VAROUT,,MXhg2AnalSigPos,36,17,38,19,);
B(B_VAROUT,,MDhg2AnalogSig,36,12,38,14,);
B(B_COMMENT,,analog signal selector and stop hg 2,2,1,28,2,);
B(B_F,@AND-2,,12,5,17,9,0N);
B(B_F,@AND-2,,12,9,17,13,0N);
B(B_VARIN,,MXhg2LocStopRapU,10,6,12,8,);
B(B_VARIN,,MXhg2LocStopInt,17,3,19,5,);
B(B_VARIN,,MXhg2LocStopRapD,10,10,12,12,);
B(B_VARIN,,MXhg2AnalSigNeg,10,7,12,9,);
B(B_VARIN,,MXhg2AnalSigPos,10,11,12,13,);
B(B_F,@OR-3,,21,7,26,12,);
L(26,14,31,14);
L(27,14,27,22);
L(27,18,31,18);
L(27,22,31,22);
L(27,9,27,13);
L(27,13,31,13);
L(19,4,19,9);
L(19,9,21,9);
L(17,7,18,7);
L(18,7,18,10);
L(18,10,21,10);
L(17,11,21,11);
L(26,9,27,9);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 24 ;
        NETWORK_BODY
B(B_F,@OR-2,,22,3,27,7,);
B(B_F,sel,,29,8,34,13,);
B(B_VARIN,,100.0,9,10,11,12,);
B(B_F,sel,,20,10,25,15,);
B(B_F,@LT-2,,13,8,18,12,);
B(B_F,sel,,29,16,34,21,);
B(B_VARIN,,100.0,9,18,11,20,);
B(B_F,sel,,20,18,25,23,);
B(B_F,@LT-2,,13,16,18,20,);
B(B_COMMENT,,rapid stop hg 2,1,1,27,2,);
B(B_VARIN,,MXhg2LocStopRapU,20,4,22,6,);
B(B_VARIN,,MXhg2LocStopRapD,20,5,22,7,);
B(B_VAROUT,,LDintTimeUp,34,9,36,11,);
B(B_VAROUT,,LDintTimeDown,34,17,36,19,);
B(B_VARIN,,CDhg2IntTimeUp,10,7,12,9,);
B(B_VARIN,,CDhg2IntTimeDn,10,15,12,17,);
L(27,11,29,11);
L(27,12,29,12);
L(27,5,28,5);
L(28,10,29,10);
L(11,11,13,11);
L(11,11,11,14);
L(12,13,20,13);
L(11,14,20,14);
L(19,10,19,12);
L(19,12,20,12);
L(12,10,13,10);
L(18,10,19,10);
L(26,8,26,11);
L(26,11,27,11);
L(25,12,27,12);
L(12,8,26,8);
L(12,8,12,13);
L(28,18,29,18);
L(28,5,28,18);
L(11,19,13,19);
L(11,19,11,22);
L(12,21,20,21);
L(11,22,20,22);
L(19,18,19,20);
L(19,20,20,20);
L(12,18,13,18);
L(18,18,19,18);
L(26,16,26,19);
L(12,16,26,16);
L(12,16,12,21);
L(25,20,29,20);
L(26,19,29,19);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 24 ;
        NETWORK_BODY
B(B_COMMENT,,digital logic hg 2,1,1,27,2,);
B(B_VARIN,,MXhg2AnalSigPos,26,7,28,9,);
B(B_VARIN,,MXhg2AnalSigNeg,26,8,28,10,);
B(B_VARIN,,MXstopAllFunctio,26,11,28,13,);
B(B_VARIN,,MXhg2LoLimBridge,26,13,28,15,);
B(B_VAROUT,,MXhg2LocStopRapD,51,11,53,13,);
B(B_VAROUT,,MXhg2LocStopRapU,51,10,53,12,);
B(B_VAROUT,,MXhg2EnPowStage,51,9,53,11,);
B(B_VAROUT,,MXhg2LocStopInt,51,12,53,14,);
B(B_VAROUT,,MXhg2pselFreefal,51,13,53,15,);
B(B_VARIN,,MXhg2PumpInZero,26,15,28,17,);
B(B_VARIN,,ITXfreefallOper,26,16,28,18,);
B(B_VARIN,,IXhg2BrakePresOk,26,18,28,20,);
B(B_VARIN,,MXhg2WinchStand,26,20,28,22,);
B(B_VARIN,,IXunsecuredFreef,26,19,28,21,);
B(B_F,@OR-2,,53,3,58,7,);
B(B_VARIN,,MXhg2ClutchExt,51,4,53,6,);
B(B_VAROUT,,QXhg2Clutch,58,4,60,6,);
B(B_VAROUT,,QXhg2BrakeNormal,53,7,55,9,);
B(B_FB,HGdigLogPartV022,digital1,28,6,51,23,);
B(B_VARIN,,MXhg2LockClutch,26,21,28,23,);
B(B_VARIN,,MXhg2UpLimBridge,26,14,28,16,);
B(B_F,@AND-2,,11,16,16,20,0N);
B(B_VARIN,,IXhgRelFreefall,9,17,11,19,);
B(B_VARIN,,MXlockFreefall,9,18,11,20,);
B(B_F,@AND-2,,11,11,16,15,0N);
B(B_VARIN,,MXlmlStop,9,12,11,14,);
B(B_VARIN,,MXlmlBridged,9,13,11,15,);
B(B_F,@OR-2,,11,3,16,7,);
B(B_F,@OR-2,,11,7,16,11,);
B(B_VARIN,,MXhg2GlobStopUp,9,4,11,6,);
B(B_VARIN,,MXhg2GlobStopDow,9,8,11,10,);
B(B_VARIN,,MXhg2StopLimLift,9,5,11,7,);
B(B_VARIN,,MXhg2StopLimLowe,9,9,11,11,);
L(18,9,18,11);
L(19,5,19,10);
L(18,11,28,11);
L(19,10,28,10);
L(52,6,53,6);
L(52,6,52,9);
L(51,8,53,8);
L(51,9,52,9);
L(16,18,28,18);
L(16,13,28,13);
L(16,9,18,9);
L(16,5,19,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 22 ;
        NETWORK_BODY
B(B_COMMENT,,signal reduction lifting,1,1,27,2,);
B(B_F,sel,,10,6,15,11,);
B(B_VARIN,,MXhg2SpeedRedAct,8,7,10,9,);
B(B_VARIN,,MDhgSpeedReduct,8,9,10,11,);
B(B_F,sel,,10,11,15,16,);
B(B_VARIN,,MDlmlSpeedRed_Hg,8,14,10,16,);
B(B_VARIN,,MXlmlRedAllFunct,8,12,10,14,);
B(B_F,sel,,10,16,15,21,);
B(B_VARIN,,MDlmlSpeedRed_Hg,8,19,10,21,);
B(B_VARIN,,MXlmlRedLoaIncFu,8,17,10,19,);
B(B_F,SigMin4,,17,3,24,9,);
B(B_VARIN,,1.0,8,8,10,10,);
B(B_VARIN,,1.0,8,13,10,15,);
B(B_VARIN,,1.0,8,18,10,20,);
B(B_VAROUT,,LDredLifting,24,4,26,6,);
B(B_VARIN,,MDpowerLimReduct,15,4,17,6,);
L(15,6,17,6);
L(16,7,17,7);
L(15,18,17,18);
L(17,8,17,18);
L(15,13,16,13);
L(16,7,16,13);
L(15,6,15,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 17 ;
        NETWORK_BODY
B(B_F,sel,,10,6,15,11,);
B(B_VARIN,,MXhg2SpeedRedAct,8,7,10,9,);
B(B_VARIN,,MDhgSpeedReduct,8,9,10,11,);
B(B_F,sel,,10,11,15,16,);
B(B_VARIN,,MDlmlSpeedRed_Hg,8,14,10,16,);
B(B_VARIN,,MXlmlRedAllFunct,8,12,10,14,);
B(B_F,SigMin4,,17,3,24,9,);
B(B_VARIN,,1.0,8,8,10,10,);
B(B_VARIN,,1.0,8,13,10,15,);
B(B_VAROUT,,LDredLowering,24,4,26,6,);
B(B_COMMENT,,signal reduction lowering,1,1,27,2,);
B(B_VARIN,,1.0,15,5,17,7,);
B(B_VARIN,,MDpowerLimReduct,15,4,17,6,);
L(15,13,16,13);
L(16,8,16,13);
L(15,7,15,8);
L(16,8,17,8);
L(15,7,17,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 19 ;
        NETWORK_BODY
B(B_COMMENT,,analog part hg 1,1,1,27,2,);
B(B_FB,HGanalogPartV024,analog1,11,4,34,18,);
B(B_VARIN,,MDratedEngSpeed,9,6,11,8,);
B(B_VARIN,,MDhg2AnalogSig,9,5,11,7,);
B(B_VARIN,,CDengSpPumpRed,9,7,11,9,);
B(B_VARIN,,LDintTimeDown,9,11,11,13,);
B(B_VARIN,,LDintTimeUp,9,10,11,12,);
B(B_VARIN,,MDscRopeLenHg2,9,12,11,14,);
B(B_VARIN,,CDhgMaxWinchSp,9,13,11,15,);
B(B_VARIN,,MDhgHightLimitUp,9,14,11,16,);
B(B_VARIN,,MDhgHightLimitDn,9,15,11,17,);
B(B_VARIN,,MXhgHightLimAct,9,16,11,18,);
B(B_VARIN,,LDredLifting,9,8,11,10,);
B(B_VARIN,,LDredLowering,9,9,11,11,);
B(B_VAROUT,,MDhg2PumpSignal,34,5,36,7,);
B(B_VAROUT,,MXhg2PumpInZero,34,6,36,8,);
B(B_VAROUT,,MXhg2StopLimLift,34,7,36,9,);
B(B_VAROUT,,MXhg2StopLimLowe,34,8,36,10,);
B(B_VAROUT,,MXhg2SymStopLift,34,9,36,11,);
B(B_VAROUT,,MXhg2SymStopLowe,34,10,36,12,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_COMMENT,,power stage hg 2 lifting,1,1,27,2,);
B(B_VARIN,,MXhg2EnPowStage,9,5,11,7,);
B(B_VARIN,,MDhg2PumpSignal,9,6,11,8,);
B(B_FB,PowerStage,PowerStage1,11,4,20,12,);
B(B_VAROUT,,QWhg2Lifting,20,5,22,7,);
B(B_VARIN,,CWhg2minCurPumUp,9,9,11,11,);
B(B_VARIN,,CWhg2maxCurPumUp,9,10,11,12,);
B(B_VARIN,,0.0,9,7,11,9,);
B(B_VARIN,,100.0,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_COMMENT,,power stage hg 2 lowering,1,1,27,2,);
B(B_VARIN,,MXhg2EnPowStage,9,5,11,7,);
B(B_VARIN,,MDhg2PumpSignal,9,6,11,8,);
B(B_FB,PowerStage,PowerStage2,11,4,20,12,);
B(B_VAROUT,,QWhg2Lowering,20,5,22,7,);
B(B_VARIN,,CWhg2minCurPumDn,9,9,11,11,);
B(B_VARIN,,CWhg2maxCurPumDn,9,10,11,12,);
B(B_VARIN,,0.0,9,7,11,9,);
B(B_VARIN,,-100.0,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_VARIN,,FALSE,9,3,11,5,);
B(B_VAROUT,,MXhg2EnaExitProg,11,3,13,5,);
B(B_COMMENT,,disable exit hoisting gear 2 program,1,1,27,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,exit hoisting gear 2 program,1,1,27,2,);
B(B_VARIN,,TRUE,9,3,11,5,);
B(B_RETURN,,,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL := exit: ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 31 ;
        NETWORK_BODY
B(B_COMMENT,,exit program and set defined values ,1,1,27,2,);
B(B_VARIN,,TRUE,9,5,11,7,);
B(B_FB,R_TRIG,R_TRIG1,11,4,18,7,);
B(B_F,sel,,19,25,24,30,);
B(B_VAROUT,,MDhg2LowRegLimSi,24,26,26,28,);
B(B_VARIN,,MDhg2LowRegLimSi,17,27,19,29,);
B(B_VARIN,,100.0,17,28,19,30,);
B(B_F,sel,,19,20,24,25,);
B(B_F,sel,,19,15,24,20,);
B(B_VAROUT,,MXhg2UpLimBridge,24,21,26,23,);
B(B_VAROUT,,MXhg2LoLimBridge,24,16,26,18,);
B(B_F,sel,,19,10,24,15,);
B(B_VAROUT,,MXhg2WinchStand,24,11,26,13,);
B(B_F,sel,,19,5,24,10,);
B(B_VAROUT,,MXhg2PumpInZero,24,6,26,8,);
B(B_VARIN,,MXhg2PumpInZero,15,7,17,9,);
B(B_VARIN,,TRUE,15,23,17,25,);
B(B_VARIN,,MXhg2LoLimBridge,14,17,16,19,);
B(B_VARIN,,MXhg2UpLimBridge,14,22,16,24,);
B(B_VARIN,,MXhg2WinchStand,14,12,16,14,);
L(18,27,19,27);
L(18,6,18,27);
L(18,22,19,22);
L(18,17,19,17);
L(18,12,19,12);
L(18,7,19,7);
L(17,8,19,8);
L(17,9,19,9);
L(17,14,19,14);
L(17,19,19,19);
L(17,24,19,24);
L(16,18,19,18);
L(17,9,17,24);
L(16,23,19,23);
L(16,13,19,13);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_VARIN,,TRUE,9,3,11,5,);
B(B_VAROUT,,MXhg2EnaExitProg,11,3,13,5,);
B(B_COMMENT,,enable exit hoisting gear 2 program,1,1,27,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,exit hoisting gear 2 program,1,1,27,2,);
B(B_VARIN,,TRUE,9,3,11,5,);
B(B_RETURN,,,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL := init: ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,init hoisting gear 2 program,1,1,27,2,);
B(B_VARIN,,TRUE,9,3,11,5,);
B(B_VAROUT,,LXinitOk,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_FB,CorrValue_Bool,CorrValue_Bool1,11,4,23,10,);
B(B_VARIN,,CXadHg2LoweLimit,9,8,11,10,);
B(B_VARIN,,FALSE,9,6,11,8,);
B(B_VARIN,,TRUE,9,7,11,9,);
B(B_VARIN,,TRUE,9,5,11,7,);
B(B_COMMENT,,set additional device lower limit switch hoisting gear  2,1,1,27,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value minimum current pump up,1,1,27,2,);
B(B_FB,CorrValue_UInt,CorrValue_UInt1,11,4,23,10,);
B(B_VARIN,,350,9,5,11,7,);
B(B_VARIN,,200,9,6,11,8,);
B(B_VARIN,,450,9,7,11,9,);
B(B_VARIN,,CWhg2minCurPumUp,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value minimum current pump down,1,1,27,2,);
B(B_FB,CorrValue_UInt,CorrValue_UInt2,11,4,23,10,);
B(B_VARIN,,350,9,5,11,7,);
B(B_VARIN,,200,9,6,11,8,);
B(B_VARIN,,450,9,7,11,9,);
B(B_VARIN,,CWhg2minCurPumDn,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value maximum current pump up,1,1,27,2,);
B(B_FB,CorrValue_UInt,CorrValue_UInt3,11,4,23,10,);
B(B_VARIN,,730,9,5,11,7,);
B(B_VARIN,,450,9,6,11,8,);
B(B_VARIN,,1000,9,7,11,9,);
B(B_VARIN,,CWhg2maxCurPumUp,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value maximum current pump down,1,1,27,2,);
B(B_FB,CorrValue_UInt,CorrValue_UInt4,11,4,23,10,);
B(B_VARIN,,730,9,5,11,7,);
B(B_VARIN,,450,9,6,11,8,);
B(B_VARIN,,1000,9,7,11,9,);
B(B_VARIN,,CWhg2maxCurPumDn,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value integrator time hg 2 up,1,1,27,2,);
B(B_VARIN,,50.0,9,5,11,7,);
B(B_VARIN,,10.0,9,6,11,8,);
B(B_VARIN,,100.0,9,7,11,9,);
B(B_VARIN,,CDhg2IntTimeUp,9,8,11,10,);
B(B_FB,CorrValue_Real,CorrValue_Real1,11,4,23,10,);
B(B_COMMENT,,Max=rapid stop,23,7,30,8,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value integrator time hg 2 down,1,1,27,2,);
B(B_VARIN,,50.0,9,5,11,7,);
B(B_VARIN,,10.0,9,6,11,8,);
B(B_VARIN,,100.0,9,7,11,9,);
B(B_VARIN,,CDhg2IntTimeDn,9,8,11,10,);
B(B_FB,CorrValue_Real,CorrValue_Real2,11,4,23,10,);
B(B_COMMENT,,Max=rapid stop,23,7,30,8,);
        END_NETWORK_BODY
    END_NET_WORK
END_BODY
END_PROGRAM

PROGRAM LG2progV150
(*name of author: Manfred Schapler
version: 1.0
date: 04/97
modification:*)
(*name of author: Manfred Schapler
date: 04/97
modification:*)
	VAR_EXTERNAL 
		IXentrySwiClosed: BOOL:=FALSE;
			(*entry switch closed*)
		ITXhoistCyl: BOOL:=FALSE;
			(*preselection hoisting cylinder*)
		ITXlg2Winch: BOOL:=FALSE;
			(*preselection lg2 (auxiliary) winch *)
		IXlg2UpperLimOk: BOOL:=FALSE;
			(*upper limit switch LG2 o.k.*)
		IXlg2LowerLimOk: BOOL:=FALSE;
			(*lower limit switch LG 2 o.k.*)
		IXlg2FlapIsOut: BOOL:=FALSE;
			(*lg 2 luffing jib flap is out (ready)*)
		QTXhoistCyl: BOOL:=FALSE;
			(*enable hoisting cylinder*)
		QTXlg2Winch: BOOL:=FALSE;
			(*enable lg2 (auxiliary) winch *)
		QXlg2Brake: BOOL:=FALSE;
			(*LG 2 brake*)
		QXreleasHoistCyl: BOOL:=FALSE;
			(*release hoisting cylinder*)
		QXlg2PressLimitH: BOOL:=FALSE;
			(*pressure limit lg2, aux winch 2, hoist cyl., mode4, leader aux winch*)
		QWlg2Lifting: UINT:=0;
			(*LG 2 pump lifting*)
		QWlg2Lowering: UINT:=0;
			(*LG 2 pump lowering*)
		MXlg2AnalSigPos: BOOL:=FALSE;
			(*lg 2 analog signal positiv*)
		MXlg2AnalSigNeg: BOOL:=FALSE;
			(*lg 2 analog signal negativ*)
		MXassemblyOperat: BOOL:=FALSE;
			(*assembly operation*)
		MXstopAllFunctio: BOOL:=FALSE;
			(*stop all excavator functions*)
		MXaxwActive: BOOL:=FALSE;
			(*auxiliary winch active*)
		MXaxwUpLimOk: BOOL:=FALSE;
			(*auxiliary winch:  upper limit switch o.k.*)
		MXaxwLoLimOk: BOOL:=FALSE;
			(*auxiliary winch: lower limit switch o.k.*)
		MXlg2LocalStopUp: BOOL:=FALSE;
			(*LG 2 local stop lifting*)
		MXlg2LocalStopDn: BOOL:=FALSE;
			(*LG 2 local stop lowering*)
		MXlg2GlobalStopU: BOOL:=FALSE;
			(*luffing gear 2 global stop up*)
		MXlg2GlobalStopD: BOOL:=FALSE;
			(*luffing gear 2 global stop down*)
		MXlg2EnPowStage: BOOL:=FALSE;
			(*LG 2 enable power stage lifting or lowering*)
		MXlg2ExtAnalSign: BOOL:=FALSE;
			(*LG2 other, external analog signal*)
		MXlmlStop: BOOL:=FALSE;
			(*lml stop*)
		MXadSetLg2AuxWin: BOOL:=FALSE;
			(*ad set lg2 as auxiliary winch*)
		MXlgSpeed1: BOOL:=FALSE;
			(*LG speed 1*)
		MXlgSpeed2: BOOL:=FALSE;
			(*LG speed 2*)
		MXlgSpeed3: BOOL:=FALSE;
			(*LG speed 3*)
		MXlmlPressSenErr: BOOL:=FALSE;
			(*lml pressure sensor error fall back support luffing jib*)
		MXminEngineSpeed: BOOL:=FALSE;
			(*minimum engine speed reached*)
		MXanglSenErrBoom: BOOL:=FALSE;
			(*angle sensor error main boom*)
		MXlgStopUpByFlap: BOOL:=FALSE;
			(*lg2 flap is not working (defect)*)
		MXlgStopDnByFlap: BOOL:=FALSE;
			(*lg2 fall back support luffing jib is in flap*)
		MXjoyLgChange: BOOL:=FALSE;
			(*change luffing gear on joystick*)
		MXreleasHoistCyl: BOOL:=FALSE;
			(*release hoisting cylinder  driven  by lg2*)
		MXlmlBridged: BOOL:=FALSE;
			(*lml bridged*)
		MXlmlStopBackwar: BOOL:=FALSE;
			(*lml stop backwards*)
		MXlmlRedAllFunct: BOOL:=FALSE;
			(*lml reduces all functions*)
		MXlmlRedLoaIncFu: BOOL:=FALSE;
			(*lml reduces all load increasing functions*)
		MXhg1UpLimBridge: BOOL:=FALSE;
			(*upper limit switch brigde hoisting gear 1*)
		MXhg2UpLimBridge: BOOL:=FALSE;
			(*upper limit switch brigde hoisting gear 2*)
		MXboomWithFlap: BOOL:=FALSE;
			(*boom head with flap is mounted *)
		MXenabHangLeader: BOOL:=FALSE;
			(*add. enable hanging leader*)
		MXpassWinchPres: BOOL:=FALSE;
			(*preselection passenger winch *)
		MXextPressLimLg2: BOOL:=FALSE;
			(*ext. press limit LG2*)
		MXremContActive: BOOL:=FALSE;
			(*remote control activated*)
		MXlg2PreJoySigSG: BOOL:=FALSE;
			(*lg2 preselect joystick signal (sg joystick)*)
		MXlg2PreJoySigLG: BOOL:=FALSE;
			(*lg2 preselect joystick signal (lg joystick)*)
		MXlg2PreJoySiHG2: BOOL:=FALSE;
			(*lg2 preselect joystick signal (hg2 joystick)*)
		MXlg2EnJoySigSG: BOOL:=FALSE;
			(*lg2 enable joystick signal (sg joystick)*)
		MXlg2EnJoySigLG: BOOL:=FALSE;
			(*lg2 enable joystick signal (lg joystick)*)
		MXlg2EnJoySigHG2: BOOL:=FALSE;
			(*lg2 enable joystick signal (hg2 joystick)*)
		MXhoCylPreJoySig: BOOL:=FALSE;
			(*hoisting cylinder preselect joystick signal*)
		MXhoCylEnJoySig: BOOL:=FALSE;
			(*hoisting cylinder enable joystick signal*)
		MXaxwPreJoySigLG: BOOL:=FALSE;
			(*aux.winch preselect joystick signal (lg joystick)*)
		MXaxwPreJoySiHG2: BOOL:=FALSE;
			(*aux.winch preselect joystick signal (hg2 joystick)*)
		MXaxwEnJoySigLG: BOOL:=FALSE;
			(*aux.winch enable joystick signal (lg joystick)*)
		MXaxwEnJoySigHG2: BOOL:=FALSE;
			(*aux.winch enable joystick signal (hg2 joystick)*)
		MXlg2PumpZero: BOOL:=FALSE;
			(*lg2 pump in zero*)
		MXlimitSwBridged: BOOL:=FALSE;
			(*X23 limit switches bridged for assembly operation*)
		MXaxwAnalSigPos: BOOL:=FALSE;
			(*aux winch analog signal positiv*)
		MXaxwAnalSigNeg: BOOL:=FALSE;
			(*aux winch analog signal negativ*)
		MXhocAnalSigPos: BOOL:=FALSE;
			(*hoisting cylinder analog signal positiv*)
		MXhocAnalSigNeg: BOOL:=FALSE;
			(*hoisting cylinder analog signal negativ*)
		MXaxwGlobalStopU: BOOL:=FALSE;
			(*aux. winch global stop up*)
		MXaxwGlobalStopD: BOOL:=FALSE;
			(*aux. winch global stop down*)
		MXaxwEnPowStage: BOOL:=FALSE;
			(*aux winch enable power stage*)
		MXhocEnPowStage: BOOL:=FALSE;
			(*hoisting cylinder enable power stage*)
		MXadwPreJoySig: BOOL:=FALSE;
			(*add.winch preselect joystick signal (lg joystick)*)
		MDlg2PumpSignal: REAL:=0.0;
			(*LG 2 analog signal pump in [%]*)
		MDlg2ExtAnalSign: REAL:=0.0;
			(*LG2 external analog signal in [%]*)
		MDlg2JoySigSG: REAL:=0.0;
			(*lg2 analog signal joystick sg +/-[%]*)
		MDlg2JoySigLG: REAL:=0.0;
			(*lg2 analog signal joystick lg +/-[%]*)
		MDlg2JoySigHG2: REAL:=0.0;
			(*lg2 analog signal joystick hg2 +/-[%]*)
		MDhoCylJoySignal: REAL:=0.0;
			(*hoisting cylinder analog signal joystick +/-[%]*)
		MDlmlAngleBoom: REAL:=0.0;
			(*lml angle main boom in °*)
		MDlmlAngleLufJib: REAL:=0.0;
			(*lml angle luffing jib in °*)
		MDlmlSpeedRed_Lg: REAL:=0.0;
			(*lml speed reduction value LG (lml changes 2010)*)
		MDratedEngSpeed: REAL:=0.0;
			(*rated engine speed in rpm*)
		MDlg2IntTime: REAL:=0.0;
			(*luffing gear 2 integrator time down*)
		MDaxwJoySigLG: REAL:=0.0;
			(*aux. winch analog signal joystick lg +/-[%]*)
		MDaxwJoySigHG2: REAL:=0.0;
			(*aux. winch analog signal joystick hg2 +/-[%]*)
		MDaxwPumpSignal: REAL:=0.0;
			(*aux. winch analog signal pump in [%]*)
		MDhocPumpSignal: REAL:=0.0;
			(*hoisting cylinder analog signal pump in [%]*)
	END_VAR
	VAR_EXTERNAL CONSTANT
		MSG_INFO: UINT:=0;
		MSG_ERROR: UINT:=0;
	END_VAR
	VAR_EXTERNAL RETAIN
		MXlmlFix_LuffJib: BOOL:=FALSE;
			(*lml fixed or luffing jib enabled*)
		MXlmlLuffJibEnab: BOOL:=FALSE;
			(*lml luffing jib enabled*)
		MX2TJoystick: BOOL:=FALSE;
			(*enable double T joystick*)
		MXlg2Active: BOOL:=FALSE;
			(*LG 2 active*)
	END_VAR
	VAR_EXTERNAL CONSTANT RETAIN
		CXauxWinch: BOOL:=FALSE;
			(*additional: auxilliary winch *)
		CXadHoistingCyl: BOOL:=FALSE;
			(*add. device hoisting cylinder*)
		CXauxWithHg2Joy: BOOL:=FALSE;
			(*using hg2 joystick for auxilliary winch*)
		CWlg2minCurPumUp: UINT:=0;
			(*LG 2 minimum current pump up*)
		CWlg2maxCurPumUp: UINT:=0;
			(*LG 2 maximum current pump up*)
		CWlg2minCurPumDn: UINT:=0;
			(*LG 2 minimum current pump down*)
		CWlg2maxCurPumDn: UINT:=0;
			(*LG 2 maximum current pump down*)
		CDaxwIntTimeUp: REAL:=0.0;
			(*auxiliary winch integrator time up*)
		CDaxwIntTimeDn: REAL:=0.0;
			(*auxiliary winch integrator time down*)
		CDengSpPumpRed: REAL:=0.0;
			(*engine speed for pump reduction [U/min]*)
	END_VAR
	VAR 
		LXinitOk: BOOL:=FALSE;
			(*init completed*)
		LXstart: BOOL:=FALSE;
		LXlg2Brake: BOOL:=FALSE;
			(*lg 2 brake*)
		LXauxWinch: BOOL:=FALSE;
		LXadHoistingCyl: BOOL:=FALSE;
		LXauxWithHg2Joy: BOOL:=FALSE;
		LXjoyLgChaRTrig: BOOL:=FALSE;
		LXx23But24RTrig: BOOL:=FALSE;
		LXassOperatRTrig: BOOL:=FALSE;
		LXsetLg2RTrig: BOOL:=FALSE;
		LXaxwLocalStopDn: BOOL:=FALSE;
		LXaxwLocalStopUp: BOOL:=FALSE;
		LXhocLocalStopDn: BOOL:=FALSE;
		LXhocLocalStopUp: BOOL:=FALSE;
		LXaxwBrake: BOOL:=FALSE;
		LXaxwPumpZero: BOOL:=FALSE;
		LXhocPumpZero: BOOL:=FALSE;
		LDredLifting: REAL:=0.0;
		LDredLowering: REAL:=0.0;
		LDpumpSignal: REAL:=0.0;
		LDlg2AnalSignal: REAL:=0.0;
		LDaxwAnalSignal: REAL:=0.0;
		LDhocAnalSignal: REAL:=0.0;
		LDlg2IntTimeUp: REAL:=0.0;
		LDlg2IntTimeDown: REAL:=0.0;
		LDaxwIntTimeUp: REAL:=0.0;
		LDaxwIntTimeDown: REAL:=0.0;
		digital1: LGdigLogPartV013;
		digital2: LGdigLogPartV013;
		digital3: LGdigLogPartV013;
		analog1: LGanalogPartV013;
		analog2: LGanalogPartV013;
		analog3: LGanalogPartV013;
		PowerStage1: PowerStage;
		PowerStage2: PowerStage;
		F_TRIG1: F_TRIG;
		R_TRIG1: R_TRIG;
		R_TRIG2: R_TRIG;
		R_TRIG3: R_TRIG;
		R_TRIG4: R_TRIG;
		R_TRIG5: R_TRIG;
		SR1: SR;
		SR2: SR;
		SR3: SR;
		SR4: SR;
		SR5: SR;
		SR6: SR;
		TON1: TON;
		Message1: MsgRealReal;
		Message2: MsgRealReal;
		Message3: MsgRealReal;
		Message4: MsgRealReal;
		Message5: MsgRealReal;
		Message6: MsgRealReal;
		CorrValue_UInt1: CorrValue_UInt;
		CorrValue_UInt2: CorrValue_UInt;
		CorrValue_UInt3: CorrValue_UInt;
		CorrValue_UInt4: CorrValue_UInt;
		CorrValue_Bool1: CorrValue_Bool;
		CorrValue_Bool2: CorrValue_Bool;
		CorrValue_Bool3: CorrValue_Bool;
		CorrValue_Real1: CorrValue_Real;
		CorrValue_Real2: CorrValue_Real;
	END_VAR
'FBD'
BODY
    WORKSPACE
        NETWORK_LIST_TYPE := NWTYPEFBD ;
        ACTIVE_NETWORK := 0 ;
    END_WORKSPACE
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_COMMENT,,init first time,1,1,27,2,);
B(B_VARIN,,LXinitOk,9,4,11,6,);
B(B_F,not,,11,3,16,6,);
B(B_JUMP,,init,16,4,18,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 21 ;
        NETWORK_BODY
B(B_COMMENT,,protect correction value change while program activ,1,1,27,2,);
B(B_F,@OR-2,,11,3,16,7,NN);
B(B_VARIN,,LXstart,9,5,11,7,);
B(B_VARIN,,IXentrySwiClosed,9,4,11,6,);
B(B_F,sel,,18,5,23,10,);
B(B_VAROUT,,LXauxWinch,23,6,25,8,);
B(B_F,sel,,18,15,23,20,);
B(B_VAROUT,,LXadHoistingCyl,23,16,25,18,);
B(B_VARIN,,CXadHoistingCyl,16,18,18,20,);
B(B_VARIN,,LXadHoistingCyl,16,17,18,19,);
B(B_VARIN,,CXauxWinch,14,8,16,10,);
B(B_VARIN,,LXauxWinch,14,7,16,9,);
B(B_F,sel,,18,10,23,15,);
B(B_VARIN,,CXauxWithHg2Joy,14,13,16,15,);
B(B_VAROUT,,LXauxWithHg2Joy,23,11,25,13,);
B(B_VARIN,,LXauxWithHg2Joy,14,12,16,14,);
L(16,5,17,5);
L(17,7,18,7);
L(17,17,18,17);
L(16,8,18,8);
L(16,9,18,9);
L(17,5,17,17);
L(17,12,18,12);
L(16,14,18,14);
L(16,13,18,13);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VAROUT,,LXstart,11,1,13,3,);
B(B_VARIN,,TRUE,9,1,11,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_FB,R_TRIG,R_TRIG1,11,3,18,6,);
B(B_VARIN,,MXjoyLgChange,9,4,11,6,);
B(B_VAROUT,,LXjoyLgChaRTrig,18,4,20,6,);
B(B_COMMENT,,flag for rising trigger,1,1,27,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_COMMENT,,flag for rising trigger ,1,1,27,2,);
B(B_FB,R_TRIG,R_TRIG2,11,3,18,6,);
B(B_VARIN,,ITXlg2Winch,9,4,11,6,);
B(B_VAROUT,,LXx23But24RTrig,18,4,20,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_COMMENT,,flag for rising trigger ,1,1,27,2,);
B(B_VARIN,,LXstart,9,4,11,6,);
B(B_F,@AND-2,,18,3,23,7,);
B(B_FB,R_TRIG,R_TRIG3,11,3,18,6,);
B(B_VARIN,,MXlg2Active,16,6,18,8,);
B(B_VAROUT,,LXsetLg2RTrig,23,4,25,6,);
B(B_COMMENT,,set lg2 at restart~ if preselected before shut down,24,6,45,7,);
L(18,6,18,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_FB,R_TRIG,R_TRIG4,11,2,18,5,);
B(B_VARIN,,MXassemblyOperat,9,3,11,5,);
B(B_VAROUT,,LXassOperatRTrig,18,3,20,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,in case of 2-T-Joystick jump to Network 2_T_joy,1,1,27,2,);
B(B_VARIN,,MX2TJoystick,9,3,11,5,);
B(B_JUMP,,2_T_joy,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 19 ;
        NETWORK_BODY
B(B_COMMENT,,enable lg 2 with X joystick assembly operation,1,1,27,2,);
B(B_VARIN,,MXassemblyOperat,22,3,24,5,);
B(B_F,@AND-3,,25,4,30,9,0N);
B(B_VARIN,,MXlg2PreJoySigSG,21,4,23,6,);
B(B_F,@OR-3,,18,6,23,11,);
B(B_VARIN,,MXlg2PumpZero,23,11,25,13,);
B(B_F,@AND-2,,25,9,30,13,);
B(B_VARIN,,LXsetLg2RTrig,15,5,17,7,);
B(B_F,@AND-2,,11,8,16,12,);
B(B_VARIN,,MXremContActive,9,10,11,12,);
B(B_VARIN,,LXjoyLgChaRTrig,9,9,11,11,);
B(B_VARIN,,LXx23But24RTrig,14,6,16,8,);
B(B_VARIN,,MXlg2PreJoySigLG,30,13,32,15,);
B(B_FB,SR,SR1,39,3,44,7,);
B(B_VAROUT,,MXlg2PreJoySigSG,44,4,46,6,);
B(B_F,@AND-2,,32,3,37,7,);
B(B_VARIN,,MXlmlLuffJibEnab,30,2,32,4,);
B(B_F,@OR-5,,32,11,37,18,00N0N);
B(B_VARIN,,MXlmlLuffJibEnab,30,14,32,16,);
B(B_VARIN,,LXassOperatRTrig,30,15,32,17,);
B(B_VARIN,,MXlg2EnJoySigSG,30,16,32,18,);
L(24,4,24,6);
L(24,6,25,6);
L(23,5,23,7);
L(23,7,25,7);
L(38,6,38,13);
L(23,8,25,8);
L(24,11,25,11);
L(24,8,24,11);
L(16,10,18,10);
L(16,9,18,9);
L(16,7,16,9);
L(17,6,17,8);
L(17,8,18,8);
L(30,11,31,11);
L(31,11,31,13);
L(38,6,39,6);
L(37,5,39,5);
L(30,6,32,6);
L(32,3,32,5);
L(31,13,32,13);
L(37,13,38,13);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 23 ;
        NETWORK_BODY
B(B_COMMENT,,enable lg 2 with X joystick working operation,1,1,27,2,);
B(B_VARIN,,MXassemblyOperat,15,6,17,8,);
B(B_FB,F_TRIG,F_TRIG1,18,5,25,8,);
B(B_F,@AND-3,,18,8,23,13,NN);
B(B_VARIN,,MXlg2PreJoySigLG,15,8,17,10,);
B(B_VARIN,,LXjoyLgChaRTrig,9,11,11,13,);
B(B_VARIN,,LXx23But24RTrig,9,12,11,14,);
B(B_F,@OR-3,,11,10,16,15,);
B(B_VARIN,,LXsetLg2RTrig,9,13,11,15,);
B(B_VARIN,,MXlg2PumpZero,16,15,18,17,);
B(B_F,@AND-2,,18,13,23,17,);
B(B_F,@OR-2,,25,5,30,9,);
B(B_F,@AND-2,,31,4,36,8,);
B(B_FB,SR,SR2,37,4,42,8,);
B(B_VAROUT,,MXlg2PreJoySigLG,42,5,44,7,);
B(B_VARIN,,MXadwPreJoySig,29,18,31,20,);
B(B_VARIN,,MXlg2PreJoySigSG,29,17,31,19,);
B(B_VARIN,,LXassOperatRTrig,29,19,31,21,);
B(B_VARIN,,MXlg2EnJoySigLG,29,20,31,22,);
B(B_F,@OR-6,,31,14,36,22,0N000N);
B(B_VARIN,,MXlmlLuffJibEnab,29,16,31,18,);
B(B_VARIN,,MXlmlLuffJibEnab,29,3,31,5,);
L(17,7,18,7);
L(17,11,18,11);
L(18,7,18,10);
L(17,9,17,11);
L(16,12,18,12);
L(17,15,18,15);
L(17,12,17,15);
L(24,8,24,10);
L(23,10,24,10);
L(24,15,24,16);
L(23,15,24,15);
L(24,8,25,8);
L(30,7,31,7);
L(36,6,37,6);
L(37,7,37,16);
L(24,16,31,16);
L(36,16,37,16);
L(31,4,31,6);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_JUMP,,go_on,11,1,13,3,);
B(B_VARIN,,TRUE,9,1,11,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL := 2_T_joy: ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 16 ;
        NETWORK_BODY
B(B_COMMENT,,enable lg 2 with 2-T joystick,1,1,27,2,);
B(B_F,@AND-2,,18,4,23,8,N);
B(B_VARIN,,MXlg2PreJoySiHG2,15,3,17,5,);
B(B_VARIN,,LXx23But24RTrig,9,7,11,9,);
B(B_VARIN,,LXjoyLgChaRTrig,9,6,11,8,);
B(B_F,@OR-3,,11,5,16,10,);
B(B_VARIN,,LXsetLg2RTrig,9,8,11,10,);
B(B_VARIN,,MXlg2PumpZero,16,10,18,12,);
B(B_F,@AND-2,,18,8,23,12,);
B(B_F,@AND-2,,24,3,29,7,);
B(B_VARIN,,MXlmlLuffJibEnab,22,2,24,4,);
B(B_VARIN,,MXlmlLuffJibEnab,22,12,24,14,);
B(B_VARIN,,MXlg2EnJoySigHG2,22,13,24,15,);
B(B_F,@OR-3,,24,10,29,15,0NN);
B(B_FB,SR,SR3,29,3,34,7,);
B(B_VAROUT,,MXlg2PreJoySiHG2,34,4,36,6,);
L(17,6,18,6);
L(17,4,17,6);
L(16,7,18,7);
L(17,10,18,10);
L(17,7,17,10);
L(23,10,24,10);
L(23,6,24,6);
L(24,3,24,5);
L(24,10,24,12);
L(29,6,29,12);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL := go_on: ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 14 ;
        NETWORK_BODY
B(B_VAROUT,,MXlg2Active,23,2,25,4,);
B(B_VARIN,,MXlg2EnJoySigHG2,9,10,11,12,);
B(B_VARIN,,MXlg2PreJoySiHG2,9,11,11,13,);
B(B_F,@AND-2,,11,9,16,13,);
B(B_F,@OR-3,,18,1,23,6,);
B(B_F,@AND-2,,11,1,16,5,);
B(B_VARIN,,MXlg2EnJoySigLG,9,2,11,4,);
B(B_VARIN,,MXlg2PreJoySigLG,9,3,11,5,);
B(B_F,@AND-2,,11,5,16,9,);
B(B_VARIN,,MXlg2EnJoySigSG,9,6,11,8,);
B(B_VARIN,,MXlg2PreJoySigSG,9,7,11,9,);
L(17,4,17,7);
L(17,4,18,4);
L(16,7,17,7);
L(16,3,18,3);
L(18,5,18,11);
L(16,11,18,11);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 28 ;
        NETWORK_BODY
B(B_COMMENT,,enable auxilliary winch (lg2 winch is aux. winch),1,1,27,2,);
B(B_F,@OR-3,,13,9,18,14,);
B(B_VARIN,,LXjoyLgChaRTrig,11,10,13,12,);
B(B_VARIN,,LXx23But24RTrig,11,11,13,13,);
B(B_VARIN,,MXadSetLg2AuxWin,11,12,13,14,);
B(B_F,@AND-2,,20,12,25,16,);
B(B_VARIN,,MXlmlLuffJibEnab,25,16,27,18,);
B(B_VARIN,,LXauxWinch,25,17,27,19,);
B(B_VARIN,,MXhoCylPreJoySig,25,18,27,20,);
B(B_VARIN,,LXaxwPumpZero,18,14,20,16,);
B(B_VARIN,,MXaxwPreJoySigLG,18,5,20,7,);
B(B_FB,SR,SR4,34,4,39,8,);
B(B_VAROUT,,MXaxwPreJoySigLG,39,5,41,7,);
B(B_VARIN,,MXlmlLuffJibEnab,18,6,20,8,);
B(B_VARIN,,LXauxWinch,18,7,20,9,);
B(B_F,@OR-6,,27,14,32,22,00N00N);
B(B_F,@AND-5,,20,4,25,11,NN0N);
B(B_VARIN,,LXauxWithHg2Joy,18,8,20,10,);
B(B_COMMENT,,using lg joystick,1,2,27,3,);
B(B_VARIN,,MXaxwEnJoySigLG,24,25,26,27,);
B(B_F,@AND-2,,19,20,24,24,0N);
B(B_VARIN,,MXpassWinchPres,10,21,12,23,);
B(B_VARIN,,MXadwPreJoySig,10,22,12,24,);
B(B_F,@OR-2,,12,20,17,24,);
B(B_VARIN,,LXauxWithHg2Joy,16,24,18,26,);
L(33,7,33,16);
L(19,14,20,14);
L(25,14,26,14);
L(26,14,26,16);
L(19,10,19,14);
L(19,10,20,10);
L(18,11,19,11);
L(33,7,34,7);
L(26,21,27,21);
L(26,16,27,16);
L(32,16,33,16);
L(25,6,34,6);
L(26,21,26,26);
L(25,20,25,22);
L(18,23,19,23);
L(17,22,19,22);
L(24,22,25,22);
L(18,23,18,25);
L(25,20,27,20);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 22 ;
        NETWORK_BODY
B(B_COMMENT,,enable auxilliary winch 2 (lg2 winch is aux. winch 2),1,1,27,2,);
B(B_COMMENT,,using hg2 joystick,1,2,27,3,);
B(B_F,@OR-3,,11,9,16,14,);
B(B_VARIN,,LXjoyLgChaRTrig,9,10,11,12,);
B(B_VARIN,,LXx23But24RTrig,9,11,11,13,);
B(B_VARIN,,MXadSetLg2AuxWin,9,12,11,14,);
B(B_F,@AND-2,,18,12,23,16,);
B(B_VARIN,,MXlmlLuffJibEnab,23,16,25,18,);
B(B_VARIN,,LXauxWinch,23,17,25,19,);
B(B_VARIN,,MXhoCylPreJoySig,23,18,25,20,);
B(B_VARIN,,LXaxwPumpZero,16,14,18,16,);
B(B_VARIN,,MXaxwPreJoySiHG2,16,5,18,7,);
B(B_FB,SR,SR5,32,4,37,8,);
B(B_VAROUT,,MXaxwPreJoySiHG2,37,5,39,7,);
B(B_VARIN,,MXlmlLuffJibEnab,16,6,18,8,);
B(B_VARIN,,LXauxWinch,16,7,18,9,);
B(B_VARIN,,MXaxwEnJoySigHG2,23,19,25,21,);
B(B_F,@OR-5,,25,14,30,21,00N0N);
B(B_VARIN,,LXauxWithHg2Joy,16,8,18,10,);
B(B_F,@AND-5,,18,4,23,11,NN);
L(31,7,31,16);
L(17,14,18,14);
L(23,14,24,14);
L(24,14,24,16);
L(17,10,17,14);
L(17,10,18,10);
L(16,11,17,11);
L(31,7,32,7);
L(24,16,25,16);
L(30,16,31,16);
L(23,6,32,6);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_F,@OR-2,,18,1,23,5,);
B(B_VARIN,,MXaxwEnJoySigLG,9,2,11,4,);
B(B_F,@AND-2,,11,1,16,5,);
B(B_F,@AND-2,,11,5,16,9,);
B(B_VARIN,,MXaxwPreJoySigLG,9,3,11,5,);
B(B_VAROUT,,MXaxwActive,23,2,25,4,);
B(B_VARIN,,MXaxwEnJoySigHG2,9,6,11,8,);
B(B_VARIN,,MXaxwPreJoySiHG2,9,7,11,9,);
L(17,4,17,7);
L(17,4,18,4);
L(16,7,17,7);
L(16,3,18,3);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_F,@OR-2,,11,1,16,5,);
B(B_VAROUT,,QTXlg2Winch,16,2,18,4,);
B(B_VARIN,,MXlg2Active,9,2,11,4,);
B(B_VARIN,,MXaxwActive,9,3,11,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 21 ;
        NETWORK_BODY
B(B_COMMENT,,hoisting cylinder,1,1,27,2,);
B(B_VARIN,,MXassemblyOperat,25,12,27,14,);
B(B_VARIN,,MXaxwPreJoySigLG,25,14,27,16,);
B(B_VARIN,,MXlg2Active,25,13,27,15,);
B(B_VARIN,,LXhocPumpZero,18,10,20,12,);
B(B_F,@AND-2,,20,8,25,12,);
B(B_FB,R_TRIG,R_TRIG5,11,7,18,10,);
B(B_VARIN,,ITXhoistCyl,9,8,11,10,);
B(B_FB,SR,SR6,34,3,39,7,);
B(B_F,@AND-3,,20,3,25,8,N);
B(B_VARIN,,MXhoCylPreJoySig,18,4,20,6,);
B(B_VARIN,,LXadHoistingCyl,18,5,20,7,);
B(B_VAROUT,,MXhoCylPreJoySig,39,4,41,6,);
B(B_VARIN,,LXadHoistingCyl,25,16,27,18,);
B(B_VARIN,,MXremContActive,25,17,27,19,);
B(B_VARIN,,MXhoCylEnJoySig,25,18,27,20,);
B(B_F,@OR-8,,27,10,32,20,0N000N0N);
B(B_VARIN,,MXaxwPreJoySiHG2,25,15,27,17,);
L(26,10,26,12);
L(33,6,33,12);
L(19,7,19,10);
L(19,10,20,10);
L(25,10,26,10);
L(33,6,34,6);
L(25,5,34,5);
L(19,7,20,7);
L(18,9,19,9);
L(26,12,27,12);
L(32,12,33,12);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_VAROUT,,QTXhoistCyl,17,3,19,5,);
B(B_VAROUT,,MXreleasHoistCyl,17,2,19,4,);
B(B_VARIN,,MXhoCylPreJoySig,9,2,11,4,);
B(B_F,@AND-2,,11,1,16,5,);
B(B_VARIN,,MXhoCylEnJoySig,9,3,11,5,);
L(16,3,17,3);
L(17,3,17,4);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 51 ;
        NETWORK_BODY
B(B_COMMENT,,stop lg by misfunction of the flap of the fall back support lg2,1,1,27,2,);
B(B_VARIN,,MDlmlAngleBoom,9,7,11,9,);
B(B_F,@LT-2,,11,6,16,10,);
B(B_VARIN,,18.0,9,8,11,10,);
B(B_VARIN,,MXanglSenErrBoom,15,4,17,6,);
B(B_VARIN,,MXlmlFix_LuffJib,16,3,18,5,);
B(B_VARIN,,MDlmlAngleBoom,10,14,12,16,);
B(B_VARIN,,45.0,10,15,12,17,);
B(B_VARIN,,MXlmlFix_LuffJib,16,17,18,19,);
B(B_F,@GE-2,,12,13,17,17,);
B(B_FB,MsgRealReal,Message2,27,16,36,23,);
B(B_VARIN,,323,22,17,24,19,);
B(B_FB,MsgRealReal,Message5,27,40,36,47,);
B(B_FB,TON,TON1,31,4,36,8,);
B(B_VARIN,,T#0.25s,29,6,31,8,);
B(B_FB,MsgRealReal,Message1,44,3,53,10,);
B(B_VARIN,,324,42,4,44,6,);
B(B_VARIN,,MSG_INFO,42,6,44,8,);
B(B_VARIN,,MDlmlAngleLufJib,22,21,24,23,);
B(B_VARIN,,MDlmlAngleBoom,22,20,24,22,);
B(B_F,@AND-2,,18,41,23,45,0N);
B(B_F,sel,,18,45,23,50,);
B(B_VARIN,,1.0,16,48,18,50,);
B(B_VARIN,,0.0,16,47,18,49,);
B(B_VARIN,,MXminEngineSpeed,16,46,18,48,);
B(B_VARIN,,IXlg2UpperLimOk,16,43,18,45,);
B(B_VARIN,,MXlmlLuffJibEnab,16,42,18,44,);
B(B_VARIN,,290,21,39,23,41,);
B(B_F,@AND-5,,19,4,24,11,0N);
B(B_VARIN,,IXlg2FlapIsOut,16,11,18,13,);
B(B_F,@AND-4,,19,11,24,17,0N);
B(B_VAROUT,,MXlgStopUpByFlap,32,11,34,13,);
B(B_F,@OR-2,,27,10,32,14,);
B(B_VARIN,,MXboomWithFlap,15,10,17,12,);
B(B_VARIN,,MSG_INFO,24,19,26,21,);
B(B_FB,MsgRealReal,Message4,27,32,36,39,0N);
B(B_VARIN,,704,21,33,23,35,);
B(B_VARIN,,IXlg2LowerLimOk,21,34,23,36,);
B(B_FB,MsgRealReal,Message3,27,24,36,31,0N);
B(B_VARIN,,703,21,25,23,27,);
B(B_VARIN,,IXlg2UpperLimOk,21,26,23,28,);
L(18,9,19,9);
L(16,8,19,8);
L(17,5,17,7);
L(17,7,19,7);
L(18,4,18,6);
L(18,16,18,18);
L(18,16,19,16);
L(17,15,19,15);
L(18,9,18,14);
L(26,6,26,12);
L(24,18,27,18);
L(26,13,26,19);
L(26,19,27,19);
L(26,44,27,44);
L(24,45,27,45);
L(26,20,26,44);
L(26,20,27,20);
L(23,42,27,42);
L(24,22,24,45);
L(23,43,27,43);
L(36,6,44,6);
L(24,22,27,22);
L(24,21,27,21);
L(24,46,27,46);
L(24,46,24,47);
L(23,47,24,47);
L(23,40,23,42);
L(18,6,19,6);
L(24,6,31,6);
L(18,14,19,14);
L(26,12,27,12);
L(24,13,27,13);
L(17,11,19,11);
L(19,10,19,13);
L(26,36,27,36);
L(23,34,27,34);
L(23,35,27,35);
L(26,28,27,28);
L(23,26,27,26);
L(23,27,27,27);
L(24,30,27,30);
L(24,38,27,38);
L(25,37,27,37);
L(25,29,27,29);
L(25,21,25,37);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 16 ;
        NETWORK_BODY
B(B_F,@AND-3,,19,5,24,10,00N);
B(B_F,@LT-2,,11,5,16,9,);
B(B_VARIN,,MDlmlAngleBoom,9,6,11,8,);
B(B_VARIN,,10.0,9,7,11,9,);
B(B_VARIN,,MXminEngineSpeed,15,10,17,12,);
B(B_VAROUT,,MXlgStopDnByFlap,34,4,36,6,);
B(B_VARIN,,IXlg2UpperLimOk,16,13,18,15,);
B(B_F,@AND-4,,28,9,33,15,000N);
B(B_VARIN,,MXanglSenErrBoom,25,1,27,3,);
B(B_VARIN,,MSG_ERROR,46,10,48,12,);
B(B_FB,MsgRealReal,Message6,48,7,57,14,);
B(B_VARIN,,320,46,8,48,10,);
B(B_F,@OR-2,,35,8,40,12,);
B(B_F,@AND-4,,28,3,33,9,N);
B(B_VARIN,,MXlmlFix_LuffJib,24,2,26,4,);
B(B_VARIN,,MXboomWithFlap,23,3,25,5,);
L(34,5,34,10);
L(16,7,19,7);
L(17,8,19,8);
L(18,9,18,14);
L(26,6,28,6);
L(26,12,28,12);
L(18,14,28,14);
L(27,11,28,11);
L(33,11,35,11);
L(27,2,27,11);
L(26,3,26,12);
L(34,10,35,10);
L(40,10,48,10);
L(18,9,19,9);
L(17,8,17,11);
L(27,5,28,5);
L(33,5,34,5);
L(24,7,28,7);
L(25,4,25,13);
L(25,13,28,13);
L(25,8,28,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 16 ;
        NETWORK_BODY
B(B_COMMENT,,pressure limit at lg2~ hoisting cyl.~ leader winch~ luffing jib (mode 4),1,1,27,2,);
B(B_F,@AND-2,,11,11,16,15,);
B(B_VARIN,,MXaxwActive,9,12,11,14,);
B(B_VARIN,,MXenabHangLeader,9,13,11,15,);
B(B_F,@AND-2,,25,3,30,7,);
B(B_VAROUT,,QXlg2PressLimitH,30,4,32,6,);
B(B_VARIN,,MXminEngineSpeed,23,4,25,6,);
B(B_VARIN,,MXreleasHoistCyl,16,8,18,10,);
B(B_VARIN,,MXlmlLuffJibEnab,16,7,18,9,);
B(B_F,@OR-4,,18,6,23,12,);
B(B_VARIN,,MXextPressLimLg2,16,9,18,11,);
B(B_COMMENT,,low pressure for lg2 as auxiliary winch orø^high pressure for lg2,30,8,47,10,);
L(16,13,17,13);
L(17,11,17,13);
L(24,6,24,8);
L(24,6,25,6);
L(17,11,18,11);
L(23,8,24,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_COMMENT,,limit switch auxilliary winch ,1,1,27,2,);
B(B_VARIN,,IXlg2UpperLimOk,9,4,11,6,);
B(B_VARIN,,MXlimitSwBridged,9,5,11,7,);
B(B_VAROUT,,MXaxwUpLimOk,16,4,18,6,);
B(B_COMMENT,,aux. winch = using lg2 as aux. winch,28,1,54,2,);
B(B_VARIN,,LXauxWinch,9,6,11,8,);
B(B_F,@OR-3,,11,3,16,8,00N);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_VARIN,,IXlg2LowerLimOk,9,2,11,4,);
B(B_VARIN,,MXlimitSwBridged,9,3,11,5,);
B(B_VAROUT,,MXaxwLoLimOk,16,2,18,4,);
B(B_VARIN,,LXauxWinch,9,4,11,6,);
B(B_F,@OR-3,,11,1,16,6,00N);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_COMMENT,,exit program when lg 2 not active or not enabled,1,1,27,2,);
B(B_RETURN,,,16,4,18,6,);
B(B_VARIN,,MXlg2Active,9,4,11,6,);
B(B_VARIN,,LXlg2Brake,9,5,11,7,);
B(B_VARIN,,MXaxwActive,9,6,11,8,);
B(B_F,@AND-6,,11,3,16,11,NNNNNN);
B(B_VARIN,,QXreleasHoistCyl,9,9,11,11,);
B(B_VARIN,,MXreleasHoistCyl,9,8,11,10,);
B(B_VARIN,,LXaxwBrake,9,7,11,9,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 25 ;
        NETWORK_BODY
B(B_VARIN,,0.0,23,14,25,16,);
B(B_F,@GT-2,,25,16,30,20,);
B(B_F,@LT-2,,25,20,30,24,);
B(B_VARIN,,0.0,23,18,25,20,);
B(B_VARIN,,0.0,23,22,25,24,);
B(B_VAROUT,,MXlg2AnalSigNeg,30,21,32,23,);
B(B_VAROUT,,MXlg2AnalSigPos,30,17,32,19,);
B(B_VAROUT,,LDlg2AnalSignal,30,12,32,14,);
B(B_F,@AND-2,,11,7,16,11,0N);
B(B_F,@OR-2,,18,6,23,10,);
B(B_F,@AND-2,,11,3,16,7,0N);
B(B_VARIN,,MXlg2LocalStopDn,9,8,11,10,);
B(B_VARIN,,MXlg2LocalStopUp,9,4,11,6,);
B(B_VARIN,,MXlg2AnalSigNeg,9,5,11,7,);
B(B_VARIN,,MXlg2AnalSigPos,9,9,11,11,);
B(B_COMMENT,,analog signal selector and stop lg 2,1,1,27,2,);
B(B_F,sel,,25,11,30,16,);
B(B_F,sel,,16,12,21,17,);
B(B_VARIN,,MXlg2EnJoySigHG2,14,11,16,13,);
B(B_VARIN,,MDlg2JoySigHG2,14,18,16,20,);
B(B_F,sel,,11,13,16,18,);
B(B_VARIN,,MDlg2JoySigSG,9,16,11,18,);
B(B_VARIN,,MXlg2EnJoySigSG,9,14,11,16,);
B(B_VARIN,,MDlg2JoySigLG,9,15,11,17,);
L(23,8,24,8);
L(24,8,24,13);
L(16,9,18,9);
L(16,5,17,5);
L(17,5,17,8);
L(17,8,18,8);
L(22,22,25,22);
L(24,13,25,13);
L(22,14,22,22);
L(22,18,25,18);
L(21,14,25,14);
L(16,12,16,14);
L(16,16,16,19);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 25 ;
        NETWORK_BODY
B(B_COMMENT,,analog signal selector and stop auxiliary winch,1,1,27,2,);
B(B_VARIN,,0.0,28,14,30,16,);
B(B_F,@GT-2,,30,16,35,20,);
B(B_F,@LT-2,,30,20,35,24,);
B(B_VARIN,,0.0,28,18,30,20,);
B(B_VARIN,,0.0,28,22,30,24,);
B(B_VAROUT,,MXaxwAnalSigNeg,35,21,37,23,);
B(B_VAROUT,,MXaxwAnalSigPos,35,17,37,19,);
B(B_VAROUT,,LDaxwAnalSignal,35,12,37,14,);
B(B_F,@AND-2,,16,7,21,11,0N);
B(B_F,@OR-2,,23,6,28,10,);
B(B_F,@AND-2,,16,3,21,7,0N);
B(B_VARIN,,LXaxwLocalStopDn,14,8,16,10,);
B(B_VARIN,,LXaxwLocalStopUp,14,4,16,6,);
B(B_VARIN,,MXaxwAnalSigNeg,14,5,16,7,);
B(B_VARIN,,MXaxwAnalSigPos,14,9,16,11,);
B(B_F,sel,,30,11,35,16,);
B(B_F,sel,,21,12,26,17,);
B(B_VARIN,,MXlg2ExtAnalSign,19,11,21,13,);
B(B_F,sel,,16,13,21,18,);
B(B_VARIN,,MXaxwEnJoySigHG2,14,12,16,14,);
B(B_F,sel,,11,14,16,19,);
B(B_VARIN,,MDaxwJoySigLG,9,17,11,19,);
B(B_VARIN,,MXaxwEnJoySigLG,9,15,11,17,);
B(B_VARIN,,MDaxwJoySigHG2,14,19,16,21,);
B(B_VARIN,,MDlg2ExtAnalSign,19,20,21,22,);
B(B_VARIN,,0.0,9,16,11,18,);
L(28,8,29,8);
L(29,8,29,13);
L(21,9,23,9);
L(21,5,22,5);
L(22,5,22,8);
L(22,8,23,8);
L(27,22,30,22);
L(29,13,30,13);
L(27,14,27,22);
L(27,18,30,18);
L(26,14,30,14);
L(21,12,21,14);
L(16,13,16,15);
L(16,17,16,20);
L(21,16,21,21);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 24 ;
        NETWORK_BODY
B(B_VARIN,,0.0,23,13,25,15,);
B(B_F,@GT-2,,25,15,30,19,);
B(B_F,@LT-2,,25,19,30,23,);
B(B_VARIN,,0.0,23,17,25,19,);
B(B_VARIN,,0.0,23,21,25,23,);
B(B_VAROUT,,MXhocAnalSigNeg,30,20,32,22,);
B(B_VAROUT,,MXhocAnalSigPos,30,16,32,18,);
B(B_VAROUT,,LDhocAnalSignal,30,11,32,13,);
B(B_F,@AND-2,,11,7,16,11,0N);
B(B_F,@OR-2,,18,6,23,10,);
B(B_F,@AND-2,,11,3,16,7,0N);
B(B_VARIN,,LXhocLocalStopDn,9,8,11,10,);
B(B_VARIN,,LXhocLocalStopUp,9,4,11,6,);
B(B_VARIN,,MXhocAnalSigNeg,9,5,11,7,);
B(B_VARIN,,MXhocAnalSigPos,9,9,11,11,);
B(B_COMMENT,,analog signal selector and stop hoisting cylinder,1,1,27,2,);
B(B_F,sel,,25,10,30,15,);
B(B_F,sel,,16,11,21,16,);
B(B_VARIN,,MDhoCylJoySignal,14,14,16,16,);
B(B_VARIN,,MXhoCylEnJoySig,14,12,16,14,);
B(B_VARIN,,0.0,14,13,16,15,);
L(23,8,24,8);
L(24,8,24,12);
L(16,9,18,9);
L(16,5,17,5);
L(17,5,17,8);
L(17,8,18,8);
L(22,21,25,21);
L(24,12,25,12);
L(22,13,22,21);
L(22,17,25,17);
L(21,13,25,13);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 27 ;
        NETWORK_BODY
B(B_COMMENT,,digital logic lg 2,1,1,27,2,);
B(B_VARIN,,MXlg2AnalSigNeg,28,5,30,7,);
B(B_VARIN,,MXstopAllFunctio,28,8,30,10,);
B(B_VAROUT,,MXlg2LocalStopUp,51,6,53,8,);
B(B_VAROUT,,MXlg2LocalStopDn,51,7,53,9,);
B(B_VARIN,,MXlg2AnalSigPos,28,4,30,6,);
B(B_COMMENT,,LGprog,52,10,56,11,);
B(B_VAROUT,,MXlg2EnPowStage,51,5,53,7,);
B(B_VARIN,,MXlg2PumpZero,28,13,30,15,);
B(B_FB,LGdigLogPartV013,digital1,30,3,51,17,);
B(B_VARIN,,FALSE,28,14,30,16,);
B(B_VARIN,,MXlg2GlobalStopD,28,7,30,9,);
B(B_VARIN,,MXlg2GlobalStopU,28,6,30,8,);
B(B_VAROUT,,LXlg2Brake,51,4,53,6,);
B(B_F,@AND-3,,16,18,21,23,0NN);
B(B_VARIN,,MXlgStopUpByFlap,14,20,16,22,);
B(B_VARIN,,IXlg2UpperLimOk,14,19,16,21,);
B(B_F,@AND-2,,11,22,16,26,0N);
B(B_VARIN,,MXlmlPressSenErr,9,23,11,25,);
B(B_VARIN,,MXassemblyOperat,9,24,11,26,);
B(B_VARIN,,MXlmlStop,13,6,15,8,);
B(B_VARIN,,MXlmlBridged,12,7,14,9,);
B(B_F,@AND-2,,15,5,20,9,0N);
B(B_F,@AND-2,,15,9,20,13,N);
B(B_VARIN,,MXlmlStopBackwar,13,11,15,13,);
B(B_VARIN,,IXlg2LowerLimOk,13,14,15,16,);
B(B_F,@AND-3,,15,13,20,18,);
B(B_VARIN,,MXhg2UpLimBridge,13,16,15,18,);
B(B_VARIN,,MXhg1UpLimBridge,13,15,15,17,);
L(21,12,21,15);
L(21,12,30,12);
L(22,13,22,20);
L(22,13,30,13);
L(21,10,30,10);
L(21,7,21,10);
L(16,22,16,24);
L(21,20,22,20);
L(20,7,21,7);
L(20,11,30,11);
L(20,15,21,15);
L(14,8,15,8);
L(14,8,14,11);
L(14,11,15,11);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 18 ;
        NETWORK_BODY
B(B_COMMENT,,digital logic auxiliary winch,1,1,27,2,);
B(B_VARIN,,MXaxwAnalSigNeg,26,5,28,7,);
B(B_VARIN,,MXstopAllFunctio,26,8,28,10,);
B(B_VAROUT,,LXaxwLocalStopUp,49,6,51,8,);
B(B_VAROUT,,LXaxwLocalStopDn,49,7,51,9,);
B(B_VARIN,,MXaxwAnalSigPos,26,4,28,6,);
B(B_COMMENT,,LGprog,50,10,54,11,);
B(B_VAROUT,,MXaxwEnPowStage,49,5,51,7,);
B(B_VARIN,,LXaxwPumpZero,26,13,28,15,);
B(B_VARIN,,MXlmlStop,10,9,12,11,);
B(B_VARIN,,MXlmlBridged,9,10,11,12,);
B(B_FB,LGdigLogPartV013,digital2,28,3,49,17,);
B(B_VARIN,,TRUE,26,14,28,16,);
B(B_F,@AND-2,,12,8,17,12,0N);
B(B_F,@AND-2,,12,12,17,16,N);
B(B_VARIN,,MXlmlStopBackwar,10,14,12,16,);
B(B_VARIN,,MXaxwGlobalStopD,26,7,28,9,);
B(B_VARIN,,MXaxwGlobalStopU,26,6,28,8,);
B(B_VARIN,,MXaxwUpLimOk,26,12,28,14,);
B(B_VARIN,,MXaxwLoLimOk,26,11,28,13,);
B(B_VAROUT,,LXaxwBrake,49,4,51,6,);
L(11,11,12,11);
L(11,11,11,14);
L(18,11,18,14);
L(18,11,28,11);
L(17,10,28,10);
L(11,14,12,14);
L(17,14,18,14);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 18 ;
        NETWORK_BODY
B(B_COMMENT,,digital logic hoisting cylinder,1,1,27,2,);
B(B_VARIN,,MXhocAnalSigNeg,26,5,28,7,);
B(B_VARIN,,MXstopAllFunctio,26,8,28,10,);
B(B_VAROUT,,LXhocLocalStopUp,49,6,51,8,);
B(B_VAROUT,,LXhocLocalStopDn,49,7,51,9,);
B(B_VARIN,,MXhocAnalSigPos,26,4,28,6,);
B(B_COMMENT,,LGprog,50,10,54,11,);
B(B_VAROUT,,MXhocEnPowStage,49,5,51,7,);
B(B_VARIN,,LXhocPumpZero,26,13,28,15,);
B(B_VARIN,,MXlmlStop,10,9,12,11,);
B(B_VARIN,,MXlmlBridged,9,10,11,12,);
B(B_FB,LGdigLogPartV013,digital3,28,3,49,17,);
B(B_VARIN,,TRUE,26,14,28,16,);
B(B_F,@AND-2,,12,8,17,12,0N);
B(B_F,@AND-2,,12,12,17,16,N);
B(B_VARIN,,MXlmlStopBackwar,10,14,12,16,);
B(B_VARIN,,FALSE,26,7,28,9,);
B(B_VARIN,,FALSE,26,6,28,8,);
B(B_VARIN,,TRUE,26,12,28,14,);
B(B_VARIN,,TRUE,26,11,28,13,);
B(B_VAROUT,,QXreleasHoistCyl,49,4,51,6,);
L(11,11,12,11);
L(11,11,11,14);
L(18,11,18,14);
L(18,11,28,11);
L(17,10,28,10);
L(11,14,12,14);
L(17,14,18,14);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_COMMENT,,release brake ,1,1,27,2,);
B(B_F,@OR-2,,11,3,16,7,);
B(B_VARIN,,LXlg2Brake,9,4,11,6,);
B(B_VARIN,,LXaxwBrake,9,5,11,7,);
B(B_VAROUT,,QXlg2Brake,16,4,18,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 16 ;
        NETWORK_BODY
B(B_COMMENT,,signal reduction lifting,1,1,27,2,);
B(B_F,sel,,20,10,25,15,);
B(B_VARIN,,MDlmlSpeedRed_Lg,18,13,20,15,);
B(B_F,SigMin4,,27,2,34,8,);
B(B_VARIN,,1.0,18,12,20,14,);
B(B_VAROUT,,LDredLifting,34,3,36,5,);
B(B_F,sel,,20,5,25,10,);
B(B_VARIN,,MDlmlSpeedRed_Lg,18,8,20,10,);
B(B_VARIN,,1.0,18,7,20,9,);
B(B_F,@AND-2,,11,10,16,14,);
B(B_VARIN,,MXlmlRedLoaIncFu,9,12,11,14,);
B(B_VARIN,,MXaxwActive,9,11,11,13,);
B(B_VARIN,,1.0,25,3,27,5,);
B(B_VARIN,,MXlmlRedAllFunct,18,6,20,8,);
L(25,12,26,12);
L(26,7,26,12);
L(25,6,25,7);
L(26,7,27,7);
L(25,6,27,6);
L(16,12,20,12);
L(27,4,27,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 17 ;
        NETWORK_BODY
B(B_F,sel,,20,11,25,16,);
B(B_VARIN,,MDlmlSpeedRed_Lg,18,14,20,16,);
B(B_F,SigMin4,,27,3,34,9,);
B(B_VARIN,,1.0,18,13,20,15,);
B(B_VAROUT,,LDredLowering,34,4,36,6,);
B(B_F,sel,,20,6,25,11,);
B(B_VARIN,,MDlmlSpeedRed_Lg,18,9,20,11,);
B(B_VARIN,,1.0,18,8,20,10,);
B(B_F,@AND-2,,11,11,16,15,);
B(B_VARIN,,MXlmlRedLoaIncFu,9,13,11,15,);
B(B_VARIN,,MXlg2Active,9,12,11,14,);
B(B_COMMENT,,signal reduction lowering,1,1,27,2,);
B(B_VARIN,,1.0,25,4,27,6,);
B(B_VARIN,,MXlmlRedAllFunct,18,7,20,9,);
L(25,13,26,13);
L(26,8,26,13);
L(25,7,25,8);
L(26,8,27,8);
L(25,7,27,7);
L(16,13,20,13);
L(27,5,27,6);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 15 ;
        NETWORK_BODY
B(B_COMMENT,,rapid stop lg2,1,1,27,2,);
B(B_F,sel,,20,9,25,14,);
B(B_F,@LT-2,,13,7,18,11,);
B(B_VARIN,,100.0,9,12,11,14,);
B(B_VARIN,,MXlg2LocalStopUp,19,4,21,6,);
B(B_VARIN,,MXlg2LocalStopDn,19,5,21,7,);
B(B_F,@OR-2,,21,3,26,7,);
B(B_VAROUT,,LDlg2IntTimeUp,33,8,35,10,);
B(B_F,sel,,28,7,33,12,);
B(B_VAROUT,,LDlg2IntTimeDown,33,9,35,11,);
B(B_VARIN,,MDlg2IntTime,10,6,12,8,);
L(11,10,13,10);
L(11,10,11,13);
L(12,12,20,12);
L(11,13,20,13);
L(19,9,19,11);
L(19,11,20,11);
L(12,9,13,9);
L(18,9,19,9);
L(26,7,26,10);
L(26,10,27,10);
L(25,11,27,11);
L(12,7,12,12);
L(26,5,27,5);
L(27,5,27,9);
L(27,10,28,10);
L(27,11,28,11);
L(27,9,28,9);
L(33,9,33,10);
L(12,7,26,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 19 ;
        NETWORK_BODY
B(B_COMMENT,,analog part lg2,1,1,27,2,);
B(B_COMMENT,,bei 1500 U/min haben die meisten Motorenø^schon das maximale Moment ,1,3,19,5,);
B(B_VAROUT,,MXlg2PumpZero,34,8,36,10,);
B(B_VARIN,,MDratedEngSpeed,9,8,11,10,);
B(B_VARIN,,CDengSpPumpRed,9,9,11,11,);
B(B_VARIN,,LDlg2AnalSignal,9,7,11,9,);
B(B_VAROUT,,MDlg2PumpSignal,34,7,36,9,);
B(B_FB,LGanalogPartV013,analog1,11,6,34,18,);
B(B_VARIN,,LDlg2IntTimeUp,9,10,11,12,);
B(B_VARIN,,LDlg2IntTimeDown,9,11,11,13,);
B(B_VARIN,,LDredLifting,9,12,11,14,);
B(B_VARIN,,LDredLowering,9,13,11,15,);
B(B_VARIN,,MXlgSpeed1,9,14,11,16,);
B(B_VARIN,,MXlgSpeed2,9,15,11,17,);
B(B_VARIN,,MXlgSpeed3,9,16,11,18,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 23 ;
        NETWORK_BODY
B(B_COMMENT,,rapid stop auxiliary winch ,1,1,27,2,);
B(B_F,sel,,20,9,25,14,);
B(B_F,@LT-2,,13,7,18,11,);
B(B_F,sel,,20,17,25,22,);
B(B_F,@LT-2,,13,15,18,19,);
B(B_VARIN,,100.0,9,12,11,14,);
B(B_VARIN,,100.0,9,20,11,22,);
B(B_VARIN,,CDaxwIntTimeUp,10,6,12,8,);
B(B_VARIN,,CDaxwIntTimeDn,10,14,12,16,);
B(B_F,@OR-2,,21,3,26,7,);
B(B_VARIN,,LXaxwLocalStopUp,19,4,21,6,);
B(B_VARIN,,LXaxwLocalStopDn,19,5,21,7,);
B(B_VAROUT,,LDaxwIntTimeUp,32,8,34,10,);
B(B_F,sel,,27,7,32,12,);
B(B_F,sel,,27,15,32,20,);
B(B_VAROUT,,LDaxwIntTimeDown,32,16,34,18,);
L(11,10,13,10);
L(11,10,11,13);
L(12,12,20,12);
L(11,13,20,13);
L(19,9,19,11);
L(19,11,20,11);
L(12,9,13,9);
L(18,9,19,9);
L(25,10,27,10);
L(25,11,27,11);
L(12,7,12,12);
L(11,18,13,18);
L(11,18,11,21);
L(12,20,20,20);
L(11,21,20,21);
L(19,17,19,19);
L(19,19,20,19);
L(12,17,13,17);
L(18,17,19,17);
L(12,15,12,20);
L(12,7,25,7);
L(12,15,25,15);
L(25,7,25,10);
L(25,15,25,18);
L(26,5,26,17);
L(26,9,27,9);
L(26,17,27,17);
L(25,19,27,19);
L(25,18,27,18);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 20 ;
        NETWORK_BODY
B(B_COMMENT,,analog part auxiliary winch ,1,1,27,2,);
B(B_COMMENT,,bei 1500 U/min haben die meisten Motorenø^schon das maximale Moment ,1,3,19,5,);
B(B_VAROUT,,LXaxwPumpZero,35,9,37,11,);
B(B_VARIN,,MDratedEngSpeed,10,9,12,11,);
B(B_VARIN,,CDengSpPumpRed,10,10,12,12,);
B(B_VARIN,,LDaxwAnalSignal,10,8,12,10,);
B(B_VAROUT,,MDaxwPumpSignal,35,8,37,10,);
B(B_FB,LGanalogPartV013,analog2,12,7,35,19,);
B(B_VARIN,,LDaxwIntTimeUp,10,11,12,13,);
B(B_VARIN,,LDaxwIntTimeDown,10,12,12,14,);
B(B_VARIN,,LDredLifting,10,13,12,15,);
B(B_VARIN,,LDredLowering,10,14,12,16,);
B(B_VARIN,,TRUE,10,17,12,19,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 20 ;
        NETWORK_BODY
B(B_COMMENT,,analog part hoisting cylinder,1,1,27,2,);
B(B_COMMENT,,bei 1500 U/min haben die meisten Motorenø^schon das maximale Moment ,1,3,19,5,);
B(B_VAROUT,,LXhocPumpZero,35,9,37,11,);
B(B_VARIN,,MDratedEngSpeed,10,9,12,11,);
B(B_VARIN,,CDengSpPumpRed,10,10,12,12,);
B(B_VARIN,,LDhocAnalSignal,10,8,12,10,);
B(B_FB,LGanalogPartV013,analog3,12,7,35,19,);
B(B_VARIN,,100.0,10,11,12,13,);
B(B_VARIN,,100.0,10,12,12,14,);
B(B_VARIN,,1.0,10,13,12,15,);
B(B_VARIN,,1.0,10,14,12,16,);
B(B_VARIN,,TRUE,10,17,12,19,);
B(B_VAROUT,,MDhocPumpSignal,35,8,37,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_F,SigMax4,,12,3,19,9,);
B(B_VARIN,,MDhocPumpSignal,10,6,12,8,);
B(B_VARIN,,MDaxwPumpSignal,10,5,12,7,);
B(B_VARIN,,MDlg2PumpSignal,10,4,12,6,);
B(B_VAROUT,,LDpumpSignal,19,4,21,6,);
B(B_COMMENT,,pump signal ,2,1,28,2,);
L(12,7,12,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 14 ;
        NETWORK_BODY
B(B_COMMENT,,power stage lg 2 lifting,1,1,27,2,);
B(B_VARIN,,LDpumpSignal,15,7,17,9,);
B(B_FB,PowerStage,PowerStage1,17,5,26,13,);
B(B_VAROUT,,QWlg2Lifting,26,6,28,8,);
B(B_VARIN,,CWlg2minCurPumUp,15,10,17,12,);
B(B_VARIN,,CWlg2maxCurPumUp,15,11,17,13,);
B(B_VARIN,,0.0,15,8,17,10,);
B(B_VARIN,,100.0,15,9,17,11,);
B(B_F,@OR-3,,12,3,17,8,);
B(B_VARIN,,MXlg2EnPowStage,10,4,12,6,);
B(B_VARIN,,MXaxwEnPowStage,10,5,12,7,);
B(B_VARIN,,MXhocEnPowStage,10,6,12,8,);
L(17,5,17,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_COMMENT,,power stage lg 2 lowering,1,1,27,2,);
B(B_VARIN,,LDpumpSignal,15,7,17,9,);
B(B_FB,PowerStage,PowerStage2,17,5,26,13,);
B(B_VAROUT,,QWlg2Lowering,26,6,28,8,);
B(B_VARIN,,CWlg2minCurPumDn,15,10,17,12,);
B(B_VARIN,,CWlg2maxCurPumDn,15,11,17,13,);
B(B_VARIN,,0.0,15,8,17,10,);
B(B_VARIN,,-100.0,15,9,17,11,);
B(B_F,@OR-3,,12,3,17,8,);
B(B_VARIN,,MXlg2EnPowStage,10,4,12,6,);
B(B_VARIN,,MXaxwEnPowStage,10,5,12,7,);
B(B_VARIN,,MXhocEnPowStage,10,6,12,8,);
L(17,5,17,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,exit program,1,1,27,2,);
B(B_VARIN,,TRUE,10,3,12,5,);
B(B_RETURN,,,12,3,14,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL := init: ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_COMMENT,,exit program at the top when lg 2 not enabled,1,1,27,2,);
B(B_VARIN,,TRUE,10,3,12,5,);
B(B_VAROUT,,LXinitOk,12,3,14,5,);
B(B_VAROUT,,LXhocPumpZero,12,4,14,6,);
B(B_VAROUT,,LXaxwPumpZero,12,5,14,7,);
B(B_VAROUT,,MXlg2PumpZero,12,6,14,8,);
L(12,4,12,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_VARIN,,50.0,9,3,11,5,);
B(B_VAROUT,,MDlg2IntTime,11,3,13,5,);
B(B_COMMENT,,set integration time,1,1,27,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value minimum current pump up,1,1,27,2,);
B(B_FB,CorrValue_UInt,CorrValue_UInt1,12,4,24,10,);
B(B_VARIN,,350,10,5,12,7,);
B(B_VARIN,,200,10,6,12,8,);
B(B_VARIN,,450,10,7,12,9,);
B(B_VARIN,,CWlg2minCurPumUp,10,8,12,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value minimum current pump down,1,1,27,2,);
B(B_FB,CorrValue_UInt,CorrValue_UInt2,11,4,23,10,);
B(B_VARIN,,350,9,5,11,7,);
B(B_VARIN,,200,9,6,11,8,);
B(B_VARIN,,450,9,7,11,9,);
B(B_VARIN,,CWlg2minCurPumDn,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value maximum current pump up,1,1,27,2,);
B(B_FB,CorrValue_UInt,CorrValue_UInt3,11,4,23,10,);
B(B_VARIN,,730,9,5,11,7,);
B(B_VARIN,,450,9,6,11,8,);
B(B_VARIN,,800,9,7,11,9,);
B(B_VARIN,,CWlg2maxCurPumUp,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value maximum current pump down,1,1,27,2,);
B(B_FB,CorrValue_UInt,CorrValue_UInt4,11,4,23,10,);
B(B_VARIN,,730,9,5,11,7,);
B(B_VARIN,,450,9,6,11,8,);
B(B_VARIN,,800,9,7,11,9,);
B(B_VARIN,,CWlg2maxCurPumDn,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_COMMENT,,correction value integrator time up,1,1,27,2,);
B(B_FB,CorrValue_Real,CorrValue_Real1,11,3,23,9,);
B(B_VARIN,,CDaxwIntTimeUp,9,7,11,9,);
B(B_VARIN,,50.0,9,4,11,6,);
B(B_VARIN,,10.0,9,5,11,7,);
B(B_VARIN,,300.0,9,6,11,8,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value integrator time down,1,1,27,2,);
B(B_FB,CorrValue_Real,CorrValue_Real2,11,4,23,10,);
B(B_VARIN,,CDaxwIntTimeDn,9,8,11,10,);
B(B_VARIN,,50.0,9,5,11,7,);
B(B_VARIN,,10.0,9,6,11,8,);
B(B_VARIN,,300.0,9,7,11,9,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_FB,CorrValue_Bool,CorrValue_Bool1,11,4,23,10,);
B(B_VARIN,,CXauxWinch,9,8,11,10,);
B(B_VARIN,,FALSE,9,6,11,8,);
B(B_VARIN,,TRUE,9,7,11,9,);
B(B_VARIN,,FALSE,9,5,11,7,);
B(B_COMMENT,,additional device auxilliary winch ,1,1,27,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_FB,CorrValue_Bool,CorrValue_Bool2,11,4,23,10,);
B(B_VARIN,,CXadHoistingCyl,9,8,11,10,);
B(B_VARIN,,FALSE,9,6,11,8,);
B(B_VARIN,,TRUE,9,7,11,9,);
B(B_VARIN,,FALSE,9,5,11,7,);
B(B_COMMENT,,additional device hoisting cylinder with lg2 sektion,1,1,27,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_FB,CorrValue_Bool,CorrValue_Bool3,11,4,23,10,);
B(B_VARIN,,CXauxWithHg2Joy,9,8,11,10,);
B(B_VARIN,,FALSE,9,6,11,8,);
B(B_VARIN,,TRUE,9,7,11,9,);
B(B_VARIN,,FALSE,9,5,11,7,);
B(B_COMMENT,,additional device hoisting cylinder with lg2 sektion,1,1,27,2,);
        END_NETWORK_BODY
    END_NET_WORK
END_BODY
END_PROGRAM

PROGRAM LGprogV090
(*name of author: Manfred Schapler
version: 1.0
date: 04/97
modification:*)
(*name of author: Manfred Schapler
date: 04/97
modification:*)
	VAR_EXTERNAL 
		ITXlgSpeedLevel: BOOL:=FALSE;
			(*preselection luffing gear speed level*)
		ITXaddWinch: BOOL:=FALSE;
			(*preselection additional/passenger winch *)
		IXentrySwiClosed: BOOL:=FALSE;
			(*entry switch closed*)
		IXlgUpperLimOk: BOOL:=FALSE;
			(*upper limit switch LG o.k.*)
		IXlgAFraLowLimOk: BOOL:=FALSE;
			(*lower limit switch main boom a-frame/ lg *)
		IXlgAFraUppLimOk: BOOL:=FALSE;
			(*upper limit switch main boom a-frame*)
		IXaddUpperLimOk: BOOL:=FALSE;
			(*add: additional/passenger winch upper limit switch  o.k.*)
		IXaddLowerLimOk: BOOL:=FALSE;
			(*add: additional/passenger winch lower limit switch  o.k.*)
		QXlgBrake: BOOL:=FALSE;
			(*LG brake*)
		QXadwBrake: BOOL:=FALSE;
			(*add winch brake / personal winch brake*)
		QTXlgSpeedLevel: BOOL:=FALSE;
			(*enable luffing gear speed level*)
		QTXaddWinch: BOOL:=FALSE;
			(*enable additional/passenger winch *)
		QWlgLifting: UINT:=0;
			(*LG pump lifting*)
		QWlgLowering: UINT:=0;
			(*LG lowering*)
		MXlgAnalSigPos: BOOL:=FALSE;
			(*lg analog signal positiv*)
		MXlgAnalSigNeg: BOOL:=FALSE;
			(*lg analog signal negativ*)
		MXstopAllFunctio: BOOL:=FALSE;
			(*stop all excavator functions*)
		MXlgLocStopRapU: BOOL:=FALSE;
			(*LG local stop rapid lifting*)
		MXlgLocStopRapD: BOOL:=FALSE;
			(*LG local stop rapid lowering*)
		MXlgGlobalStopUp: BOOL:=FALSE;
			(*lg global stop up*)
		MXlgGlobalStopDn: BOOL:=FALSE;
			(*lg global stop down*)
		MXadwActive: BOOL:=FALSE;
			(*additional winch active *)
		MXadwUpLimOk: BOOL:=FALSE;
			(*additional winch: upper limit switch o.k.*)
		MXadwLoLimOk: BOOL:=FALSE;
			(*auxiliary winch 1: lower limit switch o.k.*)
		MXlgEnPowStage: BOOL:=FALSE;
			(*LG enable power stage lifting or lowering*)
		MXlgAFraLowLimOk: BOOL:=FALSE;
			(*additional lower limit switch LG / A-frame o.k.*)
		MXaFrameCylPrese: BOOL:=FALSE;
			(*a frame cylinder preselcted*)
		MXlmlStop: BOOL:=FALSE;
			(*lml stop*)
		MXlmlStopBackwar: BOOL:=FALSE;
			(*lml stop backwards*)
		MXlimitSwBridged: BOOL:=FALSE;
			(*X23 limit switches bridged for assembly operation*)
		MXlgSpeed1: BOOL:=FALSE;
			(*LG speed 1*)
		MXlgSpeed2: BOOL:=FALSE;
			(*LG speed 2*)
		MXlgSpeed3: BOOL:=FALSE;
			(*LG speed 3*)
		MXhg1UpLimBridge: BOOL:=FALSE;
			(*upper limit switch brigde hoisting gear 1*)
		MXhg2UpLimBridge: BOOL:=FALSE;
			(*upper limit switch brigde hoisting gear 2*)
		MXlmlBridged: BOOL:=FALSE;
			(*lml bridged*)
		MXlmlRedLoaIncFu: BOOL:=FALSE;
			(*lml reduces all load increasing functions*)
		MXlmlRedAllFunct: BOOL:=FALSE;
			(*lml reduces all functions*)
		MXlg2PreJoySigLG: BOOL:=FALSE;
			(*lg2 preselect joystick signal (lg joystick)*)
		MXadwPreJoySig: BOOL:=FALSE;
			(*add.winch preselect joystick signal (lg joystick)*)
		MXadwEnJoySig: BOOL:=FALSE;
			(*add.winch enable joystick signal (lg joystick)*)
		MXadwAnalSigNeg: BOOL:=FALSE;
			(*add winch analog signal negativ*)
		MXadwAnalSigPos: BOOL:=FALSE;
			(*add winch analog signal positiv*)
		MXadwExtAnalSign: BOOL:=FALSE;
			(*additional winch external analog signal*)
		MXadwGlobalStopU: BOOL:=FALSE;
			(*add. winch global stop up*)
		MXadwGlobalStopD: BOOL:=FALSE;
			(*add. winch global stop down*)
		MXadwEnPowStage: BOOL:=FALSE;
			(*add winch enable power stage*)
		MDlgJoySignal: REAL:=0.0;
			(*LG joystick signal in +/-[%]*)
		MDlgPumpSignal: REAL:=0.0;
			(*LG analog signal pump in [%]*)
		MDlmlSpeedRed_Lg: REAL:=0.0;
			(*lml speed reduction value LG (lml changes 2010)*)
		MDlmlAngleBoom: REAL:=0.0;
			(*lml angle main boom in °*)
		MDratedEngSpeed: REAL:=0.0;
			(*rated engine speed in rpm*)
		MDlgIntTime: REAL:=0.0;
			(*luffing gear 1 integrator time down*)
		MDadwExtAnalSign: REAL:=0.0;
			(*additional winch external analog signal in [%]*)
		MDadwJoySig: REAL:=0.0;
			(*add. winch analog signal joystick hg2 +/-[%]*)
		MDadwPumpSignal: REAL:=0.0;
			(*add. winch analog signal pump in [%]*)
	END_VAR
	VAR_EXTERNAL CONSTANT
		MSG_INFO: UINT:=0;
	END_VAR
	VAR_EXTERNAL RETAIN
		MXlgSpeed1Memory: BOOL:=FALSE;
			(*lg speed 1 memory*)
		MXlgSpeed2Memory: BOOL:=FALSE;
			(*lg speed 2 memory*)
		MXlgSpeed3Memory: BOOL:=FALSE;
			(*lg speed 3 memory*)
	END_VAR
	VAR_EXTERNAL CONSTANT RETAIN
		CXaddWinch: BOOL:=FALSE;
			(*additional: auxilliary winch 1*)
		CXadLgLoweLimit: BOOL:=FALSE;
			(*additional device lower limit switch for LG*)
		CWlgminCurPumUp: UINT:=0;
			(*LG minimum current pump up*)
		CWlgminCurPumDn: UINT:=0;
			(*LG minimum current pump down*)
		CWlgmaxCurPumUp: UINT:=0;
			(*LG maximum current pump up*)
		CWlgmaxCurPumDn: UINT:=0;
			(*LG maximum current pump down*)
		CDadwIntTimeUp: REAL:=0.0;
			(*additional winch integrator time up*)
		CDadwIntTimeDn: REAL:=0.0;
			(*additional winch integrator time down*)
		CDadwLimitation: REAL:=0.0;
			(*additional winch limitation*)
		CDengSpPumpRed: REAL:=0.0;
			(*engine speed for pump reduction [U/min]*)
	END_VAR
	VAR 
		LXinitOk: BOOL:=FALSE;
			(*init completed*)
		LXstart: BOOL:=FALSE;
		LXpumpSignZero: BOOL:=FALSE;
			(*pump signal in zero*)
		LXadwWinPresel: BOOL:=FALSE;
		LXadwPumpZero: BOOL:=FALSE;
		LXadwLocalStopDn: BOOL:=FALSE;
		LXadwLocalStopUp: BOOL:=FALSE;
		LXadwBrake: BOOL:=FALSE;
		LDanalogSignal: REAL:=0.0;
			(*analog signal*)
		LDlgIntTimeUp: REAL:=0.0;
		LDlgIntTimeDown: REAL:=0.0;
		LDadwIntTimeUp: REAL:=0.0;
		LDadwIntTimeDown: REAL:=0.0;
		LDreduct: REAL:=0.0;
		LDredLifting: REAL:=0.0;
		LDredLowering: REAL:=0.0;
		LDadwAnalSignal: REAL:=0.0;
		LDpumpSignal: REAL:=0.0;
		CorrValue_Bool1: CorrValue_Bool;
		CorrValue_Bool2: CorrValue_Bool;
		CorrValue_UInt1: CorrValue_UInt;
		CorrValue_UInt2: CorrValue_UInt;
		CorrValue_UInt3: CorrValue_UInt;
		CorrValue_UInt4: CorrValue_UInt;
		CorrValue_Real1: CorrValue_Real;
		CorrValue_Real2: CorrValue_Real;
		CorrValue_Real3: CorrValue_Real;
		digital1: LGdigLogPartV013;
		digital2: LGdigLogPartV013;
		analog1: LGanalogPartV013;
		analog2: LGanalogPartV013;
		PowerStage1: PowerStage;
		PowerStage2: PowerStage;
		R_TRIG1: R_TRIG;
		SR1: SR;
		Message1: MsgRealReal;
		Message2: MsgRealReal;
		Message3: MsgRealReal;
	END_VAR
'FBD'
BODY
    WORKSPACE
        NETWORK_LIST_TYPE := NWTYPEFBD ;
        ACTIVE_NETWORK := 0 ;
    END_WORKSPACE
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_COMMENT,,init first time,1,1,27,2,);
B(B_VARIN,,LXinitOk,9,4,11,6,);
B(B_F,not,,11,3,16,6,);
B(B_JUMP,,init,16,4,18,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,protect correction value change while program activ,1,1,27,2,);
B(B_F,@OR-2,,11,3,16,7,NN);
B(B_VARIN,,LXstart,9,5,11,7,);
B(B_VARIN,,IXentrySwiClosed,9,4,11,6,);
B(B_F,sel,,18,5,23,10,);
B(B_VAROUT,,LXadwWinPresel,23,6,25,8,);
B(B_VARIN,,CXaddWinch,16,8,18,10,);
B(B_VARIN,,LXadwWinPresel,16,7,18,9,);
L(16,5,17,5);
L(17,7,18,7);
L(17,5,17,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VAROUT,,LXstart,11,1,13,3,);
B(B_VARIN,,TRUE,9,1,11,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 14 ;
        NETWORK_BODY
B(B_COMMENT,,enable additional winch,1,1,27,2,);
B(B_COMMENT,,add. winch =using lg (and aux. brake) as add. winch,27,1,53,2,);
B(B_VARIN,,LXadwWinPresel,23,10,25,12,);
B(B_VARIN,,MXlg2PreJoySigLG,23,11,25,13,);
B(B_FB,SR,SR1,32,3,37,7,);
B(B_VAROUT,,MXadwPreJoySig,37,4,39,6,);
B(B_F,@AND-2,,19,3,24,7,N);
B(B_F,@AND-2,,19,7,24,11,);
B(B_VARIN,,LXadwPumpZero,17,9,19,11,);
B(B_FB,R_TRIG,R_TRIG1,11,4,18,7,);
B(B_VARIN,,ITXaddWinch,9,5,11,7,);
B(B_VARIN,,MXadwPreJoySig,16,2,18,4,);
B(B_F,@OR-3,,25,8,30,13,0N);
L(31,6,31,10);
L(31,6,32,6);
L(24,5,32,5);
L(24,9,24,10);
L(18,6,18,9);
L(18,9,19,9);
L(18,6,19,6);
L(18,3,18,5);
L(18,5,19,5);
L(24,10,25,10);
L(30,10,31,10);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_F,@AND-2,,12,1,17,5,);
B(B_VAROUT,,MXadwActive,17,2,19,4,);
B(B_VARIN,,MXadwPreJoySig,10,3,12,5,);
B(B_VARIN,,MXadwEnJoySig,10,2,12,4,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 23 ;
        NETWORK_BODY
B(B_COMMENT,,analog signal selector and stop lg,1,1,27,2,);
B(B_F,@OR-2,,18,6,23,10,);
B(B_F,@AND-2,,11,3,16,7,0N);
B(B_VARIN,,MXlgLocStopRapD,9,8,11,10,);
B(B_VARIN,,MXlgLocStopRapU,9,4,11,6,);
B(B_VARIN,,MXlgAnalSigNeg,9,5,11,7,);
B(B_VARIN,,MXlgAnalSigPos,9,9,11,11,);
B(B_VARIN,,0.0,23,12,25,14,);
B(B_F,sel,,25,9,30,14,);
B(B_F,@GT-2,,25,14,30,18,);
B(B_F,@LT-2,,25,18,30,22,);
B(B_VARIN,,0.0,23,16,25,18,);
B(B_VARIN,,0.0,23,20,25,22,);
B(B_VAROUT,,MXlgAnalSigNeg,30,19,32,21,);
B(B_VAROUT,,MXlgAnalSigPos,30,15,32,17,);
B(B_VAROUT,,LDanalogSignal,30,10,32,12,);
B(B_VARIN,,MDlgJoySignal,19,11,21,13,);
B(B_F,@AND-2,,11,7,16,11,0N);
L(23,8,24,8);
L(24,8,24,11);
L(16,5,17,5);
L(17,5,17,8);
L(17,8,18,8);
L(24,11,25,11);
L(21,12,21,20);
L(21,16,25,16);
L(21,20,25,20);
L(21,12,25,12);
L(16,9,18,9);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 25 ;
        NETWORK_BODY
B(B_COMMENT,,analog signal selector and stop additional winch,1,1,27,2,);
B(B_VARIN,,0.0,23,14,25,16,);
B(B_F,@GT-2,,25,16,30,20,);
B(B_F,@LT-2,,25,20,30,24,);
B(B_VARIN,,0.0,23,18,25,20,);
B(B_VARIN,,0.0,23,22,25,24,);
B(B_VAROUT,,MXadwAnalSigNeg,30,21,32,23,);
B(B_VAROUT,,MXadwAnalSigPos,30,17,32,19,);
B(B_VAROUT,,LDadwAnalSignal,30,12,32,14,);
B(B_F,@AND-2,,11,7,16,11,0N);
B(B_F,@OR-2,,18,6,23,10,);
B(B_F,@AND-2,,11,3,16,7,0N);
B(B_VARIN,,LXadwLocalStopDn,9,8,11,10,);
B(B_VARIN,,LXadwLocalStopUp,9,4,11,6,);
B(B_VARIN,,MXadwAnalSigNeg,9,5,11,7,);
B(B_VARIN,,MXadwAnalSigPos,9,9,11,11,);
B(B_F,sel,,25,11,30,16,);
B(B_F,sel,,16,12,21,17,);
B(B_VARIN,,MXadwExtAnalSign,14,11,16,13,);
B(B_F,sel,,11,13,16,18,);
B(B_VARIN,,MDadwJoySig,9,16,11,18,);
B(B_VARIN,,MXadwEnJoySig,9,14,11,16,);
B(B_VARIN,,0.0,9,15,11,17,);
B(B_VARIN,,MDadwExtAnalSign,14,18,16,20,);
L(23,8,24,8);
L(24,8,24,13);
L(16,9,18,9);
L(16,5,17,5);
L(17,5,17,8);
L(17,8,18,8);
L(22,22,25,22);
L(24,13,25,13);
L(22,14,22,22);
L(22,18,25,18);
L(21,14,25,14);
L(16,12,16,14);
L(16,16,16,19);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_COMMENT,,limit switch additional winch ,1,1,27,2,);
B(B_COMMENT,,add. winch  = using lg with other brake as add. winch,28,1,54,2,);
B(B_VARIN,,MXlimitSwBridged,9,5,11,7,);
B(B_VAROUT,,MXadwUpLimOk,16,4,18,6,);
B(B_VARIN,,IXaddUpperLimOk,9,4,11,6,);
B(B_F,@OR-3,,11,3,16,8,00N);
B(B_VARIN,,LXadwWinPresel,9,6,11,8,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_VARIN,,IXaddLowerLimOk,9,1,11,3,);
B(B_VARIN,,MXlimitSwBridged,9,2,11,4,);
B(B_VAROUT,,MXadwLoLimOk,16,1,18,3,);
B(B_F,@OR-3,,11,0,16,5,00N);
B(B_VARIN,,LXadwWinPresel,9,3,11,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 16 ;
        NETWORK_BODY
B(B_COMMENT,,a-frame/lg lower limit switch,1,1,27,2,);
B(B_VARIN,,MXaFrameCylPrese,19,5,21,7,);
B(B_VARIN,,IXlgAFraLowLimOk,19,4,21,6,);
B(B_F,@AND-2,,21,3,26,7,);
B(B_F,@AND-2,,21,7,26,11,N);
B(B_F,@OR-2,,16,8,21,12,);
B(B_VARIN,,IXlgAFraLowLimOk,14,9,16,11,);
B(B_F,@OR-2,,27,3,32,7,);
B(B_VAROUT,,MXlgAFraLowLimOk,32,4,34,6,);
B(B_F,@AND-2,,11,11,16,15,NN);
B(B_VARIN,,CXadLgLoweLimit,9,12,11,14,);
B(B_VARIN,,MXaFrameCylPrese,9,13,11,15,);
L(21,6,21,9);
L(26,5,27,5);
L(27,6,27,9);
L(26,9,27,9);
L(16,11,16,13);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 24 ;
        NETWORK_BODY
B(B_COMMENT,,digital logic lg,1,1,27,2,);
B(B_VARIN,,MXlgAnalSigPos,30,6,32,8,);
B(B_VARIN,,MXlgAnalSigNeg,30,7,32,9,);
B(B_VARIN,,MXlgGlobalStopUp,30,8,32,10,);
B(B_VARIN,,MXstopAllFunctio,30,10,32,12,);
B(B_VARIN,,MXlgGlobalStopDn,30,9,32,11,);
B(B_VAROUT,,MXlgLocStopRapU,53,8,55,10,);
B(B_VAROUT,,MXlgLocStopRapD,53,9,55,11,);
B(B_VAROUT,,MXlgEnPowStage,53,7,55,9,);
B(B_VAROUT,,QXlgBrake,53,6,55,8,);
B(B_VARIN,,LXpumpSignZero,30,15,32,17,);
B(B_VARIN,,ITXlgSpeedLevel,29,17,31,19,);
B(B_VAROUT,,QTXlgSpeedLevel,31,19,33,21,);
B(B_FB,LGdigLogPartV013,digital1,32,5,53,19,);
B(B_VARIN,,FALSE,30,16,32,18,);
B(B_VARIN,,MXlmlStop,14,4,16,6,);
B(B_VARIN,,MXlmlBridged,13,5,15,7,);
B(B_F,@AND-2,,16,3,21,7,0N);
B(B_F,@AND-2,,16,7,21,11,N);
B(B_VARIN,,MXlmlStopBackwar,14,9,16,11,);
B(B_VARIN,,MXhg1UpLimBridge,14,13,16,15,);
B(B_VARIN,,MXhg2UpLimBridge,14,14,16,16,);
B(B_F,@AND-3,,16,12,21,17,);
B(B_VARIN,,MXlgAFraLowLimOk,14,15,16,17,);
B(B_F,@AND-2,,16,17,21,21,);
B(B_VARIN,,IXlgUpperLimOk,14,18,16,20,);
B(B_VARIN,,IXlgAFraUppLimOk,9,20,11,22,);
B(B_VARIN,,MXaFrameCylPrese,9,21,11,23,);
B(B_F,@OR-2,,11,19,16,23,0N);
B(B_VAROUT,,MXlgSpeed2,55,12,57,14,);
B(B_VAROUT,,MXlgSpeed2Memory,55,13,57,15,);
B(B_VAROUT,,MXlgSpeed3,54,14,56,16,);
B(B_VAROUT,,MXlgSpeed3Memory,54,15,56,17,);
B(B_VAROUT,,MXlgSpeed1,56,10,58,12,);
B(B_VAROUT,,MXlgSpeed1Memory,56,11,58,13,);
L(31,18,32,18);
L(31,18,31,20);
L(22,12,32,12);
L(22,5,22,12);
L(22,15,32,15);
L(21,5,22,5);
L(15,6,16,6);
L(15,6,15,9);
L(15,9,16,9);
L(21,9,21,13);
L(21,14,32,14);
L(21,13,32,13);
L(22,15,22,19);
L(16,20,16,21);
L(21,19,22,19);
L(53,11,56,11);
L(55,12,55,14);
L(54,13,54,16);
L(56,11,56,12);
L(53,13,54,13);
L(53,12,55,12);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 18 ;
        NETWORK_BODY
B(B_COMMENT,,digital logic additional winch,1,1,27,2,);
B(B_VARIN,,MXadwAnalSigPos,26,4,28,6,);
B(B_VARIN,,MXadwAnalSigNeg,26,5,28,7,);
B(B_VARIN,,MXadwGlobalStopU,26,6,28,8,);
B(B_VARIN,,MXstopAllFunctio,26,8,28,10,);
B(B_VARIN,,MXadwGlobalStopD,26,7,28,9,);
B(B_VAROUT,,LXadwLocalStopUp,49,6,51,8,);
B(B_VAROUT,,LXadwLocalStopDn,49,7,51,9,);
B(B_VAROUT,,MXadwEnPowStage,49,5,51,7,);
B(B_VAROUT,,LXadwBrake,49,4,51,6,);
B(B_VARIN,,LXadwPumpZero,26,13,28,15,);
B(B_VARIN,,MXadwLoLimOk,26,11,28,13,);
B(B_VARIN,,MXadwUpLimOk,26,12,28,14,);
B(B_FB,LGdigLogPartV013,digital2,28,3,49,17,);
B(B_VARIN,,TRUE,26,14,28,16,);
B(B_VARIN,,MXlmlStop,10,7,12,9,);
B(B_VARIN,,MXlmlBridged,9,8,11,10,);
B(B_F,@AND-2,,12,6,17,10,0N);
B(B_F,@AND-2,,12,10,17,14,N);
B(B_VARIN,,MXlmlStopBackwar,10,12,12,14,);
L(18,10,28,10);
L(18,11,28,11);
L(18,8,18,10);
L(18,11,18,12);
L(17,8,18,8);
L(17,12,18,12);
L(11,9,12,9);
L(11,9,11,12);
L(11,12,12,12);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 15 ;
        NETWORK_BODY
B(B_COMMENT,,rapid stop lg,1,1,27,2,);
B(B_F,sel,,20,9,25,14,);
B(B_F,@LT-2,,13,7,18,11,);
B(B_VARIN,,100.0,9,12,11,14,);
B(B_VAROUT,,LDlgIntTimeUp,33,8,35,10,);
B(B_F,sel,,28,7,33,12,);
B(B_VAROUT,,LDlgIntTimeDown,33,9,35,11,);
B(B_VARIN,,MDlgIntTime,10,6,12,8,);
B(B_VARIN,,MXlgLocStopRapU,19,4,21,6,);
B(B_VARIN,,MXlgLocStopRapD,19,5,21,7,);
B(B_F,@OR-2,,21,3,26,7,);
L(11,10,13,10);
L(11,10,11,13);
L(12,12,20,12);
L(11,13,20,13);
L(19,9,19,11);
L(19,11,20,11);
L(12,9,13,9);
L(18,9,19,9);
L(26,7,26,10);
L(26,10,27,10);
L(25,11,27,11);
L(12,7,12,12);
L(27,5,27,9);
L(27,10,28,10);
L(27,11,28,11);
L(27,9,28,9);
L(33,9,33,10);
L(12,7,26,7);
L(26,5,27,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_F,sel,,16,3,21,8,);
B(B_VARIN,,MXadwActive,14,4,16,6,);
B(B_F,@DIV,,11,7,16,11,);
B(B_VARIN,,100.0,9,9,11,11,);
B(B_VARIN,,CDadwLimitation,9,8,11,10,);
B(B_VAROUT,,LDreduct,21,4,23,6,);
B(B_VARIN,,1.0,14,5,16,7,);
B(B_COMMENT,,reduction signal for additional winch ,1,1,27,2,);
L(16,7,16,9);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 15 ;
        NETWORK_BODY
B(B_COMMENT,,signal reduction lifting,1,1,27,2,);
B(B_F,sel,,20,9,25,14,);
B(B_VARIN,,MDlmlSpeedRed_Lg,18,12,20,14,);
B(B_F,SigMin4,,27,2,34,8,);
B(B_VARIN,,1.0,18,11,20,13,);
B(B_VAROUT,,LDredLifting,34,3,36,5,);
B(B_F,@AND-2,,11,9,16,13,);
B(B_VARIN,,MXlmlRedLoaIncFu,9,11,11,13,);
B(B_VARIN,,MXadwActive,9,10,11,12,);
B(B_VARIN,,LDreduct,25,3,27,5,);
B(B_F,sel,,20,4,25,9,);
B(B_VARIN,,MDlmlSpeedRed_Lg,18,7,20,9,);
B(B_VARIN,,MXlmlRedAllFunct,18,5,20,7,);
B(B_VARIN,,1.0,18,6,20,8,);
L(25,11,26,11);
L(26,7,26,11);
L(26,7,27,7);
L(16,11,20,11);
L(27,4,27,5);
L(25,6,27,6);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 17 ;
        NETWORK_BODY
B(B_F,sel,,18,11,23,16,);
B(B_VARIN,,MDlmlSpeedRed_Lg,16,14,18,16,);
B(B_VARIN,,MXlmlRedAllFunct,16,12,18,14,);
B(B_F,SigMin4,,25,3,32,9,);
B(B_VARIN,,1.0,16,13,18,15,);
B(B_VAROUT,,LDredLowering,32,4,34,6,);
B(B_F,sel,,18,6,23,11,);
B(B_VARIN,,MDlmlSpeedRed_Lg,16,9,18,11,);
B(B_VARIN,,1.0,16,8,18,10,);
B(B_VARIN,,LDreduct,23,4,25,6,);
B(B_F,@AND-2,,11,6,16,10,N);
B(B_VARIN,,MXlmlRedLoaIncFu,9,8,11,10,);
B(B_VARIN,,MXadwActive,9,7,11,9,);
B(B_COMMENT,,signal reduction lowering,1,1,27,2,);
L(23,13,24,13);
L(24,8,24,13);
L(23,7,23,8);
L(24,8,25,8);
L(23,7,25,7);
L(25,5,25,6);
L(16,8,18,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 17 ;
        NETWORK_BODY
B(B_COMMENT,,analog part lg,1,1,27,2,);
B(B_VARIN,,MDratedEngSpeed,9,6,11,8,);
B(B_VARIN,,CDengSpPumpRed,9,7,11,9,);
B(B_VARIN,,LDanalogSignal,9,5,11,7,);
B(B_FB,LGanalogPartV013,analog1,11,4,34,16,);
B(B_VARIN,,LDlgIntTimeUp,9,8,11,10,);
B(B_VARIN,,LDlgIntTimeDown,9,9,11,11,);
B(B_VARIN,,LDredLifting,9,10,11,12,);
B(B_VARIN,,LDredLowering,9,11,11,13,);
B(B_VARIN,,MXlgSpeed1,9,12,11,14,);
B(B_VARIN,,MXlgSpeed2,9,13,11,15,);
B(B_VAROUT,,MDlgPumpSignal,34,5,36,7,);
B(B_VAROUT,,LXpumpSignZero,34,6,36,8,);
B(B_VARIN,,MXlgSpeed3,9,14,11,16,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 24 ;
        NETWORK_BODY
B(B_COMMENT,,rapid stop additional winch ,1,1,27,2,);
B(B_VAROUT,,LDadwIntTimeUp,33,8,35,10,);
B(B_F,sel,,28,7,33,12,);
B(B_F,sel,,19,9,24,14,);
B(B_F,@LT-2,,12,7,17,11,);
B(B_F,sel,,28,15,33,20,);
B(B_VAROUT,,LDadwIntTimeDown,33,16,35,18,);
B(B_F,sel,,19,17,24,22,);
B(B_F,@LT-2,,12,15,17,19,);
B(B_VARIN,,100.0,8,12,10,14,);
B(B_VARIN,,100.0,8,20,10,22,);
B(B_VARIN,,LXadwLocalStopUp,19,4,21,6,);
B(B_VARIN,,LXadwLocalStopDn,19,5,21,7,);
B(B_F,@OR-2,,21,3,26,7,);
B(B_VARIN,,CDadwIntTimeDn,9,14,11,16,);
B(B_VARIN,,CDadwIntTimeUp,9,6,11,8,);
L(26,10,28,10);
L(26,11,28,11);
L(27,9,28,9);
L(10,10,12,10);
L(10,10,10,13);
L(11,12,19,12);
L(10,13,19,13);
L(18,9,18,11);
L(18,11,19,11);
L(11,9,12,9);
L(17,9,18,9);
L(25,7,25,10);
L(25,10,26,10);
L(24,11,26,11);
L(11,7,11,12);
L(27,17,28,17);
L(27,5,27,17);
L(10,18,12,18);
L(10,18,10,21);
L(11,20,19,20);
L(10,21,19,21);
L(18,17,18,19);
L(18,19,19,19);
L(11,17,12,17);
L(17,17,18,17);
L(25,15,25,18);
L(11,15,11,20);
L(24,19,28,19);
L(25,18,28,18);
L(26,5,27,5);
L(11,7,25,7);
L(11,15,25,15);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 17 ;
        NETWORK_BODY
B(B_COMMENT,,analog part additional winch,1,1,27,2,);
B(B_VARIN,,MDratedEngSpeed,9,6,11,8,);
B(B_VARIN,,CDengSpPumpRed,9,7,11,9,);
B(B_VARIN,,LDadwAnalSignal,9,5,11,7,);
B(B_FB,LGanalogPartV013,analog2,11,4,34,16,);
B(B_VARIN,,LDadwIntTimeUp,9,8,11,10,);
B(B_VARIN,,LDadwIntTimeDown,9,9,11,11,);
B(B_VARIN,,LDredLifting,9,10,11,12,);
B(B_VARIN,,LDredLowering,9,11,11,13,);
B(B_VAROUT,,MDadwPumpSignal,34,5,36,7,);
B(B_VAROUT,,LXadwPumpZero,34,6,36,8,);
B(B_VARIN,,TRUE,9,14,11,16,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_F,SigMax4,,12,3,19,9,);
B(B_VARIN,,MDadwPumpSignal,10,5,12,7,);
B(B_VARIN,,MDlgPumpSignal,10,4,12,6,);
B(B_VAROUT,,LDpumpSignal,19,4,21,6,);
B(B_COMMENT,,pump signal ,2,1,28,2,);
L(12,6,12,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 14 ;
        NETWORK_BODY
B(B_COMMENT,,power stage lg lifting,1,1,27,2,);
B(B_VARIN,,LDpumpSignal,14,7,16,9,);
B(B_FB,PowerStage,PowerStage1,16,5,25,13,);
B(B_VAROUT,,QWlgLifting,25,6,27,8,);
B(B_VARIN,,CWlgminCurPumUp,14,10,16,12,);
B(B_VARIN,,CWlgmaxCurPumUp,14,11,16,13,);
B(B_VARIN,,0.0,14,8,16,10,);
B(B_VARIN,,100.0,14,9,16,11,);
B(B_F,@OR-2,,11,3,16,7,);
B(B_VARIN,,MXlgEnPowStage,9,4,11,6,);
B(B_VARIN,,MXadwEnPowStage,9,5,11,7,);
L(16,5,16,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_COMMENT,,power stage lg lowering,1,1,27,2,);
B(B_VARIN,,LDpumpSignal,14,7,16,9,);
B(B_FB,PowerStage,PowerStage2,16,5,25,13,);
B(B_VAROUT,,QWlgLowering,25,6,27,8,);
B(B_VARIN,,CWlgminCurPumDn,14,10,16,12,);
B(B_VARIN,,CWlgmaxCurPumDn,14,11,16,13,);
B(B_VARIN,,0.0,14,8,16,10,);
B(B_VARIN,,-100.0,14,9,16,11,);
B(B_F,@OR-2,,11,3,16,7,);
B(B_VARIN,,MXlgEnPowStage,9,4,11,6,);
B(B_VARIN,,MXadwEnPowStage,9,5,11,7,);
L(16,5,16,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_VARIN,,LXadwWinPresel,9,4,11,6,);
B(B_JUMP,,next,16,4,18,6,);
B(B_F,not,,11,3,16,6,);
B(B_COMMENT,,jump to next if no additional winch is active,1,1,27,2,);
B(B_COMMENT,,Grund:Personenwinde hat den gleichen Bremsenausgang ,30,1,51,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,brake additional winch,1,1,27,2,);
B(B_VARIN,,LXadwBrake,10,3,12,5,);
B(B_VAROUT,,QXadwBrake,12,3,14,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VAROUT,,QTXaddWinch,12,1,14,3,);
B(B_VARIN,,MXadwActive,10,1,12,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL := next: ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 17 ;
        NETWORK_BODY
B(B_COMMENT,,send messages,1,1,27,2,);
B(B_FB,MsgRealReal,Message2,26,7,35,14,);
B(B_VARIN,,701,24,8,26,10,);
B(B_F,@AND-2,,18,3,23,7,0N);
B(B_VARIN,,IXlgAFraUppLimOk,16,5,18,7,);
B(B_VARIN,,MXaFrameCylPrese,16,2,18,4,);
B(B_FB,MsgRealReal,Message1,13,7,22,14,0N);
B(B_VARIN,,700,11,8,13,10,);
B(B_VARIN,,IXlgUpperLimOk,11,9,13,11,);
B(B_VARIN,,MSG_INFO,10,14,12,16,);
B(B_VARIN,,MDlmlAngleBoom,9,11,11,13,);
B(B_FB,MsgRealReal,Message3,41,7,50,14,);
B(B_VARIN,,702,39,8,41,10,);
B(B_VARIN,,IXlgAFraLowLimOk,31,5,33,7,);
B(B_F,@AND-2,,33,3,38,7,0N);
L(25,11,26,11);
L(25,11,25,15);
L(23,10,26,10);
L(23,5,23,10);
L(18,3,18,5);
L(12,11,12,15);
L(12,11,13,11);
L(11,12,13,12);
L(40,11,40,15);
L(40,11,41,11);
L(33,3,33,5);
L(38,5,38,10);
L(38,10,41,10);
L(12,15,40,15);
L(18,3,33,3);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,exit luffing gear program,1,1,27,2,);
B(B_VARIN,,TRUE,9,3,11,5,);
B(B_RETURN,,,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL := init: ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,init luffing gear program,1,1,27,2,);
B(B_VARIN,,TRUE,9,3,11,5,);
B(B_VAROUT,,LXinitOk,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_VARIN,,50.0,9,3,11,5,);
B(B_VAROUT,,MDlgIntTime,11,3,13,5,);
B(B_COMMENT,,set integration time,1,1,27,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_FB,CorrValue_Bool,CorrValue_Bool1,11,4,23,10,);
B(B_VARIN,,CXaddWinch,9,8,11,10,);
B(B_VARIN,,FALSE,9,6,11,8,);
B(B_VARIN,,TRUE,9,7,11,9,);
B(B_VARIN,,FALSE,9,5,11,7,);
B(B_COMMENT,,additional device additional winch,1,1,27,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_FB,CorrValue_Bool,CorrValue_Bool2,11,4,23,10,);
B(B_VARIN,,CXadLgLoweLimit,9,8,11,10,);
B(B_VARIN,,FALSE,9,6,11,8,);
B(B_VARIN,,TRUE,9,7,11,9,);
B(B_VARIN,,FALSE,9,5,11,7,);
B(B_COMMENT,,set additional device lower limit switch luffing gear,1,1,27,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value minimum current pump up,1,1,27,2,);
B(B_FB,CorrValue_UInt,CorrValue_UInt1,11,4,23,10,);
B(B_VARIN,,350,9,5,11,7,);
B(B_VARIN,,200,9,6,11,8,);
B(B_VARIN,,450,9,7,11,9,);
B(B_VARIN,,CWlgminCurPumUp,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value minimum current pump down,1,1,27,2,);
B(B_FB,CorrValue_UInt,CorrValue_UInt2,11,4,23,10,);
B(B_VARIN,,350,9,5,11,7,);
B(B_VARIN,,200,9,6,11,8,);
B(B_VARIN,,450,9,7,11,9,);
B(B_VARIN,,CWlgminCurPumDn,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value maximum current pump up,1,1,27,2,);
B(B_FB,CorrValue_UInt,CorrValue_UInt3,11,4,23,10,);
B(B_VARIN,,730,9,5,11,7,);
B(B_VARIN,,450,9,6,11,8,);
B(B_VARIN,,1000,9,7,11,9,);
B(B_VARIN,,CWlgmaxCurPumUp,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value maximum current pump down,1,1,27,2,);
B(B_FB,CorrValue_UInt,CorrValue_UInt4,11,4,23,10,);
B(B_VARIN,,730,9,5,11,7,);
B(B_VARIN,,450,9,6,11,8,);
B(B_VARIN,,1000,9,7,11,9,);
B(B_VARIN,,CWlgmaxCurPumDn,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_FB,CorrValue_Real,CorrValue_Real1,11,4,23,10,);
B(B_VARIN,,50.0,9,5,11,7,);
B(B_VARIN,,5.0,9,6,11,8,);
B(B_VARIN,,100.0,9,7,11,9,);
B(B_VARIN,,CDadwLimitation,9,8,11,10,);
B(B_COMMENT,,reduction for additional winch,1,1,27,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_COMMENT,,correction value integrator time up,1,1,27,2,);
B(B_FB,CorrValue_Real,CorrValue_Real2,11,3,23,9,);
B(B_VARIN,,CDadwIntTimeUp,9,7,11,9,);
B(B_VARIN,,50.0,9,4,11,6,);
B(B_VARIN,,10.0,9,5,11,7,);
B(B_VARIN,,300.0,9,6,11,8,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value integrator time down,1,1,27,2,);
B(B_FB,CorrValue_Real,CorrValue_Real3,11,4,23,10,);
B(B_VARIN,,CDadwIntTimeDn,9,8,11,10,);
B(B_VARIN,,50.0,9,5,11,7,);
B(B_VARIN,,10.0,9,6,11,8,);
B(B_VARIN,,300.0,9,7,11,9,);
        END_NETWORK_BODY
    END_NET_WORK
END_BODY
END_PROGRAM

PROGRAM LUDVprogV110
(*name of author: Manfred Schapler
version: 1.0
date: 04/97
modification:*)
(*name of author: Manfred Schapler
version: 1.0
date: 04/97
modification:*)
	VAR_EXTERNAL 
		QXhg1_2connectio: BOOL:=FALSE;
			(*connection hg 1 & 2*)
		QWludv1: UINT:=0;
			(*LUDV pump 1*)
		QWludv2: UINT:=0;
			(*LUDV pump 2*)
		QWludv3: UINT:=0;
			(*P1 grab close/drill.dr.left/LUDV pump3*)
		QWludv4: UINT:=0;
			(*P1 hammer/vibrator/grab open/drill.dr.right/LUDV pump4*)
		QWludv1_2CutOff: UINT:=0;
			(*HG 1 pump trimot / cut off ludv pump 1 and 2*)
		QWludvPressCont: UINT:=0;
			(*ludv pump pressure control *)
		MXminEngineSpeed: BOOL:=FALSE;
			(*minimum engine speed reached*)
		MXludv1ExtAnaSig: BOOL:=FALSE;
			(*LUDV pump 1 other, external analog signal*)
		MXludv2ExtAnaSig: BOOL:=FALSE;
			(*LUDV pump 2 other, external analog signal*)
		MXludv3ExtAnaSig: BOOL:=FALSE;
			(*LUDV pump 3 other, external analog signal*)
		MXhdrOilTemError: BOOL:=FALSE;
			(*error hydr. oil temperature sensor*)
		MXstopLudvPumps: BOOL:=FALSE;
			(*global stop LUDV pumps*)
		MXanyFunctActive: BOOL:=FALSE;
			(*any function active*)
		MXhgByLudvSectio: BOOL:=FALSE;
			(*hg driven by LUDV section*)
		MXvibratWorking: BOOL:=FALSE;
			(*vibrator working*)
		MXhammerWorking: BOOL:=FALSE;
			(*hammer working*)
		MXswitTravelGear: BOOL:=FALSE;
			(*travelling gear is activated*)
		MXuseLudvPump3: BOOL:=FALSE;
			(*use LUDV pump 3*)
		MXuseLudvPump4: BOOL:=FALSE;
			(*use LUDV pump 4*)
		MXludv4ExtAnaSig: BOOL:=FALSE;
			(*LUDV pump 4 other, external analog signal*)
		MXludvSectActiv: BOOL:=FALSE;
			(*ludv section is active*)
		MXsgByLudvSectio: BOOL:=FALSE;
			(*sg driven by LUDV section*)
		MXludvSecP1activ: BOOL:=FALSE;
			(*ludv working section P1 active*)
		MXludvSecP2activ: BOOL:=FALSE;
			(*ludv working section P2 active*)
		MWludvExtPresSig: UINT:=0;
			(*LUDV pump external pressure signal in %*)
		MWludvExtPreCont: UINT:=0;
			(*LUDV pump external pressure signal in mA*)
		MDhydrOilTemp: REAL:=0.0;
			(*hydraulic oil temperature in °C*)
		MDludv1ExtAnaSig: REAL:=0.0;
			(*LUDV pump 1 external analog signal in [%]*)
		MDludv2ExtAnaSig: REAL:=0.0;
			(*LUDV pump 2 external analog signal in [%]*)
		MDludv3ExtAnaSig: REAL:=0.0;
			(*LUDV3 external analog signal*)
		MDludv4ExtAnaSig: REAL:=0.0;
			(*LUDV pump 4 external analog signal in %*)
		MDhg1PumpSignal: REAL:=0.0;
			(*HG 1 analog signal pump in [%]*)
		MDhg2PumpSignal: REAL:=0.0;
			(*HG 2 analog signal pump in [%]*)
		MDlgPumpSignal: REAL:=0.0;
			(*LG analog signal pump in [%]*)
		MDsgPumpSignal: REAL:=0.0;
			(*SG analog signal pump in [%]*)
	END_VAR
	VAR_EXTERNAL CONSTANT RETAIN
		CWludv1MinCurPum: UINT:=0;
			(*LUDV 1 minimum current pump*)
		CWludv1MaxCurPum: UINT:=0;
			(*LUDV 1 maximum current pump*)
		CWludv2MinCurPum: UINT:=0;
			(*LUDV 2 minimum current pump*)
		CWludv2MaxCurPum: UINT:=0;
			(*LUDV 2 maximum current pump*)
		CWludvPreContMin: UINT:=0;
			(*ludv pump pressure control min. current*)
		CWludvPreContMax: UINT:=0;
			(*ludv pump pressure control max. current*)
		CWminCurCOffLudv: UINT:=0;
			(*cut off ludv pumps min. current*)
		CWmaxCurCOffLudv: UINT:=0;
			(*cut off ludv pumps max. current*)
		CWpConLudvMaxVal: UINT:=0;
			(*ludv pressure control max. value [bar]*)
		CWpConLudv50bar: UINT:=0;
			(*ludv pressure control current for 50bar*)
		CWpConLudv100bar: UINT:=0;
			(*ludv pressure control current for 100bar*)
		CWpConLudv150bar: UINT:=0;
			(*ludv pressure control current for 150bar*)
		CWpConLudv200bar: UINT:=0;
			(*ludv pressure control current for 200bar*)
		CWpConLudv250bar: UINT:=0;
			(*ludv pressure control current for 250bar*)
		CWpConLudv300bar: UINT:=0;
			(*ludv pressure control current for 300bar*)
		CWludvPressure: UINT:=0;
			(*ludv pump pressure [bar]*)
		CWp1PumpMaxValue: UINT:=0;
			(*p1 pump max. value [l/min]*)
		CWp1Pump50liter: UINT:=0;
			(*p1 pump current for 50l/min*)
		CWp1Pump100liter: UINT:=0;
			(*p1 pump current for 100l/min*)
		CWp1Pump150liter: UINT:=0;
			(*p1 pump current for 150l/min*)
		CWp1Pump200liter: UINT:=0;
			(*p1 pump current for 200l/min*)
		CWp1Pump250liter: UINT:=0;
			(*p1 pump current for 250l/min*)
		CWp1Pump300liter: UINT:=0;
			(*p1 pump current for 300l/min*)
		CWp1Pump350liter: UINT:=0;
			(*p1 pump current for 350l/min*)
		CWp1Pump400liter: UINT:=0;
			(*p1 pump current for 400l/min*)
		CWp1Pump450liter: UINT:=0;
			(*p1 pump current for 450l/min*)
		CWp1Pump500liter: UINT:=0;
			(*p1 pump current for 500l/min*)
		CWp2PumpMaxValue: UINT:=0;
			(*p2 pump max. value [l/min]*)
		CWp2Pump50liter: UINT:=0;
			(*p2 pump current for 50l/min*)
		CWp2Pump100liter: UINT:=0;
			(*p2 pump current for 100l/min*)
		CWp2Pump150liter: UINT:=0;
			(*p2 pump current for 150l/min*)
		CWp2Pump200liter: UINT:=0;
			(*p2 pump current for 200l/min*)
		CWp2Pump250liter: UINT:=0;
			(*p2 pump current for 250l/min*)
		CWp2Pump300liter: UINT:=0;
			(*p2 pump current for 300l/min*)
		CWp2Pump350liter: UINT:=0;
			(*p2 pump current for 350l/min*)
		CWp2Pump400liter: UINT:=0;
			(*p2 pump current for 400l/min*)
		CWp2Pump450liter: UINT:=0;
			(*p2 pump current for 450l/min*)
		CWp2Pump500liter: UINT:=0;
			(*p2 pump current for 500l/min*)
		CWludv3MinCurPum: UINT:=0;
			(*LUDV 3 minimum current pump*)
		CWludv3MaxCurPum: UINT:=0;
			(*LUDV 3 maximum current pump*)
		CWludv4MinCurPum: UINT:=0;
			(*LUDV 4 minimum current pump*)
		CWludv4MaxCurPum: UINT:=0;
			(*LUDV 4 maximum current pump*)
		CDludvIntegrTime: REAL:=0.0;
			(*ludv pumps integration time up and down*)
		CDludvLeakOilSig: REAL:=0.0;
			(*ludv leakoil or pressure comp. signal*)
		CDpumpCutIntCls: REAL:=0.0;
			(*LUDV pump cut off integrator closing time*)
		CDpumpCutIntBrk: REAL:=0.0;
			(*LUDV pump cut off integrator breaking time*)
	END_VAR
	VAR 
		LXinitOk: BOOL:=FALSE;
			(*init completed*)
		LDtempReduct: REAL:=0.0;
		LDludvPress: REAL:=0.0;
		LDcalcCurrent1: REAL:=0.0;
		LDludvPressSig: REAL:=0.0;
		LDpConLudvMaxVal: REAL:=0.0;
		LDcalcComp1: REAL:=0.0;
		ADcalculateQ1: ADcalculateQV024;
		Integrator12: Integrator;
		Integrator1: Integrator;
		Integrator2: Integrator;
		Integrator3: Integrator;
		Integrator4: Integrator;
		PowerStage1: PowerStage;
		PowerStage2: PowerStage;
		PowerStage3: PowerStage;
		PowerStage4: PowerStage;
		PowerStage5: PowerStage;
		PowerStage12: PowerStage;
		CorrValue_UInt1: CorrValue_UInt;
		CorrValue_UInt2: CorrValue_UInt;
		CorrValue_UInt3: CorrValue_UInt;
		CorrValue_UInt4: CorrValue_UInt;
		CorrValue_UInt5: CorrValue_UInt;
		CorrValue_UInt6: CorrValue_UInt;
		CorrValue_UInt7: CorrValue_UInt;
		CorrValue_UInt8: CorrValue_UInt;
		CorrValue_UInt9: CorrValue_UInt;
		CorrValue_UInt10: CorrValue_UInt;
		CorrValue_UInt11: CorrValue_UInt;
		CorrValue_UInt12: CorrValue_UInt;
		CorrValue_UInt13: CorrValue_UInt;
		CorrValue_UInt14: CorrValue_UInt;
		CorrValue_UInt15: CorrValue_UInt;
		CorrValue_UInt16: CorrValue_UInt;
		CorrValue_UInt17: CorrValue_UInt;
		CorrValue_UInt18: CorrValue_UInt;
		CorrValue_UInt19: CorrValue_UInt;
		CorrValue_UInt20: CorrValue_UInt;
		CorrValue_UInt21: CorrValue_UInt;
		CorrValue_UInt22: CorrValue_UInt;
		CorrValue_UInt23: CorrValue_UInt;
		CorrValue_UInt24: CorrValue_UInt;
		CorrValue_UInt25: CorrValue_UInt;
		CorrValue_UInt26: CorrValue_UInt;
		CorrValue_UInt27: CorrValue_UInt;
		CorrValue_UInt28: CorrValue_UInt;
		CorrValue_UInt29: CorrValue_UInt;
		CorrValue_UInt30: CorrValue_UInt;
		CorrValue_UInt31: CorrValue_UInt;
		CorrValue_UInt32: CorrValue_UInt;
		CorrValue_UInt33: CorrValue_UInt;
		CorrValue_UInt34: CorrValue_UInt;
		CorrValue_UInt35: CorrValue_UInt;
		CorrValue_UInt36: CorrValue_UInt;
		CorrValue_UInt37: CorrValue_UInt;
		CorrValue_UInt38: CorrValue_UInt;
		CorrValue_UInt39: CorrValue_UInt;
		CorrValue_UInt40: CorrValue_UInt;
		CorrValue_Real1: CorrValue_Real;
		CorrValue_Real2: CorrValue_Real;
	END_VAR
'FBD'
BODY
    WORKSPACE
        NETWORK_LIST_TYPE := NWTYPEFBD ;
        ACTIVE_NETWORK := 0 ;
    END_WORKSPACE
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_COMMENT,,init first time,1,1,27,2,);
B(B_VARIN,,LXinitOk,9,4,11,6,);
B(B_F,not,,11,3,16,6,);
B(B_JUMP,,init,16,4,18,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_COMMENT,,check ludv connection cut off,1,1,27,2,);
B(B_VARIN,,MXhgByLudvSectio,9,4,11,6,);
B(B_F,not,,11,3,16,6,);
B(B_JUMP,,pumps,16,4,18,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 26 ;
        NETWORK_BODY
B(B_F,@XOR-2,,28,7,33,11,);
B(B_COMMENT,,power stage disconnect ludv pump 1 and 2,1,1,27,2,);
B(B_F,@GT-2,,13,7,18,11,);
B(B_F,@LT-2,,13,11,18,15,);
B(B_F,@GT-2,,13,15,18,19,);
B(B_F,@LT-2,,13,19,18,23,);
B(B_F,@OR-2,,20,7,25,11,);
B(B_F,@OR-2,,20,15,25,19,);
B(B_VARIN,,MDhg1PumpSignal,9,8,11,10,);
B(B_VARIN,,0.0,9,9,11,11,);
B(B_VARIN,,0.0,9,17,11,19,);
B(B_VARIN,,MDhg2PumpSignal,9,16,11,18,);
B(B_VARIN,,0.0,11,13,13,15,);
B(B_VARIN,,0.0,11,21,13,23,);
B(B_COMMENT,,Folgende Gerätetypen besitzen ein Trennventil : HS8040/8050/8070/8100/8120 alle LR,30,1,65,2,);
B(B_COMMENT,,davon sind folgende Typen im geschl Kreis (keine HW Funktion)  HS8070/8100/8120 und LR1300,30,2,65,3,);
B(B_VARIN,,MXhgByLudvSectio,25,5,27,7,);
B(B_F,@AND-2,,39,3,44,7,);
B(B_VARIN,,MXswitTravelGear,37,4,39,6,);
B(B_F,@OR-2,,34,6,39,10,NN);
B(B_F,@OR-2,,45,10,50,14,);
B(B_F,@AND-4,,28,11,33,17,000N);
B(B_VARIN,,QXhg1_2connectio,25,22,27,24,);
B(B_F,@AND-3,,52,10,57,15,);
B(B_F,EQ_R,,45,14,50,18,);
B(B_VARIN,,MDlgPumpSignal,43,15,45,17,);
B(B_VARIN,,0.0,43,16,45,18,);
B(B_F,@OR-2,,45,18,50,22,0N);
B(B_F,EQ_R,,39,18,44,22,);
B(B_VARIN,,MDsgPumpSignal,37,19,39,21,);
B(B_VARIN,,0.0,37,20,39,22,);
B(B_VARIN,,MXsgByLudvSectio,42,22,44,24,);
B(B_COMMENT,,beim HS8030 egal da immer getrennt ,27,24,41,25,);
B(B_F,sel,,67,10,72,15,);
B(B_VARIN,,100.0,65,13,67,15,);
B(B_VARIN,,0.0,65,12,67,14,);
B(B_FB,Integrator,Integrator12,76,9,85,15,);
B(B_VAROUT,,QWludv1_2CutOff,98,9,100,11,);
B(B_VARIN,,0.0,87,11,89,13,);
B(B_VARIN,,100.0,87,12,89,14,);
B(B_VARIN,,CWminCurCOffLudv,85,15,87,17,);
B(B_VARIN,,CWmaxCurCOffLudv,85,16,87,18,);
B(B_VARIN,,CDpumpCutIntCls,72,15,74,17,);
B(B_VARIN,,CDpumpCutIntBrk,72,16,74,18,);
B(B_FB,PowerStage,PowerStage12,89,8,98,16,);
B(B_VARIN,,TRUE,74,10,76,12,);
B(B_VARIN,,MXminEngineSpeed,86,7,88,9,);
B(B_F,@OR-3,,58,10,63,15,);
B(B_VARIN,,MXludvSecP2activ,55,22,57,24,);
B(B_VARIN,,MXludvSecP1activ,56,23,58,25,);
L(12,21,13,21);
L(18,13,19,13);
L(19,10,19,13);
L(19,10,20,10);
L(18,9,20,9);
L(18,21,19,21);
L(19,18,19,21);
L(19,18,20,18);
L(18,17,20,17);
L(12,13,13,13);
L(12,9,12,13);
L(12,17,12,21);
L(11,9,13,9);
L(11,10,13,10);
L(11,17,13,17);
L(11,18,13,18);
L(25,9,28,9);
L(25,9,25,14);
L(25,17,26,17);
L(26,10,26,17);
L(26,10,28,10);
L(27,6,27,13);
L(26,15,28,15);
L(25,14,28,14);
L(33,9,34,9);
L(39,6,39,8);
L(27,6,33,6);
L(33,6,33,8);
L(33,8,34,8);
L(44,5,45,5);
L(45,5,45,12);
L(27,13,28,13);
L(33,13,45,13);
L(27,16,27,23);
L(27,16,28,16);
L(50,12,52,12);
L(50,13,52,13);
L(51,14,52,14);
L(50,20,51,20);
L(50,13,50,16);
L(51,14,51,20);
L(44,21,44,23);
L(44,21,45,21);
L(44,20,45,20);
L(72,12,76,12);
L(85,11,89,11);
L(87,14,89,14);
L(88,15,89,15);
L(87,14,87,16);
L(87,17,88,17);
L(88,15,88,17);
L(75,14,76,14);
L(74,13,76,13);
L(74,13,74,16);
L(75,14,75,17);
L(74,17,75,17);
L(88,8,88,10);
L(88,10,89,10);
L(57,12,58,12);
L(63,12,67,12);
L(57,13,58,13);
L(57,13,57,23);
L(58,14,58,24);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL := pumps: ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_COMMENT,,pump reduction by cold oil,1,1,27,2,);
B(B_VARIN,,MDhydrOilTemp,9,5,11,7,);
B(B_F,@ADD-2,,11,4,16,8,);
B(B_VARIN,,60.0,9,6,11,8,);
B(B_VARIN,,0.025,18,6,20,8,);
B(B_F,@MUL-2,,20,4,25,8,);
B(B_COMMENT,,Öltemp. <-40°C => 50% Pumpenansteuerungø^Öltemp. >-20°C => 100% Pumpenansteuerung,6,9,24,11,);
B(B_COMMENT,,Die wird gemacht um die Pumpenø^vor Kavitation bei sehr kaltem Öl zu schützen,25,9,43,11,);
B(B_F,limit,,44,2,50,7,);
B(B_VARIN,,0.5,42,3,44,5,);
B(B_VARIN,,1.0,42,5,44,7,);
B(B_VAROUT,,LDtempReduct,50,3,52,5,);
B(B_F,sel,,34,3,39,8,);
B(B_VARIN,,MXhdrOilTemError,32,4,34,6,);
B(B_VARIN,,1.0,32,6,34,8,);
L(16,6,20,6);
L(39,5,44,5);
L(25,6,34,6);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 20 ;
        NETWORK_BODY
B(B_F,sel,,24,8,29,13,);
B(B_F,@AND-2,,24,4,29,8,0N);
B(B_VARIN,,MXanyFunctActive,22,6,24,8,);
B(B_VARIN,,MXstopLudvPumps,22,5,24,7,);
B(B_F,sel,,29,7,34,12,);
B(B_VARIN,,LDtempReduct,32,15,34,17,);
B(B_F,@MUL-2,,36,7,41,11,);
B(B_FB,Integrator,Integrator1,43,6,52,12,);
B(B_VARIN,,TRUE,40,5,42,7,);
B(B_COMMENT,,power stage ludv pump 1,1,1,27,2,);
B(B_VARIN,,10000.0,34,17,36,19,);
B(B_VARIN,,CDludvIntegrTime,34,16,36,18,);
B(B_F,sel,,36,14,41,19,);
B(B_FB,PowerStage,PowerStage1,62,5,71,13,);
B(B_VAROUT,,QWludv1,71,6,73,8,);
B(B_VARIN,,CWludv1MinCurPum,60,10,62,12,);
B(B_VARIN,,CWludv1MaxCurPum,60,11,62,13,);
B(B_VARIN,,0.0,60,8,62,10,);
B(B_VARIN,,100.0,60,9,62,11,);
B(B_VARIN,,MXminEngineSpeed,60,6,62,8,);
B(B_VARIN,,MXludv1ExtAnaSig,22,7,24,9,);
B(B_VARIN,,MDludv1ExtAnaSig,22,14,24,16,);
B(B_VARIN,,MXludvSectActiv,16,10,18,12,);
B(B_F,sel,,18,9,23,14,);
B(B_VARIN,,0.0,16,11,18,13,);
B(B_COMMENT,,http://jira.zdv.liebherr.i:8080/browse/LWNTBEHSHSSW10511521-43,37,1,84,2,);
B(B_VARIN,,0.0,27,13,29,15,);
B(B_F,to_real,,11,12,18,15,);
B(B_VARIN,,100.0,9,13,11,15,);
L(29,6,29,9);
L(34,10,34,16);
L(34,10,36,10);
L(34,9,36,9);
L(29,6,35,6);
L(35,6,35,16);
L(42,8,43,8);
L(41,9,43,9);
L(42,10,43,10);
L(42,11,43,11);
L(42,10,42,16);
L(42,6,42,8);
L(35,16,36,16);
L(41,16,42,16);
L(52,8,62,8);
L(23,11,24,11);
L(24,8,24,10);
L(24,12,24,15);
L(29,11,29,14);
L(18,13,18,14);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 19 ;
        NETWORK_BODY
B(B_COMMENT,,power stage ludv pump 2,1,1,27,2,);
B(B_F,sel,,23,7,28,12,);
B(B_F,@AND-2,,23,3,28,7,0N);
B(B_VARIN,,MXanyFunctActive,21,5,23,7,);
B(B_VARIN,,MXstopLudvPumps,21,4,23,6,);
B(B_F,sel,,28,6,33,11,);
B(B_VARIN,,LDtempReduct,31,14,33,16,);
B(B_F,@MUL-2,,35,6,40,10,);
B(B_FB,Integrator,Integrator2,42,5,51,11,);
B(B_VARIN,,TRUE,39,4,41,6,);
B(B_VARIN,,10000.0,33,16,35,18,);
B(B_VARIN,,CDludvIntegrTime,33,15,35,17,);
B(B_F,sel,,35,13,40,18,);
B(B_FB,PowerStage,PowerStage2,61,4,70,12,);
B(B_VAROUT,,QWludv2,70,5,72,7,);
B(B_VARIN,,CWludv2MinCurPum,59,9,61,11,);
B(B_VARIN,,CWludv2MaxCurPum,59,10,61,12,);
B(B_VARIN,,0.0,59,7,61,9,);
B(B_VARIN,,100.0,59,8,61,10,);
B(B_VARIN,,MXminEngineSpeed,59,5,61,7,);
B(B_VARIN,,MDludv2ExtAnaSig,21,13,23,15,);
B(B_VARIN,,MXludv2ExtAnaSig,21,6,23,8,);
B(B_VARIN,,MXludvSectActiv,15,9,17,11,);
B(B_F,sel,,17,8,22,13,);
B(B_VARIN,,0.0,15,10,17,12,);
B(B_VARIN,,0.0,26,12,28,14,);
B(B_F,to_real,,10,11,17,14,);
B(B_VARIN,,100.0,8,12,10,14,);
L(28,5,28,8);
L(33,9,33,15);
L(33,9,35,9);
L(33,8,35,8);
L(28,5,34,5);
L(34,5,34,15);
L(41,7,42,7);
L(40,8,42,8);
L(41,9,42,9);
L(41,10,42,10);
L(41,9,41,15);
L(41,5,41,7);
L(34,15,35,15);
L(40,15,41,15);
L(51,7,61,7);
L(22,10,23,10);
L(23,7,23,9);
L(23,11,23,14);
L(28,10,28,13);
L(17,12,17,13);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,MXuseLudvPump3,9,1,11,3,);
B(B_JUMP,,pump4,11,1,13,3,N);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 19 ;
        NETWORK_BODY
B(B_COMMENT,,power stage ludv pump 3,1,1,27,2,);
B(B_FB,Integrator,Integrator3,44,5,53,11,);
B(B_VARIN,,TRUE,41,4,43,6,);
B(B_F,@MUL-2,,37,6,42,10,);
B(B_F,sel,,23,7,28,12,);
B(B_FB,PowerStage,PowerStage3,63,4,72,12,);
B(B_VAROUT,,QWludv3,72,5,74,7,);
B(B_VARIN,,CWludv3MinCurPum,61,9,63,11,);
B(B_VARIN,,CWludv3MaxCurPum,61,10,63,12,);
B(B_VARIN,,0.0,61,7,63,9,);
B(B_VARIN,,100.0,61,8,63,10,);
B(B_VARIN,,MXminEngineSpeed,61,5,63,7,);
B(B_F,sel,,30,6,35,11,);
B(B_F,@AND-2,,23,3,28,7,0N);
B(B_VARIN,,MXanyFunctActive,21,5,23,7,);
B(B_VARIN,,MXstopLudvPumps,21,4,23,6,);
B(B_VARIN,,LDtempReduct,33,14,35,16,);
B(B_VARIN,,10000.0,35,16,37,18,);
B(B_VARIN,,CDludvIntegrTime,35,15,37,17,);
B(B_F,sel,,37,13,42,18,);
B(B_VARIN,,MDludv3ExtAnaSig,21,13,23,15,);
B(B_VARIN,,MXludv3ExtAnaSig,21,6,23,8,);
B(B_VARIN,,MXludvSectActiv,15,9,17,11,);
B(B_F,sel,,17,8,22,13,);
B(B_VARIN,,0.0,15,10,17,12,);
B(B_VARIN,,0.0,27,12,29,14,);
B(B_F,to_real,,10,11,17,14,);
B(B_VARIN,,100.0,8,12,10,14,);
L(43,7,44,7);
L(43,5,43,7);
L(42,8,44,8);
L(43,9,44,9);
L(43,10,44,10);
L(35,8,37,8);
L(35,9,37,9);
L(43,9,43,15);
L(53,7,63,7);
L(28,9,30,9);
L(29,8,30,8);
L(29,10,30,10);
L(28,5,29,5);
L(29,5,29,8);
L(35,9,35,15);
L(42,15,43,15);
L(36,15,37,15);
L(29,5,36,5);
L(36,5,36,15);
L(23,7,23,9);
L(23,11,23,14);
L(22,10,23,10);
L(29,10,29,13);
L(17,12,17,13);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL := pump4: ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,MXuseLudvPump4,9,1,11,3,);
B(B_JUMP,,next,11,1,13,3,N);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 19 ;
        NETWORK_BODY
B(B_COMMENT,,power stage ludv pump 4,1,1,27,2,);
B(B_F,sel,,22,7,27,12,);
B(B_F,sel,,29,6,34,11,);
B(B_FB,Integrator,Integrator4,43,5,52,11,);
B(B_VARIN,,TRUE,40,4,42,6,);
B(B_F,@MUL-2,,36,6,41,10,);
B(B_FB,PowerStage,PowerStage4,62,4,71,12,);
B(B_VAROUT,,QWludv4,71,5,73,7,);
B(B_VARIN,,CWludv4MinCurPum,60,9,62,11,);
B(B_VARIN,,CWludv4MaxCurPum,60,10,62,12,);
B(B_VARIN,,0.0,60,7,62,9,);
B(B_VARIN,,100.0,60,8,62,10,);
B(B_VARIN,,MXminEngineSpeed,60,5,62,7,);
B(B_F,@AND-2,,22,3,27,7,0N);
B(B_VARIN,,MXanyFunctActive,20,5,22,7,);
B(B_VARIN,,MXstopLudvPumps,20,4,22,6,);
B(B_VARIN,,LDtempReduct,32,14,34,16,);
B(B_VARIN,,10000.0,34,16,36,18,);
B(B_VARIN,,CDludvIntegrTime,34,15,36,17,);
B(B_F,sel,,36,13,41,18,);
B(B_VARIN,,MDludv4ExtAnaSig,20,13,22,15,);
B(B_VARIN,,MXludv4ExtAnaSig,20,6,22,8,);
B(B_VARIN,,MXludvSectActiv,14,9,16,11,);
B(B_F,sel,,16,8,21,13,);
B(B_VARIN,,0.0,14,10,16,12,);
B(B_VARIN,,0.0,26,12,28,14,);
B(B_F,to_real,,9,11,16,14,);
B(B_VARIN,,100.0,7,12,9,14,);
L(27,9,29,9);
L(28,8,29,8);
L(28,10,29,10);
L(42,7,43,7);
L(42,5,42,7);
L(42,9,43,9);
L(42,10,43,10);
L(34,8,36,8);
L(34,9,36,9);
L(41,8,43,8);
L(42,9,42,15);
L(52,7,62,7);
L(27,5,28,5);
L(28,5,28,8);
L(34,9,34,15);
L(41,15,42,15);
L(35,15,36,15);
L(35,5,35,15);
L(28,5,35,5);
L(21,10,22,10);
L(22,7,22,9);
L(22,11,22,14);
L(28,10,28,13);
L(16,12,16,13);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL := next: ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 15 ;
        NETWORK_BODY
B(B_COMMENT,,select pressure depend on operation,1,1,27,2,);
B(B_VARIN,,MWludvExtPresSig,9,4,11,6,);
B(B_VARIN,,0,9,5,11,7,);
B(B_VARIN,,MWludvExtPresSig,9,8,11,10,);
B(B_VARIN,,CWludvPressure,9,9,11,11,);
B(B_F,@EQ-2,,11,3,16,7,);
B(B_F,@EQ-2,,11,7,16,11,);
B(B_F,@OR-2,,16,6,21,10,);
B(B_F,sel,,21,9,26,14,);
B(B_F,uint_to_real,,26,9,37,12,);
B(B_VAROUT,,LDludvPress,37,10,39,12,);
B(B_VARIN,,CWludvPressure,19,12,21,14,);
B(B_VARIN,,MWludvExtPresSig,19,11,21,13,);
L(16,5,16,8);
L(21,8,21,11);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 5 ;
        NETWORK_BODY
B(B_VARIN,,CWpConLudvMaxVal,9,2,11,4,);
B(B_F,uint_to_real,,11,1,22,4,);
B(B_VAROUT,,LDpConLudvMaxVal,22,2,24,4,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 26 ;
        NETWORK_BODY
B(B_COMMENT,,calculation pressure control signal for ludv pumps,1,1,27,2,);
B(B_VAROUT,,LDcalcCurrent1,29,5,31,7,);
B(B_VAROUT,,LDludvPressSig,29,6,31,8,);
B(B_VAROUT,,LDcalcComp1,29,7,31,9,);
B(B_VARIN,,LDludvPress,9,5,11,7,);
B(B_VARIN,,CWludvPreContMin,9,8,11,10,);
B(B_VARIN,,100.0,9,7,11,9,);
B(B_VARIN,,CWpConLudv100bar,9,10,11,12,);
B(B_VARIN,,CWpConLudv150bar,9,11,11,13,);
B(B_VARIN,,CWpConLudv200bar,9,12,11,14,);
B(B_VARIN,,CWpConLudv250bar,9,13,11,15,);
B(B_VARIN,,CWpConLudv300bar,9,14,11,16,);
B(B_VARIN,,CWpConLudv50bar,9,9,11,11,);
B(B_VARIN,,LDpConLudvMaxVal,9,6,11,8,);
B(B_VARIN,,CWludvPreContMax,9,19,11,21,);
B(B_FB,ADcalculateQV024,ADcalculateQ1,11,4,29,25,);
L(11,16,11,20);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 21 ;
        NETWORK_BODY
B(B_COMMENT,,power stage pressure control ludv pump,1,1,27,2,);
B(B_FB,PowerStage,PowerStage5,11,10,20,18,);
B(B_VARIN,,CWludvPreContMin,9,15,11,17,);
B(B_VARIN,,CWludvPreContMax,9,16,11,18,);
B(B_VARIN,,0.0,9,13,11,15,);
B(B_VARIN,,100.0,9,14,11,16,);
B(B_VARIN,,LDludvPressSig,9,12,11,14,);
B(B_VARIN,,MXminEngineSpeed,9,11,11,13,);
B(B_VARIN,,MWludvExtPreCont,9,5,11,7,);
B(B_F,@GT-2,,11,4,16,8,);
B(B_VARIN,,0,9,6,11,8,);
B(B_F,@AND-2,,16,5,21,9,);
B(B_F,sel,,21,9,26,14,);
B(B_VAROUT,,QWludvPressCont,26,10,28,12,);
B(B_VARIN,,MWludvExtPreCont,19,18,21,20,);
L(16,6,16,7);
L(11,8,11,12);
L(11,8,16,8);
L(20,12,21,12);
L(21,13,21,19);
L(21,7,21,11);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,exit program,1,1,27,2,);
B(B_VARIN,,TRUE,9,3,11,5,);
B(B_RETURN,,,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL := init: ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,init program,1,1,27,2,);
B(B_VARIN,,TRUE,9,3,11,5,);
B(B_VAROUT,,LXinitOk,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value minimum current ludv pump 1,1,1,27,2,);
B(B_FB,CorrValue_UInt,CorrValue_UInt1,11,4,23,10,);
B(B_VARIN,,220,9,5,11,7,);
B(B_VARIN,,150,9,6,11,8,);
B(B_VARIN,,350,9,7,11,9,);
B(B_VARIN,,CWludv1MinCurPum,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value maximum current ludv pump 1,1,1,27,2,);
B(B_FB,CorrValue_UInt,CorrValue_UInt2,11,4,23,10,);
B(B_VARIN,,780,9,5,11,7,);
B(B_VARIN,,500,9,6,11,8,);
B(B_VARIN,,850,9,7,11,9,);
B(B_VARIN,,CWludv1MaxCurPum,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value minimum current ludv pump 2,1,1,27,2,);
B(B_FB,CorrValue_UInt,CorrValue_UInt3,11,4,23,10,);
B(B_VARIN,,220,9,5,11,7,);
B(B_VARIN,,150,9,6,11,8,);
B(B_VARIN,,350,9,7,11,9,);
B(B_VARIN,,CWludv2MinCurPum,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value maximum current ludv pump 2,1,1,27,2,);
B(B_FB,CorrValue_UInt,CorrValue_UInt4,11,4,23,10,);
B(B_VARIN,,780,9,5,11,7,);
B(B_VARIN,,500,9,6,11,8,);
B(B_VARIN,,850,9,7,11,9,);
B(B_VARIN,,CWludv2MaxCurPum,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value minimum current ludv pump 3,1,1,27,2,);
B(B_FB,CorrValue_UInt,CorrValue_UInt37,11,4,23,10,);
B(B_VARIN,,220,9,5,11,7,);
B(B_VARIN,,150,9,6,11,8,);
B(B_VARIN,,350,9,7,11,9,);
B(B_VARIN,,CWludv3MinCurPum,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value maximum current ludv pump 3,1,1,27,2,);
B(B_FB,CorrValue_UInt,CorrValue_UInt38,11,4,23,10,);
B(B_VARIN,,780,9,5,11,7,);
B(B_VARIN,,500,9,6,11,8,);
B(B_VARIN,,850,9,7,11,9,);
B(B_VARIN,,CWludv3MaxCurPum,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value minimum current ludv pump 4,1,1,27,2,);
B(B_FB,CorrValue_UInt,CorrValue_UInt39,11,4,23,10,);
B(B_VARIN,,220,9,5,11,7,);
B(B_VARIN,,150,9,6,11,8,);
B(B_VARIN,,350,9,7,11,9,);
B(B_VARIN,,CWludv4MinCurPum,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value maximum current ludv pump 4,1,1,27,2,);
B(B_FB,CorrValue_UInt,CorrValue_UInt40,11,4,23,10,);
B(B_VARIN,,780,9,5,11,7,);
B(B_VARIN,,500,9,6,11,8,);
B(B_VARIN,,850,9,7,11,9,);
B(B_VARIN,,CWludv4MaxCurPum,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value integrator time down grap control,1,1,27,2,);
B(B_VARIN,,100.0,9,5,11,7,);
B(B_VARIN,,10.0,9,6,11,8,);
B(B_VARIN,,500.0,9,7,11,9,);
B(B_VARIN,,CDludvIntegrTime,9,8,11,10,);
B(B_FB,CorrValue_Real,CorrValue_Real1,11,4,23,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value leakoil compensation signal in [%],1,1,27,2,);
B(B_FB,CorrValue_Real,CorrValue_Real2,11,4,23,10,);
B(B_VARIN,,CDludvLeakOilSig,9,8,11,10,);
B(B_VARIN,,10.0,9,5,11,7,);
B(B_VARIN,,0.0,9,6,11,8,);
B(B_VARIN,,30.0,9,7,11,9,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_COMMENT,,correction value minimum current pressure control valve LUDV pump,1,2,27,3,);
B(B_FB,CorrValue_UInt,CorrValue_UInt5,11,5,23,11,);
B(B_VARIN,,100,9,6,11,8,);
B(B_VARIN,,10,9,7,11,9,);
B(B_VARIN,,450,9,8,11,10,);
B(B_VARIN,,CWludvPreContMin,9,9,11,11,);
B(B_COMMENT,,LUDV PRESSURE CONTROL,0,1,26,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value maximum current pressure control valve LUDV pump,1,1,27,2,);
B(B_FB,CorrValue_UInt,CorrValue_UInt6,11,4,23,10,);
B(B_VARIN,,800,9,5,11,7,);
B(B_VARIN,,450,9,6,11,8,);
B(B_VARIN,,1000,9,7,11,9,);
B(B_VARIN,,CWludvPreContMax,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value ludv pressure control maximum value [bar],1,1,27,2,);
B(B_FB,CorrValue_UInt,CorrValue_UInt7,11,4,23,10,);
B(B_VARIN,,350,9,5,11,7,);
B(B_VARIN,,0,9,6,11,8,);
B(B_VARIN,,400,9,7,11,9,);
B(B_VARIN,,CWpConLudvMaxVal,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value ludv pressure for standard operation [bar],1,1,27,2,);
B(B_FB,CorrValue_UInt,CorrValue_UInt8,11,4,23,10,);
B(B_VARIN,,330,9,5,11,7,);
B(B_VARIN,,100,9,6,11,8,);
B(B_VARIN,,400,9,7,11,9,);
B(B_VARIN,,CWludvPressure,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value ludv pressure control current for 50bar,1,1,27,2,);
B(B_FB,CorrValue_UInt,CorrValue_UInt9,11,4,23,10,);
B(B_VARIN,,150,9,5,11,7,);
B(B_VARIN,,CWludvPreContMin,9,6,11,8,);
B(B_VARIN,,CWludvPreContMax,9,7,11,9,);
B(B_VARIN,,CWpConLudv50bar,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value ludv pressure control current for 100bar,1,1,27,2,);
B(B_FB,CorrValue_UInt,CorrValue_UInt10,11,4,23,10,);
B(B_VARIN,,250,9,5,11,7,);
B(B_VARIN,,CWludvPreContMin,9,6,11,8,);
B(B_VARIN,,CWludvPreContMax,9,7,11,9,);
B(B_VARIN,,CWpConLudv100bar,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value ludv pressure control current for 150bar,1,1,27,2,);
B(B_FB,CorrValue_UInt,CorrValue_UInt11,11,4,23,10,);
B(B_VARIN,,350,9,5,11,7,);
B(B_VARIN,,CWludvPreContMin,9,6,11,8,);
B(B_VARIN,,CWludvPreContMax,9,7,11,9,);
B(B_VARIN,,CWpConLudv150bar,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value ludv pressure control current for 200bar,1,1,27,2,);
B(B_FB,CorrValue_UInt,CorrValue_UInt12,11,4,23,10,);
B(B_VARIN,,450,9,5,11,7,);
B(B_VARIN,,CWludvPreContMin,9,6,11,8,);
B(B_VARIN,,CWludvPreContMax,9,7,11,9,);
B(B_VARIN,,CWpConLudv200bar,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value ludv pressure control current for 250bar,1,1,27,2,);
B(B_FB,CorrValue_UInt,CorrValue_UInt13,11,4,23,10,);
B(B_VARIN,,550,9,5,11,7,);
B(B_VARIN,,CWludvPreContMin,9,6,11,8,);
B(B_VARIN,,CWludvPreContMax,9,7,11,9,);
B(B_VARIN,,CWpConLudv250bar,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value ludv pressure control current for 300bar,1,1,27,2,);
B(B_FB,CorrValue_UInt,CorrValue_UInt14,11,4,23,10,);
B(B_VARIN,,650,9,5,11,7,);
B(B_VARIN,,CWludvPreContMin,9,6,11,8,);
B(B_VARIN,,CWludvPreContMax,9,7,11,9,);
B(B_VARIN,,CWpConLudv300bar,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_COMMENT,,correction value ludv pump 1 maximum value [l/min],1,2,27,3,);
B(B_FB,CorrValue_UInt,CorrValue_UInt15,11,5,23,11,);
B(B_VARIN,,520,9,6,11,8,);
B(B_VARIN,,0,9,7,11,9,);
B(B_VARIN,,900,9,8,11,10,);
B(B_VARIN,,CWp1PumpMaxValue,9,9,11,11,);
B(B_COMMENT,,P1 pump ,0,1,26,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value current p1 pump 50 l/min ,1,1,27,2,);
B(B_FB,CorrValue_UInt,CorrValue_UInt16,11,4,23,10,);
B(B_VARIN,,270,9,5,11,7,);
B(B_VARIN,,CWludv1MinCurPum,9,6,11,8,);
B(B_VARIN,,CWludv1MaxCurPum,9,7,11,9,);
B(B_VARIN,,CWp1Pump50liter,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value current p1 pump 100 l/min ,1,1,27,2,);
B(B_FB,CorrValue_UInt,CorrValue_UInt17,11,4,23,10,);
B(B_VARIN,,320,9,5,11,7,);
B(B_VARIN,,CWludv1MinCurPum,9,6,11,8,);
B(B_VARIN,,CWludv1MaxCurPum,9,7,11,9,);
B(B_VARIN,,CWp1Pump100liter,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value current p1 pump 150 l/min ,1,1,27,2,);
B(B_FB,CorrValue_UInt,CorrValue_UInt18,11,4,23,10,);
B(B_VARIN,,370,9,5,11,7,);
B(B_VARIN,,CWludv1MinCurPum,9,6,11,8,);
B(B_VARIN,,CWludv1MaxCurPum,9,7,11,9,);
B(B_VARIN,,CWp1Pump150liter,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value current p1 pump 200 l/min ,1,1,27,2,);
B(B_FB,CorrValue_UInt,CorrValue_UInt19,11,4,23,10,);
B(B_VARIN,,420,9,5,11,7,);
B(B_VARIN,,CWludv1MinCurPum,9,6,11,8,);
B(B_VARIN,,CWludv1MaxCurPum,9,7,11,9,);
B(B_VARIN,,CWp1Pump200liter,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value current p1 pump 250 l/min ,1,1,27,2,);
B(B_FB,CorrValue_UInt,CorrValue_UInt20,11,4,23,10,);
B(B_VARIN,,470,9,5,11,7,);
B(B_VARIN,,CWludv1MinCurPum,9,6,11,8,);
B(B_VARIN,,CWludv1MaxCurPum,9,7,11,9,);
B(B_VARIN,,CWp1Pump250liter,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value current p1 pump 300 l/min ,1,1,27,2,);
B(B_FB,CorrValue_UInt,CorrValue_UInt21,11,4,23,10,);
B(B_VARIN,,520,9,5,11,7,);
B(B_VARIN,,CWludv1MinCurPum,9,6,11,8,);
B(B_VARIN,,CWludv1MaxCurPum,9,7,11,9,);
B(B_VARIN,,CWp1Pump300liter,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value current p1 pump 350 l/min ,1,1,27,2,);
B(B_FB,CorrValue_UInt,CorrValue_UInt22,11,4,23,10,);
B(B_VARIN,,570,9,5,11,7,);
B(B_VARIN,,CWludv1MinCurPum,9,6,11,8,);
B(B_VARIN,,CWludv1MaxCurPum,9,7,11,9,);
B(B_VARIN,,CWp1Pump350liter,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value current p1 pump 400 l/min ,1,1,27,2,);
B(B_FB,CorrValue_UInt,CorrValue_UInt23,11,4,23,10,);
B(B_VARIN,,620,9,5,11,7,);
B(B_VARIN,,CWludv1MinCurPum,9,6,11,8,);
B(B_VARIN,,CWludv1MaxCurPum,9,7,11,9,);
B(B_VARIN,,CWp1Pump400liter,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value current p1 pump 450 l/min ,1,1,27,2,);
B(B_FB,CorrValue_UInt,CorrValue_UInt24,11,4,23,10,);
B(B_VARIN,,670,9,5,11,7,);
B(B_VARIN,,CWludv1MinCurPum,9,6,11,8,);
B(B_VARIN,,CWludv1MaxCurPum,9,7,11,9,);
B(B_VARIN,,CWp1Pump450liter,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value current p1 pump 500 l/min ,1,1,27,2,);
B(B_FB,CorrValue_UInt,CorrValue_UInt25,11,4,23,10,);
B(B_VARIN,,720,9,5,11,7,);
B(B_VARIN,,CWludv1MinCurPum,9,6,11,8,);
B(B_VARIN,,CWludv1MaxCurPum,9,7,11,9,);
B(B_VARIN,,CWp1Pump500liter,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_COMMENT,,correction value ludv pump 2 maximum value [l/min],1,2,27,3,);
B(B_FB,CorrValue_UInt,CorrValue_UInt26,11,5,23,11,);
B(B_VARIN,,520,9,6,11,8,);
B(B_VARIN,,0,9,7,11,9,);
B(B_VARIN,,900,9,8,11,10,);
B(B_VARIN,,CWp2PumpMaxValue,9,9,11,11,);
B(B_COMMENT,,p2 PUMP ,0,1,26,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value current P2 pump 50 l/min ,1,1,27,2,);
B(B_FB,CorrValue_UInt,CorrValue_UInt27,11,4,23,10,);
B(B_VARIN,,270,9,5,11,7,);
B(B_VARIN,,CWludv2MinCurPum,9,6,11,8,);
B(B_VARIN,,CWludv2MaxCurPum,9,7,11,9,);
B(B_VARIN,,CWp2Pump50liter,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value current p2 pump 100 l/min ,1,1,27,2,);
B(B_FB,CorrValue_UInt,CorrValue_UInt28,11,4,23,10,);
B(B_VARIN,,320,9,5,11,7,);
B(B_VARIN,,CWludv2MinCurPum,9,6,11,8,);
B(B_VARIN,,CWludv2MaxCurPum,9,7,11,9,);
B(B_VARIN,,CWp2Pump100liter,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value current P2 pump 150 l/min ,1,1,27,2,);
B(B_FB,CorrValue_UInt,CorrValue_UInt29,11,4,23,10,);
B(B_VARIN,,370,9,5,11,7,);
B(B_VARIN,,CWludv2MinCurPum,9,6,11,8,);
B(B_VARIN,,CWludv2MaxCurPum,9,7,11,9,);
B(B_VARIN,,CWp2Pump150liter,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value current P2 pump 200 l/min ,1,1,27,2,);
B(B_FB,CorrValue_UInt,CorrValue_UInt30,11,4,23,10,);
B(B_VARIN,,420,9,5,11,7,);
B(B_VARIN,,CWludv2MinCurPum,9,6,11,8,);
B(B_VARIN,,CWludv2MaxCurPum,9,7,11,9,);
B(B_VARIN,,CWp2Pump200liter,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value current P2 pump 250 l/min ,1,1,27,2,);
B(B_FB,CorrValue_UInt,CorrValue_UInt31,11,4,23,10,);
B(B_VARIN,,470,9,5,11,7,);
B(B_VARIN,,CWludv2MinCurPum,9,6,11,8,);
B(B_VARIN,,CWludv2MaxCurPum,9,7,11,9,);
B(B_VARIN,,CWp2Pump250liter,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value current P2 pump 300 l/min ,1,1,27,2,);
B(B_FB,CorrValue_UInt,CorrValue_UInt32,11,4,23,10,);
B(B_VARIN,,520,9,5,11,7,);
B(B_VARIN,,CWludv2MinCurPum,9,6,11,8,);
B(B_VARIN,,CWludv2MaxCurPum,9,7,11,9,);
B(B_VARIN,,CWp2Pump300liter,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value current P2 pump 350 l/min ,1,1,27,2,);
B(B_FB,CorrValue_UInt,CorrValue_UInt33,11,4,23,10,);
B(B_VARIN,,570,9,5,11,7,);
B(B_VARIN,,CWludv2MinCurPum,9,6,11,8,);
B(B_VARIN,,CWludv2MaxCurPum,9,7,11,9,);
B(B_VARIN,,CWp2Pump350liter,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value current P2 pump 400 l/min ,1,1,27,2,);
B(B_FB,CorrValue_UInt,CorrValue_UInt34,11,4,23,10,);
B(B_VARIN,,620,9,5,11,7,);
B(B_VARIN,,CWludv2MinCurPum,9,6,11,8,);
B(B_VARIN,,CWludv2MaxCurPum,9,7,11,9,);
B(B_VARIN,,CWp2Pump400liter,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value current P2 pump 450 l/min ,1,1,27,2,);
B(B_FB,CorrValue_UInt,CorrValue_UInt35,11,4,23,10,);
B(B_VARIN,,670,9,5,11,7,);
B(B_VARIN,,CWludv2MinCurPum,9,6,11,8,);
B(B_VARIN,,CWludv2MaxCurPum,9,7,11,9,);
B(B_VARIN,,CWp2Pump450liter,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value current P2 pump 500 l/min ,1,1,27,2,);
B(B_FB,CorrValue_UInt,CorrValue_UInt36,11,4,23,10,);
B(B_VARIN,,720,9,5,11,7,);
B(B_VARIN,,CWludv2MinCurPum,9,6,11,8,);
B(B_VARIN,,CWludv2MaxCurPum,9,7,11,9,);
B(B_VARIN,,CWp2Pump500liter,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
END_BODY
END_PROGRAM

PROGRAM SCprogV550
	VAR_EXTERNAL 
		IXhgRelFreefall: BOOL:=FALSE;
			(*main switch release freefall*)
		IXunsecuredFreef: BOOL:=FALSE;
			(*key switch 2: unsecured freefall*)
		IXseleOperatMode: BOOL:=FALSE;
			(*select operation mode*)
		IXhg1FeedPressOk: BOOL:=FALSE;
			(*feed pressure HG 1 o.k.*)
		IXhg2FeedPressOk: BOOL:=FALSE;
			(*feed pressure HG 2 o.k.*)
		IXgearOilTempOk: BOOL:=FALSE;
			(*gear oil temperature o.k.*)
		IXengSpeedHighW: BOOL:=FALSE;
			(*engine engine speed high warning*)
		IXengSpeedHighE: BOOL:=FALSE;
			(*engine engine speed high error*)
		IXengLubOilPresW: BOOL:=FALSE;
			(*engine lub oil pressure warning*)
		IXengLubOilPresE: BOOL:=FALSE;
			(*engine lub oil pressure error*)
		IXengCooWatTempW: BOOL:=FALSE;
			(*engine cooling water temperature warning*)
		IXengCooWatTempE: BOOL:=FALSE;
			(*engine cooling water temperature error*)
		IXengChaAirTempW: BOOL:=FALSE;
			(*engine charge air temperature warning*)
		IXengChaAirTempE: BOOL:=FALSE;
			(*engine charge air temperature error*)
		IXengPowerRedHig: BOOL:=FALSE;
			(*engine power reduction, high altitude*)
		IXengPowerRedTem: BOOL:=FALSE;
			(*engine power reduction, high temperatures, fuel pressure regulation*)
		IXengLubOilCoLoE: BOOL:=FALSE;
			(*engine lub oil content low error*)
		IXengLubOilCoHiE: BOOL:=FALSE;
			(*engine lub oil content high error*)
		IXengLubOilCoAct: BOOL:=FALSE;
			(*engine lub oil content function active*)
		IXengFuelTempW: BOOL:=FALSE;
			(*engine fuel temperature warning*)
		IXengFuelTempE: BOOL:=FALSE;
			(*engine fuel temperature error*)
		IXengWaterInFuel: BOOL:=FALSE;
			(*engine water in fuel filter*)
		IXengFuelPresRaW: BOOL:=FALSE;
			(*engine fuel pressure warning rail 1 or 2*)
		IXengFuelPresRaE: BOOL:=FALSE;
			(*engine fuel pressure error rail 1 or 2*)
		IXengFuelPressWa: BOOL:=FALSE;
			(*engine fuel pressure warning (low or high)*)
		IXengFuelPressEr: BOOL:=FALSE;
			(*engine fuel pressure error (low or high)*)
		IXengAirFilterW: BOOL:=FALSE;
			(*engine air filter pressure low warning*)
		IXengAirFilterE: BOOL:=FALSE;
			(*engine air filter pressure low error*)
		IXengCoolWatConW: BOOL:=FALSE;
			(*engine cooling water contetnt warning*)
		IXengCoolWatConE: BOOL:=FALSE;
			(*engine cooling water contetnt error*)
		IXengPreheatActi: BOOL:=FALSE;
			(*engine preheat system active*)
		IXengPreheatStar: BOOL:=FALSE;
			(*engine preheat system ready for engine start*)
		IXengPostheatAct: BOOL:=FALSE;
			(*engine preheat system active at running engine*)
		IXengAgnMilWarn: BOOL:=FALSE;
			(*engine exhuast aftertreatment warning (MIL)*)
		IXengAgnMilError: BOOL:=FALSE;
			(*engine exhuast aftertreatment error (MIL)*)
		IXhg1UpperLimOk: BOOL:=FALSE;
			(*upper limit switch hoisting gear 1 o.k.*)
		IXhg2UpperLimOk: BOOL:=FALSE;
			(*upper limit switch hoisting gear 2 o.k.*)
		IXlgUpperLimOk: BOOL:=FALSE;
			(*upper limit switch luffing gear 1 o.k.*)
		IXlg2UpperLimOk: BOOL:=FALSE;
			(*upper limit switch lg2,  jib stabilisation is not locked in flap*)
		IXlg2LowerLimOk: BOOL:=FALSE;
			(*lower limit switch luffing gear 2 o.k.*)
		IXlgAFraUppLimOk: BOOL:=FALSE;
			(*upper limit switch main boom a-frame (6 degree)*)
		IXlgUppLimDerrAO: BOOL:=FALSE;
			(*upper limit sw. assembly operating position for derrick*)
		IXlgUppLimDerrOp: BOOL:=FALSE;
			(*upper limit sw. operating position derrick opening switch*)
		IXderrLowerLimOk: BOOL:=FALSE;
			(*derrick winch lower limit switch*)
		IXadPersSlackRop: BOOL:=FALSE;
			(*upper limit sw. operating position derrick opening switch / add personal winch: slack rope switch*)
		IXadPersCrankMon: BOOL:=FALSE;
			(*upper limit sw. operating position derrick closing switch / add personal winch: crank emergency drop mounted/derrick lg upper limit switch normal operating position for derrick *)
		IXaddUpperLimOk: BOOL:=FALSE;
			(*upper limit sw. assembly operating position for derrick / add: additional/passenger winch upper limit switch  o.k.*)
		IXaddLowerLimOk: BOOL:=FALSE;
			(*derrick winch lower limit switch / add: additional/passenger winch lower limit switch  o.k.*)
		QXhg1BrakeNormal: BOOL:=FALSE;
			(*hoisting gear 1 brake*)
		QXhg1BrakeFastSp: BOOL:=FALSE;
			(*hoisting gear 1 brake*)
		QXhg1Clutch: BOOL:=FALSE;
			(*hoisting gear 1 clutch*)
		QXhg2BrakeNormal: BOOL:=FALSE;
			(*hoisting gear 2 brake*)
		QXhg2BrakeFastSp: BOOL:=FALSE;
			(*hoisting gear 1 brake*)
		QXhg2Clutch: BOOL:=FALSE;
			(*hoisting gear 2 clutch*)
		QXlgBrake: BOOL:=FALSE;
			(*luffing gear 1 brake*)
		QXlg2Brake: BOOL:=FALSE;
			(*luffing gear 2 brake*)
		QXderrickWiBrake: BOOL:=FALSE;
			(*derrick winch brake*)
		QXsgBrake: BOOL:=FALSE;
			(*slewing gear brake*)
		QXddGearBox: BOOL:=FALSE;
			(*magnetise off/dd gear box/brake right hose winch/grab adj. S2 front/back*)
		MXlidec1: BOOL:=FALSE;
			(*EDC is LIDEC 1 or compatibel*)
		MXstopAllFunctio: BOOL:=FALSE;
			(*stop all excavator functions*)
		MXstopModulError: BOOL:=FALSE;
			(*set stop in case of module error*)
		MXswitTravelGear: BOOL:=FALSE;
			(*travelling gear is activated*)
		MXminEngineSpeed: BOOL:=FALSE;
			(*minimum engine speed reached*)
		MXengStarterActi: BOOL:=FALSE;
			(*engine starter activated*)
		MXmachWiGearBox: BOOL:=FALSE;
			(*machine with gear box*)
		MXhgByLudvSectio: BOOL:=FALSE;
			(*hg driven by LUDV section*)
		MXfuelContWarn: BOOL:=FALSE;
			(*fuel content too low warning*)
		MXfuelContError: BOOL:=FALSE;
			(*fuel content too low error*)
		MXwindSpeedAct: BOOL:=FALSE;
			(*wind speed sensor present*)
		MXwindSpeedWarn: BOOL:=FALSE;
			(*wind speed high warning*)
		MXwindSpeedError: BOOL:=FALSE;
			(*wind speed high error*)
		MXwarnHydrOilTem: BOOL:=FALSE;
			(*hydraulic oil temperature warning*)
		MXhydrOilContWar: BOOL:=FALSE;
			(*hydraulic oil tank content warning*)
		MXhydrOilContErr: BOOL:=FALSE;
			(*hydraulic oil tank content error*)
		MXhydrOilContHig: BOOL:=FALSE;
			(*hydraulic oil tank content to high*)
		MXhydrOilLeakage: BOOL:=FALSE;
			(*hydraulic oil tank content leakage*)
		MXhydrOilShOffOk: BOOL:=FALSE;
			(*hydraulic oil tank shut off device OK*)
		MXengChargingOFF: BOOL:=FALSE;
			(*engine PLD battery charging*)
		MXlgSpeed2: BOOL:=FALSE;
			(*LG speed 2*)
		MXlgSpeed3: BOOL:=FALSE;
			(*LG speed 3*)
		MXsgSpeed2: BOOL:=FALSE;
			(*SG speed 2*)
		MXsgSpeed3: BOOL:=FALSE;
			(*SG speed 3*)
		MXemergOperat: BOOL:=FALSE;
			(*ad emergency operation*)
		MXassemblyOperat: BOOL:=FALSE;
			(*assembly operation*)
		MXremContPresel: BOOL:=FALSE;
			(*remote control preselected by X12 Button*)
		MXremContActive: BOOL:=FALSE;
			(*remote control activated*)
		MXrcChangeContro: BOOL:=FALSE;
			(*remote control switching control rc / cabine*)
		MXremContRadioOk: BOOL:=FALSE;
			(*remote control radio connection ok*)
		MXlmlWarning: BOOL:=FALSE;
			(*lml warning*)
		MXlmlStopScreen: BOOL:=FALSE;
			(*lml stop symbol on screen*)
		MXlmlStopScrBack: BOOL:=FALSE;
			(*lml stop symbol backwards on screen*)
		MXlmlDeactive: BOOL:=FALSE;
			(*lml active*)
		MXlmlMainRedEnab: BOOL:=FALSE;
			(*lml main boom reduction enabled*)
		MXlmlFixedJibEna: BOOL:=FALSE;
			(*lml fixed jib enabled*)
		MXlmlLoadMainMid: BOOL:=FALSE;
			(*lml load location on main boom and luffing jib mounted*)
		MXlmlMidfall: BOOL:=FALSE;
			(*lml Midfall*)
		MXlmlDerrickEnab: BOOL:=FALSE;
			(*lml derrick enabled*)
		MXcouCarActive: BOOL:=FALSE;
			(*counterweight carrier active*)
		MXlmlBridged: BOOL:=FALSE;
			(*X23 lml bridged*)
		MXlmlErrAngPivPi: BOOL:=FALSE;
			(*lml error angle sensor pivot piece main boom*)
		MXlmlErrGeometri: BOOL:=FALSE;
			(*lml error geometrical sensors*)
		MXlmlErrLoaCalc: BOOL:=FALSE;
			(*lml error sensors load calculation*)
		MXlmlErrLoaCaDer: BOOL:=FALSE;
			(*lml error sensors load calculation derrick*)
		MXhg1WinchLift: BOOL:=FALSE;
			(*hoisting gear 1 winch is lifting*)
		MXhg1WinchLower: BOOL:=FALSE;
			(*hoisting gear 2 winch is lowering*)
		MXhg2WinchLift: BOOL:=FALSE;
			(*hoisting gear 1 winch is lifting*)
		MXhg2WinchLower: BOOL:=FALSE;
			(*hoisting gear 2 winch is lowering*)
		MXextResRopeHg1: BOOL:=FALSE;
			(*external reset rope lenght hoisting gear 1*)
		MXextResRopeHg2: BOOL:=FALSE;
			(*external reset rope lenght hoisting gear 2*)
		MXresetOpHour: BOOL:=FALSE;
			(*reset operational houres*)
		MXhg1pselFreefal: BOOL:=FALSE;
			(*hoisting gear 1 preselected freefall*)
		MXhg2pselFreefal: BOOL:=FALSE;
			(*hoisting gear 2 preselected freefall*)
		MXfeedFiltWarn: BOOL:=FALSE;
			(*feed pressure filter warning*)
		MXlmlCalculating: BOOL:=FALSE;
			(*lml is calculating with new adjustments*)
		MXwarnSuppCrane: BOOL:=FALSE;
			(*warning supplementary crane needed*)
		MXhg1FaSpe2ndPum: BOOL:=FALSE;
			(*hg 1 fast speed by second pump (2 pumps 1 winch)*)
		MXhg2FaSpe2ndPum: BOOL:=FALSE;
			(*hg 2 fast speed by second pump (2 pumps 1 winch)*)
		MXhgSpecialLift: BOOL:=FALSE;
			(*hg special sensitive lifting function active*)
		MXfloaCouWeigAct: BOOL:=FALSE;
			(*floating counterweight active*)
		MXderrickActive: BOOL:=FALSE;
			(*derrick winch active*)
		MXlgMoveDerrick: BOOL:=FALSE;
			(*lg is moving derrick*)
		MXscOneLimitSw: BOOL:=FALSE;
			(*screen: one or more limit switch symbols are active*)
		MXscMoreLimitSw: BOOL:=FALSE;
			(*screen: more limit switch symbols are active*)
		MXadHg1LoweLimit: BOOL:=FALSE;
			(*lower limit switch for hoisting gear 1*)
		MXadHg2LoweLimit: BOOL:=FALSE;
			(*lower limit switch for hoisting gear 2*)
		MXlgUpStopFaBaSu: BOOL:=FALSE;
			(*lg up stop by fall back support angle and limit switch*)
		MXhg1AnalSigPos: BOOL:=FALSE;
			(*hoisting gear 1 analog signal positiv*)
		MXhg1AnalSigNeg: BOOL:=FALSE;
			(*hoisting gear 1 analog signal negativ*)
		MXhg2AnalSigPos: BOOL:=FALSE;
			(*hoisting gear 2 analog signal positiv*)
		MXhg2AnalSigNeg: BOOL:=FALSE;
			(*hoisting gear 2 analog signal negativ*)
		MXlmlBlockHg1: BOOL:=FALSE;
			(*lml block hg1 by load location 2 and lml mode 3*)
		MXlmlBlockHg2: BOOL:=FALSE;
			(*lml block hg2 by load location 2 and lml mode 3*)
		MXlgAnalSigPos: BOOL:=FALSE;
			(*luffing gear 1 analog signal positiv*)
		MXlgAnalSigNeg: BOOL:=FALSE;
			(*luffing gear 1 analog signal negativ*)
		MXlg2AnalSigPos: BOOL:=FALSE;
			(*luffing gear 2 analog signal positiv*)
		MXlg2AnalSigNeg: BOOL:=FALSE;
			(*luffing gear 2 analog signal negativ*)
		MXderrAnaSigPos: BOOL:=FALSE;
			(*derrick winch analog signal positiv*)
		MXderrAnaSigNeg: BOOL:=FALSE;
			(*derrick winch analog signal negativ*)
		MXlg2UpAngleStop: BOOL:=FALSE;
			(*lg2 stop up by angle*)
		MXlgStopUpByFlap: BOOL:=FALSE;
			(*global stop main boom topping down by luffing jib stabilization flap*)
		MXlgStopDnByFlap: BOOL:=FALSE;
			(*global stop main boom topping up by luffing jib stabilization flap*)
		MXlgUpAngleStop: BOOL:=FALSE;
			(*luffing gear up stop by angle*)
		MXlgDnAngleStop: BOOL:=FALSE;
			(*luffing gear down stop by angle*)
		MXreturnFiltWarn: BOOL:=FALSE;
			(*return flow filter warning*)
		MXlg2DnAngleStop: BOOL:=FALSE;
			(*lg2 stop down by angle*)
		MXenabHangLeader: BOOL:=FALSE;
			(*add. enable hanging leader*)
		MXz4InPresel: BOOL:=FALSE;
			(*Z4 cyl. preselect in*)
		MXz2OutPresel: BOOL:=FALSE;
			(*Z2 cyl. preselect out*)
		MXz17OutPresel: BOOL:=FALSE;
			(*Z17 cyl. preselect out*)
		MXslidTablePrese: BOOL:=FALSE;
			(*preselection leader high adjusting winch*)
		MXleadHighWinPre: BOOL:=FALSE;
			(*preselection leader high adjusting winch*)
		MXslidTablAutoUp: BOOL:=FALSE;
			(*sliding table automatic up when table changes angle *)
		MXslidTabStopUp: BOOL:=FALSE;
			(*stop sliding table up when crashes with pivot piece *)
		MXresRopeLenHg1: BOOL:=FALSE;
			(*reset rope lenght hoisting gear 1*)
		MXresRopeLenHg2: BOOL:=FALSE;
			(*reset rope lenght hoisting gear 2*)
		MXhg1EnChangeLay: BOOL:=FALSE;
			(*enable hoisting gear 1 change layer*)
		MXhg2EnChangeLay: BOOL:=FALSE;
			(*enable hoisting gear 2 change layer*)
		MXchangeLayer1_2: BOOL:=FALSE;
			(*set change layer 1 to 2*)
		MXchangeLayer3_4: BOOL:=FALSE;
			(*set change layer 3 to 4*)
		MXchangeLayer5_6: BOOL:=FALSE;
			(*set change layer 5 to 6*)
		MXresetFuelCon: BOOL:=FALSE;
			(*reset fuel consumption*)
		MXsafetyProgPRA: BOOL:=FALSE;
			(*safety program power reduction active*)
		MXengSpeedStore: BOOL:=FALSE;
			(*store present engine speed*)
		MXengRequireRep: BOOL:=FALSE;
			(*engine required motor reparation*)
		MXengRequireStop: BOOL:=FALSE;
			(*engine required motor stop *)
		MXengDefWarn: BOOL:=FALSE;
			(*engine DEF content warning*)
		MXengDefError: BOOL:=FALSE;
			(*engine DEF content error*)
		MXadOilHeatAct: BOOL:=FALSE;
			(*additional device oil heating active*)
		MXlmlBlockCrawle: BOOL:=FALSE;
			(*lml blocked crawlers active*)
		MXlmlSounder: BOOL:=FALSE;
			(*reset sounder lml by function key F8*)
		MXsgEnPowStage: BOOL:=FALSE;
			(*slewing gear enable power stage right or left*)
		MXwalLgMin: BOOL:=FALSE;
			(*wal stop lg minimum radius*)
		MXwalLgMax: BOOL:=FALSE;
			(*wal stop lg maximum radius*)
		MXwalLg2Min: BOOL:=FALSE;
			(*wal stop lg2 minimum radius*)
		MXwalLg2Max: BOOL:=FALSE;
			(*wal stop lg2 maximum radius*)
		MXwalSgStopLeft: BOOL:=FALSE;
			(*wal stop sg left*)
		MXwalSgStopRight: BOOL:=FALSE;
			(*wal stop sg right*)
		MXbbActiveSymbol: BOOL:=FALSE;
			(*blackbox show active recording symbol*)
		MXbbInitSymbol: BOOL:=FALSE;
			(*blackbox show initializing symbol*)
		MXbbErrorSymbol: BOOL:=FALSE;
			(*blackbox show error symbol*)
		MXdpfHEST: BOOL:=FALSE;
			(*engine DPF high exhaust temperature by active regeneration*)
		MXdpfWarn: BOOL:=FALSE;
			(*engine DPF warning*)
		MXdpfError: BOOL:=FALSE;
			(*engine DPF error*)
		MXdpfInitPossib: BOOL:=FALSE;
			(*engine DPF manual initialisation possible*)
		MXdpfDisabPossib: BOOL:=FALSE;
			(*engine DPF manual disabling possible*)
		MXdpfRegDisable: BOOL:=FALSE;
			(*engine DPF regeneration disabled*)
		MXdpfRegBlocked: BOOL:=FALSE;
			(*engine DPF regeneration disabled*)
		MXdpfRegManActiv: BOOL:=FALSE;
			(*engine DPF manual regeneration activated*)
		MXdpfRegInitiat: BOOL:=FALSE;
			(*engine DPF regeneration initiated*)
		MXnewModeSelect: BOOL:=FALSE;
			(*new mode is selected*)
		MXmoorAnaSigNeg: BOOL:=FALSE;
			(*mooring analog signal negativ*)
		MXmoorAnaSigPos: BOOL:=FALSE;
			(*mooring analog signal positiv*)
		MXecHG1StopUp: BOOL:=FALSE;
			(*external control stop hoisting gear 1 lifting*)
		MXecHG1StopDn: BOOL:=FALSE;
			(*external control stop hoisting gear 1 lowering*)
		MXecHG2StopUp: BOOL:=FALSE;
			(*external control stop hoisting gear 2 lifting*)
		MXecHG2StopDn: BOOL:=FALSE;
			(*external control stop hoisting gear 2 lowering*)
		MXhg1EnabFastSpe: BOOL:=FALSE;
			(*enable fast speed operation hg1*)
		MXhg2EnabFastSpe: BOOL:=FALSE;
			(*enable fast speed operation hg2*)
		MXhg1LedFastSpe: BOOL:=FALSE;
			(*enable led fast speed operation hg1*)
		MXhg2LedFastSpe: BOOL:=FALSE;
			(*enable led fast speed operation hg2*)
		MXhg1MooringLift: BOOL:=FALSE;
			(*hg1 mooring lifting (constant tension)*)
		MXhg2MooringLift: BOOL:=FALSE;
			(*hg2 mooring lifting (constant tension)*)
		MXpassWinchActiv: BOOL:=FALSE;
			(*passenger winch active*)
		MXaFrameCylPrese: BOOL:=FALSE;
			(*a frame cylinder preselcted*)
		MXrelAFrameCyl: BOOL:=FALSE;
			(*a frame cylinder released*)
		MXpwAnalSigPos: BOOL:=FALSE;
			(*passenger winch anlog signal positive*)
		MXpwAnalSigNeg: BOOL:=FALSE;
			(*passenger winch anlog signal negativ*)
		MXadSBHydrGrab: BOOL:=FALSE;
			(*add. soletanche bachy hydraulic grab control*)
		MXadSMHydrGrab: BOOL:=FALSE;
			(*add. soilmec hydraulic grab control*)
		MXadLEHydrGrab: BOOL:=FALSE;
			(*add. leffer hydraulic grab control*)
		MXecLGStopUp: BOOL:=FALSE;
			(*external control stop luffing gear lifting*)
		MXecLGStopDn: BOOL:=FALSE;
			(*external control stop luffing gear lowering*)
		MXecAuxWinStopUp: BOOL:=FALSE;
			(*external control stop auxiliary winch lifting*)
		MXecAuxWinStopDn: BOOL:=FALSE;
			(*external control stop auxiliary winch lowering*)
		MXenabAutHoseWin: BOOL:=FALSE;
			(*add. hydraulic grab automatic hose winch*)
		MXenabKelGrabOpe: BOOL:=FALSE;
			(*enable add. kelly grab operation*)
		MXenabHyGrabHose: BOOL:=FALSE;
			(*enable add. hydr. grab with hose winch *)
		MXecSgStopRi: BOOL:=FALSE;
			(*external control stop slewing gear right*)
		MXecSgStopLe: BOOL:=FALSE;
			(*external control stop slewing gear left*)
		MXclampAutoClose: BOOL:=FALSE;
			(*clamping jaw automatic close*)
		MXenabMainOperat: BOOL:=FALSE;
			(*main operation enable*)
		MXenabDgcOperat: BOOL:=FALSE;
			(*add. dynamic ground compaction enable*)
		MXenablHamOperat: BOOL:=FALSE;
			(*enable hammer operation*)
		MXenabHyGrabOper: BOOL:=FALSE;
			(*enable hydr.Grab operation*)
		MXenabDragliOper: BOOL:=FALSE;
			(*enable dragline operation*)
		MXenablDrillOper: BOOL:=FALSE;
			(*enable drilling drive operation*)
		MXenablVibOperat: BOOL:=FALSE;
			(*enable vibrator operation*)
		MXclampIsClosed: BOOL:=FALSE;
			(*clamping jaw clamp is closed*)
		MXecAddWinStopUp: BOOL:=FALSE;
			(*external control stop additional winch lifting*)
		MXecAddWinStopDn: BOOL:=FALSE;
			(*external control stop additional winch lowering*)
		MXsgAnalSigPos: BOOL:=FALSE;
			(*slewing gear analog signal positiv*)
		MXsgAnalSigNeg: BOOL:=FALSE;
			(*slewing gear analog signal negativ*)
		MXleaderStopBack: BOOL:=FALSE;
			(*leader stop backward*)
		MXlimitSwBridged: BOOL:=FALSE;
			(*X23 limit switches bridged for assembly operation*)
		MXpresHangLeader: BOOL:=FALSE;
			(*add. preselection hanging leader*)
		MXsgSetSynchInc: BOOL:=FALSE;
			(*sg set incremental sensor synchron to analog sensor*)
		MXsgSetToZero: BOOL:=FALSE;
			(*sg set angle to zero degree*)
		MXsgAngSenDiff: BOOL:=FALSE;
			(*sg angle sensor difference*)
		MXangleSenAnaErr: BOOL:=FALSE;
			(*sg analog angle sensor error*)
		MXclampWorking: BOOL:=FALSE;
			(*clamping jaw working*)
		MXaddHydrActive: BOOL:=FALSE;
			(*addittional hydraulics active*)
		MXgrabSigOpen: BOOL:=FALSE;
			(*ad grab open*)
		MXgrabSigClose: BOOL:=FALSE;
			(*ad grab close*)
		MXdgcActiveHg1: BOOL:=FALSE;
			(*ad dynamic ground compaction hg1 active*)
		MXdgcActiveHg2: BOOL:=FALSE;
			(*ad dynamic ground compaction hg2 active*)
		MXlgAFraLowLimOk: BOOL:=FALSE;
			(*additional lower limit switch LG / A-frame o.k.*)
		MXacCheckOk: BOOL:=FALSE;
			(*ac check of ignition key ompleted*)
		MXacReleasMachin: BOOL:=FALSE;
			(*ac releases machine*)
		MXexDrPreJoy: BOOL:=FALSE;
			(*preselection excetric drive with joy stick*)
		MXinclShutOffScr: BOOL:=FALSE;
			(*crane inclination shut off screen*)
		MXinclShutPreScr: BOOL:=FALSE;
			(*crane inclination prewarning shut off screen*)
		MXextLmlSounder: BOOL:=FALSE;
			(*external control lml sounder*)
		MXsmallSuperstr: BOOL:=FALSE;
			(*machine type small superstructure*)
		MXluffingCylinde: BOOL:=FALSE;
			(*machine type luffing cylinder instead of a-frame*)
		MXaxwAnalSigPos: BOOL:=FALSE;
			(*aux winch analog signal positiv*)
		MXaxwAnalSigNeg: BOOL:=FALSE;
			(*aux winch analog signal negativ*)
		MXadwAnalSigPos: BOOL:=FALSE;
			(*add winch analog signal positiv*)
		MXadwAnalSigNeg: BOOL:=FALSE;
			(*add winch analog signal negativ*)
		MXLiftCrane: BOOL:=FALSE;
			(*crawler crane is lift crane type*)
		MXderrickPossib: BOOL:=FALSE;
			(*lift crane: derrick is possible*)
		MXhydrGrabActive: BOOL:=FALSE;
			(*ad hydr. grab is active*)
		MXddEnabPowStage: BOOL:=FALSE;
			(*drilling drive enable power stage left/right*)
		MXvibratWorking: BOOL:=FALSE;
			(*vibrator working*)
		MXhammerWorking: BOOL:=FALSE;
			(*hammer working*)
		MXsgAngSenPresen: BOOL:=FALSE;
			(*sg angle sensor present*)
		MRdpfTime: REAL:=0.0;
			(*engine DPF left regeneration time*)
		MDlmlReevingBoom: REAL:=0.0;
			(*lml reeving main boom*)
		MDlmlReevingLuJi: REAL:=0.0;
			(*lml reeving luffing jib*)
		MDhg1RopeLenRela: REAL:=0.0;
			(*hg1 rope length winch - boom head*)
		MDhg2RopeLenRela: REAL:=0.0;
			(*hg2 rope length winch - boom head*)
		MDhg1RopeSpeed: REAL:=0.0;
			(*hg 1 rope speed in  m/min*)
		MDhg2RopeSpeed: REAL:=0.0;
			(*hg 2 rope speed in  m/min*)
		MDropeLenghtHg1: REAL:=0.0;
			(*rope lenght hoisting gear 1 in [m]*)
		MDropeLenghtHg2: REAL:=0.0;
			(*rope lenght hoisting gear 2 in [m]*)
		MDlmlUtilization: REAL:=0.0;
			(*lml utilization in [%]*)
		MDlmlUtilBackwar: REAL:=0.0;
			(*lml utilization backwards*)
		MDlmlLoadBoom: REAL:=0.0;
			(*lml load main boom in [t]*)
		MDlmlLoadLuffJib: REAL:=0.0;
			(*lml load luffing jib in [t]*)
		MDlmlMaxLoad1: REAL:=0.0;
			(*lml maximum load main boom in [to]*)
		MDlmlMaxLoad2: REAL:=0.0;
			(*lml maximum load luffing jib in [to]*)
		MDlmlMaxHight1: REAL:=0.0;
			(*lml maximum hight main boom in [m]*)
		MDlmlMaxHight2: REAL:=0.0;
			(*lml maximum hight luffing jib in [m]*)
		MDlmlRadiusMBoom: REAL:=0.0;
			(*lml load radius in main boom [m]*)
		MDlmlRadiusLJib: REAL:=0.0;
			(*lml load radius in luffing jib [m]*)
		MDlmlAngleBoom: REAL:=0.0;
			(*lml angle main boom in [°]*)
		MDlmlAngleLufJib: REAL:=0.0;
			(*lml angle luffing jib in [°]*)
		MDlmlCounterWeig: REAL:=0.0;
			(*lml counter weight in tons*)
		MDlmlLenMainBoom: REAL:=0.0;
			(*lml length main boom [m]*)
		MDlmlOffsetRod: REAL:=0.0;
			(*lml offset middle sg / main boom [m]*)
		MDlmlLenJib: REAL:=0.0;
			(*lml length jib [m]*)
		MDccDistanceAbso: REAL:=0.0;
			(*counterweight carrier distance absolut*)
		MDpresenEngSpeed: REAL:=0.0;
			(*present engine speed [rpm]*)
		MDengExploitatio: REAL:=0.0;
			(*diesel engine exploitation in [%]*)
		MDhydrOilTemp: REAL:=0.0;
			(*hydraulic oil temperature [°C]*)
		MDlubOilPressure: REAL:=0.0;
			(*lub oil pressure [bar]*)
		MDcoolWaterTemp: REAL:=0.0;
			(*cooling water temperature [°C]*)
		MDbatteryVoltage: REAL:=0.0;
			(*battery voltage [V]*)
		MDchargeAirTemp: REAL:=0.0;
			(*mde charge air temperature*)
		MDchargeAirPress: REAL:=0.0;
			(*charge air pressure [bar]*)
		MDdefCont: REAL:=0.0;
			(*DEF content [%]*)
		MDlubOilCont: REAL:=0.0;
			(*lub oil content [%]*)
		MDoutdoorTemp: REAL:=0.0;
			(*outdoor termperature [°C]*)
		MDfuelConAbs_LpH: REAL:=0.0;
			(*engine fuel consumption absolut [l/h]*)
		MDfuelConRel_LpH: REAL:=0.0;
			(*engine fuel consumption sinde reset [l/h] (relative)*)
		MDwindSpeed: REAL:=0.0;
			(*actual wind speed*)
		MDadGrouPre0Grd: REAL:=0.0;
			(*ad ground pressure 0 degrees*)
		MDadGrouPre45Grd: REAL:=0.0;
			(*ad ground pressure 45 degrees*)
		MDadGrouPre90Grd: REAL:=0.0;
			(*ad ground pressure 90 degrees*)
		MDsgAngle: REAL:=0.0;
			(*sg angle in degree*)
		MDsgAngleByAna: REAL:=0.0;
			(*sg angle in degree by analog sensor*)
		MDsgAngleByInc: REAL:=0.0;
			(*sg angle in degree by incremental sensor*)
		MDlmlStopSgLeft: REAL:=0.0;
			(*lml blocked crawlers stop sg left*)
		MDlmlStopSgRight: REAL:=0.0;
			(*lml blocked crawlers stop sg right*)
		MDfuelCont: REAL:=0.00;
			(*fuel content [%]*)
		MDscRopeLenHg1: REAL:=0.0;
			(*screen indication rope lenght hg1*)
		MDscRopeLenHg2: REAL:=0.0;
			(*screen indication rope lenght hg2*)
		MRwalMaxRadius: REAL:=0.00;
			(*wal maximum radius of the machine*)
		MRwalLi1Int1AngM: REAL:=0.00;
			(*wal main boom sg angle border line 1 intersection 1 max radius*)
		MRwalLi1Int2AngM: REAL:=0.00;
			(*wal main boom sg angle border line 1  intersection 2 max radius*)
		MRwalLi2Int1AngM: REAL:=0.00;
			(*wal main boom sg angle border line 2  intersection 1 max radius*)
		MRwalLi2Int2AngM: REAL:=0.00;
			(*wal main boom sg angle border line 2  intersection 2 max radius*)
		MRwalLi1Int1AngJ: REAL:=0.00;
			(*wal luffing jib sg angle border line 1  intersection 1 max radius*)
		MRwalLi1Int2AngJ: REAL:=0.00;
			(*wal luffing jib sg angle border line 1  intersection 2  max radius*)
		MRwalLi2Int1AngJ: REAL:=0.00;
			(*wal luffing jib sg angle border line 2  intersection 1 max radius*)
		MRwalLi2Int2AngJ: REAL:=0.00;
			(*wal luffing jib sg angle border line 2  intersection 2 max radius*)
		MRwalDistToStop: REAL:=0.0;
			(*wal distance to collision stop*)
		MDsuperstAngSenX: REAL:=0.0;
			(*superstructure angle sensor X [°]*)
		MDsuperstAngSenY: REAL:=0.0;
			(*superstructure angle sensor Y [°]*)
		MDsuperstrAngAbs: REAL:=0.0;
			(*superstructure angle absolut [°]*)
		MDvibSysPress: REAL:=0.0;
			(*ad vibrator system pressure*)
		MDhamSysPress: REAL:=0.0;
			(*hammer system pressure*)
		MDddSysPress: REAL:=0.0;
			(*drilling drive system pressure*)
		MDgrabSysPress: REAL:=0.0;
			(*hydraulic grab system pressure in bar*)
		MDvibClampPress: REAL:=0.0;
			(*ad vibrator clamping pressure*)
		MDleadAngleX: REAL:=0.0;
			(*hanging leader angle x*)
		MDleadAngleY: REAL:=0.0;
			(*hanging leader angle y*)
		MDddRpm: REAL:=0.0;
			(*rpm drilling drive*)
		MDvibrFrequency: REAL:=0.0;
			(*ad vibrator frequency*)
		MDvibrAmplitude: REAL:=0.0;
			(*ad vibrator amplitude*)
		MDadHyLudv1Press: REAL:=0.0;
			(*additional hydraulics ludv pump 1 pressure in bar*)
		MDadHyLudv2Press: REAL:=0.0;
			(*additional hydraulics ludv pump 2 pressure in bar*)
		MDgrabInclinatiX: REAL:=0.0;
			(*grab inclination in X*)
		MDgrabInclinatiY: REAL:=0.0;
			(*grab inclination in Y*)
		MDx23Poti1Moorin: REAL:=0.0;
			(*add. grab mooring, free fall limit*)
		MDdgcRopeLenHG1: REAL:=0.0;
			(*dgc redundant rope length measuring HG1*)
		MDdgcRopeLenHG2: REAL:=0.0;
			(*dgc redundant rope length measuring HG2*)
		MDdgcBeats: REAL:=0.0;
			(*ad dynamic ground compaction actual beats*)
		MDdgcCompaction: REAL:=0.0;
			(*ad dynamic ground compaction actual compaction*)
		MRleJoyYSymNr: REAL:=0.0;
			(*left joystick symbol number Y direction *)
		MRleJoyXSymNr: REAL:=0.0;
			(*left joystick symbol number X direction *)
		MRriJoyYSymNr: REAL:=0.0;
			(*right joystick symbol number Y direction *)
		MRriJoyXSymNr: REAL:=0.0;
			(*right joystick symbol number X direction *)
		SXMresetOpHour: BOOL:=FALSE;
			(* operational hours RESET *)
		SXMresetFuelCons: BOOL:=FALSE;
			(* reset fuel consumption *)
		SXMhg1ResRopLen: BOOL:=FALSE;
			(* hg1 reset rope length *)
		SXMhg2ResRopLen: BOOL:=FALSE;
			(* hg2 reset rope length *)
		SXMhg1ChanLay1_2: BOOL:=FALSE;
			(* hg1 change layer 1 - 2 *)
		SXMhg2ChanLay1_2: BOOL:=FALSE;
			(* hg2 change layer 1 - 2 *)
		SXMhg1ChanLay3_4: BOOL:=FALSE;
			(* hg1 change layer 3 - 4 *)
		SXMhg2ChanLay3_4: BOOL:=FALSE;
			(* hg2 change layer 3 - 4 *)
		SXMhg1ChanLay5_6: BOOL:=FALSE;
			(* hg1 change layer 5 - 6 *)
		SXMhg2ChanLay5_6: BOOL:=FALSE;
			(* hg2 change layer 5 - 6 *)
		SXMlmlTaraActLoa: BOOL:=FALSE;
			(* lml tara actual load *)
		SXMbuzzStatAckn: BOOL:=FALSE;
			(* buzzer on status line acknowledged *)
		SXMbuzzMainAckn: BOOL:=FALSE;
			(* buzzer on main page acknowledged *)
		SXMbuzzPowerAckn: BOOL:=FALSE;
			(* buzzer on powerpack page acknowledged *)
		SXMoneBeep: BOOL:=FALSE;
			(*set one beep*)
		SXMwalHigMaBoAct: BOOL:=FALSE;
		SXMwalHigLJibAct: BOOL:=FALSE;
		SXMwalRadMaBoAct: BOOL:=FALSE;
		SXMwalRadLJibAct: BOOL:=FALSE;
		SXMwalSlewAct: BOOL:=FALSE;
		SXMwalLinMaBoAct: BOOL:=FALSE;
		SXMwalLinLJibAct: BOOL:=FALSE;
		SXMwalSecMaBoAct: BOOL:=FALSE;
		SXMwalSecLJibAct: BOOL:=FALSE;
		SXMwalSetMiRaMaB: BOOL:=FALSE;
		SXMwalSetMiRaLuJ: BOOL:=FALSE;
		SXMwalSetMaRaMaB: BOOL:=FALSE;
		SXMwalSetMaRaLuJ: BOOL:=FALSE;
		SXMwalSetSgLeft: BOOL:=FALSE;
		SXMwalSetSgRight: BOOL:=FALSE;
		SXMwalSetLin1P1M: BOOL:=FALSE;
		SXMwalSetLin1P2M: BOOL:=FALSE;
		SXMwalSetLin2P1M: BOOL:=FALSE;
		SXMwalSetLin2P2M: BOOL:=FALSE;
		SXMwalSetLin1P1J: BOOL:=FALSE;
		SXMwalSetLin1P2J: BOOL:=FALSE;
		SXMwalSetLin2P1J: BOOL:=FALSE;
		SXMwalSetLin2P2J: BOOL:=FALSE;
		SXMwalSetSec1P1M: BOOL:=FALSE;
		SXMwalSetSec1P2M: BOOL:=FALSE;
		SXMwalSetSec1P3M: BOOL:=FALSE;
		SXMwalSetSec1P1J: BOOL:=FALSE;
		SXMwalSetSec1P2J: BOOL:=FALSE;
		SXMwalSetSec1P3J: BOOL:=FALSE;
		SXMdpfRegInitiat: BOOL:=FALSE;
			(*diesel particel filter regeneration initiated*)
		SXMdpfRegDisable: BOOL:=FALSE;
			(*diesel particel filter regeneration disabled*)
		SXMnewModeAckn: BOOL:=FALSE;
			(* new mode acknowledged*)
		SXMlockHg1: BOOL:=FALSE;
			(*lock hg1*)
		SXMlockHg2: BOOL:=FALSE;
			(*lock hg2*)
		SXMlockLg: BOOL:=FALSE;
			(*lock luffing gear*)
		SXMlockSg: BOOL:=FALSE;
			(*lock slewing gear*)
		SXMlockTg: BOOL:=FALSE;
			(*lock travelling gear*)
		SRMhg1Reeving: REAL:=0.00;
			(* hg1 reeving *)
		SRMhg2Reeving: REAL:=0.00;
			(* hg2 reeving *)
		SRMpreNewMode: REAL:=0.00;
			(* preselected new Mode*)
		SRcurrentMode: REAL:=-1.10;
			(* actual selected mode *)
		SXactivateBeep: BOOL:=FALSE;
			(*activate beeper*)
		SXlmlPage: BOOL:=FALSE;
			(* lml page*)
		SXhydrOilShutOff: BOOL:=FALSE;
			(* hydraulic oil shut off ball valve not opened *)
		SXhydrOilHeating: BOOL:=FALSE;
			(* hydraulic oil heating is active*)
		SXgearOilTempErr: BOOL:=FALSE;
			(* gear oil temperature error *)
		SXfeedPresLowHg1: BOOL:=FALSE;
			(* feed pressure hg1 low *)
		SXfeedPresLowHg2: BOOL:=FALSE;
			(* feed pressure hg2 low *)
		SXfeedPressFilt: BOOL:=FALSE;
			(* feed pressure filter warning *)
		SXhydrOilRetFilt: BOOL:=FALSE;
			(* hydraulic oil return flow filter warning *)
		SXlidec1: BOOL:=FALSE;
			(*EDC is LIDEC 1 or compatibel*)
		SXdpfActive: BOOL:=FALSE;
			(* diesel particle filter active (HEST) *)
		SXdpfError: BOOL:=FALSE;
			(* diesel particle filter error *)
		SXdpfWarn: BOOL:=FALSE;
			(* diesel particle filter warning *)
		SXdpfRegManActiv: BOOL:=FALSE;
			(* diesel particle filter regeneration manual initiated*)
		SXdpfRegDisabled: BOOL:=FALSE;
			(* diesel particle filter regeneration disabled*)
		SXdpfInitPossib: BOOL:=FALSE;
			(*diesel particle filter regeneration initiation possible*)
		SXdpfDisabPossib: BOOL:=FALSE;
			(*diesel particle filter regeneration disabling possible*)
		SXcoolWaterContE: BOOL:=FALSE;
			(* cooling water content error *)
		SXcoolWaterContW: BOOL:=FALSE;
			(* cooling water content error *)
		SXhydrOilCoLoErr: BOOL:=FALSE;
			(* hydraulic oil content low error *)
		SXhydrOilCoLoWar: BOOL:=FALSE;
			(* hydraulic oil content low warning*)
		SXhydrOilCoHiErr: BOOL:=FALSE;
			(* hydraulic oil content high error*)
		SXhydrOilCoHiWar: BOOL:=FALSE;
			(* hydraulic oil content high warning*)
		SXhydrOilLeakage: BOOL:=FALSE;
			(* hydraulic oil leakage*)
		SXengOilCoLowErr: BOOL:=FALSE;
			(*engine lub oil content low error*)
		SXengOilCoLowWar: BOOL:=FALSE;
			(*engine lub oil content low warning*)
		SXengOilCoHigErr: BOOL:=FALSE;
			(*engine lub oil content high error*)
		SXengOilCoHigWar: BOOL:=FALSE;
			(*engine lub oil content high warning*)
		SXengOilContAct: BOOL:=FALSE;
			(*engine lub oil content is active*)
		SXdefError: BOOL:=FALSE;
			(*DEF content error *)
		SXdefWarn: BOOL:=FALSE;
			(*DEF content warning *)
		SXmilError: BOOL:=FALSE;
			(*engine MIL error*)
		SXmilWarn: BOOL:=FALSE;
			(*engine MIL warning*)
		SXairFilterWarn: BOOL:=FALSE;
			(* air filter error *)
		SXairFilterError: BOOL:=FALSE;
			(* air filter error *)
		SXwaterInFuel: BOOL:=FALSE;
			(* water in fuel *)
		SXfuelPressError: BOOL:=FALSE;
			(* fuel pressure error *)
		SXfuelPressWarn: BOOL:=FALSE;
			(* fuel pressure warning *)
		SXfuelTempError: BOOL:=FALSE;
			(* fuel temperature error *)
		SXfuelTempWarn: BOOL:=FALSE;
			(* fuel temperature warning *)
		SXengHightLimit: BOOL:=FALSE;
			(* engine power limitation by hight *)
		SXengPowerLimit: BOOL:=FALSE;
			(* engine power limitation *)
		SXchargeControl: BOOL:=FALSE;
			(* battery charge control *)
		SXpreHeatStart: BOOL:=FALSE;
			(* pre heating ready for engine start *)
		SXpreHeatActive: BOOL:=FALSE;
			(* pre heating is active *)
		SXpostHeatActive: BOOL:=FALSE;
			(*post heating is active *)
		SXfuelContError: BOOL:=FALSE;
			(* fuel content error *)
		SXfuelContWarn: BOOL:=FALSE;
			(* fuel content warning *)
		SXengSpeedError: BOOL:=FALSE;
			(* engine speed error *)
		SXengSpeedWarn: BOOL:=FALSE;
			(* engine speed warning *)
		SXlubOilPressErr: BOOL:=FALSE;
			(* lub oil pressure error *)
		SXlubOilPressWar: BOOL:=FALSE;
			(* lub oil pressure warning *)
		SXhydrOilTempErr: BOOL:=FALSE;
			(* hydraulic oil temperature error *)
		SXhydrOilTempWar: BOOL:=FALSE;
			(* hydraulic oil temperature warning *)
		SXchargeAirTempE: BOOL:=FALSE;
			(* charge air temperature error *)
		SXchargeAirTempW: BOOL:=FALSE;
			(* charge air temperature warning *)
		SXcoolWaterTempE: BOOL:=FALSE;
			(* coolant temperature error *)
		SXcoolWaterTempW: BOOL:=FALSE;
			(* coolant temperature warning *)
		SRdpfTime: REAL:=0.00;
			(*diesel particel filter time left*)
		SRoutdoorTemp: REAL:=0.00;
			(* outdoor temperature *)
		SRdefCont: REAL:=0.00;
			(*DEF content *)
		SRlubOilCont: REAL:=0.00;
			(*lub oil content *)
		SRfuelCont: REAL:=0.00;
			(* fuel content *)
		SRbatteryVoltage: REAL:=0.00;
			(* battery voltage *)
		SRlubOilPress: REAL:=0.00;
			(* lub oil pressure *)
		SRchargeAirPress: REAL:=0.00;
			(* charge ais presuure *)
		SRchargeAirTemp: REAL:=0.00;
			(* charge air temperature *)
		SRhydrOilTemp: REAL:=0.00;
			(* hydraulic oil temperature *)
		SRcoolWaterTemp: REAL:=0.00;
			(* coolant temperature *)
		SRactualTorque: REAL:=0.00;
			(* engine actual torque *)
		SRengineSpeed: REAL:=0.00;
			(* engine speed *)
		SXengReqStop: BOOL:=FALSE;
			(* engine requires stop *)
		SXengReqRep: BOOL:=FALSE;
			(* engine requires repair *)
		SXlmlWarnSym: BOOL:=FALSE;
			(* lml warning symbol *)
		SXlmlStopSym: BOOL:=FALSE;
			(* lml stop symbol *)
		SXlmlWarnBuzz: BOOL:=FALSE;
			(* lml warning buzzer *)
		SXlmlStopBuzz: BOOL:=FALSE;
			(* lml stop buzzer *)
		SXlmlBridged: BOOL:=FALSE;
			(* lml bridged *)
		SXassemblyOperat: BOOL:=FALSE;
			(* assembly operation activated *)
		SXemergOperat: BOOL:=FALSE;
			(* emergency operation activated *)
		SRlgSpeed: REAL:=0.00;
			(* luffing gear speed selection *)
		SRsgSpeed: REAL:=0.00;
			(* slewing gear speed selection *)
		SXrcChangeContro: BOOL:=FALSE;
			(* remote control change control *)
		SXrcActive: BOOL:=FALSE;
			(* remote control active *)
		SXrcRadioOk: BOOL:=FALSE;
			(* remote control radio signal ok *)
		SXhgFreeFallWarn: BOOL:=FALSE;
			(* hg freefall warning *)
		SXrcContChanged: BOOL:=FALSE;
			(* remote control control was changed *)
		SXhgFreefUnsec: BOOL:=FALSE;
			(* hg unsecured freefall preselected *)
		SXhgFreefPresel: BOOL:=FALSE;
			(* hg freefall preselected *)
		SXneedSuppCrane: BOOL:=FALSE;
			(* supply crane needed *)
		SXhg1ClutchOpen: BOOL:=FALSE;
			(* hg 1 clutch is open *)
		SXhg2ClutchOpen: BOOL:=FALSE;
			(* hg 2 clutch is open *)
		SXhg1FastSpeed: BOOL:=FALSE;
			(* hg 1 fast speed *)
		SXhg2FastSpeed: BOOL:=FALSE;
			(* hg 2 fast speed *)
		SXspecHoistFunc: BOOL:=FALSE;
			(* special sensitive hoisting function *)
		SRsymNrJoyLeX: REAL:=0.00;
			(*symbol number display joystick left X*)
		SRsymNrJoyLeY: REAL:=0.00;
			(*symbol number display joystick left Y*)
		SRsymNrJoyRiX: REAL:=0.00;
			(*symbol number display joystick right X*)
		SRsymNrJoyRiY: REAL:=0.00;
			(*symbol number display joystick right Y*)
		SX2TjoystAct: BOOL:=FALSE;
		SXflCouWeiCylAct: BOOL:=FALSE;
			(* floating counterweight cylinder active *)
		SRlimitSwiNumb: REAL:=0.00;
			(* limit switch number *)
		MXlmlStarted: BOOL:=FALSE;
			(*lml started (asynchron task was calculated one time)*)
		SXlmlMainBoom: BOOL:=FALSE;
			(* lml main boom *)
		SXlmlMainReduct: BOOL:=FALSE;
			(*lml main boom reduction*)
		SXlmlFixedJib: BOOL:=FALSE;
			(* lml fixed Jib *)
		SXlmlLuffJib: BOOL:=FALSE;
			(* lml luffing Jib *)
		SXlmlFixLufJib: BOOL:=FALSE;
			(* lml fixed or luffing Jib *)
		SXlmlLoLocMaMiWJ: BOOL:=FALSE;
			(* lml load location main boom od Midfall with mounted jib *)
		SXlmlMidfall: BOOL:=FALSE;
			(* lml midfall *)
		SXlmlDerrick: BOOL:=FALSE;
			(* lml derrick *)
		SXlmlCouCar: BOOL:=FALSE;
			(* lml counterweight carrier *)
		SXlmlOkAngPivPie: BOOL:=FALSE;
			(* lml angle sensor pivot piece OK*)
		SXlmlOkGeometric: BOOL:=FALSE;
			(* lml geometrical calculation OK*)
		SXlmlOkLoadCalc: BOOL:=FALSE;
			(* lml load calculation OK*)
		SXlmlOkLoaCalcDe: BOOL:=FALSE;
			(* lml load derrick calculation OK*)
		SRlmlUtilization: REAL:=0.00;
			(* lml utlization *)
		SRlmlUtilBack: REAL:=0.00;
			(* lml utlization backwards *)
		SRlmlActLoad: REAL:=0.00;
			(* lml actual load (charge) *)
		SRlmlMaxLoad: REAL:=0.00;
			(* lml maximum load *)
		SRlmlActHookLoad: REAL:=0.00;
			(* lml actual hook load *)
		SRlmlActCompLoad: REAL:=0.00;
			(* lml actual complete load *)
		SRlmlJibLoadOLL: REAL:=0.00;
			(* lml actual jib load at other load location *)
		SRlmlActLoadRad: REAL:=0.00;
			(* lml actual load radius *)
		SRlmlActHeadHig: REAL:=0.00;
			(* lml actual head hight *)
		SRlmlBoomAngle: REAL:=0.00;
			(* lml main boom angle *)
		SRlmlJibAngle: REAL:=0.00;
			(* lml jib angle *)
		SRlmlCouCarLoad: REAL:=0.00;
			(* lml counterweight carrier load *)
		SRlmlCouCarRad: REAL:=0.00;
			(* lml counterweight carrier radius *)
		SRmachineType: REAL:=0.0;
			(*machine type superstructure*)
		SXophEngRun: BOOL:=FALSE;
			(* operational houres engine running *)
		SXophHg1Run: BOOL:=FALSE;
			(* operational houres hg1 running *)
		SXophHg2Run: BOOL:=FALSE;
			(* operational houres hg2 running *)
		SXophLg1Run: BOOL:=FALSE;
			(* operational houres lg1 running *)
		SXophLg2Run: BOOL:=FALSE;
			(* operational houres lg2 running *)
		SXophLg3Run: BOOL:=FALSE;
			(* operational houres lg3 running *)
		SXophSgRun: BOOL:=FALSE;
			(* operational houres sg running *)
		SXophTgRun: BOOL:=FALSE;
			(* operational houres tg running *)
		SXophAdhRun: BOOL:=FALSE;
			(*operation houres additional hydraulic running *)
		SXophOpModeRun: BOOL:=FALSE;
			(*operation houres actual operational mode running *)
		SXclampOpen: BOOL:=FALSE;
			(*clamping jaw open *)
		SXhg1MoorActiv: BOOL:=FALSE;
			(*hg 1 mooring active*)
		SXhg2MoorActiv: BOOL:=FALSE;
			(*hg 2 mooring active*)
		SXhg1LockFastSpe: BOOL:=FALSE;
			(*hg1 lock fast speed *)
		SXhg2LockFastSpe: BOOL:=FALSE;
			(*hg2 lock fast speed *)
		SRpageAtStart: REAL:=0.00;
			(* first screen page at start *)
		SRophEngAbs: REAL:=0.00;
			(* operational houres engine absolut *)
		SRophHg1Abs: REAL:=0.00;
			(* operational houres hg1 absolut *)
		SRophHg2Abs: REAL:=0.00;
			(* operational houres hg2 absolut *)
		SRophLg1Abs: REAL:=0.00;
			(* operational houres lg1 absolut *)
		SRophLg2Abs: REAL:=0.00;
			(* operational houres lg2 absolut *)
		SRophLg3Abs: REAL:=0.00;
			(* operational houres lg3 absolut *)
		SRophSgAbs: REAL:=0.00;
			(* operational houres sg absolut *)
		SRophTgAbs: REAL:=0.00;
			(* operational houres tg absolut *)
		SRophAdhAbs: REAL:=0.0;
			(*operation houres additional hydraulic *)
		SRophOpModeAbs: REAL:=0.0;
			(*operation houres actual operational mode*)
		SRophEngRel: REAL:=0.00;
			(* operational houres engine relative *)
		SRophHg1Rel: REAL:=0.00;
			(* operational houres hg1 relative *)
		SRophHg2Rel: REAL:=0.00;
			(* operational houres hg2 relative *)
		SRophLg1Rel: REAL:=0.00;
			(* operational houres lg1 relative *)
		SRophLg2Rel: REAL:=0.00;
			(* operational houres lg2 relative *)
		SRophLg3Rel: REAL:=0.00;
			(* operational houres lg3 relative *)
		SRophSgRel: REAL:=0.00;
			(* operational houres sg relative *)
		SRophTgRel: REAL:=0.00;
			(* operational hours tg relative *)
		SRophAdhRel: REAL:=0.0;
			(*operation houres additional hydraulic relative*)
		SRophOpModeRel: REAL:=0.0;
			(*operation houres actual operational  relative*)
		SRfuelConsPhAbs: REAL:=0.00;
			(* fuel consumption per houre absolut *)
		SRfuelConsPhRel: REAL:=0.00;
			(* fuel consumption per houre relative *)
		SRfuelConsRel: REAL:=0.00;
			(* fuel consumption relative *)
		SRfuelConsAbs: REAL:=0.00;
			(* fuel consumption absolut *)
		SRhg1RopeLength: REAL:=0.00;
			(* hg1 rope length *)
		SRhg2RopeLength: REAL:=0.00;
			(* hg2 rope length *)
		SRhg1RopeSpeed: REAL:=0.0;
			(* hg1 rope speed*)
		SRhg2RopeSpeed: REAL:=0.0;
			(* hg2 rope speed*)
		SXhg1Lift: BOOL:=FALSE;
			(* hg1 lifting *)
		SXhg1Lower: BOOL:=FALSE;
			(* hg1 lower *)
		SXhg2Lift: BOOL:=FALSE;
			(* hg2 lift *)
		SXhg2Lower: BOOL:=FALSE;
			(* hg2 lower *)
		SXhg1RopeLenMeas: BOOL:=FALSE;
			(* hg1 rope length measuring preselected *)
		SXhg2RopeLenMeas: BOOL:=FALSE;
			(* hg2 rope length measuring preselected *)
		SXelectricWarnin: BOOL:=FALSE;
			(* electrical warning *)
		SXelectricError: BOOL:=FALSE;
			(* electrical error *)
		SRwindSpeed: REAL:=0.00;
			(* wind speed [m/s] *)
		SXwindSpeedWarn: BOOL:=FALSE;
			(* wind speed warning *)
		SXwindSpeedAct: BOOL:=FALSE;
			(* wind speed active *)
		SXwindSpeedError: BOOL:=FALSE;
			(* wind speed error *)
		SXlmlLoadTared: BOOL:=FALSE;
			(* lml load tared *)
		SXlmlCantBack: BOOL:=FALSE;
			(* lml cant back *)
		SXgroundPress: BOOL:=FALSE;
			(*ground pressure device activated*)
		SXgrouPressValid: BOOL:=FALSE;
			(*ground pressure values valid*)
		SRgroundPress0: REAL:=0.0;
			(*ground pressure at 0 degrere*)
		SRgroundPress45: REAL:=0.0;
			(*ground pressure at 45 degrere*)
		SRgroundPress90: REAL:=0.0;
			(*ground pressure at 90 degrere*)
		SXwalPresel: BOOL:=FALSE;
			(*work area limitation preselected *)
		SXwalLgMin: BOOL:=FALSE;
			(*work area limitation lg minimum*)
		SXwalLgMax: BOOL:=FALSE;
			(*work area limitation lg maximum*)
		SXwalLg2Min: BOOL:=FALSE;
			(*work area limitation lg2 minimum*)
		SXwalLg2Max: BOOL:=FALSE;
			(*work area limitation lg2 maximum*)
		SXwalSgLeft: BOOL:=FALSE;
			(*work area limitation sg left*)
		SXwalSgRight: BOOL:=FALSE;
			(*work area limitation sg right*)
		SRwalDistToStop: REAL:=0.0;
			(*work area limitation distance to stop*)
		SRactRadMaBo: REAL:=0.00;
			(* actual Radius main boom [m] *)
		SRactRadJib: REAL:=0.00;
			(* actual Radius main boom [m] *)
		SRwalMaxRadMaBo: REAL:=0.00;
			(* maximum Radius main boom [m] *)
		SRwalMaxRadius: REAL:=0.00;
			(* maximumRadius Jib [m] *)
		SRwalMinRadMaBo: REAL:=0.00;
			(* minimum Radius main boom [m] *)
		SRwalMaxRadJib: REAL:=0.00;
			(* maximum Radius jib [m] *)
		SRwalMinRadJib: REAL:=0.00;
			(* minimum Radius jib [m] *)
		SRsgSuperstrAng: REAL:=0.00;
			(*sg superstructure angle [°] *)
		SRwalSlewRight: REAL:=0.00;
			(* wal slewing limit angle right [°] *)
		SRwalSlewLeft: REAL:=0.00;
			(* wal slewing limit angle left [°] *)
		SRwalLi1Int1AngM: REAL:=0.00;
			(*wal main boom sg angle border line 1 intersection 1 max radius*)
		SRwalLi1Int2AngM: REAL:=0.00;
			(*wal main boom sg angle border line 1  intersection 2 max radius*)
		SRwalLi2Int1AngM: REAL:=0.00;
			(*wal main boom sg angle border line 2  intersection 1 max radius*)
		SRwalLi2Int2AngM: REAL:=0.00;
			(*wal main boom sg angle border line 2  intersection 2 max radius*)
		SRwalLi1Int1AngJ: REAL:=0.00;
			(*wal luffing jib sg angle border line 1  intersection 1 max radius*)
		SRwalLi1Int2AngJ: REAL:=0.00;
			(*wal luffing jib sg angle border line 1  intersection 2  max radius*)
		SRwalLi2Int1AngJ: REAL:=0.00;
			(*wal luffing jib sg angle border line 2  intersection 1 max radius*)
		SRwalLi2Int2AngJ: REAL:=0.00;
			(*wal luffing jib sg angle border line 2  intersection 2 max radius*)
		SRwalSect1P1RadM: REAL:=0.00;
			(*wal main boom sg angle sector 1 point 1 radius*)
		SRwalSect1P1AngM: REAL:=0.00;
			(*wal main boom sg angle sector 1 point 1 angle*)
		SRwalSect1P2RadM: REAL:=0.00;
			(*wal main boom sg angle sector 1 point 2 radius*)
		SRwalSect1P2AngM: REAL:=0.00;
			(*wal main boom sg angle sector 1 point 2 angle*)
		SRwalSect1P3RadM: REAL:=0.00;
			(*wal main boom sg angle sector 1 point 3 radius*)
		SRwalSect1P3AngM: REAL:=0.00;
			(*wal main boom sg angle sector 1 point 3 angle*)
		SRwalSect1P1RadJ: REAL:=0.00;
			(*wal luffing jib sg angle sector 1 point 1 radius*)
		SRwalSect1P1AngJ: REAL:=0.00;
			(*wal luffing jib sg angle sector 1 point 1 angle*)
		SRwalSect1P2RadJ: REAL:=0.00;
			(*wal luffing jib sg angle sector 1 point 2 radius*)
		SRwalSect1P2AngJ: REAL:=0.00;
			(*wal luffing jib sg angle sector 1 point 2 angle*)
		SRwalSect1P3RadJ: REAL:=0.00;
			(*wal luffing jib sg angle sector 1 point 3 radius*)
		SRwalSect1P3AngJ: REAL:=0.00;
			(*wal luffing jib sg angle sector 1 point 3 angle*)
		SXsuperstrAngle: BOOL:=FALSE;
			(*ad superstructure angle*)
		SRsuperstrAngleX: REAL:=0.0;
			(*ad superstructure angle X*)
		SRsuperstrAngleY: REAL:=0.0;
			(*ad superstructure angle Y*)
		SRsuperstrAngAbs: REAL:=0.0;
			(*ad superstructure angle absolut*)
		SXblackboxActive: BOOL:=FALSE;
			(*blackbox active recording*)
		SXblackboxInit: BOOL:=FALSE;
			(*blackbox initializing*)
		SXblackboxError: BOOL:=FALSE;
			(*blackbox error*)
		SXpreMainOp: BOOL:=FALSE;
			(*preselection main operation*)
		SXpreVibOp: BOOL:=FALSE;
			(*preselection vibrator operation*)
		SXpreHamOp: BOOL:=FALSE;
			(*preselection hammer operation*)
		SXpreDgcOp: BOOL:=FALSE;
			(*preselection dynamic ground compaction*)
		SXpreGrabOp: BOOL:=FALSE;
			(*preselection hydraulic grab operation*)
		SXlePreGrabOp: BOOL:=FALSE;
			(*preselection leffer grab operation*)
		SXsbPreGrabOp: BOOL:=FALSE;
			(*preselection soletanche bachy grab operation*)
		SXsmPreGrabOp: BOOL:=FALSE;
			(*preselection soilmec grab operation*)
		SXpreGrabHoseOp: BOOL:=FALSE;
			(*preselection hydraulic grab with hose winch*)
		SXpreKelGrapOp: BOOL:=FALSE;
			(*preselection kelly grab operation*)
		SXpreDrillOp: BOOL:=FALSE;
			(*preselection drilling operation*)
		SXpreExtContOp: BOOL:=FALSE;
			(*preselection external control operation*)
		SXacknNewMode: BOOL:=FALSE;
			(*acknoledge new mode*)
		SXpreLeaderOpera: BOOL:=FALSE;
			(*preselection leader operation *)
		SXMsetLeaderOper: BOOL:=FALSE;
			(*set leader operation *)
		SXleaderOperAct: BOOL:=FALSE;
			(*leader operation active*)
		SXsgAngleSenPres: BOOL:=FALSE;
			(*sg angle sensor is present*)
		SXsgAngleSenDiff: BOOL:=FALSE;
			(*sg angle sensor difference*)
		SRsgAngleAnalog: REAL:=0.0;
			(*sg angle analog sensor*)
		SRsgAngleIncr: REAL:=0.0;
			(*sg angle incremental sensor*)
		SRsgAngleAnaOffs: REAL:=0.0;
			(*sg angle offset in degree of analog sensor*)
		SXMsgSetToZero: BOOL:=FALSE;
			(*sg set angle to zero degree*)
		SXMsgSetSynchInc: BOOL:=FALSE;
			(*sg set incremental sensor to angle sensor angle*)
		SXMleadSetToZero: BOOL:=FALSE;
			(*set leader inclination to zero*)
		SXMleTaSetToZero: BOOL:=FALSE;
			(*set leader target to zero*)
		SRequPressure1: REAL:=0.0;
			(*equipment pressure 1*)
		SRequPressure2: REAL:=0.0;
			(*equipment pressure 1*)
		SXvibHamMeasAct: BOOL:=FALSE;
			(*vibrator/hammer measuring activated*)
		SRvibHamFrequ: REAL:=0.0;
			(*vibrator/hammer frequency*)
		SRvibAmpHamEner: REAL:=0.0;
			(*vibrator amplitude / hammer energy*)
		SRddSpeed: REAL:=0.0;
			(*drilling drive speed*)
		SRgrabType: REAL:=0.0;
			(*grab:type*)
		SRgrabMooring: REAL:=0.0;
			(*grab: mooring*)
		SRgrabInclX: REAL:=0.0;
			(*grab: inclination X*)
		SRgrabInclY: REAL:=0.0;
			(*grab: inclination Y*)
		SRgrabInclAbs: REAL:=0.0;
			(*grab: inclination absolut*)
		SRleadInclX: REAL:=0.0;
			(*leader inclination X*)
		SRleadInclY: REAL:=0.0;
			(*leader inclination Y*)
		SRleadInclAbs: REAL:=0.0;
			(*leader inclination absolut*)
		SRMleadTargetX: REAL:=0.0;
			(*leader target inclination X*)
		SRMleadTargetY: REAL:=0.0;
			(*leader target inclination Y*)
		SRleadTargetAbs: REAL:=0.0;
			(*leader target inclination absolut*)
		SRcaoPressure1: REAL:=0.0;
			(*casing oszillator pressure 1*)
		SRcaoPressure2: REAL:=0.0;
			(*casing oszillator pressure 2*)
		SXdgcAutomActive: BOOL:=FALSE;
			(*dgc automatic active*)
		SXcaoActive: BOOL:=FALSE;
			(*casing oszillator active*)
		SXvibClampWarn: BOOL:=FALSE;
			(*vibrator clamp warning*)
		SXddFastSpeed: BOOL:=FALSE;
			(*drilling drive fast speed*)
		SXequPress2Activ: BOOL:=FALSE;
			(*dgc automatic active*)
		SRgrabOpen: REAL:=0.0;
			(*grab: open position [%]*)
		SXgrabHoseActive: BOOL:=FALSE;
			(*grab: hose reel active*)
		SRdgcLiftHight: REAL:=0.0;
			(*dgc:actual lifting hight*)
		SRdgcBeats: REAL:=0.0;
			(*dgc: actual beats*)
		SRdgcCompaction: REAL:=0.0;
			(*dgc: actual compaction*)
		SRMdgcLiftHight: REAL:=0.0;
			(*dgc: lifting hight adjusted*)
		SRMdgcBeats: REAL:=0.0;
			(*dgc: beats adjusted*)
		SRMdgcCompaction: REAL:=0.0;
			(*dgc: compaction adjusted*)
		SRMdgcSlowDoHigh: REAL:=0.0;
			(*dgc: slow down hight adjusted*)
		SXpreDraglineOp: BOOL:=FALSE;
			(*preselection dragline operation mode*)
		SXpreCoucarOper: BOOL:=FALSE;
			(*preselection counterweight carrier operation mode*)
		SXpreTranspOper: BOOL:=FALSE;
			(*preselection transportation operation mode*)
		SXMsetTranspOper: BOOL:=FALSE;
			(*set transportation operation mode*)
		SXMsetCoucarOper: BOOL:=FALSE;
			(*set counterweight carrier operation mode*)
		SXtranspOperAct: BOOL:=FALSE;
			(*transportation operation mode active*)
		SXcoucarOperAct: BOOL:=FALSE;
			(*counterweight carrier operation mode active*)
		SXMchUnitDistanc: BOOL:=FALSE;
			(*change unit for distance*)
		SXMchUnitLoad: BOOL:=FALSE;
			(*change unit for load*)
		SXMchUnitPress: BOOL:=FALSE;
			(*change unit for pressure*)
		SXMchUnitTemp: BOOL:=FALSE;
			(*change unit for temperature*)
		SXMchUnitVolume: BOOL:=FALSE;
			(*change unit for volume*)
		SXMchUnitSpeed: BOOL:=FALSE;
			(*change unit for speed*)
		SXadSettings: BOOL:=FALSE;
			(*additional device settings activated*)
		SRMequipVolume1: REAL:=0.0;
			(*equipment volume 1*)
		SRMequipPress1: REAL:=0.0;
			(*equipment pressure 1*)
		SRMequipVolume2: REAL:=0.0;
			(*equipment volume 3*)
		SRMequipPress2: REAL:=0.0;
			(*equipment pressure 2*)
		SRMvibExcTime: REAL:=0.0;
			(*vibrator excentric time*)
		SRMgrabVolOpen: REAL:=0.0;
			(*grab volume open*)
		SRMgrabVolClose: REAL:=0.0;
			(*grab volume close*)
		SRMgrabPresOpen: REAL:=0.0;
			(*grab pressure open*)
		SRMgrabPresClose: REAL:=0.0;
			(*grab pressure close*)
		SXexDrPreJoy: BOOL:=FALSE;
			(*excenter drive with joy stick *)
		SXinclShutOff: BOOL:=FALSE;
			(*crane inclination shutt off*)
		SXinclShutOffPre: BOOL:=FALSE;
			(*crane inclination shutt off prewarning*)
		SXhg1Locked: BOOL:=FALSE;
			(*hg1 locked*)
		SXhg2Locked: BOOL:=FALSE;
			(*hg2 locked *)
		SXlgLocked: BOOL:=FALSE;
			(*luffing gear locked *)
		SXsgLocked: BOOL:=FALSE;
			(*slewing gear locked *)
		SXtgLocked: BOOL:=FALSE;
			(*travelling gear locked *)
		SXophLg2Act: BOOL:=FALSE;
			(*operation hour of lg2 active*)
		SXophAuxAct: BOOL:=FALSE;
			(*operation hour of auxiliary winch active*)
		SXophLg3Act: BOOL:=FALSE;
			(*operation hour of lg3 active*)
		SXophAdhAct: BOOL:=FALSE;
			(*operation hour of additional hydraulic active*)
	END_VAR
	VAR_EXTERNAL CONSTANT
		MSG_INFO: UINT:=0;
			(* message priority: "info" *)
		MSG_WARNING: UINT:=0;
			(* message priority: "warning" *)
		PI: REAL:=3.141592653;
	END_VAR
	VAR_EXTERNAL RETAIN
		MXwinchSynchrX23: BOOL:=FALSE;
			(*winch synchronisation by X23*)
		MXenExtOperMode: BOOL:=FALSE;
			(*enable external operation mode*)
		MXwalSlewAct: BOOL:=FALSE;
			(*wal sg limitation activated*)
		MXwalRadMaBoAct: BOOL:=FALSE;
			(*wal radius limitation main boom activated*)
		MXwalRadLJibAct: BOOL:=FALSE;
			(*wal radius limitation luffing jib activated*)
		MXwalHigMaBoAct: BOOL:=FALSE;
			(*wal hight limitation main boom activated*)
		MXwalHigLJibAct: BOOL:=FALSE;
			(*wal hight limitation luffing jib activated*)
		MXwalLinMaBoAct: BOOL:=FALSE;
			(*wal line limitation main boom activated*)
		MXwalLinLuJiAct: BOOL:=FALSE;
			(*wal line limitation luffing jib activated*)
		MXwalSecMaBoAct: BOOL:=FALSE;
			(*wal sector limitation main boom activated*)
		MXwalSecLuJiAct: BOOL:=FALSE;
			(*wal sector limitation luffing jib activated*)
		MXlmlTypeDutyCyc: BOOL:=FALSE;
			(*lml type is duty cycle machine*)
		MXlmlRiggingAct: BOOL:=FALSE;
			(*lml 2010 rigging is activated*)
		MXlmlLuffJibEnab: BOOL:=FALSE;
			(*lml luffing jib enabled*)
		MXlmlFix_LuffJib: BOOL:=FALSE;
			(*lml fixed or luffing jib enabled*)
		MXtaraMainBoom: BOOL:=FALSE;
			(*tara main boom*)
		MXtaraLuffJib: BOOL:=FALSE;
			(*tara luffing jib*)
		MXhg1RopeLenMeas: BOOL:=FALSE;
			(*rope lenght measuring hoisting gear 1 enabled*)
		MXhg2RopeLenMeas: BOOL:=FALSE;
			(*rope lenght measuring hoisting gear 2 enabled*)
		MX2TJoystick: BOOL:=FALSE;
			(*enable double T joystick*)
		MXhg1Preselect: BOOL:=FALSE;
			(*hg1  preselected*)
		MXhg2Preselect: BOOL:=FALSE;
			(*hg2  preselected*)
		MXlg2Active: BOOL:=FALSE;
			(*luffing gear 2 active*)
		MXleaderOper: BOOL:=FALSE;
			(*leader operation active*)
		MXtranspOper: BOOL:=FALSE;
			(*transportation operation mode active*)
		MXcoucarOper: BOOL:=FALSE;
			(*counterweight carrier operation mode active*)
		MXchUnitDistance: BOOL:=FALSE;
			(*change unit for distance*)
		MXchUnitLoad: BOOL:=FALSE;
			(*change unit for load*)
		MXchUnitPress: BOOL:=FALSE;
			(*change unit for pressure*)
		MXchUnitTemp: BOOL:=FALSE;
			(*change unit for temperature*)
		MXchUnitVolume: BOOL:=FALSE;
			(*change unit for volume*)
		MXchUnitSpeed: BOOL:=FALSE;
			(*change unit for speed*)
		MXlockHg1: BOOL:=FALSE;
			(*lock hg1*)
		MXlockHg2: BOOL:=FALSE;
			(*lock hg2*)
		MXlockLg: BOOL:=FALSE;
			(*lock luffing gear*)
		MXlockSg: BOOL:=FALSE;
			(*lock slewing gear*)
		MXlockTg: BOOL:=FALSE;
			(*lock travelling gear*)
		MXaddHydrPresel: BOOL:=FALSE;
			(*ad additional hydraulics preselected*)
		MXmachTypeLR1300: BOOL:=FALSE;
			(*machine type LR1300 activated*)
		MDsgAngeOffset: REAL:=0.0;
			(*sg angle offset analog angle sensor*)
		MDdgcGivenHight: REAL:=0.0;
			(*ad dynamic ground compaction given hoisting hight*)
		MDdgcGivenBeats: REAL:=0.0;
			(*ad dynamic ground compaction given beats*)
		MDdgcGivenCompac: REAL:=0.0;
			(*ad dynamic ground compaction given compaction*)
		MDdgcGivSlowDown: REAL:=0.0;
			(*ad dynamic ground compaction given slown down lenght*)
		MDhg1Reeving: REAL:=0.0;
			(*hg1 reeving*)
		MDhg2Reeving: REAL:=0.0;
			(*hg2 reeving*)
		MDhg1RopeLenOff: REAL:=0.0;
			(*hg1 rope length winch  - boom offset*)
		MDhg2RopeLenOff: REAL:=0.0;
			(*hg1 rope length winch  - boom offset*)
		MDboomHookLoad: REAL:=0.0;
			(*main boom hook load*)
		MDlufJibHookLoad: REAL:=0.0;
			(*luffing jib hook load*)
		MDfuelConAbs_Lit: UDINT:=0;
			(*engine fuel consumption absolut [l]*)
		MDfuelConRel_Lit: UDINT:=0;
			(*engine fuel consumption sinde reset [l] (relative)*)
		MDradiusLimitMaB: REAL:=0.0;
			(*radius limitation main boom [m]*)
		MDhightLimitMaB: REAL:=0.0;
			(*hight limitation main boom [m]*)
		MDradiusLimitJib: REAL:=0.0;
			(*radius limitation luffing Jib [m]*)
		MDhightLimitJib: REAL:=0.0;
			(*hight limitation luffing Jib [m]*)
		MDsgLimitLeft: REAL:=0.0;
			(*sg limit left angle in degree*)
		MDsgLimitRight: REAL:=0.0;
			(*sg limit right angle in degree*)
		MDhg1OperatHour: REAL:=0.0;
			(*operation hours hoisting gear 1*)
		MDhg2OperatHour: REAL:=0.0;
			(*operation hours hoisting gear 2*)
		MDlgOperatHour: REAL:=0.0;
			(*operation hours luffing gear (main boom)*)
		MDlg2OperatHour: REAL:=0.0;
			(*operation hours luffing gear 2 (luffin jib)*)
		MDlg3OperatHour: REAL:=0.0;
			(*operation hours derrick winch*)
		MDsgOperatHour: REAL:=0.0;
			(*operation hours slewing gear*)
		MDtgOperatHour: REAL:=0.0;
			(*operation hours travelling gear*)
		MDengOperatHour: REAL:=0.0;
			(*operation hours diesel engine*)
		MDhg1OperHourRel: REAL:=0.0;
			(*operation houres hoisting gear 1 relative*)
		MDhg2OperHourRel: REAL:=0.0;
			(*operation houres hoisting gear 2 relative*)
		MDlgOperHourRel: REAL:=0.0;
			(*operation houres luffing gear (main boom) relative*)
		MDlg2OperHourRel: REAL:=0.0;
			(*operation houres luffing gear 2 (luffin jib) relative*)
		MDlg3OperHourRel: REAL:=0.0;
			(*operation houres derrick winch relative*)
		MDsgOperHourRel: REAL:=0.0;
			(*operation houres slewing gear relative*)
		MDtgOperHourRel: REAL:=0.0;
			(*operation houres travelling gear relative*)
		MDengOperHourRel: REAL:=0.0;
			(*operation houres diesel engine relative*)
		MDadhOperHour: REAL:=0.0;
			(*operation houres additional hydraulic *)
		MDgrbOperHour: REAL:=0.0;
			(*operation houres hydraulic grab*)
		MDddOperHour: REAL:=0.0;
			(*operation houres drilling drive*)
		MDvibOperHour: REAL:=0.0;
			(*operation houres vibrator*)
		MDhamOperHour: REAL:=0.0;
			(*operation houres hammer*)
		MDadhOperHourRel: REAL:=0.0;
			(*operation houres additional hydraulic relative*)
		MDgrbOperHourRel: REAL:=0.0;
			(*operation houres hydraulic grab relative*)
		MDddOperHourRel: REAL:=0.0;
			(*operation houres drilling drive relative*)
		MDvibOperHourRel: REAL:=0.0;
			(*operation houres vibrator relative*)
		MDhamOperHourRel: REAL:=0.0;
			(*operation houres hammer relative*)
		MWstorActualMode: UINT:=0;
			(*stored preselected actual mode*)
		MRwalLine1P1RadM: REAL:=0.0;
			(*wal line 1 point 1 radius main boom*)
		MRwalLine1P1AngM: REAL:=0.0;
			(*wal line 1 point 1 angle main boom*)
		MRwalLine1P2RadM: REAL:=0.0;
			(*wal line 1 point 2 radius main boom*)
		MRwalLine1P2AngM: REAL:=0.0;
			(*wal line 1 point 2 angle main boom*)
		MRwalLine2P1RadM: REAL:=0.0;
			(*wal line 2 point 1 radius main boom*)
		MRwalLine2P1AngM: REAL:=0.0;
			(*wal line 2 point 1 angle main boom*)
		MRwalLine2P2RadM: REAL:=0.0;
			(*wal line 2 point 2 radius main boom*)
		MRwalLine2P2AngM: REAL:=0.0;
			(*wal line 2 point 2 angle main boom*)
		MRwalLine1P1RadJ: REAL:=0.0;
			(*wal line 1 point 1 radius main boom*)
		MRwalLine1P1AngJ: REAL:=0.0;
			(*wal line 1 point 1 angle main boom*)
		MRwalLine1P2RadJ: REAL:=0.0;
			(*wal line 1 point 2 radius main boom*)
		MRwalLine1P2AngJ: REAL:=0.0;
			(*wal line 1 point 2 angle main boom*)
		MRwalLine2P1RadJ: REAL:=0.0;
			(*wal line 2 point 1 radius main boom*)
		MRwalLine2P1AngJ: REAL:=0.0;
			(*wal line 2 point 1 angle main boom*)
		MRwalLine2P2RadJ: REAL:=0.0;
			(*wal line 2 point 2 radius main boom*)
		MRwalLine2P2AngJ: REAL:=0.0;
			(*wal line 2 point 2 angle main boom*)
		MRwalSect1P1RadM: REAL:=0.0;
			(*wal sector 1 point 1 radius main boom*)
		MRwalSect1P1AngM: REAL:=0.0;
			(*wal sector 1 point 1 angle main boom*)
		MRwalSect1P2RadM: REAL:=0.0;
			(*wal sector 1 point 2 radius main boom*)
		MRwalSect1P2AngM: REAL:=0.0;
			(*wal sector 1 point 2 angle main boom*)
		MRwalSect1P3RadM: REAL:=0.0;
			(*wal sector 1 point 3 radius main boom*)
		MRwalSect1P3AngM: REAL:=0.0;
			(*wal sector 1 point 3 angle main boom*)
		MRwalSect1P1RadJ: REAL:=0.0;
			(*wal sector 1 point 1 radius luffing jib*)
		MRwalSect1P1AngJ: REAL:=0.0;
			(*wal sector 1 point 1 angle luffing jib*)
		MRwalSect1P2RadJ: REAL:=0.0;
			(*wal sector 1 point 2 radius luffing jib*)
		MRwalSect1P2AngJ: REAL:=0.0;
			(*wal sector 1 point 2 angle luffing jib*)
		MRwalSect1P3RadJ: REAL:=0.0;
			(*wal sector 1 point 3 radius luffing jib*)
		MRwalSect1P3AngJ: REAL:=0.0;
			(*wal sector 1 point 3 angle luffing jib*)
		MRvib1Volume: REAL:=0.0;
			(*vibrator 1 volume*)
		MRvib1Press: REAL:=0.0;
			(*vibrator 1 pressure*)
		MRvib1ClampPress: REAL:=0.0;
			(*vibrator 1 clamp pressure*)
		MRvib1ExcTime: REAL:=0.0;
			(*vibrator 1 excentric adjust time*)
		MRham1Volume: REAL:=0.0;
			(*hammer 1 volume*)
		MRham1Press: REAL:=0.0;
			(*hammer 1 pressure*)
		MRdrill1Volume: REAL:=0.0;
			(*drill 1 volume*)
		MRdrill1Press: REAL:=0.0;
			(*drill 1 pressure*)
		MRgrab1VolOpen: REAL:=0.0;
			(*grab 1 volume open*)
		MRgrab1VolClose: REAL:=0.0;
			(*grab 1 volume close*)
		MRgrab1PresOpen: REAL:=0.0;
			(*grab 1 pressure open*)
		MRgrab1PresClose: REAL:=0.0;
			(*grab 1 pressure close*)
	END_VAR
	VAR_EXTERNAL CONSTANT RETAIN
		CXadGroundPress: BOOL:=FALSE;
			(*enable ground pressure*)
		CXsuperstAngSens: BOOL:=FALSE;
			(*superstructure angle indication*)
		CXadRopLenCorrec: BOOL:=FALSE;
			(*rope length correction of the boom movement*)
		CXwalPresel: BOOL:=FALSE;
			(*ad work area limitation active*)
		CXadDrillOperat: BOOL:=FALSE;
			(*additional device drilling drive operation *)
		CXaddWinch: BOOL:=FALSE;
			(*additional: additional winch *)
		CXauxWinch: BOOL:=FALSE;
			(*release lg2 as auxiliary winch*)
		CXadPassWinch: BOOL:=FALSE;
			(*additional: preselection passenger  winch *)
		CXadDynGrouComp: BOOL:=FALSE;
			(*additional device dynamic ground compaction*)
		CXadSBHydrGrab: BOOL:=FALSE;
			(*add. soletanche bachy hydraulic grab control*)
		CXadSMHydrGrab: BOOL:=FALSE;
			(*add. soilmec hydraulic grab control*)
		CXadLEHydrGrab: BOOL:=FALSE;
			(*add. leffer hydraulic grab control*)
		CXadHydrGrab: BOOL:=FALSE;
			(*ad hydraulic grab control without hose winch*)
		CXadVibOperat: BOOL:=FALSE;
			(*additional device vibrator operation*)
		CXadHamOperat: BOOL:=FALSE;
			(*additional device hammer operation *)
		CXadKellyHydGrab: BOOL:=FALSE;
			(*add. device hydraulic kelly grab operation*)
		CXadHydrGrabHose: BOOL:=FALSE;
			(*add. device hydraulic grab with hose winch*)
		CXadExtOperMode: BOOL:=FALSE;
			(*additional external operation mode*)
		CXadVibFreqMeas: BOOL:=FALSE;
			(*add.vibrator frequency measuring equipment*)
		CXadDragliOpMode: BOOL:=FALSE;
			(*add. dragline operation mode*)
		CXadCouCarrier: BOOL:=FALSE;
	END_VAR
	VAR 
		LXdummy: BOOL:=FALSE;
		LRdummy: REAL:=0.0;
		LXinitOk: BOOL:=FALSE;
		LXpageAtStartOk: BOOL:=FALSE;
		LXlmlCalculated: BOOL:=FALSE;
		LXlimitSw1: BOOL:=FALSE;
		LXlimitSw2: BOOL:=FALSE;
		LXlimitSw3: BOOL:=FALSE;
		LXlimitSw4: BOOL:=FALSE;
		LXlimitSw5: BOOL:=FALSE;
		LXlimitSw6: BOOL:=FALSE;
		LXlimitSw7: BOOL:=FALSE;
		LXlimitSw8: BOOL:=FALSE;
		LXlimitSw9: BOOL:=FALSE;
		LXlimitSw10: BOOL:=FALSE;
		LXlimitSw11: BOOL:=FALSE;
		LXlimitSw12: BOOL:=FALSE;
		LXlimitSw13: BOOL:=FALSE;
		LXlimitSw14: BOOL:=FALSE;
		LXlimitSw15: BOOL:=FALSE;
		LXlimitSw16: BOOL:=FALSE;
		LXlimitSw17: BOOL:=FALSE;
		LXlimitSw18: BOOL:=FALSE;
		LXlimitSw19: BOOL:=FALSE;
		LXlimitSw20: BOOL:=FALSE;
		LXlimitSw21: BOOL:=FALSE;
		LXlimitSw22: BOOL:=FALSE;
		LXlimitSw23: BOOL:=FALSE;
		LXlimitSw24: BOOL:=FALSE;
		LXlimitSw25: BOOL:=FALSE;
		LXlimitSw26: BOOL:=FALSE;
		LXlimitSw27: BOOL:=FALSE;
		LXlimitSw28: BOOL:=FALSE;
		LXlimitSw29: BOOL:=FALSE;
		LXlimitSw30: BOOL:=FALSE;
		LXlimitSw31: BOOL:=FALSE;
		LXeclimitSw1: BOOL:=FALSE;
		LXeclimitSw2: BOOL:=FALSE;
		LXeclimitSw3: BOOL:=FALSE;
		LXeclimitSw4: BOOL:=FALSE;
		LXeclimitSw5: BOOL:=FALSE;
		LXeclimitSw6: BOOL:=FALSE;
		LXeclimitSw7: BOOL:=FALSE;
		LXeclimitSw8: BOOL:=FALSE;
		LXeclimitSw9: BOOL:=FALSE;
		LXeclimitSw10: BOOL:=FALSE;
		LXeclimitSw11: BOOL:=FALSE;
		LXeclimitSw12: BOOL:=FALSE;
		LXeclimitSw13: BOOL:=FALSE;
		LXeclimitSw14: BOOL:=FALSE;
		LXeclimitSw15: BOOL:=FALSE;
		LXeclimitSw16: BOOL:=FALSE;
		LXeclimitSw17: BOOL:=FALSE;
		LXeclimitSw18: BOOL:=FALSE;
		LBecLimSwitExt: BYTE:=0;
		LDlimitSw1: UINT:=0;
		LDlimitSw2: UINT:=0;
		LRsymNumbLimitSw: REAL:=0.0;
		LRcurrentMode: REAL:=0.0;
		Integrator1: Integrator;
		R_TRIG1: R_TRIG;
		R_TRIG2: R_TRIG;
		R_TRIG3: R_TRIG;
		R_TRIG4: R_TRIG;
		R_TRIG5: R_TRIG;
		R_TRIG6: R_TRIG;
		R_TRIG7: R_TRIG;
		R_TRIG8: R_TRIG;
		R_TRIG9: R_TRIG;
		F_TRIG1: F_TRIG;
		F_TRIG2: F_TRIG;
		F_TRIG3: F_TRIG;
		RStaraMain: RS;
		RStaraJib: RS;
		RS3: RS;
		RS4: RS;
		RS5: RS;
		RS6: RS;
		RS7: RS;
		RS8: RS;
		RSlockHg1: RS;
		RSlockHg2: RS;
		RSlockLg: RS;
		RSlockSg: RS;
		RSlockTg: RS;
		TOF1: TOF;
		TOF2: TOF;
		SR1: SR;
		SR2: SR;
		Message1: MsgRealReal;
		Message2: MsgRealReal;
		Message3: MsgRealReal;
		Message4: MsgRealReal;
		CorrValue_Bool1: CorrValue_Bool;
		CorrValue_Bool2: CorrValue_Bool;
		SCmodeSel1: SCmodeSelV021;
		FB_demux1: FB_demuxV010;
		FB_demux2: FB_demuxV010;
		FB_demux3: FB_demuxV010;
		FB_demux4: FB_demuxV010;
		FB_demux5: FB_demuxV010;
		FB_demux6: FB_demuxV010;
	END_VAR
'FBD'
BODY
    WORKSPACE
        NETWORK_LIST_TYPE := NWTYPEFBD ;
        ACTIVE_NETWORK := 0 ;
    END_WORKSPACE
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,init first time,1,1,27,2,);
B(B_VARIN,,MXnewModeSelect,9,8,11,10,);
B(B_FB,R_TRIG,R_TRIG1,11,7,18,10,);
B(B_F,not,,13,3,18,6,);
B(B_VARIN,,LXinitOk,11,4,13,6,);
B(B_F,@OR-2,,18,3,23,7,);
B(B_JUMP,,init,23,4,25,6,);
B(B_COMMENT,,Wenn neuer Mode ausgewählt ist~ wird init noch einmalø^durchlaufen~ damit die neue Betriebsart gesetzt wird.ø^ø^Grund: BA ist retain~ damit beim nächsten Startupø^im autexec.frc die Werte schon gesetzt sind.,27,4,56,9,);
L(18,6,18,9);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 5 ;
        NETWORK_BODY
B(B_FB,F_TRIG,F_TRIG1,10,1,17,4,);
B(B_VAROUT,,LXlmlCalculated,17,2,19,4,);
B(B_VARIN,,MXlmlCalculating,8,2,10,4,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 25 ;
        NETWORK_BODY
B(B_VARIN,,MXassemblyOperat,8,10,10,12,);
B(B_FB,R_TRIG,R_TRIG3,10,9,17,12,);
B(B_FB,F_TRIG,F_TRIG2,10,15,17,18,);
B(B_VARIN,,MXrcChangeContro,8,13,10,15,);
B(B_FB,R_TRIG,R_TRIG2,10,6,17,9,);
B(B_VARIN,,MXengSpeedStore,8,7,10,9,);
B(B_COMMENT,,set one beep,1,1,27,2,);
B(B_FB,R_TRIG,R_TRIG4,10,12,17,15,);
B(B_FB,R_TRIG,R_TRIG5,10,18,17,21,);
B(B_VARIN,,MXscOneLimitSw,8,19,10,21,);
B(B_FB,R_TRIG,R_TRIG6,10,21,17,24,);
B(B_VARIN,,MXscMoreLimitSw,8,22,10,24,);
B(B_VARIN,,SXMoneBeep,22,4,24,6,);
B(B_VAROUT,,SXMoneBeep,29,4,31,6,);
B(B_F,@OR-7,,24,3,29,12,);
B(B_COMMENT,,Diese Variable wird vom Monitor zurückgesetztø^nachdem der Beeper angesteuert wurde.,29,6,48,8,);
L(10,14,10,17);
L(17,8,18,8);
L(17,11,19,11);
L(17,14,20,14);
L(17,17,21,17);
L(17,20,22,20);
L(17,23,23,23);
L(22,10,24,10);
L(21,9,24,9);
L(20,8,24,8);
L(19,7,24,7);
L(18,6,24,6);
L(18,6,18,8);
L(19,7,19,11);
L(20,8,20,14);
L(21,9,21,17);
L(22,10,22,20);
L(23,11,23,23);
L(23,11,24,11);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_VARIN,,MXscOneLimitSw,8,4,10,6,);
B(B_VARIN,,MXscMoreLimitSw,8,5,10,7,);
B(B_F,@OR-2,,10,3,15,7,);
B(B_F,@AND-2,,15,6,20,10,);
B(B_VAROUT,,SXactivateBeep,20,7,22,9,);
B(B_VARIN,,MXlimitSwBridged,13,8,15,10,);
B(B_COMMENT,,set beeper by,1,1,27,2,);
L(15,5,15,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 5 ;
        NETWORK_BODY
B(B_COMMENT,,Hauptseite,1,1,62,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_VARIN,,MXlgSpeed2,9,4,11,6,);
B(B_F,sel,,11,3,16,8,);
B(B_VARIN,,1.0,9,5,11,7,);
B(B_VARIN,,2.0,9,6,11,8,);
B(B_F,sel,,16,2,21,7,);
B(B_VARIN,,3.0,14,8,16,10,);
B(B_VAROUT,,SRlgSpeed,21,3,23,5,);
B(B_VARIN,,MXlgSpeed3,14,1,16,3,);
L(16,6,16,9);
L(16,2,16,4);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_F,sel,,11,3,16,8,);
B(B_VARIN,,MXsmallSuperstr,9,4,11,6,);
B(B_VARIN,,1.0,9,5,11,7,);
B(B_VARIN,,2.0,9,6,11,8,);
B(B_F,sel,,16,2,21,7,);
B(B_VARIN,,MXluffingCylinde,14,1,16,3,);
B(B_VAROUT,,SRmachineType,21,3,23,5,);
B(B_VARIN,,3.0,14,8,16,10,);
L(16,2,16,4);
L(16,6,16,9);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_VARIN,,MXlmlFixedJibEna,9,2,11,4,);
B(B_VARIN,,MXlmlLuffJibEnab,9,3,11,5,);
B(B_VAROUT,,SXlmlMainBoom,16,2,18,4,);
B(B_F,@AND-2,,11,1,16,5,NN);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VAROUT,,SXlmlMainReduct,11,1,13,3,);
B(B_VARIN,,MXlmlMainRedEnab,9,1,11,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VAROUT,,SXlmlFixedJib,11,1,13,3,);
B(B_VARIN,,MXlmlFixedJibEna,9,1,11,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VAROUT,,SXlmlLuffJib,11,1,13,3,);
B(B_VARIN,,MXlmlLuffJibEnab,9,1,11,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VAROUT,,SXlmlFixLufJib,11,1,13,3,);
B(B_VARIN,,MXlmlFix_LuffJib,9,1,11,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VARIN,,MXlmlLoadMainMid,9,1,11,3,);
B(B_VAROUT,,SXlmlLoLocMaMiWJ,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VAROUT,,SXlmlMidfall,11,1,13,3,);
B(B_VARIN,,MXlmlMidfall,9,1,11,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VAROUT,,SXlmlDerrick,11,1,13,3,);
B(B_VARIN,,MXlmlDerrickEnab,9,1,11,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VAROUT,,SXlmlCouCar,11,1,13,3,);
B(B_VARIN,,MXcouCarActive,9,1,11,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_F,not,,11,0,16,3,);
B(B_VAROUT,,SXlmlOkAngPivPie,16,1,18,3,);
B(B_VARIN,,MXlmlErrAngPivPi,9,1,11,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_F,not,,11,0,16,3,);
B(B_VAROUT,,SXlmlOkGeometric,16,1,18,3,);
B(B_VARIN,,MXlmlErrGeometri,9,1,11,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VAROUT,,SXlmlOkLoadCalc,16,1,18,3,);
B(B_F,@AND-2,,11,0,16,4,NN);
B(B_VARIN,,MXlmlDeactive,9,2,11,4,);
B(B_VARIN,,MXlmlErrLoaCalc,9,1,11,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VAROUT,,SXlmlOkLoaCalcDe,16,1,18,3,);
B(B_F,@AND-2,,11,0,16,4,NN);
B(B_VARIN,,MXlmlDeactive,9,2,11,4,);
B(B_VARIN,,MXlmlErrLoaCaDer,9,1,11,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VAROUT,,SRlmlUtilization,11,1,13,3,);
B(B_VARIN,,MDlmlUtilization,9,1,11,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VAROUT,,SRlmlUtilBack,11,1,13,3,);
B(B_VARIN,,MDlmlUtilBackwar,9,1,11,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VAROUT,,SRlmlBoomAngle,11,1,13,3,);
B(B_VARIN,,MDlmlAngleBoom,9,1,11,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VAROUT,,SRlmlJibAngle,11,1,13,3,);
B(B_VARIN,,MDlmlAngleLufJib,9,1,11,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VAROUT,,SRlmlCouCarLoad,11,1,13,3,);
B(B_VARIN,,MDlmlCounterWeig,9,1,11,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VAROUT,,SRlmlCouCarRad,11,1,13,3,);
B(B_VARIN,,MDccDistanceAbso,9,1,11,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 26 ;
        NETWORK_BODY
B(B_F,sel,,17,15,22,20,);
B(B_VAROUT,,SRlmlMaxLoad,22,16,24,18,);
B(B_VARIN,,MDlmlLoadBoom,13,6,15,8,);
B(B_VARIN,,MDlmlLoadLuffJib,13,7,15,9,);
B(B_VARIN,,MXlmlLoadMainMid,9,3,11,5,);
B(B_VARIN,,MXlmlFix_LuffJib,9,2,11,4,);
B(B_VARIN,,MDlmlMaxLoad1,13,17,15,19,);
B(B_VARIN,,MDlmlMaxLoad2,13,18,15,20,);
B(B_F,sel,,17,20,22,25,);
B(B_VARIN,,MDlmlRadiusMBoom,13,22,15,24,);
B(B_VARIN,,MDlmlRadiusLJib,13,23,15,25,);
B(B_F,sel,,17,4,22,9,);
B(B_VAROUT,,SRlmlActLoadRad,22,21,24,23,);
B(B_VARIN,,MDboomHookLoad,13,12,15,14,);
B(B_VARIN,,MDlufJibHookLoad,13,13,15,15,);
B(B_F,sel,,17,10,22,15,);
B(B_F,@AND-2,,11,1,16,5,0N);
B(B_VAROUT,,SRlmlActCompLoad,22,5,24,7,);
B(B_VAROUT,,SRlmlActHookLoad,22,11,24,13,);
B(B_F,@SUB,,22,7,27,11,);
B(B_F,limit,,32,6,38,11,);
B(B_VARIN,,0.0,30,7,32,9,);
B(B_VAROUT,,SRlmlActLoad,38,7,40,9,);
L(15,7,17,7);
L(15,8,17,8);
L(16,17,17,17);
L(15,23,17,23);
L(15,24,17,24);
L(16,22,17,22);
L(15,18,17,18);
L(15,19,17,19);
L(16,6,17,6);
L(15,13,17,13);
L(15,14,17,14);
L(16,12,17,12);
L(22,10,22,12);
L(22,6,22,9);
L(32,9,32,10);
L(27,9,32,9);
L(16,3,16,22);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_F,sel,,15,1,20,6,);
B(B_VAROUT,,SRlmlActHeadHig,20,2,22,4,);
B(B_VARIN,,MXlmlFix_LuffJib,13,2,15,4,);
B(B_VARIN,,MDlmlMaxHight1,13,3,15,5,);
B(B_VARIN,,MDlmlMaxHight2,13,4,15,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VAROUT,,SRlmlJibLoadOLL,11,1,13,3,);
B(B_VARIN,,MDlmlLoadLuffJib,9,1,11,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 14 ;
        NETWORK_BODY
B(B_F,@AND-2,,18,4,23,8,0N);
B(B_VARIN,,MXlmlLoadMainMid,9,7,11,9,);
B(B_VARIN,,MXlmlFix_LuffJib,9,6,11,8,);
B(B_F,@AND-2,,25,7,30,11,);
B(B_FB,RS,RStaraMain,37,4,42,8,);
B(B_VAROUT,,MXtaraMainBoom,42,5,44,7,);
B(B_COMMENT,,ACHTUNG: Das RStaraMain wird im init Teil gesetzt,43,2,60,4,);
B(B_COMMENT,,reset load,1,1,27,2,);
B(B_VARIN,,MXtaraMainBoom,23,9,25,11,);
B(B_F,@OR-2,,30,7,35,11,);
B(B_VARIN,,LXlmlCalculated,28,11,30,13,);
B(B_VARIN,,SXMlmlTaraActLoa,15,3,17,5,);
B(B_F,@AND-2,,11,5,16,9,0N);
L(24,9,25,9);
L(35,9,36,9);
L(36,7,36,9);
L(36,7,37,7);
L(23,6,37,6);
L(17,6,18,6);
L(24,6,24,9);
L(30,10,30,12);
L(17,4,17,6);
L(16,7,18,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 16 ;
        NETWORK_BODY
B(B_F,@AND-2,,27,9,32,13,0N);
B(B_VARIN,,MXtaraMainBoom,22,11,24,13,);
B(B_F,sel,,41,9,46,14,);
B(B_F,limit,,51,8,57,13,);
B(B_VARIN,,0.0,49,9,51,11,);
B(B_VAROUT,,MDboomHookLoad,57,9,59,11,);
B(B_F,sel,,34,4,39,9,);
B(B_VARIN,,MDboomHookLoad,32,6,34,8,);
B(B_F,@AND-2,,27,2,32,6,);
B(B_VARIN,,0.0,39,12,41,14,);
B(B_F,@AND-2,,18,2,23,6,0N);
B(B_VARIN,,MXlmlLoadMainMid,9,5,11,7,);
B(B_VARIN,,MXlmlFix_LuffJib,9,4,11,6,);
B(B_VARIN,,SXMlmlTaraActLoa,15,1,17,3,);
B(B_F,@OR-2,,32,9,37,13,);
B(B_VARIN,,LXlmlCalculated,30,13,32,15,);
B(B_F,@AND-2,,11,3,16,7,0N);
B(B_VARIN,,MDlmlLoadBoom,32,7,34,9,);
L(24,12,27,12);
L(40,12,41,12);
L(46,11,51,11);
L(51,11,51,12);
L(25,11,27,11);
L(32,4,33,4);
L(33,4,33,6);
L(33,6,34,6);
L(24,5,27,5);
L(40,6,40,12);
L(39,6,40,6);
L(25,4,25,11);
L(24,5,24,12);
L(17,4,18,4);
L(17,2,17,4);
L(23,4,27,4);
L(37,11,41,11);
L(32,12,32,14);
L(16,5,18,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_F,@AND-2,,18,3,23,7,);
B(B_VARIN,,MXlmlLoadMainMid,9,6,11,8,);
B(B_VARIN,,MXlmlFix_LuffJib,9,5,11,7,);
B(B_F,@AND-2,,25,6,30,10,);
B(B_FB,RS,RStaraJib,37,3,42,7,);
B(B_VAROUT,,MXtaraLuffJib,42,4,44,6,);
B(B_VARIN,,MXtaraLuffJib,23,8,25,10,);
B(B_F,@OR-2,,30,6,35,10,);
B(B_VARIN,,LXlmlCalculated,28,10,30,12,);
B(B_VARIN,,SXMlmlTaraActLoa,15,2,17,4,);
B(B_COMMENT,,ACHTUNG: Das RStaraJib wird im init Teil gesetzt,43,1,60,3,);
B(B_F,@AND-2,,11,4,16,8,0N);
L(24,8,25,8);
L(35,8,36,8);
L(36,6,36,8);
L(36,6,37,6);
L(23,5,37,5);
L(17,5,18,5);
L(24,5,24,8);
L(30,9,30,11);
L(17,3,17,5);
L(16,6,18,6);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 16 ;
        NETWORK_BODY
B(B_F,@AND-2,,27,9,32,13,0N);
B(B_VARIN,,MXtaraLuffJib,22,11,24,13,);
B(B_F,sel,,41,9,46,14,);
B(B_F,limit,,51,8,57,13,);
B(B_VARIN,,0.0,49,9,51,11,);
B(B_VAROUT,,MDlufJibHookLoad,57,9,59,11,);
B(B_F,sel,,34,4,39,9,);
B(B_VARIN,,MDlufJibHookLoad,32,6,34,8,);
B(B_F,@AND-2,,27,2,32,6,);
B(B_VARIN,,0.0,39,12,41,14,);
B(B_F,@AND-2,,18,2,23,6,);
B(B_VARIN,,MXlmlLoadMainMid,9,5,11,7,);
B(B_VARIN,,MXlmlFix_LuffJib,9,4,11,6,);
B(B_VARIN,,SXMlmlTaraActLoa,15,1,17,3,);
B(B_F,@OR-2,,32,9,37,13,);
B(B_VARIN,,LXlmlCalculated,30,13,32,15,);
B(B_F,@AND-2,,11,3,16,7,0N);
B(B_VARIN,,MDlmlLoadLuffJib,32,7,34,9,);
L(24,12,27,12);
L(40,12,41,12);
L(46,11,51,11);
L(51,11,51,12);
L(25,11,27,11);
L(32,4,33,4);
L(33,4,33,6);
L(33,6,34,6);
L(24,5,27,5);
L(40,6,40,12);
L(39,6,40,6);
L(25,4,25,11);
L(24,5,24,12);
L(17,4,18,4);
L(17,2,17,4);
L(23,4,27,4);
L(37,11,41,11);
L(32,12,32,14);
L(16,5,18,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_VARIN,,MXlmlLoadMainMid,9,3,11,5,);
B(B_VARIN,,MXlmlFix_LuffJib,9,2,11,4,);
B(B_F,@AND-2,,11,1,16,5,0N);
B(B_F,sel,,16,3,21,8,);
B(B_VAROUT,,SXlmlLoadTared,21,4,23,6,);
B(B_VARIN,,MXtaraMainBoom,14,5,16,7,);
B(B_VARIN,,MXtaraLuffJib,14,6,16,8,);
L(16,3,16,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_F,sel,,11,1,16,6,);
B(B_VAROUT,,SXMlmlTaraActLoa,16,2,18,4,);
B(B_VARIN,,SXMlmlTaraActLoa,9,3,11,5,);
B(B_VARIN,,FALSE,9,4,11,6,);
B(B_VARIN,,SXMlmlTaraActLoa,9,2,11,4,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 5 ;
        NETWORK_BODY
B(B_COMMENT,,rope length measuring,1,1,27,2,);
B(B_VARIN,,MXhg1RopeLenMeas,9,3,11,5,);
B(B_VAROUT,,SXhg1RopeLenMeas,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VARIN,,MXhg1WinchLift,9,1,11,3,);
B(B_VAROUT,,SXhg1Lift,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VARIN,,MXhg1WinchLower,9,1,11,3,);
B(B_VAROUT,,SXhg1Lower,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VARIN,,MXhg2RopeLenMeas,9,1,11,3,);
B(B_VAROUT,,SXhg2RopeLenMeas,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VARIN,,MXhg2WinchLift,9,1,11,3,);
B(B_VAROUT,,SXhg2Lift,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VARIN,,MXhg2WinchLower,9,1,11,3,);
B(B_VAROUT,,SXhg2Lower,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VARIN,,MDhg1RopeSpeed,9,1,11,3,);
B(B_VAROUT,,SRhg1RopeSpeed,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VARIN,,MDhg2RopeSpeed,9,1,11,3,);
B(B_VAROUT,,SRhg2RopeSpeed,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 5 ;
        NETWORK_BODY
B(B_COMMENT,,wind speed,1,1,27,2,);
B(B_VARIN,,MXwindSpeedAct,9,3,11,5,);
B(B_VAROUT,,SXwindSpeedAct,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VARIN,,MXwindSpeedWarn,9,1,11,3,);
B(B_VAROUT,,SXwindSpeedWarn,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VARIN,,MXwindSpeedError,9,1,11,3,);
B(B_VAROUT,,SXwindSpeedError,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VARIN,,MDwindSpeed,9,1,11,3,);
B(B_VAROUT,,SRwindSpeed,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_VARIN,,CXadGroundPress,9,3,11,5,);
B(B_VAROUT,,SXgroundPress,11,3,13,5,);
B(B_COMMENT,,ground pressure,1,1,27,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_VARIN,,MXlmlErrLoaCalc,9,2,11,4,);
B(B_VARIN,,MXlmlErrLoaCaDer,9,3,11,5,);
B(B_F,@AND-2,,11,1,16,5,NN);
B(B_VAROUT,,SXgrouPressValid,16,2,18,4,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VAROUT,,SRgroundPress0,11,1,13,3,);
B(B_VARIN,,MDadGrouPre0Grd,9,1,11,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VAROUT,,SRgroundPress45,11,1,13,3,);
B(B_VARIN,,MDadGrouPre45Grd,9,1,11,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VAROUT,,SRgroundPress90,11,1,13,3,);
B(B_VARIN,,MDadGrouPre90Grd,9,1,11,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_VARIN,,CXsuperstAngSens,9,3,11,5,);
B(B_VAROUT,,SXsuperstrAngle,11,3,13,5,);
B(B_COMMENT,,superstructure inclination,1,1,27,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VAROUT,,SRsuperstrAngleX,11,1,13,3,);
B(B_VARIN,,MDsuperstAngSenX,9,1,11,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VAROUT,,SRsuperstrAngleY,11,1,13,3,);
B(B_VARIN,,MDsuperstAngSenY,9,1,11,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VAROUT,,SRsuperstrAngAbs,11,1,13,3,);
B(B_VARIN,,MDsuperstrAngAbs,9,1,11,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VAROUT,,SXinclShutOff,11,1,13,3,);
B(B_VARIN,,MXinclShutOffScr,9,1,11,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VAROUT,,SXinclShutOffPre,11,1,13,3,);
B(B_VARIN,,MXinclShutPreScr,9,1,11,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_FB,RS,RS8,11,2,16,6,0N);
B(B_F,@AND-2,,17,2,22,6,N);
B(B_VARIN,,MXinclShutOffScr,9,5,11,7,);
B(B_VARIN,,SXMbuzzMainAckn,9,3,11,5,);
B(B_VAROUT,,MXextLmlSounder,22,3,24,5,);
L(11,5,11,6);
L(16,4,17,4);
L(11,6,16,6);
L(16,5,16,6);
L(16,5,17,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_FB,MsgRealReal,Message1,12,4,21,11,);
B(B_VARIN,,251,10,5,12,7,);
B(B_VARIN,,MSG_INFO,10,7,12,9,);
B(B_VARIN,,SXMbuzzMainAckn,10,6,12,8,);
B(B_COMMENT,,Meldung auf Hauptseite quittiert,1,1,27,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_F,sel,,11,1,16,6,);
B(B_VAROUT,,SXMbuzzMainAckn,16,2,18,4,);
B(B_VARIN,,SXMbuzzMainAckn,9,3,11,5,);
B(B_VARIN,,FALSE,9,4,11,6,);
B(B_VARIN,,SXMbuzzMainAckn,9,2,11,4,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_COMMENT,,Anbaugeräte,1,1,72,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 21 ;
        NETWORK_BODY
B(B_COMMENT,,Druckanzeigen,1,1,26,2,);
B(B_F,sel,,12,12,17,17,);
B(B_VARIN,,MDvibSysPress,10,14,12,16,);
B(B_VARIN,,MDhamSysPress,10,15,12,17,);
B(B_VARIN,,MXenablHamOperat,10,13,12,15,);
B(B_F,sel,,18,11,23,16,);
B(B_VARIN,,MXenablDrillOper,16,10,18,12,);
B(B_VARIN,,MDddSysPress,16,17,18,19,);
B(B_F,sel,,23,10,28,15,);
B(B_VAROUT,,SRequPressure1,28,11,30,13,);
B(B_VARIN,,MDgrabSysPress,21,18,23,20,);
B(B_VARIN,,MXenabHyGrabOper,16,4,18,6,);
B(B_VARIN,,MXadLEHydrGrab,16,5,18,7,);
B(B_VARIN,,MXadSBHydrGrab,16,6,18,8,);
B(B_VARIN,,MXadSMHydrGrab,16,7,18,9,);
B(B_VARIN,,MXenabKelGrabOpe,16,8,18,10,);
B(B_VARIN,,MXenabHyGrabHose,16,9,18,11,);
B(B_F,@OR-6,,18,3,23,11,);
L(18,11,18,13);
L(17,14,18,14);
L(18,15,18,18);
L(23,14,23,19);
L(23,5,23,12);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VAROUT,,SXequPress2Activ,12,1,14,3,);
B(B_VARIN,,MXenablVibOperat,10,1,12,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VAROUT,,SRequPressure2,12,1,14,3,);
B(B_VARIN,,MDvibClampPress,10,1,12,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 5 ;
        NETWORK_BODY
B(B_COMMENT,,leader~ Hängemäkler,1,1,26,2,);
B(B_VAROUT,,SRleadInclX,12,3,14,5,);
B(B_VARIN,,MDleadAngleX,10,3,12,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VAROUT,,SRleadInclY,12,1,14,3,);
B(B_VARIN,,MDleadAngleY,10,1,12,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_F,@MUL-2,,16,1,21,5,);
B(B_F,@MUL-2,,16,6,21,10,);
B(B_F,cos,,21,1,26,4,);
B(B_F,cos,,21,6,26,9,);
B(B_F,@MUL-2,,26,1,31,5,);
B(B_F,acos,,31,1,36,4,);
B(B_F,@DIV,,11,4,16,8,);
B(B_VARIN,,PI,9,5,11,7,);
B(B_VARIN,,180.0,9,6,11,8,);
B(B_VARIN,,MDleadAngleX,14,2,16,4,);
B(B_VARIN,,MDleadAngleY,14,8,16,10,);
B(B_F,@DIV,,31,4,36,8,);
B(B_F,@MUL-2,,36,1,41,5,);
B(B_VAROUT,,SRleadInclAbs,41,2,43,4,);
B(B_VARIN,,180.0,29,5,31,7,);
B(B_VARIN,,PI,29,6,31,8,);
B(B_COMMENT,,grd -> rad -> grd,26,9,34,10,);
L(26,4,26,8);
L(16,4,16,8);
L(36,4,36,6);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VAROUT,,LRdummy,12,1,14,3,);
B(B_VARIN,,SRMleadTargetX,10,1,12,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VAROUT,,LRdummy,12,1,14,3,);
B(B_VARIN,,SRMleadTargetY,10,1,12,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VAROUT,,LXdummy,12,1,14,3,);
B(B_VARIN,,SXMleadSetToZero,10,1,12,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VAROUT,,LXdummy,12,1,14,3,);
B(B_VARIN,,SXMleTaSetToZero,10,1,12,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_F,sel,,12,1,17,6,);
B(B_VARIN,,SXMleadSetToZero,10,2,12,4,);
B(B_VAROUT,,SXMleadSetToZero,17,2,19,4,);
B(B_VARIN,,SXMleadSetToZero,10,3,12,5,);
B(B_VARIN,,FALSE,10,4,12,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_F,sel,,12,1,17,6,);
B(B_VARIN,,SXMleTaSetToZero,10,2,12,4,);
B(B_VAROUT,,SXMleTaSetToZero,17,2,19,4,);
B(B_VARIN,,SXMleTaSetToZero,10,3,12,5,);
B(B_VARIN,,FALSE,10,4,12,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_F,@MUL-2,,16,1,21,5,);
B(B_F,@MUL-2,,16,6,21,10,);
B(B_F,cos,,21,1,26,4,);
B(B_F,cos,,21,6,26,9,);
B(B_F,@MUL-2,,26,1,31,5,);
B(B_F,acos,,31,1,36,4,);
B(B_F,@DIV,,11,4,16,8,);
B(B_VARIN,,PI,9,5,11,7,);
B(B_VARIN,,180.0,9,6,11,8,);
B(B_VARIN,,SRMleadTargetX,14,2,16,4,);
B(B_VARIN,,SRMleadTargetY,14,8,16,10,);
B(B_F,@DIV,,31,4,36,8,);
B(B_F,@MUL-2,,36,1,41,5,);
B(B_VAROUT,,SRleadTargetAbs,41,2,43,4,);
B(B_VARIN,,180.0,29,5,31,7,);
B(B_VARIN,,PI,29,6,31,8,);
B(B_COMMENT,,grd -> rad -> grd,26,9,34,10,);
L(26,4,26,8);
L(16,4,16,8);
L(36,4,36,6);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 5 ;
        NETWORK_BODY
B(B_COMMENT,,drilling drive,1,1,26,2,);
B(B_VAROUT,,SRddSpeed,12,3,14,5,);
B(B_VARIN,,MDddRpm,10,3,12,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VAROUT,,SXddFastSpeed,12,1,14,3,);
B(B_VARIN,,QXddGearBox,10,1,12,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 5 ;
        NETWORK_BODY
B(B_COMMENT,,vibrator~ hammer,1,1,26,2,);
B(B_VAROUT,,SXvibClampWarn,12,3,14,5,);
B(B_VARIN,,MXclampWorking,10,3,12,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_F,sel,,12,1,17,6,);
B(B_VARIN,,MXenablHamOperat,10,2,12,4,);
B(B_VAROUT,,SXvibHamMeasAct,17,2,19,4,);
B(B_VARIN,,CXadVibFreqMeas,10,3,12,5,);
B(B_VARIN,,TRUE,10,4,12,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_F,sel,,12,1,17,6,);
B(B_VARIN,,MXenablHamOperat,10,2,12,4,);
B(B_VAROUT,,SRvibHamFrequ,17,2,19,4,);
B(B_VARIN,,MDvibrFrequency,10,3,12,5,);
B(B_VARIN,,55.0,10,4,12,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_F,sel,,12,1,17,6,);
B(B_VARIN,,MXenablHamOperat,10,2,12,4,);
B(B_VAROUT,,SRvibAmpHamEner,17,2,19,4,);
B(B_VARIN,,MDvibrAmplitude,10,3,12,5,);
B(B_VARIN,,85.0,10,4,12,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 5 ;
        NETWORK_BODY
B(B_COMMENT,,cao casing oszillator Verrohrungsmaschine,1,1,26,2,);
B(B_VAROUT,,SXcaoActive,12,3,14,5,);
B(B_VARIN,,MXaddHydrActive,10,3,12,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VAROUT,,SRcaoPressure1,12,1,14,3,);
B(B_VARIN,,MDadHyLudv1Press,10,1,12,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VAROUT,,SRcaoPressure2,12,1,14,3,);
B(B_VARIN,,MDadHyLudv2Press,10,1,12,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_COMMENT,,grab,1,1,26,2,);
B(B_F,sel,,12,3,17,8,);
B(B_VARIN,,MXenabKelGrabOpe,10,4,12,6,);
B(B_VAROUT,,SRgrabType,17,4,19,6,);
B(B_VARIN,,1.0,10,5,12,7,);
B(B_VARIN,,5.0,10,6,12,8,);
B(B_COMMENT,,1 = Schlitzwandgreiferø^2 = Zweischalengreiferø^3 = Polypgreiferø^4 = Brunnengreiferø^5 = Kellygreiferø^ø^11 = Betonbeisser,30,1,42,8,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_FB,RS,RS3,12,2,17,6,);
B(B_VARIN,,MXgrabSigClose,10,4,12,6,);
B(B_VARIN,,MXgrabSigOpen,10,3,12,5,);
B(B_F,sel,,21,2,26,7,);
B(B_VARIN,,100.0,19,5,21,7,);
B(B_VARIN,,0.0,19,4,21,6,);
B(B_FB,Integrator,Integrator1,31,1,40,7,);
B(B_VAROUT,,SRgrabOpen,40,2,42,4,);
B(B_VARIN,,50.0,29,5,31,7,);
B(B_VARIN,,50.0,29,4,31,6,);
B(B_VARIN,,TRUE,29,2,31,4,);
L(17,4,21,4);
L(26,4,31,4);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VARIN,,MDgrabInclinatiX,10,1,12,3,);
B(B_VAROUT,,SRgrabInclX,12,1,14,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VARIN,,MDgrabInclinatiY,10,1,12,3,);
B(B_VAROUT,,SRgrabInclY,12,1,14,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_F,@MUL-2,,16,1,21,5,);
B(B_F,@MUL-2,,16,6,21,10,);
B(B_F,cos,,21,1,26,4,);
B(B_F,cos,,21,6,26,9,);
B(B_F,@MUL-2,,26,1,31,5,);
B(B_F,acos,,31,1,36,4,);
B(B_F,@DIV,,11,4,16,8,);
B(B_VARIN,,PI,9,5,11,7,);
B(B_VARIN,,180.0,9,6,11,8,);
B(B_VARIN,,MDgrabInclinatiX,14,2,16,4,);
B(B_VARIN,,MDgrabInclinatiY,14,8,16,10,);
B(B_F,@DIV,,31,4,36,8,);
B(B_F,@MUL-2,,36,1,41,5,);
B(B_VAROUT,,SRgrabInclAbs,41,2,43,4,);
B(B_VARIN,,180.0,29,5,31,7,);
B(B_VARIN,,PI,29,6,31,8,);
B(B_COMMENT,,grd -> rad -> grd,26,9,34,10,);
L(26,4,26,8);
L(16,4,16,8);
L(36,4,36,6);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VARIN,,MDx23Poti1Moorin,10,1,12,3,);
B(B_VAROUT,,SRgrabMooring,12,1,14,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VARIN,,MXenabHyGrabHose,10,1,12,3,);
B(B_VAROUT,,SXgrabHoseActive,12,1,14,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_COMMENT,,dgc Rammsteuerung,1,1,26,2,);
B(B_VARIN,,MXdgcActiveHg2,10,5,12,7,);
B(B_VARIN,,MXdgcActiveHg1,10,4,12,6,);
B(B_F,@OR-2,,12,3,17,7,);
B(B_VAROUT,,SXdgcAutomActive,17,4,19,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_F,@AND-2,,12,1,17,5,N);
B(B_VARIN,,MXdgcActiveHg1,10,2,12,4,);
B(B_VARIN,,MXdgcActiveHg2,10,3,12,5,);
B(B_F,sel,,17,3,22,8,);
B(B_VAROUT,,SRdgcLiftHight,22,4,24,6,);
B(B_VARIN,,MDdgcRopeLenHG1,15,5,17,7,);
B(B_VARIN,,MDdgcRopeLenHG2,15,6,17,8,);
L(17,3,17,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VARIN,,MDdgcBeats,7,1,9,3,);
B(B_VAROUT,,SRdgcBeats,9,1,11,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VARIN,,MDdgcCompaction,7,1,9,3,);
B(B_VAROUT,,SRdgcCompaction,9,1,11,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VARIN,,SRMdgcLiftHight,7,1,9,3,);
B(B_VAROUT,,MDdgcGivenHight,9,1,11,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VARIN,,SRMdgcBeats,7,1,9,3,);
B(B_VAROUT,,MDdgcGivenBeats,9,1,11,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VARIN,,SRMdgcCompaction,7,1,9,3,);
B(B_VAROUT,,MDdgcGivenCompac,9,1,11,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VARIN,,SRMdgcSlowDoHigh,7,1,9,3,);
B(B_VAROUT,,MDdgcGivSlowDown,9,1,11,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 5 ;
        NETWORK_BODY
B(B_COMMENT,,LMB-Seite Menüzeile,1,1,62,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,TRUE,7,1,9,3,);
B(B_VAROUT,,SXlmlPage,9,1,11,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 5 ;
        NETWORK_BODY
B(B_COMMENT,,Statuszeile,1,1,62,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VARIN,,MXhgSpecialLift,9,1,11,3,);
B(B_VAROUT,,SXspecHoistFunc,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 22 ;
        NETWORK_BODY
B(B_VAROUT,,SXhg1ClutchOpen,25,1,27,3,);
B(B_VARIN,,QXhg1Clutch,23,1,25,3,);
B(B_F,@AND-2,,25,3,30,7,N);
B(B_VAROUT,,SXhg1FastSpeed,30,4,32,6,);
B(B_F,@OR-2,,20,4,25,8,);
B(B_VARIN,,MXhg1FaSpe2ndPum,18,5,20,7,);
B(B_F,@AND-2,,15,6,20,10,);
B(B_VARIN,,MXhg1LedFastSpe,11,7,13,9,);
B(B_VARIN,,MXhg1EnabFastSpe,11,8,13,10,);
B(B_FB,RS,RS4,21,10,26,14,);
B(B_F,@OR-2,,15,15,20,19,N);
B(B_F,@AND-2,,27,10,32,14,0N);
B(B_VAROUT,,SXhg1LockFastSpe,32,11,34,13,);
B(B_F,@AND-3,,15,10,20,15,0N);
B(B_VARIN,,QXhg1BrakeNormal,10,19,12,21,);
L(25,2,25,5);
L(20,7,20,8);
L(13,8,15,8);
L(13,9,15,9);
L(13,13,15,13);
L(13,9,13,18);
L(13,18,15,18);
L(14,8,14,17);
L(14,17,15,17);
L(21,13,21,17);
L(20,17,21,17);
L(27,13,27,20);
L(26,12,27,12);
L(14,12,15,12);
L(20,12,21,12);
L(12,14,12,20);
L(12,14,15,14);
L(12,20,27,20);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,MXhg1MooringLift,9,1,11,3,);
B(B_VAROUT,,SXhg1MoorActiv,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 22 ;
        NETWORK_BODY
B(B_VAROUT,,SXhg2ClutchOpen,24,1,26,3,);
B(B_VARIN,,QXhg2Clutch,22,1,24,3,);
B(B_F,@AND-2,,24,3,29,7,N);
B(B_VAROUT,,SXhg2FastSpeed,29,4,31,6,);
B(B_F,@OR-2,,19,4,24,8,);
B(B_VARIN,,MXhg2FaSpe2ndPum,17,5,19,7,);
B(B_F,@AND-2,,14,6,19,10,);
B(B_VARIN,,MXhg2LedFastSpe,10,7,12,9,);
B(B_VARIN,,MXhg2EnabFastSpe,10,8,12,10,);
B(B_FB,RS,RS5,20,10,25,14,);
B(B_F,@OR-2,,14,15,19,19,N);
B(B_F,@AND-2,,26,10,31,14,0N);
B(B_F,@AND-3,,14,10,19,15,0N);
B(B_VARIN,,QXhg2BrakeNormal,9,19,11,21,);
B(B_VAROUT,,SXhg2LockFastSpe,31,11,33,13,);
L(24,2,24,5);
L(19,7,19,8);
L(12,8,14,8);
L(12,9,14,9);
L(12,13,14,13);
L(12,18,14,18);
L(13,17,14,17);
L(20,13,20,17);
L(19,17,20,17);
L(26,13,26,20);
L(25,12,26,12);
L(13,12,14,12);
L(19,12,20,12);
L(11,14,11,20);
L(11,14,14,14);
L(11,20,26,20);
L(13,8,13,17);
L(12,9,12,18);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,MXhg2MooringLift,9,1,11,3,);
B(B_VAROUT,,SXhg2MoorActiv,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_F,@AND-2,,11,1,16,5,0N);
B(B_VARIN,,MXfloaCouWeigAct,9,2,11,4,);
B(B_VARIN,,MX2TJoystick,9,3,11,5,);
B(B_VAROUT,,SXflCouWeiCylAct,16,2,18,4,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VAROUT,,SXhgFreefPresel,11,1,13,3,);
B(B_VARIN,,IXhgRelFreefall,9,1,11,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VAROUT,,SXhgFreefUnsec,11,1,13,3,);
B(B_VARIN,,IXunsecuredFreef,9,1,11,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_VARIN,,IXhgRelFreefall,9,2,11,4,);
B(B_VARIN,,MXhg1pselFreefal,9,3,11,5,);
B(B_VARIN,,MXhg2pselFreefal,9,4,11,6,);
B(B_F,@AND-3,,11,1,16,6,0NN);
B(B_VAROUT,,SXhgFreeFallWarn,16,2,18,4,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_VARIN,,MXremContPresel,9,1,11,3,);
B(B_VAROUT,,SXrcActive,11,1,13,3,);
B(B_F,@AND-2,,11,3,16,7,0N);
B(B_VARIN,,MXremContActive,9,5,11,7,);
B(B_VAROUT,,SXrcContChanged,16,4,18,6,);
L(11,2,11,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VARIN,,MXrcChangeContro,9,1,11,3,);
B(B_VAROUT,,SXrcChangeContro,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VAROUT,,SXrcRadioOk,11,1,13,3,);
B(B_VARIN,,MXremContRadioOk,9,1,11,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VARIN,,MXemergOperat,9,1,11,3,);
B(B_VAROUT,,SXemergOperat,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VARIN,,MXassemblyOperat,9,1,11,3,);
B(B_VAROUT,,SXassemblyOperat,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VARIN,,MXlmlStopScreen,9,1,11,3,);
B(B_VAROUT,,SXlmlStopSym,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_F,@OR-2,,11,1,16,5,);
B(B_VARIN,,MXleaderStopBack,9,3,11,5,);
B(B_VAROUT,,SXlmlCantBack,16,2,18,4,);
B(B_VARIN,,MXlmlStopScrBack,9,2,11,4,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VARIN,,MXlmlWarning,9,1,11,3,);
B(B_VAROUT,,SXlmlWarnSym,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 23 ;
        NETWORK_BODY
B(B_FB,R_TRIG,R_TRIG7,14,7,21,10,);
B(B_FB,TOF,TOF1,21,7,26,11,);
B(B_FB,RS,RS6,14,2,19,6,0N);
B(B_F,@AND-2,,26,2,31,6,N);
B(B_F,@AND-2,,26,6,31,10,);
B(B_VARIN,,T#5.0s,19,10,21,12,);
B(B_FB,TOF,TOF2,21,17,26,21,);
B(B_F,@AND-2,,26,12,31,16,N);
B(B_F,@AND-2,,26,16,31,20,);
B(B_VARIN,,T#5.0s,19,20,21,22,);
B(B_FB,R_TRIG,R_TRIG8,14,17,21,20,);
B(B_FB,RS,RS7,14,12,19,16,0N);
B(B_VARIN,,MXlmlStopScreen,9,15,11,17,);
B(B_VARIN,,MXlmlWarning,10,5,12,7,);
B(B_VARIN,,SXMbuzzStatAckn,11,3,13,5,);
B(B_F,@OR-2,,31,2,36,6,);
B(B_F,@OR-2,,31,12,36,16,);
B(B_VAROUT,,SXlmlStopBuzz,36,13,38,15,);
B(B_VAROUT,,MXlmlSounder,36,14,38,16,);
B(B_VAROUT,,SXlmlWarnBuzz,36,3,38,5,);
L(19,4,26,4);
L(26,5,26,8);
L(21,10,21,11);
L(14,6,26,6);
L(13,4,14,4);
L(19,14,26,14);
L(26,15,26,18);
L(21,20,21,21);
L(13,14,14,14);
L(14,16,26,16);
L(14,5,14,9);
L(14,15,14,19);
L(11,16,14,16);
L(12,6,14,6);
L(13,4,13,14);
L(31,5,31,8);
L(31,15,31,18);
L(36,14,36,15);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_VARIN,,MXlmlBridged,9,2,11,4,);
B(B_VARIN,,MXlmlDeactive,9,3,11,5,);
B(B_F,@OR-2,,11,1,16,5,);
B(B_VAROUT,,SXlmlBridged,16,2,18,4,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_VARIN,,MRleJoyXSymNr,9,3,11,5,);
B(B_VAROUT,,SRsymNrJoyLeX,11,3,13,5,);
B(B_COMMENT,,display joystick symbols ,1,1,27,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,MRleJoyYSymNr,9,1,11,3,);
B(B_VAROUT,,SRsymNrJoyLeY,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VAROUT,,SRsymNrJoyRiX,11,1,13,3,);
B(B_VARIN,,MRriJoyXSymNr,9,1,11,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VAROUT,,SRsymNrJoyRiY,11,1,13,3,);
B(B_VARIN,,MRriJoyYSymNr,9,1,11,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VAROUT,,SX2TjoystAct,11,1,13,3,);
B(B_VARIN,,MX2TJoystick,9,1,11,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,MXexDrPreJoy,9,1,11,3,);
B(B_VAROUT,,SXexDrPreJoy,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_VARIN,,MXsgSpeed2,9,4,11,6,);
B(B_F,sel,,11,3,16,8,);
B(B_VARIN,,1.0,9,5,11,7,);
B(B_VARIN,,2.0,9,6,11,8,);
B(B_F,sel,,16,2,21,7,);
B(B_VARIN,,3.0,14,8,16,10,);
B(B_VAROUT,,SRsgSpeed,21,3,23,5,);
B(B_VARIN,,MXsgSpeed3,14,1,16,3,);
L(16,6,16,9);
L(16,2,16,4);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VARIN,,MXsafetyProgPRA,9,1,11,3,);
B(B_VAROUT,,SXelectricWarnin,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VARIN,,MXstopModulError,9,1,11,3,);
B(B_VAROUT,,SXelectricError,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VARIN,,MXengRequireRep,9,1,11,3,);
B(B_VAROUT,,SXengReqRep,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VARIN,,MXengRequireStop,9,1,11,3,);
B(B_VAROUT,,SXengReqStop,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VARIN,,MXwarnSuppCrane,9,1,11,3,);
B(B_VAROUT,,SXneedSuppCrane,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VARIN,,MXbbActiveSymbol,9,1,11,3,);
B(B_VAROUT,,SXblackboxActive,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VARIN,,MXbbInitSymbol,9,1,11,3,);
B(B_VAROUT,,SXblackboxInit,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VARIN,,MXbbErrorSymbol,9,1,11,3,);
B(B_VAROUT,,SXblackboxError,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_VAROUT,,LRsymNumbLimitSw,11,3,13,5,);
B(B_VARIN,,0.0,9,3,11,5,);
B(B_COMMENT,,limit switches,1,1,27,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 26 ;
        NETWORK_BODY
B(B_COMMENT,,upper limit switch hg 1,1,1,27,2,);
B(B_F,@AND-3,,26,6,31,11,N);
B(B_VARIN,,MXlgAnalSigNeg,16,11,18,13,);
B(B_VARIN,,MXhg1AnalSigPos,16,10,18,12,);
B(B_VARIN,,MXhg1Preselect,22,4,24,6,);
B(B_VARIN,,IXhg1UpperLimOk,23,3,25,5,);
B(B_VARIN,,MXz4InPresel,16,12,18,14,);
B(B_VARIN,,MXz2OutPresel,16,13,18,15,);
B(B_VARIN,,MXz17OutPresel,16,14,18,16,);
B(B_F,@OR-8,,18,8,23,18,);
B(B_VARIN,,MXmoorAnaSigNeg,16,15,18,17,);
B(B_VARIN,,MXaxwAnalSigPos,9,18,11,20,);
B(B_F,sel,,41,6,46,11,);
B(B_VAROUT,,LRsymNumbLimitSw,46,7,48,9,);
B(B_VAROUT,,LXlimitSw2,39,4,41,6,);
B(B_F,@OR-2,,33,6,38,10,);
B(B_VARIN,,MXecHG1StopUp,25,19,27,21,);
B(B_F,@AND-2,,27,18,32,22,);
B(B_VARIN,,MXhg1AnalSigPos,25,20,27,22,);
B(B_VAROUT,,LXeclimitSw1,32,19,34,21,);
B(B_VARIN,,2.0,38,23,40,25,);
B(B_VARIN,,LRsymNumbLimitSw,37,22,39,24,);
B(B_VARIN,,MXenabHangLeader,9,19,11,21,);
B(B_F,@AND-2,,11,17,16,21,);
B(B_VARIN,,MXlg2AnalSigNeg,16,9,18,11,);
L(25,8,26,8);
L(24,9,26,9);
L(25,4,25,8);
L(24,5,24,9);
L(23,10,26,10);
L(17,17,18,17);
L(17,17,17,19);
L(39,9,41,9);
L(40,10,41,10);
L(39,5,39,8);
L(38,8,41,8);
L(31,8,33,8);
L(32,9,32,20);
L(32,9,33,9);
L(39,9,39,23);
L(40,10,40,24);
L(16,19,17,19);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 19 ;
        NETWORK_BODY
B(B_COMMENT,,lower limit switch hg 1,1,1,27,2,);
B(B_F,@AND-2,,18,5,23,9,N);
B(B_VARIN,,MXadHg1LoweLimit,16,6,18,8,);
B(B_F,@OR-2,,11,8,16,12,);
B(B_VARIN,,MXhg1AnalSigNeg,9,9,11,11,);
B(B_VARIN,,MXmoorAnaSigPos,9,10,11,12,);
B(B_F,sel,,32,5,37,10,);
B(B_VAROUT,,LRsymNumbLimitSw,37,6,39,8,);
B(B_VAROUT,,LXlimitSw3,30,3,32,5,);
B(B_VARIN,,LRsymNumbLimitSw,28,15,30,17,);
B(B_VARIN,,3.0,29,16,31,18,);
B(B_F,@AND-2,,18,11,23,15,);
B(B_F,@OR-2,,24,5,29,9,);
B(B_VARIN,,MXecHG1StopDn,16,12,18,14,);
B(B_VARIN,,MXhg1AnalSigNeg,16,13,18,15,);
B(B_VAROUT,,LXeclimitSw2,23,12,25,14,);
L(16,10,17,10);
L(17,8,17,10);
L(17,8,18,8);
L(30,8,32,8);
L(31,9,32,9);
L(30,4,30,7);
L(29,7,32,7);
L(30,8,30,16);
L(31,9,31,17);
L(23,8,23,13);
L(23,8,24,8);
L(23,7,24,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 29 ;
        NETWORK_BODY
B(B_COMMENT,,upper limit switch hg 2,1,1,27,2,);
B(B_F,@AND-3,,27,6,32,11,N);
B(B_VARIN,,MXlgAnalSigNeg,17,11,19,13,);
B(B_VARIN,,IXhg2UpperLimOk,24,3,26,5,);
B(B_VARIN,,MXhg2Preselect,23,4,25,6,);
B(B_VARIN,,MXz4InPresel,17,12,19,14,);
B(B_VARIN,,MXz2OutPresel,17,13,19,15,);
B(B_VARIN,,MXz17OutPresel,17,14,19,16,);
B(B_VARIN,,MXaxwAnalSigPos,10,18,12,20,);
B(B_F,@OR-8,,19,8,24,18,);
B(B_VARIN,,MXmoorAnaSigPos,17,15,19,17,);
B(B_F,@OR-2,,33,6,38,10,);
B(B_VARIN,,MXecHG2StopUp,25,22,27,24,);
B(B_F,@AND-2,,27,21,32,25,);
B(B_VARIN,,MXhg2AnalSigPos,25,23,27,25,);
B(B_VAROUT,,LXeclimitSw3,32,22,34,24,);
B(B_F,sel,,41,6,46,11,);
B(B_VAROUT,,LRsymNumbLimitSw,46,7,48,9,);
B(B_VAROUT,,LXlimitSw4,39,5,41,7,);
B(B_VARIN,,4.0,38,26,40,28,);
B(B_VARIN,,LRsymNumbLimitSw,37,25,39,27,);
B(B_VARIN,,MXhg2AnalSigPos,17,10,19,12,);
B(B_VARIN,,MXenabHangLeader,10,19,12,21,);
B(B_F,@AND-2,,12,17,17,21,);
B(B_VARIN,,MXlg2AnalSigNeg,17,9,19,11,);
L(26,8,27,8);
L(25,9,27,9);
L(26,4,26,8);
L(25,5,25,9);
L(18,17,18,19);
L(18,17,19,17);
L(24,10,27,10);
L(32,9,32,23);
L(32,9,33,9);
L(32,8,33,8);
L(38,8,41,8);
L(39,9,41,9);
L(39,9,39,26);
L(40,10,41,10);
L(40,10,40,27);
L(39,6,39,8);
L(17,19,18,19);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 18 ;
        NETWORK_BODY
B(B_F,@AND-2,,18,10,23,14,);
B(B_VARIN,,MXecHG2StopDn,16,11,18,13,);
B(B_VARIN,,MXhg2AnalSigNeg,16,12,18,14,);
B(B_VAROUT,,LXeclimitSw4,23,11,25,13,);
B(B_F,@OR-2,,24,4,29,8,);
B(B_VARIN,,MXadHg2LoweLimit,16,5,18,7,);
B(B_VAROUT,,LXlimitSw5,30,3,32,5,);
B(B_COMMENT,,lower limit switch hg 2,1,1,27,2,);
B(B_VARIN,,5.0,29,15,31,17,);
B(B_VARIN,,LRsymNumbLimitSw,28,14,30,16,);
B(B_F,sel,,32,4,37,9,);
B(B_VAROUT,,LRsymNumbLimitSw,37,5,39,7,);
B(B_F,@AND-2,,18,4,23,8,N);
B(B_F,@OR-2,,11,7,16,11,);
B(B_VARIN,,MXhg2AnalSigNeg,9,8,11,10,);
B(B_VARIN,,MXmoorAnaSigNeg,9,9,11,11,);
L(23,7,23,12);
L(17,7,17,9);
L(29,6,30,6);
L(30,4,30,6);
L(30,7,30,15);
L(31,8,31,16);
L(30,6,32,6);
L(30,7,32,7);
L(31,8,32,8);
L(23,6,24,6);
L(17,7,18,7);
L(23,7,24,7);
L(16,9,17,9);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 19 ;
        NETWORK_BODY
B(B_F,sel,,25,5,30,10,);
B(B_VAROUT,,LRsymNumbLimitSw,30,6,32,8,);
B(B_VAROUT,,LXlimitSw6,23,3,25,5,);
B(B_F,@OR-2,,17,5,22,9,);
B(B_VAROUT,,LXeclimitSw5,16,11,18,13,);
B(B_VARIN,,6.0,22,16,24,18,);
B(B_VARIN,,LRsymNumbLimitSw,21,15,23,17,);
B(B_COMMENT,,upper limit switch lg,1,1,27,2,);
B(B_VARIN,,IXlgUpperLimOk,9,6,11,8,);
B(B_VARIN,,MXlgAnalSigPos,9,7,11,9,);
B(B_F,@AND-2,,11,5,16,9,N);
B(B_VARIN,,MXlgAnalSigPos,9,12,11,14,);
B(B_VARIN,,MXecLGStopUp,9,11,11,13,);
B(B_F,@AND-2,,11,10,16,14,);
L(23,8,25,8);
L(24,9,25,9);
L(23,4,23,7);
L(22,7,25,7);
L(16,8,16,12);
L(24,9,24,17);
L(23,8,23,16);
L(16,7,17,7);
L(16,8,17,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 24 ;
        NETWORK_BODY
B(B_COMMENT,,lower limit switch lg,1,1,27,2,);
B(B_F,sel,,27,9,32,14,);
B(B_VAROUT,,LRsymNumbLimitSw,32,10,34,12,);
B(B_VAROUT,,LXlimitSw7,25,7,27,9,);
B(B_F,@AND-5,,12,3,17,10,00N0N);
B(B_VARIN,,MXderrickActive,10,4,12,6,);
B(B_VARIN,,MXassemblyOperat,10,5,12,7,);
B(B_VARIN,,MXlg2Active,10,6,12,8,);
B(B_VARIN,,MXderrAnaSigNeg,10,7,12,9,);
B(B_VARIN,,MXlgAnalSigNeg,10,12,12,14,);
B(B_VARIN,,MXlgAFraLowLimOk,9,11,11,13,);
B(B_VARIN,,LRsymNumbLimitSw,23,20,25,22,);
B(B_VARIN,,7.0,24,21,26,23,);
B(B_F,@OR-3,,19,9,24,14,);
B(B_VAROUT,,LXeclimitSw6,18,16,20,18,);
B(B_F,@AND-2,,12,10,17,14,N);
B(B_VARIN,,MXlgAnalSigNeg,10,16,12,18,);
B(B_VARIN,,MXecLGStopDn,10,17,12,19,);
B(B_F,@AND-2,,12,15,17,19,);
L(25,12,27,12);
L(26,13,27,13);
L(18,5,18,11);
L(25,8,25,11);
L(17,5,18,5);
L(11,9,12,9);
L(11,9,11,12);
L(25,12,25,21);
L(26,13,26,22);
L(18,11,19,11);
L(24,11,27,11);
L(18,13,18,17);
L(18,13,19,13);
L(11,12,12,12);
L(17,12,19,12);
L(17,17,18,17);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 14 ;
        NETWORK_BODY
B(B_COMMENT,,upper limit switch lg by boom angle,1,1,27,2,);
B(B_VARIN,,MXlgAnalSigPos,10,5,12,7,);
B(B_VARIN,,MXlgUpAngleStop,10,6,12,8,);
B(B_VARIN,,LRsymNumbLimitSw,16,10,18,12,);
B(B_VARIN,,8.0,17,11,19,13,);
B(B_F,sel,,20,4,25,9,);
B(B_VAROUT,,LRsymNumbLimitSw,25,5,27,7,);
B(B_VAROUT,,LXlimitSw8,18,2,20,4,);
B(B_F,@AND-2,,12,4,17,8,);
L(18,7,20,7);
L(19,8,20,8);
L(18,3,18,6);
L(18,7,18,11);
L(19,8,19,12);
L(17,6,20,6);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 14 ;
        NETWORK_BODY
B(B_F,sel,,20,4,25,9,);
B(B_VAROUT,,LRsymNumbLimitSw,25,5,27,7,);
B(B_VAROUT,,LXlimitSw9,18,2,20,4,);
B(B_VARIN,,MXlgAnalSigNeg,10,5,12,7,);
B(B_VARIN,,MXlgDnAngleStop,10,6,12,8,);
B(B_VARIN,,LRsymNumbLimitSw,16,10,18,12,);
B(B_VARIN,,9.0,17,11,19,13,);
B(B_COMMENT,,lower limit switch lg by boom angle,1,1,27,2,);
B(B_F,@AND-2,,12,4,17,8,);
L(18,7,20,7);
L(19,8,20,8);
L(18,3,18,6);
L(19,8,19,12);
L(18,7,18,11);
L(17,6,20,6);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 20 ;
        NETWORK_BODY
B(B_F,sel,,26,5,31,10,);
B(B_VAROUT,,LRsymNumbLimitSw,31,6,33,8,);
B(B_VAROUT,,LXlimitSw10,24,3,26,5,);
B(B_VARIN,,IXlg2UpperLimOk,9,6,11,8,);
B(B_VARIN,,MXlg2AnalSigPos,9,7,11,9,);
B(B_VARIN,,10.0,23,17,25,19,);
B(B_COMMENT,,upper limit switch lg 2,1,1,27,2,);
B(B_F,@OR-2,,18,5,23,9,);
B(B_VARIN,,LRsymNumbLimitSw,22,16,24,18,);
B(B_F,@AND-2,,11,5,16,9,N);
B(B_VARIN,,IXlg2UpperLimOk,9,10,11,12,);
B(B_VARIN,,MXlgAnalSigNeg,9,11,11,13,);
B(B_F,@AND-4,,11,9,16,15,N);
B(B_VARIN,,MXlmlLuffJibEnab,9,12,11,14,);
B(B_VARIN,,MXassemblyOperat,9,13,11,15,);
L(24,8,26,8);
L(25,9,26,9);
L(24,4,24,7);
L(17,8,17,11);
L(25,9,25,18);
L(17,8,18,8);
L(23,7,26,7);
L(24,8,24,17);
L(16,7,18,7);
L(16,11,17,11);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 18 ;
        NETWORK_BODY
B(B_F,sel,,26,4,31,9,);
B(B_VAROUT,,LRsymNumbLimitSw,31,5,33,7,);
B(B_VAROUT,,LXlimitSw11,24,2,26,4,);
B(B_VARIN,,IXlg2LowerLimOk,9,5,11,7,);
B(B_VARIN,,MXlg2AnalSigNeg,9,6,11,8,);
B(B_VARIN,,IXlg2LowerLimOk,9,10,11,12,);
B(B_VARIN,,MXlgAnalSigPos,9,11,11,13,);
B(B_VARIN,,11.0,23,15,25,17,);
B(B_COMMENT,,lower limit switch lg 2,1,1,27,2,);
B(B_F,@OR-2,,18,4,23,8,);
B(B_VARIN,,LRsymNumbLimitSw,22,14,24,16,);
B(B_VARIN,,MXlmlLuffJibEnab,9,12,11,14,);
B(B_F,@AND-3,,11,9,16,14,N);
B(B_F,@AND-2,,11,4,16,8,N);
L(24,7,26,7);
L(25,8,26,8);
L(24,3,24,6);
L(17,7,17,11);
L(25,8,25,16);
L(17,7,18,7);
L(23,6,26,6);
L(24,7,24,15);
L(16,11,17,11);
L(16,6,18,6);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 20 ;
        NETWORK_BODY
B(B_COMMENT,,upper limit switch lg 2 by luffing jib angle,1,1,27,2,);
B(B_F,sel,,35,10,40,15,);
B(B_VAROUT,,LRsymNumbLimitSw,40,11,42,13,);
B(B_VAROUT,,LXlimitSw12,33,8,35,10,);
B(B_VARIN,,12.0,32,17,34,19,);
B(B_VARIN,,LRsymNumbLimitSw,31,16,33,18,);
B(B_F,@OR-2,,19,6,24,10,);
B(B_F,@AND-2,,12,7,17,11,);
B(B_VARIN,,MXlgStopUpByFlap,9,5,11,7,);
B(B_VARIN,,MXlgAnalSigPos,10,9,12,11,);
B(B_F,@OR-2,,26,10,31,14,);
B(B_VARIN,,MXlg2AnalSigPos,10,4,12,6,);
B(B_F,@AND-2,,12,3,17,7,);
B(B_VARIN,,MXlg2AnalSigPos,17,12,19,14,);
B(B_VARIN,,MXlg2UpAngleStop,17,13,19,15,);
B(B_F,@AND-2,,19,11,24,15,);
L(33,13,35,13);
L(34,14,35,14);
L(33,9,33,12);
L(25,8,25,12);
L(34,14,34,18);
L(33,13,33,17);
L(17,9,19,9);
L(18,8,19,8);
L(18,5,18,8);
L(24,8,25,8);
L(11,6,12,6);
L(11,6,11,9);
L(11,9,12,9);
L(25,12,26,12);
L(31,12,35,12);
L(17,5,18,5);
L(24,13,26,13);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 14 ;
        NETWORK_BODY
B(B_COMMENT,,lower limit switch lg 2 by luffing jib angle,1,1,27,2,);
B(B_F,sel,,18,5,23,10,);
B(B_VAROUT,,LRsymNumbLimitSw,23,6,25,8,);
B(B_VARIN,,13.0,15,11,17,13,);
B(B_VARIN,,LRsymNumbLimitSw,14,10,16,12,);
B(B_VAROUT,,LXlimitSw13,16,3,18,5,);
B(B_VARIN,,MXlg2AnalSigNeg,9,6,11,8,);
B(B_VARIN,,MXlg2DnAngleStop,9,7,11,9,);
B(B_F,@AND-2,,11,5,16,9,);
L(16,8,18,8);
L(17,9,18,9);
L(16,4,16,7);
L(16,8,16,11);
L(17,9,17,12);
L(16,7,18,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 24 ;
        NETWORK_BODY
B(B_F,sel,,26,4,31,9,);
B(B_VAROUT,,LRsymNumbLimitSw,31,5,33,7,);
B(B_VARIN,,14.0,23,20,25,22,);
B(B_VARIN,,LRsymNumbLimitSw,22,19,24,21,);
B(B_VAROUT,,LXlimitSw14,24,2,26,4,);
B(B_VARIN,,IXlg2UpperLimOk,9,6,11,8,);
B(B_VARIN,,MXaxwAnalSigPos,9,5,11,7,);
B(B_COMMENT,,upper limit switch aux  2,1,1,27,2,);
B(B_F,@OR-3,,18,4,23,9,);
B(B_VAROUT,,LXeclimitSw13,17,15,19,17,);
B(B_F,@AND-2,,11,4,16,8,0N);
B(B_VARIN,,MXecAuxWinStopUp,9,15,11,17,);
B(B_VARIN,,MXaxwAnalSigPos,9,16,11,18,);
B(B_F,@AND-2,,11,14,16,18,);
B(B_VARIN,,MXlgAnalSigNeg,9,10,11,12,);
B(B_VARIN,,IXlg2UpperLimOk,9,11,11,13,);
B(B_VARIN,,CXauxWinch,9,12,11,14,);
B(B_F,@AND-3,,11,9,16,14,0N);
L(24,7,26,7);
L(25,8,26,8);
L(24,3,24,6);
L(25,8,25,21);
L(24,7,24,20);
L(23,6,26,6);
L(16,7,16,11);
L(17,8,17,16);
L(17,8,18,8);
L(16,6,18,6);
L(16,7,18,7);
L(16,16,17,16);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 17 ;
        NETWORK_BODY
B(B_COMMENT,,lower limit switch aux 2,1,1,27,2,);
B(B_F,sel,,25,5,30,10,);
B(B_VAROUT,,LRsymNumbLimitSw,30,6,32,8,);
B(B_VAROUT,,LXlimitSw15,23,3,25,5,);
B(B_VARIN,,IXlg2LowerLimOk,9,6,11,8,);
B(B_VARIN,,MXaxwAnalSigNeg,9,7,11,9,);
B(B_VARIN,,LRsymNumbLimitSw,21,13,23,15,);
B(B_VARIN,,15.0,22,14,24,16,);
B(B_VAROUT,,LXeclimitSw14,16,10,18,12,);
B(B_F,@OR-2,,17,5,22,9,);
B(B_F,@AND-2,,11,9,16,13,);
B(B_F,@AND-2,,11,5,16,9,N);
B(B_VARIN,,MXecAuxWinStopDn,9,11,11,13,);
L(23,8,25,8);
L(24,9,25,9);
L(23,4,23,7);
L(23,8,23,14);
L(22,7,25,7);
L(16,8,16,11);
L(16,7,17,7);
L(16,8,17,8);
L(11,8,11,11);
L(24,9,24,15);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 19 ;
        NETWORK_BODY
B(B_COMMENT,,boom stabilisation not active error by lml,1,1,27,2,);
B(B_F,sel,,30,5,35,10,);
B(B_VAROUT,,LRsymNumbLimitSw,35,6,37,8,);
B(B_VAROUT,,LXlimitSw16,28,3,30,5,);
B(B_F,@OR-2,,22,5,27,9,);
B(B_VARIN,,16.0,27,15,29,17,);
B(B_VARIN,,LRsymNumbLimitSw,26,14,28,16,);
B(B_F,@AND-3,,17,10,22,15,);
B(B_VARIN,,MXlgUpStopFaBaSu,15,11,17,13,);
B(B_VARIN,,MXlgUpStopFaBaSu,15,7,17,9,);
B(B_F,@OR-2,,12,3,17,7,);
B(B_VARIN,,MXlgAnalSigPos,10,4,12,6,);
B(B_VARIN,,MXlgAnalSigNeg,10,5,12,7,);
B(B_VARIN,,MXderrickActive,15,12,17,14,);
B(B_F,@OR-2,,12,14,17,18,);
B(B_VARIN,,MXderrAnaSigPos,10,15,12,17,);
B(B_VARIN,,MXderrAnaSigNeg,10,16,12,18,);
B(B_F,@AND-2,,17,5,22,9,);
L(28,4,28,7);
L(27,7,30,7);
L(22,8,22,12);
L(28,8,28,15);
L(29,9,29,16);
L(28,8,30,8);
L(29,9,30,9);
L(17,5,17,7);
L(17,14,17,16);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 14 ;
        NETWORK_BODY
B(B_COMMENT,,stop lg if flap is not working  (at fixed jib operation),1,1,27,2,);
B(B_VARIN,,MXlgStopUpByFlap,9,4,11,6,);
B(B_VARIN,,MXlgAnalSigPos,9,5,11,7,);
B(B_VARIN,,MXlmlFixedJibEna,9,6,11,8,);
B(B_F,@AND-3,,11,3,16,8,);
B(B_VARIN,,MXlgAnalSigNeg,9,11,11,13,);
B(B_VARIN,,MXlgStopDnByFlap,9,10,11,12,);
B(B_F,@AND-3,,11,8,16,13,);
B(B_F,@OR-2,,18,7,23,11,);
B(B_F,sel,,28,7,33,12,);
B(B_VAROUT,,LRsymNumbLimitSw,33,8,35,10,);
B(B_VARIN,,17.0,25,12,27,14,);
B(B_VARIN,,LRsymNumbLimitSw,24,11,26,13,);
B(B_VAROUT,,LXlimitSw17,26,5,28,7,);
L(11,7,11,10);
L(16,5,17,5);
L(17,5,17,9);
L(17,9,18,9);
L(16,10,18,10);
L(26,10,28,10);
L(27,11,28,11);
L(26,6,26,9);
L(26,10,26,12);
L(27,11,27,13);
L(23,9,28,9);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 14 ;
        NETWORK_BODY
B(B_COMMENT,,A-frame upper limit switch,1,1,27,2,);
B(B_F,sel,,19,5,24,10,);
B(B_VAROUT,,LRsymNumbLimitSw,24,6,26,8,);
B(B_VAROUT,,LXlimitSw18,17,3,19,5,);
B(B_VARIN,,LRsymNumbLimitSw,15,10,17,12,);
B(B_VARIN,,18.0,16,11,18,13,);
B(B_F,@AND-4,,11,5,16,11,N00N);
B(B_VARIN,,MXaFrameCylPrese,9,8,11,10,);
B(B_VARIN,,MXlg2Active,9,9,11,11,);
B(B_VARIN,,MXlgAnalSigPos,9,7,11,9,);
B(B_VARIN,,IXlgAFraUppLimOk,9,6,11,8,);
L(17,4,17,7);
L(16,7,19,7);
L(18,9,19,9);
L(17,8,19,8);
L(17,8,17,11);
L(18,9,18,12);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 20 ;
        NETWORK_BODY
B(B_COMMENT,,A-frame cylinder not active,1,1,27,2,);
B(B_F,@OR-2,,17,3,22,7,);
B(B_VARIN,,MXlgAnalSigPos,15,4,17,6,);
B(B_VARIN,,MXlgAnalSigNeg,15,5,17,7,);
B(B_VARIN,,MXrelAFrameCyl,20,7,22,9,);
B(B_F,@AND-4,,22,5,27,11,0N);
B(B_F,@OR-2,,16,10,21,14,);
B(B_VARIN,,MXassemblyOperat,14,11,16,13,);
B(B_VARIN,,MXaFrameCylPrese,20,8,22,10,);
B(B_F,@AND-4,,11,13,16,19,0NNN);
B(B_VARIN,,MXassemblyOperat,9,15,11,17,);
B(B_VARIN,,MXlmlRiggingAct,9,14,11,16,);
B(B_VARIN,,MXlg2Active,9,16,11,18,);
B(B_VARIN,,MX2TJoystick,9,17,11,19,);
B(B_F,sel,,30,5,35,10,);
B(B_VAROUT,,LRsymNumbLimitSw,35,6,37,8,);
B(B_VAROUT,,LXlimitSw19,28,3,30,5,);
B(B_VARIN,,19.0,27,15,29,17,);
B(B_VARIN,,LRsymNumbLimitSw,26,14,28,16,);
L(21,10,21,12);
L(22,5,22,7);
L(21,10,22,10);
L(16,13,16,15);
L(28,8,30,8);
L(29,9,30,9);
L(28,4,28,7);
L(27,7,30,7);
L(28,8,28,15);
L(29,9,29,16);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 20 ;
        NETWORK_BODY
B(B_COMMENT,,block hg1 by load location 2 and lml mode 3,1,1,27,2,);
B(B_F,@OR-2,,21,6,26,10,);
B(B_VARIN,,MXlmlBlockHg1,14,3,16,5,);
B(B_VARIN,,MXhg1AnalSigPos,8,7,10,9,);
B(B_VARIN,,MXhg1AnalSigNeg,8,8,10,10,);
B(B_F,@OR-2,,10,6,15,10,);
B(B_F,@AND-3,,16,4,21,9,);
B(B_VARIN,,MXhg1Preselect,13,4,15,6,);
B(B_VARIN,,MXlmlBlockHg2,14,10,16,12,);
B(B_F,@AND-3,,16,11,21,16,);
B(B_VARIN,,MXhg2Preselect,13,11,15,13,);
B(B_F,@OR-2,,10,13,15,17,);
B(B_VARIN,,MXhg2AnalSigPos,8,14,10,16,);
B(B_VARIN,,MXhg2AnalSigNeg,8,15,10,17,);
B(B_VAROUT,,LXlimitSw20,27,4,29,6,);
B(B_F,sel,,28,6,33,11,);
B(B_VAROUT,,LRsymNumbLimitSw,33,7,35,9,);
B(B_VARIN,,20.0,26,17,28,19,);
B(B_VARIN,,LRsymNumbLimitSw,25,16,27,18,);
L(21,6,21,8);
L(16,4,16,6);
L(15,8,16,8);
L(15,5,15,7);
L(15,7,16,7);
L(16,11,16,13);
L(15,15,16,15);
L(15,12,15,14);
L(15,14,16,14);
L(21,9,21,13);
L(27,5,27,8);
L(26,8,28,8);
L(27,9,28,9);
L(27,9,27,17);
L(28,10,28,18);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 19 ;
        NETWORK_BODY
B(B_COMMENT,,derrick in assembly operating position,1,1,27,2,);
B(B_F,@AND-2,,11,11,16,15,);
B(B_VARIN,,MXlg2Active,9,12,11,14,);
B(B_VARIN,,MXderrickActive,9,13,11,15,);
B(B_VARIN,,MXassemblyOperat,16,6,18,8,);
B(B_VARIN,,MXlmlDerrickEnab,16,7,18,9,);
B(B_VARIN,,MXlgAnalSigPos,16,9,18,11,);
B(B_VARIN,,IXlgUppLimDerrAO,16,8,18,10,);
B(B_F,@AND-5,,18,5,23,12,00N0N);
B(B_F,sel,,26,5,31,10,);
B(B_VAROUT,,LRsymNumbLimitSw,31,6,33,8,);
B(B_VAROUT,,LXlimitSw21,24,3,26,5,);
B(B_VARIN,,21.0,23,16,25,18,);
B(B_VARIN,,LRsymNumbLimitSw,22,15,24,17,);
L(17,11,18,11);
L(17,11,17,13);
L(16,13,17,13);
L(24,4,24,7);
L(23,7,26,7);
L(24,8,26,8);
L(25,9,26,9);
L(24,8,24,16);
L(25,9,25,17);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 19 ;
        NETWORK_BODY
B(B_COMMENT,,derrick in normal working position,1,1,27,2,);
B(B_F,@AND-2,,11,14,16,18,);
B(B_VARIN,,MXlg2Active,9,15,11,17,);
B(B_VARIN,,MXderrickActive,9,16,11,18,);
B(B_VARIN,,MXlgAnalSigPos,16,12,18,14,);
B(B_VARIN,,IXlgUppLimDerrOp,16,11,18,13,);
B(B_F,@AND-5,,18,8,23,15,00N0N);
B(B_F,@OR-2,,25,7,30,11,);
B(B_F,sel,,33,7,38,12,);
B(B_VAROUT,,LRsymNumbLimitSw,38,8,40,10,);
B(B_VAROUT,,LXlimitSw22,31,4,33,6,);
B(B_VARIN,,LRsymNumbLimitSw,29,15,31,17,);
B(B_VARIN,,22.0,30,16,32,18,);
B(B_VARIN,,IXlgUppLimDerrOp,16,4,18,6,);
B(B_F,@AND-3,,18,3,23,8,0N);
B(B_VARIN,,MXassemblyOperat,14,9,16,11,);
B(B_VARIN,,MXlmlDerrickEnab,15,10,17,12,);
L(17,14,18,14);
L(17,14,17,16);
L(16,16,17,16);
L(24,9,25,9);
L(24,5,24,9);
L(23,10,25,10);
L(31,5,31,9);
L(30,9,33,9);
L(31,10,33,10);
L(32,11,33,11);
L(32,11,32,17);
L(31,10,31,16);
L(23,5,24,5);
L(17,7,18,7);
L(17,11,18,11);
L(16,10,18,10);
L(17,7,17,11);
L(16,6,16,10);
L(16,6,18,6);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 15 ;
        NETWORK_BODY
B(B_COMMENT,,derrick winch lower limit switch,1,1,27,2,);
B(B_F,sel,,19,5,24,10,);
B(B_VAROUT,,LRsymNumbLimitSw,24,6,26,8,);
B(B_VAROUT,,LXlimitSw23,17,3,19,5,);
B(B_F,@AND-4,,11,5,16,11,0N);
B(B_VARIN,,MXlmlDerrickEnab,9,6,11,8,);
B(B_VARIN,,MXderrAnaSigNeg,9,8,11,10,);
B(B_VARIN,,IXderrLowerLimOk,9,7,11,9,);
B(B_VARIN,,MXderrickActive,9,9,11,11,);
B(B_VARIN,,23.0,16,12,18,14,);
B(B_VARIN,,LRsymNumbLimitSw,15,11,17,13,);
L(17,4,17,7);
L(17,8,19,8);
L(18,9,19,9);
L(16,7,19,7);
L(17,8,17,12);
L(18,9,18,13);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 29 ;
        NETWORK_BODY
B(B_COMMENT,,sliding table limit switch pivot piece,1,1,27,2,);
B(B_VARIN,,MXaxwAnalSigPos,9,16,11,18,);
B(B_VARIN,,MXlgAnalSigNeg,8,22,10,24,);
B(B_VARIN,,MXenabHangLeader,8,23,10,25,);
B(B_F,@OR-4,,24,18,29,24,);
B(B_VAROUT,,LXlimitSw24,31,19,33,21,);
B(B_F,sel,,32,23,37,28,);
B(B_VAROUT,,LRsymNumbLimitSw,37,24,39,26,);
B(B_VARIN,,LRsymNumbLimitSw,30,25,32,27,);
B(B_VARIN,,24.0,30,26,32,28,);
B(B_VARIN,,MXslidTablAutoUp,9,10,11,12,);
B(B_F,@AND-4,,15,21,20,27,000N);
B(B_F,@AND-3,,15,15,20,20,);
B(B_F,@AND-3,,15,9,20,14,);
B(B_VARIN,,MXslidTablePrese,12,5,14,7,);
B(B_VARIN,,MXslidTabStopUp,10,6,12,8,);
B(B_F,@AND-3,,15,3,20,8,);
B(B_VARIN,,MXz2OutPresel,13,4,15,6,);
B(B_VARIN,,MXleadHighWinPre,10,17,12,19,);
L(13,19,13,25);
L(13,7,13,19);
L(21,17,21,22);
L(12,18,15,18);
L(13,19,15,19);
L(13,25,15,25);
L(14,6,14,12);
L(14,12,15,12);
L(13,13,15,13);
L(22,11,22,21);
L(23,5,23,20);
L(10,24,15,24);
L(29,20,31,20);
L(30,20,30,25);
L(30,25,32,25);
L(21,22,24,22);
L(22,21,24,21);
L(23,20,24,20);
L(12,26,15,26);
L(10,23,15,23);
L(20,23,24,23);
L(11,17,15,17);
L(20,17,21,17);
L(11,11,15,11);
L(20,11,22,11);
L(14,6,15,6);
L(12,7,15,7);
L(20,5,23,5);
L(12,18,12,26);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 30 ;
        NETWORK_BODY
B(B_F,sel,,33,4,38,9,);
B(B_VAROUT,,LRsymNumbLimitSw,38,5,40,7,);
B(B_VARIN,,25.0,30,27,32,29,);
B(B_VARIN,,IXaddUpperLimOk,15,6,17,8,);
B(B_VARIN,,LRsymNumbLimitSw,29,26,31,28,);
B(B_VAROUT,,LXlimitSw25,31,2,33,4,);
B(B_COMMENT,,upper limit switch aux  1 (add winch + passenger winch),1,1,27,2,);
B(B_F,@AND-3,,17,16,22,21,0N);
B(B_VARIN,,MXpassWinchActiv,15,17,17,19,);
B(B_VARIN,,IXaddUpperLimOk,15,18,17,20,);
B(B_VARIN,,MXpwAnalSigPos,15,19,17,21,);
B(B_F,@OR-4,,25,4,30,10,);
B(B_VAROUT,,LXeclimitSw15,24,22,26,24,);
B(B_VARIN,,MXlgAnalSigNeg,15,10,17,12,);
B(B_VARIN,,IXaddUpperLimOk,15,11,17,13,);
B(B_VARIN,,CXaddWinch,9,13,11,15,);
B(B_F,@OR-2,,11,12,16,16,);
B(B_VARIN,,CXadPassWinch,9,14,11,16,);
B(B_F,@AND-3,,17,9,22,14,0N);
B(B_VARIN,,MXadwAnalSigPos,15,5,17,7,);
B(B_F,@AND-2,,17,4,22,8,0N);
B(B_VARIN,,MXecAddWinStopUp,16,22,18,24,);
B(B_VARIN,,MXadwAnalSigPos,16,23,18,25,);
B(B_F,@AND-2,,18,21,23,25,);
L(31,7,33,7);
L(32,8,33,8);
L(31,3,31,6);
L(32,8,32,28);
L(31,7,31,27);
L(22,18,23,18);
L(30,6,33,6);
L(23,8,25,8);
L(22,7,22,11);
L(23,8,23,18);
L(24,9,24,23);
L(24,9,25,9);
L(16,14,17,14);
L(17,13,17,14);
L(22,6,25,6);
L(22,7,25,7);
L(23,23,24,23);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 23 ;
        NETWORK_BODY
B(B_COMMENT,,lower limit switch aux 1 (add winch + passenger winch),1,1,27,2,);
B(B_F,sel,,26,5,31,10,);
B(B_VAROUT,,LRsymNumbLimitSw,31,6,33,8,);
B(B_VAROUT,,LXlimitSw26,24,3,26,5,);
B(B_VARIN,,IXaddLowerLimOk,9,6,11,8,);
B(B_VARIN,,26.0,23,20,25,22,);
B(B_VARIN,,MXadwAnalSigNeg,9,7,11,9,);
B(B_VARIN,,LRsymNumbLimitSw,22,19,24,21,);
B(B_VARIN,,IXaddLowerLimOk,9,11,11,13,);
B(B_F,@AND-3,,11,10,16,15,N);
B(B_VARIN,,MXpwAnalSigNeg,9,12,11,14,);
B(B_VARIN,,MXpassWinchActiv,9,13,11,15,);
B(B_VARIN,,MXecAddWinStopDn,9,16,11,18,);
B(B_VARIN,,MXadwAnalSigNeg,9,17,11,19,);
B(B_F,@OR-3,,18,5,23,10,);
B(B_VAROUT,,LXeclimitSw16,17,16,19,18,);
B(B_F,@AND-2,,11,5,16,9,N);
B(B_F,@AND-2,,11,15,16,19,);
L(24,8,26,8);
L(25,9,26,9);
L(24,4,24,7);
L(24,8,24,20);
L(25,9,25,21);
L(23,7,26,7);
L(16,8,16,12);
L(17,9,17,17);
L(17,9,18,9);
L(16,7,18,7);
L(16,8,18,8);
L(16,17,17,17);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 28 ;
        NETWORK_BODY
B(B_COMMENT,,lower limit switch when hose winch is not active,1,1,27,2,);
B(B_F,@AND-3,,21,5,26,10,N);
B(B_VARIN,,MXhg2AnalSigNeg,12,15,14,17,);
B(B_F,@OR-2,,14,13,19,17,);
B(B_VARIN,,MXhg1AnalSigNeg,12,14,14,16,);
B(B_VARIN,,MXadLEHydrGrab,12,7,14,9,);
B(B_VARIN,,MXadSBHydrGrab,12,8,14,10,);
B(B_VARIN,,MXadSMHydrGrab,12,9,14,11,);
B(B_VARIN,,MXenabAutHoseWin,18,4,20,6,);
B(B_VARIN,,MXenabKelGrabOpe,12,10,14,12,);
B(B_F,sel,,34,5,39,10,);
B(B_VAROUT,,LRsymNumbLimitSw,39,6,41,8,);
B(B_VAROUT,,LXlimitSw27,32,3,34,5,);
B(B_VARIN,,LRsymNumbLimitSw,30,24,32,26,);
B(B_VARIN,,27.0,31,25,33,27,);
B(B_F,@OR-2,,27,5,32,9,);
B(B_VARIN,,MXenabHyGrabHose,12,11,14,13,);
B(B_F,@OR-5,,14,6,19,13,);
B(B_F,@OR-2,,14,17,19,21,);
B(B_VARIN,,MXenabKelGrabOpe,12,18,14,20,);
B(B_VARIN,,MXenabHyGrabHose,12,19,14,21,);
B(B_F,@AND-3,,21,16,26,21,N);
B(B_VARIN,,MXlgAnalSigNeg,18,21,20,23,);
L(19,9,21,9);
L(20,7,21,7);
L(32,8,34,8);
L(33,9,34,9);
L(32,4,32,7);
L(32,8,32,25);
L(33,9,33,26);
L(32,7,34,7);
L(26,7,27,7);
L(19,8,21,8);
L(19,9,19,15);
L(20,5,20,18);
L(20,18,21,18);
L(19,19,21,19);
L(27,8,27,18);
L(26,18,27,18);
L(20,20,20,22);
L(20,20,21,20);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,slewing gear stopp left,1,1,27,2,);
B(B_F,sel,,21,5,26,10,);
B(B_VAROUT,,LRsymNumbLimitSw,26,6,28,8,);
B(B_VARIN,,LRsymNumbLimitSw,19,7,21,9,);
B(B_VARIN,,28.0,19,8,21,10,);
B(B_VAROUT,,LXlimitSw28,19,4,21,6,);
B(B_VAROUT,,LXeclimitSw17,19,3,21,5,);
B(B_VARIN,,MXecSgStopLe,11,5,13,7,);
B(B_VARIN,,MXsgAnalSigNeg,11,4,13,6,);
B(B_F,@AND-2,,13,3,18,7,);
L(19,7,21,7);
L(19,5,19,7);
L(19,4,19,5);
L(18,5,19,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,slewing gear stopp right,1,1,27,2,);
B(B_F,sel,,21,5,26,10,);
B(B_VAROUT,,LRsymNumbLimitSw,26,6,28,8,);
B(B_VARIN,,LRsymNumbLimitSw,19,7,21,9,);
B(B_VARIN,,29.0,19,8,21,10,);
B(B_VAROUT,,LXlimitSw29,19,4,21,6,);
B(B_VAROUT,,LXeclimitSw18,19,3,21,5,);
B(B_F,@AND-2,,13,3,18,7,);
B(B_VARIN,,MXsgAnalSigPos,11,4,13,6,);
B(B_VARIN,,MXecSgStopRi,11,5,13,7,);
L(19,7,21,7);
L(19,5,19,7);
L(19,4,19,5);
L(18,5,19,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 19 ;
        NETWORK_BODY
B(B_COMMENT,,slack rope passenger winch ,1,1,27,2,);
B(B_F,sel,,26,5,31,10,);
B(B_VAROUT,,LRsymNumbLimitSw,31,6,33,8,);
B(B_VAROUT,,LXlimitSw30,24,3,26,5,);
B(B_VARIN,,30.0,23,16,25,18,);
B(B_VARIN,,LRsymNumbLimitSw,22,15,24,17,);
B(B_F,@OR-2,,18,5,23,9,);
B(B_VARIN,,MXpwAnalSigNeg,9,13,11,15,);
B(B_VARIN,,IXadPersSlackRop,9,12,11,14,);
B(B_F,@AND-2,,11,11,16,15,N);
B(B_VARIN,,MXlgAnalSigNeg,9,6,11,8,);
B(B_VARIN,,IXadPersSlackRop,9,7,11,9,);
B(B_VARIN,,CXadPassWinch,9,8,11,10,);
B(B_F,@AND-3,,11,5,16,10,0N);
L(24,8,26,8);
L(25,9,26,9);
L(24,4,24,7);
L(24,8,24,16);
L(25,9,25,17);
L(23,7,26,7);
L(17,8,18,8);
L(17,8,17,13);
L(16,13,17,13);
L(16,7,18,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 15 ;
        NETWORK_BODY
B(B_COMMENT,,manual operation passenger winch ,1,1,27,2,);
B(B_F,sel,,26,5,31,10,);
B(B_VAROUT,,LRsymNumbLimitSw,31,6,33,8,);
B(B_VAROUT,,LXlimitSw31,24,3,26,5,);
B(B_VARIN,,IXadPersCrankMon,16,6,18,8,);
B(B_VARIN,,LRsymNumbLimitSw,22,11,24,13,);
B(B_VARIN,,31.0,23,12,25,14,);
B(B_F,@AND-2,,18,5,23,9,N);
B(B_F,@OR-2,,11,8,16,12,);
B(B_VARIN,,MXpwAnalSigNeg,9,9,11,11,);
B(B_VARIN,,MXpwAnalSigPos,9,10,11,12,);
L(24,8,26,8);
L(25,9,26,9);
L(24,4,24,7);
L(17,8,17,10);
L(24,8,24,12);
L(25,9,25,13);
L(17,8,18,8);
L(23,7,26,7);
L(16,10,17,10);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 82 ;
        NETWORK_BODY
B(B_VARIN,,0,12,3,14,5,);
B(B_F,sel,,16,1,21,6,);
B(B_VARIN,,LXlimitSw1,14,2,16,4,);
B(B_F,sel,,16,6,21,11,);
B(B_F,sel,,16,11,21,16,);
B(B_F,sel,,16,16,21,21,);
B(B_F,sel,,16,21,21,26,);
B(B_F,sel,,16,26,21,31,);
B(B_F,sel,,16,31,21,36,);
B(B_F,sel,,16,36,21,41,);
B(B_F,sel,,16,41,21,46,);
B(B_F,sel,,16,46,21,51,);
B(B_F,sel,,16,51,21,56,);
B(B_F,sel,,16,56,21,61,);
B(B_F,sel,,16,61,21,66,);
B(B_VARIN,,LXlimitSw13,11,62,13,64,);
B(B_VARIN,,LXlimitSw4,11,17,13,19,);
B(B_VARIN,,LXlimitSw3,11,12,13,14,);
B(B_VARIN,,LXlimitSw2,11,7,13,9,);
B(B_VARIN,,LXlimitSw12,11,57,13,59,);
B(B_VARIN,,LXlimitSw11,11,52,13,54,);
B(B_VARIN,,LXlimitSw10,11,47,13,49,);
B(B_VARIN,,LXlimitSw9,11,42,13,44,);
B(B_VARIN,,LXlimitSw8,11,37,13,39,);
B(B_VARIN,,LXlimitSw7,11,32,13,34,);
B(B_VARIN,,LXlimitSw6,11,27,13,29,);
B(B_VARIN,,LXlimitSw5,11,22,13,24,);
B(B_F,to_uint,,6,4,13,7,);
B(B_VARIN,,1,4,5,6,7,);
B(B_F,sel,,16,66,21,71,);
B(B_F,sel,,16,71,21,76,);
B(B_VARIN,,LXlimitSw15,11,72,13,74,);
B(B_VARIN,,LXlimitSw14,11,67,13,69,);
B(B_F,sel,,16,76,21,81,);
B(B_VARIN,,LXlimitSw16,11,77,13,79,);
B(B_F,@ADD-16,,37,1,42,19,);
B(B_VAROUT,,LDlimitSw1,42,2,44,4,);
L(27,9,27,33);
L(26,8,26,28);
L(25,7,25,23);
L(24,6,24,18);
L(23,5,23,13);
L(22,4,22,8);
L(27,9,37,9);
L(26,8,37,8);
L(25,7,37,7);
L(24,6,37,6);
L(23,5,37,5);
L(22,4,37,4);
L(28,10,28,38);
L(28,10,37,10);
L(29,11,37,11);
L(30,12,37,12);
L(29,11,29,43);
L(30,12,30,48);
L(31,13,37,13);
L(31,13,31,53);
L(32,14,37,14);
L(32,14,32,58);
L(33,15,37,15);
L(33,15,33,63);
L(14,4,16,4);
L(14,5,16,5);
L(21,8,22,8);
L(13,63,16,63);
L(13,58,16,58);
L(13,53,16,53);
L(13,48,16,48);
L(13,43,16,43);
L(13,38,16,38);
L(13,33,16,33);
L(13,28,16,28);
L(13,23,16,23);
L(13,18,16,18);
L(13,13,16,13);
L(14,10,16,10);
L(13,8,16,8);
L(15,9,16,9);
L(15,14,16,14);
L(14,15,16,15);
L(15,19,16,19);
L(14,20,16,20);
L(15,24,16,24);
L(14,25,16,25);
L(15,29,16,29);
L(14,30,16,30);
L(15,34,16,34);
L(14,35,16,35);
L(15,39,16,39);
L(14,40,16,40);
L(15,44,16,44);
L(14,45,16,45);
L(15,49,16,49);
L(14,50,16,50);
L(15,54,16,54);
L(14,55,16,55);
L(15,59,16,59);
L(14,60,16,60);
L(14,65,16,65);
L(15,64,16,64);
L(21,63,33,63);
L(21,58,32,58);
L(21,53,31,53);
L(21,48,30,48);
L(21,43,29,43);
L(21,38,28,38);
L(21,33,27,33);
L(21,28,26,28);
L(21,23,25,23);
L(21,18,24,18);
L(21,13,23,13);
L(13,6,14,6);
L(13,73,16,73);
L(13,68,16,68);
L(15,69,16,69);
L(14,70,16,70);
L(14,75,16,75);
L(15,74,16,74);
L(34,16,37,16);
L(21,73,35,73);
L(21,68,34,68);
L(34,16,34,68);
L(13,78,16,78);
L(14,80,16,80);
L(15,79,16,79);
L(35,17,35,73);
L(35,17,37,17);
L(36,18,37,18);
L(36,18,36,78);
L(21,78,36,78);
L(15,4,15,79);
L(14,5,14,80);
L(21,3,37,3);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 82 ;
        NETWORK_BODY
B(B_VARIN,,0,12,3,14,5,);
B(B_F,sel,,16,1,21,6,);
B(B_VARIN,,LXlimitSw17,14,2,16,4,);
B(B_F,sel,,16,6,21,11,);
B(B_F,sel,,16,11,21,16,);
B(B_F,sel,,16,16,21,21,);
B(B_F,sel,,16,21,21,26,);
B(B_F,sel,,16,26,21,31,);
B(B_F,sel,,16,31,21,36,);
B(B_F,sel,,16,36,21,41,);
B(B_F,sel,,16,41,21,46,);
B(B_F,sel,,16,46,21,51,);
B(B_F,sel,,16,51,21,56,);
B(B_F,sel,,16,56,21,61,);
B(B_F,sel,,16,61,21,66,);
B(B_F,to_uint,,6,4,13,7,);
B(B_VARIN,,1,4,5,6,7,);
B(B_F,sel,,16,66,21,71,);
B(B_F,sel,,16,71,21,76,);
B(B_F,sel,,16,76,21,81,);
B(B_F,@ADD-16,,37,1,42,19,);
B(B_VAROUT,,LDlimitSw2,42,2,44,4,);
B(B_VARIN,,LXlimitSw18,11,7,13,9,);
B(B_VARIN,,LXlimitSw19,11,12,13,14,);
B(B_VARIN,,LXlimitSw20,11,17,13,19,);
B(B_VARIN,,LXlimitSw22,11,27,13,29,);
B(B_VARIN,,LXlimitSw21,11,22,13,24,);
B(B_VARIN,,LXlimitSw23,11,32,13,34,);
B(B_VARIN,,LXlimitSw24,11,37,13,39,);
B(B_VARIN,,LXlimitSw26,11,47,13,49,);
B(B_VARIN,,LXlimitSw25,11,42,13,44,);
B(B_VARIN,,LXlimitSw27,11,52,13,54,);
B(B_VARIN,,LXlimitSw29,11,62,13,64,);
B(B_VARIN,,LXlimitSw28,11,57,13,59,);
B(B_VARIN,,LXlimitSw30,11,67,13,69,);
B(B_VARIN,,LXlimitSw31,11,72,13,74,);
B(B_VARIN,,FALSE,11,77,13,79,);
L(27,9,27,33);
L(26,8,26,28);
L(25,7,25,23);
L(24,6,24,18);
L(23,5,23,13);
L(22,4,22,8);
L(27,9,37,9);
L(26,8,37,8);
L(25,7,37,7);
L(24,6,37,6);
L(23,5,37,5);
L(22,4,37,4);
L(28,10,28,38);
L(28,10,37,10);
L(29,11,37,11);
L(30,12,37,12);
L(29,11,29,43);
L(30,12,30,48);
L(31,13,37,13);
L(31,13,31,53);
L(32,14,37,14);
L(32,14,32,58);
L(33,15,37,15);
L(33,15,33,63);
L(14,4,16,4);
L(14,5,16,5);
L(21,8,22,8);
L(13,63,16,63);
L(13,58,16,58);
L(13,53,16,53);
L(13,48,16,48);
L(13,43,16,43);
L(13,38,16,38);
L(13,33,16,33);
L(13,28,16,28);
L(13,23,16,23);
L(13,18,16,18);
L(13,13,16,13);
L(14,10,16,10);
L(13,8,16,8);
L(15,9,16,9);
L(15,14,16,14);
L(14,15,16,15);
L(15,19,16,19);
L(14,20,16,20);
L(15,24,16,24);
L(14,25,16,25);
L(15,29,16,29);
L(14,30,16,30);
L(15,34,16,34);
L(14,35,16,35);
L(15,39,16,39);
L(14,40,16,40);
L(15,44,16,44);
L(14,45,16,45);
L(15,49,16,49);
L(14,50,16,50);
L(15,54,16,54);
L(14,55,16,55);
L(15,59,16,59);
L(14,60,16,60);
L(14,65,16,65);
L(15,64,16,64);
L(21,63,33,63);
L(21,58,32,58);
L(21,53,31,53);
L(21,48,30,48);
L(21,43,29,43);
L(21,38,28,38);
L(21,33,27,33);
L(21,28,26,28);
L(21,23,25,23);
L(21,18,24,18);
L(21,13,23,13);
L(13,6,14,6);
L(13,73,16,73);
L(13,68,16,68);
L(15,69,16,69);
L(14,70,16,70);
L(14,75,16,75);
L(15,74,16,74);
L(34,16,37,16);
L(21,73,35,73);
L(21,68,34,68);
L(34,16,34,68);
L(13,78,16,78);
L(14,80,16,80);
L(15,79,16,79);
L(35,17,35,73);
L(35,17,37,17);
L(36,18,37,18);
L(36,18,36,78);
L(21,78,36,78);
L(15,4,15,79);
L(14,5,14,80);
L(21,3,37,3);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_VARIN,,0,19,3,21,5,);
B(B_VAROUT,,MXscOneLimitSw,26,2,28,4,);
B(B_F,@GT-2,,21,1,26,5,);
B(B_VAROUT,,MXscMoreLimitSw,26,6,28,8,);
B(B_F,@ADD-2,,12,1,17,5,);
B(B_VARIN,,LDlimitSw1,10,2,12,4,);
B(B_VARIN,,LDlimitSw2,10,3,12,5,);
B(B_VARIN,,1,19,7,21,9,);
B(B_F,@GT-2,,21,5,26,9,);
L(18,3,18,7);
L(18,7,21,7);
L(17,3,21,3);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_F,sel,,12,1,17,6,);
B(B_VARIN,,LRsymNumbLimitSw,10,3,12,5,);
B(B_VARIN,,MXscMoreLimitSw,10,2,12,4,);
B(B_VARIN,,1.0,10,4,12,6,);
B(B_VAROUT,,SRlimitSwiNumb,17,2,19,4,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 17 ;
        NETWORK_BODY
B(B_COMMENT,,external text indication for limit switches ,1,1,27,2,);
B(B_VARIN,,LXeclimitSw1,9,4,11,6,);
B(B_VARIN,,LXeclimitSw2,9,5,11,7,);
B(B_VARIN,,LXeclimitSw3,9,6,11,8,);
B(B_VARIN,,LXeclimitSw4,9,7,11,9,);
B(B_VARIN,,LXeclimitSw5,9,8,11,10,);
B(B_VARIN,,LXeclimitSw6,9,9,11,11,);
B(B_VARIN,,LXeclimitSw13,9,10,11,12,);
B(B_VARIN,,LXeclimitSw14,9,11,11,13,);
B(B_VARIN,,LXeclimitSw17,9,14,11,16,);
B(B_F,@OR-11,,11,3,16,16,);
B(B_VARIN,,1,17,6,19,8,);
B(B_F,VisObjectState1,,19,3,32,8,);
B(B_VARIN,,TRUE,17,5,19,7,);
B(B_VARIN,,LXeclimitSw15,9,12,11,14,);
B(B_VARIN,,LXeclimitSw16,9,13,11,15,);
B(B_VAROUT,,LBecLimSwitExt,32,4,34,6,);
B(B_COMMENT,,offen,33,7,55,9,);
L(16,5,19,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_FB,MsgRealReal,Message2,12,2,21,9,);
B(B_VARIN,,640,10,3,12,5,);
B(B_VARIN,,MSG_INFO,10,5,12,7,);
B(B_VARIN,,SXMbuzzStatAckn,10,4,12,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_F,sel,,11,1,16,6,);
B(B_VAROUT,,SXMbuzzStatAckn,16,2,18,4,);
B(B_VARIN,,SXMbuzzStatAckn,9,3,11,5,);
B(B_VARIN,,FALSE,9,4,11,6,);
B(B_VARIN,,SXMbuzzStatAckn,9,2,11,4,);
B(B_COMMENT,,ACHTUNG: SXMbuzzStatAckn wird auch nochø^bei reset des Buzzer abgefragt. Dieses Zurücksetzenø^des Buzzer muß dahinter passieren,25,3,45,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_COMMENT,,Symbol vibrator clamp open,1,1,27,2,);
B(B_VARIN,,MXclampAutoClose,9,5,11,7,);
B(B_VARIN,,MXenablVibOperat,9,4,11,6,);
B(B_VARIN,,MXclampIsClosed,9,6,11,8,);
B(B_F,@AND-3,,11,3,16,8,00N);
B(B_VAROUT,,SXclampOpen,16,4,18,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,Powerpack,1,1,62,3,);
B(B_VARIN,,MXlidec1,9,4,11,6,);
B(B_VAROUT,,SXlidec1,11,4,13,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,MDpresenEngSpeed,9,1,11,3,);
B(B_VAROUT,,SRengineSpeed,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VARIN,,MDengExploitatio,9,1,11,3,);
B(B_VAROUT,,SRactualTorque,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VARIN,,MDhydrOilTemp,9,1,11,3,);
B(B_VAROUT,,SRhydrOilTemp,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VARIN,,MDlubOilPressure,9,1,11,3,);
B(B_VAROUT,,SRlubOilPress,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VARIN,,MDcoolWaterTemp,9,1,11,3,);
B(B_VAROUT,,SRcoolWaterTemp,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VARIN,,MDbatteryVoltage,9,1,11,3,);
B(B_VAROUT,,SRbatteryVoltage,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VARIN,,MDchargeAirTemp,9,1,11,3,);
B(B_VAROUT,,SRchargeAirTemp,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VARIN,,MDchargeAirPress,9,1,11,3,);
B(B_VAROUT,,SRchargeAirPress,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VARIN,,MDdefCont,9,1,11,3,);
B(B_VAROUT,,SRdefCont,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VARIN,,MDlubOilCont,9,1,11,3,);
B(B_VAROUT,,SRlubOilCont,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VARIN,,MDoutdoorTemp,9,1,11,3,);
B(B_VAROUT,,SRoutdoorTemp,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 18 ;
        NETWORK_BODY
B(B_COMMENT,,http://jira.zdv.liebherr.i:8080/browse/LWNTBEHSHSSW10511521-11,32,3,62,4,);
B(B_COMMENT,,fuel content indication,1,1,27,2,);
B(B_COMMENT,,Anzeige manipulieren damit wenn mit der Betankungsanlage betankt wird~ und die ø^Abschaltfunktion anspricht~ auch 100% als Anzeige erscheint. ,32,1,63,3,);
B(B_VARIN,,90.0,11,14,13,16,);
B(B_VARIN,,100.0,11,15,13,17,);
B(B_F,GPkx_dV010,,13,8,22,17,);
B(B_VARIN,,95.0,9,11,11,13,);
B(B_VARIN,,90.0,9,10,11,12,);
B(B_VARIN,,100.0,9,12,11,14,);
B(B_F,sel,,22,5,27,10,);
B(B_F,limit,,28,4,34,9,);
B(B_VAROUT,,SRfuelCont,34,5,36,7,);
B(B_VARIN,,100.0,26,10,28,12,);
B(B_F,@GT-2,,13,4,18,8,);
B(B_VARIN,,MDfuelCont,10,5,12,7,);
B(B_VARIN,,90.0,9,6,11,8,);
L(12,14,13,14);
L(11,11,13,11);
L(11,12,13,12);
L(11,13,13,13);
L(22,9,22,10);
L(22,6,22,7);
L(28,8,28,11);
L(27,7,28,7);
L(28,6,28,7);
L(12,6,13,6);
L(11,7,13,7);
L(13,7,13,10);
L(12,6,12,14);
L(12,8,22,8);
L(18,6,22,6);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VAROUT,,SXfuelContWarn,11,1,13,3,);
B(B_VARIN,,MXfuelContWarn,9,1,11,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VAROUT,,SXfuelContError,11,1,13,3,);
B(B_VARIN,,MXfuelContError,9,1,11,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VARIN,,IXengSpeedHighW,10,1,12,3,);
B(B_VAROUT,,SXengSpeedWarn,12,1,14,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VARIN,,IXengSpeedHighE,10,1,12,3,);
B(B_VAROUT,,SXengSpeedError,12,1,14,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VARIN,,MXwarnHydrOilTem,10,1,12,3,);
B(B_VAROUT,,SXhydrOilTempWar,12,1,14,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VARIN,,MXwarnHydrOilTem,10,1,12,3,);
B(B_VAROUT,,SXhydrOilTempErr,12,1,14,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VARIN,,MXadOilHeatAct,10,1,12,3,);
B(B_VAROUT,,SXhydrOilHeating,12,1,14,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VARIN,,IXengLubOilPresW,10,1,12,3,);
B(B_VAROUT,,SXlubOilPressWar,12,1,14,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VARIN,,IXengLubOilPresE,10,1,12,3,);
B(B_VAROUT,,SXlubOilPressErr,12,1,14,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VARIN,,IXengCooWatTempW,10,1,12,3,);
B(B_VAROUT,,SXcoolWaterTempW,12,1,14,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VARIN,,IXengCooWatTempE,10,1,12,3,);
B(B_VAROUT,,SXcoolWaterTempE,12,1,14,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VARIN,,MXengChargingOFF,10,1,12,3,);
B(B_VAROUT,,SXchargeControl,12,1,14,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VARIN,,IXengChaAirTempW,10,1,12,3,);
B(B_VAROUT,,SXchargeAirTempW,12,1,14,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VARIN,,IXengChaAirTempE,10,1,12,3,);
B(B_VAROUT,,SXchargeAirTempE,12,1,14,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VARIN,,IXengPowerRedHig,10,1,12,3,);
B(B_VAROUT,,SXengHightLimit,12,1,14,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VARIN,,IXengPowerRedTem,10,1,12,3,);
B(B_VAROUT,,SXengPowerLimit,12,1,14,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VARIN,,FALSE,10,1,12,3,);
B(B_VAROUT,,SXengOilCoLowWar,12,1,14,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VARIN,,IXengLubOilCoLoE,10,1,12,3,);
B(B_VAROUT,,SXengOilCoLowErr,12,1,14,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VARIN,,FALSE,10,1,12,3,);
B(B_VAROUT,,SXengOilCoHigWar,12,1,14,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VARIN,,IXengLubOilCoHiE,10,1,12,3,);
B(B_VAROUT,,SXengOilCoHigErr,12,1,14,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VARIN,,IXengLubOilCoAct,10,1,12,3,);
B(B_VAROUT,,SXengOilContAct,12,1,14,3,);
B(B_COMMENT,,??? entfällt ??? dann muß es ein andere kriterium geben,22,1,52,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VARIN,,IXengFuelTempW,10,1,12,3,);
B(B_VAROUT,,SXfuelTempWarn,12,1,14,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VARIN,,IXengFuelTempE,10,1,12,3,);
B(B_VAROUT,,SXfuelTempError,12,1,14,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VARIN,,IXengWaterInFuel,10,1,12,3,);
B(B_VAROUT,,SXwaterInFuel,12,1,14,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VARIN,,IXengPreheatActi,10,1,12,3,);
B(B_VAROUT,,SXpreHeatActive,12,1,14,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VARIN,,IXengPreheatStar,10,1,12,3,);
B(B_VAROUT,,SXpreHeatStart,12,1,14,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VARIN,,IXengPostheatAct,10,1,12,3,);
B(B_VAROUT,,SXpostHeatActive,12,1,14,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VARIN,,MXengDefWarn,10,1,12,3,);
B(B_VAROUT,,SXdefWarn,12,1,14,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VARIN,,MXengDefError,10,1,12,3,);
B(B_VAROUT,,SXdefError,12,1,14,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VARIN,,MXdpfHEST,10,1,12,3,);
B(B_VAROUT,,SXdpfActive,12,1,14,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VARIN,,MXdpfWarn,10,1,12,3,);
B(B_VAROUT,,SXdpfWarn,12,1,14,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VARIN,,MXdpfError,10,1,12,3,);
B(B_VAROUT,,SXdpfError,12,1,14,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VARIN,,MRdpfTime,10,1,12,3,);
B(B_VAROUT,,SRdpfTime,12,1,14,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,IXengAgnMilWarn,10,1,12,3,);
B(B_VAROUT,,SXmilWarn,12,1,14,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VAROUT,,SXmilError,12,1,14,3,);
B(B_VARIN,,IXengAgnMilError,10,1,12,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VARIN,,MXdpfRegManActiv,10,1,12,3,);
B(B_VAROUT,,SXdpfRegManActiv,12,1,14,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VARIN,,MXdpfRegBlocked,10,1,12,3,);
B(B_VAROUT,,SXdpfRegDisabled,12,1,14,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VARIN,,MXdpfInitPossib,10,1,12,3,);
B(B_VAROUT,,SXdpfInitPossib,12,1,14,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VARIN,,MXdpfDisabPossib,10,1,12,3,);
B(B_VAROUT,,SXdpfDisabPossib,12,1,14,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VARIN,,SXMdpfRegInitiat,10,1,12,3,);
B(B_VAROUT,,MXdpfRegInitiat,12,1,14,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_F,sel,,12,1,17,6,);
B(B_VAROUT,,SXMdpfRegInitiat,17,2,19,4,);
B(B_VARIN,,SXMdpfRegInitiat,10,3,12,5,);
B(B_VARIN,,FALSE,10,4,12,6,);
B(B_VARIN,,SXMdpfRegInitiat,10,2,12,4,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VARIN,,SXMdpfRegDisable,10,1,12,3,);
B(B_VAROUT,,MXdpfRegDisable,12,1,14,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_F,sel,,12,1,17,6,);
B(B_VAROUT,,SXMdpfRegDisable,17,2,19,4,);
B(B_VARIN,,SXMdpfRegDisable,10,3,12,5,);
B(B_VARIN,,FALSE,10,4,12,6,);
B(B_VARIN,,SXMdpfRegDisable,10,2,12,4,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_F,@OR-2,,12,1,17,5,);
B(B_VAROUT,,SXfuelPressWarn,17,2,19,4,);
B(B_VARIN,,IXengFuelPresRaW,10,2,12,4,);
B(B_VARIN,,IXengFuelPressWa,10,3,12,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_F,@OR-2,,12,1,17,5,);
B(B_VARIN,,IXengFuelPresRaE,10,2,12,4,);
B(B_VARIN,,IXengFuelPressEr,10,3,12,5,);
B(B_VAROUT,,SXfuelPressError,17,2,19,4,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,IXengAirFilterW,10,1,12,3,);
B(B_VAROUT,,SXairFilterWarn,12,1,14,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,IXengAirFilterE,10,1,12,3,);
B(B_VAROUT,,SXairFilterError,12,1,14,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,IXengCoolWatConW,10,1,12,3,);
B(B_VAROUT,,SXcoolWaterContW,12,1,14,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VAROUT,,SXcoolWaterContE,12,1,14,3,);
B(B_VARIN,,IXengCoolWatConE,10,1,12,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 16 ;
        NETWORK_BODY
B(B_VARIN,,MXengStarterActi,10,3,12,5,);
B(B_FB,SR,SR1,22,1,27,5,);
B(B_VAROUT,,SXfeedPresLowHg1,27,2,29,4,);
B(B_VARIN,,SXMbuzzPowerAckn,19,13,21,15,);
B(B_VARIN,,MXhgByLudvSectio,9,4,11,6,);
B(B_F,@AND-4,,15,7,20,13,0NNN);
B(B_F,@AND-4,,15,1,20,7,NNN);
B(B_VARIN,,IXhg1FeedPressOk,13,2,15,4,);
B(B_VARIN,,IXhg2FeedPressOk,13,11,15,13,);
B(B_VARIN,,MXminEngineSpeed,9,5,11,7,);
B(B_FB,SR,SR2,22,7,27,11,);
B(B_VAROUT,,SXfeedPresLowHg2,27,8,29,10,);
L(21,4,21,14);
L(21,4,22,4);
L(20,3,22,3);
L(13,5,15,5);
L(12,4,15,4);
L(12,11,15,11);
L(12,4,12,11);
L(11,5,13,5);
L(13,10,15,10);
L(14,9,15,9);
L(14,6,14,9);
L(13,5,13,10);
L(11,6,15,6);
L(21,10,22,10);
L(20,9,22,9);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VAROUT,,SXfeedPressFilt,12,1,14,3,);
B(B_VARIN,,MXfeedFiltWarn,10,1,12,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VAROUT,,SXhydrOilRetFilt,12,1,14,3,);
B(B_VARIN,,MXreturnFiltWarn,10,1,12,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_VAROUT,,SXgearOilTempErr,17,2,19,4,);
B(B_FB,MsgRealReal,Message3,24,4,33,11,);
B(B_VARIN,,45,22,5,24,7,);
B(B_VARIN,,MSG_WARNING,22,7,24,9,);
B(B_VARIN,,IXgearOilTempOk,10,2,12,4,);
B(B_F,@AND-2,,12,1,17,5,N);
B(B_VARIN,,MXmachWiGearBox,10,3,12,5,);
L(17,7,24,7);
L(17,3,17,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VARIN,,MXhydrOilContWar,10,1,12,3,);
B(B_VAROUT,,SXhydrOilCoLoWar,12,1,14,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VARIN,,MXhydrOilContErr,10,1,12,3,);
B(B_VAROUT,,SXhydrOilCoLoErr,12,1,14,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VARIN,,MXhydrOilContHig,10,1,12,3,);
B(B_VAROUT,,SXhydrOilCoHiWar,12,1,14,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VARIN,,FALSE,10,1,12,3,);
B(B_VAROUT,,SXhydrOilCoHiErr,12,1,14,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VARIN,,MXhydrOilLeakage,10,1,12,3,);
B(B_VAROUT,,SXhydrOilLeakage,12,1,14,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_F,not,,12,1,17,4,);
B(B_VARIN,,MXhydrOilShOffOk,10,2,12,4,);
B(B_VAROUT,,SXhydrOilShutOff,17,2,19,4,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_FB,MsgRealReal,Message4,12,2,21,9,);
B(B_VARIN,,252,10,3,12,5,);
B(B_VARIN,,MSG_INFO,10,5,12,7,);
B(B_VARIN,,SXMbuzzPowerAckn,10,4,12,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_F,sel,,11,1,16,6,);
B(B_VAROUT,,SXMbuzzPowerAckn,16,2,18,4,);
B(B_VARIN,,SXMbuzzPowerAckn,9,3,11,5,);
B(B_VARIN,,FALSE,9,4,11,6,);
B(B_VARIN,,SXMbuzzPowerAckn,9,2,11,4,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_COMMENT,,Windeneinstellungen,1,1,62,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VARIN,,SXMhg1ResRopLen,10,1,12,3,);
B(B_VAROUT,,MXresRopeLenHg1,12,1,14,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_F,sel,,12,1,17,6,);
B(B_VARIN,,FALSE,10,4,12,6,);
B(B_VAROUT,,SXMhg1ResRopLen,17,2,19,4,);
B(B_VARIN,,SXMhg1ResRopLen,10,3,12,5,);
B(B_VARIN,,SXMhg1ResRopLen,10,2,12,4,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VARIN,,SXMhg2ResRopLen,10,1,12,3,);
B(B_VAROUT,,MXresRopeLenHg2,12,1,14,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_F,sel,,12,1,17,6,);
B(B_VARIN,,FALSE,10,4,12,6,);
B(B_VAROUT,,SXMhg2ResRopLen,17,2,19,4,);
B(B_VARIN,,SXMhg2ResRopLen,10,3,12,5,);
B(B_VARIN,,SXMhg2ResRopLen,10,2,12,4,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_F,@OR-3,,12,0,17,5,);
B(B_VARIN,,SXMhg1ChanLay3_4,10,2,12,4,);
B(B_VARIN,,SXMhg1ChanLay5_6,10,3,12,5,);
B(B_VARIN,,SXMhg1ChanLay1_2,10,1,12,3,);
B(B_VAROUT,,MXhg1EnChangeLay,17,1,19,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_F,@OR-3,,12,0,17,5,);
B(B_VARIN,,SXMhg2ChanLay3_4,10,2,12,4,);
B(B_VARIN,,SXMhg2ChanLay5_6,10,3,12,5,);
B(B_VARIN,,SXMhg2ChanLay1_2,10,1,12,3,);
B(B_VAROUT,,MXhg2EnChangeLay,17,1,19,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 23 ;
        NETWORK_BODY
B(B_F,@OR-3,,18,0,23,5,);
B(B_VAROUT,,MXhg1EnChangeLay,23,1,25,3,);
B(B_F,@OR-3,,18,5,23,10,);
B(B_VAROUT,,MXhg2EnChangeLay,23,6,25,8,);
B(B_VARIN,,SXMhg2ChanLay5_6,10,8,12,10,);
B(B_F,@OR-2,,18,10,23,14,);
B(B_VARIN,,SXMhg2ChanLay3_4,10,7,12,9,);
B(B_VARIN,,SXMhg2ChanLay1_2,10,6,12,8,);
B(B_VARIN,,SXMhg1ChanLay5_6,10,3,12,5,);
B(B_VARIN,,SXMhg1ChanLay3_4,10,2,12,4,);
B(B_VARIN,,SXMhg1ChanLay1_2,10,1,12,3,);
B(B_F,@OR-2,,18,14,23,18,);
B(B_F,@OR-2,,18,18,23,22,);
B(B_VAROUT,,MXchangeLayer1_2,23,11,25,13,);
B(B_VAROUT,,MXchangeLayer3_4,23,15,25,17,);
B(B_VAROUT,,MXchangeLayer5_6,23,19,25,21,);
L(12,9,18,9);
L(17,2,17,12);
L(17,12,18,12);
L(16,13,18,13);
L(16,7,16,13);
L(12,8,18,8);
L(12,7,18,7);
L(12,4,18,4);
L(12,3,18,3);
L(12,2,18,2);
L(15,16,18,16);
L(14,17,18,17);
L(13,20,18,20);
L(12,21,18,21);
L(12,9,12,21);
L(13,4,13,20);
L(14,8,14,17);
L(15,3,15,16);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 17 ;
        NETWORK_BODY
B(B_VARIN,,MDhg1RopeLenOff,33,6,35,8,);
B(B_VARIN,,MXresRopeLenHg1,26,3,28,5,);
B(B_F,sel,,35,4,40,9,);
B(B_VARIN,,MXextResRopeHg1,26,4,28,6,);
B(B_F,@OR-3,,28,1,33,6,);
B(B_VAROUT,,MDhg1RopeLenOff,40,5,42,7,);
B(B_F,@ADD-2,,28,8,33,12,);
B(B_F,sel,,21,11,26,16,);
B(B_VARIN,,MXlmlFix_LuffJib,19,12,21,14,);
B(B_VARIN,,MDlmlMaxHight1,19,13,21,15,);
B(B_VARIN,,MDlmlMaxHight2,19,14,21,16,);
B(B_F,@DIV,,21,6,26,10,);
B(B_F,limit,,13,7,19,12,);
B(B_VARIN,,MDhg1Reeving,10,9,12,11,);
B(B_VARIN,,1.0,11,8,13,10,);
B(B_VARIN,,MDhg1RopeLenRela,18,5,20,7,);
B(B_VARIN,,MXhg1EnChangeLay,26,2,28,4,);
L(34,3,34,6);
L(34,6,35,6);
L(33,3,34,3);
L(33,10,34,10);
L(34,8,34,10);
L(34,8,35,8);
L(27,11,28,11);
L(26,13,27,13);
L(27,11,27,13);
L(20,8,21,8);
L(19,9,21,9);
L(12,10,12,11);
L(12,11,13,11);
L(12,10,13,10);
L(20,6,20,8);
L(26,8,27,8);
L(27,8,27,10);
L(27,10,28,10);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 20 ;
        NETWORK_BODY
B(B_F,@DIV,,21,2,26,6,);
B(B_F,limit,,13,3,19,8,);
B(B_VARIN,,MDhg1Reeving,10,5,12,7,);
B(B_VARIN,,1.0,11,4,13,6,);
B(B_VARIN,,MDropeLenghtHg1,18,1,20,3,);
B(B_F,@DIV,,21,9,26,13,);
B(B_F,limit,,13,10,19,15,);
B(B_VARIN,,MDhg1Reeving,10,12,12,14,);
B(B_VARIN,,1.0,11,11,13,13,);
B(B_VARIN,,MDhg1RopeLenRela,18,8,20,10,);
B(B_F,@ADD-2,,28,9,33,13,);
B(B_F,sel,,21,14,26,19,);
B(B_VARIN,,MXlmlFix_LuffJib,19,15,21,17,);
B(B_VARIN,,MDlmlMaxHight1,19,16,21,18,);
B(B_VARIN,,MDlmlMaxHight2,19,17,21,19,);
B(B_F,@SUB,,35,11,40,15,);
B(B_VARIN,,MDhg1RopeLenOff,33,13,35,15,);
B(B_F,@ADD-2,,42,8,47,12,);
B(B_F,sel,,49,1,54,6,);
B(B_VARIN,,CXadRopLenCorrec,47,2,49,4,);
B(B_VAROUT,,SRhg1RopeLength,54,2,56,4,);
B(B_VAROUT,,MDscRopeLenHg1,54,3,56,5,);
L(20,4,21,4);
L(19,5,21,5);
L(12,6,12,7);
L(12,7,13,7);
L(12,6,13,6);
L(20,2,20,4);
L(20,11,21,11);
L(19,12,21,12);
L(12,13,12,14);
L(12,14,13,14);
L(12,13,13,13);
L(20,9,20,11);
L(27,12,27,16);
L(26,16,27,16);
L(27,12,28,12);
L(26,11,28,11);
L(40,13,41,13);
L(41,11,41,13);
L(41,11,42,11);
L(41,10,42,10);
L(33,11,34,11);
L(34,11,34,13);
L(34,13,35,13);
L(41,4,41,10);
L(48,5,48,10);
L(47,10,48,10);
L(48,5,49,5);
L(26,4,49,4);
L(54,3,54,4);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_VARIN,,MDhg2RopeLenOff,33,6,35,8,);
B(B_VARIN,,MXresRopeLenHg2,26,3,28,5,);
B(B_F,sel,,35,4,40,9,);
B(B_VARIN,,MXextResRopeHg2,26,4,28,6,);
B(B_F,@OR-3,,28,1,33,6,);
B(B_VAROUT,,MDhg2RopeLenOff,40,5,42,7,);
B(B_F,@ADD-2,,28,8,33,12,);
B(B_F,@DIV,,21,6,26,10,);
B(B_F,limit,,13,7,19,12,);
B(B_VARIN,,MDhg2Reeving,10,9,12,11,);
B(B_VARIN,,1.0,11,8,13,10,);
B(B_VARIN,,MDhg2RopeLenRela,18,5,20,7,);
B(B_VARIN,,MDlmlMaxHight1,26,10,28,12,);
B(B_VARIN,,MXhg2EnChangeLay,26,2,28,4,);
L(34,3,34,6);
L(34,6,35,6);
L(33,3,34,3);
L(33,10,34,10);
L(34,8,34,10);
L(34,8,35,8);
L(20,8,21,8);
L(19,9,21,9);
L(12,10,12,11);
L(12,11,13,11);
L(12,10,13,10);
L(20,6,20,8);
L(26,8,27,8);
L(27,8,27,10);
L(27,10,28,10);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 17 ;
        NETWORK_BODY
B(B_F,@DIV,,21,2,26,6,);
B(B_F,limit,,13,3,19,8,);
B(B_VARIN,,MDhg2Reeving,10,5,12,7,);
B(B_VARIN,,1.0,11,4,13,6,);
B(B_VARIN,,MDropeLenghtHg2,18,1,20,3,);
B(B_F,@DIV,,21,9,26,13,);
B(B_F,limit,,13,10,19,15,);
B(B_VARIN,,MDhg2Reeving,10,12,12,14,);
B(B_VARIN,,1.0,11,11,13,13,);
B(B_VARIN,,MDhg2RopeLenRela,18,8,20,10,);
B(B_F,@ADD-2,,28,9,33,13,);
B(B_F,@SUB,,35,11,40,15,);
B(B_VARIN,,MDhg2RopeLenOff,33,13,35,15,);
B(B_F,@ADD-2,,42,8,47,12,);
B(B_F,sel,,49,1,54,6,);
B(B_VARIN,,CXadRopLenCorrec,47,2,49,4,);
B(B_VARIN,,MDlmlMaxHight1,25,14,27,16,);
B(B_VAROUT,,SRhg2RopeLength,54,2,56,4,);
B(B_VAROUT,,MDscRopeLenHg2,54,3,56,5,);
L(20,4,21,4);
L(19,5,21,5);
L(12,6,12,7);
L(12,7,13,7);
L(12,6,13,6);
L(20,2,20,4);
L(20,11,21,11);
L(19,12,21,12);
L(12,13,12,14);
L(12,14,13,14);
L(12,13,13,13);
L(20,9,20,11);
L(27,12,28,12);
L(26,11,28,11);
L(40,13,41,13);
L(41,11,41,13);
L(41,11,42,11);
L(41,10,42,10);
L(33,11,34,11);
L(34,11,34,13);
L(34,13,35,13);
L(41,4,41,10);
L(48,5,48,10);
L(47,10,48,10);
L(48,5,49,5);
L(26,4,49,4);
L(27,12,27,15);
L(54,3,54,4);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_F,sel,,12,1,17,6,);
B(B_VARIN,,FALSE,10,4,12,6,);
B(B_VAROUT,,SXMhg1ChanLay1_2,17,2,19,4,);
B(B_VARIN,,SXMhg1ChanLay1_2,10,3,12,5,);
B(B_VARIN,,SXMhg1ChanLay1_2,10,2,12,4,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_F,sel,,12,1,17,6,);
B(B_VARIN,,FALSE,10,4,12,6,);
B(B_VAROUT,,SXMhg1ChanLay3_4,17,2,19,4,);
B(B_VARIN,,SXMhg1ChanLay3_4,10,3,12,5,);
B(B_VARIN,,SXMhg1ChanLay3_4,10,2,12,4,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_F,sel,,12,1,17,6,);
B(B_VARIN,,FALSE,10,4,12,6,);
B(B_VAROUT,,SXMhg1ChanLay5_6,17,2,19,4,);
B(B_VARIN,,SXMhg1ChanLay5_6,10,3,12,5,);
B(B_VARIN,,SXMhg1ChanLay5_6,10,2,12,4,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_F,sel,,12,1,17,6,);
B(B_VARIN,,FALSE,10,4,12,6,);
B(B_VAROUT,,SXMhg2ChanLay1_2,17,2,19,4,);
B(B_VARIN,,SXMhg2ChanLay1_2,10,3,12,5,);
B(B_VARIN,,SXMhg2ChanLay1_2,10,2,12,4,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_F,sel,,12,1,17,6,);
B(B_VARIN,,FALSE,10,4,12,6,);
B(B_VAROUT,,SXMhg2ChanLay3_4,17,2,19,4,);
B(B_VARIN,,SXMhg2ChanLay3_4,10,3,12,5,);
B(B_VARIN,,SXMhg2ChanLay3_4,10,2,12,4,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_F,sel,,12,1,17,6,);
B(B_VARIN,,FALSE,10,4,12,6,);
B(B_VAROUT,,SXMhg2ChanLay5_6,17,2,19,4,);
B(B_VARIN,,SXMhg2ChanLay5_6,10,3,12,5,);
B(B_VARIN,,SXMhg2ChanLay5_6,10,2,12,4,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 5 ;
        NETWORK_BODY
B(B_COMMENT,,reeving,1,1,27,2,);
B(B_VARIN,,SRMhg1Reeving,10,3,12,5,);
B(B_VAROUT,,MDhg1Reeving,12,3,14,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VARIN,,SRMhg2Reeving,10,1,12,3,);
B(B_VAROUT,,MDhg2Reeving,12,1,14,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_F,sel,,19,5,24,10,);
B(B_VARIN,,MXlmlDeactive,10,2,12,4,);
B(B_VARIN,,MXenabHangLeader,10,3,12,5,);
B(B_F,limit,,26,4,32,9,);
B(B_VARIN,,1.0,23,3,25,5,);
B(B_VAROUT,,SRMhg1Reeving,32,5,34,7,);
B(B_VARIN,,22.0,23,10,25,12,);
B(B_F,@OR-2,,12,1,17,5,);
B(B_F,sel,,12,6,17,11,);
B(B_VARIN,,MDlmlReevingBoom,10,8,12,10,);
B(B_VARIN,,MXlmlFix_LuffJib,10,7,12,9,);
B(B_VARIN,,MDlmlReevingLuJi,10,9,12,11,);
B(B_VARIN,,SRMhg1Reeving,16,11,18,13,);
L(18,7,19,7);
L(17,8,19,8);
L(18,3,18,7);
L(25,6,26,6);
L(24,7,26,7);
L(25,4,25,6);
L(25,8,26,8);
L(25,8,25,11);
L(17,3,18,3);
L(18,9,19,9);
L(18,9,18,12);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 18 ;
        NETWORK_BODY
B(B_F,@OR-2,,18,3,23,7,);
B(B_F,sel,,24,7,29,12,);
B(B_VARIN,,SRMhg2Reeving,20,7,22,9,);
B(B_F,limit,,32,6,38,11,);
B(B_VARIN,,1.0,30,7,32,9,);
B(B_VAROUT,,SRMhg2Reeving,38,7,40,9,);
B(B_VARIN,,MXlmlFix_LuffJib,9,8,11,10,);
B(B_VARIN,,MXwinchSynchrX23,9,9,11,11,);
B(B_F,@AND-2,,11,7,16,11,N);
B(B_VARIN,,MDlmlReevingBoom,9,14,11,16,);
B(B_F,@DIV,,11,13,16,17,);
B(B_VARIN,,2.0,9,15,11,17,);
B(B_F,sel,,16,9,21,14,);
B(B_VARIN,,LXlmlCalculated,16,5,18,7,);
B(B_FB,R_TRIG,R_TRIG9,11,2,18,5,);
B(B_VARIN,,MXwinchSynchrX23,9,3,11,5,);
B(B_VARIN,,22.0,30,9,32,11,);
B(B_COMMENT,,Nur im Synchronlauf (nicht im Grab control) ,18,15,40,16,);
L(23,5,23,9);
L(23,9,24,9);
L(22,8,22,10);
L(22,10,24,10);
L(21,11,24,11);
L(29,9,32,9);
L(16,9,16,11);
L(11,12,11,15);
L(11,12,16,12);
L(16,13,16,15);
L(18,4,18,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_COMMENT,,Drehwerksgeber,1,1,62,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,MXsgAngSenPresen,8,1,10,3,);
B(B_VAROUT,,SXsgAngleSenPres,10,1,12,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VARIN,,MXsgAngSenDiff,8,1,10,3,);
B(B_VAROUT,,SXsgAngleSenDiff,10,1,12,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VARIN,,MDsgAngleByAna,8,1,10,3,);
B(B_VAROUT,,SRsgAngleAnalog,10,1,12,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VARIN,,MDsgAngleByInc,8,1,10,3,);
B(B_VAROUT,,SRsgAngleIncr,10,1,12,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VARIN,,MDsgAngeOffset,8,1,10,3,);
B(B_VAROUT,,SRsgAngleAnaOffs,10,1,12,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VARIN,,SXMsgSetSynchInc,8,1,10,3,);
B(B_VAROUT,,MXsgSetSynchInc,10,1,12,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_F,sel,,10,1,15,6,);
B(B_VAROUT,,SXMsgSetSynchInc,15,2,17,4,);
B(B_VARIN,,SXMsgSetSynchInc,8,3,10,5,);
B(B_VARIN,,FALSE,8,4,10,6,);
B(B_VARIN,,SXMsgSetSynchInc,8,2,10,4,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VARIN,,SXMsgSetToZero,8,1,10,3,);
B(B_VAROUT,,MXsgSetToZero,10,1,12,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_F,sel,,10,1,15,6,);
B(B_VAROUT,,SXMsgSetToZero,15,2,17,4,);
B(B_VARIN,,SXMsgSetToZero,8,3,10,5,);
B(B_VARIN,,FALSE,8,4,10,6,);
B(B_VARIN,,SXMsgSetToZero,8,2,10,4,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_COMMENT,,Einstellseite "settings 2",1,1,62,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_VAROUT,,SXadSettings,16,2,18,4,);
B(B_VARIN,,MXenablVibOperat,9,2,11,4,);
B(B_VARIN,,MXenablHamOperat,9,3,11,5,);
B(B_VARIN,,MXenabHyGrabOper,9,4,11,6,);
B(B_VARIN,,MXadLEHydrGrab,9,5,11,7,);
B(B_VARIN,,MXadSBHydrGrab,9,6,11,8,);
B(B_VARIN,,MXadSMHydrGrab,9,7,11,9,);
B(B_VARIN,,MXenabHyGrabHose,9,8,11,10,);
B(B_VARIN,,MXenabKelGrabOpe,9,9,11,11,);
B(B_VARIN,,MXenablDrillOper,9,10,11,12,);
B(B_F,@OR-9,,11,1,16,12,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_F,sel,,11,1,16,6,);
B(B_VAROUT,,MRvib1ClampPress,16,2,18,4,);
B(B_VARIN,,MXenablVibOperat,9,2,11,4,);
B(B_VARIN,,MRvib1ClampPress,9,3,11,5,);
B(B_VARIN,,SRMequipPress2,9,4,11,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_F,sel,,11,1,16,6,);
B(B_VAROUT,,MRvib1ExcTime,16,2,18,4,);
B(B_VARIN,,MXenablVibOperat,9,2,11,4,);
B(B_VARIN,,MRvib1ExcTime,9,3,11,5,);
B(B_VARIN,,SRMvibExcTime,9,4,11,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 22 ;
        NETWORK_BODY
B(B_FB,FB_demuxV010,FB_demux1,43,2,54,11,);
B(B_VAROUT,,MRvib1Volume,54,3,56,5,);
B(B_VAROUT,,MRham1Volume,54,4,56,6,);
B(B_VAROUT,,MRdrill1Volume,54,5,56,7,);
B(B_FB,FB_demuxV010,FB_demux2,43,12,54,21,);
B(B_VAROUT,,MRvib1Press,54,13,56,15,);
B(B_VAROUT,,MRham1Press,54,14,56,16,);
B(B_VAROUT,,MRdrill1Press,54,15,56,17,);
B(B_VARIN,,MRvib1Volume,41,3,43,5,);
B(B_VARIN,,MRham1Volume,41,4,43,6,);
B(B_VARIN,,MRdrill1Volume,41,5,43,7,);
B(B_VARIN,,MRvib1Press,41,13,43,15,);
B(B_VARIN,,MRham1Press,41,14,43,16,);
B(B_VARIN,,MRdrill1Press,41,15,43,17,);
B(B_VARIN,,SRMequipVolume1,41,8,43,10,);
B(B_VARIN,,SRMequipPress1,41,18,43,20,);
B(B_F,sel,,19,9,24,14,);
B(B_F,sel,,27,8,32,13,);
B(B_VARIN,,MXenablHamOperat,17,8,19,10,);
B(B_VARIN,,MXenablDrillOper,25,7,27,9,);
B(B_VARIN,,2,17,12,19,14,);
B(B_VARIN,,3,25,11,27,13,);
B(B_F,sel,,11,10,16,15,);
B(B_VARIN,,MXenablVibOperat,9,11,11,13,);
B(B_VARIN,,0,9,12,11,14,);
B(B_F,to_uint,,4,14,11,17,);
B(B_VARIN,,1,2,15,4,17,);
L(16,12,19,12);
L(24,11,27,11);
L(19,9,19,11);
L(27,8,27,10);
L(32,10,43,10);
L(32,10,32,20);
L(32,20,43,20);
L(11,14,11,16);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 42 ;
        NETWORK_BODY
B(B_VAROUT,,MRgrab1VolOpen,54,3,56,5,);
B(B_FB,FB_demuxV010,FB_demux3,43,2,54,11,);
B(B_FB,FB_demuxV010,FB_demux4,43,12,54,21,);
B(B_FB,FB_demuxV010,FB_demux5,43,22,54,31,);
B(B_FB,FB_demuxV010,FB_demux6,43,32,54,41,);
B(B_VAROUT,,MRgrab1PresClose,54,33,56,35,);
B(B_VAROUT,,MRgrab1PresOpen,54,23,56,25,);
B(B_VAROUT,,MRgrab1VolClose,54,13,56,15,);
B(B_VARIN,,MRgrab1VolOpen,41,3,43,5,);
B(B_VARIN,,MRgrab1VolClose,41,13,43,15,);
B(B_VARIN,,MRgrab1PresOpen,41,23,43,25,);
B(B_VARIN,,MRgrab1PresClose,41,33,43,35,);
B(B_VARIN,,MXenabHyGrabOper,9,2,11,4,);
B(B_VARIN,,MXadLEHydrGrab,9,3,11,5,);
B(B_VARIN,,MXadSBHydrGrab,9,4,11,6,);
B(B_VARIN,,MXadSMHydrGrab,9,5,11,7,);
B(B_VARIN,,MXenabHyGrabHose,9,6,11,8,);
B(B_VARIN,,MXenabKelGrabOpe,9,7,11,9,);
B(B_F,@OR-6,,11,1,16,9,);
B(B_F,sel,,16,8,21,13,);
B(B_VARIN,,0,14,10,16,12,);
B(B_F,to_uint,,9,12,16,15,);
B(B_VARIN,,1,7,13,9,15,);
B(B_VARIN,,SRMgrabVolOpen,41,8,43,10,);
B(B_VARIN,,SRMgrabVolClose,41,18,43,20,);
B(B_VARIN,,SRMgrabPresOpen,41,28,43,30,);
B(B_VARIN,,SRMgrabPresClose,41,38,43,40,);
L(32,10,43,10);
L(32,20,43,20);
L(32,30,43,30);
L(32,40,43,40);
L(32,10,32,40);
L(16,3,16,10);
L(21,10,32,10);
L(16,12,16,14);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_COMMENT,,Betriebsstunden,1,1,62,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VARIN,,SXMresetFuelCons,8,1,10,3,);
B(B_VAROUT,,MXresetFuelCon,10,1,12,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_F,sel,,10,1,15,6,);
B(B_VAROUT,,SXMresetFuelCons,15,2,17,4,);
B(B_VARIN,,SXMresetFuelCons,8,3,10,5,);
B(B_VARIN,,FALSE,8,4,10,6,);
B(B_VARIN,,SXMresetFuelCons,8,2,10,4,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_F,udint_to_real,,10,1,21,4,);
B(B_VARIN,,MDfuelConAbs_Lit,8,2,10,4,);
B(B_VAROUT,,SRfuelConsAbs,21,2,23,4,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_F,udint_to_real,,10,1,21,4,);
B(B_VARIN,,MDfuelConRel_Lit,8,2,10,4,);
B(B_VAROUT,,SRfuelConsRel,21,2,23,4,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VAROUT,,SRfuelConsPhAbs,10,1,12,3,);
B(B_VARIN,,MDfuelConAbs_LpH,8,1,10,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VAROUT,,SRfuelConsPhRel,10,1,12,3,);
B(B_VARIN,,MDfuelConRel_LpH,8,1,10,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VARIN,,SXMresetOpHour,8,1,10,3,);
B(B_VAROUT,,MXresetOpHour,10,1,12,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_F,sel,,10,1,15,6,);
B(B_VAROUT,,SXMresetOpHour,15,2,17,4,);
B(B_VARIN,,SXMresetOpHour,8,3,10,5,);
B(B_VARIN,,FALSE,8,4,10,6,);
B(B_VARIN,,SXMresetOpHour,8,2,10,4,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_VARIN,,QXhg1Clutch,8,4,10,6,);
B(B_F,@OR-3,,10,1,15,6,);
B(B_VAROUT,,SXophHg1Run,15,2,17,4,);
B(B_VARIN,,QXhg1BrakeFastSp,8,3,10,5,);
B(B_VARIN,,QXhg1BrakeNormal,8,2,10,4,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VAROUT,,SRophHg1Abs,10,1,12,3,);
B(B_VARIN,,MDhg1OperatHour,8,1,10,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VAROUT,,SRophHg1Rel,10,1,12,3,);
B(B_VARIN,,MDhg1OperHourRel,8,1,10,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_VARIN,,QXhg2Clutch,8,4,10,6,);
B(B_F,@OR-3,,10,1,15,6,);
B(B_VAROUT,,SXophHg2Run,15,2,17,4,);
B(B_VARIN,,QXhg2BrakeFastSp,8,3,10,5,);
B(B_VARIN,,QXhg2BrakeNormal,8,2,10,4,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VAROUT,,SRophHg2Abs,10,1,12,3,);
B(B_VARIN,,MDhg2OperatHour,8,1,10,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VAROUT,,SRophHg2Rel,10,1,12,3,);
B(B_VARIN,,MDhg2OperHourRel,8,1,10,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VAROUT,,SXophLg1Run,10,1,12,3,);
B(B_VARIN,,QXlgBrake,8,1,10,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VAROUT,,SRophLg1Abs,10,1,12,3,);
B(B_VARIN,,MDlgOperatHour,8,1,10,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VAROUT,,SRophLg1Rel,10,1,12,3,);
B(B_VARIN,,MDlgOperHourRel,8,1,10,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_F,@AND-2,,10,3,15,7,N);
B(B_VAROUT,,SXophAuxAct,15,4,17,6,);
B(B_VAROUT,,SXophLg2Act,10,1,12,3,);
B(B_VARIN,,MXLiftCrane,8,1,10,3,);
B(B_VARIN,,CXauxWinch,8,5,10,7,);
L(10,2,10,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VAROUT,,SXophLg2Run,10,1,12,3,);
B(B_VARIN,,QXlg2Brake,8,1,10,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VAROUT,,SRophLg2Abs,10,1,12,3,);
B(B_VARIN,,MDlg2OperatHour,8,1,10,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VAROUT,,SRophLg2Rel,10,1,12,3,);
B(B_VARIN,,MDlg2OperHourRel,8,1,10,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VAROUT,,SXophLg3Act,10,1,12,3,);
B(B_VARIN,,MXderrickPossib,8,1,10,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VAROUT,,SXophLg3Run,10,1,12,3,);
B(B_VARIN,,QXderrickWiBrake,8,1,10,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VAROUT,,SRophLg3Abs,10,1,12,3,);
B(B_VARIN,,MDlg3OperatHour,8,1,10,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VAROUT,,SRophLg3Rel,10,1,12,3,);
B(B_VARIN,,MDlg3OperHourRel,8,1,10,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VAROUT,,SXophSgRun,10,1,12,3,);
B(B_VARIN,,QXsgBrake,8,1,10,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VAROUT,,SRophSgAbs,10,1,12,3,);
B(B_VARIN,,MDsgOperatHour,8,1,10,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VAROUT,,SRophSgRel,10,1,12,3,);
B(B_VARIN,,MDsgOperHourRel,8,1,10,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_VARIN,,MXswitTravelGear,8,2,10,4,);
B(B_F,@AND-2,,10,1,15,5,0N);
B(B_VARIN,,MXstopAllFunctio,8,3,10,5,);
B(B_VAROUT,,SXophTgRun,15,2,17,4,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VAROUT,,SRophTgAbs,10,1,12,3,);
B(B_VARIN,,MDtgOperatHour,8,1,10,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VAROUT,,SRophTgRel,10,1,12,3,);
B(B_VARIN,,MDtgOperHourRel,8,1,10,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VAROUT,,SXophEngRun,10,1,12,3,);
B(B_VARIN,,MXminEngineSpeed,8,1,10,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VAROUT,,SRophEngAbs,10,1,12,3,);
B(B_VARIN,,MDengOperatHour,8,1,10,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VAROUT,,SRophEngRel,10,1,12,3,);
B(B_VARIN,,MDengOperHourRel,8,1,10,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VAROUT,,SXophAdhRun,10,1,12,3,);
B(B_VARIN,,MXaddHydrActive,8,1,10,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VAROUT,,SXophAdhAct,10,1,12,3,);
B(B_VARIN,,MXaddHydrPresel,8,1,10,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VAROUT,,SRophAdhAbs,10,1,12,3,);
B(B_VARIN,,MDadhOperHour,8,1,10,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VAROUT,,SRophAdhRel,10,1,12,3,);
B(B_VARIN,,MDadhOperHourRel,8,1,10,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 24 ;
        NETWORK_BODY
B(B_F,sel,,23,8,28,13,);
B(B_VARIN,,0.0,19,10,21,12,);
B(B_F,sel,,38,7,43,12,);
B(B_F,@EQ-2,,31,4,36,8,);
B(B_F,sel,,53,6,58,11,);
B(B_F,@EQ-2,,46,3,51,7,);
B(B_F,sel,,68,5,73,10,);
B(B_F,@EQ-2,,61,2,66,6,);
B(B_VARIN,,MDgrbOperHour,19,11,21,13,);
B(B_VARIN,,MDddOperHour,34,10,36,12,);
B(B_VARIN,,4,59,4,61,6,);
B(B_VARIN,,3,44,5,46,7,);
B(B_VARIN,,11,29,6,31,8,);
B(B_VARIN,,MDvibOperHour,49,9,51,11,);
B(B_VARIN,,MDhamOperHour,64,8,66,10,);
B(B_VAROUT,,SRophOpModeAbs,73,6,75,8,);
B(B_VARIN,,5,7,5,9,7,);
B(B_VARIN,,10,7,9,9,11,);
B(B_F,@GE-2,,11,3,16,7,);
B(B_F,@LE-2,,11,7,16,11,);
B(B_F,@AND-2,,16,6,21,10,);
B(B_VARIN,,MWstorActualMode,8,1,10,3,);
B(B_F,sel,,23,13,28,18,);
B(B_VARIN,,0.0,19,15,21,17,);
B(B_F,sel,,38,12,43,17,);
B(B_F,sel,,53,11,58,16,);
B(B_F,sel,,68,10,73,15,);
B(B_VARIN,,MDgrbOperHourRel,19,16,21,18,);
B(B_VARIN,,MDvibOperHourRel,49,14,51,16,);
B(B_VAROUT,,SRophOpModeRel,73,11,75,13,);
B(B_VARIN,,MDhamOperHourRel,64,13,66,15,);
B(B_VARIN,,MDddOperHourRel,34,15,36,17,);
B(B_F,sel,,23,18,28,23,);
B(B_VARIN,,FALSE,19,20,21,22,);
B(B_F,sel,,38,17,43,22,);
B(B_F,sel,,53,16,58,21,);
B(B_F,sel,,68,15,73,20,);
B(B_VARIN,,MXhydrGrabActive,19,21,21,23,);
B(B_VARIN,,MXvibratWorking,49,19,51,21,);
B(B_VAROUT,,SXophOpModeRun,73,16,75,18,);
B(B_VARIN,,MXhammerWorking,64,18,66,20,);
B(B_VARIN,,MXddEnabPowStage,34,20,36,22,);
L(31,2,31,6);
L(46,2,46,5);
L(61,2,61,4);
L(58,8,68,8);
L(43,9,53,9);
L(28,10,38,10);
L(9,6,11,6);
L(9,10,11,10);
L(10,9,11,9);
L(10,2,10,9);
L(10,5,11,5);
L(10,2,61,2);
L(16,5,16,8);
L(67,7,68,7);
L(66,4,67,4);
L(51,5,52,5);
L(52,8,53,8);
L(36,6,37,6);
L(37,9,38,9);
L(21,8,22,8);
L(22,10,23,10);
L(21,11,23,11);
L(21,12,23,12);
L(36,11,38,11);
L(51,10,53,10);
L(66,9,68,9);
L(58,13,68,13);
L(43,14,53,14);
L(28,15,38,15);
L(66,14,68,14);
L(51,15,53,15);
L(36,16,38,16);
L(21,16,23,16);
L(21,17,23,17);
L(22,15,23,15);
L(37,14,38,14);
L(52,13,53,13);
L(67,12,68,12);
L(58,18,68,18);
L(43,19,53,19);
L(28,20,38,20);
L(66,19,68,19);
L(51,20,53,20);
L(36,21,38,21);
L(21,21,23,21);
L(21,22,23,22);
L(22,20,23,20);
L(37,19,38,19);
L(67,17,68,17);
L(22,8,22,20);
L(37,6,37,19);
L(52,5,52,18);
L(52,18,53,18);
L(67,4,67,17);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_COMMENT,,Arbeitsbereichsbegrenzung,1,1,62,3,);
B(B_VARIN,,CXwalPresel,8,4,10,6,);
B(B_VAROUT,,SXwalPresel,10,4,12,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 5 ;
        NETWORK_BODY
B(B_VARIN,,MRwalDistToStop,9,3,11,5,);
B(B_VAROUT,,SRwalDistToStop,11,3,13,5,);
B(B_COMMENT,,set stop bits,1,1,41,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VARIN,,MXwalLgMin,9,1,11,3,);
B(B_VAROUT,,SXwalLgMin,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VARIN,,MXwalLgMax,9,1,11,3,);
B(B_VAROUT,,SXwalLgMax,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VARIN,,MXwalLg2Min,9,1,11,3,);
B(B_VAROUT,,SXwalLg2Min,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VARIN,,MXwalLg2Max,9,1,11,3,);
B(B_VAROUT,,SXwalLg2Max,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VARIN,,MXwalSgStopLeft,9,1,11,3,);
B(B_VAROUT,,SXwalSgLeft,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VARIN,,MXwalSgStopRight,9,1,11,3,);
B(B_VAROUT,,SXwalSgRight,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 5 ;
        NETWORK_BODY
B(B_VARIN,,MDsgAngle,9,3,11,5,);
B(B_VAROUT,,SRsgSuperstrAng,11,3,13,5,);
B(B_COMMENT,,slewing gear,1,1,41,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_F,@OR-2,,11,1,16,5,);
B(B_VAROUT,,MXwalSlewAct,16,2,18,4,);
B(B_F,sel,,11,5,16,10,);
B(B_VAROUT,,SXMwalSlewAct,16,6,18,8,);
B(B_VARIN,,SXMwalSlewAct,9,7,11,9,);
B(B_VARIN,,TRUE,9,8,11,10,);
B(B_VARIN,,MXlmlBlockCrawle,9,3,11,5,);
B(B_VARIN,,SXMwalSlewAct,9,2,11,4,);
L(11,4,11,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_F,sel,,16,3,21,8,);
B(B_VARIN,,MDsgAngle,14,6,16,8,);
B(B_VARIN,,MDsgLimitLeft,14,5,16,7,);
B(B_F,@AND-2,,11,1,16,5,0N);
B(B_VARIN,,MXsgEnPowStage,9,3,11,5,);
B(B_VARIN,,SXMwalSetSgLeft,9,2,11,4,);
B(B_F,sel,,30,2,35,7,);
B(B_VARIN,,MXlmlBlockCrawle,28,3,30,5,);
B(B_VARIN,,MDlmlStopSgLeft,28,5,30,7,);
B(B_VAROUT,,MDsgLimitLeft,35,3,37,5,);
B(B_VAROUT,,SRwalSlewLeft,35,4,37,6,);
L(21,5,30,5);
L(16,3,16,5);
L(35,4,35,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_F,sel,,16,3,21,8,);
B(B_VARIN,,MDsgAngle,14,6,16,8,);
B(B_VARIN,,MDsgLimitRight,14,5,16,7,);
B(B_F,@AND-2,,11,1,16,5,0N);
B(B_VARIN,,MXsgEnPowStage,9,3,11,5,);
B(B_VARIN,,SXMwalSetSgRight,9,2,11,4,);
B(B_F,sel,,30,2,35,7,);
B(B_VARIN,,MXlmlBlockCrawle,28,3,30,5,);
B(B_VARIN,,MDlmlStopSgRight,28,5,30,7,);
B(B_VAROUT,,MDsgLimitRight,35,3,37,5,);
B(B_VAROUT,,SRwalSlewRight,35,4,37,6,);
L(21,5,30,5);
L(16,3,16,5);
L(35,4,35,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_F,sel,,18,3,23,8,);
B(B_VAROUT,,SXMwalSlewAct,23,4,25,6,);
B(B_VARIN,,SXMwalSlewAct,16,5,18,7,);
B(B_VARIN,,FALSE,16,6,18,8,);
B(B_VARIN,,MXlmlBlockCrawle,9,3,11,5,);
B(B_FB,F_TRIG,F_TRIG3,11,2,18,5,);
L(18,4,18,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_F,sel,,11,1,16,6,);
B(B_VARIN,,FALSE,9,4,11,6,);
B(B_VAROUT,,SXMwalSetSgLeft,16,2,18,4,);
B(B_VARIN,,SXMwalSetSgLeft,9,3,11,5,);
B(B_VARIN,,SXMwalSetSgLeft,9,2,11,4,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_F,sel,,11,1,16,6,);
B(B_VARIN,,FALSE,9,4,11,6,);
B(B_VAROUT,,SXMwalSetSgRight,16,2,18,4,);
B(B_VARIN,,SXMwalSetSgRight,9,3,11,5,);
B(B_VARIN,,SXMwalSetSgRight,9,2,11,4,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_VARIN,,MDlmlRadiusMBoom,9,3,11,5,);
B(B_VAROUT,,SRactRadMaBo,11,3,13,5,);
B(B_COMMENT,,radius limitaion,1,1,41,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_F,limit,,11,1,17,6,);
B(B_VAROUT,,SRactRadJib,17,2,19,4,);
B(B_VARIN,,MDlmlRadiusLJib,9,3,11,5,);
B(B_VARIN,,MDlmlRadiusMBoom,9,2,11,4,);
L(11,4,11,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VARIN,,SXMwalRadMaBoAct,9,1,11,3,);
B(B_VAROUT,,MXwalRadMaBoAct,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VARIN,,SXMwalRadLJibAct,9,1,11,3,);
B(B_VAROUT,,MXwalRadLJibAct,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VARIN,,SXMwalHigMaBoAct,9,1,11,3,);
B(B_VAROUT,,MXwalHigMaBoAct,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VARIN,,SXMwalHigLJibAct,9,1,11,3,);
B(B_VAROUT,,MXwalHigLJibAct,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_VAROUT,,MDradiusLimitMaB,16,2,18,4,);
B(B_F,sel,,11,1,16,6,);
B(B_VARIN,,MDradiusLimitMaB,9,3,11,5,);
B(B_VARIN,,SXMwalSetMaRaMaB,9,2,11,4,);
B(B_VARIN,,MDlmlRadiusMBoom,9,4,11,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_VAROUT,,MDhightLimitMaB,16,2,18,4,);
B(B_F,sel,,11,1,16,6,);
B(B_VARIN,,MDhightLimitMaB,9,3,11,5,);
B(B_VARIN,,SXMwalSetMiRaMaB,9,2,11,4,);
B(B_VARIN,,MDlmlRadiusMBoom,9,4,11,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_F,sel,,21,5,26,10,);
B(B_VARIN,,MDradiusLimitJib,19,7,21,9,);
B(B_VARIN,,MDlmlRadiusLJib,19,8,21,10,);
B(B_F,@OR-2,,16,3,21,7,);
B(B_VARIN,,SXMwalSetMaRaLuJ,14,5,16,7,);
B(B_F,@AND-2,,11,1,16,5,);
B(B_VARIN,,SXMwalSetMaRaMaB,9,2,11,4,);
B(B_VARIN,,MXlmlFixedJibEna,9,3,11,5,);
B(B_F,limit,,26,4,32,9,);
B(B_VAROUT,,MDradiusLimitJib,32,5,34,7,);
B(B_VARIN,,MDradiusLimitMaB,24,1,26,3,);
L(21,5,21,7);
L(16,3,16,5);
L(26,7,26,8);
L(26,2,26,6);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_F,sel,,21,5,26,10,);
B(B_VARIN,,MDhightLimitJib,19,7,21,9,);
B(B_VARIN,,MDlmlRadiusLJib,19,8,21,10,);
B(B_F,@OR-2,,16,3,21,7,);
B(B_VARIN,,SXMwalSetMiRaLuJ,14,5,16,7,);
B(B_F,@AND-2,,11,1,16,5,);
B(B_VARIN,,SXMwalSetMiRaMaB,9,2,11,4,);
B(B_VARIN,,MXlmlFixedJibEna,9,3,11,5,);
B(B_F,limit,,26,4,32,9,);
B(B_VARIN,,MDhightLimitMaB,24,1,26,3,);
B(B_VAROUT,,MDhightLimitJib,32,5,34,7,);
L(21,5,21,7);
L(16,3,16,5);
L(26,7,26,8);
L(26,2,26,6);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VAROUT,,SRwalMaxRadMaBo,11,1,13,3,);
B(B_VARIN,,MDradiusLimitMaB,9,1,11,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VAROUT,,SRwalMinRadMaBo,11,1,13,3,);
B(B_VARIN,,MDhightLimitMaB,9,1,11,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VAROUT,,SRwalMaxRadJib,11,1,13,3,);
B(B_VARIN,,MDradiusLimitJib,9,1,11,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VAROUT,,SRwalMinRadJib,11,1,13,3,);
B(B_VARIN,,MDhightLimitJib,9,1,11,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 21 ;
        NETWORK_BODY
B(B_F,sel,,21,10,26,15,);
B(B_F,sel,,21,5,26,10,);
B(B_VARIN,,MXlmlFix_LuffJib,19,6,21,8,);
B(B_F,sel,,26,4,31,9,);
B(B_VAROUT,,SRwalMaxRadius,31,5,33,7,);
B(B_VARIN,,MDradiusLimitMaB,19,7,21,9,);
B(B_VARIN,,MDradiusLimitJib,19,8,21,10,);
B(B_F,@AND-2,,21,1,26,5,NN);
B(B_VARIN,,SXMwalRadMaBoAct,19,2,21,4,);
B(B_VARIN,,SXMwalRadLJibAct,19,3,21,5,);
B(B_VAROUT,,MRwalMaxRadius,31,6,33,8,);
B(B_VARIN,,MDlmlLenJib,14,18,16,20,);
B(B_F,@ADD-2,,16,16,21,20,);
B(B_F,@ADD-2,,11,13,16,17,);
B(B_VARIN,,MDlmlLenMainBoom,9,14,11,16,);
B(B_VARIN,,MDlmlOffsetRod,9,15,11,17,);
B(B_VARIN,,MXlmlFix_LuffJib,19,11,21,13,);
L(26,3,26,6);
L(26,8,26,12);
L(31,6,31,7);
L(21,14,21,18);
L(16,13,21,13);
L(16,13,16,18);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_F,sel,,12,1,17,6,N);
B(B_VARIN,,FALSE,10,4,12,6,);
B(B_VAROUT,,SXMwalHigLJibAct,17,2,19,4,);
B(B_VARIN,,SXMwalHigLJibAct,10,3,12,5,);
B(B_VARIN,,MXlmlLuffJibEnab,10,2,12,4,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_F,sel,,12,1,17,6,N);
B(B_VARIN,,FALSE,10,4,12,6,);
B(B_VAROUT,,SXMwalRadLJibAct,17,2,19,4,);
B(B_VARIN,,SXMwalRadLJibAct,10,3,12,5,);
B(B_VARIN,,MXlmlLuffJibEnab,10,2,12,4,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_F,sel,,12,1,17,6,);
B(B_VARIN,,FALSE,10,4,12,6,);
B(B_VAROUT,,SXMwalSetMaRaMaB,17,2,19,4,);
B(B_VARIN,,SXMwalSetMaRaMaB,10,3,12,5,);
B(B_VARIN,,SXMwalSetMaRaMaB,10,2,12,4,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_F,sel,,12,1,17,6,);
B(B_VARIN,,FALSE,10,4,12,6,);
B(B_VAROUT,,SXMwalSetMiRaMaB,17,2,19,4,);
B(B_VARIN,,SXMwalSetMiRaMaB,10,3,12,5,);
B(B_VARIN,,SXMwalSetMiRaMaB,10,2,12,4,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_F,sel,,12,1,17,6,);
B(B_VARIN,,FALSE,10,4,12,6,);
B(B_VAROUT,,SXMwalSetMaRaLuJ,17,2,19,4,);
B(B_VARIN,,SXMwalSetMaRaLuJ,10,3,12,5,);
B(B_VARIN,,SXMwalSetMaRaLuJ,10,2,12,4,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_F,sel,,12,1,17,6,);
B(B_VARIN,,FALSE,10,4,12,6,);
B(B_VAROUT,,SXMwalSetMiRaLuJ,17,2,19,4,);
B(B_VARIN,,SXMwalSetMiRaLuJ,10,3,12,5,);
B(B_VARIN,,SXMwalSetMiRaLuJ,10,2,12,4,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_VARIN,,SXMwalLinMaBoAct,9,3,11,5,);
B(B_VAROUT,,MXwalLinMaBoAct,11,3,13,5,);
B(B_COMMENT,,line limitation main boom,1,1,41,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_VAROUT,,MRwalLine1P1RadM,19,2,21,4,);
B(B_F,sel,,14,1,19,6,);
B(B_F,sel,,14,6,19,11,);
B(B_VAROUT,,MRwalLine1P1AngM,19,7,21,9,);
B(B_VARIN,,MDsgAngle,12,9,14,11,);
B(B_VARIN,,MRwalLine1P1AngM,12,8,14,10,);
B(B_VARIN,,MDlmlRadiusMBoom,10,4,12,6,);
B(B_VARIN,,MRwalLine1P1RadM,10,3,12,5,);
B(B_VARIN,,SXMwalSetLin1P1M,11,2,13,4,);
L(12,5,14,5);
L(12,4,14,4);
L(13,3,14,3);
L(13,3,13,8);
L(13,8,14,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_VAROUT,,MRwalLine1P2RadM,19,2,21,4,);
B(B_F,sel,,14,1,19,6,);
B(B_F,sel,,14,6,19,11,);
B(B_VAROUT,,MRwalLine1P2AngM,19,7,21,9,);
B(B_VARIN,,MDsgAngle,12,9,14,11,);
B(B_VARIN,,MRwalLine1P2AngM,12,8,14,10,);
B(B_VARIN,,MDlmlRadiusMBoom,10,4,12,6,);
B(B_VARIN,,MRwalLine1P2RadM,10,3,12,5,);
B(B_VARIN,,SXMwalSetLin1P2M,11,2,13,4,);
L(12,5,14,5);
L(12,4,14,4);
L(13,3,14,3);
L(13,3,13,8);
L(13,8,14,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VAROUT,,SRwalLi1Int1AngM,13,1,15,3,);
B(B_VARIN,,MRwalLi1Int1AngM,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VAROUT,,SRwalLi1Int2AngM,13,1,15,3,);
B(B_VARIN,,MRwalLi1Int2AngM,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_VAROUT,,MRwalLine2P1RadM,19,2,21,4,);
B(B_F,sel,,14,1,19,6,);
B(B_F,sel,,14,6,19,11,);
B(B_VAROUT,,MRwalLine2P1AngM,19,7,21,9,);
B(B_VARIN,,MDsgAngle,12,9,14,11,);
B(B_VARIN,,MRwalLine2P1AngM,12,8,14,10,);
B(B_VARIN,,MDlmlRadiusMBoom,10,4,12,6,);
B(B_VARIN,,MRwalLine2P1RadM,10,3,12,5,);
B(B_VARIN,,SXMwalSetLin2P1M,11,2,13,4,);
L(12,5,14,5);
L(12,4,14,4);
L(13,3,14,3);
L(13,3,13,8);
L(13,8,14,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_VAROUT,,MRwalLine2P2RadM,19,2,21,4,);
B(B_F,sel,,14,1,19,6,);
B(B_F,sel,,14,6,19,11,);
B(B_VAROUT,,MRwalLine2P2AngM,19,7,21,9,);
B(B_VARIN,,MDsgAngle,12,9,14,11,);
B(B_VARIN,,MRwalLine2P2AngM,12,8,14,10,);
B(B_VARIN,,MDlmlRadiusMBoom,10,4,12,6,);
B(B_VARIN,,MRwalLine2P2RadM,10,3,12,5,);
B(B_VARIN,,SXMwalSetLin2P2M,11,2,13,4,);
L(12,5,14,5);
L(12,4,14,4);
L(13,3,14,3);
L(13,3,13,8);
L(13,8,14,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VAROUT,,SRwalLi2Int1AngM,13,1,15,3,);
B(B_VARIN,,MRwalLi2Int1AngM,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VAROUT,,SRwalLi2Int2AngM,13,1,15,3,);
B(B_VARIN,,MRwalLi2Int2AngM,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_VARIN,,SXMwalLinLJibAct,9,3,11,5,);
B(B_VAROUT,,MXwalLinLuJiAct,11,3,13,5,);
B(B_COMMENT,,line limitation luffing jib,1,1,41,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_VAROUT,,MRwalLine1P1RadJ,19,2,21,4,);
B(B_F,sel,,14,1,19,6,);
B(B_F,sel,,14,6,19,11,);
B(B_VAROUT,,MRwalLine1P1AngJ,19,7,21,9,);
B(B_VARIN,,MDsgAngle,12,9,14,11,);
B(B_VARIN,,MRwalLine1P1AngJ,12,8,14,10,);
B(B_VARIN,,MDlmlRadiusLJib,10,4,12,6,);
B(B_VARIN,,MRwalLine1P1RadJ,10,3,12,5,);
B(B_VARIN,,SXMwalSetLin1P1J,11,2,13,4,);
L(12,5,14,5);
L(12,4,14,4);
L(13,3,14,3);
L(13,3,13,8);
L(13,8,14,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_VAROUT,,MRwalLine1P2RadJ,19,2,21,4,);
B(B_F,sel,,14,1,19,6,);
B(B_F,sel,,14,6,19,11,);
B(B_VAROUT,,MRwalLine1P2AngJ,19,7,21,9,);
B(B_VARIN,,MDsgAngle,12,9,14,11,);
B(B_VARIN,,MRwalLine1P2AngJ,12,8,14,10,);
B(B_VARIN,,MDlmlRadiusLJib,10,4,12,6,);
B(B_VARIN,,MRwalLine1P2RadJ,10,3,12,5,);
B(B_VARIN,,SXMwalSetLin1P2J,11,2,13,4,);
L(12,5,14,5);
L(12,4,14,4);
L(13,3,14,3);
L(13,3,13,8);
L(13,8,14,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VAROUT,,SRwalLi1Int1AngJ,13,1,15,3,);
B(B_VARIN,,MRwalLi1Int1AngJ,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VAROUT,,SRwalLi1Int2AngJ,13,1,15,3,);
B(B_VARIN,,MRwalLi1Int2AngJ,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_VAROUT,,MRwalLine2P1RadJ,19,2,21,4,);
B(B_F,sel,,14,1,19,6,);
B(B_F,sel,,14,6,19,11,);
B(B_VAROUT,,MRwalLine2P1AngJ,19,7,21,9,);
B(B_VARIN,,MDsgAngle,12,9,14,11,);
B(B_VARIN,,MRwalLine2P1AngJ,12,8,14,10,);
B(B_VARIN,,MDlmlRadiusLJib,10,4,12,6,);
B(B_VARIN,,MRwalLine2P1RadJ,10,3,12,5,);
B(B_VARIN,,SXMwalSetLin2P1J,11,2,13,4,);
L(12,5,14,5);
L(12,4,14,4);
L(13,3,14,3);
L(13,3,13,8);
L(13,8,14,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_VAROUT,,MRwalLine2P2RadJ,19,2,21,4,);
B(B_F,sel,,14,1,19,6,);
B(B_F,sel,,14,6,19,11,);
B(B_VAROUT,,MRwalLine2P2AngJ,19,7,21,9,);
B(B_VARIN,,MDsgAngle,12,9,14,11,);
B(B_VARIN,,MRwalLine2P2AngJ,12,8,14,10,);
B(B_VARIN,,MDlmlRadiusLJib,10,4,12,6,);
B(B_VARIN,,MRwalLine2P2RaDJ,10,3,12,5,);
B(B_VARIN,,SXMwalSetLin2P2J,11,2,13,4,);
L(12,5,14,5);
L(12,4,14,4);
L(13,3,14,3);
L(13,3,13,8);
L(13,8,14,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VAROUT,,SRwalLi2Int1AngJ,13,1,15,3,);
B(B_VARIN,,MRwalLi2Int1AngJ,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VAROUT,,SRwalLi2Int2AngJ,13,1,15,3,);
B(B_VARIN,,MRwalLi2Int2AngJ,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_F,sel,,12,1,17,6,N);
B(B_VARIN,,FALSE,10,4,12,6,);
B(B_VAROUT,,SXMwalLinLJibAct,17,2,19,4,);
B(B_VARIN,,SXMwalLinLJibAct,10,3,12,5,);
B(B_VARIN,,MXlmlLuffJibEnab,10,2,12,4,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_F,sel,,12,1,17,6,);
B(B_VARIN,,FALSE,10,4,12,6,);
B(B_VAROUT,,SXMwalSetLin1P1M,17,2,19,4,);
B(B_VARIN,,SXMwalSetLin1P1M,10,3,12,5,);
B(B_VARIN,,SXMwalSetLin1P1M,10,2,12,4,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_F,sel,,12,1,17,6,);
B(B_VARIN,,FALSE,10,4,12,6,);
B(B_VAROUT,,SXMwalSetLin1P2M,17,2,19,4,);
B(B_VARIN,,SXMwalSetLin1P2M,10,3,12,5,);
B(B_VARIN,,SXMwalSetLin1P2M,10,2,12,4,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_F,sel,,12,1,17,6,);
B(B_VARIN,,FALSE,10,4,12,6,);
B(B_VAROUT,,SXMwalSetLin2P1M,17,2,19,4,);
B(B_VARIN,,SXMwalSetLin2P1M,10,3,12,5,);
B(B_VARIN,,SXMwalSetLin2P1M,10,2,12,4,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_F,sel,,12,1,17,6,);
B(B_VARIN,,FALSE,10,4,12,6,);
B(B_VAROUT,,SXMwalSetLin2P2M,17,2,19,4,);
B(B_VARIN,,SXMwalSetLin2P2M,10,3,12,5,);
B(B_VARIN,,SXMwalSetLin2P2M,10,2,12,4,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_F,sel,,12,1,17,6,);
B(B_VARIN,,FALSE,10,4,12,6,);
B(B_VAROUT,,SXMwalSetLin1P1J,17,2,19,4,);
B(B_VARIN,,SXMwalSetLin1P1J,10,3,12,5,);
B(B_VARIN,,SXMwalSetLin1P1J,10,2,12,4,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_F,sel,,12,1,17,6,);
B(B_VARIN,,FALSE,10,4,12,6,);
B(B_VAROUT,,SXMwalSetLin1P2J,17,2,19,4,);
B(B_VARIN,,SXMwalSetLin1P2J,10,3,12,5,);
B(B_VARIN,,SXMwalSetLin1P2J,10,2,12,4,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_F,sel,,12,1,17,6,);
B(B_VARIN,,FALSE,10,4,12,6,);
B(B_VAROUT,,SXMwalSetLin2P1J,17,2,19,4,);
B(B_VARIN,,SXMwalSetLin2P1J,10,3,12,5,);
B(B_VARIN,,SXMwalSetLin2P1J,10,2,12,4,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_F,sel,,12,1,17,6,);
B(B_VARIN,,FALSE,10,4,12,6,);
B(B_VAROUT,,SXMwalSetLin2P2J,17,2,19,4,);
B(B_VARIN,,SXMwalSetLin2P2J,10,3,12,5,);
B(B_VARIN,,SXMwalSetLin2P2J,10,2,12,4,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_VARIN,,SXMwalSecMaBoAct,9,3,11,5,);
B(B_VAROUT,,MXwalSecMaBoAct,11,3,13,5,);
B(B_COMMENT,,sector limitaion,1,1,41,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,SXMwalSecLJibAct,9,1,11,3,);
B(B_VAROUT,,MXwalSecLuJiAct,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_VAROUT,,MRwalSect1P1RadM,19,2,21,4,);
B(B_F,sel,,14,1,19,6,);
B(B_F,sel,,14,6,19,11,);
B(B_VAROUT,,MRwalSect1P1AngM,19,7,21,9,);
B(B_VARIN,,MDsgAngle,12,9,14,11,);
B(B_VARIN,,MRwalSect1P1AngM,12,8,14,10,);
B(B_VARIN,,MDlmlRadiusMBoom,10,4,12,6,);
B(B_VARIN,,MRwalSect1P1RadM,10,3,12,5,);
B(B_VARIN,,SXMwalSetSec1P1M,11,2,13,4,);
B(B_VAROUT,,SRwalSect1P1RadM,19,3,21,5,);
B(B_VAROUT,,SRwalSect1P1AngM,19,8,21,10,);
L(12,5,14,5);
L(12,4,14,4);
L(13,3,14,3);
L(13,3,13,8);
L(13,8,14,8);
L(19,3,19,4);
L(19,8,19,9);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_VAROUT,,MRwalSect1P2RadM,19,2,21,4,);
B(B_F,sel,,14,1,19,6,);
B(B_F,sel,,14,6,19,11,);
B(B_VAROUT,,MRwalSect1P2AngM,19,7,21,9,);
B(B_VARIN,,MDsgAngle,12,9,14,11,);
B(B_VARIN,,MRwalSect1P2AngM,12,8,14,10,);
B(B_VARIN,,MDlmlRadiusMBoom,10,4,12,6,);
B(B_VARIN,,MRwalSect1P2RadM,10,3,12,5,);
B(B_VARIN,,SXMwalSetSec1P2M,11,2,13,4,);
B(B_VAROUT,,SRwalSect1P2RadM,19,3,21,5,);
B(B_VAROUT,,SRwalSect1P2AngM,19,8,21,10,);
L(12,5,14,5);
L(12,4,14,4);
L(13,3,14,3);
L(13,3,13,8);
L(13,8,14,8);
L(19,3,19,4);
L(19,8,19,9);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_VAROUT,,MRwalSect1P3RadM,19,2,21,4,);
B(B_F,sel,,14,1,19,6,);
B(B_F,sel,,14,6,19,11,);
B(B_VAROUT,,MRwalSect1P3AngM,19,7,21,9,);
B(B_VARIN,,MDsgAngle,12,9,14,11,);
B(B_VARIN,,MRwalSect1P3AngM,12,8,14,10,);
B(B_VARIN,,MDlmlRadiusMBoom,10,4,12,6,);
B(B_VARIN,,MRwalSect1P3RadM,10,3,12,5,);
B(B_VARIN,,SXMwalSetSec1P3M,11,2,13,4,);
B(B_VAROUT,,SRwalSect1P3RadM,19,3,21,5,);
B(B_VAROUT,,SRwalSect1P3AngM,19,8,21,10,);
L(12,5,14,5);
L(12,4,14,4);
L(13,3,14,3);
L(13,3,13,8);
L(13,8,14,8);
L(19,3,19,4);
L(19,8,19,9);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_VAROUT,,MRwalSect1P1RadJ,19,2,21,4,);
B(B_F,sel,,14,1,19,6,);
B(B_F,sel,,14,6,19,11,);
B(B_VAROUT,,MRwalSect1P1AngJ,19,7,21,9,);
B(B_VARIN,,MDsgAngle,12,9,14,11,);
B(B_VARIN,,MRwalSect1P1AngJ,12,8,14,10,);
B(B_VARIN,,MDlmlRadiusLJib,10,4,12,6,);
B(B_VARIN,,MRwalSect1P1RadJ,10,3,12,5,);
B(B_VARIN,,SXMwalSetSec1P1J,11,2,13,4,);
B(B_VAROUT,,SRwalSect1P1RadJ,19,3,21,5,);
B(B_VAROUT,,SRwalSect1P1AngJ,19,8,21,10,);
L(12,5,14,5);
L(12,4,14,4);
L(13,3,14,3);
L(13,3,13,8);
L(13,8,14,8);
L(19,3,19,4);
L(19,8,19,9);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_VAROUT,,MRwalSect1P2RadJ,19,2,21,4,);
B(B_F,sel,,14,1,19,6,);
B(B_F,sel,,14,6,19,11,);
B(B_VAROUT,,MRwalSect1P2AngJ,19,7,21,9,);
B(B_VARIN,,MDsgAngle,12,9,14,11,);
B(B_VARIN,,MRwalSect1P2AngJ,12,8,14,10,);
B(B_VARIN,,MDlmlRadiusLJib,10,4,12,6,);
B(B_VARIN,,MRwalSect1P2RadJ,10,3,12,5,);
B(B_VARIN,,SXMwalSetSec1P2J,11,2,13,4,);
B(B_VAROUT,,SRwalSect1P2RadJ,19,3,21,5,);
B(B_VAROUT,,SRwalSect1P2AngJ,19,8,21,10,);
L(12,5,14,5);
L(12,4,14,4);
L(13,3,14,3);
L(13,3,13,8);
L(13,8,14,8);
L(19,3,19,4);
L(19,8,19,9);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_VAROUT,,MRwalSect1P3RadJ,19,2,21,4,);
B(B_F,sel,,14,1,19,6,);
B(B_F,sel,,14,6,19,11,);
B(B_VAROUT,,MRwalSect1P3AngJ,19,7,21,9,);
B(B_VARIN,,MDsgAngle,12,9,14,11,);
B(B_VARIN,,MRwalSect1P3AngJ,12,8,14,10,);
B(B_VARIN,,MDlmlRadiusLJib,10,4,12,6,);
B(B_VARIN,,MRwalSect1P3RadJ,10,3,12,5,);
B(B_VARIN,,SXMwalSetSec1P3J,11,2,13,4,);
B(B_VAROUT,,SRwalSect1P3RadJ,19,3,21,5,);
B(B_VAROUT,,SRwalSect1P3AngJ,19,8,21,10,);
L(12,5,14,5);
L(12,4,14,4);
L(13,3,14,3);
L(13,3,13,8);
L(13,8,14,8);
L(19,3,19,4);
L(19,8,19,9);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_F,sel,,12,1,17,6,N);
B(B_VARIN,,FALSE,10,4,12,6,);
B(B_VAROUT,,SXMwalSecLJibAct,17,2,19,4,);
B(B_VARIN,,SXMwalSecLJibAct,10,3,12,5,);
B(B_VARIN,,MXlmlLuffJibEnab,10,2,12,4,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_F,sel,,12,1,17,6,);
B(B_VARIN,,FALSE,10,4,12,6,);
B(B_VAROUT,,SXMwalSetSec1P1M,17,2,19,4,);
B(B_VARIN,,SXMwalSetSec1P1M,10,3,12,5,);
B(B_VARIN,,SXMwalSetSec1P1M,10,2,12,4,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_F,sel,,12,1,17,6,);
B(B_VARIN,,FALSE,10,4,12,6,);
B(B_VAROUT,,SXMwalSetSec1P2M,17,2,19,4,);
B(B_VARIN,,SXMwalSetSec1P2M,10,3,12,5,);
B(B_VARIN,,SXMwalSetSec1P2M,10,2,12,4,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_F,sel,,12,1,17,6,);
B(B_VARIN,,FALSE,10,4,12,6,);
B(B_VAROUT,,SXMwalSetSec1P3M,17,2,19,4,);
B(B_VARIN,,SXMwalSetSec1P3M,10,3,12,5,);
B(B_VARIN,,SXMwalSetSec1P3M,10,2,12,4,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_F,sel,,12,1,17,6,);
B(B_VARIN,,FALSE,10,4,12,6,);
B(B_VAROUT,,SXMwalSetSec1P1J,17,2,19,4,);
B(B_VARIN,,SXMwalSetSec1P1J,10,3,12,5,);
B(B_VARIN,,SXMwalSetSec1P1J,10,2,12,4,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_F,sel,,12,1,17,6,);
B(B_VARIN,,FALSE,10,4,12,6,);
B(B_VAROUT,,SXMwalSetSec1P2J,17,2,19,4,);
B(B_VARIN,,SXMwalSetSec1P2J,10,3,12,5,);
B(B_VARIN,,SXMwalSetSec1P2J,10,2,12,4,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_F,sel,,12,1,17,6,);
B(B_VARIN,,FALSE,10,4,12,6,);
B(B_VAROUT,,SXMwalSetSec1P3J,17,2,19,4,);
B(B_VARIN,,SXMwalSetSec1P3J,10,3,12,5,);
B(B_VARIN,,SXMwalSetSec1P3J,10,2,12,4,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_COMMENT,,Betriebsartenvorwahlseite,1,1,60,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 33 ;
        NETWORK_BODY
B(B_COMMENT,,working mode selection,1,1,27,2,);
B(B_VARIN,,IXseleOperatMode,28,22,30,24,);
B(B_VARIN,,SRMpreNewMode,28,25,30,27,);
B(B_VAROUT,,MXnewModeSelect,53,23,55,25,);
B(B_VAROUT,,MWstorActualMode,53,24,55,26,);
B(B_VARIN,,TRUE,28,6,30,8,);
B(B_VARIN,,CXadHamOperat,28,9,30,11,);
B(B_VARIN,,CXadVibOperat,28,8,30,10,);
B(B_VARIN,,CXadDynGrouComp,28,7,30,9,);
B(B_VARIN,,CXadDrillOperat,28,16,30,18,);
B(B_VARIN,,CXadExtOperMode,28,17,30,19,);
B(B_VAROUT,,SXpreMainOp,53,6,55,8,);
B(B_VAROUT,,SXpreHamOp,53,9,55,11,);
B(B_VAROUT,,SXpreVibOp,53,8,55,10,);
B(B_VAROUT,,SXacknNewMode,53,22,55,24,);
B(B_VARIN,,MWstorActualMode,28,23,30,25,);
B(B_VARIN,,SXMnewModeAckn,28,24,30,26,);
B(B_VAROUT,,SXpreDgcOp,53,7,55,9,);
B(B_VAROUT,,SXpreGrabOp,53,10,55,12,);
B(B_VAROUT,,SXlePreGrabOp,53,11,55,13,);
B(B_VAROUT,,SXsbPreGrabOp,53,12,55,14,);
B(B_VAROUT,,SXsmPreGrabOp,53,13,55,15,);
B(B_VAROUT,,SXpreGrabHoseOp,53,14,55,16,);
B(B_VAROUT,,SXpreKelGrapOp,53,15,55,17,);
B(B_VAROUT,,SXpreDrillOp,53,16,55,18,);
B(B_VAROUT,,SXpreExtContOp,53,17,55,19,);
B(B_COMMENT,,main page = mode 1,21,4,34,5,);
B(B_F,@AND-2,,13,3,18,7,0N);
B(B_VARIN,,MXleaderOper,10,5,12,7,);
B(B_VARIN,,CXadHydrGrab,11,4,13,6,);
B(B_F,@AND-2,,13,7,18,11,0N);
B(B_VARIN,,CXadLEHydrGrab,9,8,11,10,);
B(B_F,@AND-2,,13,11,18,15,0N);
B(B_VARIN,,CXadSBHydrGrab,9,12,11,14,);
B(B_F,@AND-2,,13,15,18,19,0N);
B(B_VARIN,,CXadSMHydrGrab,9,16,11,18,);
B(B_F,@AND-2,,13,19,18,23,0N);
B(B_VARIN,,CXadHydrGrabHose,9,20,11,22,);
B(B_F,@AND-2,,13,23,18,27,0N);
B(B_VARIN,,CXadKellyHydGrab,9,24,11,26,);
B(B_VAROUT,,SXpreDraglineOp,53,18,55,20,);
B(B_F,@AND-3,,13,27,18,32,0N);
B(B_VARIN,,CXadDragliOpMode,9,28,11,30,);
B(B_VARIN,,MXlmlTypeDutyCyc,11,30,13,32,);
B(B_FB,SCmodeSelV021,SCmodeSel1,30,5,53,27,);
B(B_F,uint_to_real,,53,26,64,29,);
B(B_VAROUT,,LRcurrentMode,64,27,66,29,);
L(19,5,19,11);
L(18,5,19,5);
L(12,10,13,10);
L(12,14,13,14);
L(18,9,18,12);
L(12,22,13,22);
L(12,18,13,18);
L(18,21,19,21);
L(18,14,18,17);
L(19,15,19,21);
L(20,16,20,25);
L(18,25,20,25);
L(12,26,13,26);
L(11,25,13,25);
L(11,21,13,21);
L(11,17,13,17);
L(11,13,13,13);
L(11,9,13,9);
L(12,6,13,6);
L(18,29,21,29);
L(21,19,21,29);
L(11,29,13,29);
L(12,30,13,30);
L(12,6,12,30);
L(19,11,30,11);
L(18,12,30,12);
L(18,13,30,13);
L(18,14,30,14);
L(19,15,30,15);
L(20,16,30,16);
L(21,19,30,19);
L(53,25,53,28);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_VARIN,,FALSE,9,3,11,5,);
B(B_VAROUT,,SXpreTranspOper,11,3,13,5,);
B(B_COMMENT,,working mode transport operation selection,1,1,27,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_F,sel,,11,1,16,6,);
B(B_VARIN,,MXnewModeSelect,9,2,11,4,);
B(B_VARIN,,SXMsetTranspOper,9,4,11,6,);
B(B_VAROUT,,MXtranspOper,16,2,18,4,);
B(B_VARIN,,MXtranspOper,9,3,11,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_VARIN,,MXtranspOper,9,1,11,3,);
B(B_VAROUT,,SXtranspOperAct,11,1,13,3,);
B(B_VAROUT,,SRcurrentMode,16,4,18,6,);
B(B_F,sel,,11,3,16,8,);
B(B_VARIN,,LRcurrentMode,9,5,11,7,);
B(B_VARIN,,0.0,9,6,11,8,);
L(11,2,11,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_COMMENT,,working mode leader operation selection,1,1,27,2,);
B(B_F,@AND-2,,11,3,16,7,);
B(B_VAROUT,,SXpreLeaderOpera,16,4,18,6,);
B(B_VARIN,,MXlmlTypeDutyCyc,9,5,11,7,);
B(B_VARIN,,MXpresHangLeader,9,4,11,6,);
B(B_COMMENT,,CXadHangLeader,1,3,11,4,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_F,sel,,12,1,17,6,);
B(B_VARIN,,MXnewModeSelect,10,2,12,4,);
B(B_VARIN,,SXMsetLeaderOper,10,4,12,6,);
B(B_VAROUT,,MXleaderOper,17,2,19,4,);
B(B_VARIN,,MXleaderOper,10,3,12,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,MXleaderOper,10,1,12,3,);
B(B_VAROUT,,SXleaderOperAct,12,1,14,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_COMMENT,,working mode counterweight carrier selection,1,1,27,2,);
B(B_VARIN,,CXadCouCarrier,10,4,12,6,);
B(B_VAROUT,,SXpreCouCarOper,17,4,19,6,);
B(B_F,@AND-3,,12,3,17,8,00N);
B(B_VARIN,,MXlmlTypeDutyCyc,10,6,12,8,);
B(B_VARIN,,MXderrickPossib,10,5,12,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_F,sel,,12,1,17,6,);
B(B_VARIN,,MXnewModeSelect,10,2,12,4,);
B(B_VARIN,,SXMsetCoucarOper,10,4,12,6,);
B(B_VAROUT,,MXcoucarOper,17,2,19,4,);
B(B_VARIN,,MXcoucarOper,10,3,12,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,MXcoucarOper,10,1,12,3,);
B(B_VAROUT,,SXcoucarOperAct,12,1,14,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 5 ;
        NETWORK_BODY
B(B_COMMENT,,store unit selection,1,1,27,2,);
B(B_VARIN,,SXMchUnitDistanc,9,3,11,5,);
B(B_VAROUT,,MXchUnitDistance,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VARIN,,SXMchUnitLoad,9,1,11,3,);
B(B_VAROUT,,MXchUnitLoad,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VARIN,,SXMchUnitPress,9,1,11,3,);
B(B_VAROUT,,MXchUnitPress,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VARIN,,SXMchUnitTemp,9,1,11,3,);
B(B_VAROUT,,MXchUnitTemp,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VARIN,,SXMchUnitVolume,9,1,11,3,);
B(B_VAROUT,,MXchUnitVolume,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VARIN,,SXMchUnitSpeed,9,1,11,3,);
B(B_VAROUT,,MXchUnitSpeed,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_F,@AND-2,,12,6,17,10,);
B(B_FB,RS,RSlockHg1,19,3,24,7,);
B(B_VAROUT,,MXlockHg1,24,4,26,6,);
B(B_VARIN,,MXlockHg1,10,8,12,10,);
B(B_VARIN,,SXMlockHg1,9,4,11,6,);
B(B_COMMENT,,ACHTUNG: Das RS wird im init Teil gesetzt,29,2,46,3,);
B(B_VAROUT,,SXhg1Locked,24,5,26,7,);
B(B_COMMENT,,store main function ,1,1,27,2,);
L(11,8,12,8);
L(18,6,18,8);
L(18,6,19,6);
L(11,5,11,8);
L(11,5,19,5);
L(17,8,18,8);
L(24,5,24,6);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_F,sel,,11,1,16,6,);
B(B_VAROUT,,SXMlockHg1,16,2,18,4,);
B(B_VARIN,,SXMlockHg1,9,3,11,5,);
B(B_VARIN,,FALSE,9,4,11,6,);
B(B_VARIN,,SXMlockHg1,9,2,11,4,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_F,@AND-2,,12,4,17,8,);
B(B_FB,RS,RSlockHg2,19,1,24,5,);
B(B_VAROUT,,MXlockHg2,24,2,26,4,);
B(B_VARIN,,MXlockHg2,10,6,12,8,);
B(B_VARIN,,SXMlockHg2,9,2,11,4,);
B(B_VAROUT,,SXhg2Locked,24,3,26,5,);
B(B_COMMENT,,ACHTUNG: Das RS wird im init Teil gesetzt,29,1,46,2,);
L(11,6,12,6);
L(18,4,18,6);
L(18,4,19,4);
L(11,3,11,6);
L(11,3,19,3);
L(17,6,18,6);
L(24,3,24,4);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_F,sel,,11,1,16,6,);
B(B_VAROUT,,SXMlockHg2,16,2,18,4,);
B(B_VARIN,,SXMlockHg2,9,3,11,5,);
B(B_VARIN,,FALSE,9,4,11,6,);
B(B_VARIN,,SXMlockHg2,9,2,11,4,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_F,@AND-2,,12,4,17,8,);
B(B_FB,RS,RSlockLg,19,1,24,5,);
B(B_VAROUT,,MXlockLg,24,2,26,4,);
B(B_VARIN,,MXlockLg,10,6,12,8,);
B(B_VARIN,,SXMlockLg,9,2,11,4,);
B(B_VAROUT,,SXlgLocked,24,3,26,5,);
B(B_COMMENT,,ACHTUNG: Das RS wird im init Teil gesetzt,29,1,46,2,);
L(11,6,12,6);
L(18,4,18,6);
L(18,4,19,4);
L(11,3,11,6);
L(11,3,19,3);
L(17,6,18,6);
L(24,3,24,4);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_F,sel,,11,1,16,6,);
B(B_VAROUT,,SXMlockLg,16,2,18,4,);
B(B_VARIN,,SXMlockLg,9,3,11,5,);
B(B_VARIN,,FALSE,9,4,11,6,);
B(B_VARIN,,SXMlockLg,9,2,11,4,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_F,@AND-2,,12,4,17,8,);
B(B_FB,RS,RSlockSg,19,1,24,5,);
B(B_VAROUT,,MXlockSg,24,2,26,4,);
B(B_VARIN,,MXlockSg,10,6,12,8,);
B(B_VARIN,,SXMlockSg,9,2,11,4,);
B(B_VAROUT,,SXsgLocked,24,3,26,5,);
B(B_COMMENT,,ACHTUNG: Das RS wird im init Teil gesetzt,29,1,46,2,);
L(11,6,12,6);
L(18,4,18,6);
L(18,4,19,4);
L(11,3,11,6);
L(11,3,19,3);
L(17,6,18,6);
L(24,3,24,4);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_F,sel,,11,1,16,6,);
B(B_VAROUT,,SXMlockSg,16,2,18,4,);
B(B_VARIN,,SXMlockSg,9,3,11,5,);
B(B_VARIN,,FALSE,9,4,11,6,);
B(B_VARIN,,SXMlockSg,9,2,11,4,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_F,@AND-2,,12,4,17,8,);
B(B_FB,RS,RSlockTg,19,1,24,5,);
B(B_VAROUT,,MXlockTg,24,2,26,4,);
B(B_VARIN,,MXlockTg,10,6,12,8,);
B(B_VARIN,,SXMlockTg,9,2,11,4,);
B(B_VAROUT,,SXtgLocked,24,3,26,5,);
B(B_COMMENT,,ACHTUNG: Das RS wird im init Teil gesetzt,29,1,46,2,);
L(11,6,12,6);
L(18,4,18,6);
L(18,4,19,4);
L(11,3,11,6);
L(11,3,19,3);
L(17,6,18,6);
L(24,3,24,4);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_F,sel,,11,1,16,6,);
B(B_VAROUT,,SXMlockTg,16,2,18,4,);
B(B_VARIN,,SXMlockTg,9,3,11,5,);
B(B_VARIN,,FALSE,9,4,11,6,);
B(B_VARIN,,SXMlockTg,9,2,11,4,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_COMMENT,,init first screen page,1,1,27,2,);
B(B_F,@OR-2,,11,3,16,7,0N);
B(B_JUMP,,exit,16,4,18,6,);
B(B_VARIN,,LXpageAtStartOk,9,4,11,6,);
B(B_VARIN,,MXacCheckOk,9,5,11,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_F,sel,,9,5,14,10,);
B(B_F,sel,,17,4,22,9,);
B(B_VARIN,,1.0,15,7,17,9,);
B(B_F,@OR-2,,12,1,17,5,);
B(B_VARIN,,MXtranspOper,10,3,12,5,);
B(B_VARIN,,MXlmlDeactive,10,2,12,4,);
B(B_F,sel,,26,2,31,7,);
B(B_VARIN,,-1.0,24,4,26,6,);
B(B_VAROUT,,SRpageAtStart,31,3,33,5,);
B(B_VARIN,,MXacReleasMachin,24,2,26,4,);
B(B_VARIN,,0.0,7,7,9,9,);
B(B_VARIN,,4.0,7,8,9,10,);
B(B_VARIN,,MXlmlStarted,7,6,9,8,);
L(17,3,17,6);
L(14,7,17,7);
L(26,3,26,4);
L(22,6,26,6);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_VARIN,,SRpageAtStart,8,2,10,4,);
B(B_F,@NE,,10,1,15,5,);
B(B_VARIN,,0.0,8,3,10,5,);
B(B_VAROUT,,LXpageAtStartOk,15,2,17,4,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL := exit: ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 5 ;
        NETWORK_BODY
B(B_COMMENT,,exit screen program,1,1,27,2,);
B(B_VARIN,,TRUE,8,3,10,5,);
B(B_RETURN,,,10,3,12,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL := init: ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 5 ;
        NETWORK_BODY
B(B_COMMENT,,init screen program,1,1,27,2,);
B(B_VARIN,,TRUE,8,3,10,5,);
B(B_VAROUT,,LXinitOk,10,3,12,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_COMMENT,,init tara load,1,1,27,2,);
B(B_FB,RS,RStaraMain,11,3,16,7,);
B(B_VAROUT,,MXtaraMainBoom,16,4,18,6,);
B(B_FB,RS,RStaraJib,11,8,16,12,);
B(B_VAROUT,,MXtaraLuffJib,16,9,18,11,);
B(B_VARIN,,MXtaraMainBoom,9,4,11,6,);
B(B_VARIN,,MXtaraLuffJib,7,9,9,11,);
B(B_VARIN,,FALSE,8,5,10,7,);
L(10,11,11,11);
L(10,6,10,11);
L(10,6,11,6);
L(9,10,11,10);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 5 ;
        NETWORK_BODY
B(B_COMMENT,,init reeving visualisation,1,1,27,2,);
B(B_VARIN,,MDhg1Reeving,9,3,11,5,);
B(B_VAROUT,,SRMhg1Reeving,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VARIN,,MDhg2Reeving,9,1,11,3,);
B(B_VAROUT,,SRMhg2Reeving,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 5 ;
        NETWORK_BODY
B(B_COMMENT,,init unit selection,1,1,27,2,);
B(B_VARIN,,MXchUnitDistance,9,3,11,5,);
B(B_VAROUT,,SXMchUnitDistanc,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VARIN,,MXchUnitLoad,9,1,11,3,);
B(B_VAROUT,,SXMchUnitLoad,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VARIN,,MXchUnitPress,9,1,11,3,);
B(B_VAROUT,,SXMchUnitPress,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VARIN,,MXchUnitTemp,9,1,11,3,);
B(B_VAROUT,,SXMchUnitTemp,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VARIN,,MXchUnitVolume,9,1,11,3,);
B(B_VAROUT,,SXMchUnitVolume,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VARIN,,MXchUnitSpeed,9,1,11,3,);
B(B_VAROUT,,SXMchUnitSpeed,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 5 ;
        NETWORK_BODY
B(B_COMMENT,,init WAL visualisation (work area limitation),1,1,27,2,);
B(B_VARIN,,MXwalSlewAct,9,3,11,5,);
B(B_VAROUT,,SXMwalSlewAct,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VARIN,,MXwalRadMaBoAct,9,1,11,3,);
B(B_VAROUT,,SXMwalRadMaBoAct,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VARIN,,MXwalRadLJibAct,9,1,11,3,);
B(B_VAROUT,,SXMwalRadLJibAct,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VARIN,,MXwalHigMaBoAct,9,1,11,3,);
B(B_VAROUT,,SXMwalHigMaBoAct,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VARIN,,MXwalHigLJibAct,9,1,11,3,);
B(B_VAROUT,,SXMwalHigLJibAct,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VARIN,,MXwalLinMaBoAct,9,1,11,3,);
B(B_VAROUT,,SXMwalLinMaBoAct,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VARIN,,MXwalLinLuJiAct,9,1,11,3,);
B(B_VAROUT,,SXMwalLinLJibAct,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VARIN,,MXwalSecMaBoAct,9,1,11,3,);
B(B_VAROUT,,SXMwalSecMaBoAct,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VARIN,,MXwalSecLuJiAct,9,1,11,3,);
B(B_VAROUT,,SXMwalSecLJibAct,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 24 ;
        NETWORK_BODY
B(B_COMMENT,,init lock main function ,1,1,27,2,);
B(B_FB,RS,RSlockHg1,13,3,18,7,);
B(B_VAROUT,,MXlockHg1,18,4,20,6,);
B(B_FB,RS,RSlockHg2,13,7,18,11,);
B(B_VAROUT,,MXlockHg2,18,8,20,10,);
B(B_VARIN,,MXlockHg1,11,4,13,6,);
B(B_VARIN,,MXlockHg2,9,8,11,10,);
B(B_VARIN,,FALSE,10,5,12,7,);
B(B_FB,RS,RSlockLg,13,11,18,15,);
B(B_VAROUT,,MXlockLg,18,12,20,14,);
B(B_VARIN,,MXlockLg,9,12,11,14,);
B(B_FB,RS,RSlockSg,13,15,18,19,);
B(B_VAROUT,,MXlockSg,18,16,20,18,);
B(B_VARIN,,MXlockSg,9,16,11,18,);
B(B_FB,RS,RSlockTg,13,19,18,23,);
B(B_VAROUT,,MXlockTg,18,20,20,22,);
B(B_VARIN,,MXlockTg,9,20,11,22,);
L(12,6,12,22);
L(12,6,13,6);
L(11,9,13,9);
L(12,14,13,14);
L(11,13,13,13);
L(12,18,13,18);
L(11,17,13,17);
L(12,22,13,22);
L(11,21,13,21);
L(12,10,13,10);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 15 ;
        NETWORK_BODY
B(B_F,@LT-2,,13,3,18,7,);
B(B_F,@GT-2,,13,7,18,11,);
B(B_VARIN,,0.0,9,5,11,7,);
B(B_F,@OR-2,,20,6,25,10,);
B(B_F,sel,,28,6,33,11,);
B(B_VAROUT,,MDdgcGivenHight,33,7,35,9,);
B(B_VARIN,,MDdgcGivenHight,24,11,26,13,);
B(B_VARIN,,10.0,25,12,27,14,);
B(B_VARIN,,MDdgcGivenHight,10,4,12,6,);
B(B_VARIN,,100.0,11,9,13,11,);
B(B_COMMENT,,set input areas of dgc,1,1,27,2,);
L(12,5,12,9);
L(12,9,13,9);
L(11,6,13,6);
L(18,5,19,5);
L(19,5,19,8);
L(19,8,20,8);
L(18,9,20,9);
L(25,8,28,8);
L(26,9,26,12);
L(26,9,28,9);
L(27,10,27,13);
L(27,10,28,10);
L(12,5,13,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_F,@LT-2,,13,1,18,5,);
B(B_F,@GT-2,,13,5,18,9,);
B(B_VARIN,,0.0,9,3,11,5,);
B(B_F,@OR-2,,20,4,25,8,);
B(B_F,sel,,28,4,33,9,);
B(B_VAROUT,,MDdgcGivSlowDown,33,5,35,7,);
B(B_VARIN,,MDdgcGivSlowDown,24,9,26,11,);
B(B_VARIN,,3.0,25,10,27,12,);
B(B_VARIN,,MDdgcGivSlowDown,10,2,12,4,);
B(B_VARIN,,MDdgcGivenHight,11,7,13,9,);
L(12,3,12,7);
L(12,7,13,7);
L(11,4,13,4);
L(18,3,19,3);
L(19,3,19,6);
L(19,6,20,6);
L(18,7,20,7);
L(25,6,28,6);
L(26,7,26,10);
L(26,7,28,7);
L(27,8,27,11);
L(27,8,28,8);
L(12,3,13,3);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_F,@LT-2,,13,1,18,5,);
B(B_F,@GT-2,,13,5,18,9,);
B(B_VARIN,,0.0,9,3,11,5,);
B(B_F,@OR-2,,20,4,25,8,);
B(B_F,sel,,28,4,33,9,);
B(B_VAROUT,,MDdgcGivenCompac,33,5,35,7,);
B(B_VARIN,,MDdgcGivenCompac,24,9,26,11,);
B(B_VARIN,,1.0,25,10,27,12,);
B(B_VARIN,,MDdgcGivenCompac,10,2,12,4,);
B(B_VARIN,,10.0,11,7,13,9,);
L(12,3,12,7);
L(12,7,13,7);
L(11,4,13,4);
L(18,3,19,3);
L(19,3,19,6);
L(19,6,20,6);
L(18,7,20,7);
L(25,6,28,6);
L(26,7,26,10);
L(26,7,28,7);
L(27,8,27,11);
L(27,8,28,8);
L(12,3,13,3);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_F,@LT-2,,13,1,18,5,);
B(B_F,@GT-2,,13,5,18,9,);
B(B_VARIN,,0.0,9,3,11,5,);
B(B_F,@OR-2,,20,4,25,8,);
B(B_F,sel,,28,4,33,9,);
B(B_VAROUT,,MDdgcGivenBeats,33,5,35,7,);
B(B_VARIN,,MDdgcGivenBeats,24,9,26,11,);
B(B_VARIN,,5.0,25,10,27,12,);
B(B_VARIN,,MDdgcGivenBeats,10,2,12,4,);
B(B_VARIN,,99.0,11,7,13,9,);
L(12,3,12,7);
L(12,7,13,7);
L(11,4,13,4);
L(18,3,19,3);
L(19,3,19,6);
L(19,6,20,6);
L(18,7,20,7);
L(25,6,28,6);
L(26,7,26,10);
L(26,7,28,7);
L(27,8,27,11);
L(27,8,28,8);
L(12,3,13,3);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 5 ;
        NETWORK_BODY
B(B_COMMENT,,init dgc,1,1,27,2,);
B(B_VARIN,,MDdgcGivenHight,9,3,11,5,);
B(B_VAROUT,,SRMdgcLiftHight,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VARIN,,MDdgcGivenBeats,9,1,11,3,);
B(B_VAROUT,,SRMdgcBeats,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VARIN,,MDdgcGivenCompac,9,1,11,3,);
B(B_VAROUT,,SRMdgcCompaction,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VARIN,,MDdgcGivSlowDown,9,1,11,3,);
B(B_VAROUT,,SRMdgcSlowDoHigh,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 14 ;
        NETWORK_BODY
B(B_F,@OR-2,,20,3,25,7,);
B(B_F,@LT-2,,13,7,18,11,);
B(B_VARIN,,1,11,9,13,11,);
B(B_F,@GT-2,,13,3,18,7,);
B(B_VARIN,,MWstorActualMode,10,4,12,6,);
B(B_VARIN,,16,9,5,11,7,);
B(B_F,sel,,26,8,31,13,);
B(B_VARIN,,1,24,11,26,13,);
B(B_VARIN,,MWstorActualMode,24,10,26,12,);
B(B_VAROUT,,MWstorActualMode,31,9,33,11,);
B(B_COMMENT,,check if operation mode are possible,1,1,27,2,);
L(12,9,13,9);
L(19,6,19,9);
L(18,9,19,9);
L(19,6,20,6);
L(25,5,25,10);
L(18,5,20,5);
L(12,5,12,9);
L(12,5,13,5);
L(11,6,13,6);
L(25,10,26,10);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 56 ;
        NETWORK_BODY
B(B_VARIN,,MWstorActualMode,10,4,12,6,);
B(B_VARIN,,1,9,5,11,7,);
B(B_VARIN,,2,9,9,11,11,);
B(B_VARIN,,3,9,13,11,15,);
B(B_VARIN,,4,9,17,11,19,);
B(B_COMMENT,,release operation modes ,1,1,27,2,);
B(B_VAROUT,,MXenablVibOperat,18,12,20,14,);
B(B_VAROUT,,MXenablHamOperat,18,16,20,18,);
B(B_VAROUT,,MXenabDgcOperat,18,8,20,10,);
B(B_VAROUT,,MXenabMainOperat,18,4,20,6,);
B(B_VAROUT,,MXenabHyGrabOper,18,20,20,22,);
B(B_VARIN,,5,9,21,11,23,);
B(B_VARIN,,6,9,25,11,27,);
B(B_VARIN,,7,9,29,11,31,);
B(B_VAROUT,,MXadLEHydrGrab,18,24,20,26,);
B(B_VAROUT,,MXadSBHydrGrab,18,28,20,30,);
B(B_F,@EQ-2,,13,3,18,7,);
B(B_F,@EQ-2,,13,7,18,11,);
B(B_F,@EQ-2,,13,11,18,15,);
B(B_F,@EQ-2,,13,15,18,19,);
B(B_F,@EQ-2,,13,19,18,23,);
B(B_F,@EQ-2,,13,23,18,27,);
B(B_F,@EQ-2,,13,27,18,31,);
B(B_F,@EQ-2,,13,51,18,55,);
B(B_VARIN,,8,9,33,11,35,);
B(B_F,@EQ-2,,13,31,18,35,);
B(B_VARIN,,9,9,37,11,39,);
B(B_F,@EQ-2,,13,35,18,39,);
B(B_VAROUT,,MXadSMHydrGrab,18,32,20,34,);
B(B_VAROUT,,MXenabDragliOper,18,52,20,54,);
B(B_VAROUT,,MXenabHyGrabHose,18,36,20,38,);
B(B_VARIN,,10,9,41,11,43,);
B(B_F,@EQ-2,,13,39,18,43,);
B(B_VAROUT,,MXenabKelGrabOpe,18,40,20,42,);
B(B_VARIN,,11,9,45,11,47,);
B(B_F,@EQ-2,,13,43,18,47,);
B(B_VAROUT,,MXenablDrillOper,18,44,20,46,);
B(B_F,@EQ-2,,13,47,18,51,);
B(B_VAROUT,,MXenExtOperMode,18,48,20,50,);
B(B_VARIN,,12,9,49,11,51,);
B(B_VARIN,,13,9,53,11,55,);
L(11,6,13,6);
L(11,10,13,10);
L(11,14,13,14);
L(11,18,13,18);
L(11,22,13,22);
L(11,26,13,26);
L(12,5,12,53);
L(11,30,13,30);
L(12,5,13,5);
L(12,9,13,9);
L(12,13,13,13);
L(12,17,13,17);
L(12,21,13,21);
L(12,25,13,25);
L(12,29,13,29);
L(12,53,13,53);
L(11,34,13,34);
L(12,33,13,33);
L(11,38,13,38);
L(12,37,13,37);
L(11,42,13,42);
L(12,41,13,41);
L(11,46,13,46);
L(12,45,13,45);
L(12,49,13,49);
L(11,54,13,54);
L(11,50,13,50);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 15 ;
        NETWORK_BODY
B(B_F,@GT-2,,13,7,18,11,);
B(B_VARIN,,1.0,9,5,11,7,);
B(B_F,@OR-2,,20,6,25,10,);
B(B_F,sel,,28,6,33,11,);
B(B_VAROUT,,MRham1Volume,33,7,35,9,);
B(B_VARIN,,MRham1Volume,24,11,26,13,);
B(B_VARIN,,300.0,25,12,27,14,);
B(B_VARIN,,MRham1Volume,10,4,12,6,);
B(B_VARIN,,9999.9,11,9,13,11,);
B(B_COMMENT,,set input areas of vibrator and hammer,1,1,27,2,);
B(B_F,@LT-2,,13,3,18,7,);
L(12,5,12,9);
L(12,9,13,9);
L(11,6,13,6);
L(19,5,19,8);
L(19,8,20,8);
L(18,9,20,9);
L(25,8,28,8);
L(26,9,26,12);
L(26,9,28,9);
L(27,10,27,13);
L(27,10,28,10);
L(12,5,13,5);
L(18,5,19,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_F,@GT-2,,13,5,18,9,);
B(B_VARIN,,1.0,9,3,11,5,);
B(B_F,@OR-2,,20,4,25,8,);
B(B_F,sel,,28,4,33,9,);
B(B_VAROUT,,MRvib1Volume,33,5,35,7,);
B(B_VARIN,,MRvib1Volume,24,9,26,11,);
B(B_VARIN,,600.0,25,10,27,12,);
B(B_VARIN,,9999.9,11,7,13,9,);
B(B_VARIN,,MRvib1Volume,10,2,12,4,);
B(B_F,@LT-2,,13,1,18,5,);
L(12,3,12,7);
L(12,7,13,7);
L(11,4,13,4);
L(19,3,19,6);
L(19,6,20,6);
L(18,7,20,7);
L(25,6,28,6);
L(26,7,26,10);
L(26,7,28,7);
L(27,8,27,11);
L(27,8,28,8);
L(12,3,13,3);
L(18,3,19,3);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_F,@GT-2,,13,5,18,9,);
B(B_VARIN,,1.0,9,3,11,5,);
B(B_F,@OR-2,,20,4,25,8,);
B(B_F,sel,,28,4,33,9,);
B(B_VAROUT,,MRdrill1Volume,33,5,35,7,);
B(B_VARIN,,MRdrill1Volume,24,9,26,11,);
B(B_VARIN,,600.0,25,10,27,12,);
B(B_VARIN,,9999.9,11,7,13,9,);
B(B_VARIN,,MRdrill1Volume,10,2,12,4,);
B(B_F,@LT-2,,13,1,18,5,);
L(12,3,12,7);
L(12,7,13,7);
L(11,4,13,4);
L(19,3,19,6);
L(19,6,20,6);
L(18,7,20,7);
L(25,6,28,6);
L(26,7,26,10);
L(26,7,28,7);
L(27,8,27,11);
L(27,8,28,8);
L(12,3,13,3);
L(18,3,19,3);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_F,@GT-2,,13,5,18,9,);
B(B_VARIN,,1.0,9,3,11,5,);
B(B_F,@OR-2,,20,4,25,8,);
B(B_F,sel,,28,4,33,9,);
B(B_VAROUT,,MRvib1Press,33,5,35,7,);
B(B_VARIN,,MRvib1Press,24,9,26,11,);
B(B_VARIN,,350.0,25,10,27,12,);
B(B_VARIN,,999.9,11,7,13,9,);
B(B_VARIN,,MRvib1Press,10,2,12,4,);
B(B_F,@LT-2,,13,1,18,5,);
L(12,3,12,7);
L(12,7,13,7);
L(11,4,13,4);
L(19,3,19,6);
L(19,6,20,6);
L(18,7,20,7);
L(25,6,28,6);
L(26,7,26,10);
L(26,7,28,7);
L(27,8,27,11);
L(27,8,28,8);
L(12,3,13,3);
L(18,3,19,3);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_F,@GT-2,,13,5,18,9,);
B(B_VARIN,,1.0,9,3,11,5,);
B(B_F,@OR-2,,20,4,25,8,);
B(B_F,sel,,28,4,33,9,);
B(B_VAROUT,,MRham1Press,33,5,35,7,);
B(B_VARIN,,MRham1Press,24,9,26,11,);
B(B_VARIN,,350.0,25,10,27,12,);
B(B_VARIN,,999.9,11,7,13,9,);
B(B_VARIN,,MRham1Press,10,2,12,4,);
B(B_F,@LT-2,,13,1,18,5,);
L(12,3,12,7);
L(12,7,13,7);
L(11,4,13,4);
L(19,3,19,6);
L(19,6,20,6);
L(18,7,20,7);
L(25,6,28,6);
L(26,7,26,10);
L(26,7,28,7);
L(27,8,27,11);
L(27,8,28,8);
L(12,3,13,3);
L(18,3,19,3);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_F,@GT-2,,13,5,18,9,);
B(B_VARIN,,1.0,9,3,11,5,);
B(B_F,@OR-2,,20,4,25,8,);
B(B_F,sel,,28,4,33,9,);
B(B_VAROUT,,MRdrill1Press,33,5,35,7,);
B(B_VARIN,,MRdrill1Press,24,9,26,11,);
B(B_VARIN,,350.0,25,10,27,12,);
B(B_VARIN,,999.9,11,7,13,9,);
B(B_VARIN,,MRdrill1Press,10,2,12,4,);
B(B_F,@LT-2,,13,1,18,5,);
L(12,3,12,7);
L(12,7,13,7);
L(11,4,13,4);
L(19,3,19,6);
L(19,6,20,6);
L(18,7,20,7);
L(25,6,28,6);
L(26,7,26,10);
L(26,7,28,7);
L(27,8,27,11);
L(27,8,28,8);
L(12,3,13,3);
L(18,3,19,3);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_F,@GT-2,,13,5,18,9,);
B(B_VARIN,,1.0,9,3,11,5,);
B(B_F,@OR-2,,20,4,25,8,);
B(B_F,sel,,28,4,33,9,);
B(B_VAROUT,,MRvib1ClampPress,33,5,35,7,);
B(B_VARIN,,MRvib1ClampPress,24,9,26,11,);
B(B_VARIN,,320.0,25,10,27,12,);
B(B_VARIN,,999.9,11,7,13,9,);
B(B_VARIN,,MRvib1ClampPress,10,2,12,4,);
B(B_F,@LT-2,,13,1,18,5,);
L(12,3,12,7);
L(12,7,13,7);
L(11,4,13,4);
L(19,3,19,6);
L(19,6,20,6);
L(18,7,20,7);
L(25,6,28,6);
L(26,7,26,10);
L(26,7,28,7);
L(27,8,27,11);
L(27,8,28,8);
L(12,3,13,3);
L(18,3,19,3);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_F,@GT-2,,13,5,18,9,);
B(B_VARIN,,0.0,9,3,11,5,);
B(B_F,@OR-2,,20,4,25,8,);
B(B_F,sel,,28,4,33,9,);
B(B_VAROUT,,MRvib1ExcTime,33,5,35,7,);
B(B_VARIN,,MRvib1ExcTime,24,9,26,11,);
B(B_VARIN,,4.0,25,10,27,12,);
B(B_VARIN,,99.9,11,7,13,9,);
B(B_VARIN,,MRvib1ExcTime,10,2,12,4,);
B(B_F,@LT-2,,13,1,18,5,);
L(12,3,12,7);
L(12,7,13,7);
L(11,4,13,4);
L(19,3,19,6);
L(19,6,20,6);
L(18,7,20,7);
L(25,6,28,6);
L(26,7,26,10);
L(26,7,28,7);
L(27,8,27,11);
L(27,8,28,8);
L(12,3,13,3);
L(18,3,19,3);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 15 ;
        NETWORK_BODY
B(B_F,@GT-2,,13,7,18,11,);
B(B_VARIN,,1.0,9,5,11,7,);
B(B_F,@OR-2,,20,6,25,10,);
B(B_F,sel,,28,6,33,11,);
B(B_VAROUT,,MRgrab1VolOpen,33,7,35,9,);
B(B_VARIN,,MRgrab1VolOpen,24,11,26,13,);
B(B_VARIN,,300.0,25,12,27,14,);
B(B_VARIN,,9999.9,11,9,13,11,);
B(B_VARIN,,MRgrab1VolOpen,10,4,12,6,);
B(B_COMMENT,,set input areas of hydr. grab,1,1,27,2,);
B(B_F,@LT-2,,13,3,18,7,);
L(12,5,12,9);
L(12,9,13,9);
L(11,6,13,6);
L(19,5,19,8);
L(19,8,20,8);
L(18,9,20,9);
L(25,8,28,8);
L(26,9,26,12);
L(26,9,28,9);
L(27,10,27,13);
L(27,10,28,10);
L(12,5,13,5);
L(18,5,19,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_F,@GT-2,,13,5,18,9,);
B(B_VARIN,,1.0,9,3,11,5,);
B(B_F,@OR-2,,20,4,25,8,);
B(B_F,sel,,28,4,33,9,);
B(B_VAROUT,,MRgrab1VolClose,33,5,35,7,);
B(B_VARIN,,MRgrab1VolClose,24,9,26,11,);
B(B_VARIN,,300.0,25,10,27,12,);
B(B_VARIN,,9999.9,11,7,13,9,);
B(B_VARIN,,MRgrab1VolClose,10,2,12,4,);
B(B_F,@LT-2,,13,1,18,5,);
L(12,3,12,7);
L(12,7,13,7);
L(11,4,13,4);
L(19,3,19,6);
L(19,6,20,6);
L(18,7,20,7);
L(25,6,28,6);
L(26,7,26,10);
L(26,7,28,7);
L(27,8,27,11);
L(27,8,28,8);
L(12,3,13,3);
L(18,3,19,3);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_F,@GT-2,,13,5,18,9,);
B(B_VARIN,,1.0,9,3,11,5,);
B(B_F,@OR-2,,20,4,25,8,);
B(B_F,sel,,28,4,33,9,);
B(B_VAROUT,,MRgrab1PresOpen,33,5,35,7,);
B(B_VARIN,,MRgrab1PresOpen,24,9,26,11,);
B(B_VARIN,,300.0,25,10,27,12,);
B(B_VARIN,,999.9,11,7,13,9,);
B(B_VARIN,,MRgrab1PresOpen,10,2,12,4,);
B(B_F,@LT-2,,13,1,18,5,);
L(12,3,12,7);
L(12,7,13,7);
L(11,4,13,4);
L(19,3,19,6);
L(19,6,20,6);
L(18,7,20,7);
L(25,6,28,6);
L(26,7,26,10);
L(26,7,28,7);
L(27,8,27,11);
L(27,8,28,8);
L(12,3,13,3);
L(18,3,19,3);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_F,@GT-2,,13,5,18,9,);
B(B_VARIN,,1.0,9,3,11,5,);
B(B_F,@OR-2,,20,4,25,8,);
B(B_F,sel,,28,4,33,9,);
B(B_VAROUT,,MRgrab1PresClose,33,5,35,7,);
B(B_VARIN,,MRgrab1PresClose,24,9,26,11,);
B(B_VARIN,,300.0,25,10,27,12,);
B(B_VARIN,,999.9,11,7,13,9,);
B(B_VARIN,,MRgrab1PresClose,10,2,12,4,);
B(B_F,@LT-2,,13,1,18,5,);
L(12,3,12,7);
L(12,7,13,7);
L(11,4,13,4);
L(19,3,19,6);
L(19,6,20,6);
L(18,7,20,7);
L(25,6,28,6);
L(26,7,26,10);
L(26,7,28,7);
L(27,8,27,11);
L(27,8,28,8);
L(12,3,13,3);
L(18,3,19,3);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 29 ;
        NETWORK_BODY
B(B_F,sel,,14,3,19,8,);
B(B_F,sel,,29,2,34,7,);
B(B_F,sel,,44,1,49,6,);
B(B_VAROUT,,SRMequipVolume1,49,2,51,4,);
B(B_F,sel,,14,8,19,13,);
B(B_F,sel,,29,7,34,12,);
B(B_F,sel,,44,6,49,11,);
B(B_VARIN,,MRham1Volume,25,5,27,7,);
B(B_VARIN,,MXenablHamOperat,26,3,28,5,);
B(B_VARIN,,MXenablDrillOper,41,2,43,4,);
B(B_VARIN,,MRdrill1Volume,40,4,42,6,);
B(B_VARIN,,0.0,10,5,12,7,);
B(B_VARIN,,MXenablVibOperat,11,4,13,6,);
B(B_VAROUT,,SRMequipPress1,49,7,51,9,);
B(B_VARIN,,MRdrill1Press,42,9,44,11,);
B(B_VARIN,,MRham1Press,27,10,29,12,);
B(B_F,sel,,14,18,19,23,);
B(B_F,sel,,14,23,19,28,);
B(B_VARIN,,MRvib1Volume,9,6,11,8,);
B(B_VARIN,,MRvib1Press,9,11,11,13,);
B(B_VARIN,,MRvib1ClampPress,9,21,11,23,);
B(B_VARIN,,MRvib1ExcTime,9,26,11,28,);
B(B_VAROUT,,SRMequipPress2,19,19,21,21,);
B(B_VAROUT,,SRMvibExcTime,19,24,21,26,);
B(B_F,sel,,14,13,19,18,);
B(B_VAROUT,,SRMequipVolume2,19,14,21,16,);
B(B_VARIN,,0.0,9,16,11,18,);
L(19,5,29,5);
L(34,4,44,4);
L(19,10,29,10);
L(34,9,44,9);
L(42,5,44,5);
L(43,3,44,3);
L(43,3,43,8);
L(43,8,44,8);
L(28,9,29,9);
L(28,4,28,9);
L(28,4,29,4);
L(27,6,29,6);
L(13,5,14,5);
L(13,10,14,10);
L(12,11,14,11);
L(12,6,14,6);
L(13,20,14,20);
L(12,21,14,21);
L(13,25,14,25);
L(12,26,14,26);
L(11,12,14,12);
L(11,7,14,7);
L(12,6,12,26);
L(13,5,13,25);
L(11,22,14,22);
L(11,27,14,27);
L(11,17,14,17);
L(13,15,14,15);
L(12,16,14,16);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 28 ;
        NETWORK_BODY
B(B_VARIN,,MXenabHyGrabOper,11,2,13,4,);
B(B_VARIN,,MXadLEHydrGrab,11,3,13,5,);
B(B_VARIN,,MXadSBHydrGrab,11,4,13,6,);
B(B_VARIN,,MXadSMHydrGrab,11,5,13,7,);
B(B_VARIN,,MXenabHyGrabHose,11,6,13,8,);
B(B_VARIN,,MXenabKelGrabOpe,11,7,13,9,);
B(B_F,@OR-6,,13,1,18,9,);
B(B_F,sel,,19,7,24,12,);
B(B_F,sel,,19,12,24,17,);
B(B_VARIN,,0.0,15,9,17,11,);
B(B_F,sel,,19,17,24,22,);
B(B_F,sel,,19,22,24,27,);
B(B_VARIN,,MRgrab1VolOpen,14,10,16,12,);
B(B_VARIN,,MRgrab1VolClose,14,15,16,17,);
B(B_VARIN,,MRgrab1PresOpen,14,20,16,22,);
B(B_VARIN,,MRgrab1PresClose,14,25,16,27,);
B(B_VAROUT,,SRMgrabVolOpen,24,8,26,10,);
B(B_VAROUT,,SRMgrabVolClose,24,13,26,15,);
B(B_VAROUT,,SRMgrabPresOpen,24,18,26,20,);
B(B_VAROUT,,SRMgrabPresClose,24,23,26,25,);
L(18,9,19,9);
L(18,14,19,14);
L(17,15,19,15);
L(17,10,19,10);
L(16,16,19,16);
L(16,11,19,11);
L(18,19,19,19);
L(18,24,19,24);
L(17,25,19,25);
L(17,20,19,20);
L(16,26,19,26);
L(16,21,19,21);
L(18,3,18,24);
L(17,10,17,25);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value ad ground pressure display present or not present,1,1,27,2,);
B(B_FB,CorrValue_Bool,CorrValue_Bool1,11,4,23,10,);
B(B_VARIN,,CXadGroundPress,9,8,11,10,);
B(B_VARIN,,FALSE,9,5,11,7,);
B(B_VARIN,,FALSE,9,6,11,8,);
B(B_VARIN,,TRUE,9,7,11,9,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value rope length correction by main boom movement,1,1,27,2,);
B(B_FB,CorrValue_Bool,CorrValue_Bool2,11,4,23,10,);
B(B_VARIN,,CXadRopLenCorrec,9,8,11,10,);
B(B_VARIN,,FALSE,9,5,11,7,);
B(B_VARIN,,FALSE,9,6,11,8,);
B(B_VARIN,,TRUE,9,7,11,9,);
        END_NETWORK_BODY
    END_NET_WORK
END_BODY
END_PROGRAM

PROGRAM SCserviceV030
	VAR_EXTERNAL 
		IDimmoInput1: DINT:=0;
			(*IMMO input 1*)
		IDimmoInput2: DINT:=0;
			(*IMMO input 2*)
		QDimmoOutput1: DINT:=0;
			(*IMMO output 1*)
		QDimmoOutput2: DINT:=0;
			(*IMMO output 2*)
		MXservSetAckn: BOOL:=FALSE;
			(*service set ackowledge*)
		MXservSetWarnBef: BOOL:=FALSE;
			(*service set warning before service time*)
		MXservSetWarnAft: BOOL:=FALSE;
			(*service set warning after service time*)
		MXservSetNotAckn: BOOL:=FALSE;
			(*service set not ackowledge*)
		MXacModulIsActiv: BOOL:=FALSE;
			(*ac missing IMMO Module*)
		MXacKeyIsMaster: BOOL:=FALSE;
			(*ac actual key is master*)
		MXacCheckOk: BOOL:=FALSE;
			(*ac check of ignition key ompleted*)
		MXacReleasMachin: BOOL:=FALSE;
			(*ac releases machine*)
		MXenabRemAccess: BOOL:=TRUE;
			(*enable remote access by modem*)
		MXremAccessState: BOOL:=FALSE;
			(*actual state of remote access by modem*)
		MRservHourToNext: REAL:=0.0;
			(*service hours until next service*)
		WXMservButtAckn: BOOL:=FALSE;
			(*wizard acknowledge button *)
		MDacKeyIndex: UDINT:=0;
			(*AC index of the actual ignition key*)
		MDacKeySerial: UDINT:=0;
			(*AC serial of the actual ignition key*)
		SXserviceWarning: BOOL:=FALSE;
			(*service warning*)
		SXserviceNotAckn: BOOL:=FALSE;
			(*service was not confirmed in time*)
		SXMservButtAckn: BOOL:=FALSE;
			(*service acknowledge button *)
		SRservLastAckn: REAL:=0.0;
			(*service operating hours at last service*)
		SRservNextAckn: REAL:=0.0;
			(*service operating hours at next service*)
		SRservInterval: REAL:=0.0;
			(*service interval hours*)
		SRservAcknBef: REAL:=0.0;
			(*service acknowledge hours before*)
		SXacAcActive: BOOL:=FALSE;
			(*AC active*)
		SXacOlActive: BOOL:=FALSE;
			(*AC operation lock system active*)
		SXacActKeyValid: BOOL:=FALSE;
			(*AC actual ignition key is valid*)
		SXacActKeyMaster: BOOL:=FALSE;
		SXMacKeyNameChan: BOOL:=FALSE;
			(*Name des aktuellen Schlüsseles wurde geändert*)
		SXremAccessState: BOOL:=FALSE;
			(*actual remote access*)
		SXMenabRemAccess: BOOL:=FALSE;
			(*enable remote access*)
		SDacNumberOfKeys: DINT:=0;
			(*AC number of kown keys*)
		SDacActKeyPrio: DINT:=0;
			(*AC priority of the actual ignition key*)
	END_VAR
	VAR_EXTERNAL CONSTANT
		MSG_APP: UDINT:=0;
			(* message group "applicat" *)
		MSG_APP_SERVICE: UDINT:=0;
			(* message subgroup "service" for group "applicat" *)
		MSG_APP_MACHINE: UDINT:=0;
			(* message subgroup "machine" for group "applicat" *)
		MSG_INFO: UINT:=0;
			(* message priority: "info" *)
		MSG_ERROR: UINT:=0;
			(* message priority: "error" *)
	END_VAR
	VAR_EXTERNAL RETAIN
		MXaccessControl: BOOL:=FALSE;
			(*access control activated*)
		MXoperatLock: BOOL:=FALSE;
			(*operation lock system activated*)
		MXmod107SetCriti: BOOL:=FALSE;
			(*set immo module 107 critical*)
		MXacWasActivated: BOOL:=FALSE;
			(*AC was activated*)
		MXacLeaNextKey: BOOL:=FALSE;
			(*AC learn next key*)
		MXacLeaNextKeyMa: BOOL:=FALSE;
			(*AC learn next key as Master*)
		MXacDelNextKey: BOOL:=FALSE;
			(*AC delete next key*)
		MXserviceWarnBef: BOOL:=FALSE;
			(*service warning before service time*)
		MXserviceWarnAft: BOOL:=FALSE;
			(*service warning after service time*)
		MXserviceAckn: BOOL:=FALSE;
			(*service acknowledged*)
		MXserviceNotAckn: BOOL:=FALSE;
			(*service not acknowledged*)
		MDacKeySeriaLast: UDINT:=0;
			(*AC serial of the last ignition key*)
		MDengOperatHour: REAL:=0.0;
			(*operation hours diesel engine*)
		MRservHourNext: REAL:=0.0;
			(*service hours next service*)
		MRservLastAckn: REAL:=0.0;
			(*service: hours at last service acknowledge*)
	END_VAR
	VAR_EXTERNAL CONSTANT RETAIN
		CXaccessControl: BOOL:=FALSE;
			(*access control activated*)
		CXoperatLock: BOOL:=FALSE;
			(*operation lock system activated*)
		CDservInterval: REAL:=0.0;
			(*service interval hours*)
		CDservAcknBef: REAL:=0.0;
			(*service hours warning before interval*)
		CDservAcknAfter: REAL:=0.0;
			(*service hours warning after interval*)
	END_VAR
	VAR 
		SXacKeyMatched: BOOL:=FALSE;
		SXacImmoIsBusy: BOOL:=FALSE;
		LXinitOk: BOOL:=FALSE;
		LXdataValid: BOOL:=FALSE;
		LXkeyDetected: BOOL:=FALSE;
		LXkeyNameOk: BOOL:=FALSE;
		LXkeyMatched: BOOL:=FALSE;
		LXkeyIsMaster: BOOL:=FALSE;
		LXkeyChanged: BOOL:=FALSE;
		LXnoAcActive: BOOL:=FALSE;
		LXmoduleError: BOOL:=FALSE;
		LXimmoIsBusy: BOOL:=FALSE;
		LXdbScript1Busy: BOOL:=FALSE;
		LXdbScript2Busy: BOOL:=FALSE;
		LXdbScript3Busy: BOOL:=FALSE;
		LXlearnMaster: BOOL:=FALSE;
		LDacActKeyPrio: UDINT:=0;
			(*AC priority of the actual ignition key*)
		LDengOpHour: UDINT:=0;
		LDservHourAckn: UDINT:=0;
		LDengServHour: UDINT:=0;
		TON1: TON;
		TON2: TON;
		TP1: TP;
		F_TRIG1: F_TRIG;
		R_TRIG1: R_TRIG;
		R_TRIG2: R_TRIG;
		R_TRIG3: R_TRIG;
		R_TRIG4: R_TRIG;
		R_TRIG5: R_TRIG;
		R_TRIG_NA: R_TRIG;
		R_TRIG_WB: R_TRIG;
		R_TRIG_A: R_TRIG;
		RS_NA: RS;
		RS_WB: RS;
		RS_WA: RS;
		RS_A: RS;
		SR1: SR;
		SR2: SR;
		RS1: RS;
		RS2: RS;
		RS3: RS;
		RS4: RS;
		Message1: MSGGrpEdgePut2UD;
		Message2: MSGGrpEdgePut2UD;
		Message3: MSGGrpEdgePut2UD;
		Message4: MSGGrpEdgePut2UD;
		Message5: MSGGrpEdgePut2UD;
		Message_Init: MSGGrpEdgePut2UD;
		DatabaseScript1: DatabaseScript;
		DatabaseScript2: DatabaseScript;
		DatabaseScript3: DatabaseScript;
		SecKey1: SecKeyType;
		SecInfo1: SecInfo;
		SecIMMO1: SecIMMO;
		CorrValue_Real1: CorrValue_Real;
		CorrValue_Real2: CorrValue_Real;
		CorrValue_Real3: CorrValue_Real;
	END_VAR
'FBD'
BODY
    WORKSPACE
        NETWORK_LIST_TYPE := NWTYPEFBD ;
        ACTIVE_NETWORK := 0 ;
    END_WORKSPACE
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_VARIN,,LXinitOk,9,4,11,6,);
B(B_COMMENT,,init first time,1,1,27,2,);
B(B_F,not,,11,3,16,6,);
B(B_JUMP,,init,16,4,18,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VAROUT,,MXenabRemAccess,11,1,13,3,);
B(B_VARIN,,SXMenabRemAccess,9,1,11,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VAROUT,,SXremAccessState,11,1,13,3,);
B(B_VARIN,,MXremAccessState,9,1,11,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 49 ;
        NETWORK_BODY
B(B_VARIN,,IDimmoInput1,9,9,11,11,);
B(B_VARIN,,IDimmoInput2,9,10,11,12,);
B(B_VAROUT,,QDimmoOutput1,21,9,23,11,);
B(B_VAROUT,,QDimmoOutput2,21,10,23,12,);
B(B_COMMENT,,check IMMO,1,1,27,2,);
B(B_FB,SecInfo,SecInfo1,21,3,28,8,);
B(B_VAROUT,,MDacKeyIndex,30,6,32,8,);
B(B_F,udint_to_dint,,30,3,41,6,);
B(B_VAROUT,,SDacNumberOfKeys,41,4,43,6,);
B(B_VAROUT,,LXdataValid,34,10,36,12,);
B(B_F,@AND-2,,29,9,34,13,);
B(B_F,@AND-2,,35,13,40,17,);
B(B_F,@AND-2,,35,17,40,21,N);
B(B_F,@AND-2,,35,21,40,25,);
B(B_F,@AND-2,,35,25,40,29,N);
B(B_FB,RS,RS1,40,13,45,17,);
B(B_VAROUT,,LXkeyDetected,45,14,47,16,);
B(B_FB,RS,RS2,40,21,45,25,);
B(B_VAROUT,,LXkeyMatched,45,22,47,24,);
B(B_F,sel,,35,37,40,42,);
B(B_VAROUT,,MDacKeySerial,40,38,42,40,);
B(B_F,sel,,35,42,40,47,);
B(B_VAROUT,,LDacActKeyPrio,40,43,42,45,);
B(B_F,udint_to_dint,,40,45,51,48,);
B(B_VAROUT,,SDacActKeyPrio,51,46,53,48,);
B(B_COMMENT,,ACHTUNG:ø^Im init-Teil 2 Netzwerke löschen~ wenn die NRS funktionieren!,64,9,95,26,);
B(B_FB,SecKeyType,SecKey1,11,8,21,18,);
B(B_F,@AND-2,,35,29,40,33,);
B(B_F,@AND-2,,35,33,40,37,N);
B(B_FB,RS,RS3,40,29,45,33,);
B(B_VAROUT,,LXkeyIsMaster,45,30,47,32,);
B(B_VARIN,,MDacKeySerial,26,39,28,41,);
B(B_VARIN,,LDacActKeyPrio,26,44,28,46,);
B(B_F,@EQ-2,,23,29,28,33,);
B(B_VARIN,,1,21,31,23,33,);
B(B_COMMENT,,Der Prioritätslevel des Schlüsselsø^schaltet den Level für dieø^Bildschirmschnittstelle frei.,7,19,21,22,);
L(30,5,30,6);
L(28,5,29,5);
L(28,7,30,7);
L(28,6,30,6);
L(29,5,29,11);
L(21,12,29,12);
L(40,16,40,19);
L(40,24,40,27);
L(33,13,33,19);
L(33,19,35,19);
L(33,15,35,15);
L(34,16,35,16);
L(34,20,35,20);
L(34,24,35,24);
L(34,28,35,28);
L(32,23,35,23);
L(34,39,35,39);
L(31,41,35,41);
L(34,11,34,44);
L(21,16,30,16);
L(21,15,31,15);
L(21,14,32,14);
L(21,13,33,13);
L(32,14,32,27);
L(32,27,35,27);
L(34,44,35,44);
L(30,46,35,46);
L(40,44,40,47);
L(40,32,40,35);
L(34,32,35,32);
L(34,36,35,36);
L(28,40,35,40);
L(28,45,35,45);
L(28,31,35,31);
L(32,35,35,35);
L(23,17,23,31);
L(21,17,23,17);
L(32,31,32,35);
L(31,15,31,41);
L(30,16,30,46);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_VARIN,,MXoperatLock,9,2,11,4,);
B(B_VARIN,,MXaccessControl,9,3,11,5,);
B(B_F,@AND-2,,11,1,16,5,NN);
B(B_VAROUT,,LXnoAcActive,16,2,18,4,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_F,@AND-2,,17,2,22,6,);
B(B_FB,SR,SR1,27,2,32,6,);
B(B_VARIN,,FALSE,25,4,27,6,);
B(B_FB,TON,TON1,11,2,16,6,N);
B(B_VARIN,,MXacModulIsActiv,9,3,11,5,);
B(B_VARIN,,T#5s,9,4,11,6,);
B(B_COMMENT,,Wenn sich das IMMO Modul in den ersten 5 Sekunden nach Zündung Ein nicht meldet~ø^dann wird das Gerät gesperrt. Wenn sich das Modul später meldet wird ignoriert~ø^der Monitor ist ebenfalls gesperrt. Die Zündung muß aus und wieder eingeschalte,0,0,0,0,0,0,0,);
B(B_FB,TP,TP1,12,7,17,11,);
B(B_VARIN,,TRUE,10,8,12,10,);
B(B_VARIN,,T#6s,10,9,12,11,);
B(B_VAROUT,,LXmoduleError,32,3,34,5,);
L(22,4,27,4);
L(17,5,17,9);
L(16,4,17,4);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_FB,SR,SR2,21,2,26,6,);
B(B_VARIN,,FALSE,19,4,21,6,);
B(B_VAROUT,,MXacCheckOk,26,3,28,5,);
B(B_F,@OR-3,,11,2,16,7,);
B(B_VARIN,,LXdataValid,9,3,11,5,);
B(B_VARIN,,LXmoduleError,9,4,11,6,);
B(B_VARIN,,LXnoAcActive,9,5,11,7,);
L(16,4,21,4);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 19 ;
        NETWORK_BODY
B(B_F,@AND-3,,24,5,29,10,N);
B(B_F,@AND-2,,24,1,29,5,);
B(B_F,@EQ-2,,14,10,19,14,);
B(B_F,@EQ-2,,14,14,19,18,);
B(B_VARIN,,LDacActKeyPrio,11,11,13,13,);
B(B_VARIN,,64,10,12,12,14,);
B(B_VARIN,,32768,10,16,12,18,);
B(B_F,@OR-3,,19,9,24,14,);
B(B_VARIN,,LXkeyMatched,17,3,19,5,);
B(B_VARIN,,MXaccessControl,22,7,24,9,);
B(B_VARIN,,MXoperatLock,21,2,23,4,);
B(B_F,@OR-2,,29,4,34,8,);
B(B_FB,RS,RS4,41,4,46,8,);
B(B_VARIN,,LXnoAcActive,44,1,46,3,);
B(B_F,@OR-2,,46,3,51,7,);
B(B_VAROUT,,MXacReleasMachin,51,4,53,6,);
B(B_VARIN,,LXmoduleError,39,6,41,8,);
L(23,7,24,7);
L(23,3,24,3);
L(13,12,14,12);
L(13,12,13,16);
L(13,16,14,16);
L(12,13,14,13);
L(12,17,14,17);
L(19,13,19,16);
L(19,4,19,11);
L(19,4,24,4);
L(24,9,24,11);
L(29,3,29,6);
L(23,3,23,7);
L(34,6,41,6);
L(46,2,46,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 15 ;
        NETWORK_BODY
B(B_COMMENT,,set message by key change,1,1,27,2,);
B(B_F,@AND-2,,12,6,17,10,N);
B(B_VARIN,,MXacCheckOk,10,8,12,10,);
B(B_VARIN,,LXkeyDetected,10,4,12,6,);
B(B_FB,TON,TON2,17,6,22,10,);
B(B_VARIN,,T#5s,15,10,17,12,);
B(B_F,@OR-2,,22,3,27,7,);
B(B_F,@AND-2,,27,3,32,7,);
B(B_VARIN,,MDacKeySerial,20,11,22,13,);
B(B_VARIN,,MDacKeySeriaLast,20,12,22,14,);
B(B_F,@NE,,22,10,27,14,);
B(B_FB,R_TRIG,R_TRIG1,32,3,39,6,);
B(B_VAROUT,,LXkeyChanged,39,4,41,6,);
L(12,5,12,8);
L(17,9,17,11);
L(12,5,22,5);
L(22,6,22,8);
L(27,6,27,12);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_VARIN,,MSG_APP,9,5,11,7,);
B(B_VARIN,,MSG_APP_MACHINE,9,6,11,8,);
B(B_VARIN,,MSG_INFO,9,8,11,10,);
B(B_VARIN,,16#8500A1CF,9,7,11,9,);
B(B_FB,MSGGrpEdgePut2UD,Message1,11,2,23,12,);
B(B_VARIN,,MDacKeySeriaLast,9,10,11,12,);
B(B_VARIN,,MDacKeySerial,9,9,11,11,);
B(B_VARIN,,LXkeyChanged,9,3,11,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_FB,F_TRIG,F_TRIG1,11,2,18,5,);
B(B_VARIN,,LXkeyChanged,9,3,11,5,);
B(B_F,sel,,18,3,23,8,);
B(B_VAROUT,,MDacKeySeriaLast,23,4,25,6,);
B(B_VARIN,,MDacKeySeriaLast,16,5,18,7,);
B(B_VARIN,,MDacKeySerial,16,6,18,8,);
L(18,4,18,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 15 ;
        NETWORK_BODY
B(B_VARIN,,MSG_APP,14,7,16,9,);
B(B_VARIN,,MSG_APP_SERVICE,14,8,16,10,);
B(B_VARIN,,MSG_INFO,14,10,16,12,);
B(B_VARIN,,16#8700A10A,14,9,16,11,);
B(B_FB,MSGGrpEdgePut2UD,Message2,16,4,28,14,);
B(B_VARIN,,2,9,5,11,7,);
B(B_F,@GT-2,,11,3,16,7,);
B(B_VARIN,,LDacActKeyPrio,9,4,11,6,);
B(B_COMMENT,,set message by key with higher priority than AUTHORIZED USER,1,1,27,2,);
B(B_VARIN,,LDacActKeyPrio,14,11,16,13,);
B(B_VARIN,,MDacKeySerial,14,12,16,14,);
L(16,5,16,6);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_VARIN,,MXaccessControl,10,3,12,5,);
B(B_VAROUT,,SXacAcActive,12,3,14,5,);
B(B_COMMENT,,monitor interaction,1,1,25,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,MXoperatLock,10,1,12,3,);
B(B_VAROUT,,SXacOlActive,12,1,14,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,CDservInterval,10,1,12,3,);
B(B_VAROUT,,SRservInterval,12,1,14,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,CDservAcknBef,10,1,12,3,);
B(B_VAROUT,,SRservAcknBef,12,1,14,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_F,@EQ-2,,12,1,17,5,);
B(B_VARIN,,MDacKeyIndex,10,2,12,4,);
B(B_VARIN,,1,10,3,12,5,);
B(B_COMMENT,,Wenn auch andere Schlüssel Master sein können~ø^dann hier Verknüpfungen von Monitor einbauen.,30,2,50,4,);
B(B_F,@AND-2,,17,3,22,7,);
B(B_VARIN,,LXkeyIsMaster,15,5,17,7,);
B(B_VAROUT,,MXacKeyIsMaster,22,4,24,6,);
B(B_VAROUT,,SXacActKeyMaster,22,5,24,7,);
L(22,5,22,6);
L(17,3,17,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_FB,DatabaseScript,DatabaseScript1,13,4,25,9,);
B(B_VARIN,,1,11,5,13,7,);
B(B_VARIN,,LXkeyMatched,11,6,13,8,);
B(B_F,@OR-2,,25,4,30,8,00N);
B(B_VAROUT,,LXkeyNameOk,30,5,32,7,);
B(B_COMMENT,,Der Name des aktuellen Schlüssel wird nach dem Start in ein spezielles Feld in der Database kopiert,31,7,71,9,);
B(B_COMMENT,,Name des Schlüssels aus der Datenbank lesen,1,1,26,2,);
B(B_VAROUT,,LXdbScript1Busy,25,2,27,4,);
L(25,3,25,6);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_F,@AND-2,,13,1,18,5,);
B(B_VAROUT,,SXacActKeyValid,18,2,20,4,);
B(B_VARIN,,LXdataValid,11,2,13,4,);
B(B_VARIN,,LXKeyDetected,11,3,13,5,);
B(B_VAROUT,,SXacKeyMatched,23,5,25,7,);
B(B_VARIN,,LXkeyMatched,16,6,18,8,);
B(B_F,@AND-3,,18,4,23,9,);
B(B_VARIN,,LXkeyNameOk,16,7,18,9,);
L(18,3,18,6);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_COMMENT,,aktuellen Schlüssel im IMMO anlernen,1,1,26,2,);
B(B_FB,SecIMMO,SecIMMO1,23,7,37,12,);
B(B_VAROUT,,LXimmoIsBusy,37,8,39,10,);
B(B_VARIN,,MXacWasActivated,21,10,23,12,);
B(B_VARIN,,LXlearnMaster,16,7,18,9,);
B(B_F,@OR-2,,18,5,23,9,);
B(B_F,@AND-2,,13,3,18,7,);
B(B_VARIN,,SXMacKeyNameChan,11,4,13,6,);
B(B_VARIN,,LXnoAcActive,11,5,13,7,);
L(23,7,23,9);
L(18,5,18,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_VAROUT,,LXlearnMaster,23,7,25,9,);
B(B_VARIN,,FALSE,16,9,18,11,);
B(B_VARIN,,LXlearnMaster,11,4,13,6,);
B(B_F,@AND-2,,13,3,18,7,0N);
B(B_VARIN,,LXimmoIsBusy,11,5,13,7,);
B(B_VARIN,,LXlearnMaster,16,8,18,10,);
B(B_COMMENT,,Reset Variable lear Master,1,1,26,2,);
B(B_F,sel,,18,6,23,11,);
B(B_COMMENT,,ACHTUNG: Die Reihenfolge dieser Netzwerkeø^muß unbedingt eingehalten werden!ø^(Netzwerk vor und nach diesem!),34,3,53,6,);
L(18,5,18,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_VAROUT,,MXacWasActivated,23,7,25,9,);
B(B_VARIN,,FALSE,16,9,18,11,);
B(B_VARIN,,MXacWasActivated,11,4,13,6,);
B(B_F,@AND-2,,13,3,18,7,0N);
B(B_VARIN,,LXimmoIsBusy,11,5,13,7,);
B(B_VARIN,,MXacWasActivated,16,8,18,10,);
B(B_COMMENT,,Reset Variable IMMO was activated,1,1,26,2,);
B(B_VAROUT,,LXlearnMaster,18,4,20,6,);
B(B_F,sel,,18,6,23,11,);
L(18,5,18,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_FB,DatabaseScript,DatabaseScript2,15,3,27,8,);
B(B_VARIN,,2,13,4,15,6,);
B(B_VARIN,,SXMacKeyNameChan,13,5,15,7,);
B(B_COMMENT,,Der Name des aktuellen Schlüssel wurde im Monitor geändert. Lisual schreibt diesen in ein spezielles Feldø^Mit diesem Scriptaufruf wird der Name von diesem Feld in jenes Feld mit dem KeyIndex kopiert.,32,2,78,4,);
B(B_COMMENT,,Name des Schlüssels in die Datenbank schreiben,1,1,26,2,);
B(B_VAROUT,,LXdbScript2Busy,27,4,29,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_F,sel,,15,1,20,6,);
B(B_VARIN,,SXMacKeyNameChan,13,2,15,4,);
B(B_VARIN,,SXMacKeyNameChan,13,3,15,5,);
B(B_VARIN,,FALSE,13,4,15,6,);
B(B_VAROUT,,SXMacKeyNameChan,20,2,22,4,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_FB,DatabaseScript,DatabaseScript3,15,3,27,8,);
B(B_VARIN,,3,13,4,15,6,);
B(B_VARIN,,MXacWasActivated,13,5,15,7,);
B(B_COMMENT,,Alle Namen aus der Datenbank löschen,1,1,26,2,);
B(B_VAROUT,,LXdbScript3Busy,27,4,29,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_F,@OR-4,,15,1,20,7,);
B(B_VARIN,,LXimmoIsBusy,13,2,15,4,);
B(B_VAROUT,,SXacImmoIsBusy,20,2,22,4,);
B(B_VARIN,,LXdbScript1Busy,13,3,15,5,);
B(B_VARIN,,LXdbScript2Busy,13,4,15,6,);
B(B_VARIN,,LXdbScript3Busy,13,5,15,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 17 ;
        NETWORK_BODY
B(B_COMMENT,,set service information change,1,1,27,2,);
B(B_F,@SUB,,11,6,16,10,);
B(B_VARIN,,MRservHourNext,9,7,11,9,);
B(B_VARIN,,CDservAcknBef,9,8,11,10,);
B(B_F,@GE-2,,16,5,21,9,);
B(B_F,@OR-2,,16,9,21,13,);
B(B_VARIN,,SXMservButtAckn,14,10,16,12,);
B(B_VARIN,,WXMservButtAckn,14,11,16,13,);
B(B_VARIN,,MDengOperatHour,14,4,16,6,);
B(B_F,@AND-2,,22,5,27,9,);
B(B_F,@AND-2,,27,5,32,9,0N);
B(B_FB,R_TRIG,R_TRIG2,32,5,39,8,);
B(B_VAROUT,,MXservSetAckn,39,6,41,8,);
B(B_VARIN,,MXserviceAckn,25,13,27,15,);
B(B_F,sel,,39,8,44,13,);
B(B_VAROUT,,LDservHourAckn,44,9,46,11,);
B(B_VARIN,,LDservHourAckn,37,10,39,12,);
B(B_F,real_to_udint,,28,13,39,16,);
B(B_VARIN,,MRservHourNext,26,14,28,16,);
L(21,8,21,11);
L(21,8,22,8);
L(21,7,22,7);
L(16,5,16,7);
L(27,8,27,14);
L(39,7,39,10);
L(39,12,39,15);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 18 ;
        NETWORK_BODY
B(B_F,@SUB,,16,3,21,7,);
B(B_VARIN,,MRservHourNext,14,4,16,6,);
B(B_VARIN,,CDservAcknBef,14,5,16,7,);
B(B_F,@GE-2,,21,2,26,6,);
B(B_VARIN,,MDengOperatHour,19,1,21,3,);
B(B_F,@AND-2,,26,2,31,6,);
B(B_F,@SUB,,16,11,21,15,);
B(B_F,@GE-2,,21,10,26,14,);
B(B_VARIN,,MDengOperatHour,19,9,21,11,);
B(B_F,@ADD-2,,11,11,16,15,);
B(B_VARIN,,MRservHourNext,9,12,11,14,);
B(B_VARIN,,CDservInterval,9,13,11,15,);
B(B_VARIN,,CDservAcknBef,14,15,16,17,);
B(B_F,@AND-2,,26,9,31,13,N);
B(B_VARIN,,MXserviceAckn,24,7,26,9,);
B(B_F,@OR-2,,31,2,36,6,);
B(B_FB,R_TRIG,R_TRIG3,36,2,43,5,);
B(B_VAROUT,,MXservSetWarnBef,43,3,45,5,);
B(B_COMMENT,,letzter Service wurde nicht quittiert~ø^und der nächste steht bereits an,18,15,32,17,);
L(21,2,21,4);
L(21,10,21,12);
L(16,14,16,16);
L(26,5,26,11);
L(31,5,31,11);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_F,@GE-2,,11,2,16,6,);
B(B_F,@AND-2,,16,2,21,6,0N);
B(B_VARIN,,MRservHourNext,9,4,11,6,);
B(B_VARIN,,MDengOperatHour,9,3,11,5,);
B(B_VARIN,,MXserviceAckn,14,6,16,8,);
B(B_FB,R_TRIG,R_TRIG4,21,2,28,5,);
B(B_VAROUT,,MXservSetWarnAft,28,3,30,5,);
L(16,5,16,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_F,@ADD-2,,11,3,16,7,);
B(B_VARIN,,MRservHourNext,9,5,11,7,);
B(B_VARIN,,CDservAcknAfter,9,4,11,6,);
B(B_VARIN,,MDengOperatHour,14,1,16,3,);
B(B_F,@GE-2,,16,2,21,6,);
B(B_F,@AND-3,,22,2,27,7,0NN);
B(B_VARIN,,MXserviceAckn,19,7,21,9,);
B(B_VARIN,,MXserviceNotAckn,20,8,22,10,);
B(B_FB,R_TRIG,R_TRIG5,27,2,34,5,);
B(B_VAROUT,,MXservSetNotAckn,34,3,36,5,);
L(16,2,16,4);
L(21,4,22,4);
L(21,5,22,5);
L(21,5,21,8);
L(22,6,22,9);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 25 ;
        NETWORK_BODY
B(B_COMMENT,,count service,1,1,27,2,);
B(B_F,sel,,26,16,31,21,);
B(B_F,@ADD-2,,21,20,26,24,);
B(B_VARIN,,CDservInterval,19,22,21,24,);
B(B_VARIN,,MRservHourNext,19,18,21,20,);
B(B_VAROUT,,MRservHourNext,31,17,33,19,);
B(B_F,@OR-3,,21,12,26,17,);
B(B_VARIN,,MXserviceAckn,13,16,15,18,);
B(B_F,@AND-2,,15,14,20,18,0N);
B(B_VARIN,,MXservSetWarnBef,13,15,15,17,);
B(B_VARIN,,MXservSetAckn,18,12,20,14,);
B(B_F,@SUB,,11,3,16,7,);
B(B_VARIN,,MDengOperatHour,9,4,11,6,);
B(B_VARIN,,MRservHourNext,9,5,11,7,);
B(B_F,@SUB,,11,7,16,11,);
B(B_F,@GE-2,,16,6,21,10,);
B(B_VARIN,,CDservAcknBef,9,9,11,11,);
B(B_VARIN,,CDservInterval,9,8,11,10,);
B(B_COMMENT,,Wenn die Betriebsstunden aus irgeneinem Grund plötzlich weit über MRservHourNext liegen~ø^so wird dieser erhöht~ bis er im Bereich der aktuellen Betriebsstunden liegt.,17,4,51,6,);
L(21,19,21,22);
L(26,20,26,22);
L(21,19,26,19);
L(26,14,26,18);
L(20,16,21,16);
L(20,15,21,15);
L(20,13,20,15);
L(16,5,16,8);
L(21,8,21,14);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_FB,RS,RS_WB,16,4,21,8,);
B(B_VAROUT,,MXserviceWarnBef,21,5,23,7,);
B(B_F,@OR-2,,11,7,16,11,);
B(B_VARIN,,MXservSetAckn,9,8,11,10,);
B(B_VARIN,,MXservSetWarnAft,9,9,11,11,);
B(B_VARIN,,MXservSetWarnBef,14,5,16,7,);
B(B_COMMENT,,set service information,1,1,27,2,);
B(B_COMMENT,,ACHTUNG: das RS wird im init-Teil initialisiert,22,8,47,10,);
L(16,7,16,9);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_FB,RS,RS_WA,16,2,21,6,);
B(B_VAROUT,,MXserviceWarnAft,21,3,23,5,);
B(B_F,@OR-2,,11,5,16,9,);
B(B_VARIN,,MXservSetAckn,9,6,11,8,);
B(B_VARIN,,MXservSetNotAckn,9,7,11,9,);
B(B_VARIN,,MXservSetWarnAft,14,3,16,5,);
B(B_COMMENT,,ACHTUNG: das RS wird im init-Teil initialisiert,22,6,47,8,);
L(16,5,16,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_F,@OR-2,,11,1,16,5,);
B(B_VAROUT,,SXserviceWarning,16,2,18,4,);
B(B_VARIN,,MXserviceWarnBef,9,2,11,4,);
B(B_VARIN,,MXserviceWarnAft,9,3,11,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_FB,RS,RS_A,16,2,21,6,);
B(B_F,@OR-2,,11,5,16,9,);
B(B_VARIN,,MXservSetWarnBef,9,6,11,8,);
B(B_VARIN,,MXservSetNotAckn,9,7,11,9,);
B(B_VARIN,,MXservSetAckn,14,3,16,5,);
B(B_VAROUT,,MXserviceAckn,21,3,23,5,);
B(B_COMMENT,,ACHTUNG: das RS wird im init-Teil initialisiert,22,6,47,8,);
L(16,5,16,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_FB,RS,RS_NA,16,2,21,6,);
B(B_F,@OR-2,,11,5,16,9,);
B(B_VARIN,,MXservSetAckn,9,6,11,8,);
B(B_VARIN,,MXservSetWarnBef,9,7,11,9,);
B(B_VARIN,,MXservSetNotAckn,14,3,16,5,);
B(B_VAROUT,,SXserviceNotAckn,21,2,23,4,);
B(B_VAROUT,,MXserviceNotAckn,21,3,23,5,);
B(B_COMMENT,,ACHTUNG: das RS wird im init-Teil initialisiert,22,6,47,8,);
L(16,5,16,7);
L(21,3,21,4);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_F,sel,,11,1,16,6,);
B(B_VARIN,,MDengOperatHour,9,4,11,6,);
B(B_VARIN,,MXservSetAckn,9,2,11,4,);
B(B_VARIN,,MRservLastAckn,9,3,11,5,);
B(B_VAROUT,,MRservLastAckn,16,2,18,4,);
B(B_VAROUT,,SRservLastAckn,16,1,18,3,);
L(16,2,16,3);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_F,@SUB,,11,3,16,7,);
B(B_VARIN,,MDengOperatHour,9,5,11,7,);
B(B_VARIN,,MRservHourNext,9,4,11,6,);
B(B_VAROUT,,MRservHourToNext,16,4,18,6,);
B(B_VAROUT,,SRservNextAckn,11,1,13,3,);
L(11,2,11,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 5 ;
        NETWORK_BODY
B(B_VARIN,,MDengOperatHour,9,2,11,4,);
B(B_F,real_to_udint,,11,1,22,4,);
B(B_VAROUT,,LDengOpHour,22,2,24,4,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 5 ;
        NETWORK_BODY
B(B_VARIN,,MRservHourNext,9,2,11,4,);
B(B_F,real_to_udint,,11,1,22,4,);
B(B_VAROUT,,LDengServHour,22,2,24,4,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_VARIN,,MSG_APP,16,4,18,6,);
B(B_VARIN,,MSG_APP_SERVICE,16,5,18,7,);
B(B_VARIN,,MSG_INFO,16,7,18,9,);
B(B_VARIN,,16#8700A10C,16,6,18,8,);
B(B_VARIN,,LDengServHour,16,8,18,10,);
B(B_VARIN,,LDengOpHour,16,9,18,11,);
B(B_FB,MSGGrpEdgePut2UD,Message3,18,1,30,11,);
B(B_FB,R_TRIG,R_TRIG_NA,11,1,18,4,);
B(B_VARIN,,MXserviceNotAckn,9,2,11,4,);
B(B_COMMENT,,ACHTUNG: der R_TRIG wird im init-Teil initialisiert,33,2,58,4,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_VARIN,,MSG_APP,16,4,18,6,);
B(B_VARIN,,MSG_APP_SERVICE,16,5,18,7,);
B(B_VARIN,,MSG_INFO,16,7,18,9,);
B(B_VARIN,,16#8700A10B,16,6,18,8,);
B(B_VARIN,,LDengServHour,16,8,18,10,);
B(B_VARIN,,LDengOpHour,16,9,18,11,);
B(B_FB,MSGGrpEdgePut2UD,Message4,18,1,30,11,);
B(B_FB,R_TRIG,R_TRIG_WB,11,1,18,4,);
B(B_VARIN,,MXserviceWarnBef,9,2,11,4,);
B(B_COMMENT,,ACHTUNG: der R_TRIG wird im init-Teil initialisiert,33,2,58,4,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_VARIN,,MSG_APP,16,4,18,6,);
B(B_VARIN,,MSG_APP_SERVICE,16,5,18,7,);
B(B_VARIN,,MSG_INFO,16,7,18,9,);
B(B_VARIN,,16#8700A10D,16,6,18,8,);
B(B_VARIN,,LDservHourAckn,16,8,18,10,);
B(B_VARIN,,LDengOpHour,16,9,18,11,);
B(B_FB,MSGGrpEdgePut2UD,Message5,18,1,30,11,);
B(B_FB,R_TRIG,R_TRIG_A,11,1,18,4,);
B(B_VARIN,,MXserviceAckn,9,2,11,4,);
B(B_COMMENT,,ACHTUNG: der R_TRIG wird im init-Teil initialisiert,33,2,58,4,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_F,sel,,12,1,17,6,);
B(B_VARIN,,FALSE,10,4,12,6,);
B(B_VAROUT,,SXMservButtAckn,17,2,19,4,);
B(B_VARIN,,SXMservButtAckn,10,3,12,5,);
B(B_VARIN,,SXMservButtAckn,10,2,12,4,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_F,sel,,12,1,17,6,);
B(B_VARIN,,FALSE,10,4,12,6,);
B(B_VAROUT,,WXMservButtAckn,17,2,19,4,);
B(B_VARIN,,WXMservButtAckn,10,3,12,5,);
B(B_VARIN,,WXMservButtAckn,10,2,12,4,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_RETURN,,,14,1,16,3,);
B(B_VARIN,,TRUE,12,1,14,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL := init: ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_VAROUT,,LXinitOk,14,1,16,3,);
B(B_VARIN,,TRUE,12,1,14,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 14 ;
        NETWORK_BODY
B(B_COMMENT,,check activation of additional device,1,1,27,2,);
B(B_VARIN,,CXaccessControl,8,6,10,8,);
B(B_VARIN,,MXaccessControl,8,7,10,9,);
B(B_F,@AND-2,,10,5,15,9,0N);
B(B_VARIN,,CXoperatLock,8,10,10,12,);
B(B_VARIN,,MXoperatLock,8,11,10,13,);
B(B_F,@AND-2,,10,9,15,13,0N);
B(B_F,@OR-3,,15,4,20,9,);
B(B_VAROUT,,MXacWasActivated,20,5,22,7,);
B(B_VARIN,,MXacWasActivated,13,3,15,5,);
L(15,8,15,11);
L(15,4,15,6);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_COMMENT,,set additional device access control,1,1,27,2,);
B(B_VARIN,,CXaccessControl,9,4,11,6,);
B(B_F,@OR-2,,11,3,16,7,);
B(B_VAROUT,,MXaccessControl,16,4,18,6,);
B(B_VARIN,,MXaccessControl,9,5,11,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_COMMENT,,set additional device opteration control,1,1,27,2,);
B(B_VARIN,,CXoperatLock,9,4,11,6,);
B(B_F,@OR-2,,11,3,16,7,);
B(B_VAROUT,,MXoperatLock,16,4,18,6,);
B(B_VARIN,,MXoperatLock,9,5,11,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_COMMENT,,löschen~ wenn Die NRS fertig sind,1,1,98,3,);
B(B_VARIN,,CXaccessControl,46,5,48,7,);
B(B_VAROUT,,MXaccessControl,48,5,50,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_COMMENT,,löschen~ wenn Die NRS fertig sind,1,6,99,9,);
B(B_VARIN,,CXoperatLock,46,1,48,3,);
B(B_VAROUT,,MXoperatLock,48,1,50,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_COMMENT,,set IMMO Module system critical,1,1,27,2,);
B(B_F,@OR-2,,11,3,16,7,);
B(B_VARIN,,MXoperatLock,9,5,11,7,);
B(B_VARIN,,MXaccessControl,9,4,11,6,);
B(B_VAROUT,,MXmod107SetCriti,16,4,18,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_FB,CorrValue_Real,CorrValue_Real1,11,4,23,10,);
B(B_VARIN,,500.0,9,5,11,7,);
B(B_VARIN,,1.0,9,6,11,8,);
B(B_VARIN,,5000.0,9,7,11,9,);
B(B_VARIN,,CDservInterval,9,8,11,10,);
B(B_COMMENT,,set service interval hours,1,1,27,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_FB,CorrValue_Real,CorrValue_Real2,11,4,23,10,);
B(B_VARIN,,50.0,9,5,11,7,);
B(B_VARIN,,1.0,9,6,11,8,);
B(B_VARIN,,200.0,9,7,11,9,);
B(B_VARIN,,CDservAcknBef,9,8,11,10,);
B(B_COMMENT,,set service hours for warning before interval hours,1,1,27,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_FB,CorrValue_Real,CorrValue_Real3,11,4,23,10,);
B(B_VARIN,,100.0,9,5,11,7,);
B(B_VARIN,,1.0,9,6,11,8,);
B(B_VARIN,,300.0,9,7,11,9,);
B(B_VARIN,,CDservAcknAfter,9,8,11,10,);
B(B_COMMENT,,set service hours for warning after interval hours,1,1,27,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_VARIN,,MXserviceNotAckn,9,2,11,4,);
B(B_VARIN,,MXserviceWarnBef,9,3,11,5,);
B(B_JUMP,,next,16,2,18,4,);
B(B_F,@OR-4,,11,1,16,7,);
B(B_VARIN,,MXserviceAckn,9,5,11,7,);
B(B_VARIN,,MXserviceWarnAft,9,4,11,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 4 ;
        NETWORK_BODY
B(B_VARIN,,TRUE,9,1,11,3,);
B(B_VAROUT,,MXserviceAckn,11,1,13,3,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_VARIN,,MDengOperatHour,9,6,11,8,);
B(B_VARIN,,CDservInterval,9,7,11,9,);
B(B_F,@DIV,,11,5,16,9,);
B(B_F,sel,,47,1,52,6,);
B(B_VARIN,,MRservHourNext,45,3,47,5,);
B(B_VAROUT,,MRservHourNext,52,2,54,4,);
B(B_VARIN,,TRUE,45,2,47,4,);
B(B_F,@MUL-2,,37,5,42,9,);
B(B_F,@ADD-2,,42,5,47,9,);
B(B_F,trunc_to_int,,16,5,27,8,);
B(B_F,int_to_real,,27,5,37,8,);
L(11,8,11,10);
L(11,10,42,10);
L(42,8,42,10);
L(47,5,47,7);
L(37,8,37,10);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 14 ;
        NETWORK_BODY
B(B_VARIN,,MSG_APP,27,4,29,6,);
B(B_VARIN,,MSG_APP_SERVICE,27,5,29,7,);
B(B_VARIN,,MSG_INFO,27,7,29,9,);
B(B_VARIN,,16#8700A10E,27,6,29,8,);
B(B_FB,MSGGrpEdgePut2UD,Message_Init,29,1,41,11,);
B(B_VARIN,,MXserviceAckn,27,2,29,4,);
B(B_F,real_to_udint,,11,7,22,10,);
B(B_VARIN,,MDengOperatHour,9,11,11,13,);
B(B_F,real_to_udint,,11,10,22,13,);
B(B_VARIN,,MRservHourNext,9,8,11,10,);
L(29,10,29,12);
L(22,9,29,9);
L(22,12,29,12);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL := next: ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,initialize service states after igition on,1,1,27,2,);
B(B_VARIN,,MXserviceNotAckn,9,4,11,6,);
B(B_FB,R_TRIG,R_TRIG_NA,11,3,18,6,);
B(B_FB,RS,RS_NA,11,6,16,10,);
L(11,5,11,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_FB,R_TRIG,R_TRIG_WB,11,1,18,4,);
B(B_VARIN,,MXserviceWarnBef,9,2,11,4,);
B(B_FB,RS,RS_WB,11,4,16,8,);
L(11,3,11,6);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_VARIN,,MXserviceWarnAft,9,2,11,4,);
B(B_FB,RS,RS_WA,11,1,16,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_FB,R_TRIG,R_TRIG_A,11,1,18,4,);
B(B_VARIN,,MXserviceAckn,9,2,11,4,);
B(B_FB,RS,RS_A,11,4,16,8,);
L(11,3,11,6);
        END_NETWORK_BODY
    END_NET_WORK
END_BODY
END_PROGRAM

PROGRAM SGprogV150
(*name of author: Manfred Schapler
version: 1.0
date: 04/97
modification:*)
(*name of author: Manfred Schapler
date: 04/97
modification:*)
	VAR_EXTERNAL 
		ITXsgSpeedLevel: BOOL:=FALSE;
			(*preselection slewing gear speed level*)
		ITXsgMomReg: BOOL:=FALSE;
			(*preselection slewing gear moment regulator*)
		IWsgSystemPreRi1: UINT:=0;
			(*system pressure right 1 SG*)
		IWsgSystemPreLe1: UINT:=0;
			(*system pressure left 1 SG*)
		IWsgSystemPreRi2: UINT:=0;
			(*system pressure right 2 SG*)
		IWsgSystemPreLe2: UINT:=0;
			(*system pressure left 2 SG*)
		IWsgAngle: UINT:=0;
			(*ad sg limitation angle sensor*)
		IDsgCounter: DINT:=0;
			(*counter slewing gear*)
		QTXsgMomReg: BOOL:=FALSE;
			(*enable slewing gear moment regulator*)
		QTXsgSpeedLevel: BOOL:=FALSE;
			(*enable slewing gear speed level*)
		QXsgBrake: BOOL:=FALSE;
			(*SG brake*)
		QXsgTrimot: BOOL:=FALSE;
			(*slewing gear trimot*)
		QWsgRight: UINT:=0;
			(*SG pump 1 right*)
		QWsgLeft: UINT:=0;
			(*SG pump 1 left*)
		MXsgAnalSigPos: BOOL:=FALSE;
			(*sg analog signal positiv*)
		MXsgAnalSigNeg: BOOL:=FALSE;
			(*sg analog signal negativ*)
		MXstopAllFunctio: BOOL:=FALSE;
			(*stop all excavator functions*)
		MXsgLocalStopRi: BOOL:=FALSE;
			(*SG local stop right*)
		MXsgLocalStopLe: BOOL:=FALSE;
			(*SG local stop left*)
		MXsgGlobalStopRi: BOOL:=FALSE;
			(*SG global stop right*)
		MXsgGlobalStopLe: BOOL:=FALSE;
			(*SG global stop left*)
		MXsgEnPowStage: BOOL:=FALSE;
			(*SG enable power stage right or left*)
		MXsgExtControl: BOOL:=FALSE;
			(*SG external enable to all outputs*)
		MXsgErrPressIndi: BOOL:=FALSE;
			(*SG error pressure indicator*)
		MXangleSenAnaErr: BOOL:=FALSE;
			(*sg analog angle sensor error*)
		MXsgAngSenError: BOOL:=FALSE;
			(*sg angle sensor error*)
		MXsgAngSenDiff: BOOL:=FALSE;
			(*sg angle sensor difference*)
		MXmomRegEnabled: BOOL:=FALSE;
			(*SG moment regulator enabled*)
		MXminEngineSpeed: BOOL:=FALSE;
			(*minimum engine speed reached*)
		MXsgSpeed1: BOOL:=FALSE;
			(*SG speed 1*)
		MXsgSpeed2: BOOL:=FALSE;
			(*SG speed 2*)
		MXsgSpeed3: BOOL:=FALSE;
			(*SG speed 3*)
		MXsgErrorJoyst: BOOL:=FALSE;
			(*SG error joystick*)
		MXlmlDerrickEnab: BOOL:=FALSE;
			(*lml derrick enabled*)
		MXlmlBlockCrawle: BOOL:=FALSE;
			(*lml blocked crawlers active*)
		MXlmlRedAllFunct: BOOL:=FALSE;
			(*lml reduces all functions*)
		MXjoySgFreeTurn: BOOL:=FALSE;
			(*sg free turn preselection on joystick*)
		MXsgExtAnalSign: BOOL:=FALSE;
			(*slewing gear other, external analog signal*)
		MXsgBrakeExterna: BOOL:=FALSE;
			(*set sg brake from external*)
		MX600barPreTraSG: BOOL:=FALSE;
			(*600bar pressure transmitter used at slewing gear*)
		MXengStarterActi: BOOL:=FALSE;
			(*engine starter activated*)
		MXwalCheckSgSen: BOOL:=FALSE;
			(*wal check sg angle sensor*)
		MXsgSetToZero: BOOL:=FALSE;
			(*sg set angle to zero degree*)
		MXsgSetSynchInc: BOOL:=FALSE;
			(*sg set incremental sensor synchron to analog sensor *)
		MXsgByLudvSectio: BOOL:=FALSE;
			(*sg driven by LUDV section*)
		MXsgAngSenPresen: BOOL:=FALSE;
			(*sg angle sensor present*)
		MDsgJoySignal: REAL:=0.0;
			(*SG joystick signal in +/-[%]*)
		MDsgPumpSignal: REAL:=0.0;
			(*SG analog signal pump in [%]*)
		MDsgSysPressRi: REAL:=0.0;
			(*SG system pressure right*)
		MDsgSysPressLe: REAL:=0.0;
			(*SG system pressure left*)
		MDsgPressDiff: REAL:=0.0;
			(*sg pressure difference in bar*)
		MDsgExtAnalSign: REAL:=0.0;
			(*slewing gear extern joystick signal in +/-[%]*)
		MDsgAngle: REAL:=0.0;
			(*sg angle in degree*)
		MDsgAngleByAna: REAL:=0.0;
			(*sg angle in degree by analog sensor*)
		MDsgAngleByInc: REAL:=0.0;
			(*sg angle in degree by incremental sensor*)
		MDsgAngleSensor: REAL:=0.0;
			(*sg angle in degree ba analog sensor without offset*)
		MDlmlSpeedRed_Sg: REAL:=0.0;
			(*lml speed reduction value SG (lml changes 2010)*)
	END_VAR
	VAR_EXTERNAL CONSTANT
		MSG_INFO: UINT:=0;
		MSG_ERROR: UINT:=0;
	END_VAR
	VAR_EXTERNAL RETAIN
		MXsgLimitation: BOOL:=FALSE;
			(*sg limitaion enabled*)
		MXwalSlewAct: BOOL:=FALSE;
			(*wal sg limitation activated*)
		MXmachTypeOk: BOOL:=FALSE;
			(*machine type is activated*)
		MXlmlTypeDutyCyc: BOOL:=FALSE;
			(*lml type is duty cycle machine*)
		MDsgAngeOffset: REAL:=0.0;
			(*sg angle offset analog angle sensor*)
		MDsgCountValue: DINT:=0;
			(*present counter value slewing gea*)
	END_VAR
	VAR_EXTERNAL CONSTANT RETAIN
		CXsgMomRegulator: BOOL:=FALSE;
			(*SG moment regulator enabled*)
		CXsgWithTrimot: BOOL:=FALSE;
			(*slewing gear with trimot*)
		CXsgMomReJoyLock: BOOL:=FALSE;
			(*sg moment regulator by joystick button locked or not locked*)
		CWsgMinCurPumRi: UINT:=0;
			(*SG minimum current pump up*)
		CWsgMinCurPumLe: UINT:=0;
			(*SG minimum current pump down*)
		CWsgMaxCurPumRi: UINT:=0;
			(*SG maximum current pump up*)
		CWsgMaxCurPumLe: UINT:=0;
			(*SG maximum current pump down*)
		CDsgIntTimeUp: REAL:=0.0;
			(*SG integrator time up*)
		CDsgIntTimeDn: REAL:=0.0;
			(*SG integrator time down*)
		CDsgMaxPressDiff: REAL:=0.0;
			(*SG maximum pressure difference for moment regulator*)
		CDmomReg_p_fac: REAL:=0.0;
			(*moment regulator regulator p-factor [0.0 - x.x]*)
		CDmomReg_i_fac: REAL:=0.0;
			(*moment regulator regulator i-factor [0.0 - x.x]*)
		CDmomReg_d_fac: REAL:=0.0;
			(*moment regulator regulator d-factor [0.0 - x.x]*)
		CDsgBrakeTime: REAL:=0.0;
			(*sg brake close time*)
		CDsgLeakoilSig: REAL:=0.0;
			(*sg leakoil compensation signal [%]*)
	END_VAR
	VAR 
		LXinitOk: BOOL:=FALSE;
			(*init completed*)
		LXpumpInZero: BOOL:=FALSE;
			(*pump in zero*)
		LXpressDiffHigh: BOOL:=FALSE;
			(*pressure difference to high to enabled moment regulator*)
		LXstopFreeTurnOp: BOOL:=FALSE;
			(*stop free turn operation*)
		LXsgSenCheckAct: BOOL:=FALSE;
		LXenLeakoilComp: BOOL:=FALSE;
		LDanalogSignal: REAL:=0.0;
			(*analog signal*)
		LDspeedReduction: REAL:=0.0;
		ScaleAI1: ScaleAIJump;
		Message1: MsgRealReal;
		Message2: MsgRealReal;
		Message3: MsgRealReal;
		Message4: MsgRealReal;
		CorrValue_UInt1: CorrValue_UInt;
		CorrValue_UInt2: CorrValue_UInt;
		CorrValue_UInt3: CorrValue_UInt;
		CorrValue_UInt4: CorrValue_UInt;
		CorrValue_Real1: CorrValue_Real;
		CorrValue_Real2: CorrValue_Real;
		CorrValue_Real3: CorrValue_Real;
		CorrValue_Real4: CorrValue_Real;
		CorrValue_Real5: CorrValue_Real;
		CorrValue_Real6: CorrValue_Real;
		CorrValue_Real7: CorrValue_Real;
		CorrValue_Real8: CorrValue_Real;
		CorrValue_Bool1: CorrValue_Bool;
		CorrValue_Bool2: CorrValue_Bool;
		CorrValue_Bool3: CorrValue_Bool;
		digital1: SGdigLogPartV050;
		analog1: SGanalogPartV040;
		analog2: SGmomRegulatV030;
		PowerStage1: PowerStage;
		PowerStage2: PowerStage;
		SR1: SR;
		SGscaleInput1: SGscaleInputV014;
		CountSave1: CountSave;
	END_VAR
'FBD'
BODY
    WORKSPACE
        NETWORK_LIST_TYPE := NWTYPEFBD ;
        ACTIVE_NETWORK := 0 ;
    END_WORKSPACE
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_COMMENT,,exit,1,1,40,2,);
B(B_VARIN,,MXmachTypeOk,9,4,11,6,);
B(B_F,not,,11,3,16,6,);
B(B_RETURN,,,16,4,18,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_COMMENT,,init first time,1,1,27,2,);
B(B_VARIN,,LXinitOk,9,4,11,6,);
B(B_F,not,,11,3,16,6,);
B(B_JUMP,,init,16,4,18,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 36 ;
        NETWORK_BODY
B(B_COMMENT,,slewing gear angle sensor,1,1,27,2,);
B(B_F,@ADD-2,,21,3,26,7,);
B(B_VARIN,,MDsgAngeOffset,19,4,21,6,);
B(B_FB,ScaleAIJump,ScaleAI1,11,9,21,16,);
B(B_VARIN,,IWsgAngle,9,10,11,12,);
B(B_VARIN,,359.99,9,11,11,13,);
B(B_COMMENT,,360grd entspricht 0grd,1,14,11,15,);
B(B_VARIN,,60.0,9,12,11,14,);
B(B_VAROUT,,MDsgAngleSensor,21,10,23,12,);
B(B_F,@LT-2,,31,3,36,7,);
B(B_VARIN,,0.0,29,5,31,7,);
B(B_F,@ADD-2,,31,7,36,11,);
B(B_F,sel,,38,3,43,8,);
B(B_VARIN,,360.0,29,9,31,11,);
B(B_VAROUT,,MDsgAngleByAna,43,4,45,6,);
B(B_FB,MsgRealReal,Message1,54,9,63,16,);
B(B_FB,MsgRealReal,Message2,54,18,63,25,);
B(B_VARIN,,MSG_ERROR,52,12,54,14,);
B(B_VARIN,,MSG_ERROR,52,21,54,23,);
B(B_VARIN,,303,52,10,54,12,);
B(B_VARIN,,302,52,19,54,21,);
B(B_COMMENT,,Berechnung der RATE:ø^mögliche Änderung des Gebers im DW: 30°/s (RATE also mind. 30)ø^mögliche Störung am Eingang: 0~05mA/scan -> 1~125°/scan -> 45°/s (RATE also mind. 45),64,11,102,14,);
B(B_COMMENT,,max. zulässige Abweichung des Signales: 2° -> 80°/s (RATE also max. 80) ,64,14,102,15,);
B(B_COMMENT,,Rate wird mit 60 festgelegt!,64,15,102,16,);
B(B_F,@AND-2,,23,19,28,23,0N);
B(B_VARIN,,MXengStarterActi,19,21,21,23,);
B(B_FB,SR,SR1,28,19,33,23,0N);
B(B_F,@AND-2,,36,10,41,14,);
B(B_F,@AND-2,,36,19,41,23,);
B(B_F,@OR-2,,29,27,34,31,);
B(B_VARIN,,MXwalCheckSgSen,27,28,29,30,);
B(B_F,@OR-2,,29,31,34,35,);
B(B_VARIN,,MXwalSlewAct,27,33,29,35,);
B(B_VARIN,,MXlmlBlockCrawle,27,30,29,32,);
B(B_VAROUT,,MXsgLimitation,34,32,36,34,);
B(B_VAROUT,,LXsgSenCheckAct,34,28,36,30,);
B(B_F,@OR-2,,42,15,47,19,);
B(B_VAROUT,,MXangleSenAnaErr,47,16,49,18,);
B(B_F,@AND-2,,48,25,53,29,N);
B(B_VAROUT,,MXsgAngSenPresen,53,26,55,28,);
L(21,6,21,11);
L(38,7,38,9);
L(36,9,38,9);
L(37,6,38,6);
L(36,5,38,5);
L(37,6,37,7);
L(26,5,31,5);
L(27,5,27,9);
L(27,9,31,9);
L(27,7,37,7);
L(28,22,28,23);
L(22,23,28,23);
L(22,13,22,23);
L(21,13,22,13);
L(22,21,23,21);
L(21,22,23,22);
L(41,12,54,12);
L(33,21,36,21);
L(41,21,54,21);
L(34,22,36,22);
L(34,13,36,13);
L(21,12,36,12);
L(29,30,29,33);
L(34,13,34,29);
L(42,12,42,17);
L(42,18,42,21);
L(34,28,48,28);
L(47,27,48,27);
L(47,17,47,27);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_COMMENT,,set sg to Zero degree: analog sensor,1,1,27,2,);
B(B_F,sel,,16,3,21,8,);
B(B_VAROUT,,MDsgAngeOffset,21,4,23,6,);
B(B_F,@MUL-2,,11,7,16,11,);
B(B_VARIN,,MDsgAngleSensor,9,8,11,10,);
B(B_VARIN,,-1.0,9,9,11,11,);
B(B_VARIN,,MDsgAngeOffset,14,5,16,7,);
B(B_VARIN,,MXsgSetToZero,14,4,16,6,);
L(16,7,16,9);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 16 ;
        NETWORK_BODY
B(B_COMMENT,,set sg to Zero degree: incremental sensor,1,1,27,2,);
B(B_VARIN,,4,25,13,27,15,);
B(B_F,@MUL-2,,27,11,32,15,);
B(B_VARIN,,0,30,9,32,11,);
B(B_F,sel,,32,7,37,12,);
B(B_F,@OR-2,,32,3,37,7,);
B(B_VARIN,,MXsgSetSynchInc,30,5,32,7,);
B(B_VARIN,,MXsgSetToZero,30,4,32,6,);
B(B_VARIN,,MDsgCountValue,46,6,48,8,);
B(B_FB,CountSave,CountSave1,48,2,59,8,);
B(B_VARIN,,IDsgCounter,46,3,48,5,);
B(B_VARIN,,MDsgAngleByAna,9,12,11,14,);
B(B_F,@MUL-2,,11,11,16,15,);
B(B_VARIN,,10.0,9,13,11,15,);
B(B_F,real_to_dint,,16,11,27,14,);
B(B_COMMENT,,1/10 Grad,4,9,15,10,);
B(B_COMMENT,,3600 1/10° x 4 = 14400 Counts (4 x 3600 Impulse),34,13,58,14,);
B(B_F,mod,,66,2,71,6,);
B(B_VARIN,,14400,64,4,66,6,);
B(B_VAROUT,,MDsgCountValue,71,3,73,5,);
B(B_COMMENT,,Der Module wird an dieser Stelle eingebaut~ damit die DINT Variable nicht überlaufen kann.ø^Dies würde zu einem Sprung im DW Winkel führen!,61,7,94,9,);
L(32,11,32,13);
L(32,6,32,9);
L(37,5,48,5);
L(37,6,48,6);
L(37,6,37,9);
L(59,4,66,4);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_F,@DIV,,26,3,31,7,);
B(B_VARIN,,40.0,24,5,26,7,);
B(B_COMMENT,,slewing gear incremental sensor,1,1,27,2,);
B(B_F,dint_to_real,,11,3,22,6,);
B(B_F,@LT-2,,36,3,41,7,);
B(B_VARIN,,0.0,34,5,36,7,);
B(B_F,@ADD-2,,36,7,41,11,);
B(B_F,sel,,43,3,48,8,);
B(B_VARIN,,360.0,34,9,36,11,);
B(B_VAROUT,,MDsgAngleByInc,48,4,50,6,);
B(B_VARIN,,MDsgCountValue,9,4,11,6,);
B(B_COMMENT,,Incrementalgeber mit 3600 Impulsen und 4-Flankenauswertung =14400ø^14400 / 40 = 360°,61,2,88,4,);
L(22,5,26,5);
L(43,7,43,9);
L(41,9,43,9);
L(42,6,43,6);
L(41,5,43,5);
L(42,6,42,7);
L(31,5,36,5);
L(32,5,32,9);
L(32,9,36,9);
L(32,7,42,7);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 24 ;
        NETWORK_BODY
B(B_COMMENT,,slewing gear angle,1,1,27,2,);
B(B_F,@OR-2,,43,2,48,6,);
B(B_VARIN,,MXangleSenAnaErr,41,3,43,5,);
B(B_VAROUT,,MXsgAngSenError,48,3,50,5,);
B(B_F,@AND-2,,38,7,43,11,);
B(B_VARIN,,LXsgSenCheckAct,36,4,38,6,);
B(B_F,@SUB,,23,8,28,12,);
B(B_F,abs,,28,8,33,11,);
B(B_F,@GT-2,,33,8,38,12,);
B(B_VARIN,,1.0,31,11,33,13,);
B(B_F,@SUB,,13,4,18,8,);
B(B_F,min-2,,18,5,23,9,);
B(B_F,@SUB,,13,8,18,12,);
B(B_F,min-2,,18,9,23,13,);
B(B_COMMENT,,max. Zulässige Abweichungø^der Winkelgeber: +/- 1°,26,6,37,8,);
B(B_VARIN,,360.0,10,5,12,7,);
B(B_VARIN,,MDsgAngleByInc,9,6,11,8,);
B(B_VARIN,,MDsgAngleByAna,8,10,10,12,);
B(B_F,sel,,38,14,43,19,);
B(B_COMMENT,,Grundsätzlich wird das Incrementalgebersignal verwendet~ø^da dieses genauer ist und nicht rumzappelt.ø^,11,19,37,21,);
B(B_COMMENT,,Das Analogsignal des Absolutgebers wird zur Kontrolle herangezogen.ø^Bei erkannter Abweichung wird auf das Absolutsignal geschalten.,11,21,37,23,);
B(B_COMMENT,,min: um keine Fehlerauslösung beimø^0-360° Sprung zu haben,12,13,26,15,);
B(B_VAROUT,,MDsgAngle,43,15,45,17,);
B(B_FB,MsgRealReal,Message3,54,9,63,16,);
B(B_VARIN,,732,52,10,54,12,);
B(B_VARIN,,MSG_ERROR,52,12,54,14,);
B(B_VARIN,,MDsgAngleByInc,52,13,54,15,);
B(B_VARIN,,MDsgAngleByAna,52,14,54,16,);
B(B_VAROUT,,MXsgAngSenDiff,43,8,45,10,);
L(33,11,33,12);
L(18,6,18,7);
L(11,8,18,8);
L(18,10,18,11);
L(23,7,23,10);
L(38,5,38,9);
L(38,10,38,16);
L(12,6,13,6);
L(12,6,12,10);
L(12,10,13,10);
L(11,7,13,7);
L(11,7,11,17);
L(10,11,13,11);
L(10,12,18,12);
L(11,17,38,17);
L(10,18,38,18);
L(10,11,10,18);
L(43,5,43,12);
L(43,12,54,12);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,exit program by external controlling,1,1,27,2,);
B(B_VARIN,,MXsgExtControl,9,3,11,5,);
B(B_RETURN,,,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 20 ;
        NETWORK_BODY
B(B_COMMENT,,analog signal selector and stop sg,1,1,27,2,);
B(B_F,@GT-2,,28,3,33,7,);
B(B_F,@LT-2,,28,7,33,11,);
B(B_VARIN,,0.0,26,5,28,7,);
B(B_VARIN,,0.0,26,9,28,11,);
B(B_F,sel,,28,11,33,16,);
B(B_VARIN,,0.0,26,14,28,16,);
B(B_VAROUT,,LDanalogSignal,33,12,35,14,);
B(B_VAROUT,,MXsgAnalSigPos,33,4,35,6,);
B(B_VAROUT,,MXsgAnalSigNeg,33,8,35,10,);
B(B_F,@OR-2,,18,11,23,15,);
B(B_F,@AND-2,,11,15,16,19,0N);
B(B_F,@AND-2,,11,11,16,15,0N);
B(B_VARIN,,MXsgAnalSigNeg,9,13,11,15,);
B(B_VARIN,,MXsgLocalStopRi,9,12,11,14,);
B(B_VARIN,,MXsgAnalSigPos,9,17,11,19,);
B(B_VARIN,,MXsgLocalStopLe,9,16,11,18,);
B(B_F,sel,,18,3,23,8,);
B(B_VARIN,,MXsgExtAnalSign,16,4,18,6,);
B(B_VARIN,,MDsgExtAnalSign,16,6,18,8,);
B(B_VARIN,,MDsgJoySignal,16,5,18,7,);
L(24,9,28,9);
L(24,9,24,14);
L(24,14,28,14);
L(24,5,24,9);
L(23,13,28,13);
L(16,13,18,13);
L(17,14,18,14);
L(17,14,17,17);
L(16,17,17,17);
L(23,5,28,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 25 ;
        NETWORK_BODY
B(B_COMMENT,,digital logic sg,1,1,28,2,);
B(B_VARIN,,MXsgAnalSigPos,32,5,34,7,);
B(B_VARIN,,MXsgAnalSigNeg,32,6,34,8,);
B(B_VAROUT,,MXsgLocalStopRi,57,7,59,9,);
B(B_VAROUT,,MXsgSpeed3,57,11,59,13,);
B(B_VAROUT,,MXsgSpeed2,57,10,59,12,);
B(B_VAROUT,,MXsgSpeed1,57,9,59,11,);
B(B_VAROUT,,MXsgLocalStopLe,57,8,59,10,);
B(B_VAROUT,,MXsgEnPowStage,57,6,59,8,);
B(B_VAROUT,,MXmomRegEnabled,57,12,59,14,);
B(B_VAROUT,,LXstopFreeTurnOp,57,13,59,15,);
B(B_VAROUT,,QTXsgMomReg,57,14,59,16,);
B(B_FB,SGdigLogPartV050,digital1,34,4,57,21,);
B(B_VARIN,,MXstopAllFunctio,32,9,34,11,);
B(B_VARIN,,LXpumpInZero,32,10,34,12,);
B(B_VARIN,,ITXsgSpeedLevel,32,11,34,13,);
B(B_VARIN,,MXsgErrorJoyst,32,14,34,16,);
B(B_VARIN,,CXsgMomRegulator,32,15,34,17,);
B(B_VARIN,,MXsgErrPressIndi,32,16,34,18,);
B(B_VARIN,,CDsgBrakeTime,32,19,34,21,);
B(B_VARIN,,MXlmlDerrickEnab,32,18,34,20,);
B(B_VARIN,,LXpressDiffHigh,32,17,34,19,);
B(B_VARIN,,MXsgGlobalStopLe,32,8,34,10,);
B(B_VARIN,,MXsgGlobalStopRi,32,7,34,9,);
B(B_F,@OR-2,,18,12,23,16,);
B(B_F,@AND-2,,18,18,23,22,0N);
B(B_F,@AND-2,,13,15,18,19,);
B(B_VARIN,,ITXsgMomReg,16,13,18,15,);
B(B_VARIN,,CXsgMomReJoyLock,9,17,11,19,);
B(B_VARIN,,MXjoySgFreeTurn,10,16,12,18,);
B(B_F,@OR-2,,59,1,64,5,);
B(B_VARIN,,MXsgBrakeExterna,57,2,59,4,);
B(B_VAROUT,,QXsgBrake,64,2,66,4,);
B(B_COMMENT,,wegen Ballastwagen ,47,1,59,2,);
B(B_F,@AND-2,,66,14,71,18,);
B(B_VAROUT,,LXenLeakoilComp,71,15,73,17,);
B(B_VARIN,,CDsgLeakoilSig,59,21,61,23,);
B(B_VARIN,,0.0,59,22,61,24,);
B(B_F,NE_R,,61,20,66,24,);
L(23,13,23,14);
L(24,14,34,14);
L(24,14,24,20);
L(23,20,24,20);
L(18,15,18,17);
L(12,17,13,17);
L(11,18,13,18);
L(12,17,12,20);
L(12,20,18,20);
L(11,21,18,21);
L(11,18,11,21);
L(23,13,34,13);
L(58,4,58,6);
L(58,4,59,4);
L(57,6,58,6);
L(57,16,66,16);
L(66,17,66,22);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,enabled led button 3 X23,1,1,27,2,);
B(B_VARIN,,ITXsgSpeedLevel,9,3,11,5,);
B(B_VAROUT,,QTXsgSpeedLevel,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 27 ;
        NETWORK_BODY
B(B_COMMENT,,slewing gear speed reduction ,1,1,27,2,);
B(B_F,sel,,30,20,35,25,);
B(B_F,sel,,42,19,47,24,);
B(B_VARIN,,MXsgSpeed1,40,20,42,22,);
B(B_VARIN,,0.5,40,22,42,24,);
B(B_F,sel,,30,5,35,10,);
B(B_VARIN,,MXsgSpeed2,28,6,30,8,);
B(B_F,sel,,42,4,47,9,);
B(B_VARIN,,MXsgSpeed1,40,5,42,7,);
B(B_VARIN,,MXsgSpeed3,16,7,18,9,);
B(B_VARIN,,1.0,16,8,18,10,);
B(B_F,to_real,,11,9,18,12,);
B(B_VARIN,,1.0,9,10,11,12,);
B(B_VARIN,,0.66,28,8,30,10,);
B(B_F,sel,,48,3,53,8,);
B(B_VARIN,,1.0,28,22,30,24,);
B(B_F,sel,,18,6,23,11,);
B(B_F,to_real,,23,23,30,26,);
B(B_VARIN,,1.0,21,24,23,26,);
B(B_VARIN,,MXsgSpeed3,23,20,25,22,);
B(B_VARIN,,MXsgSpeed2,23,19,25,21,);
B(B_VARIN,,CXsgWithTrimot,46,2,48,4,);
B(B_VAROUT,,LDspeedReduction,53,4,55,6,);
B(B_F,@OR-2,,25,18,30,22,);
B(B_VARIN,,MXlmlTypeDutyCyc,28,11,30,13,);
B(B_VARIN,,MXsgByLudvSectio,28,12,30,14,);
B(B_F,@AND-2,,30,10,35,14,);
B(B_VARIN,,0.33,34,14,36,16,);
B(B_F,sel,,36,12,41,17,);
B(B_COMMENT,,http://jira.zdv.liebherr.i:8080/browse/LWNTBEHSHSSW10511521-61,1,14,29,15,);
B(B_F,to_real,,29,15,36,18,);
B(B_VARIN,,0.45,27,16,29,18,);
L(35,22,42,22);
L(35,7,42,7);
L(18,10,18,11);
L(47,6,48,6);
L(48,7,48,21);
L(47,21,48,21);
L(23,8,30,8);
L(30,20,30,22);
L(30,24,30,25);
L(48,3,48,5);
L(35,12,35,14);
L(35,14,36,14);
L(41,8,41,14);
L(41,8,42,8);
L(36,16,36,17);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_VAROUT,,QXsgTrimot,16,4,18,6,);
B(B_F,@AND-3,,11,3,16,8,);
B(B_VARIN,,MXminEngineSpeed,9,6,11,8,);
B(B_VARIN,,CXsgWithTrimot,9,4,11,6,);
B(B_VARIN,,MXsgSpeed3,9,5,11,7,);
B(B_COMMENT,,enable slewing gear trimot,1,1,27,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_COMMENT,,check if moment regulator is preselected,1,1,27,2,);
B(B_VARIN,,CXsgMomRegulator,9,4,11,6,);
B(B_F,@AND-2,,11,3,16,7,NN);
B(B_JUMP,,next,16,4,18,6,);
B(B_VARIN,,LXenLeakoilComp,9,5,11,7,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_VAROUT,,MDsgSysPressRi,34,5,36,7,);
B(B_VAROUT,,MDsgSysPressLe,34,6,36,8,);
B(B_COMMENT,,scale pressure inputs of the moment regulator,1,1,27,2,);
B(B_VAROUT,,MXsgErrPressIndi,34,8,36,10,);
B(B_VAROUT,,LXpressDiffHigh,34,9,36,11,);
B(B_VARIN,,IWsgSystemPreLe2,9,10,11,12,);
B(B_VARIN,,IWsgSystemPreLe1,9,9,11,11,);
B(B_VARIN,,IWsgSystemPreRi2,9,8,11,10,);
B(B_VARIN,,IWsgSystemPreRi1,9,7,11,9,);
B(B_VARIN,,MX600barPreTraSG,9,6,11,8,);
B(B_FB,SGscaleInputV014,SGscaleInput1,11,4,34,12,);
B(B_VARIN,,MXengStarterActi,9,5,11,7,);
B(B_VAROUT,,MDsgPressDiff,34,7,36,9,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL := next: ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_COMMENT,,jump to moment regulator when it is enabled,1,1,27,2,);
B(B_VARIN,,MXmomRegEnabled,9,3,11,5,);
B(B_JUMP,,momreg,11,3,13,5,);
B(B_FB,MsgRealReal,Message4,16,5,25,12,);
B(B_VARIN,,247,14,6,16,8,);
B(B_VARIN,,MSG_INFO,14,8,16,10,);
L(11,4,11,8);
L(11,8,16,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 19 ;
        NETWORK_BODY
B(B_VARIN,,LDanalogSignal,14,5,16,7,);
B(B_VARIN,,CDsgIntTimeUp,14,6,16,8,);
B(B_VARIN,,CDsgIntTimeDn,14,7,16,9,);
B(B_VARIN,,LDspeedReduction,14,8,16,10,);
B(B_COMMENT,,analog part sg,1,1,27,2,);
B(B_VAROUT,,MDsgPumpSignal,39,5,41,7,);
B(B_VAROUT,,LXpumpInZero,39,6,41,8,);
B(B_FB,SGanalogPartV040,analog1,16,4,39,15,);
B(B_VARIN,,LXenLeakoilComp,14,11,16,13,);
B(B_VARIN,,CDsgLeakoilSig,14,9,16,11,);
B(B_VARIN,,MDsgPressDiff,14,10,16,12,);
B(B_VARIN,,MDlmlSpeedRed_Sg,9,16,11,18,);
B(B_VARIN,,MXlmlRedAllFunct,9,14,11,16,);
B(B_VARIN,,1.0,9,15,11,17,);
B(B_F,sel,,11,13,16,18,);
B(B_VARIN,,MXsgByLudvSectio,14,12,16,14,);
L(16,14,16,15);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_COMMENT,,jump to the power stages when  moment regulator is not enabled,1,1,27,2,);
B(B_VARIN,,MXmomRegEnabled,9,4,11,6,);
B(B_F,not,,11,3,16,6,);
B(B_JUMP,,powerst,16,4,18,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL := momreg: ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 23 ;
        NETWORK_BODY
B(B_VARIN,,LDanalogSignal,14,5,16,7,);
B(B_VARIN,,LDspeedReduction,14,6,16,8,);
B(B_COMMENT,,moment regulator,1,1,27,2,);
B(B_VAROUT,,MDsgPumpSignal,39,5,41,7,);
B(B_VAROUT,,LXpumpInZero,39,6,41,8,);
B(B_FB,SGmomRegulatV030,analog2,16,4,39,18,);
B(B_VARIN,,LXstopFreeTurnOp,14,7,16,9,);
B(B_VARIN,,MDsgSysPressLe,14,11,16,13,);
B(B_VARIN,,MDsgSysPressRi,14,10,16,12,);
B(B_VARIN,,CDsgIntTimeDn,14,9,16,11,);
B(B_VARIN,,CDsgIntTimeUp,14,8,16,10,);
B(B_VARIN,,CDmomReg_p_fac,14,13,16,15,);
B(B_VARIN,,CDmomReg_i_fac,14,14,16,16,);
B(B_VARIN,,CDmomReg_d_fac,14,15,16,17,);
B(B_VARIN,,CDsgMaxPressDiff,14,12,16,14,);
B(B_VARIN,,MDlmlSpeedRed_Sg,9,20,11,22,);
B(B_VARIN,,MXlmlRedAllFunct,9,18,11,20,);
B(B_VARIN,,1.0,9,19,11,21,);
B(B_F,sel,,11,17,16,22,);
L(16,17,16,19);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL := powerst: ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_COMMENT,,power stage sg right,1,1,27,2,);
B(B_VARIN,,MXsgEnPowStage,9,5,11,7,);
B(B_VARIN,,MDsgPumpSignal,9,6,11,8,);
B(B_FB,PowerStage,PowerStage1,11,4,20,12,);
B(B_VAROUT,,QWsgRight,20,5,22,7,);
B(B_VARIN,,CWsgminCurPumRi,9,9,11,11,);
B(B_VARIN,,0.0,9,7,11,9,);
B(B_VARIN,,100.0,9,8,11,10,);
B(B_VARIN,,CWsgmaxCurPumRi,9,10,11,12,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_COMMENT,,power stage lg left,1,1,27,2,);
B(B_VARIN,,MXsgEnPowStage,9,4,11,6,);
B(B_VARIN,,MDsgPumpSignal,9,5,11,7,);
B(B_FB,PowerStage,PowerStage2,11,3,20,11,);
B(B_VAROUT,,QWsgLeft,20,4,22,6,);
B(B_VARIN,,CWsgminCurPumLe,9,8,11,10,);
B(B_VARIN,,0.0,9,6,11,8,);
B(B_VARIN,,-100.0,9,7,11,9,);
B(B_VARIN,,CWsgmaxCurPumLe,9,9,11,11,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL := exit: ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,exit hoisting gear 1 program,1,1,27,2,);
B(B_VARIN,,TRUE,9,3,11,5,);
B(B_RETURN,,,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL := init: ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,init hoisting gear 1 program,1,1,27,2,);
B(B_VARIN,,TRUE,9,3,11,5,);
B(B_VAROUT,,LXinitOk,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value moment regulator slewing gear,1,1,27,2,);
B(B_FB,CorrValue_Bool,CorrValue_Bool1,12,4,24,10,);
B(B_VARIN,,CXsgMomRegulator,10,8,12,10,);
B(B_VARIN,,FALSE,10,5,12,7,);
B(B_VARIN,,FALSE,10,6,12,8,);
B(B_VARIN,,TRUE,10,7,12,9,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value slewing gear limitation active,1,1,27,2,);
B(B_FB,CorrValue_Bool,CorrValue_Bool2,12,4,24,10,);
B(B_VARIN,,CXsgWithTrimot,10,8,12,10,);
B(B_VARIN,,FALSE,10,5,12,7,);
B(B_VARIN,,FALSE,10,6,12,8,);
B(B_VARIN,,TRUE,10,7,12,9,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value slewing gear moment regulator by joystick button locked,1,1,28,2,);
B(B_FB,CorrValue_Bool,CorrValue_Bool3,12,4,24,10,);
B(B_VARIN,,CXsgMomReJoyLock,10,8,12,10,);
B(B_VARIN,,FALSE,10,5,12,7,);
B(B_VARIN,,FALSE,10,6,12,8,);
B(B_VARIN,,TRUE,10,7,12,9,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 31 ;
        NETWORK_BODY
B(B_VARIN,,CWsgMinCurPumRi,34,7,36,9,);
B(B_F,sel,,21,3,26,8,);
B(B_VARIN,,MXsgByLudvSectio,18,4,20,6,);
B(B_F,sel,,21,17,26,22,);
B(B_VARIN,,215,17,5,19,7,);
B(B_FB,CorrValue_UInt,CorrValue_UInt4,36,24,48,30,);
B(B_VARIN,,CWsgMaxCurPumLe,34,28,36,30,);
B(B_FB,CorrValue_UInt,CorrValue_UInt3,36,17,48,23,);
B(B_VARIN,,CWsgMaxCurPumRi,34,21,36,23,);
B(B_FB,CorrValue_UInt,CorrValue_UInt2,36,10,48,16,);
B(B_VARIN,,CWsgMinCurPumLe,34,14,36,16,);
B(B_FB,CorrValue_UInt,CorrValue_UInt1,36,3,48,9,);
B(B_COMMENT,,correction value pump current,1,1,27,2,);
B(B_VARIN,,150,34,5,36,7,);
B(B_VARIN,,500,34,6,36,8,);
B(B_VARIN,,150,34,12,36,14,);
B(B_VARIN,,500,34,13,36,15,);
B(B_VARIN,,1000,34,27,36,29,);
B(B_VARIN,,1000,34,20,36,22,);
B(B_VARIN,,500,34,19,36,21,);
B(B_VARIN,,500,34,26,36,28,);
B(B_VARIN,,480,19,19,21,21,);
B(B_F,to_uint,,12,6,19,9,);
B(B_VARIN,,350,10,7,12,9,);
B(B_VARIN,,730,10,20,12,22,);
B(B_F,to_uint,,12,19,19,22,);
L(20,5,21,5);
L(19,21,21,21);
L(19,7,21,7);
L(19,6,21,6);
L(20,5,20,19);
L(26,19,36,19);
L(27,19,27,26);
L(27,26,36,26);
L(26,5,36,5);
L(27,5,27,12);
L(27,12,36,12);
L(20,19,21,19);
L(19,7,19,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_FB,CorrValue_Real,CorrValue_Real1,11,4,23,10,);
B(B_VARIN,,20.0,9,5,11,7,);
B(B_VARIN,,10.0,9,6,11,8,);
B(B_VARIN,,100.0,9,7,11,9,);
B(B_VARIN,,CDsgIntTimeUp,9,8,11,10,);
B(B_COMMENT,,integration time slweing gear,1,1,27,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_FB,CorrValue_Real,CorrValue_Real2,11,2,23,8,);
B(B_VARIN,,10.0,9,4,11,6,);
B(B_VARIN,,100.0,9,5,11,7,);
B(B_VARIN,,CDsgIntTimeDn,9,6,11,8,);
B(B_VARIN,,20.0,9,3,11,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction values for moment regulator,1,1,27,2,);
B(B_FB,CorrValue_Real,CorrValue_Real3,11,4,23,10,);
B(B_VARIN,,300.0,9,5,11,7,);
B(B_VARIN,,100.0,9,6,11,8,);
B(B_VARIN,,500.0,9,7,11,9,);
B(B_VARIN,,CDsgMaxPressDiff,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_FB,CorrValue_Real,CorrValue_Real4,11,2,23,8,);
B(B_VARIN,,0.2,9,3,11,5,);
B(B_VARIN,,0.0,9,4,11,6,);
B(B_VARIN,,4.0,9,5,11,7,);
B(B_VARIN,,CDmomReg_p_fac,9,6,11,8,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_FB,CorrValue_Real,CorrValue_Real5,11,2,23,8,);
B(B_VARIN,,0.2,9,3,11,5,);
B(B_VARIN,,0.0,9,4,11,6,);
B(B_VARIN,,4.0,9,5,11,7,);
B(B_VARIN,,CDmomReg_i_fac,9,6,11,8,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_FB,CorrValue_Real,CorrValue_Real6,11,2,23,8,);
B(B_VARIN,,0.0,9,4,11,6,);
B(B_VARIN,,1.0,9,5,11,7,);
B(B_VARIN,,CDmomReg_d_fac,9,6,11,8,);
B(B_VARIN,,0.0,9,3,11,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_FB,CorrValue_Real,CorrValue_Real7,11,2,23,8,);
B(B_VARIN,,0.0,9,4,11,6,);
B(B_VARIN,,1.0,9,5,11,7,);
B(B_VARIN,,CDsgBrakeTime,9,6,11,8,);
B(B_VARIN,,0.0,9,3,11,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_F,sel,,11,2,16,7,);
B(B_FB,CorrValue_Real,CorrValue_Real8,24,2,36,8,);
B(B_VARIN,,0.0,22,4,24,6,);
B(B_VARIN,,20.0,22,5,24,7,);
B(B_VARIN,,CDsgLeakoilSig,22,6,24,8,);
B(B_VARIN,,1.0,9,5,11,7,);
B(B_VARIN,,0.0,9,4,11,6,);
B(B_VARIN,,MXsgByLudvSectio,9,3,11,5,);
L(16,4,24,4);
        END_NETWORK_BODY
    END_NET_WORK
END_BODY
END_PROGRAM

PROGRAM SPsafetyProgV010
(*name of author: Manfred Schapler
version: 1.0
date: 01/99
modification:*)
(*name of author: Manfred Schapler
version: 1.0
date: 11/97
modification:*)
	VAR_EXTERNAL 
		IXentrySwiClosed: BOOL:=FALSE;
			(*entry switch closed*)
		IXfeedbackPowLED: BOOL:=FALSE;
			(*feedback power supply LED+*)
		ITXkeybX23Fail: BOOL:=FALSE;
			(*keyboard X23 summary failure*)
		ITXkeybX25Fail: BOOL:=FALSE;
			(*keyboard X25 summary failure*)
		ITXkeybX22Fail: BOOL:=FALSE;
			(*keyboard X22 summary failure*)
		QBpowSupply_LI: BYTE:=0;
			(*power supply ignition delayed LI*)
		QBpowSupply_LD1: BYTE:=0;
			(*power supply engine running LD+*)
		QBpowSupply_LD2: BYTE:=0;
			(*power supply engine running LD+*)
		QBpowSupply_LED: BYTE:=0;
			(*power supply engine running and entry switch closed LED+*)
		QBpowSupply_LD3: BYTE:=0;
			(*power supply engine running LD+*)
		QIX2_009_1: BOOL:=FALSE;
			(*feedback module 9 output 1*)
		QIX2_009_2: BOOL:=FALSE;
			(*feedback module 9 output 2*)
		QIX2_009_3: BOOL:=FALSE;
			(*feedback module 9 output 3*)
		QIX2_009_4: BOOL:=FALSE;
			(*feedback module 9 output 4*)
		QIX2_009_5: BOOL:=FALSE;
			(*feedback module 9 output 5*)
		QIX2_009_6: BOOL:=FALSE;
			(*feedback module 9 output 6*)
		QIX2_009_7: BOOL:=FALSE;
			(*feedback module 9 output 7*)
		QIX2_009_8: BOOL:=FALSE;
			(*feedback module 9 output 8*)
		QIX2_009_9: BOOL:=FALSE;
			(*feedback module 9 output 9*)
		QIX2_009_10: BOOL:=FALSE;
			(*feedback module 9 output 10*)
		QIX2_009_11: BOOL:=FALSE;
			(*feedback module 9 output 11*)
		QIX2_009_12: BOOL:=FALSE;
			(*feedback module 9 output 12*)
		QIX2_009_13: BOOL:=FALSE;
			(*feedback module 9 output 13*)
		QIX2_009_14: BOOL:=FALSE;
			(*feedback module 9 output 14*)
		QIX2_009_15: BOOL:=FALSE;
			(*feedback module 9 output 15*)
		QIX2_009_16: BOOL:=FALSE;
			(*feedback module 9 output 16*)
		QIX2_009_17: BOOL:=FALSE;
			(*feedback module 9 output 17*)
		QIX2_009_18: BOOL:=FALSE;
			(*feedback module 9 output 18*)
		QIX2_009_19: BOOL:=FALSE;
			(*feedback module 9 output 19*)
		QIX2_009_20: BOOL:=FALSE;
			(*feedback module 9 output 20*)
		QIX2_009_21: BOOL:=FALSE;
			(*feedback module 9 output 21*)
		QIX2_009_22: BOOL:=FALSE;
			(*feedback module 9 output 22*)
		QIX2_009_23: BOOL:=FALSE;
			(*feedback module 9 output 23*)
		QIX2_009_24: BOOL:=FALSE;
			(*feedback module 9 output 24*)
		QIX2_009_25: BOOL:=FALSE;
			(*feedback module 9 output 25*)
		QIX2_009_26: BOOL:=FALSE;
			(*feedback module 9 output 26*)
		QIX2_009_27: BOOL:=FALSE;
			(*feedback module 9 output 27*)
		QIX2_009_28: BOOL:=FALSE;
			(*feedback module 9 output 28*)
		QIX2_009_29: BOOL:=FALSE;
			(*feedback module 9 output 29*)
		QIX2_009_30: BOOL:=FALSE;
			(*feedback module 9 output 30*)
		QIX2_009_31: BOOL:=FALSE;
			(*feedback module 9 output 31*)
		QIX2_009_32: BOOL:=FALSE;
			(*feedback module 9 output 32*)
		QIX2_010_1: BOOL:=FALSE;
			(*feedback module 10 output 1*)
		QIX2_010_2: BOOL:=FALSE;
			(*feedback module 10 output 2*)
		QIX2_010_3: BOOL:=FALSE;
			(*feedback module 10 output 3*)
		QIX2_010_4: BOOL:=FALSE;
			(*feedback module 10 output 4*)
		QIX2_010_5: BOOL:=FALSE;
			(*feedback module 10 output 5*)
		QIX2_010_6: BOOL:=FALSE;
			(*feedback module 10 output 6*)
		QIX2_010_7: BOOL:=FALSE;
			(*feedback module 10 output 7*)
		QIX2_010_8: BOOL:=FALSE;
			(*feedback module 10 output 8*)
		QIX2_010_9: BOOL:=FALSE;
			(*feedback module 10 output 9*)
		QIX2_010_10: BOOL:=FALSE;
			(*feedback module 10 output 10*)
		QIX2_010_11: BOOL:=FALSE;
			(*feedback module 10 output 11*)
		QIX2_010_12: BOOL:=FALSE;
			(*feedback module 10 output 12*)
		QIX2_010_13: BOOL:=FALSE;
			(*feedback module 10 output 13*)
		QIX2_010_14: BOOL:=FALSE;
			(*feedback module 10 output 14*)
		QIX2_010_15: BOOL:=FALSE;
			(*feedback module 10 output 15*)
		QIX2_010_16: BOOL:=FALSE;
			(*feedback module 10 output 16*)
		QIX2_010_17: BOOL:=FALSE;
			(*feedback module 10 output 17*)
		QIX2_010_18: BOOL:=FALSE;
			(*feedback module 10 output 18*)
		QIX2_010_19: BOOL:=FALSE;
			(*feedback module 10 output 19*)
		QIX2_010_20: BOOL:=FALSE;
			(*feedback module 10 output 20*)
		QIX2_010_21: BOOL:=FALSE;
			(*feedback module 10 output 21*)
		QIX2_010_22: BOOL:=FALSE;
			(*feedback module 10 output 22*)
		QIX2_010_23: BOOL:=FALSE;
			(*feedback module 10 output 23*)
		QIX2_010_24: BOOL:=FALSE;
			(*feedback module 10 output 24*)
		QIX2_010_25: BOOL:=FALSE;
			(*feedback module 10 output 25*)
		QIX2_010_26: BOOL:=FALSE;
			(*feedback module 10 output 26*)
		QIX2_010_27: BOOL:=FALSE;
			(*feedback module 10 output 27*)
		QIX2_010_28: BOOL:=FALSE;
			(*feedback module 10 output 28*)
		QIX2_010_29: BOOL:=FALSE;
			(*feedback module 10 output 29*)
		QIX2_010_30: BOOL:=FALSE;
			(*feedback module 10 output 30*)
		QIX2_010_31: BOOL:=FALSE;
			(*feedback module 10 output 31*)
		QIX2_010_32: BOOL:=FALSE;
			(*feedback module 10 output 32*)
		QIB2_013_1: BYTE:=0;
			(*feedback modul 13 output 1*)
		QIB2_013_2: BYTE:=0;
			(*feedback modul 13 output 1*)
		QIB2_013_3: BYTE:=0;
			(*feedback modul 13 output 1*)
		QIB2_013_4: BYTE:=0;
			(*feedback modul 13 output 1*)
		QIB2_014_1: BYTE:=0;
			(*feedback modul 13 output 1*)
		QIB2_014_2: BYTE:=0;
			(*feedback modul 13 output 1*)
		QIB2_014_3: BYTE:=0;
			(*feedback modul 13 output 1*)
		QIB2_014_4: BYTE:=0;
			(*feedback modul 13 output 1*)
		QIB2_015_1: BYTE:=0;
			(*feedback modul 13 output 1*)
		QIB2_015_2: BYTE:=0;
			(*feedback modul 13 output 1*)
		QIB2_015_3: BYTE:=0;
			(*feedback modul 13 output 1*)
		QIB2_015_4: BYTE:=0;
			(*feedback modul 13 output 1*)
		QIW2_017_1: UINT:=0;
			(*feedback modul 17 output 1*)
		QIW2_017_2: UINT:=0;
			(*feedback modul 17 output 2*)
		QIW2_017_3: UINT:=0;
			(*feedback modul 17 output 3*)
		QIW2_017_4: UINT:=0;
			(*feedback modul 17 output 4*)
		QIW2_017_5: UINT:=0;
			(*feedback modul 17 output 5*)
		QIW2_017_6: UINT:=0;
			(*feedback modul 17 output 6*)
		QIW2_017_7: UINT:=0;
			(*feedback modul 17 output 7*)
		QIW2_017_8: UINT:=0;
			(*feedback modul 17 output 8*)
		QIW2_017_9: UINT:=0;
			(*feedback modul 17 output 9*)
		QIW2_017_10: UINT:=0;
			(*feedback modul 17 output 10*)
		QIW2_017_11: UINT:=0;
			(*feedback modul 17 output 11*)
		QIW2_017_12: UINT:=0;
			(*feedback modul 17 output 12*)
		QIW2_017_13: UINT:=0;
			(*feedback modul 17 output 13*)
		QIW2_017_14: UINT:=0;
			(*feedback modul 17 output 14*)
		QIW2_017_15: UINT:=0;
			(*feedback modul 17 output 15*)
		QIW2_017_16: UINT:=0;
			(*feedback modul 17 output 16*)
		QIW2_018_1: UINT:=0;
			(*feedback module 18 output 1*)
		QIW2_018_2: UINT:=0;
			(*feedback module 18 output 2*)
		QIW2_018_3: UINT:=0;
			(*feedback module 18 output 3*)
		QIW2_018_4: UINT:=0;
			(*feedback module 18 output 4*)
		QIW2_018_5: UINT:=0;
			(*feedback module 18 output 5*)
		QIW2_018_6: UINT:=0;
			(*feedback module 18 output 6*)
		QIW2_018_7: UINT:=0;
			(*feedback module 18 output 7*)
		QIW2_018_8: UINT:=0;
			(*feedback module 18 output 8*)
		QIW2_018_9: UINT:=0;
			(*feedback module 18 output 9*)
		QIW2_018_10: UINT:=0;
			(*feedback module 18 output 10*)
		QIW2_018_11: UINT:=0;
			(*feedback module 18 output 11*)
		QIW2_018_12: UINT:=0;
			(*feedback module 18 output 12*)
		QIW2_018_13: UINT:=0;
			(*feedback module 18 output 13*)
		QIW2_018_14: UINT:=0;
			(*feedback module 18 output 14*)
		QIW2_018_15: UINT:=0;
			(*feedback module 18 output 15*)
		QIW2_018_16: UINT:=0;
			(*feedback module 18 output 16*)
		QIW2_019_1: UINT:=0;
			(*feedback module 19 output 1*)
		QIW2_019_2: UINT:=0;
			(*feedback module 19 output 2*)
		QIW2_019_3: UINT:=0;
			(*feedback module 19 output 3*)
		QIW2_019_4: UINT:=0;
			(*feedback module 19 output 4*)
		QIW2_019_5: UINT:=0;
			(*feedback module 19 output 5*)
		QIW2_019_6: UINT:=0;
			(*feedback module 19 output 6*)
		QIW2_019_7: UINT:=0;
			(*feedback module 19 output 7*)
		QIW2_019_8: UINT:=0;
			(*feedback module 19 output 8*)
		QIW2_019_9: UINT:=0;
			(*feedback module 19 output 9*)
		QIW2_019_10: UINT:=0;
			(*feedback module 19 output 10*)
		QIW2_019_11: UINT:=0;
			(*feedback module 19 output 11*)
		QIW2_019_12: UINT:=0;
			(*feedback module 19 output 12*)
		QIW2_019_13: UINT:=0;
			(*feedback module 19 output 13*)
		QIW2_019_14: UINT:=0;
			(*feedback module 19 output 14*)
		QIW2_019_15: UINT:=0;
			(*feedback module 19 output 15*)
		QIW2_019_16: UINT:=0;
			(*feedback module 19 output 16*)
		MXminEngineSpeed: BOOL:=FALSE;
			(*minimum engine speed reached*)
		MXremContActive: BOOL:=FALSE;
			(*remote control activated*)
		MXsafetyProgSAF: BOOL:=FALSE;
			(*safety program stop all function*)
		MXsafetyProgPRA: BOOL:=FALSE;
			(*safety program power reduction active*)
	END_VAR
	VAR_EXTERNAL CONSTANT
		MSG_WARNING: UINT:=0;
			(* message priority: "warning" *)
		MSG_ERROR: UINT:=0;
			(* message priority: "error" *)
		MSG_USER_HS: UDINT:=0;
			(* message subgroup "hs" for group "user" *)
		MSG_APP: UDINT:=0;
			(* message group "applicat" *)
		MSG_APP_SAFETY: UDINT:=0;
			(* message subgroup "safety" for group "applicat" *)
	END_VAR
	VAR 
		LXpowSupply_LED: BOOL:=FALSE;
		LXpowerRed_PowS: BOOL:=FALSE;
		LXpowerRed_9: BOOL:=FALSE;
		LXpowerRed_10: BOOL:=FALSE;
		LXpowerRed_13: BOOL:=FALSE;
		LXpowerRed_14: BOOL:=FALSE;
		LXpowerRed_15: BOOL:=FALSE;
		LXpowerRed_17: BOOL:=FALSE;
		LXpowerRed_18: BOOL:=FALSE;
		LXpowerRed_19: BOOL:=FALSE;
		LXoutpWarn_13_2: BOOL:=FALSE;
		LXoutpWarn_13_3: BOOL:=FALSE;
		LXoutpWarn_13_4: BOOL:=FALSE;
		LXoutpError_13_1: BOOL:=FALSE;
		LXoutpError_13_2: BOOL:=FALSE;
		LXoutpError_13_3: BOOL:=FALSE;
		LXoutpError_13_4: BOOL:=FALSE;
		LXoutpOk_14_1: BOOL:=FALSE;
		LXoutpOk_14_2: BOOL:=FALSE;
		LXoutpOk_14_3: BOOL:=FALSE;
		LXoutpOk_14_4: BOOL:=FALSE;
		LXoutpError_14_1: BOOL:=FALSE;
		LXoutpError_14_2: BOOL:=FALSE;
		LXoutpError_14_3: BOOL:=FALSE;
		LXoutpError_14_4: BOOL:=FALSE;
		LXoutpOk_15_1: BOOL:=FALSE;
		LXoutpOk_15_2: BOOL:=FALSE;
		LXoutpOk_15_3: BOOL:=FALSE;
		LXoutpOk_15_4: BOOL:=FALSE;
		LXoutpError_15_1: BOOL:=FALSE;
		LXoutpError_15_2: BOOL:=FALSE;
		LXoutpError_15_3: BOOL:=FALSE;
		LXoutpError_15_4: BOOL:=FALSE;
		LXoutpOk_17_1: BOOL:=FALSE;
		LXoutpOk_17_2: BOOL:=FALSE;
		LXoutpOk_17_3: BOOL:=FALSE;
		LXoutpOk_17_4: BOOL:=FALSE;
		LXoutpOk_17_5: BOOL:=FALSE;
		LXoutpOk_17_6: BOOL:=FALSE;
		LXoutpOk_17_7: BOOL:=FALSE;
		LXoutpOk_17_8: BOOL:=FALSE;
		LXoutpOk_17_9: BOOL:=FALSE;
		LXoutpOk_17_10: BOOL:=FALSE;
		LXoutpOk_17_11: BOOL:=FALSE;
		LXoutpOk_17_12: BOOL:=FALSE;
		LXoutpOk_17_13: BOOL:=FALSE;
		LXoutpOk_17_14: BOOL:=FALSE;
		LXoutpOk_17_15: BOOL:=FALSE;
		LXoutpOk_17_16: BOOL:=FALSE;
		LXoutpErr_17_1: BOOL:=FALSE;
		LXoutpErr_17_2: BOOL:=FALSE;
		LXoutpErr_17_3: BOOL:=FALSE;
		LXoutpErr_17_4: BOOL:=FALSE;
		LXoutpErr_17_5: BOOL:=FALSE;
		LXoutpErr_17_6: BOOL:=FALSE;
		LXoutpErr_17_7: BOOL:=FALSE;
		LXoutpErr_17_8: BOOL:=FALSE;
		LXoutpErr_17_9: BOOL:=FALSE;
		LXoutpErr_17_10: BOOL:=FALSE;
		LXoutpErr_17_11: BOOL:=FALSE;
		LXoutpErr_17_12: BOOL:=FALSE;
		LXoutpErr_17_13: BOOL:=FALSE;
		LXoutpErr_17_14: BOOL:=FALSE;
		LXoutpErr_17_15: BOOL:=FALSE;
		LXoutpErr_17_16: BOOL:=FALSE;
		LXoutpOk_18_1: BOOL:=FALSE;
		LXoutpOk_18_2: BOOL:=FALSE;
		LXoutpOk_18_3: BOOL:=FALSE;
		LXoutpOk_18_4: BOOL:=FALSE;
		LXoutpOk_18_5: BOOL:=FALSE;
		LXoutpOk_18_6: BOOL:=FALSE;
		LXoutpOk_18_7: BOOL:=FALSE;
		LXoutpOk_18_8: BOOL:=FALSE;
		LXoutpOk_18_9: BOOL:=FALSE;
		LXoutpOk_18_10: BOOL:=FALSE;
		LXoutpOk_18_11: BOOL:=FALSE;
		LXoutpOk_18_12: BOOL:=FALSE;
		LXoutpOk_18_13: BOOL:=FALSE;
		LXoutpOk_18_14: BOOL:=FALSE;
		LXoutpOk_18_15: BOOL:=FALSE;
		LXoutpOk_18_16: BOOL:=FALSE;
		LXoutpErr_18_1: BOOL:=FALSE;
		LXoutpErr_18_2: BOOL:=FALSE;
		LXoutpErr_18_3: BOOL:=FALSE;
		LXoutpErr_18_4: BOOL:=FALSE;
		LXoutpErr_18_5: BOOL:=FALSE;
		LXoutpErr_18_6: BOOL:=FALSE;
		LXoutpErr_18_7: BOOL:=FALSE;
		LXoutpErr_18_8: BOOL:=FALSE;
		LXoutpErr_18_9: BOOL:=FALSE;
		LXoutpErr_18_10: BOOL:=FALSE;
		LXoutpErr_18_11: BOOL:=FALSE;
		LXoutpErr_18_12: BOOL:=FALSE;
		LXoutpErr_18_13: BOOL:=FALSE;
		LXoutpErr_18_14: BOOL:=FALSE;
		LXoutpErr_18_15: BOOL:=FALSE;
		LXoutpErr_18_16: BOOL:=FALSE;
		LXoutpOk_19_1: BOOL:=FALSE;
		LXoutpOk_19_2: BOOL:=FALSE;
		LXoutpOk_19_3: BOOL:=FALSE;
		LXoutpOk_19_4: BOOL:=FALSE;
		LXoutpOk_19_5: BOOL:=FALSE;
		LXoutpOk_19_6: BOOL:=FALSE;
		LXoutpOk_19_7: BOOL:=FALSE;
		LXoutpOk_19_8: BOOL:=FALSE;
		LXoutpOk_19_9: BOOL:=FALSE;
		LXoutpOk_19_10: BOOL:=FALSE;
		LXoutpOk_19_11: BOOL:=FALSE;
		LXoutpOk_19_12: BOOL:=FALSE;
		LXoutpOk_19_13: BOOL:=FALSE;
		LXoutpOk_19_14: BOOL:=FALSE;
		LXoutpOk_19_15: BOOL:=FALSE;
		LXoutpOk_19_16: BOOL:=FALSE;
		LXoutpErr_19_1: BOOL:=FALSE;
		LXoutpErr_19_2: BOOL:=FALSE;
		LXoutpErr_19_3: BOOL:=FALSE;
		LXoutpErr_19_4: BOOL:=FALSE;
		LXoutpErr_19_5: BOOL:=FALSE;
		LXoutpErr_19_6: BOOL:=FALSE;
		LXoutpErr_19_7: BOOL:=FALSE;
		LXoutpErr_19_8: BOOL:=FALSE;
		LXoutpErr_19_9: BOOL:=FALSE;
		LXoutpErr_19_10: BOOL:=FALSE;
		LXoutpErr_19_11: BOOL:=FALSE;
		LXoutpErr_19_12: BOOL:=FALSE;
		LXoutpErr_19_13: BOOL:=FALSE;
		LXoutpErr_19_14: BOOL:=FALSE;
		LXoutpErr_19_15: BOOL:=FALSE;
		LXoutpErr_19_16: BOOL:=FALSE;
		LXoutpOk_9_1: BOOL:=FALSE;
		LXoutpOk_9_2: BOOL:=FALSE;
		LXoutpOk_9_3: BOOL:=FALSE;
		LXoutpOk_9_4: BOOL:=FALSE;
		LXoutpOk_9_5: BOOL:=FALSE;
		LXoutpOk_9_6: BOOL:=FALSE;
		LXoutpOk_9_7: BOOL:=FALSE;
		LXoutpOk_9_8: BOOL:=FALSE;
		LXoutpOk_9_9: BOOL:=FALSE;
		LXoutpOk_9_10: BOOL:=FALSE;
		LXoutpOk_9_11: BOOL:=FALSE;
		LXoutpOk_9_12: BOOL:=FALSE;
		LXoutpOk_9_13: BOOL:=FALSE;
		LXoutpOk_9_14: BOOL:=FALSE;
		LXoutpOk_9_15: BOOL:=FALSE;
		LXoutpOk_9_16: BOOL:=FALSE;
		LXoutpOk_9_17: BOOL:=FALSE;
		LXoutpOk_9_18: BOOL:=FALSE;
		LXoutpOk_9_19: BOOL:=FALSE;
		LXoutpOk_9_20: BOOL:=FALSE;
		LXoutpOk_9_21: BOOL:=FALSE;
		LXoutpOk_9_22: BOOL:=FALSE;
		LXoutpOk_9_23: BOOL:=FALSE;
		LXoutpOk_9_24: BOOL:=FALSE;
		LXoutpOk_9_25: BOOL:=FALSE;
		LXoutpOk_9_26: BOOL:=FALSE;
		LXoutpOk_9_27: BOOL:=FALSE;
		LXoutpOk_9_28: BOOL:=FALSE;
		LXoutpOk_9_29: BOOL:=FALSE;
		LXoutpOk_9_30: BOOL:=FALSE;
		LXoutpOk_9_31: BOOL:=FALSE;
		LXoutpOk_9_32: BOOL:=FALSE;
		LXoutpErr_9_1: BOOL:=FALSE;
		LXoutpErr_9_2: BOOL:=FALSE;
		LXoutpErr_9_3: BOOL:=FALSE;
		LXoutpErr_9_4: BOOL:=FALSE;
		LXoutpErr_9_5: BOOL:=FALSE;
		LXoutpErr_9_6: BOOL:=FALSE;
		LXoutpErr_9_7: BOOL:=FALSE;
		LXoutpErr_9_8: BOOL:=FALSE;
		LXoutpErr_9_9: BOOL:=FALSE;
		LXoutpErr_9_10: BOOL:=FALSE;
		LXoutpErr_9_11: BOOL:=FALSE;
		LXoutpErr_9_12: BOOL:=FALSE;
		LXoutpErr_9_13: BOOL:=FALSE;
		LXoutpErr_9_14: BOOL:=FALSE;
		LXoutpErr_9_15: BOOL:=FALSE;
		LXoutpErr_9_16: BOOL:=FALSE;
		LXoutpErr_9_17: BOOL:=FALSE;
		LXoutpErr_9_18: BOOL:=FALSE;
		LXoutpErr_9_19: BOOL:=FALSE;
		LXoutpErr_9_20: BOOL:=FALSE;
		LXoutpErr_9_21: BOOL:=FALSE;
		LXoutpErr_9_22: BOOL:=FALSE;
		LXoutpErr_9_23: BOOL:=FALSE;
		LXoutpErr_9_24: BOOL:=FALSE;
		LXoutpErr_9_25: BOOL:=FALSE;
		LXoutpErr_9_26: BOOL:=FALSE;
		LXoutpErr_9_27: BOOL:=FALSE;
		LXoutpErr_9_28: BOOL:=FALSE;
		LXoutpErr_9_29: BOOL:=FALSE;
		LXoutpErr_9_30: BOOL:=FALSE;
		LXoutpErr_9_31: BOOL:=FALSE;
		LXoutpErr_9_32: BOOL:=FALSE;
		LXoutpOk_10_1: BOOL:=FALSE;
		LXoutpOk_10_2: BOOL:=FALSE;
		LXoutpOk_10_3: BOOL:=FALSE;
		LXoutpOk_10_4: BOOL:=FALSE;
		LXoutpOk_10_5: BOOL:=FALSE;
		LXoutpOk_10_6: BOOL:=FALSE;
		LXoutpOk_10_7: BOOL:=FALSE;
		LXoutpOk_10_8: BOOL:=FALSE;
		LXoutpOk_10_9: BOOL:=FALSE;
		LXoutpOk_10_10: BOOL:=FALSE;
		LXoutpOk_10_11: BOOL:=FALSE;
		LXoutpOk_10_12: BOOL:=FALSE;
		LXoutpOk_10_13: BOOL:=FALSE;
		LXoutpOk_10_14: BOOL:=FALSE;
		LXoutpOk_10_15: BOOL:=FALSE;
		LXoutpOk_10_16: BOOL:=FALSE;
		LXoutpOk_10_17: BOOL:=FALSE;
		LXoutpOk_10_18: BOOL:=FALSE;
		LXoutpOk_10_19: BOOL:=FALSE;
		LXoutpOk_10_20: BOOL:=FALSE;
		LXoutpOk_10_21: BOOL:=FALSE;
		LXoutpOk_10_22: BOOL:=FALSE;
		LXoutpOk_10_23: BOOL:=FALSE;
		LXoutpOk_10_24: BOOL:=FALSE;
		LXoutpOk_10_25: BOOL:=FALSE;
		LXoutpOk_10_26: BOOL:=FALSE;
		LXoutpOk_10_27: BOOL:=FALSE;
		LXoutpOk_10_28: BOOL:=FALSE;
		LXoutpOk_10_29: BOOL:=FALSE;
		LXoutpOk_10_30: BOOL:=FALSE;
		LXoutpOk_10_31: BOOL:=FALSE;
		LXoutpOk_10_32: BOOL:=FALSE;
		LXoutpErr_10_1: BOOL:=FALSE;
		LXoutpErr_10_2: BOOL:=FALSE;
		LXoutpErr_10_3: BOOL:=FALSE;
		LXoutpErr_10_4: BOOL:=FALSE;
		LXoutpErr_10_5: BOOL:=FALSE;
		LXoutpErr_10_6: BOOL:=FALSE;
		LXoutpErr_10_7: BOOL:=FALSE;
		LXoutpErr_10_8: BOOL:=FALSE;
		LXoutpErr_10_9: BOOL:=FALSE;
		LXoutpErr_10_10: BOOL:=FALSE;
		LXoutpErr_10_11: BOOL:=FALSE;
		LXoutpErr_10_12: BOOL:=FALSE;
		LXoutpErr_10_13: BOOL:=FALSE;
		LXoutpErr_10_14: BOOL:=FALSE;
		LXoutpErr_10_15: BOOL:=FALSE;
		LXoutpErr_10_16: BOOL:=FALSE;
		LXoutpErr_10_17: BOOL:=FALSE;
		LXoutpErr_10_18: BOOL:=FALSE;
		LXoutpErr_10_19: BOOL:=FALSE;
		LXoutpErr_10_20: BOOL:=FALSE;
		LXoutpErr_10_21: BOOL:=FALSE;
		LXoutpErr_10_22: BOOL:=FALSE;
		LXoutpErr_10_23: BOOL:=FALSE;
		LXoutpErr_10_24: BOOL:=FALSE;
		LXoutpErr_10_25: BOOL:=FALSE;
		LXoutpErr_10_26: BOOL:=FALSE;
		LXoutpErr_10_27: BOOL:=FALSE;
		LXoutpErr_10_28: BOOL:=FALSE;
		LXoutpErr_10_29: BOOL:=FALSE;
		LXoutpErr_10_30: BOOL:=FALSE;
		LXoutpErr_10_31: BOOL:=FALSE;
		LXoutpErr_10_32: BOOL:=FALSE;
		TON1: TON;
		TON2: TON;
		TON3: TON;
		TON4: TON;
		TON5: TON;
		TON6: TON;
		TON7: TON;
		TON8: TON;
		TON9: TON;
		TON10: TON;
		TON11: TON;
		TON12: TON;
		TON13: TON;
		TON14: TON;
		TON15: TON;
		TOF1: TOF;
		TOF2: TOF;
		R_TRIG1: R_TRIG;
		R_TRIG2: R_TRIG;
		RS1: RS;
		SR1: SR;
		SR2: SR;
		SR3: SR;
		SR4: SR;
		SR5: SR;
		SR6: SR;
		SR7: SR;
		SR8: SR;
		SR9: SR;
		SR10: SR;
		Message1: MsgPut;
		Message2: MsgPut;
		Message3: MsgPut;
		Message4: MsgPut;
		Message5: MsgPut;
		Message6: MsgPut;
		Message7: MsgPut;
		Message8: MsgPut;
		Message9: MsgPut;
		Message10: MsgPut;
		Message11: MsgPut;
		Message12: MsgPut;
		Message13: MsgPut;
		Message14: MsgPut;
		Message15: MsgPut;
		Message16: MsgPut;
		Message17: MsgPut;
		Message18: MsgPut;
		Message19: MsgPut;
		Message20: MsgPut;
		Message21: MsgPut;
		Message22: MsgPut;
		Message23: MsgPut;
		Message24: MsgUDintUDint;
		Message25: MsgUDintUDint;
		Message26: MsgUDintUDint;
		Feedback1: OD04_Feedback;
		Feedback2: OD04_Feedback;
		Feedback3: OD04_Feedback;
		Feedback4: OD04_Feedback;
		SPdigOut9_1: SPdigitalOutV010;
		SPdigOut9_2: SPdigitalOutV010;
		SPdigOut9_3: SPdigitalOutV010;
		SPdigOut9_4: SPdigitalOutV010;
		SPdigOut9_5: SPdigitalOutV010;
		SPdigOut9_6: SPdigitalOutV010;
		SPdigOut9_7: SPdigitalOutV010;
		SPdigOut9_8: SPdigitalOutV010;
		SPdigOut9_9: SPdigitalOutV010;
		SPdigOut9_10: SPdigitalOutV010;
		SPdigOut9_11: SPdigitalOutV010;
		SPdigOut9_12: SPdigitalOutV010;
		SPdigOut9_13: SPdigitalOutV010;
		SPdigOut9_14: SPdigitalOutV010;
		SPdigOut9_15: SPdigitalOutV010;
		SPdigOut9_16: SPdigitalOutV010;
		SPdigOut9_17: SPdigitalOutV010;
		SPdigOut9_18: SPdigitalOutV010;
		SPdigOut9_19: SPdigitalOutV010;
		SPdigOut9_20: SPdigitalOutV010;
		SPdigOut9_21: SPdigitalOutV010;
		SPdigOut9_22: SPdigitalOutV010;
		SPdigOut9_23: SPdigitalOutV010;
		SPdigOut9_24: SPdigitalOutV010;
		SPdigOut9_25: SPdigitalOutV010;
		SPdigOut9_26: SPdigitalOutV010;
		SPdigOut9_27: SPdigitalOutV010;
		SPdigOut9_28: SPdigitalOutV010;
		SPdigOut9_29: SPdigitalOutV010;
		SPdigOut9_30: SPdigitalOutV010;
		SPdigOut9_31: SPdigitalOutV010;
		SPdigOut9_32: SPdigitalOutV010;
		SPdigOut10_1: SPdigitalOutV010;
		SPdigOut10_2: SPdigitalOutV010;
		SPdigOut10_3: SPdigitalOutV010;
		SPdigOut10_4: SPdigitalOutV010;
		SPdigOut10_5: SPdigitalOutV010;
		SPdigOut10_6: SPdigitalOutV010;
		SPdigOut10_7: SPdigitalOutV010;
		SPdigOut10_8: SPdigitalOutV010;
		SPdigOut10_9: SPdigitalOutV010;
		SPdigOut10_10: SPdigitalOutV010;
		SPdigOut10_11: SPdigitalOutV010;
		SPdigOut10_12: SPdigitalOutV010;
		SPdigOut10_13: SPdigitalOutV010;
		SPdigOut10_14: SPdigitalOutV010;
		SPdigOut10_15: SPdigitalOutV010;
		SPdigOut10_16: SPdigitalOutV010;
		SPdigOut10_17: SPdigitalOutV010;
		SPdigOut10_18: SPdigitalOutV010;
		SPdigOut10_19: SPdigitalOutV010;
		SPdigOut10_20: SPdigitalOutV010;
		SPdigOut10_21: SPdigitalOutV010;
		SPdigOut10_22: SPdigitalOutV010;
		SPdigOut10_23: SPdigitalOutV010;
		SPdigOut10_24: SPdigitalOutV010;
		SPdigOut10_25: SPdigitalOutV010;
		SPdigOut10_26: SPdigitalOutV010;
		SPdigOut10_27: SPdigitalOutV010;
		SPdigOut10_28: SPdigitalOutV010;
		SPdigOut10_29: SPdigitalOutV010;
		SPdigOut10_30: SPdigitalOutV010;
		SPdigOut10_31: SPdigitalOutV010;
		SPdigOut10_32: SPdigitalOutV010;
		SPdigPowOut14_1: SPdigPowOutV010;
		SPdigPowOut14_2: SPdigPowOutV010;
		SPdigPowOut14_3: SPdigPowOutV010;
		SPdigPowOut14_4: SPdigPowOutV010;
		SPdigPowOut15_1: SPdigPowOutV010;
		SPdigPowOut15_2: SPdigPowOutV010;
		SPdigPowOut15_3: SPdigPowOutV010;
		SPdigPowOut15_4: SPdigPowOutV010;
		SPanaOut17_1: SPanalogOutV010;
		SPanaOut17_2: SPanalogOutV010;
		SPanaOut17_3: SPanalogOutV010;
		SPanaOut17_4: SPanalogOutV010;
		SPanaOut17_5: SPanalogOutV010;
		SPanaOut17_6: SPanalogOutV010;
		SPanaOut17_7: SPanalogOutV010;
		SPanaOut17_8: SPanalogOutV010;
		SPanaOut17_9: SPanalogOutV010;
		SPanaOut17_10: SPanalogOutV010;
		SPanaOut17_11: SPanalogOutV010;
		SPanaOut17_12: SPanalogOutV010;
		SPanaOut17_13: SPanalogOutV010;
		SPanaOut17_14: SPanalogOutV010;
		SPanaOut17_15: SPanalogOutV010;
		SPanaOut17_16: SPanalogOutV010;
		SPanaOut18_1: SPanalogOutV010;
		SPanaOut18_2: SPanalogOutV010;
		SPanaOut18_3: SPanalogOutV010;
		SPanaOut18_4: SPanalogOutV010;
		SPanaOut18_5: SPanalogOutV010;
		SPanaOut18_6: SPanalogOutV010;
		SPanaOut18_7: SPanalogOutV010;
		SPanaOut18_8: SPanalogOutV010;
		SPanaOut18_9: SPanalogOutV010;
		SPanaOut18_10: SPanalogOutV010;
		SPanaOut18_11: SPanalogOutV010;
		SPanaOut18_12: SPanalogOutV010;
		SPanaOut18_13: SPanalogOutV010;
		SPanaOut18_14: SPanalogOutV010;
		SPanaOut18_15: SPanalogOutV010;
		SPanaOut18_16: SPanalogOutV010;
		SPanaOut19_1: SPanalogOutV010;
		SPanaOut19_2: SPanalogOutV010;
		SPanaOut19_3: SPanalogOutV010;
		SPanaOut19_4: SPanalogOutV010;
		SPanaOut19_5: SPanalogOutV010;
		SPanaOut19_6: SPanalogOutV010;
		SPanaOut19_7: SPanalogOutV010;
		SPanaOut19_8: SPanalogOutV010;
		SPanaOut19_9: SPanalogOutV010;
		SPanaOut19_10: SPanalogOutV010;
		SPanaOut19_11: SPanalogOutV010;
		SPanaOut19_12: SPanalogOutV010;
		SPanaOut19_13: SPanalogOutV010;
		SPanaOut19_14: SPanalogOutV010;
		SPanaOut19_15: SPanalogOutV010;
		SPanaOut19_16: SPanalogOutV010;
		Adress9_1: AdressOfBool;
		Adress9_2: AdressOfBool;
		Adress9_3: AdressOfBool;
		Adress9_4: AdressOfBool;
		Adress9_5: AdressOfBool;
		Adress9_6: AdressOfBool;
		Adress9_7: AdressOfBool;
		Adress9_8: AdressOfBool;
		Adress9_9: AdressOfBool;
		Adress9_10: AdressOfBool;
		Adress9_11: AdressOfBool;
		Adress9_12: AdressOfBool;
		Adress9_13: AdressOfBool;
		Adress9_14: AdressOfBool;
		Adress9_15: AdressOfBool;
		Adress9_16: AdressOfBool;
		Adress9_17: AdressOfBool;
		Adress9_18: AdressOfBool;
		Adress9_19: AdressOfBool;
		Adress9_20: AdressOfBool;
		Adress9_21: AdressOfBool;
		Adress9_22: AdressOfBool;
		Adress9_23: AdressOfBool;
		Adress9_24: AdressOfBool;
		Adress9_25: AdressOfBool;
		Adress9_26: AdressOfBool;
		Adress9_27: AdressOfBool;
		Adress9_28: AdressOfBool;
		Adress9_29: AdressOfBool;
		Adress9_30: AdressOfBool;
		Adress9_31: AdressOfBool;
		Adress9_32: AdressOfBool;
		Adress10_1: AdressOfBool;
		Adress10_2: AdressOfBool;
		Adress10_3: AdressOfBool;
		Adress10_4: AdressOfBool;
		Adress10_5: AdressOfBool;
		Adress10_6: AdressOfBool;
		Adress10_7: AdressOfBool;
		Adress10_8: AdressOfBool;
		Adress10_9: AdressOfBool;
		Adress10_10: AdressOfBool;
		Adress10_11: AdressOfBool;
		Adress10_12: AdressOfBool;
		Adress10_13: AdressOfBool;
		Adress10_14: AdressOfBool;
		Adress10_15: AdressOfBool;
		Adress10_16: AdressOfBool;
		Adress10_17: AdressOfBool;
		Adress10_18: AdressOfBool;
		Adress10_19: AdressOfBool;
		Adress10_20: AdressOfBool;
		Adress10_21: AdressOfBool;
		Adress10_22: AdressOfBool;
		Adress10_23: AdressOfBool;
		Adress10_24: AdressOfBool;
		Adress10_25: AdressOfBool;
		Adress10_26: AdressOfBool;
		Adress10_27: AdressOfBool;
		Adress10_28: AdressOfBool;
		Adress10_29: AdressOfBool;
		Adress10_30: AdressOfBool;
		Adress10_31: AdressOfBool;
		Adress10_32: AdressOfBool;
		Adress1: AdressOfBool;
		Adress2: AdressOfByte;
		Adress13_1: AdressOfByte;
		Adress13_2: AdressOfByte;
		Adress13_3: AdressOfByte;
		Adress13_4: AdressOfByte;
		Adress14_1: AdressOfByte;
		Adress14_2: AdressOfByte;
		Adress14_3: AdressOfByte;
		Adress14_4: AdressOfByte;
		Adress15_1: AdressOfByte;
		Adress15_2: AdressOfByte;
		Adress15_3: AdressOfByte;
		Adress15_4: AdressOfByte;
		Adress17_1: AdressOfUInt;
		Adress17_2: AdressOfUInt;
		Adress17_3: AdressOfUInt;
		Adress17_4: AdressOfUInt;
		Adress17_5: AdressOfUInt;
		Adress17_6: AdressOfUInt;
		Adress17_7: AdressOfUInt;
		Adress17_8: AdressOfUInt;
		Adress17_9: AdressOfUInt;
		Adress17_10: AdressOfUInt;
		Adress17_11: AdressOfUInt;
		Adress17_12: AdressOfUInt;
		Adress17_13: AdressOfUInt;
		Adress17_14: AdressOfUInt;
		Adress17_15: AdressOfUInt;
		Adress17_16: AdressOfUInt;
		Adress18_1: AdressOfUInt;
		Adress18_2: AdressOfUInt;
		Adress18_3: AdressOfUInt;
		Adress18_4: AdressOfUInt;
		Adress18_5: AdressOfUInt;
		Adress18_6: AdressOfUInt;
		Adress18_7: AdressOfUInt;
		Adress18_8: AdressOfUInt;
		Adress18_9: AdressOfUInt;
		Adress18_10: AdressOfUInt;
		Adress18_11: AdressOfUInt;
		Adress18_12: AdressOfUInt;
		Adress18_13: AdressOfUInt;
		Adress18_14: AdressOfUInt;
		Adress18_15: AdressOfUInt;
		Adress18_16: AdressOfUInt;
		Adress19_1: AdressOfUInt;
		Adress19_2: AdressOfUInt;
		Adress19_3: AdressOfUInt;
		Adress19_4: AdressOfUInt;
		Adress19_5: AdressOfUInt;
		Adress19_6: AdressOfUInt;
		Adress19_7: AdressOfUInt;
		Adress19_8: AdressOfUInt;
		Adress19_9: AdressOfUInt;
		Adress19_10: AdressOfUInt;
		Adress19_11: AdressOfUInt;
		Adress19_12: AdressOfUInt;
		Adress19_13: AdressOfUInt;
		Adress19_14: AdressOfUInt;
		Adress19_15: AdressOfUInt;
		Adress19_16: AdressOfUInt;
	END_VAR
'FBD'
BODY
    WORKSPACE
        NETWORK_LIST_TYPE := NWTYPEFBD ;
        ACTIVE_NETWORK := 0 ;
    END_WORKSPACE
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_F,SafetyCheck,,11,3,21,6,);
B(B_VARIN,,%ID2.5.1,9,4,11,6,);
B(B_VAROUT,,%QD2.5.1,21,4,23,6,);
B(B_COMMENT,,safety modules,1,1,32,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 5 ;
        NETWORK_BODY
B(B_F,SafetyCheck,,11,1,21,4,);
B(B_VARIN,,%ID2.5.2,9,2,11,4,);
B(B_VAROUT,,%QD2.5.2,21,2,23,4,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_COMMENT,,check module feedback Modul 13,1,1,32,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 52 ;
        NETWORK_BODY
B(B_FB,OD04_Feedback,Feedback1,13,2,29,8,);
B(B_F,@AND-2,,31,23,36,27,0N);
B(B_F,@AND-3,,31,33,36,38,0N);
B(B_VARIN,,FALSE,35,15,37,17,);
B(B_FB,SR,SR1,37,13,42,17,);
B(B_F,@GT-2,,23,24,28,28,);
B(B_VARIN,,0,21,26,23,28,);
B(B_F,@AND-3,,31,43,36,48,NN);
B(B_VARIN,,QIB2_013_1,11,3,13,5,);
B(B_VARIN,,QBpowSupply_LI,21,25,23,27,);
B(B_VAROUT,,LXoutpError_13_1,42,11,44,13,);
B(B_VARIN,,27,59,13,61,15,);
B(B_VARIN,,26,59,3,61,5,);
B(B_VARIN,,28,59,23,61,25,);
B(B_VARIN,,29,59,33,61,35,);
B(B_VARIN,,30,59,43,61,45,);
B(B_FB,MsgPut,Message1,63,2,70,11,);
B(B_VARIN,,MSG_APP_SAFETY,59,6,61,8,);
B(B_VARIN,,MSG_ERROR,59,7,61,9,);
B(B_VARIN,,MSG_APP,59,5,61,7,);
B(B_FB,MsgPut,Message2,63,12,70,21,);
B(B_VARIN,,MSG_APP_SAFETY,59,16,61,18,);
B(B_VARIN,,MSG_ERROR,59,17,61,19,);
B(B_VARIN,,MSG_APP,59,15,61,17,);
B(B_FB,AdressOfByte,Adress13_1,13,47,24,51,);
B(B_FB,MsgPut,Message3,63,22,70,31,);
B(B_VARIN,,MSG_APP_SAFETY,59,26,61,28,);
B(B_VARIN,,MSG_APP,59,25,61,27,);
B(B_FB,MsgPut,Message4,63,32,70,41,);
B(B_VARIN,,MSG_APP_SAFETY,59,36,61,38,);
B(B_VARIN,,MSG_ERROR,59,37,61,39,);
B(B_VARIN,,MSG_APP,59,35,61,37,);
B(B_FB,MsgPut,Message5,63,42,70,51,);
B(B_VARIN,,MSG_APP,59,45,61,47,);
B(B_VARIN,,MSG_WARNING,59,27,61,29,);
B(B_VARIN,,MSG_WARNING,59,47,61,49,);
B(B_VARIN,,MSG_APP_SAFETY,59,46,61,48,);
B(B_FB,SR,SR2,46,23,51,27,);
B(B_VARIN,,FALSE,44,27,46,29,);
B(B_COMMENT,,Der Vergleich von Ansteuerung undø^Rückmessung verzögert werden~ø^da die Rückmessung nicht sofort anliegt.,32,39,49,42,);
B(B_FB,TON,TON1,40,23,45,27,);
B(B_VARIN,,T#0.1s,38,25,40,27,);
B(B_FB,TON,TON2,40,33,45,37,);
B(B_VARIN,,T#0.1s,38,35,40,37,);
B(B_FB,TON,TON3,40,43,45,47,);
B(B_VARIN,,T#0.1s,38,45,40,47,);
L(29,25,31,25);
L(28,26,31,26);
L(29,5,63,5);
L(28,37,31,37);
L(29,36,31,36);
L(30,35,31,35);
L(29,4,30,4);
L(31,6,31,15);
L(42,15,63,15);
L(42,12,42,15);
L(29,6,31,6);
L(31,15,37,15);
L(28,47,31,47);
L(29,46,31,46);
L(30,45,31,45);
L(30,4,30,45);
L(28,26,28,47);
L(29,7,29,46);
L(62,9,62,49);
L(61,14,63,14);
L(61,4,63,4);
L(61,24,63,24);
L(61,34,63,34);
L(61,44,63,44);
L(61,7,63,7);
L(61,8,63,8);
L(61,6,63,6);
L(62,9,63,9);
L(62,19,63,19);
L(62,29,63,29);
L(62,39,63,39);
L(61,17,63,17);
L(61,18,63,18);
L(61,16,63,16);
L(13,4,13,50);
L(24,49,63,49);
L(61,27,63,27);
L(61,28,63,28);
L(61,26,63,26);
L(61,37,63,37);
L(61,38,63,38);
L(61,36,63,36);
L(61,47,63,47);
L(61,48,63,48);
L(61,46,63,46);
L(46,26,46,28);
L(51,25,63,25);
L(36,25,40,25);
L(36,35,40,35);
L(36,45,40,45);
L(45,35,63,35);
L(45,45,63,45);
L(45,25,46,25);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 52 ;
        NETWORK_BODY
B(B_FB,OD04_Feedback,Feedback2,13,2,29,8,);
B(B_F,@AND-2,,31,23,36,27,0N);
B(B_F,@AND-3,,31,33,36,38,0N);
B(B_VARIN,,FALSE,35,15,37,17,);
B(B_FB,SR,SR3,37,13,42,17,);
B(B_F,@GT-2,,23,24,28,28,);
B(B_VARIN,,0,21,26,23,28,);
B(B_F,@AND-3,,31,43,36,48,NN);
B(B_VAROUT,,LXoutpError_13_2,42,11,44,13,);
B(B_VARIN,,QIB2_013_2,11,3,13,5,);
B(B_VARIN,,QBpowSupply_LD1,21,25,23,27,);
B(B_VARIN,,26,59,3,61,5,);
B(B_VARIN,,30,59,43,61,45,);
B(B_VARIN,,29,59,33,61,35,);
B(B_VARIN,,28,59,23,61,25,);
B(B_VARIN,,27,59,13,61,15,);
B(B_FB,AdressOfByte,Adress13_2,13,47,24,51,);
B(B_FB,MsgPut,Message6,63,2,70,11,);
B(B_VARIN,,MSG_APP_SAFETY,59,6,61,8,);
B(B_VARIN,,MSG_ERROR,59,7,61,9,);
B(B_VARIN,,MSG_APP,59,5,61,7,);
B(B_FB,MsgPut,Message7,63,12,70,21,);
B(B_VARIN,,MSG_APP_SAFETY,59,16,61,18,);
B(B_VARIN,,MSG_ERROR,59,17,61,19,);
B(B_VARIN,,MSG_APP,59,15,61,17,);
B(B_FB,MsgPut,Message8,63,22,70,31,);
B(B_VARIN,,MSG_APP_SAFETY,59,26,61,28,);
B(B_VARIN,,MSG_APP,59,25,61,27,);
B(B_VARIN,,MSG_WARNING,59,27,61,29,);
B(B_FB,MsgPut,Message9,63,32,70,41,);
B(B_VARIN,,MSG_APP_SAFETY,59,36,61,38,);
B(B_VARIN,,MSG_ERROR,59,37,61,39,);
B(B_VARIN,,MSG_APP,59,35,61,37,);
B(B_FB,MsgPut,Message10,63,42,70,51,);
B(B_VARIN,,MSG_APP_SAFETY,59,46,61,48,);
B(B_VARIN,,MSG_APP,59,45,61,47,);
B(B_VARIN,,MSG_WARNING,59,47,61,49,);
B(B_FB,SR,SR4,46,23,51,27,);
B(B_VARIN,,FALSE,44,27,46,29,);
B(B_VAROUT,,LXoutpWarn_13_2,51,21,53,23,);
B(B_COMMENT,,Der Vergleich von Ansteuerung undø^Rückmessung verzögert werden~ø^da die Rückmessung nicht sofort anliegt.,32,39,49,42,);
B(B_FB,TON,TON4,40,23,45,27,);
B(B_VARIN,,T#0.1s,38,25,40,27,);
B(B_FB,TON,TON5,40,33,45,37,);
B(B_VARIN,,T#0.1s,38,35,40,37,);
B(B_FB,TON,TON6,40,43,45,47,);
B(B_VARIN,,T#0.1s,38,45,40,47,);
L(29,25,31,25);
L(28,26,31,26);
L(29,5,63,5);
L(28,37,31,37);
L(29,36,31,36);
L(30,35,31,35);
L(29,4,30,4);
L(31,6,31,15);
L(42,15,63,15);
L(42,12,42,15);
L(29,6,31,6);
L(31,15,37,15);
L(28,47,31,47);
L(29,46,31,46);
L(30,45,31,45);
L(30,4,30,45);
L(28,26,28,47);
L(29,7,29,46);
L(62,9,62,49);
L(61,4,63,4);
L(61,14,63,14);
L(61,24,63,24);
L(61,34,63,34);
L(61,44,63,44);
L(62,9,63,9);
L(62,19,63,19);
L(62,29,63,29);
L(62,39,63,39);
L(24,49,63,49);
L(13,4,13,50);
L(61,7,63,7);
L(61,8,63,8);
L(61,6,63,6);
L(61,17,63,17);
L(61,18,63,18);
L(61,16,63,16);
L(61,27,63,27);
L(61,28,63,28);
L(61,26,63,26);
L(61,37,63,37);
L(61,38,63,38);
L(61,36,63,36);
L(61,47,63,47);
L(61,48,63,48);
L(61,46,63,46);
L(51,25,63,25);
L(46,26,46,28);
L(51,22,51,25);
L(36,25,40,25);
L(36,35,40,35);
L(36,45,40,45);
L(45,45,63,45);
L(45,35,63,35);
L(45,25,46,25);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 52 ;
        NETWORK_BODY
B(B_FB,OD04_Feedback,Feedback3,13,2,29,8,);
B(B_F,@AND-2,,31,23,36,27,0N);
B(B_F,@AND-3,,31,33,36,38,0N);
B(B_VARIN,,FALSE,35,15,37,17,);
B(B_FB,SR,SR5,37,13,42,17,);
B(B_F,@GT-2,,23,24,28,28,);
B(B_VARIN,,0,21,26,23,28,);
B(B_F,@AND-3,,31,43,36,48,NN);
B(B_VAROUT,,LXoutpError_13_3,42,11,44,13,);
B(B_VARIN,,QIB2_013_3,11,3,13,5,);
B(B_VARIN,,QBpowSupply_LD2,21,25,23,27,);
B(B_VARIN,,30,59,43,61,45,);
B(B_VARIN,,26,59,3,61,5,);
B(B_VARIN,,27,59,13,61,15,);
B(B_VARIN,,28,59,23,61,25,);
B(B_VARIN,,29,59,33,61,35,);
B(B_FB,AdressOfByte,Adress13_3,13,47,24,51,);
B(B_FB,MsgPut,Message11,63,2,70,11,);
B(B_VARIN,,MSG_APP_SAFETY,59,6,61,8,);
B(B_VARIN,,MSG_ERROR,59,7,61,9,);
B(B_VARIN,,MSG_APP,59,5,61,7,);
B(B_FB,MsgPut,Message12,63,12,70,21,);
B(B_VARIN,,MSG_APP_SAFETY,59,16,61,18,);
B(B_VARIN,,MSG_ERROR,59,17,61,19,);
B(B_VARIN,,MSG_APP,59,15,61,17,);
B(B_FB,MsgPut,Message13,63,22,70,31,);
B(B_VARIN,,MSG_APP_SAFETY,59,26,61,28,);
B(B_VARIN,,MSG_APP,59,25,61,27,);
B(B_FB,MsgPut,Message14,63,32,70,41,);
B(B_VARIN,,MSG_APP_SAFETY,59,36,61,38,);
B(B_VARIN,,MSG_ERROR,59,37,61,39,);
B(B_VARIN,,MSG_APP,59,35,61,37,);
B(B_FB,MsgPut,Message15,63,42,70,51,);
B(B_VARIN,,MSG_APP_SAFETY,59,46,61,48,);
B(B_VARIN,,MSG_APP,59,45,61,47,);
B(B_VARIN,,MSG_WARNING,59,47,61,49,);
B(B_VARIN,,MSG_WARNING,59,27,61,29,);
B(B_FB,SR,SR6,46,23,51,27,);
B(B_VAROUT,,LXoutpWarn_13_3,51,21,53,23,);
B(B_COMMENT,,Der Vergleich von Ansteuerung undø^Rückmessung verzögert werden~ø^da die Rückmessung nicht sofort anliegt.,32,39,49,42,);
B(B_VARIN,,FALSE,44,27,46,29,);
B(B_FB,TON,TON9,40,43,45,47,);
B(B_VARIN,,T#0.1s,38,45,40,47,);
B(B_FB,TON,TON8,40,33,45,37,);
B(B_VARIN,,T#0.1s,38,35,40,37,);
B(B_FB,TON,TON7,40,23,45,27,);
B(B_VARIN,,T#0.1s,38,25,40,27,);
L(29,25,31,25);
L(28,26,31,26);
L(29,5,63,5);
L(28,37,31,37);
L(29,36,31,36);
L(30,35,31,35);
L(29,4,30,4);
L(31,6,31,15);
L(42,15,63,15);
L(42,12,42,15);
L(29,6,31,6);
L(31,15,37,15);
L(28,47,31,47);
L(29,46,31,46);
L(30,45,31,45);
L(30,4,30,45);
L(28,26,28,47);
L(29,7,29,46);
L(62,9,62,49);
L(61,44,63,44);
L(61,34,63,34);
L(61,24,63,24);
L(61,14,63,14);
L(61,4,63,4);
L(62,39,63,39);
L(62,29,63,29);
L(62,19,63,19);
L(62,9,63,9);
L(13,4,13,50);
L(24,49,63,49);
L(61,7,63,7);
L(61,8,63,8);
L(61,6,63,6);
L(61,17,63,17);
L(61,16,63,16);
L(61,27,63,27);
L(61,28,63,28);
L(61,26,63,26);
L(61,37,63,37);
L(61,38,63,38);
L(61,36,63,36);
L(61,47,63,47);
L(61,48,63,48);
L(61,46,63,46);
L(61,18,63,18);
L(51,25,63,25);
L(46,26,46,28);
L(51,22,51,25);
L(45,35,63,35);
L(45,45,63,45);
L(36,45,40,45);
L(36,35,40,35);
L(36,25,40,25);
L(45,25,46,25);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 52 ;
        NETWORK_BODY
B(B_FB,OD04_Feedback,Feedback4,13,2,29,8,);
B(B_F,@AND-2,,31,23,36,27,0N);
B(B_F,@AND-3,,31,33,36,38,0N);
B(B_VARIN,,FALSE,35,15,37,17,);
B(B_FB,SR,SR7,37,13,42,17,);
B(B_F,@GT-2,,23,24,28,28,);
B(B_VARIN,,0,21,26,23,28,);
B(B_F,@AND-3,,31,43,36,48,NN);
B(B_VAROUT,,LXoutpError_13_4,42,11,44,13,);
B(B_VARIN,,QIB2_013_4,11,3,13,5,);
B(B_VARIN,,QBpowSupply_LED,21,25,23,27,);
B(B_VARIN,,26,59,3,61,5,);
B(B_VARIN,,27,59,13,61,15,);
B(B_VARIN,,28,59,23,61,25,);
B(B_VARIN,,29,59,33,61,35,);
B(B_VARIN,,30,59,43,61,45,);
B(B_FB,AdressOfByte,Adress13_4,13,47,24,51,);
B(B_FB,MsgPut,Message16,63,2,70,11,);
B(B_VARIN,,MSG_APP_SAFETY,59,6,61,8,);
B(B_VARIN,,MSG_ERROR,59,7,61,9,);
B(B_VARIN,,MSG_APP,59,5,61,7,);
B(B_FB,MsgPut,Message17,63,12,70,21,);
B(B_VARIN,,MSG_APP_SAFETY,59,16,61,18,);
B(B_VARIN,,MSG_ERROR,59,17,61,19,);
B(B_VARIN,,MSG_APP,59,15,61,17,);
B(B_FB,MsgPut,Message18,63,22,70,31,);
B(B_VARIN,,MSG_APP_SAFETY,59,26,61,28,);
B(B_VARIN,,MSG_APP,59,25,61,27,);
B(B_FB,MsgPut,Message19,63,32,70,41,);
B(B_VARIN,,MSG_APP_SAFETY,59,36,61,38,);
B(B_VARIN,,MSG_ERROR,59,37,61,39,);
B(B_VARIN,,MSG_APP,59,35,61,37,);
B(B_FB,MsgPut,Message20,63,42,70,51,);
B(B_VARIN,,MSG_APP_SAFETY,59,46,61,48,);
B(B_VARIN,,MSG_APP,59,45,61,47,);
B(B_VARIN,,MSG_WARNING,59,47,61,49,);
B(B_VARIN,,MSG_WARNING,59,27,61,29,);
B(B_FB,SR,SR8,46,23,51,27,);
B(B_VARIN,,FALSE,44,27,46,29,);
B(B_VAROUT,,LXoutpWarn_13_4,51,21,53,23,);
B(B_COMMENT,,Der Vergleich von Ansteuerung undø^Rückmessung verzögert werden~ø^da die Rückmessung nicht sofort anliegt.,32,39,49,42,);
B(B_FB,TON,TON10,40,23,45,27,);
B(B_VARIN,,T#0.1s,38,25,40,27,);
B(B_FB,TON,TON11,40,33,45,37,);
B(B_VARIN,,T#0.1s,38,35,40,37,);
B(B_FB,TON,TON12,40,43,45,47,);
B(B_VARIN,,T#0.1s,38,45,40,47,);
L(29,25,31,25);
L(28,26,31,26);
L(29,5,63,5);
L(28,37,31,37);
L(29,36,31,36);
L(30,35,31,35);
L(29,4,30,4);
L(31,6,31,15);
L(42,15,63,15);
L(42,12,42,15);
L(29,6,31,6);
L(31,15,37,15);
L(28,47,31,47);
L(29,46,31,46);
L(30,45,31,45);
L(30,4,30,45);
L(28,26,28,47);
L(29,7,29,46);
L(62,9,62,49);
L(61,44,63,44);
L(61,34,63,34);
L(61,24,63,24);
L(61,14,63,14);
L(61,4,63,4);
L(62,9,63,9);
L(62,19,63,19);
L(62,29,63,29);
L(62,39,63,39);
L(13,4,13,50);
L(24,49,63,49);
L(61,7,63,7);
L(61,8,63,8);
L(61,6,63,6);
L(61,17,63,17);
L(61,16,63,16);
L(61,27,63,27);
L(61,28,63,28);
L(61,26,63,26);
L(61,37,63,37);
L(61,38,63,38);
L(61,36,63,36);
L(61,47,63,47);
L(61,48,63,48);
L(61,46,63,46);
L(61,18,63,18);
L(51,25,63,25);
L(46,26,46,28);
L(51,22,51,25);
L(45,35,63,35);
L(45,45,63,45);
L(36,25,40,25);
L(36,35,40,35);
L(36,45,40,45);
L(45,25,46,25);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_VAROUT,,LXpowerRed_13,16,2,18,4,);
B(B_F,@OR-3,,11,1,16,6,);
B(B_VARIN,,LXoutpWarn_13_2,9,2,11,4,);
B(B_VARIN,,LXoutpWarn_13_4,9,4,11,6,);
B(B_VARIN,,LXoutpWarn_13_3,9,3,11,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_COMMENT,,set outputs for supply voltages,1,1,32,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_FB,TON,TON13,12,2,17,6,N);
B(B_VARIN,,LXoutpError_13_1,10,3,12,5,);
B(B_VARIN,,T#0.5s,10,4,12,6,);
B(B_F,sel,,21,2,26,7,);
B(B_VAROUT,,QBpowSupply_LI,26,3,28,5,);
B(B_VARIN,,1,19,5,21,7,);
B(B_VARIN,,0,19,4,21,6,);
L(17,4,21,4);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_VARIN,,MXminEngineSpeed,10,2,12,4,);
B(B_F,sel,,12,1,17,6,);
B(B_VARIN,,1,10,4,12,6,);
B(B_VARIN,,0,10,3,12,5,);
B(B_VAROUT,,QBpowSupply_LD1,17,2,19,4,);
B(B_VAROUT,,QBpowSupply_LD2,17,3,19,5,);
B(B_VAROUT,,QBpowSupply_LD3,17,4,19,6,);
L(17,3,17,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_F,@AND-2,,17,3,22,7,);
B(B_VARIN,,IXentrySwiClosed,10,7,12,9,);
B(B_VARIN,,MXremContActive,10,8,12,10,);
B(B_F,@OR-2,,12,6,17,10,);
B(B_VARIN,,MXminEngineSpeed,15,4,17,6,);
B(B_FB,TOF,TOF1,22,3,27,7,);
B(B_VARIN,,T#15s,20,8,22,10,);
B(B_F,sel,,31,3,36,8,);
B(B_VARIN,,1,29,6,31,8,);
B(B_VARIN,,0,29,5,31,7,);
B(B_VAROUT,,QBpowSupply_LED,36,4,38,6,);
B(B_VAROUT,,LXpowSupply_LED,27,1,29,3,);
L(17,6,17,8);
L(22,6,22,9);
L(27,5,31,5);
L(27,2,27,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 46 ;
        NETWORK_BODY
B(B_COMMENT,,check feedback power supply LED,1,1,32,2,);
B(B_VAROUT,,LXpowerRed_PowS,45,14,47,16,);
B(B_VARIN,,IXfeedbackPowLED,15,6,17,8,);
B(B_VARIN,,LXpowSupply_LED,15,5,17,7,);
B(B_F,@AND-2,,17,4,22,8,N);
B(B_FB,TON,TON14,22,4,27,8,);
B(B_VARIN,,T#0.25s,20,8,22,10,);
B(B_FB,SR,SR9,28,4,33,8,);
B(B_VARIN,,FALSE,26,8,28,10,);
B(B_COMMENT,,250ms Verzögerung bei der Rückmessungsauswertung~ø^weil zunächst hier ein 50A Relais schalten muß.,9,14,30,16,);
B(B_F,@AND-2,,35,17,40,21,);
B(B_FB,RS,RS1,30,17,35,21,);
B(B_F,@AND-2,,25,21,30,25,N);
B(B_FB,R_TRIG,R_TRIG2,18,22,25,25,);
B(B_VARIN,,LXpowSupply_LED,16,23,18,25,);
B(B_FB,R_TRIG,R_TRIG1,12,17,19,20,);
B(B_VARIN,,TRUE,10,18,12,20,);
B(B_FB,TOF,TOF2,19,17,24,21,);
B(B_VARIN,,T#0.25s,17,20,19,22,);
B(B_F,@OR-2,,40,13,45,17,);
B(B_FB,MsgPut,Message21,56,3,63,12,);
B(B_FB,MsgPut,Message22,56,16,63,25,);
B(B_VARIN,,IXfeedbackPowLED,26,31,28,33,);
B(B_VARIN,,LXpowSupply_LED,26,30,28,32,);
B(B_F,@AND-2,,28,29,33,33,0N);
B(B_FB,TON,TON15,33,29,38,33,);
B(B_VARIN,,T#0.25s,31,33,33,35,);
B(B_FB,SR,SR10,39,29,44,33,);
B(B_VARIN,,FALSE,37,33,39,35,);
B(B_FB,MsgPut,Message23,56,28,63,37,);
B(B_VARIN,,31,51,4,53,6,);
B(B_VARIN,,MSG_WARNING,51,8,53,10,);
B(B_VARIN,,MSG_APP,51,6,53,8,);
B(B_VARIN,,MSG_APP_SAFETY,51,7,53,9,);
B(B_VARIN,,32,51,17,53,19,);
B(B_VARIN,,MSG_WARNING,51,21,53,23,);
B(B_VARIN,,MSG_APP,51,19,53,21,);
B(B_VARIN,,MSG_APP_SAFETY,51,20,53,22,);
B(B_VARIN,,33,51,29,53,31,);
B(B_VARIN,,MSG_WARNING,51,33,53,35,);
B(B_VARIN,,MSG_APP,51,31,53,33,);
B(B_VARIN,,MSG_APP_SAFETY,51,32,53,34,);
B(B_FB,AdressOfByte,Adress2,28,41,39,45,);
B(B_VARIN,,QBpowSupply_LED,26,43,28,45,);
B(B_FB,AdressOfBool,Adress1,28,36,39,40,);
L(40,6,40,15);
L(28,7,28,9);
L(27,6,28,6);
L(22,7,22,9);
L(33,6,56,6);
L(40,19,56,19);
L(40,16,40,19);
L(30,20,30,23);
L(25,19,25,23);
L(19,20,19,21);
L(24,19,30,19);
L(35,20,35,26);
L(18,26,35,26);
L(18,24,18,26);
L(39,32,39,34);
L(38,31,39,31);
L(44,31,56,31);
L(33,32,33,34);
L(54,10,56,10);
L(53,9,56,9);
L(53,8,56,8);
L(53,7,56,7);
L(53,5,56,5);
L(53,18,56,18);
L(53,20,56,20);
L(53,21,56,21);
L(53,22,56,22);
L(53,30,56,30);
L(53,32,56,32);
L(53,33,56,33);
L(53,34,56,34);
L(54,35,56,35);
L(28,32,28,39);
L(55,36,56,36);
L(55,23,55,38);
L(55,23,56,23);
L(39,43,54,43);
L(54,10,54,43);
L(39,38,55,38);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 3 ;
        NETWORK_BODY
B(B_COMMENT,,check module feedback,1,1,32,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_VARIN,,%QX2.9.1,22,3,24,5,);
B(B_VAROUT,,LXoutpOk_9_1,40,3,42,5,);
B(B_VAROUT,,LXoutpErr_9_1,40,4,42,6,);
B(B_FB,SPdigitalOutV010,SPdigOut9_1,24,2,40,7,);
B(B_FB,AdressOfBool,Adress9_1,13,6,24,10,);
B(B_VARIN,,QIX2_009_1,11,4,13,6,);
L(24,6,24,8);
L(13,5,13,9);
L(13,5,24,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_VARIN,,%QX2.9.2,22,3,24,5,);
B(B_VAROUT,,LXoutpOk_9_2,40,3,42,5,);
B(B_VAROUT,,LXoutpErr_9_2,40,4,42,6,);
B(B_FB,SPdigitalOutV010,SPdigOut9_2,24,2,40,7,);
B(B_VARIN,,QIX2_009_2,11,4,13,6,);
B(B_FB,AdressOfBool,Adress9_2,13,6,24,10,);
L(13,5,13,9);
L(13,5,24,5);
L(24,6,24,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_VARIN,,%QX2.9.3,22,3,24,5,);
B(B_VAROUT,,LXoutpOk_9_3,40,3,42,5,);
B(B_VAROUT,,LXoutpErr_9_3,40,4,42,6,);
B(B_FB,SPdigitalOutV010,SPdigOut9_3,24,2,40,7,);
B(B_VARIN,,QIX2_009_3,11,4,13,6,);
B(B_FB,AdressOfBool,Adress9_3,13,6,24,10,);
L(24,6,24,8);
L(13,5,13,9);
L(13,5,24,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_VARIN,,%QX2.9.4,22,2,24,4,);
B(B_VAROUT,,LXoutpOk_9_4,40,2,42,4,);
B(B_VAROUT,,LXoutpErr_9_4,40,3,42,5,);
B(B_FB,SPdigitalOutV010,SPdigOut9_4,24,1,40,6,);
B(B_VARIN,,QIX2_009_4,11,3,13,5,);
B(B_FB,AdressOfBool,Adress9_4,13,5,24,9,);
L(24,5,24,7);
L(13,4,13,8);
L(13,4,24,4);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_VARIN,,%QX2.9.5,22,2,24,4,);
B(B_VAROUT,,LXoutpOk_9_5,40,2,42,4,);
B(B_VAROUT,,LXoutpErr_9_5,40,3,42,5,);
B(B_FB,SPdigitalOutV010,SPdigOut9_5,24,1,40,6,);
B(B_VARIN,,QIX2_009_5,11,3,13,5,);
B(B_FB,AdressOfBool,Adress9_5,13,5,24,9,);
L(24,5,24,7);
L(13,4,13,8);
L(13,4,24,4);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_VARIN,,%QX2.9.6,22,2,24,4,);
B(B_VAROUT,,LXoutpOk_9_6,40,2,42,4,);
B(B_VAROUT,,LXoutpErr_9_6,40,3,42,5,);
B(B_FB,SPdigitalOutV010,SPdigOut9_6,24,1,40,6,);
B(B_VARIN,,QIX2_009_6,11,3,13,5,);
B(B_FB,AdressOfBool,Adress9_6,13,5,24,9,);
L(24,5,24,7);
L(13,4,13,8);
L(13,4,24,4);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_VARIN,,%QX2.9.7,22,2,24,4,);
B(B_VAROUT,,LXoutpOk_9_7,40,2,42,4,);
B(B_VAROUT,,LXoutpErr_9_7,40,3,42,5,);
B(B_FB,SPdigitalOutV010,SPdigOut9_7,24,1,40,6,);
B(B_VARIN,,QIX2_009_7,11,3,13,5,);
B(B_FB,AdressOfBool,Adress9_7,13,5,24,9,);
L(24,5,24,7);
L(13,4,13,8);
L(13,4,24,4);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_VARIN,,%QX2.9.8,22,2,24,4,);
B(B_VAROUT,,LXoutpOk_9_8,40,2,42,4,);
B(B_VAROUT,,LXoutpErr_9_8,40,3,42,5,);
B(B_FB,SPdigitalOutV010,SPdigOut9_8,24,1,40,6,);
B(B_VARIN,,QIX2_009_8,11,3,13,5,);
B(B_FB,AdressOfBool,Adress9_8,13,5,24,9,);
L(24,5,24,7);
L(13,4,13,8);
L(13,4,24,4);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_VARIN,,%QX2.9.9,22,2,24,4,);
B(B_VAROUT,,LXoutpOk_9_9,40,2,42,4,);
B(B_VAROUT,,LXoutpErr_9_9,40,3,42,5,);
B(B_FB,SPdigitalOutV010,SPdigOut9_9,24,1,40,6,);
B(B_VARIN,,QIX2_009_9,11,3,13,5,);
B(B_FB,AdressOfBool,Adress9_9,13,5,24,9,);
L(24,5,24,7);
L(13,4,13,8);
L(13,4,24,4);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_VARIN,,%QX2.9.10,22,2,24,4,);
B(B_VAROUT,,LXoutpOk_9_10,40,2,42,4,);
B(B_VAROUT,,LXoutpErr_9_10,40,3,42,5,);
B(B_FB,SPdigitalOutV010,SPdigOut9_10,24,1,40,6,);
B(B_VARIN,,QIX2_009_10,11,3,13,5,);
B(B_FB,AdressOfBool,Adress9_10,13,5,24,9,);
L(24,5,24,7);
L(13,4,13,8);
L(13,4,24,4);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_VARIN,,%QX2.9.11,22,2,24,4,);
B(B_VAROUT,,LXoutpOk_9_11,40,2,42,4,);
B(B_VAROUT,,LXoutpErr_9_11,40,3,42,5,);
B(B_FB,SPdigitalOutV010,SPdigOut9_11,24,1,40,6,);
B(B_VARIN,,QIX2_009_11,11,3,13,5,);
B(B_FB,AdressOfBool,Adress9_11,13,5,24,9,);
L(24,5,24,7);
L(13,4,13,8);
L(13,4,24,4);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_VARIN,,%QX2.9.12,22,2,24,4,);
B(B_VAROUT,,LXoutpOk_9_12,40,2,42,4,);
B(B_VAROUT,,LXoutpErr_9_12,40,3,42,5,);
B(B_FB,SPdigitalOutV010,SPdigOut9_12,24,1,40,6,);
B(B_VARIN,,QIX2_009_12,11,3,13,5,);
B(B_FB,AdressOfBool,Adress9_12,13,5,24,9,);
L(24,5,24,7);
L(13,4,13,8);
L(13,4,24,4);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_VARIN,,%QX2.9.13,22,2,24,4,);
B(B_VAROUT,,LXoutpOk_9_13,40,2,42,4,);
B(B_VAROUT,,LXoutpErr_9_13,40,3,42,5,);
B(B_FB,SPdigitalOutV010,SPdigOut9_13,24,1,40,6,);
B(B_VARIN,,QIX2_009_13,11,3,13,5,);
B(B_FB,AdressOfBool,Adress9_13,13,5,24,9,);
L(24,5,24,7);
L(13,4,13,8);
L(13,4,24,4);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_VARIN,,%QX2.9.14,22,2,24,4,);
B(B_VAROUT,,LXoutpOk_9_14,40,2,42,4,);
B(B_VAROUT,,LXoutpErr_9_14,40,3,42,5,);
B(B_FB,SPdigitalOutV010,SPdigOut9_14,24,1,40,6,);
B(B_VARIN,,QIX2_009_14,11,3,13,5,);
B(B_FB,AdressOfBool,Adress9_14,13,5,24,9,);
L(24,5,24,7);
L(13,4,13,8);
L(13,4,24,4);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_VARIN,,%QX2.9.15,22,2,24,4,);
B(B_VAROUT,,LXoutpOk_9_15,40,2,42,4,);
B(B_VAROUT,,LXoutpErr_9_15,40,3,42,5,);
B(B_FB,SPdigitalOutV010,SPdigOut9_15,24,1,40,6,);
B(B_VARIN,,QIX2_009_15,11,3,13,5,);
B(B_FB,AdressOfBool,Adress9_15,13,5,24,9,);
L(24,5,24,7);
L(13,4,13,8);
L(13,4,24,4);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_VARIN,,%QX2.9.16,22,2,24,4,);
B(B_VAROUT,,LXoutpOk_9_16,40,2,42,4,);
B(B_VAROUT,,LXoutpErr_9_16,40,3,42,5,);
B(B_FB,SPdigitalOutV010,SPdigOut9_16,24,1,40,6,);
B(B_VARIN,,QIX2_009_16,11,3,13,5,);
B(B_FB,AdressOfBool,Adress9_16,13,5,24,9,);
L(24,5,24,7);
L(13,4,13,8);
L(13,4,24,4);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_VARIN,,%QX2.9.17,22,2,24,4,);
B(B_VAROUT,,LXoutpOk_9_17,40,2,42,4,);
B(B_VAROUT,,LXoutpErr_9_17,40,3,42,5,);
B(B_FB,SPdigitalOutV010,SPdigOut9_17,24,1,40,6,);
B(B_VARIN,,QIX2_009_17,11,3,13,5,);
B(B_FB,AdressOfBool,Adress9_17,13,5,24,9,);
L(24,5,24,7);
L(13,4,13,8);
L(13,4,24,4);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_VARIN,,%QX2.9.18,22,2,24,4,);
B(B_VAROUT,,LXoutpOk_9_18,40,2,42,4,);
B(B_VAROUT,,LXoutpErr_9_18,40,3,42,5,);
B(B_FB,SPdigitalOutV010,SPdigOut9_18,24,1,40,6,);
B(B_VARIN,,QIX2_009_18,11,3,13,5,);
B(B_FB,AdressOfBool,Adress9_18,13,5,24,9,);
L(24,5,24,7);
L(13,4,13,8);
L(13,4,24,4);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_VARIN,,%QX2.9.19,22,2,24,4,);
B(B_VAROUT,,LXoutpOk_9_19,40,2,42,4,);
B(B_VAROUT,,LXoutpErr_9_19,40,3,42,5,);
B(B_FB,SPdigitalOutV010,SPdigOut9_19,24,1,40,6,);
B(B_VARIN,,QIX2_009_19,11,3,13,5,);
B(B_FB,AdressOfBool,Adress9_19,13,5,24,9,);
L(24,5,24,7);
L(13,4,13,8);
L(13,4,24,4);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_VARIN,,%QX2.9.20,22,2,24,4,);
B(B_VAROUT,,LXoutpOk_9_20,40,2,42,4,);
B(B_VAROUT,,LXoutpErr_9_20,40,3,42,5,);
B(B_FB,SPdigitalOutV010,SPdigOut9_20,24,1,40,6,);
B(B_VARIN,,QIX2_009_20,11,3,13,5,);
B(B_FB,AdressOfBool,Adress9_20,13,5,24,9,);
L(24,5,24,7);
L(13,4,13,8);
L(13,4,24,4);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_VARIN,,%QX2.9.21,22,2,24,4,);
B(B_VAROUT,,LXoutpOk_9_21,40,2,42,4,);
B(B_VAROUT,,LXoutpErr_9_21,40,3,42,5,);
B(B_FB,SPdigitalOutV010,SPdigOut9_21,24,1,40,6,);
B(B_VARIN,,QIX2_009_21,11,3,13,5,);
B(B_FB,AdressOfBool,Adress9_21,13,5,24,9,);
L(24,5,24,7);
L(13,4,13,8);
L(13,4,24,4);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_VARIN,,%QX2.9.22,22,2,24,4,);
B(B_VAROUT,,LXoutpOk_9_22,40,2,42,4,);
B(B_VAROUT,,LXoutpErr_9_22,40,3,42,5,);
B(B_FB,SPdigitalOutV010,SPdigOut9_22,24,1,40,6,);
B(B_VARIN,,QIX2_009_22,11,3,13,5,);
B(B_FB,AdressOfBool,Adress9_22,13,5,24,9,);
L(24,5,24,7);
L(13,4,13,8);
L(13,4,24,4);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_VARIN,,%QX2.9.23,22,2,24,4,);
B(B_VAROUT,,LXoutpOk_9_23,40,2,42,4,);
B(B_VAROUT,,LXoutpErr_9_23,40,3,42,5,);
B(B_FB,SPdigitalOutV010,SPdigOut9_23,24,1,40,6,);
B(B_VARIN,,QIX2_009_23,11,3,13,5,);
B(B_FB,AdressOfBool,Adress9_23,13,5,24,9,);
L(24,5,24,7);
L(13,4,13,8);
L(13,4,24,4);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_VARIN,,%QX2.9.24,22,2,24,4,);
B(B_VAROUT,,LXoutpOk_9_24,40,2,42,4,);
B(B_VAROUT,,LXoutpErr_9_24,40,3,42,5,);
B(B_FB,SPdigitalOutV010,SPdigOut9_24,24,1,40,6,);
B(B_VARIN,,QIX2_009_24,11,3,13,5,);
B(B_FB,AdressOfBool,Adress9_24,13,5,24,9,);
L(24,5,24,7);
L(13,4,13,8);
L(13,4,24,4);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_VARIN,,%QX2.9.25,22,2,24,4,);
B(B_VAROUT,,LXoutpOk_9_25,40,2,42,4,);
B(B_VAROUT,,LXoutpErr_9_25,40,3,42,5,);
B(B_FB,SPdigitalOutV010,SPdigOut9_25,24,1,40,6,);
B(B_VARIN,,QIX2_009_25,11,3,13,5,);
B(B_FB,AdressOfBool,Adress9_25,13,5,24,9,);
L(24,5,24,7);
L(13,4,13,8);
L(13,4,24,4);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_VARIN,,%QX2.9.26,22,2,24,4,);
B(B_VAROUT,,LXoutpOk_9_26,40,2,42,4,);
B(B_VAROUT,,LXoutpErr_9_26,40,3,42,5,);
B(B_FB,SPdigitalOutV010,SPdigOut9_26,24,1,40,6,);
B(B_VARIN,,QIX2_009_26,11,3,13,5,);
B(B_FB,AdressOfBool,Adress9_26,13,5,24,9,);
L(24,5,24,7);
L(13,4,13,8);
L(13,4,24,4);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_VAROUT,,LXoutpOk_9_27,40,2,42,4,);
B(B_VAROUT,,LXoutpErr_9_27,40,3,42,5,);
B(B_FB,SPdigitalOutV010,SPdigOut9_27,24,1,40,6,);
B(B_VARIN,,QIX2_009_27,11,3,13,5,);
B(B_FB,AdressOfBool,Adress9_27,13,5,24,9,);
B(B_VARIN,,%QX2.9.27,22,2,24,4,);
L(24,5,24,7);
L(13,4,13,8);
L(13,4,24,4);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_VARIN,,%QX2.9.28,22,2,24,4,);
B(B_VAROUT,,LXoutpOk_9_28,40,2,42,4,);
B(B_VAROUT,,LXoutpErr_9_28,40,3,42,5,);
B(B_FB,SPdigitalOutV010,SPdigOut9_28,24,1,40,6,);
B(B_VARIN,,QIX2_009_28,11,3,13,5,);
B(B_FB,AdressOfBool,Adress9_28,13,5,24,9,);
L(24,5,24,7);
L(13,4,13,8);
L(13,4,24,4);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_VARIN,,%QX2.9.29,22,2,24,4,);
B(B_VAROUT,,LXoutpOk_9_29,40,2,42,4,);
B(B_VAROUT,,LXoutpErr_9_29,40,3,42,5,);
B(B_FB,SPdigitalOutV010,SPdigOut9_29,24,1,40,6,);
B(B_VARIN,,QIX2_009_29,11,3,13,5,);
B(B_FB,AdressOfBool,Adress9_29,13,5,24,9,);
L(24,5,24,7);
L(13,4,13,8);
L(13,4,24,4);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_VARIN,,%QX2.9.30,22,2,24,4,);
B(B_VAROUT,,LXoutpOk_9_30,40,2,42,4,);
B(B_VAROUT,,LXoutpErr_9_30,40,3,42,5,);
B(B_FB,SPdigitalOutV010,SPdigOut9_30,24,1,40,6,);
B(B_VARIN,,QIX2_009_30,11,3,13,5,);
B(B_FB,AdressOfBool,Adress9_30,13,5,24,9,);
L(24,5,24,7);
L(13,4,13,8);
L(13,4,24,4);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_VARIN,,%QX2.9.31,22,2,24,4,);
B(B_VAROUT,,LXoutpOk_9_31,40,2,42,4,);
B(B_VAROUT,,LXoutpErr_9_31,40,3,42,5,);
B(B_FB,SPdigitalOutV010,SPdigOut9_31,24,1,40,6,);
B(B_VARIN,,QIX2_009_31,11,3,13,5,);
B(B_FB,AdressOfBool,Adress9_31,13,5,24,9,);
L(24,5,24,7);
L(13,4,13,8);
L(13,4,24,4);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_VARIN,,%QX2.9.32,22,2,24,4,);
B(B_VAROUT,,LXoutpOk_9_32,40,2,42,4,);
B(B_VAROUT,,LXoutpErr_9_32,40,3,42,5,);
B(B_FB,SPdigitalOutV010,SPdigOut9_32,24,1,40,6,);
B(B_VARIN,,QIX2_009_32,11,3,13,5,);
B(B_FB,AdressOfBool,Adress9_32,13,5,24,9,);
L(24,5,24,7);
L(13,4,13,8);
L(13,4,24,4);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 30 ;
        NETWORK_BODY
B(B_VARIN,,LXoutpErr_9_1,10,2,12,4,);
B(B_VARIN,,LXoutpErr_9_2,10,3,12,5,);
B(B_VARIN,,LXoutpErr_9_3,10,4,12,6,);
B(B_VARIN,,LXoutpErr_9_4,10,5,12,7,);
B(B_VARIN,,LXoutpErr_9_5,10,6,12,8,);
B(B_VARIN,,LXoutpErr_9_6,10,7,12,9,);
B(B_VARIN,,LXoutpErr_9_7,10,8,12,10,);
B(B_VARIN,,LXoutpErr_9_8,10,9,12,11,);
B(B_VARIN,,LXoutpErr_9_9,10,10,12,12,);
B(B_VARIN,,LXoutpErr_9_10,10,11,12,13,);
B(B_VARIN,,LXoutpErr_9_11,10,12,12,14,);
B(B_VARIN,,LXoutpErr_9_12,10,13,12,15,);
B(B_VARIN,,LXoutpErr_9_13,10,14,12,16,);
B(B_VARIN,,LXoutpErr_9_14,10,15,12,17,);
B(B_VARIN,,LXoutpErr_9_15,10,16,12,18,);
B(B_VARIN,,LXoutpErr_9_16,10,17,12,19,);
B(B_VARIN,,LXoutpErr_9_17,10,20,12,22,);
B(B_VARIN,,LXoutpErr_9_18,10,21,12,23,);
B(B_VARIN,,LXoutpErr_9_19,10,22,12,24,);
B(B_VARIN,,LXoutpErr_9_20,10,23,12,25,);
B(B_VARIN,,LXoutpErr_9_21,10,24,12,26,);
B(B_VARIN,,LXoutpErr_9_22,10,25,12,27,);
B(B_VARIN,,LXoutpErr_9_23,10,26,12,28,);
B(B_VARIN,,LXoutpErr_9_24,10,27,12,29,);
B(B_F,@OR-16,,12,1,17,19,);
B(B_F,@OR-2,,17,1,22,5,);
B(B_VAROUT,,LXpowerRed_9,22,2,24,4,);
B(B_F,@OR-8,,12,19,17,29,);
B(B_COMMENT,,Laut Sicherheitskonzept wird durch Ausgänge die von LI (Zündung-Ein)ø^versorgt werden im Fehlerfall nur eine Msg abgesetzt. es wird keineø^Reduktion gesetzt. (Diese Ausgänge steuern keine Bewegungen),19,26,45,29,);
L(17,4,17,21);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_VARIN,,%QX2.10.1,22,2,24,4,);
B(B_VAROUT,,LXoutpOk_10_1,40,2,42,4,);
B(B_VAROUT,,LXoutpErr_10_1,40,3,42,5,);
B(B_FB,SPdigitalOutV010,SPdigOut10_1,24,1,40,6,);
B(B_VARIN,,QIX2_010_1,11,3,13,5,);
B(B_FB,AdressOfBool,Adress10_1,13,5,24,9,);
L(24,5,24,7);
L(13,4,13,8);
L(13,4,24,4);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_VARIN,,%QX2.10.2,22,2,24,4,);
B(B_VAROUT,,LXoutpOk_10_2,40,2,42,4,);
B(B_VAROUT,,LXoutpErr_10_2,40,3,42,5,);
B(B_FB,SPdigitalOutV010,SPdigOut10_2,24,1,40,6,);
B(B_VARIN,,QIX2_010_2,11,3,13,5,);
B(B_FB,AdressOfBool,Adress10_2,13,5,24,9,);
L(24,5,24,7);
L(13,4,13,8);
L(13,4,24,4);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_VARIN,,%QX2.10.3,22,2,24,4,);
B(B_VAROUT,,LXoutpOk_10_3,40,2,42,4,);
B(B_VAROUT,,LXoutpErr_10_3,40,3,42,5,);
B(B_FB,SPdigitalOutV010,SPdigOut10_3,24,1,40,6,);
B(B_VARIN,,QIX2_010_3,11,3,13,5,);
B(B_FB,AdressOfBool,Adress10_3,13,5,24,9,);
L(24,5,24,7);
L(13,4,13,8);
L(13,4,24,4);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_VARIN,,%QX2.10.4,22,2,24,4,);
B(B_VAROUT,,LXoutpOk_10_4,40,2,42,4,);
B(B_VAROUT,,LXoutpErr_10_4,40,3,42,5,);
B(B_FB,SPdigitalOutV010,SPdigOut10_4,24,1,40,6,);
B(B_VARIN,,QIX2_010_4,11,3,13,5,);
B(B_FB,AdressOfBool,Adress10_4,13,5,24,9,);
L(24,5,24,7);
L(13,4,13,8);
L(13,4,24,4);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_VARIN,,%QX2.10.5,22,2,24,4,);
B(B_VAROUT,,LXoutpOk_10_5,40,2,42,4,);
B(B_VAROUT,,LXoutpErr_10_5,40,3,42,5,);
B(B_FB,SPdigitalOutV010,SPdigOut10_5,24,1,40,6,);
B(B_VARIN,,QIX2_010_5,11,3,13,5,);
B(B_FB,AdressOfBool,Adress10_5,13,5,24,9,);
L(24,5,24,7);
L(13,4,13,8);
L(13,4,24,4);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_VARIN,,%QX2.10.6,22,2,24,4,);
B(B_VAROUT,,LXoutpOk_10_6,40,2,42,4,);
B(B_VAROUT,,LXoutpErr_10_6,40,3,42,5,);
B(B_FB,SPdigitalOutV010,SPdigOut10_6,24,1,40,6,);
B(B_VARIN,,QIX2_010_6,11,3,13,5,);
B(B_FB,AdressOfBool,Adress10_6,13,5,24,9,);
L(24,5,24,7);
L(13,4,13,8);
L(13,4,24,4);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_VARIN,,%QX2.10.7,22,2,24,4,);
B(B_VAROUT,,LXoutpOk_10_7,40,2,42,4,);
B(B_VAROUT,,LXoutpErr_10_7,40,3,42,5,);
B(B_FB,SPdigitalOutV010,SPdigOut10_7,24,1,40,6,);
B(B_VARIN,,QIX2_010_7,11,3,13,5,);
B(B_FB,AdressOfBool,Adress10_7,13,5,24,9,);
L(24,5,24,7);
L(13,4,13,8);
L(13,4,24,4);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_VARIN,,%QX2.10.8,22,2,24,4,);
B(B_VAROUT,,LXoutpOk_10_8,40,2,42,4,);
B(B_VAROUT,,LXoutpErr_10_8,40,3,42,5,);
B(B_FB,SPdigitalOutV010,SPdigOut10_8,24,1,40,6,);
B(B_VARIN,,QIX2_010_8,11,3,13,5,);
B(B_FB,AdressOfBool,Adress10_8,13,5,24,9,);
L(24,5,24,7);
L(13,4,13,8);
L(13,4,24,4);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_VARIN,,%QX2.10.9,22,2,24,4,);
B(B_VAROUT,,LXoutpOk_10_9,40,2,42,4,);
B(B_VAROUT,,LXoutpErr_10_9,40,3,42,5,);
B(B_FB,SPdigitalOutV010,SPdigOut10_9,24,1,40,6,);
B(B_VARIN,,QIX2_010_9,11,3,13,5,);
B(B_FB,AdressOfBool,Adress10_9,13,5,24,9,);
L(24,5,24,7);
L(13,4,13,8);
L(13,4,24,4);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_VARIN,,%QX2.10.10,22,2,24,4,);
B(B_VAROUT,,LXoutpOk_10_10,40,2,42,4,);
B(B_VAROUT,,LXoutpErr_10_10,40,3,42,5,);
B(B_FB,SPdigitalOutV010,SPdigOut10_10,24,1,40,6,);
B(B_VARIN,,QIX2_010_10,11,3,13,5,);
B(B_FB,AdressOfBool,Adress10_10,13,5,24,9,);
L(24,5,24,7);
L(13,4,13,8);
L(13,4,24,4);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_VARIN,,%QX2.10.11,22,2,24,4,);
B(B_VAROUT,,LXoutpOk_10_11,40,2,42,4,);
B(B_VAROUT,,LXoutpErr_10_11,40,3,42,5,);
B(B_FB,SPdigitalOutV010,SPdigOut10_11,24,1,40,6,);
B(B_VARIN,,QIX2_010_11,11,3,13,5,);
B(B_FB,AdressOfBool,Adress10_11,13,5,24,9,);
L(24,5,24,7);
L(13,4,13,8);
L(13,4,24,4);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_VARIN,,%QX2.10.12,22,2,24,4,);
B(B_VAROUT,,LXoutpOk_10_12,40,2,42,4,);
B(B_VAROUT,,LXoutpErr_10_12,40,3,42,5,);
B(B_FB,SPdigitalOutV010,SPdigOut10_12,24,1,40,6,);
B(B_VARIN,,QIX2_010_12,11,3,13,5,);
B(B_FB,AdressOfBool,Adress10_12,13,5,24,9,);
L(24,5,24,7);
L(13,4,13,8);
L(13,4,24,4);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_VARIN,,%QX2.10.13,22,2,24,4,);
B(B_VAROUT,,LXoutpOk_10_13,40,2,42,4,);
B(B_VAROUT,,LXoutpErr_10_13,40,3,42,5,);
B(B_FB,SPdigitalOutV010,SPdigOut10_13,24,1,40,6,);
B(B_VARIN,,QIX2_010_13,11,3,13,5,);
B(B_FB,AdressOfBool,Adress10_13,13,5,24,9,);
L(24,5,24,7);
L(13,4,13,8);
L(13,4,24,4);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_VARIN,,%QX2.10.14,22,2,24,4,);
B(B_VAROUT,,LXoutpOk_10_14,40,2,42,4,);
B(B_VAROUT,,LXoutpErr_10_14,40,3,42,5,);
B(B_FB,SPdigitalOutV010,SPdigOut10_14,24,1,40,6,);
B(B_VARIN,,QIX2_010_14,11,3,13,5,);
B(B_FB,AdressOfBool,Adress10_14,13,5,24,9,);
L(24,5,24,7);
L(13,4,13,8);
L(13,4,24,4);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_VARIN,,%QX2.10.15,22,2,24,4,);
B(B_VAROUT,,LXoutpOk_10_15,40,2,42,4,);
B(B_VAROUT,,LXoutpErr_10_15,40,3,42,5,);
B(B_FB,SPdigitalOutV010,SPdigOut10_15,24,1,40,6,);
B(B_VARIN,,QIX2_010_15,11,3,13,5,);
B(B_FB,AdressOfBool,Adress10_15,13,5,24,9,);
L(24,5,24,7);
L(13,4,13,8);
L(13,4,24,4);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_VARIN,,%QX2.10.16,22,2,24,4,);
B(B_VAROUT,,LXoutpOk_10_16,40,2,42,4,);
B(B_VAROUT,,LXoutpErr_10_16,40,3,42,5,);
B(B_FB,SPdigitalOutV010,SPdigOut10_16,24,1,40,6,);
B(B_VARIN,,QIX2_010_16,11,3,13,5,);
B(B_FB,AdressOfBool,Adress10_16,13,5,24,9,);
L(24,5,24,7);
L(13,4,13,8);
L(13,4,24,4);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_VARIN,,%QX2.10.17,22,2,24,4,);
B(B_VAROUT,,LXoutpOk_10_17,40,2,42,4,);
B(B_VAROUT,,LXoutpErr_10_17,40,3,42,5,);
B(B_FB,SPdigitalOutV010,SPdigOut10_17,24,1,40,6,);
B(B_VARIN,,QIX2_010_17,11,3,13,5,);
B(B_FB,AdressOfBool,Adress10_17,13,5,24,9,);
L(24,5,24,7);
L(13,4,13,8);
L(13,4,24,4);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_VARIN,,%QX2.10.18,22,2,24,4,);
B(B_VAROUT,,LXoutpOk_10_18,40,2,42,4,);
B(B_VAROUT,,LXoutpErr_10_18,40,3,42,5,);
B(B_FB,SPdigitalOutV010,SPdigOut10_18,24,1,40,6,);
B(B_VARIN,,QIX2_010_18,11,3,13,5,);
B(B_FB,AdressOfBool,Adress10_18,13,5,24,9,);
L(24,5,24,7);
L(13,4,13,8);
L(13,4,24,4);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_VARIN,,%QX2.10.19,22,2,24,4,);
B(B_VAROUT,,LXoutpOk_10_19,40,2,42,4,);
B(B_VAROUT,,LXoutpErr_10_19,40,3,42,5,);
B(B_FB,SPdigitalOutV010,SPdigOut10_19,24,1,40,6,);
B(B_VARIN,,QIX2_010_19,11,3,13,5,);
B(B_FB,AdressOfBool,Adress10_19,13,5,24,9,);
L(24,5,24,7);
L(13,4,13,8);
L(13,4,24,4);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_VARIN,,%QX2.10.20,22,2,24,4,);
B(B_VAROUT,,LXoutpOk_10_20,40,2,42,4,);
B(B_VAROUT,,LXoutpErr_10_20,40,3,42,5,);
B(B_FB,SPdigitalOutV010,SPdigOut10_20,24,1,40,6,);
B(B_VARIN,,QIX2_010_20,11,3,13,5,);
B(B_FB,AdressOfBool,Adress10_20,13,5,24,9,);
L(24,5,24,7);
L(13,4,13,8);
L(13,4,24,4);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_VARIN,,%QX2.10.21,22,2,24,4,);
B(B_VAROUT,,LXoutpOk_10_21,40,2,42,4,);
B(B_VAROUT,,LXoutpErr_10_21,40,3,42,5,);
B(B_FB,SPdigitalOutV010,SPdigOut10_21,24,1,40,6,);
B(B_VARIN,,QIX2_010_21,11,3,13,5,);
B(B_FB,AdressOfBool,Adress10_21,13,5,24,9,);
L(24,5,24,7);
L(13,4,13,8);
L(13,4,24,4);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_VARIN,,%QX2.10.22,22,2,24,4,);
B(B_VAROUT,,LXoutpOk_10_22,40,2,42,4,);
B(B_VAROUT,,LXoutpErr_10_22,40,3,42,5,);
B(B_FB,SPdigitalOutV010,SPdigOut10_22,24,1,40,6,);
B(B_VARIN,,QIX2_010_22,11,3,13,5,);
B(B_FB,AdressOfBool,Adress10_22,13,5,24,9,);
L(24,5,24,7);
L(13,4,13,8);
L(13,4,24,4);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_VARIN,,%QX2.10.23,22,2,24,4,);
B(B_VAROUT,,LXoutpOk_10_23,40,2,42,4,);
B(B_VAROUT,,LXoutpErr_10_23,40,3,42,5,);
B(B_FB,SPdigitalOutV010,SPdigOut10_23,24,1,40,6,);
B(B_VARIN,,QIX2_010_23,11,3,13,5,);
B(B_FB,AdressOfBool,Adress10_23,13,5,24,9,);
L(24,5,24,7);
L(13,4,13,8);
L(13,4,24,4);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_VARIN,,%QX2.10.24,22,2,24,4,);
B(B_VAROUT,,LXoutpOk_10_24,40,2,42,4,);
B(B_VAROUT,,LXoutpErr_10_24,40,3,42,5,);
B(B_FB,SPdigitalOutV010,SPdigOut10_24,24,1,40,6,);
B(B_VARIN,,QIX2_010_24,11,3,13,5,);
B(B_FB,AdressOfBool,Adress10_24,13,5,24,9,);
L(24,5,24,7);
L(13,4,13,8);
L(13,4,24,4);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_VARIN,,%QX2.10.25,22,2,24,4,);
B(B_VAROUT,,LXoutpOk_10_25,40,2,42,4,);
B(B_VAROUT,,LXoutpErr_10_25,40,3,42,5,);
B(B_FB,SPdigitalOutV010,SPdigOut10_25,24,1,40,6,);
B(B_VARIN,,QIX2_010_25,11,3,13,5,);
B(B_FB,AdressOfBool,Adress10_25,13,5,24,9,);
L(24,5,24,7);
L(13,4,13,8);
L(13,4,24,4);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_VARIN,,%QX2.10.26,22,2,24,4,);
B(B_VAROUT,,LXoutpOk_10_26,40,2,42,4,);
B(B_VAROUT,,LXoutpErr_10_26,40,3,42,5,);
B(B_FB,SPdigitalOutV010,SPdigOut10_26,24,1,40,6,);
B(B_VARIN,,QIX2_010_26,11,3,13,5,);
B(B_FB,AdressOfBool,Adress10_26,13,5,24,9,);
L(24,5,24,7);
L(13,4,13,8);
L(13,4,24,4);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_VARIN,,%QX2.10.27,22,2,24,4,);
B(B_VAROUT,,LXoutpOk_10_27,40,2,42,4,);
B(B_VAROUT,,LXoutpErr_10_27,40,3,42,5,);
B(B_FB,SPdigitalOutV010,SPdigOut10_27,24,1,40,6,);
B(B_VARIN,,QIX2_010_27,11,3,13,5,);
B(B_FB,AdressOfBool,Adress10_27,13,5,24,9,);
L(24,5,24,7);
L(13,4,13,8);
L(13,4,24,4);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_VARIN,,%QX2.10.28,22,2,24,4,);
B(B_VAROUT,,LXoutpOk_10_28,40,2,42,4,);
B(B_VAROUT,,LXoutpErr_10_28,40,3,42,5,);
B(B_FB,SPdigitalOutV010,SPdigOut10_28,24,1,40,6,);
B(B_VARIN,,QIX2_010_28,11,3,13,5,);
B(B_FB,AdressOfBool,Adress10_28,13,5,24,9,);
L(24,5,24,7);
L(13,4,13,8);
L(13,4,24,4);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_VARIN,,%QX2.10.29,22,2,24,4,);
B(B_VAROUT,,LXoutpOk_10_29,40,2,42,4,);
B(B_VAROUT,,LXoutpErr_10_29,40,3,42,5,);
B(B_FB,SPdigitalOutV010,SPdigOut10_29,24,1,40,6,);
B(B_VARIN,,QIX2_010_29,11,3,13,5,);
B(B_FB,AdressOfBool,Adress10_29,13,5,24,9,);
L(24,5,24,7);
L(13,4,13,8);
L(13,4,24,4);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_VARIN,,%QX2.10.30,22,2,24,4,);
B(B_VAROUT,,LXoutpOk_10_30,40,2,42,4,);
B(B_VAROUT,,LXoutpErr_10_30,40,3,42,5,);
B(B_FB,SPdigitalOutV010,SPdigOut10_30,24,1,40,6,);
B(B_VARIN,,QIX2_010_30,11,3,13,5,);
B(B_FB,AdressOfBool,Adress10_30,13,5,24,9,);
L(24,5,24,7);
L(13,4,13,8);
L(13,4,24,4);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_VARIN,,%QX2.10.31,22,2,24,4,);
B(B_VAROUT,,LXoutpOk_10_31,40,2,42,4,);
B(B_VAROUT,,LXoutpErr_10_31,40,3,42,5,);
B(B_FB,SPdigitalOutV010,SPdigOut10_31,24,1,40,6,);
B(B_VARIN,,QIX2_010_31,11,3,13,5,);
B(B_FB,AdressOfBool,Adress10_31,13,5,24,9,);
L(24,5,24,7);
L(13,4,13,8);
L(13,4,24,4);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_VARIN,,%QX2.10.32,22,3,24,5,);
B(B_VAROUT,,LXoutpOk_10_32,40,3,42,5,);
B(B_VAROUT,,LXoutpErr_10_32,40,4,42,6,);
B(B_FB,SPdigitalOutV010,SPdigOut10_32,24,2,40,7,);
B(B_FB,AdressOfBool,Adress10_32,13,6,24,10,);
B(B_VARIN,,QIX2_010_32,11,4,13,6,);
L(24,6,24,8);
L(13,5,24,5);
L(13,5,13,9);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 38 ;
        NETWORK_BODY
B(B_VARIN,,LXoutpErr_10_1,10,2,12,4,);
B(B_VARIN,,LXoutpErr_10_2,10,3,12,5,);
B(B_VARIN,,LXoutpErr_10_3,10,4,12,6,);
B(B_VARIN,,LXoutpErr_10_4,10,5,12,7,);
B(B_VARIN,,LXoutpErr_10_5,10,6,12,8,);
B(B_VARIN,,LXoutpErr_10_6,10,7,12,9,);
B(B_VARIN,,LXoutpErr_10_7,10,8,12,10,);
B(B_VARIN,,LXoutpErr_10_8,10,9,12,11,);
B(B_VARIN,,LXoutpErr_10_9,10,10,12,12,);
B(B_VARIN,,LXoutpErr_10_10,10,11,12,13,);
B(B_VARIN,,LXoutpErr_10_11,10,12,12,14,);
B(B_VARIN,,LXoutpErr_10_12,10,13,12,15,);
B(B_VARIN,,LXoutpErr_10_13,10,14,12,16,);
B(B_VARIN,,LXoutpErr_10_14,10,15,12,17,);
B(B_VARIN,,LXoutpErr_10_15,10,16,12,18,);
B(B_VARIN,,LXoutpErr_10_16,10,17,12,19,);
B(B_F,@OR-16,,12,1,17,19,);
B(B_F,@OR-2,,17,1,22,5,);
B(B_VAROUT,,LXpowerRed_10,22,2,24,4,);
B(B_VARIN,,LXoutpErr_10_17,10,20,12,22,);
B(B_VARIN,,LXoutpErr_10_18,10,21,12,23,);
B(B_VARIN,,LXoutpErr_10_19,10,22,12,24,);
B(B_VARIN,,LXoutpErr_10_20,10,23,12,25,);
B(B_VARIN,,LXoutpErr_10_21,10,24,12,26,);
B(B_VARIN,,LXoutpErr_10_22,10,25,12,27,);
B(B_VARIN,,LXoutpErr_10_23,10,26,12,28,);
B(B_VARIN,,LXoutpErr_10_24,10,27,12,29,);
B(B_F,@OR-16,,12,19,17,37,);
B(B_VARIN,,LXoutpErr_10_25,10,28,12,30,);
B(B_VARIN,,LXoutpErr_10_26,10,29,12,31,);
B(B_VARIN,,LXoutpErr_10_27,10,30,12,32,);
B(B_VARIN,,LXoutpErr_10_28,10,31,12,33,);
B(B_VARIN,,LXoutpErr_10_29,10,32,12,34,);
B(B_VARIN,,LXoutpErr_10_30,10,33,12,35,);
B(B_VARIN,,LXoutpErr_10_31,10,34,12,36,);
B(B_VARIN,,LXoutpErr_10_32,10,35,12,37,);
L(17,4,17,21);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_VARIN,,%QB2.14.1,21,3,23,5,);
B(B_VARIN,,QIB2_014_1,10,4,12,6,);
B(B_FB,AdressOfByte,Adress14_1,12,6,23,10,);
B(B_VAROUT,,LXoutpError_14_1,40,4,42,6,);
B(B_FB,SPdigPowOutV010,SPdigPowOut14_1,23,2,40,7,);
B(B_VAROUT,,LXoutpOk_14_1,40,3,42,5,);
L(12,5,12,9);
L(23,6,23,8);
L(12,5,23,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_VARIN,,%QB2.14.2,21,3,23,5,);
B(B_VARIN,,QIB2_014_2,10,4,12,6,);
B(B_FB,AdressOfByte,Adress14_2,12,6,23,10,);
B(B_VAROUT,,LXoutpError_14_2,40,4,42,6,);
B(B_VAROUT,,LXoutpOk_14_2,40,3,42,5,);
B(B_FB,SPdigPowOutV010,SPdigPowOut14_2,23,2,40,7,);
L(12,5,12,9);
L(23,6,23,8);
L(12,5,23,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_VARIN,,%QB2.14.3,21,3,23,5,);
B(B_VARIN,,QIB2_014_3,10,4,12,6,);
B(B_FB,AdressOfByte,Adress14_3,12,6,23,10,);
B(B_VAROUT,,LXoutpError_14_3,40,4,42,6,);
B(B_VAROUT,,LXoutpOk_14_3,40,3,42,5,);
B(B_FB,SPdigPowOutV010,SPdigPowOut14_3,23,2,40,7,);
L(12,5,12,9);
L(23,6,23,8);
L(12,5,23,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_VARIN,,%QB2.14.4,21,3,23,5,);
B(B_VARIN,,QIB2_014_4,10,4,12,6,);
B(B_FB,AdressOfByte,Adress14_4,12,6,23,10,);
B(B_VAROUT,,LXoutpError_14_4,40,4,42,6,);
B(B_VAROUT,,LXoutpOk_14_4,40,3,42,5,);
B(B_FB,SPdigPowOutV010,SPdigPowOut14_4,23,2,40,7,);
L(12,5,12,9);
L(23,6,23,8);
L(12,5,23,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_VARIN,,LXoutpError_14_2,9,3,11,5,);
B(B_VARIN,,LXoutpError_14_4,9,5,11,7,);
B(B_VARIN,,LXoutpError_14_3,9,4,11,6,);
B(B_VARIN,,LXoutpError_14_1,9,2,11,4,);
B(B_F,@OR-4,,11,1,16,7,);
B(B_VAROUT,,LXpowerRed_14,16,2,18,4,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_VARIN,,%QB2.15.1,21,3,23,5,);
B(B_VARIN,,QIB2_015_1,10,4,12,6,);
B(B_FB,AdressOfByte,Adress15_1,12,6,23,10,);
B(B_VAROUT,,LXoutpError_15_1,40,4,42,6,);
B(B_FB,SPdigPowOutV010,SPdigPowOut15_1,23,2,40,7,);
B(B_VAROUT,,LXoutpOk_15_1,40,3,42,5,);
L(12,5,12,9);
L(23,6,23,8);
L(12,5,23,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_VARIN,,%QB2.15.2,21,3,23,5,);
B(B_VARIN,,QIB2_015_2,10,4,12,6,);
B(B_FB,AdressOfByte,Adress15_2,12,6,23,10,);
B(B_VAROUT,,LXoutpError_15_2,40,4,42,6,);
B(B_VAROUT,,LXoutpOk_15_2,40,3,42,5,);
B(B_FB,SPdigPowOutV010,SPdigPowOut15_2,23,2,40,7,);
L(12,5,12,9);
L(23,6,23,8);
L(12,5,23,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_VARIN,,%QB2.15.3,21,3,23,5,);
B(B_VARIN,,QIB2_015_3,10,4,12,6,);
B(B_FB,AdressOfByte,Adress15_3,12,6,23,10,);
B(B_VAROUT,,LXoutpError_15_3,40,4,42,6,);
B(B_VAROUT,,LXoutpOk_15_3,40,3,42,5,);
B(B_FB,SPdigPowOutV010,SPdigPowOut15_3,23,2,40,7,);
L(12,5,12,9);
L(23,6,23,8);
L(12,5,23,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 10 ;
        NETWORK_BODY
B(B_VARIN,,%QB2.15.4,21,3,23,5,);
B(B_VARIN,,QIB2_015_4,10,4,12,6,);
B(B_FB,AdressOfByte,Adress15_4,12,6,23,10,);
B(B_VAROUT,,LXoutpError_15_4,40,4,42,6,);
B(B_VAROUT,,LXoutpOk_15_4,40,3,42,5,);
B(B_FB,SPdigPowOutV010,SPdigPowOut15_4,23,2,40,7,);
L(12,5,12,9);
L(23,6,23,8);
L(12,5,23,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 8 ;
        NETWORK_BODY
B(B_VARIN,,LXoutpError_15_2,9,3,11,5,);
B(B_VARIN,,LXoutpError_15_4,9,5,11,7,);
B(B_VARIN,,LXoutpError_15_3,9,4,11,6,);
B(B_VARIN,,LXoutpError_15_1,9,2,11,4,);
B(B_F,@OR-4,,11,1,16,7,);
B(B_VAROUT,,LXpowerRed_15,16,2,18,4,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_FB,AdressOfUInt,Adress17_1,12,5,23,9,);
B(B_VARIN,,QIW2_017_1,10,3,12,5,);
B(B_FB,SPanalogOutV010,SPanaOut17_1,23,1,39,6,);
B(B_VAROUT,,LXoutpOk_17_1,39,2,41,4,);
B(B_VAROUT,,LXoutpErr_17_1,39,3,41,5,);
B(B_VARIN,,%QW2.17.1,21,2,23,4,);
L(12,4,12,8);
L(23,5,23,7);
L(12,4,23,4);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_VARIN,,QIW2_017_2,10,3,12,5,);
B(B_FB,AdressOfUInt,Adress17_2,12,5,23,9,);
B(B_VAROUT,,LXoutpOk_17_2,39,2,41,4,);
B(B_VAROUT,,LXoutpErr_17_2,39,3,41,5,);
B(B_FB,SPanalogOutV010,SPanaOut17_2,23,1,39,6,);
B(B_VARIN,,%QW2.17.2,21,2,23,4,);
L(23,5,23,7);
L(12,4,23,4);
L(12,4,12,8);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_VARIN,,QIW2_017_3,10,4,12,6,);
B(B_FB,AdressOfUInt,Adress17_3,12,6,23,10,);
B(B_VAROUT,,LXoutpOk_17_3,39,3,41,5,);
B(B_VAROUT,,LXoutpErr_17_3,39,4,41,6,);
B(B_FB,SPanalogOutV010,SPanaOut17_3,23,2,39,7,);
B(B_VARIN,,%QW2.17.3,21,3,23,5,);
L(12,5,12,9);
L(23,6,23,8);
L(12,5,23,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_VARIN,,QIW2_017_4,10,4,12,6,);
B(B_FB,AdressOfUInt,Adress17_4,12,6,23,10,);
B(B_VAROUT,,LXoutpOk_17_4,39,3,41,5,);
B(B_VAROUT,,LXoutpErr_17_4,39,4,41,6,);
B(B_FB,SPanalogOutV010,SPanaOut17_4,23,2,39,7,);
B(B_VARIN,,%QW2.17.4,21,3,23,5,);
L(12,5,12,9);
L(23,6,23,8);
L(12,5,23,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_VARIN,,QIW2_017_5,10,4,12,6,);
B(B_FB,AdressOfUInt,Adress17_5,12,6,23,10,);
B(B_VAROUT,,LXoutpOk_17_5,39,3,41,5,);
B(B_VAROUT,,LXoutpErr_17_5,39,4,41,6,);
B(B_FB,SPanalogOutV010,SPanaOut17_5,23,2,39,7,);
B(B_VARIN,,%QW2.17.5,21,3,23,5,);
L(12,5,12,9);
L(23,6,23,8);
L(12,5,23,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_VARIN,,QIW2_017_6,10,4,12,6,);
B(B_FB,AdressOfUInt,Adress17_6,12,6,23,10,);
B(B_VAROUT,,LXoutpOk_17_6,39,3,41,5,);
B(B_VAROUT,,LXoutpErr_17_6,39,4,41,6,);
B(B_FB,SPanalogOutV010,SPanaOut17_6,23,2,39,7,);
B(B_VARIN,,%QW2.17.6,21,3,23,5,);
L(12,5,12,9);
L(23,6,23,8);
L(12,5,23,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_VARIN,,QIW2_017_7,10,4,12,6,);
B(B_FB,AdressOfUInt,Adress17_7,12,6,23,10,);
B(B_VAROUT,,LXoutpOk_17_7,39,3,41,5,);
B(B_VAROUT,,LXoutpErr_17_7,39,4,41,6,);
B(B_FB,SPanalogOutV010,SPanaOut17_7,23,2,39,7,);
B(B_VARIN,,%QW2.17.7,21,3,23,5,);
L(12,5,12,9);
L(23,6,23,8);
L(12,5,23,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_VARIN,,QIW2_017_8,10,4,12,6,);
B(B_FB,AdressOfUInt,Adress17_8,12,6,23,10,);
B(B_VAROUT,,LXoutpOk_17_8,39,3,41,5,);
B(B_VAROUT,,LXoutpErr_17_8,39,4,41,6,);
B(B_FB,SPanalogOutV010,SPanaOut17_8,23,2,39,7,);
B(B_VARIN,,%QW2.17.8,21,3,23,5,);
L(12,5,12,9);
L(23,6,23,8);
L(12,5,23,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_VARIN,,QIW2_017_9,10,4,12,6,);
B(B_FB,AdressOfUInt,Adress17_9,12,6,23,10,);
B(B_VAROUT,,LXoutpOk_17_9,39,3,41,5,);
B(B_VAROUT,,LXoutpErr_17_9,39,4,41,6,);
B(B_FB,SPanalogOutV010,SPanaOut17_9,23,2,39,7,);
B(B_VARIN,,%QW2.17.9,21,3,23,5,);
L(12,5,12,9);
L(23,6,23,8);
L(12,5,23,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_VARIN,,QIW2_017_10,10,4,12,6,);
B(B_FB,AdressOfUInt,Adress17_10,12,6,23,10,);
B(B_VAROUT,,LXoutpOk_17_10,39,3,41,5,);
B(B_VAROUT,,LXoutpErr_17_10,39,4,41,6,);
B(B_FB,SPanalogOutV010,SPanaOut17_10,23,2,39,7,);
B(B_VARIN,,%QW2.17.10,21,3,23,5,);
L(12,5,12,9);
L(23,6,23,8);
L(12,5,23,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_VARIN,,QIW2_017_11,10,4,12,6,);
B(B_FB,AdressOfUInt,Adress17_11,12,6,23,10,);
B(B_VAROUT,,LXoutpOk_17_11,39,3,41,5,);
B(B_VAROUT,,LXoutpErr_17_11,39,4,41,6,);
B(B_FB,SPanalogOutV010,SPanaOut17_11,23,2,39,7,);
B(B_VARIN,,%QW2.17.11,21,3,23,5,);
L(12,5,12,9);
L(23,6,23,8);
L(12,5,23,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_VARIN,,QIW2_017_12,10,4,12,6,);
B(B_FB,AdressOfUInt,Adress17_12,12,6,23,10,);
B(B_VAROUT,,LXoutpOk_17_12,39,3,41,5,);
B(B_VAROUT,,LXoutpErr_17_12,39,4,41,6,);
B(B_FB,SPanalogOutV010,SPanaOut17_12,23,2,39,7,);
B(B_VARIN,,%QW2.17.12,21,3,23,5,);
L(12,5,12,9);
L(23,6,23,8);
L(12,5,23,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_VARIN,,QIW2_017_13,10,4,12,6,);
B(B_FB,AdressOfUInt,Adress17_13,12,6,23,10,);
B(B_VAROUT,,LXoutpOk_17_13,39,3,41,5,);
B(B_VAROUT,,LXoutpErr_17_13,39,4,41,6,);
B(B_FB,SPanalogOutV010,SPanaOut17_13,23,2,39,7,);
B(B_VARIN,,%QW2.17.13,21,3,23,5,);
L(12,5,12,9);
L(23,6,23,8);
L(12,5,23,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_VARIN,,QIW2_017_14,10,4,12,6,);
B(B_FB,AdressOfUInt,Adress17_14,12,6,23,10,);
B(B_VAROUT,,LXoutpOk_17_14,39,3,41,5,);
B(B_VAROUT,,LXoutpErr_17_14,39,4,41,6,);
B(B_FB,SPanalogOutV010,SPanaOut17_14,23,2,39,7,);
B(B_VARIN,,%QW2.17.14,21,3,23,5,);
L(12,5,12,9);
L(23,6,23,8);
L(12,5,23,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_VARIN,,QIW2_017_15,10,4,12,6,);
B(B_FB,AdressOfUInt,Adress17_15,12,6,23,10,);
B(B_VAROUT,,LXoutpOk_17_15,39,3,41,5,);
B(B_VAROUT,,LXoutpErr_17_15,39,4,41,6,);
B(B_FB,SPanalogOutV010,SPanaOut17_15,23,2,39,7,);
B(B_VARIN,,%QW2.17.15,21,3,23,5,);
L(12,5,12,9);
L(23,6,23,8);
L(12,5,23,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_VARIN,,QIW2_017_16,10,4,12,6,);
B(B_FB,AdressOfUInt,Adress17_16,12,6,23,10,);
B(B_VAROUT,,LXoutpOk_17_16,39,3,41,5,);
B(B_VAROUT,,LXoutpErr_17_16,39,4,41,6,);
B(B_FB,SPanalogOutV010,SPanaOut17_16,23,2,39,7,);
B(B_VARIN,,%QW2.17.16,21,3,23,5,);
L(12,5,12,9);
L(23,6,23,8);
L(12,5,23,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 20 ;
        NETWORK_BODY
B(B_VARIN,,LXoutpErr_17_1,10,2,12,4,);
B(B_VARIN,,LXoutpErr_17_2,10,3,12,5,);
B(B_VARIN,,LXoutpErr_17_3,10,4,12,6,);
B(B_VARIN,,LXoutpErr_17_4,10,5,12,7,);
B(B_VARIN,,LXoutpErr_17_5,10,6,12,8,);
B(B_VARIN,,LXoutpErr_17_6,10,7,12,9,);
B(B_VARIN,,LXoutpErr_17_7,10,8,12,10,);
B(B_VARIN,,LXoutpErr_17_8,10,9,12,11,);
B(B_VARIN,,LXoutpErr_17_9,10,10,12,12,);
B(B_VARIN,,LXoutpErr_17_10,10,11,12,13,);
B(B_VARIN,,LXoutpErr_17_11,10,12,12,14,);
B(B_VARIN,,LXoutpErr_17_12,10,13,12,15,);
B(B_VARIN,,LXoutpErr_17_13,10,14,12,16,);
B(B_VARIN,,LXoutpErr_17_14,10,15,12,17,);
B(B_VARIN,,LXoutpErr_17_15,10,16,12,18,);
B(B_VARIN,,LXoutpErr_17_16,10,17,12,19,);
B(B_F,@OR-16,,12,1,17,19,);
B(B_VAROUT,,LXpowerRed_17,17,2,19,4,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_VARIN,,QIW2_018_1,10,4,12,6,);
B(B_FB,AdressOfUInt,Adress18_1,12,6,23,10,);
B(B_VAROUT,,LXoutpOk_18_1,39,3,41,5,);
B(B_VAROUT,,LXoutpErr_18_1,39,4,41,6,);
B(B_FB,SPanalogOutV010,SPanaOut18_1,23,2,39,7,);
B(B_VARIN,,%QW2.18.1,21,3,23,5,);
L(12,5,12,9);
L(23,6,23,8);
L(12,5,23,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_VARIN,,QIW2_018_2,10,4,12,6,);
B(B_FB,AdressOfUInt,Adress18_2,12,6,23,10,);
B(B_VAROUT,,LXoutpOk_18_2,39,3,41,5,);
B(B_VAROUT,,LXoutpErr_18_2,39,4,41,6,);
B(B_FB,SPanalogOutV010,SPanaOut18_2,23,2,39,7,);
B(B_VARIN,,%QW2.18.2,21,3,23,5,);
L(12,5,12,9);
L(23,6,23,8);
L(12,5,23,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_VARIN,,QIW2_018_3,10,4,12,6,);
B(B_FB,AdressOfUInt,Adress18_3,12,6,23,10,);
B(B_VAROUT,,LXoutpOk_18_3,39,3,41,5,);
B(B_VAROUT,,LXoutpErr_18_3,39,4,41,6,);
B(B_FB,SPanalogOutV010,SPanaOut18_3,23,2,39,7,);
B(B_VARIN,,%QW2.18.3,21,3,23,5,);
L(12,5,12,9);
L(23,6,23,8);
L(12,5,23,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_VARIN,,QIW2_018_4,10,4,12,6,);
B(B_FB,AdressOfUInt,Adress18_4,12,6,23,10,);
B(B_FB,SPanalogOutV010,SPanaOut18_4,23,2,39,7,);
B(B_VAROUT,,LXoutpOk_18_4,39,3,41,5,);
B(B_VAROUT,,LXoutpErr_18_4,39,4,41,6,);
B(B_VARIN,,%QW2.18.4,21,3,23,5,);
L(12,5,12,9);
L(23,6,23,8);
L(12,5,23,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_VARIN,,QIW2_018_5,10,4,12,6,);
B(B_FB,AdressOfUInt,Adress18_5,12,6,23,10,);
B(B_VAROUT,,LXoutpOk_18_5,39,3,41,5,);
B(B_VAROUT,,LXoutpErr_18_5,39,4,41,6,);
B(B_FB,SPanalogOutV010,SPanaOut18_5,23,2,39,7,);
B(B_VARIN,,%QW2.18.5,21,3,23,5,);
L(12,5,12,9);
L(23,6,23,8);
L(12,5,23,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_VARIN,,QIW2_018_6,10,4,12,6,);
B(B_FB,AdressOfUInt,Adress18_6,12,6,23,10,);
B(B_VAROUT,,LXoutpOk_18_6,39,3,41,5,);
B(B_VAROUT,,LXoutpErr_18_6,39,4,41,6,);
B(B_FB,SPanalogOutV010,SPanaOut18_6,23,2,39,7,);
B(B_VARIN,,%QW2.18.6,21,3,23,5,);
L(12,5,12,9);
L(23,6,23,8);
L(12,5,23,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_VARIN,,QIW2_018_7,10,4,12,6,);
B(B_FB,AdressOfUInt,Adress18_7,12,6,23,10,);
B(B_VAROUT,,LXoutpOk_18_7,39,3,41,5,);
B(B_VAROUT,,LXoutpErr_18_7,39,4,41,6,);
B(B_FB,SPanalogOutV010,SPanaOut18_7,23,2,39,7,);
B(B_VARIN,,%QW2.18.7,21,3,23,5,);
L(12,5,12,9);
L(23,6,23,8);
L(12,5,23,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_VARIN,,QIW2_018_8,10,4,12,6,);
B(B_FB,AdressOfUInt,Adress18_8,12,6,23,10,);
B(B_VAROUT,,LXoutpOk_18_8,39,3,41,5,);
B(B_VAROUT,,LXoutpErr_18_8,39,4,41,6,);
B(B_FB,SPanalogOutV010,SPanaOut18_8,23,2,39,7,);
B(B_VARIN,,%QW2.18.8,21,3,23,5,);
L(12,5,12,9);
L(23,6,23,8);
L(12,5,23,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_VARIN,,QIW2_018_9,10,4,12,6,);
B(B_FB,AdressOfUInt,Adress18_9,12,6,23,10,);
B(B_VAROUT,,LXoutpOk_18_9,39,3,41,5,);
B(B_VAROUT,,LXoutpErr_18_9,39,4,41,6,);
B(B_FB,SPanalogOutV010,SPanaOut18_9,23,2,39,7,);
B(B_VARIN,,%QW2.18.9,21,3,23,5,);
L(12,5,12,9);
L(23,6,23,8);
L(12,5,23,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_VARIN,,QIW2_018_10,10,4,12,6,);
B(B_FB,AdressOfUInt,Adress18_10,12,6,23,10,);
B(B_VAROUT,,LXoutpOk_18_10,39,3,41,5,);
B(B_VAROUT,,LXoutpErr_18_10,39,4,41,6,);
B(B_FB,SPanalogOutV010,SPanaOut18_10,23,2,39,7,);
B(B_VARIN,,%QW2.18.10,21,3,23,5,);
L(12,5,12,9);
L(23,6,23,8);
L(12,5,23,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_VARIN,,QIW2_018_11,10,4,12,6,);
B(B_FB,AdressOfUInt,Adress18_11,12,6,23,10,);
B(B_VAROUT,,LXoutpOk_18_11,39,3,41,5,);
B(B_VAROUT,,LXoutpErr_18_11,39,4,41,6,);
B(B_FB,SPanalogOutV010,SPanaOut18_11,23,2,39,7,);
B(B_VARIN,,%QW2.18.11,21,3,23,5,);
L(12,5,12,9);
L(23,6,23,8);
L(12,5,23,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_VARIN,,QIW2_018_12,10,4,12,6,);
B(B_FB,AdressOfUInt,Adress18_12,12,6,23,10,);
B(B_VAROUT,,LXoutpOk_18_12,39,3,41,5,);
B(B_VAROUT,,LXoutpErr_18_12,39,4,41,6,);
B(B_FB,SPanalogOutV010,SPanaOut18_12,23,2,39,7,);
B(B_VARIN,,%QW2.18.12,21,3,23,5,);
L(12,5,12,9);
L(23,6,23,8);
L(12,5,23,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_VARIN,,QIW2_018_13,10,4,12,6,);
B(B_FB,AdressOfUInt,Adress18_13,12,6,23,10,);
B(B_VAROUT,,LXoutpOk_18_13,39,3,41,5,);
B(B_VAROUT,,LXoutpErr_18_13,39,4,41,6,);
B(B_FB,SPanalogOutV010,SPanaOut18_13,23,2,39,7,);
B(B_VARIN,,%QW2.18.13,21,3,23,5,);
L(12,5,12,9);
L(23,6,23,8);
L(12,5,23,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_VARIN,,QIW2_018_14,10,4,12,6,);
B(B_FB,AdressOfUInt,Adress18_14,12,6,23,10,);
B(B_FB,SPanalogOutV010,SPanaOut18_14,23,2,39,7,);
B(B_VAROUT,,LXoutpOk_18_14,39,3,41,5,);
B(B_VAROUT,,LXoutpErr_18_14,39,4,41,6,);
B(B_VARIN,,%QW2.18.14,21,3,23,5,);
L(12,5,12,9);
L(23,6,23,8);
L(12,5,23,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_VARIN,,QIW2_018_15,10,4,12,6,);
B(B_FB,AdressOfUInt,Adress18_15,12,6,23,10,);
B(B_VAROUT,,LXoutpOk_18_15,39,3,41,5,);
B(B_VAROUT,,LXoutpErr_18_15,39,4,41,6,);
B(B_FB,SPanalogOutV010,SPanaOut18_15,23,2,39,7,);
B(B_VARIN,,%QW2.18.15,21,3,23,5,);
L(12,5,12,9);
L(23,6,23,8);
L(12,5,23,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_VARIN,,QIW2_018_16,10,4,12,6,);
B(B_FB,AdressOfUInt,Adress18_16,12,6,23,10,);
B(B_VAROUT,,LXoutpOk_18_16,39,3,41,5,);
B(B_VAROUT,,LXoutpErr_18_16,39,4,41,6,);
B(B_FB,SPanalogOutV010,SPanaOut18_16,23,2,39,7,);
B(B_VARIN,,%QW2.18.16,21,3,23,5,);
L(12,5,12,9);
L(23,6,23,8);
L(12,5,23,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 20 ;
        NETWORK_BODY
B(B_F,@OR-16,,12,1,17,19,);
B(B_VARIN,,LXoutpErr_18_1,10,2,12,4,);
B(B_VARIN,,LXoutpErr_18_2,10,3,12,5,);
B(B_VARIN,,LXoutpErr_18_3,10,4,12,6,);
B(B_VARIN,,LXoutpErr_18_4,10,5,12,7,);
B(B_VARIN,,LXoutpErr_18_5,10,6,12,8,);
B(B_VARIN,,LXoutpErr_18_6,10,7,12,9,);
B(B_VARIN,,LXoutpErr_18_7,10,8,12,10,);
B(B_VARIN,,LXoutpErr_18_8,10,9,12,11,);
B(B_VARIN,,LXoutpErr_18_9,10,10,12,12,);
B(B_VARIN,,LXoutpErr_18_10,10,11,12,13,);
B(B_VARIN,,LXoutpErr_18_11,10,12,12,14,);
B(B_VARIN,,LXoutpErr_18_12,10,13,12,15,);
B(B_VARIN,,LXoutpErr_18_13,10,14,12,16,);
B(B_VARIN,,LXoutpErr_18_14,10,15,12,17,);
B(B_VARIN,,LXoutpErr_18_15,10,16,12,18,);
B(B_VARIN,,LXoutpErr_18_16,10,17,12,19,);
B(B_VAROUT,,LXpowerRed_18,17,2,19,4,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_VARIN,,QIW2_019_1,10,4,12,6,);
B(B_FB,AdressOfUInt,Adress19_1,12,6,23,10,);
B(B_VAROUT,,LXoutpOk_19_1,39,3,41,5,);
B(B_VAROUT,,LXoutpErr_19_1,39,4,41,6,);
B(B_FB,SPanalogOutV010,SPanaOut19_1,23,2,39,7,);
B(B_VARIN,,%QW2.19.1,21,3,23,5,);
L(12,5,12,9);
L(23,6,23,8);
L(12,5,23,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_VARIN,,QIW2_019_2,10,4,12,6,);
B(B_FB,AdressOfUInt,Adress19_2,12,6,23,10,);
B(B_VAROUT,,LXoutpOk_19_2,39,3,41,5,);
B(B_VAROUT,,LXoutpErr_19_2,39,4,41,6,);
B(B_FB,SPanalogOutV010,SPanaOut19_2,23,2,39,7,);
B(B_VARIN,,%QW2.19.2,21,3,23,5,);
L(12,5,12,9);
L(23,6,23,8);
L(12,5,23,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_VARIN,,QIW2_019_3,10,4,12,6,);
B(B_FB,AdressOfUInt,Adress19_3,12,6,23,10,);
B(B_VAROUT,,LXoutpOk_19_3,39,3,41,5,);
B(B_VAROUT,,LXoutpErr_19_3,39,4,41,6,);
B(B_FB,SPanalogOutV010,SPanaOut19_3,23,2,39,7,);
B(B_VARIN,,%QW2.19.3,21,3,23,5,);
L(12,5,12,9);
L(23,6,23,8);
L(12,5,23,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_VARIN,,QIW2_019_4,10,4,12,6,);
B(B_FB,AdressOfUInt,Adress19_4,12,6,23,10,);
B(B_FB,SPanalogOutV010,SPanaOut19_4,23,2,39,7,);
B(B_VAROUT,,LXoutpOk_19_4,39,3,41,5,);
B(B_VAROUT,,LXoutpErr_19_4,39,4,41,6,);
B(B_VARIN,,%QW2.19.4,21,3,23,5,);
L(12,5,12,9);
L(23,6,23,8);
L(12,5,23,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_VARIN,,QIW2_019_5,10,4,12,6,);
B(B_FB,AdressOfUInt,Adress19_5,12,6,23,10,);
B(B_VAROUT,,LXoutpOk_19_5,39,3,41,5,);
B(B_VAROUT,,LXoutpErr_19_5,39,4,41,6,);
B(B_FB,SPanalogOutV010,SPanaOut19_5,23,2,39,7,);
B(B_VARIN,,%QW2.19.5,21,3,23,5,);
L(12,5,12,9);
L(23,6,23,8);
L(12,5,23,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_VARIN,,QIW2_019_6,10,4,12,6,);
B(B_FB,AdressOfUInt,Adress19_6,12,6,23,10,);
B(B_VAROUT,,LXoutpOk_19_6,39,3,41,5,);
B(B_VAROUT,,LXoutpErr_19_6,39,4,41,6,);
B(B_FB,SPanalogOutV010,SPanaOut19_6,23,2,39,7,);
B(B_VARIN,,%QW2.19.6,21,3,23,5,);
L(12,5,12,9);
L(23,6,23,8);
L(12,5,23,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_VARIN,,QIW2_019_7,10,4,12,6,);
B(B_FB,AdressOfUInt,Adress19_7,12,6,23,10,);
B(B_VAROUT,,LXoutpOk_19_7,39,3,41,5,);
B(B_VAROUT,,LXoutpErr_19_7,39,4,41,6,);
B(B_FB,SPanalogOutV010,SPanaOut19_7,23,2,39,7,);
B(B_VARIN,,%QW2.19.7,21,3,23,5,);
L(12,5,12,9);
L(23,6,23,8);
L(12,5,23,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_VARIN,,QIW2_019_8,10,4,12,6,);
B(B_FB,AdressOfUInt,Adress19_8,12,6,23,10,);
B(B_VAROUT,,LXoutpOk_19_8,39,3,41,5,);
B(B_VAROUT,,LXoutpErr_19_8,39,4,41,6,);
B(B_FB,SPanalogOutV010,SPanaOut19_8,23,2,39,7,);
B(B_VARIN,,%QW2.19.8,21,3,23,5,);
L(12,5,12,9);
L(23,6,23,8);
L(12,5,23,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_VARIN,,QIW2_019_9,10,4,12,6,);
B(B_FB,AdressOfUInt,Adress19_9,12,6,23,10,);
B(B_VAROUT,,LXoutpOk_19_9,39,3,41,5,);
B(B_VAROUT,,LXoutpErr_19_9,39,4,41,6,);
B(B_FB,SPanalogOutV010,SPanaOut19_9,23,2,39,7,);
B(B_VARIN,,%QW2.19.9,21,3,23,5,);
L(12,5,12,9);
L(23,6,23,8);
L(12,5,23,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_VARIN,,QIW2_019_10,10,4,12,6,);
B(B_FB,AdressOfUInt,Adress19_10,12,6,23,10,);
B(B_VAROUT,,LXoutpOk_19_10,39,3,41,5,);
B(B_VAROUT,,LXoutpErr_19_10,39,4,41,6,);
B(B_FB,SPanalogOutV010,SPanaOut19_10,23,2,39,7,);
B(B_VARIN,,%QW2.19.10,21,3,23,5,);
L(12,5,12,9);
L(23,6,23,8);
L(12,5,23,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_VARIN,,QIW2_019_11,10,4,12,6,);
B(B_FB,AdressOfUInt,Adress19_11,12,6,23,10,);
B(B_VAROUT,,LXoutpOk_19_11,39,3,41,5,);
B(B_VAROUT,,LXoutpErr_19_11,39,4,41,6,);
B(B_FB,SPanalogOutV010,SPanaOut19_11,23,2,39,7,);
B(B_VARIN,,%QW2.19.11,21,3,23,5,);
L(12,5,12,9);
L(23,6,23,8);
L(12,5,23,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_VARIN,,QIW2_019_12,10,4,12,6,);
B(B_FB,AdressOfUInt,Adress19_12,12,6,23,10,);
B(B_VAROUT,,LXoutpOk_19_12,39,3,41,5,);
B(B_VAROUT,,LXoutpErr_19_12,39,4,41,6,);
B(B_FB,SPanalogOutV010,SPanaOut19_12,23,2,39,7,);
B(B_VARIN,,%QW2.19.12,21,3,23,5,);
L(12,5,12,9);
L(23,6,23,8);
L(12,5,23,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_VARIN,,QIW2_019_13,10,4,12,6,);
B(B_FB,AdressOfUInt,Adress19_13,12,6,23,10,);
B(B_VAROUT,,LXoutpOk_19_13,39,3,41,5,);
B(B_VAROUT,,LXoutpErr_19_13,39,4,41,6,);
B(B_FB,SPanalogOutV010,SPanaOut19_13,23,2,39,7,);
B(B_VARIN,,%QW2.19.13,21,3,23,5,);
L(12,5,12,9);
L(23,6,23,8);
L(12,5,23,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_VARIN,,QIW2_019_14,10,4,12,6,);
B(B_FB,AdressOfUInt,Adress19_14,12,6,23,10,);
B(B_FB,SPanalogOutV010,SPanaOut19_14,23,2,39,7,);
B(B_VAROUT,,LXoutpOk_19_14,39,3,41,5,);
B(B_VAROUT,,LXoutpErr_19_14,39,4,41,6,);
B(B_VARIN,,%QW2.19.14,21,3,23,5,);
L(12,5,12,9);
L(23,6,23,8);
L(12,5,23,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_VARIN,,QIW2_019_15,10,4,12,6,);
B(B_FB,AdressOfUInt,Adress19_15,12,6,23,10,);
B(B_VAROUT,,LXoutpOk_19_15,39,3,41,5,);
B(B_VAROUT,,LXoutpErr_19_15,39,4,41,6,);
B(B_FB,SPanalogOutV010,SPanaOut19_15,23,2,39,7,);
B(B_VARIN,,%QW2.19.15,21,3,23,5,);
L(12,5,12,9);
L(23,6,23,8);
L(12,5,23,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_VARIN,,QIW2_019_16,10,4,12,6,);
B(B_FB,AdressOfUInt,Adress19_16,12,6,23,10,);
B(B_VAROUT,,LXoutpOk_19_16,39,3,41,5,);
B(B_VAROUT,,LXoutpErr_19_16,39,4,41,6,);
B(B_FB,SPanalogOutV010,SPanaOut19_16,23,2,39,7,);
B(B_VARIN,,%QW2.19.16,21,3,23,5,);
L(12,5,12,9);
L(23,6,23,8);
L(12,5,23,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 20 ;
        NETWORK_BODY
B(B_F,@OR-16,,12,1,17,19,);
B(B_VARIN,,LXoutpErr_19_1,10,2,12,4,);
B(B_VARIN,,LXoutpErr_19_2,10,3,12,5,);
B(B_VARIN,,LXoutpErr_19_3,10,4,12,6,);
B(B_VARIN,,LXoutpErr_19_4,10,5,12,7,);
B(B_VARIN,,LXoutpErr_19_5,10,6,12,8,);
B(B_VARIN,,LXoutpErr_19_6,10,7,12,9,);
B(B_VARIN,,LXoutpErr_19_7,10,8,12,10,);
B(B_VARIN,,LXoutpErr_19_8,10,9,12,11,);
B(B_VARIN,,LXoutpErr_19_9,10,10,12,12,);
B(B_VARIN,,LXoutpErr_19_10,10,11,12,13,);
B(B_VARIN,,LXoutpErr_19_11,10,12,12,14,);
B(B_VARIN,,LXoutpErr_19_12,10,13,12,15,);
B(B_VARIN,,LXoutpErr_19_13,10,14,12,16,);
B(B_VARIN,,LXoutpErr_19_14,10,15,12,17,);
B(B_VARIN,,LXoutpErr_19_15,10,16,12,18,);
B(B_VARIN,,LXoutpErr_19_16,10,17,12,19,);
B(B_VAROUT,,LXpowerRed_19,17,2,19,4,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 15 ;
        NETWORK_BODY
B(B_COMMENT,,set power reduction,1,1,32,2,);
B(B_VAROUT,,MXsafetyProgPRA,16,4,18,6,);
B(B_VARIN,,LXpowerRed_9,9,5,11,7,);
B(B_VARIN,,LXpowerRed_10,9,6,11,8,);
B(B_VARIN,,LXpowerRed_13,9,7,11,9,);
B(B_VARIN,,LXpowerRed_14,9,8,11,10,);
B(B_VARIN,,LXpowerRed_PowS,9,4,11,6,);
B(B_F,@OR-9,,11,3,16,14,);
B(B_VARIN,,LXpowerRed_17,9,10,11,12,);
B(B_VARIN,,LXpowerRed_18,9,11,11,13,);
B(B_VARIN,,LXpowerRed_19,9,12,11,14,);
B(B_VARIN,,LXpowerRed_15,9,9,11,11,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 9 ;
        NETWORK_BODY
B(B_VARIN,,LXoutpError_13_2,9,4,11,6,);
B(B_VARIN,,LXoutpError_13_4,9,6,11,8,);
B(B_VARIN,,LXoutpError_13_3,9,5,11,7,);
B(B_F,@OR-3,,11,3,16,8,);
B(B_VAROUT,,MXsafetyProgSAF,16,4,18,6,);
B(B_COMMENT,,set stop all function,1,1,32,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_FB,MsgUDintUDint,Message24,11,4,21,11,);
B(B_VARIN,,802,9,5,11,7,);
B(B_VARIN,,MSG_ERROR,9,7,11,9,);
B(B_VARIN,,23,9,8,11,10,);
B(B_VARIN,,ITXkeybX23Fail,9,6,11,8,);
B(B_COMMENT,,Set summary fault keyboard X23,1,1,32,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_FB,MsgUDintUDint,Message25,11,4,21,11,);
B(B_VARIN,,802,9,5,11,7,);
B(B_VARIN,,MSG_ERROR,9,7,11,9,);
B(B_VARIN,,22,9,8,11,10,);
B(B_VARIN,,ITXkeybX22Fail,9,6,11,8,);
B(B_COMMENT,,Set summary fault keyboard X22,1,1,32,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 13 ;
        NETWORK_BODY
B(B_FB,MsgUDintUDint,Message26,11,4,21,11,);
B(B_VARIN,,802,9,5,11,7,);
B(B_VARIN,,MSG_ERROR,9,7,11,9,);
B(B_VARIN,,25,9,8,11,10,);
B(B_VARIN,,ITXkeybX25Fail,9,6,11,8,);
B(B_COMMENT,,Set summary fault keyboard X25,1,1,32,2,);
        END_NETWORK_BODY
    END_NET_WORK
END_BODY
END_PROGRAM

PROGRAM TGprogV020
(*name of author: Josef Schmid
version: 1.0
date: 07/99
modification:*)
(*name of author: Josef Schmid
version: 1.0
date: 07/99
modification:*)
	VAR_EXTERNAL 
		IXentrySwiClosed: BOOL:=FALSE;
			(*entry switch closed*)
		QWtgControlValve: UINT:=0;
			(*travelling gear control valve*)
		MXstopAllFunctio: BOOL:=FALSE;
			(*stop all excavator functions*)
		MXtgGlobalStop: BOOL:=FALSE;
			(*tg global stop *)
		MXlmlRedAllFunct: BOOL:=FALSE;
			(*lml reduces all functions*)
		MXswitTravelGear: BOOL:=FALSE;
			(*travelling gear is activated*)
		MXminEngineSpeed: BOOL:=FALSE;
			(*minimum engine speed reached*)
		MXengStarterActi: BOOL:=FALSE;
			(*engine starter activated*)
		MXsetZeroTravelG: BOOL:=FALSE;
			(*set zero position travelling gear*)
		MXforcedNeutral: BOOL:=FALSE;
			(*force neutral engine speed*)
		MDpowerLimReduct: REAL:=0.0;
			(*maximum engine power regulator reduction to x[%]*)
		MDratedEngSpeed: REAL:=0.0;
			(*rated engine speed in rpm*)
		MDlmlSpeedRed_Tg: REAL:=0.0;
			(*lml speed reduction value TG (lml changes 2010)*)
	END_VAR
	VAR_EXTERNAL CONSTANT
		MSG_ERROR: UINT:=0;
			(* message priority: "error" *)
	END_VAR
	VAR_EXTERNAL CONSTANT RETAIN
		CWminCurTgCtrVlv: UINT:=0;
			(*minimum current travelling gear control valve*)
		CWmaxCurTgCtrVlv: UINT:=0;
			(*maximum current travelling gear control valve*)
		CDengSpPumpRed: REAL:=0.0;
			(*engine speed for pump reduction [U/min]*)
	END_VAR
	VAR 
		LXinitOK: BOOL:=FALSE;
			(*init completed*)
		LXfailSwitTraveG: BOOL:=FALSE;
		LXtgStopped: BOOL:=FALSE;
		TON1: TON;
		TOF1: TOF;
		RS1: RS;
		RS2: RS;
		R_TRIG1: R_TRIG;
		Message1: MsgRealReal;
		PowerStage1: PowerStage;
		CorrValue_UInt1: CorrValue_UInt;
		CorrValue_UInt2: CorrValue_UInt;
	END_VAR
'FBD'
BODY
    WORKSPACE
        NETWORK_LIST_TYPE := NWTYPEFBD ;
        ACTIVE_NETWORK := 0 ;
    END_WORKSPACE
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_F,not,,11,3,16,6,);
B(B_VARIN,,LXinitOK,9,4,11,6,);
B(B_COMMENT,,init first time,1,1,27,2,);
B(B_JUMP,,init,16,4,18,6,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 23 ;
        NETWORK_BODY
B(B_VARIN,,MDratedEngSpeed,9,9,11,11,);
B(B_F,@DIV,,11,8,16,12,);
B(B_F,limit,,19,7,25,12,);
B(B_VARIN,,0.0,17,8,19,10,);
B(B_VARIN,,1.0,17,10,19,12,);
B(B_F,@MUL-2,,29,6,34,10,);
B(B_F,@MUL-2,,34,6,39,10,);
B(B_F,limit,,43,5,49,10,);
B(B_VARIN,,0.1,41,6,43,8,);
B(B_VARIN,,100.0,41,8,43,10,);
B(B_FB,PowerStage,PowerStage1,57,4,66,12,);
B(B_VARIN,,0.0,55,7,57,9,);
B(B_VARIN,,100.0,55,8,57,10,);
B(B_VAROUT,,QWtgControlValve,66,5,68,7,);
B(B_VARIN,,CWminCurTgCtrVlv,55,9,57,11,);
B(B_VARIN,,CWmaxCurTgCtrVlv,55,10,57,12,);
B(B_COMMENT,,tg regulator valve for control pressure (maximum power regulation),1,1,27,2,);
B(B_F,@AND-2,,52,1,57,5,NN);
B(B_VARIN,,MXtgGlobalStop,50,2,52,4,);
B(B_VARIN,,MXstopAllFunctio,50,3,52,5,);
B(B_VARIN,,100.0,27,7,29,9,);
B(B_F,sel,,22,17,27,22,);
B(B_VARIN,,1.0,25,14,27,16,);
B(B_VARIN,,1.0,25,15,27,17,);
B(B_VARIN,,1.0,20,19,22,21,);
B(B_VARIN,,MDlmlSpeedRed_Tg,20,20,22,22,);
B(B_VARIN,,MXlmlRedAllFunct,20,18,22,20,);
B(B_F,not,,57,1,62,4,);
B(B_VAROUT,,LXtgStopped,62,2,64,4,);
B(B_COMMENT,,Bit für Abfrage ob DS überprüft werden kann ,63,1,81,2,);
B(B_F,SigMin4,,27,12,34,18,);
B(B_VARIN,,MDpowerLimReduct,17,14,19,16,);
B(B_VARIN,,1.0,17,15,19,17,);
B(B_VARIN,,MXforcedNeutral,17,13,19,15,);
B(B_F,sel,,19,12,24,17,);
B(B_VARIN,,CDengSpPumpRed,9,10,11,12,);
L(16,10,19,10);
L(25,9,29,9);
L(39,8,43,8);
L(57,3,57,6);
L(49,7,57,7);
L(34,9,34,14);
L(27,17,27,19);
L(24,14,27,14);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_VARIN,,T#3.0s,9,7,11,9,);
B(B_VARIN,,MXengStarterActi,15,9,17,11,);
B(B_FB,TOF,TOF1,11,5,16,9,);
B(B_VARIN,,MXminEngineSpeed,9,6,11,8,);
B(B_VARIN,,MXswitTravelGear,15,3,17,5,);
B(B_F,@AND-3,,17,4,22,9,0NN);
B(B_FB,RS,RS1,23,4,28,8,);
B(B_VAROUT,,LXfailSwitTraveG,28,5,30,7,);
B(B_VARIN,,FALSE,21,9,23,11,);
B(B_COMMENT,,Ansteuerdruck sollte sich innert 3 Sekunden abbauen,26,9,46,10,);
B(B_COMMENT,,detection of failure of travelling gear switch while engine is not running,1,2,29,3,);
B(B_COMMENT,,check tg pressure switch (electrical),1,1,27,2,);
L(17,8,17,10);
L(16,7,17,7);
L(17,4,17,6);
L(22,6,23,6);
L(23,7,23,10);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_VARIN,,IXentrySwiClosed,9,6,11,8,);
B(B_FB,R_TRIG,R_TRIG1,11,5,18,8,);
B(B_COMMENT,,stopp ludv pumps in case of set zero position of travelling switch ,1,1,27,2,);
B(B_COMMENT,,Nullstellungszwang  travelling gear ,31,1,49,2,);
B(B_FB,RS,RS2,23,5,28,9,0N);
B(B_VAROUT,,MXsetZeroTravelG,28,6,30,8,);
B(B_VARIN,,MXswitTravelGear,21,8,23,10,);
B(B_F,@AND-2,,18,4,23,8,N);
B(B_VARIN,,LXfailSwitTraveG,16,3,18,5,);
B(B_COMMENT,,Stopp wird nur gesetzt wenn kein elektr. Fehler des ø^Druckschalters vorliegt. Grund: Verfügbarkeit,31,2,53,4,);
B(B_COMMENT,,Stopp wirkt auf die LUDV Pumpe; bei analog egal (kann Fehler nicht ø^auftreten) bei dig. die einzige Möglichkeit,40,5,65,7,);
L(23,6,23,7);
L(23,8,23,9);
L(18,4,18,6);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 12 ;
        NETWORK_BODY
B(B_COMMENT,,check tg pressure switch,1,1,27,2,);
B(B_FB,TON,TON1,11,7,16,11,);
B(B_VARIN,,MXswitTravelGear,14,5,16,7,);
B(B_F,@AND-2,,16,4,21,8,);
B(B_VARIN,,T#0.5s,9,9,11,11,);
B(B_F,@OR-2,,21,3,26,7,);
B(B_FB,MsgRealReal,Message1,35,2,44,9,);
B(B_VARIN,,801,33,3,35,5,);
B(B_VARIN,,MSG_ERROR,33,5,35,7,);
B(B_VARIN,,LXfailSwitTraveG,19,3,21,5,);
B(B_VARIN,,LXtgStopped,9,8,11,10,);
L(16,7,16,9);
L(26,5,35,5);
L(21,4,21,5);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 6 ;
        NETWORK_BODY
B(B_COMMENT,,exit travelling gear program,1,1,27,2,);
B(B_VARIN,,TRUE,9,3,11,5,);
B(B_RETURN,,,11,3,13,5,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL := init: ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 7 ;
        NETWORK_BODY
B(B_VARIN,,TRUE,9,3,11,5,);
B(B_VAROUT,,LXinitOK,11,3,13,5,);
B(B_COMMENT,,init travelling gear program,1,1,27,2,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value min current  tg regualtor valve for control pressure,1,1,27,2,);
B(B_FB,CorrValue_UInt,CorrValue_UInt1,11,4,23,10,);
B(B_VARIN,,200,9,6,11,8,);
B(B_VARIN,,350,9,5,11,7,);
B(B_VARIN,,450,9,7,11,9,);
B(B_VARIN,,CWminCurTgCtrVlv,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
    NET_WORK
        NETWORK_TYPE := NWTYPEFBD ;
        NETWORK_LABEL :=  ;
        NETWORK_TITLE :=  ;
        NETWORK_HEIGHT := 11 ;
        NETWORK_BODY
B(B_COMMENT,,correction value max current  tg regulator valve for control pressure ,1,1,27,2,);
B(B_FB,CorrValue_UInt,CorrValue_UInt2,11,4,23,10,);
B(B_VARIN,,730,9,5,11,7,);
B(B_VARIN,,450,9,6,11,8,);
B(B_VARIN,,1000,9,7,11,9,);
B(B_VARIN,,CWmaxCurTgCtrVlv,9,8,11,10,);
        END_NETWORK_BODY
    END_NET_WORK
END_BODY
END_PROGRAM

CONFIGURATION scConfiguration
	RESOURCE scResource ON scResourceType

		VAR_GLOBAL 
			IXenEngineStart AT %IX1.29.1: BOOL:=FALSE;
				(*enable engine start*)
			IXentrySwiClosed AT %IX1.29.2: BOOL:=FALSE;
				(*entry switch closed*)
			IXassemblyOperat AT %IX1.29.3: BOOL:=FALSE;
				(*assembly operation*)
			IXunsecuredFreef AT %IX1.29.4: BOOL:=FALSE;
				(*unsecured freefall*)
			IXswitTravelGear AT %IX1.29.5: BOOL:=FALSE;
				(*pressure switch travelling gear*)
			IXkeyswBridgeLml AT %IX1.29.6: BOOL:=FALSE;
				(*release bridge lml*)
			IXhg2LowerContro AT %IX1.29.7: BOOL:=FALSE;
				(*additional device only HG 2 lowering control *)
			IXhg1NoRopeLimit AT %IX1.29.8: BOOL:=FALSE;
				(*ad no rope tension limitation HG1*)
			IXhg2NoRopeLimit AT %IX1.29.9: BOOL:=FALSE;
				(*ad no rope tension limitation HG2*)
			IXadDynGrouCoHG1 AT %IX1.29.10: BOOL:=FALSE;
				(*ad dynamic ground compaction HG1*)
			IXadDynGrouCoHG2 AT %IX1.29.11: BOOL:=FALSE;
				(*ad dynamic ground compaction HG2*)
			IXseleOperatMode AT %IX1.29.12: BOOL:=FALSE;
				(*select operation mode*)
			IXpreselMooring AT %IX1.29.13: BOOL:=FALSE;
				(*preselection mooring key switch*)
			IXremoteControl AT %IX1.29.14: BOOL:=FALSE;
				(*remote control activated*)
			IXextPreHammer AT %IX1.29.15: BOOL:=FALSE;
				(*ad hammer external preselection*)
			IXrelSlackRopPro AT %IX1.29.16: BOOL:=FALSE;
				(*add. hydr. grab slack rope protection*)
			IXludvPumpExtRel AT %IX1.29.17: BOOL:=FALSE;
				(*external release LUDV pump*)
			IXlml2010KeySwit AT %IX1.29.19: BOOL:=FALSE;
				(*lml 2010 key switch bridge lml outside cabine*)
			IXfeedbackPowLED AT %IX1.29.20: BOOL:=FALSE;
				(*feedback power supply LED+*)
			IXriJoyFronTopRi AT %IX1.65.1: BOOL:=FALSE;
				(*right joystick push button in front at the top right*)
			IXriJoyFronTopLe AT %IX1.65.2: BOOL:=FALSE;
				(*right joystick push button in front at the top left*)
			IXriJoyFronLowRi AT %IX1.65.3: BOOL:=FALSE;
				(*right joystick push button in front at the bottom right*)
			IXriJoyFronLowLe AT %IX1.65.4: BOOL:=FALSE;
				(*right joystick push button in front at the bottom left*)
			IXriJoyTopRi AT %IX1.65.5: BOOL:=FALSE;
				(*right joystick push button at the top right*)
			IXriJoyTopLe AT %IX1.65.6: BOOL:=FALSE;
				(*right joystick push button at the top left*)
			IXriJoyJackSwit AT %IX1.65.7: BOOL:=FALSE;
				(*right joystick push button jack switch*)
			IXriJoyErrBreak AT %IX1.65.20: BOOL:=FALSE;
				(*right joystick error tbd*)
			IXriJoyErrAnaTW AT %IX1.65.21: BOOL:=FALSE;
				(*right joystick error thumb wheel analog signal*)
			IXriJoyErrorAna2 AT %IX1.65.22: BOOL:=FALSE;
				(*right joystick error analog signal 2 (Y) *)
			IXriJoyErrorAna1 AT %IX1.65.23: BOOL:=FALSE;
				(*right joystick error analog signal 1 (X/Y2)*)
			IXriJoyErrJackSw AT %IX1.65.26: BOOL:=FALSE;
				(*right joystick error jack switch*)
			IXriJoyErrTopFrL AT %IX1.65.27: BOOL:=FALSE;
				(*right joystick error bottom top front left*)
			IXriJoyErrTopFrR AT %IX1.65.28: BOOL:=FALSE;
				(*right joystick error bottom top front right*)
			IXriJoyErrFroLoL AT %IX1.65.29: BOOL:=FALSE;
				(*right joystick error bottom front low left*)
			IXriJoyErrFroLoR AT %IX1.65.30: BOOL:=FALSE;
				(*right joystick error bottom front low right*)
			IXriJoyErrFroToL AT %IX1.65.31: BOOL:=FALSE;
				(*right joystick error bottom front top left*)
			IXriJoyErrFroToR AT %IX1.65.32: BOOL:=FALSE;
				(*right joystick error bottom front top right*)
			IXleJoyFronTopRi AT %IX1.67.1: BOOL:=FALSE;
				(*left joystick push button in front at the top right*)
			IXleJoyFronTopLe AT %IX1.67.2: BOOL:=FALSE;
				(*left joystick push button in front at the top left*)
			IXleJoyFronLowRi AT %IX1.67.3: BOOL:=FALSE;
				(*left joystick push button in front at the bottom right*)
			IXleJoyFronLowLe AT %IX1.67.4: BOOL:=FALSE;
				(*left joystick push button in front at the bottom left*)
			IXleJoyTopLe AT %IX1.67.5: BOOL:=FALSE;
				(*left joystick push button at the top left (horn)*)
			IXleJoyTopRi AT %IX1.67.6: BOOL:=FALSE;
				(*left joystick push button at the top right*)
			IXleJoyJackSwit AT %IX1.67.7: BOOL:=FALSE;
				(*left joystick push button jack switch*)
			IXleJoyErrBreak AT %IX1.67.20: BOOL:=FALSE;
				(*left joystick error tbd*)
			IXleJoyErrAnaTW AT %IX1.67.21: BOOL:=FALSE;
				(*left joystick error thumb wheel analog signal*)
			IXleJoyErrorAna2 AT %IX1.67.22: BOOL:=FALSE;
				(*left joystick error analog signal 2 (Y)*)
			IXleJoyErrorAna1 AT %IX1.67.23: BOOL:=FALSE;
				(*left joystick error analog signal 1 (X) *)
			IXleJoyErrJackSw AT %IX1.67.26: BOOL:=FALSE;
				(*left joystick error jack switch*)
			IXleJoyErrTopFrL AT %IX1.67.27: BOOL:=FALSE;
				(*left joystick error bottom top front left*)
			IXleJoyErrTopFrR AT %IX1.67.28: BOOL:=FALSE;
				(*left joystick error bottom top front right*)
			IXleJoyErrFroLoL AT %IX1.67.29: BOOL:=FALSE;
				(*left joystick error bottom front low left*)
			IXleJoyErrFroLoR AT %IX1.67.30: BOOL:=FALSE;
				(*left joystick error bottom front low right*)
			IXleJoyErrFroToL AT %IX1.67.31: BOOL:=FALSE;
				(*left joystick error bottom front top left*)
			IXleJoyErrFroToR AT %IX1.67.32: BOOL:=FALSE;
				(*left joystick error bottom front top right*)
			ITXsgMomReg AT %IX1.73.1: BOOL:=FALSE;
				(*preselection slewing gear moment regulator*)
			ITXsgSpeedLevel AT %IX1.73.2: BOOL:=FALSE;
				(*preselection slewing gear speed level*)
			ITXlgSpeedLevel AT %IX1.73.3: BOOL:=FALSE;
				(*preselection luffing gear speed level*)
			ITXfreefallOper AT %IX1.73.7: BOOL:=FALSE;
				(*preselection freefall operation *)
			ITXhg1FastSpeed AT %IX1.73.8: BOOL:=FALSE;
				(*preselection hg1 fast speed operation *)
			ITXhg2FastSpeed AT %IX1.73.9: BOOL:=FALSE;
				(*preselection hg2 fast speed operation *)
			ITXgrabCtrl AT %IX1.73.13: BOOL:=FALSE;
				(*preselection grab control/winch synchronisation*)
			ITXwinchSynch AT %IX1.73.13: BOOL:=FALSE;
				(*preselection grab control/winch synchronisation*)
			ITXspecLiftOper AT %IX1.73.14: BOOL:=FALSE;
				(*preselection special lift operation *)
			ITXlg2Winch AT %IX1.73.19: BOOL:=FALSE;
				(*preselection lg2 (auxiliary) winch *)
			ITXaddWinch AT %IX1.73.20: BOOL:=FALSE;
				(*preselection additional/passenger winch *)
			ITXpassWinch AT %IX1.73.20: BOOL:=FALSE;
				(*preselection additional/passenger winch *)
			ITXderrWinch AT %IX1.73.21: BOOL:=FALSE;
				(*preselection derrick winch *)
			ITXstabWinchUp AT %IX1.73.25: BOOL:=FALSE;
				(*preselection stabilization winch on (up) *)
			ITXstabWinchDn AT %IX1.73.26: BOOL:=FALSE;
				(*preselection stabilization winch down *)
			ITXrcChangeCtrl AT %IX1.73.28: BOOL:=FALSE;
				(*preselection change remote control *)
			ITXengReqStop AT %IX1.73.30: BOOL:=FALSE;
				(*preselection requested engine stop *)
			ITXaddHydr AT %IX1.73.31: BOOL:=FALSE;
				(*preselection additional hydraulic (oscillator) *)
			ITXmagUnitGen AT %IX1.73.32: BOOL:=FALSE;
				(*preselection magnetic unit generator/add. oil supply *)
			ITXaddOilSupply AT %IX1.73.32: BOOL:=FALSE;
				(*preselection magnetic unit generator/add. oil supply *)
			ITXhammer AT %IX1.73.37: BOOL:=FALSE;
				(*preselection hammer/vibrator*)
			ITXvibrator AT %IX1.73.37: BOOL:=FALSE;
				(*preselection hammer/vibrator*)
			ITXclampClose AT %IX1.73.38: BOOL:=FALSE;
				(*preselection clamping jaw close*)
			ITXexDriveOut AT %IX1.73.39: BOOL:=FALSE;
				(*preselection excenter drive out*)
			ITXaFrameCylOut AT %IX1.73.41: BOOL:=FALSE;
				(*preselection a frame cylinder out (rising)*)
			ITXcylOperat AT %IX1.73.42: BOOL:=FALSE;
				(*preselection cylinder operation *)
			ITXclampOpen AT %IX1.73.44: BOOL:=FALSE;
				(*preselection clamping jaw open*)
			ITXexDriveIn AT %IX1.73.45: BOOL:=FALSE;
				(*preselection excenter drive in*)
			ITXaFrameCylIn AT %IX1.73.47: BOOL:=FALSE;
				(*preselection a frame cylinder in (lowering)*)
			ITXhoistCyl AT %IX1.73.48: BOOL:=FALSE;
				(*preselection hoisting cylinder*)
			ITXlimSwBridged AT %IX1.73.49: BOOL:=FALSE;
				(*preselection limit switch bridged*)
			ITXlmlBridged AT %IX1.73.50: BOOL:=FALSE;
				(*preselection lml bridged*)
			ITXkeybX23Fail AT %IX1.73.55: BOOL:=FALSE;
				(*keyboard X23 summary failure*)
			ITXkeybX23Res1 AT %IX1.73.56: BOOL:=FALSE;
				(*keyboard X23 reserve 1*)
			ITXautoHoseWinch AT %IX1.74.1: BOOL:=FALSE;
				(*preselection automatic hose winch *)
			ITXgrabAutoMidd AT %IX1.74.2: BOOL:=FALSE;
				(*preselection grab automatic middle position*)
			ITXkeybX22But3 AT %IX1.74.3: BOOL:=FALSE;
				(*keyboard X22push-button 3*)
			ITXkeybX22But4 AT %IX1.74.4: BOOL:=FALSE;
				(*keyboard X22push-button 4*)
			ITXkeybX22But5 AT %IX1.74.5: BOOL:=FALSE;
				(*keyboard X22push-button 5*)
			ITXkeybX22But6 AT %IX1.74.6: BOOL:=FALSE;
				(*keyboard X22push-button 6*)
			ITXkeybX22But7 AT %IX1.74.7: BOOL:=FALSE;
				(*keyboard X22push-button 7*)
			ITXkeybX22But8 AT %IX1.74.8: BOOL:=FALSE;
				(*keyboard X22push-button 8*)
			ITXkeybX22But9 AT %IX1.74.9: BOOL:=FALSE;
				(*keyboard X22push-button 9*)
			ITXkeybX22But10 AT %IX1.74.10: BOOL:=FALSE;
				(*keyboard X22push-button 10*)
			ITXkeybX22But11 AT %IX1.74.11: BOOL:=FALSE;
				(*keyboard X22push-button 11*)
			ITXkeybX22But12 AT %IX1.74.12: BOOL:=FALSE;
				(*keyboard X22push-button 12*)
			ITXleHoseWinchUp AT %IX1.74.13: BOOL:=FALSE;
				(*preselection left hose winch up*)
			ITXriHoseWinchUp AT %IX1.74.14: BOOL:=FALSE;
				(*preselection right hose winch up*)
			ITXcableWinchUp AT %IX1.74.15: BOOL:=FALSE;
				(*preselection cable winch up*)
			ITXkeybX22But16 AT %IX1.74.16: BOOL:=FALSE;
				(*keyboard X22push-button 16*)
			ITXkeybX22But17 AT %IX1.74.17: BOOL:=FALSE;
				(*keyboard X22push-button 17*)
			ITXkeybX22But18 AT %IX1.74.18: BOOL:=FALSE;
				(*keyboard X22push-button 18*)
			ITXleHoseWinchDn AT %IX1.74.19: BOOL:=FALSE;
				(*preselection left hose winch down*)
			ITXriHoseWinchDn AT %IX1.74.20: BOOL:=FALSE;
				(*preselection right hose winch down*)
			ITXcableWinchDn AT %IX1.74.21: BOOL:=FALSE;
				(*preselection cable winch down*)
			ITXkeybX22But22 AT %IX1.74.22: BOOL:=FALSE;
				(*keyboard X22push-button 22*)
			ITXkeybX22But23 AT %IX1.74.23: BOOL:=FALSE;
				(*keyboard X22push-button 23*)
			ITXkeybX22But24 AT %IX1.74.24: BOOL:=FALSE;
				(*keyboard X22push-button 24*)
			ITXgrabAdj1Out AT %IX1.74.25: BOOL:=FALSE;
				(*preselection grab adjustment 1 out*)
			ITXgrabAdj2Out AT %IX1.74.26: BOOL:=FALSE;
				(*preselection grab adjustment 2 out*)
			ITXkeybX22But27 AT %IX1.74.27: BOOL:=FALSE;
				(*keyboard X22push-button 27*)
			ITXkeybX22But28 AT %IX1.74.28: BOOL:=FALSE;
				(*keyboard X22push-button 28*)
			ITXkeybX22But29 AT %IX1.74.29: BOOL:=FALSE;
				(*keyboard X22push-button 29*)
			ITXkeybX22But30 AT %IX1.74.30: BOOL:=FALSE;
				(*keyboard X22push-button 30*)
			ITXgrabAdj1In AT %IX1.74.31: BOOL:=FALSE;
				(*preselection grab adjustment 1 in*)
			ITXgrabAdj2In AT %IX1.74.32: BOOL:=FALSE;
				(*preselection grab adjustment 2 in*)
			ITXkeybX22But33 AT %IX1.74.33: BOOL:=FALSE;
				(*keyboard X22push-button 33*)
			ITXkeybX22But34 AT %IX1.74.34: BOOL:=FALSE;
				(*keyboard X22push-button 34*)
			ITXkeybX22But35 AT %IX1.74.35: BOOL:=FALSE;
				(*keyboard X22push-button 35*)
			ITXkeybX22But36 AT %IX1.74.36: BOOL:=FALSE;
				(*keyboard X22push-button 36*)
			ITXkeybX22But37 AT %IX1.74.37: BOOL:=FALSE;
				(*keyboard X22push-button 37*)
			ITXkeybX22But38 AT %IX1.74.38: BOOL:=FALSE;
				(*keyboard X22push-button 38*)
			ITXkeybX22But39 AT %IX1.74.39: BOOL:=FALSE;
				(*keyboard X22push-button 39*)
			ITXkeybX22But40 AT %IX1.74.40: BOOL:=FALSE;
				(*keyboard X22push-button 40*)
			ITXkeybX22But41 AT %IX1.74.41: BOOL:=FALSE;
				(*keyboard X22push-button 41*)
			ITXkeybX22But42 AT %IX1.74.42: BOOL:=FALSE;
				(*keyboard X22push-button 42*)
			ITXkeybX22But43 AT %IX1.74.43: BOOL:=FALSE;
				(*keyboard X22push-button 43*)
			ITXkeybX22But44 AT %IX1.74.44: BOOL:=FALSE;
				(*keyboard X22push-button 44*)
			ITXkeybX22But45 AT %IX1.74.45: BOOL:=FALSE;
				(*keyboard X22push-button 45*)
			ITXkeybX22But46 AT %IX1.74.46: BOOL:=FALSE;
				(*keyboard X22push-button 46*)
			ITXkeybX22But47 AT %IX1.74.47: BOOL:=FALSE;
				(*keyboard X22push-button 47*)
			ITXkeybX22But48 AT %IX1.74.48: BOOL:=FALSE;
				(*keyboard X22push-button 48*)
			ITXkeybX22But49 AT %IX1.74.49: BOOL:=FALSE;
				(*keyboard X22push-button 49*)
			ITXkeybX22But50 AT %IX1.74.50: BOOL:=FALSE;
				(*keyboard X22push-button 50*)
			ITXkeybX22But51 AT %IX1.74.51: BOOL:=FALSE;
				(*keyboard X22push-button 51*)
			ITXkeybX22But52 AT %IX1.74.52: BOOL:=FALSE;
				(*keyboard X22push-button 52*)
			ITXkeybX22But53 AT %IX1.74.53: BOOL:=FALSE;
				(*keyboard X22push-button 53*)
			ITXkeybX22But54 AT %IX1.74.54: BOOL:=FALSE;
				(*keyboard X22push-button 54*)
			ITXkeybX22Fail AT %IX1.74.55: BOOL:=FALSE;
				(*keyboard X22summary failure*)
			ITXkeybX22Res1 AT %IX1.74.56: BOOL:=FALSE;
				(*keyboard X22reserve 1*)
			ITXx25LeCursLeDn AT %IX1.75.1: BOOL:=FALSE;
				(*keyboard X25 left cursor, left/down*)
			ITXkeybX25But2 AT %IX1.75.2: BOOL:=FALSE;
				(*keyboard X25push-button 2*)
			ITXx25LeCursRiUp AT %IX1.75.3: BOOL:=FALSE;
				(*keyboard X25 left cursor,  right/up *)
			ITXkeybX25But4 AT %IX1.75.4: BOOL:=FALSE;
				(*keyboard X25push-button 4*)
			ITXkeybX25But5 AT %IX1.75.5: BOOL:=FALSE;
				(*keyboard X25push-button 5*)
			ITXkeybX25But6 AT %IX1.75.6: BOOL:=FALSE;
				(*keyboard X25push-button 6*)
			ITXkeybX25But7 AT %IX1.75.7: BOOL:=FALSE;
				(*keyboard X25push-button 7*)
			ITXkeybX25But8 AT %IX1.75.8: BOOL:=FALSE;
				(*keyboard X25push-button 8*)
			ITXleadHiAdWinch AT %IX1.75.9: BOOL:=FALSE;
				(*preselection leader hight adjustment winch *)
			ITXkeybX25But10 AT %IX1.75.10: BOOL:=FALSE;
				(*keyboard X25push-button 10*)
			ITXkeybX25But11 AT %IX1.75.11: BOOL:=FALSE;
				(*keyboard X25push-button 11*)
			ITXkeybX25But12 AT %IX1.75.12: BOOL:=FALSE;
				(*keyboard X25push-button 12*)
			ITXkeybX25But13 AT %IX1.75.13: BOOL:=FALSE;
				(*keyboard X25push-button 13*)
			ITXz17leadFun AT %IX1.75.14: BOOL:=FALSE;
				(*preselection Z17 leader function *)
			ITXz6leadFun AT %IX1.75.15: BOOL:=FALSE;
				(*preselection Z6 leader function*)
			ITXkeybX25But16 AT %IX1.75.16: BOOL:=FALSE;
				(*keyboard X25push-button 16*)
			ITXkeybX25But17 AT %IX1.75.17: BOOL:=FALSE;
				(*keyboard X25push-button 17*)
			ITXkeybX25But18 AT %IX1.75.18: BOOL:=FALSE;
				(*keyboard X25push-button 18*)
			ITXleadMooring AT %IX1.75.19: BOOL:=FALSE;
				(*preselection leader mooring*)
			ITXz3leadFun AT %IX1.75.20: BOOL:=FALSE;
				(*preselection Z3 leader function*)
			ITXkeybX25But21 AT %IX1.75.21: BOOL:=FALSE;
				(*keyboard X25push-button 21*)
			ITXkeybX25But22 AT %IX1.75.22: BOOL:=FALSE;
				(*keyboard X25push-button 22*)
			ITXkeybX25But23 AT %IX1.75.23: BOOL:=FALSE;
				(*keyboard X25push-button 23*)
			ITXkeybX25But24 AT %IX1.75.24: BOOL:=FALSE;
				(*keyboard X25push-button 24*)
			ITXleadAutoInc AT %IX1.75.25: BOOL:=FALSE;
				(*preselection leader automatic inclination *)
			ITXkeybX25But26 AT %IX1.75.26: BOOL:=FALSE;
				(*keyboard X25push-button 26*)
			ITXkeybX25But27 AT %IX1.75.27: BOOL:=FALSE;
				(*keyboard X25push-button 27*)
			ITXkeybX25But28 AT %IX1.75.28: BOOL:=FALSE;
				(*keyboard X25push-button 28*)
			ITXkeybX25But29 AT %IX1.75.29: BOOL:=FALSE;
				(*keyboard X25push-button 29*)
			ITXkeybX25But30 AT %IX1.75.30: BOOL:=FALSE;
				(*keyboard X25push-button 30*)
			ITXkeybX25But31 AT %IX1.75.31: BOOL:=FALSE;
				(*keyboard X25push-button 31*)
			ITXkeybX25But32 AT %IX1.75.32: BOOL:=FALSE;
				(*keyboard X25push-button 32*)
			ITXz4leadFun AT %IX1.75.33: BOOL:=FALSE;
				(*preselection Z4 leader function*)
			ITXkeybX25But34 AT %IX1.75.34: BOOL:=FALSE;
				(*keyboard X25push-button 34*)
			ITXkeybX25But35 AT %IX1.75.35: BOOL:=FALSE;
				(*keyboard X25push-button 35*)
			ITXkeybX25But36 AT %IX1.75.36: BOOL:=FALSE;
				(*keyboard X25push-button 36*)
			ITXkeybX25But37 AT %IX1.75.37: BOOL:=FALSE;
				(*keyboard X25push-button 37*)
			ITXpileGuideFun AT %IX1.75.38: BOOL:=FALSE;
				(*preselection pile guide leader function*)
			ITXz2leadFun AT %IX1.75.39: BOOL:=FALSE;
				(*preselection Z2 leader function*)
			ITXkeybX25But40 AT %IX1.75.40: BOOL:=FALSE;
				(*keyboard X25push-button 40*)
			ITXkeybX25But41 AT %IX1.75.41: BOOL:=FALSE;
				(*keyboard X25push-button 41*)
			ITXkeybX25But42 AT %IX1.75.42: BOOL:=FALSE;
				(*keyboard X25push-button 42*)
			ITXkeybX25But43 AT %IX1.75.43: BOOL:=FALSE;
				(*keyboard X25push-button 43*)
			ITXkeybX25But44 AT %IX1.75.44: BOOL:=FALSE;
				(*keyboard X25push-button 44*)
			ITXkeybX25But45 AT %IX1.75.45: BOOL:=FALSE;
				(*keyboard X25push-button 45*)
			ITXkeybX25But46 AT %IX1.75.46: BOOL:=FALSE;
				(*keyboard X25push-button 46*)
			ITXkeybX25But47 AT %IX1.75.47: BOOL:=FALSE;
				(*keyboard X25push-button 47*)
			ITXkeybX25But48 AT %IX1.75.48: BOOL:=FALSE;
				(*keyboard X25push-button 48*)
			ITXx25RiCursClDn AT %IX1.75.49: BOOL:=FALSE;
				(*keyboard X25 right cursor, close/down*)
			ITXkeybX25But50 AT %IX1.75.50: BOOL:=FALSE;
				(*keyboard X25push-button 50*)
			ITXx25RiCursOpUp AT %IX1.75.51: BOOL:=FALSE;
				(*keyboard X25 right cursor, open/up*)
			ITXkeybX25But52 AT %IX1.75.52: BOOL:=FALSE;
				(*keyboard X25push-button 52*)
			ITXkeybX25But53 AT %IX1.75.53: BOOL:=FALSE;
				(*keyboard X25push-button 53*)
			ITXkeybX25But54 AT %IX1.75.54: BOOL:=FALSE;
				(*keyboard X25push-button 54*)
			ITXkeybX25Fail AT %IX1.75.55: BOOL:=FALSE;
				(*keyboard X25 summary failure*)
			ITXkeybX25Res1 AT %IX1.75.56: BOOL:=FALSE;
				(*keyboard X25reserve 1*)
			IXrcSwitchedOn AT %IX1.109.1: BOOL:=FALSE;
				(*remote control switched on*)
			IXrcEngStartStop AT %IX1.109.2: BOOL:=FALSE;
				(*remote control engine start / stop*)
			IXrcEngSpeedStor AT %IX1.109.3: BOOL:=FALSE;
				(*remote control engine speed store*)
			IXrcChangeContro AT %IX1.109.4: BOOL:=FALSE;
				(*remote control change control RC / cabine*)
			IXrcAcknowBeeper AT %IX1.109.5: BOOL:=FALSE;
				(*remote control acknowledge beeper*)
			IXrcLight AT %IX1.109.6: BOOL:=FALSE;
				(*remote control floodlights on*)
			IXrcLmlBypass AT %IX1.109.7: BOOL:=FALSE;
				(*remote control lml bypass*)
			IXrcHorn AT %IX1.109.8: BOOL:=FALSE;
				(*remote control horn*)
			IXrcPresel1 AT %IX1.109.9: BOOL:=FALSE;
				(*remote control preselection 1*)
			IXrcPresel2 AT %IX1.109.10: BOOL:=FALSE;
				(*remote control preselection 2*)
			IXrcPresel3 AT %IX1.109.11: BOOL:=FALSE;
				(*remote control preselection 3*)
			IXrcPresel4 AT %IX1.109.12: BOOL:=FALSE;
				(*remote control preselection 4*)
			IXrcPresel5 AT %IX1.109.13: BOOL:=FALSE;
				(*remote control preselection 5*)
			IXrcPresel6 AT %IX1.109.14: BOOL:=FALSE;
				(*remote control preselection 6*)
			IXrcPresel7 AT %IX1.109.15: BOOL:=FALSE;
				(*remote control preselection 7*)
			IXrcPresel8 AT %IX1.109.16: BOOL:=FALSE;
				(*remote control preselection 8*)
			IXrcPresel9 AT %IX1.109.17: BOOL:=FALSE;
				(*remote control preselection 9*)
			IXrcPresel10 AT %IX1.109.18: BOOL:=FALSE;
				(*remote control preselection 10*)
			IXrcPresel11 AT %IX1.109.19: BOOL:=FALSE;
				(*remote control preselection 11*)
			IXrcPresel12 AT %IX1.109.20: BOOL:=FALSE;
				(*remote control preselection 12*)
			IXrcEngSpeedUp AT %IX1.109.25: BOOL:=FALSE;
				(*remote control engine speed up*)
			IXrcEngSpeedDown AT %IX1.109.26: BOOL:=FALSE;
				(*remote control engine speed down*)
			IXrcFloCouWeiPre AT %IX1.109.27: BOOL:=FALSE;
				(*remote control floating counterweight preselection*)
			IXrcLgWinchPrese AT %IX1.109.28: BOOL:=FALSE;
				(*remote control lg preselection*)
			IXrcSgFreeTurn AT %IX1.109.29: BOOL:=FALSE;
				(*remote control sg free turn*)
			IXrcAutomaticSta AT %IX1.109.30: BOOL:=FALSE;
				(*remote control automatic start*)
			IXrcTgLeftForwar AT %IX1.109.31: BOOL:=FALSE;
				(*remote control tg left forward*)
			IXrcTgLeftBackwa AT %IX1.109.32: BOOL:=FALSE;
				(*remote control tg left backward*)
			IXrcTgRightForwa AT %IX1.109.33: BOOL:=FALSE;
				(*remote control tg right forward*)
			IXrcTgRightBackw AT %IX1.109.34: BOOL:=FALSE;
				(*remote control tg right backward*)
			IXrcWinchSynchro AT %IX1.109.35: BOOL:=FALSE;
				(*remote control winch syncronisation*)
			IXrcAddHydraulic AT %IX1.109.36: BOOL:=FALSE;
				(*remote control add hydraulic*)
			IXrcExcenterOut AT %IX1.109.37: BOOL:=FALSE;
				(*remote control excenter out*)
			IXrcExcenterIn AT %IX1.109.38: BOOL:=FALSE;
				(*remote control excenter in*)
			IXrcClampOpen AT %IX1.109.39: BOOL:=FALSE;
				(*remote control clamp open*)
			IXrcClampClose AT %IX1.109.40: BOOL:=FALSE;
				(*remote control clamp close*)
			IXrcActivationOk AT %IX1.109.63: BOOL:=FALSE;
				(*remote control activation o.k. (Si 2)*)
			IXremContRadioOk AT %IX1.109.64: BOOL:=FALSE;
				(*remote control radio connection o.k. (Si 1)*)
			IWrcJoyLeftY AT %IW1.113.1: INT:=0;
				(*remote control joystick left analog signal Y*)
			IWrcJoyLeftX AT %IW1.113.2: INT:=0;
				(*remote control joystick left analog signal X*)
			IWrcJoyLeftZ AT %IW1.113.3: INT:=0;
				(*remote control joystick left analog signal Z*)
			IWrcJoyRightY AT %IW1.113.4: INT:=0;
				(*remote control joystick right analog signal Y*)
			IWrcJoyRightX AT %IW1.113.5: INT:=0;
				(*remote control joystick right analog signal X*)
			IDimmoInput1 AT %ID1.107.1: DINT:=0;
				(*IMMO input 1*)
			IDimmoInput2 AT %ID1.107.2: DINT:=0;
				(*IMMO input 2*)
			IXhydrFiltFeedOk AT %IX2.33.3: BOOL:=FALSE;
				(*hydraulic filter feed pressure o.k.*)
			IXhydrFilReturOk AT %IX2.33.6: BOOL:=FALSE;
				(*hydraulic filter return flow o.k.*)
			IXhydrOilShutOff AT %IX2.33.7: BOOL:=FALSE;
				(*hydraulic oil shut-off device*)
			IXgearOilTempOk AT %IX2.33.8: BOOL:=FALSE;
				(*gear oil temperature o.k.*)
			IXlimSwiBoomStab AT %IX2.33.9: BOOL:=FALSE;
				(*limit switch boom stabilization; ball in socket*)
			IXhg1StandStInd AT %IX2.33.10: BOOL:=FALSE;
				(*standstill indicator winch HG 1*)
			IXhg1FeedPressOk AT %IX2.33.11: BOOL:=FALSE;
				(*feed pressure HG 1 o.k.*)
			IXhg1BrakePresOk AT %IX2.33.12: BOOL:=FALSE;
				(*brake pressure HG 1 o.k.*)
			IXhg1UpperLimOk AT %IX2.33.13: BOOL:=FALSE;
				(*upper limit switch HG 1 o.k.*)
			IXhg2StandStInd AT %IX2.33.14: BOOL:=FALSE;
				(*standstillindicator winch HG 2*)
			IXhg2FeedPressOk AT %IX2.33.15: BOOL:=FALSE;
				(*feed pressure HG 2 o.k.*)
			IXhg2BrakePresOk AT %IX2.33.16: BOOL:=FALSE;
				(*brake pressure HG 2 o.k.*)
			IXhg2UpperLimOk AT %IX2.33.17: BOOL:=FALSE;
				(*upper limit switch HG 2 o.k.*)
			IXlgUpperLimOk AT %IX2.33.18: BOOL:=FALSE;
				(*upper limit switch LG o.k.*)
			IXhgRelFreefall AT %IX2.33.19: BOOL:=FALSE;
				(*clutch valve release freefall*)
			IXnot_used_20 AT %IX2.33.20: BOOL:=FALSE;
				(*not used*)
			IXhg1LowerLimOk AT %IX2.33.21: BOOL:=FALSE;
				(*lower limit switch HG 1 o.k.*)
			IXhg2LowerLimOk AT %IX2.33.22: BOOL:=FALSE;
				(*lower limit switch HG 2 o.k.*)
			IXlg2UpperLimOk AT %IX2.33.23: BOOL:=FALSE;
				(*upper limit switch LG2 o.k*)
			IXlg2LowerLimOk AT %IX2.33.24: BOOL:=FALSE;
				(*lower limit switch LG 2 o.k*)
			IXlgAFraUppLimOk AT %IX2.33.25: BOOL:=FALSE;
				(*upper limit switch main boom a-frame*)
			IXlgAFraLowLimOk AT %IX2.33.26: BOOL:=FALSE;
				(*lower limit switch main boom a-frame/ lg *)
			IXlgLowerLimOk AT %IX2.33.26: BOOL:=FALSE;
				(*lg lower limit switch o.k.*)
			IXlg2FlapIsOut AT %IX2.33.27: BOOL:=FALSE;
				(*lg 2 luffing jib flap is out (ready) / sliding table (pivot piece) limit switch o.k.*)
			IXslidTableLimOk AT %IX2.33.27: BOOL:=FALSE;
				(*lg 2 luffing jib flap is out (ready) / sliding table (pivot piece) limit switch o.k.*)
			IXnot_used_28 AT %IX2.33.28: BOOL:=FALSE;
				(*not used*)
			IXadPersSlackRop AT %IX2.33.29: BOOL:=FALSE;
				(*add personal winch: slack rope switch*)
			IXadPersCrankMon AT %IX2.33.30: BOOL:=FALSE;
				(*add personal winch: crank emergency drop mounted*)
			IXaddUpperLimOk AT %IX2.33.31: BOOL:=FALSE;
				(*add: additional/passenger winch upper limit switch  o.k.*)
			IXaddLowerLimOk AT %IX2.33.32: BOOL:=FALSE;
				(*add: additional/passenger winch lower limit switch  o.k.*)
			IXnot_used_34_1 AT %IX2.34.1: BOOL:=FALSE;
				(*not used*)
			IXnot_used_34_2 AT %IX2.34.2: BOOL:=FALSE;
				(*not used*)
			IXcentLubBear AT %IX2.34.3: BOOL:=FALSE;
				(*add central lubrication indic. bearing*)
			IXcentLubSlewRi AT %IX2.34.4: BOOL:=FALSE;
				(*add central lubrication indic. slewing ring*)
			IXcentLubCarriag AT %IX2.34.5: BOOL:=FALSE;
				(*add central lubrication indic. carriage*)
			IXpumWeaInHg1 AT %IX2.34.6: BOOL:=FALSE;
				(*add pump wear indication hg1*)
			IXpumWeaInHg2 AT %IX2.34.7: BOOL:=FALSE;
				(*add pump wear indication hg2*)
			IXpumWeaInSg AT %IX2.34.8: BOOL:=FALSE;
				(*add pump wear indication sg*)
			IXpumWeaInLUDV12 AT %IX2.34.9: BOOL:=FALSE;
				(*add pump wear indication LUDV 1/2*)
			IXpumWeaInLUDV3 AT %IX2.34.10: BOOL:=FALSE;
				(*add pump wear indication LUDV 3*)
			IXnot_used_34_11 AT %IX2.34.11: BOOL:=FALSE;
				(*not used*)
			IXnot_used_34_12 AT %IX2.34.12: BOOL:=FALSE;
				(*not used*)
			IXnot_used_34_13 AT %IX2.34.13: BOOL:=FALSE;
				(*not used*)
			IXnot_used_34_14 AT %IX2.34.14: BOOL:=FALSE;
				(*not used*)
			IXnot_used_34_15 AT %IX2.34.15: BOOL:=FALSE;
				(*not used*)
			IXnot_used_34_16 AT %IX2.34.16: BOOL:=FALSE;
				(*not used*)
			IXctValveNotSwit AT %IX2.34.17: BOOL:=FALSE;
				(*CT (MOPS / sea state wave compensation) valve not switched*)
			IXMopsSwitched AT %IX2.34.18: BOOL:=FALSE;
				(*MOPS activated (emergency switch)*)
			IXballValveActiv AT %IX2.34.19: BOOL:=FALSE;
				(*ball valve sea state wave compensation and MOPS*)
			IXnot_used_34_20 AT %IX2.34.20: BOOL:=FALSE;
				(*not used*)
			IXnot_used_34_21 AT %IX2.34.21: BOOL:=FALSE;
				(*not used*)
			IXddOilFlow AT %IX2.34.22: BOOL:=FALSE;
				(*drill.dr. oil flow o.k / grab: press. switch hose drums (B) *)
			IXadGrabPressSwi AT %IX2.34.22: BOOL:=FALSE;
				(*drill.dr. oil flow o.k / grab: press. switch hose drums (B)*)
			IXddGearBoxTemp AT %IX2.34.23: BOOL:=FALSE;
				(*drill.dr. gear box temp. o.k / grab: feed press. switch hose drums (B) *)
			IXadGrabFeedPres AT %IX2.34.23: BOOL:=FALSE;
				(*drill.dr. gear box temp. o.k / grab: feed press. switch hose drums (B) *)
			IXadGrabPresValu AT %IX2.34.24: BOOL:=FALSE;
				(*add grab: pressure value hose drums (B) *)
			IXmilBenHydrFilt AT %IX2.34.25: BOOL:=FALSE;
				(*hydraulic filter bentonit pump (B) *)
			IXnot_used_34_26 AT %IX2.34.26: BOOL:=FALSE;
				(*not used*)
			IXnot_used_34_27 AT %IX2.34.27: BOOL:=FALSE;
				(*not used*)
			IXnot_used_34_28 AT %IX2.34.28: BOOL:=FALSE;
				(*not used*)
			IXnot_used_34_29 AT %IX2.34.29: BOOL:=FALSE;
				(*not used*)
			IXnot_used_34_30 AT %IX2.34.30: BOOL:=FALSE;
				(*not used*)
			IXnot_used_34_31 AT %IX2.34.31: BOOL:=FALSE;
				(*not used*)
			IXnot_used_34_32 AT %IX2.34.32: BOOL:=FALSE;
				(*not used*)
			IXengStarting AT %IX2.93.1: BOOL:=FALSE;
				(*engine starting*)
			IXengCharging AT %IX2.93.2: BOOL:=FALSE;
				(*engine battery charging*)
			IXengRunning AT %IX2.93.3: BOOL:=FALSE;
				(*engine running*)
			IXengExhBrakeAct AT %IX2.93.4: BOOL:=FALSE;
				(*not used (engine exhaus brake active)*)
			IXengStarterBloc AT %IX2.93.5: BOOL:=FALSE;
				(*not used (engine starter blocked)*)
			IXengPowerRedTem AT %IX2.93.7: BOOL:=FALSE;
				(*engine power reduction, high temperatures, fuel pressure regulation*)
			IXengPowerRedHig AT %IX2.93.8: BOOL:=FALSE;
				(*engine power reduction, high altitude*)
			IXengPreheatActi AT %IX2.93.9: BOOL:=FALSE;
				(*engine preheat system active*)
			IXengPreheatStar AT %IX2.93.10: BOOL:=FALSE;
				(*engine preheat system ready for engine start*)
			IXengPostheatAct AT %IX2.93.11: BOOL:=FALSE;
				(*engine preheat system active at running engine*)
			IXengDemSpeMinOk AT %IX2.93.15: BOOL:=FALSE;
				(*engine module sends minimum engine speed on demand*)
			IXengDemSpeMaxOk AT %IX2.93.16: BOOL:=FALSE;
				(*engine module sends maximum engine speed on demand*)
			IXengCooWatTempW AT %IX2.93.17: BOOL:=FALSE;
				(*engine cooling water temperature warning*)
			IXengCooWatTempE AT %IX2.93.18: BOOL:=FALSE;
				(*engine cooling water temperature error*)
			IXengChaAirTempW AT %IX2.93.19: BOOL:=FALSE;
				(*engine charge air temperature warning*)
			IXengChaAirTempE AT %IX2.93.20: BOOL:=FALSE;
				(*engine charge air temperature error*)
			IXengFuelTempW AT %IX2.93.21: BOOL:=FALSE;
				(*engine fuel temperature warning*)
			IXengFuelTempE AT %IX2.93.22: BOOL:=FALSE;
				(*engine fuel temperature error*)
			IXengWaterInFuel AT %IX2.93.23: BOOL:=FALSE;
				(*engine water in fuel filter*)
			IXhydrOilTempW AT %IX2.93.25: BOOL:=FALSE;
				(*not used (engine hydraulic oil temperature warning)*)
			IXhydrOilTempE AT %IX2.93.26: BOOL:=FALSE;
				(*not used (hydraulic oil temperature error)*)
			IXengLubOilPresW AT %IX2.93.27: BOOL:=FALSE;
				(*engine lub oil pressure warning*)
			IXengLubOilPresE AT %IX2.93.28: BOOL:=FALSE;
				(*engine lub oil pressure error*)
			IXengFuelPressWa AT %IX2.93.29: BOOL:=FALSE;
				(*engine fuel pressure warning (low or high)*)
			IXengFuelPressEr AT %IX2.93.30: BOOL:=FALSE;
				(*engine fuel pressure error (low or high)*)
			IXengAirFilterW AT %IX2.93.31: BOOL:=FALSE;
				(*engine air filter pressure low warning*)
			IXengAirFilterE AT %IX2.93.32: BOOL:=FALSE;
				(*engine air filter pressure low error*)
			IXengFuelPresRaW AT %IX2.93.33: BOOL:=FALSE;
				(*engine fuel pressure warning rail 1 or 2*)
			IXengFuelPresRaE AT %IX2.93.34: BOOL:=FALSE;
				(*engine fuel pressure error rail 1 or 2*)
			IXengCoolWatConW AT %IX2.93.35: BOOL:=FALSE;
				(*engine cooling water content warning*)
			IXengCoolWatConE AT %IX2.93.36: BOOL:=FALSE;
				(*engine cooling water content error*)
			IXengPvgTempW AT %IX2.93.37: BOOL:=FALSE;
				(*not used (engine PVG temperature warning)*)
			IXengPvgTempE AT %IX2.93.38: BOOL:=FALSE;
				(*not used (engine PVG temperature error)*)
			IXengLubOilCoHiE AT %IX2.93.39: BOOL:=FALSE;
				(*engine lub oil content high error*)
			IXengLubOilCoLoE AT %IX2.93.40: BOOL:=FALSE;
				(*engine lub oil content low error*)
			IXengSpeedHighW AT %IX2.93.41: BOOL:=FALSE;
				(*engine engine speed high warning*)
			IXengSpeedHighE AT %IX2.93.42: BOOL:=FALSE;
				(*engine engine speed high error*)
			IXengLubOilCoAct AT %IX2.93.43: BOOL:=FALSE;
				(*engine lub oil content function active*)
			IXengEmergenStop AT %IX2.93.49: BOOL:=FALSE;
				(*engine module emergency engine stop*)
			IXengRequireStop AT %IX2.93.50: BOOL:=FALSE;
				(*engine module requires engine stop*)
			IXengRequireRepa AT %IX2.93.51: BOOL:=FALSE;
				(*engine module requires reparation*)
			IXengAsynchError AT %IX2.93.52: BOOL:=FALSE;
				(*engine module is sending asynchron error*)
			IXengAgnMilWarn AT %IX2.93.53: BOOL:=FALSE;
				(*engine exhuast aftertreatment warning (MIL)*)
			IXengAgnMilError AT %IX2.93.54: BOOL:=FALSE;
				(*engine exhuast aftertreatment error (MIL)*)
			IWengAgnHighExhT AT %IW2.94.3: INT:=0;
				(*engine exhuast aftertreatment high exhaust temperature*)
			IWengDefWarn AT %IW2.94.4: INT:=0;
				(*engine DEF content warning*)
			IWengDefError AT %IW2.94.5: INT:=0;
				(*engine DEF content error*)
			IWengDpfServReq AT %IW2.94.6: INT:=0;
				(*engine DPF service request*)
			IWengAgnMode AT %IW2.94.9: INT:=0;
				(*engine exhaust aftertreatment mode*)
			IWengAgnDpfGrade AT %IW2.94.10: INT:=0;
				(*engine DPF grade*)
			IWengDpfMinSpeed AT %IW2.94.11: INT:=0;
				(*RESERVE engine DPF minimum engine speed [rpm]*)
			IWengDpfMinTorqu AT %IW2.94.12: INT:=0;
				(*engine DPF minimum engine torque [Nm]*)
			IWengDpfRemTime AT %IW2.94.13: INT:=0;
				(*engine DPF remaining time [min]*)
			IWengDefCont AT %IW2.94.14: INT:=0;
				(*engine DEF content [1/10%]*)
			IWrightJoystAna1 AT %IW1.66.1: INT:=0;
				(*right joystick analog signal 1*)
			IWrightJoystAna2 AT %IW1.66.2: INT:=0;
				(*right joystick analog signal 2*)
			IWrightJoystThum AT %IW1.66.3: INT:=0;
				(*right joystick analog signal thumb wheel*)
			IWfootpEngSpeed AT %IW1.66.4: INT:=0;
				(*footpedal engine speed*)
			IWleftJoystAnal1 AT %IW1.68.1: INT:=0;
				(*left joystick analog signal 1*)
			IWleftJoystAnal2 AT %IW1.68.2: INT:=0;
				(*left joystick analog signal 2*)
			IWleftJoystThum AT %IW1.68.3: INT:=0;
				(*left joystick analog signal thumb wheel*)
			IWfootpStabWinch AT %IW1.68.4: INT:=0;
				(*footpedal stabilization winch*)
			IWkeybX23Poti1 AT %IW1.97.1: UINT:=0;
				(*keyboard X23 poti 1*)
			IWkeybX23Poti2 AT %IW1.97.2: UINT:=0;
				(*keyboard X23 poti 2*)
			IWkeybX25Poti1 AT %IW1.99.1: UINT:=0;
				(*keyboard X25 poti 1*)
			IWkeybX25Poti2 AT %IW1.99.2: UINT:=0;
				(*keyboard X25 poti 2*)
			IWkeybX25Poti3 AT %IW1.99.3: UINT:=0;
				(*keyboard X25 poti 3*)
			IWkeybX25Poti4 AT %IW1.99.4: UINT:=0;
				(*keyboard X25 poti 4*)
			IWfuelTankCont AT %IW2.41.1: UINT:=0;
				(*content Dieseltank*)
			IWhg1SystemPress AT %IW2.41.2: UINT:=0;
				(*system pressure HG 1*)
			IWhg2SystemPress AT %IW2.41.3: UINT:=0;
				(*system pressure HG 2*)
			IWsgSystemPreRi1 AT %IW2.41.4: UINT:=0;
				(*system pressure right 1 SG*)
			IWsgSystemPreLe1 AT %IW2.41.5: UINT:=0;
				(*system pressure left 1 SG*)
			IWadHg1BrakePres AT %IW2.41.6: UINT:=0;
				(*additional device lowering control HG 1 brake pressure*)
			IWadHg2BrakePres AT %IW2.41.7: UINT:=0;
				(*additional device lowering control HG 2 brake pressure*)
			IWloadSenLeBoom AT %IW2.41.8: UINT:=0;
				(*lml main boom left force transmitter/pr.sensor piston-side *)
			IWangSenLowBoom AT %IW2.41.9: UINT:=0;
				(*lml lower angle transmitter main boom*)
			IWloadSenLeLuJib AT %IW2.41.10: UINT:=0;
				(*lml left force transmitter luffing jib*)
			IWangSenLoLufJib AT %IW2.41.11: UINT:=0;
				(*lml lower angle transmitter luffing jib / ad angle sliding table hanging leader*)
			IWslideTableAnge AT %IW2.41.11: UINT:=0;
				(*lml lower angle transmitter luffing jib / ad angle sliding table hanging leader*)
			IWhydrTankCont AT %IW2.41.12: UINT:=0;
				(*hydraulic tank content*)
			IWljPres1FalBack AT %IW2.41.13: UINT:=0;
				(*additional device lml pressure sensor 1 luffing jib fall back support*)
			IWadHyLudv1Press AT %IW2.41.15: UINT:=0;
				(*add hydraulics ludv pump 1 pressure*)
			IWadHyLudv2Press AT %IW2.41.16: UINT:=0;
				(*add hydraulics ludv pump 2 pressure*)
			IWsgSystemPreRi2 AT %IW2.42.1: UINT:=0;
				(*system pressure right 2 SG*)
			IWsgSystemPreLe2 AT %IW2.42.2: UINT:=0;
				(*system pressure left 2 SG*)
			IWloadSenRiBoom AT %IW2.42.3: UINT:=0;
				(*lml main boom right force transmitter/pr.sensor ring-side *)
			IWangSenTopBoom AT %IW2.42.4: UINT:=0;
				(*lml upper angle transmitter main boom*)
			IWloadSenRiLuJib AT %IW2.42.5: UINT:=0;
				(*lml right force transmitter luffing jib*)
			IWangSenToLufJib AT %IW2.42.6: UINT:=0;
				(*lml upper angle transmitter luffing jib*)
			IWadWindSpedSen2 AT %IW2.42.7: UINT:=0;
				(*wind speed luffing jib/leader incl. x-axis/grab incl. x-axis *)
			IWleadAngleX AT %IW2.42.7: UINT:=0;
				(*wind speed luffing jib/leader incl. x-axis/grab incl. x-axis *)
			IWgrabInclX_axis AT %IW2.42.7: UINT:=0;
				(*wind speed luffing jib/leader incl. x-axis/grab incl. x-axis *)
			IWljPres2FalBack AT %IW2.42.8: UINT:=0;
				(*press. 2 luff. jib fall back supp/leader incl. y-axis/grab incl. y-axis*)
			IWleadAngleY AT %IW2.42.8: UINT:=0;
				(*press. 2 luff. jib fall back supp/leader incl. y-axis/grab incl. y-axis*)
			IWgrabInclY_axis AT %IW2.42.8: UINT:=0;
				(*press. 2 luff. jib fall back supp/leader incl. y-axis/grab incl. y-axis*)
			IWvibSysPressDir AT %IW2.42.9: UINT:=0;
				(*system pressure vibrator/hammer pump direct*)
			IWhamSysPressDir AT %IW2.42.9: UINT:=0;
				(*system pressure vibrator/hammer pump direct*)
			IWadWindSpedSen1 AT %IW2.42.10: UINT:=0;
				(*additional device wind speed sensor main boom*)
			IWsgAngle AT %IW2.42.11: UINT:=0;
				(*ad sg limitation angle sensor*)
			IWvibSysPresP1 AT %IW2.42.12: UINT:=0;
				(*P1 sys.press.vibrator/hammer/hydr.grab*)
			IWhamSysPresP1 AT %IW2.42.12: UINT:=0;
				(*P1 sys.press.vibrator/hammer/hydr.grab*)
			IWgrabSysPresP1 AT %IW2.42.12: UINT:=0;
				(*P1 sys.press.vibrator/hammer/hydr.grab*)
			IWvibSysPresP2 AT %IW2.42.13: UINT:=0;
				(*P2 sys.press.vibrator/hammer/hydr.grab/drill*)
			IWhamSysPresP2 AT %IW2.42.13: UINT:=0;
				(*P2 sys.press.vibrator/hammer/hydr.grab/drill*)
			IWgrabSysPresP2 AT %IW2.42.13: UINT:=0;
				(*P2 sys.press.vibrator/hammer/hydr.grab/drill*)
			IWddSysPresP2 AT %IW2.42.13: UINT:=0;
				(*P2 sys.press.vibrator/hammer/hydr.grab/drill*)
			IWsuperstAngSenX AT %IW2.43.1: UINT:=0;
				(*superstructure angle sensor X*)
			IWsuperstAngSenY AT %IW2.43.2: UINT:=0;
				(*superstructure angle sensor Y*)
			IWclampSysPress AT %IW2.43.9: UINT:=0;
				(*add. system pressure clamping jaw vibrator*)
			IWhamExtSignal AT %IW2.43.11: UINT:=0;
				(*ext. hammer signal*)
			IWvibAdFrequency AT %IW2.43.12: UINT:=0;
				(*vibrator add. device frequency sensor *)
			IWvibAdAmplitude AT %IW2.43.13: UINT:=0;
				(*vibrator add. device amplitude sensor*)
			IWmeasurInput1 AT %IW2.48.1: UINT:=0;
				(*measuring input 1 (4-20mA)*)
			IWmeasurInput2 AT %IW2.48.2: UINT:=0;
				(*measuring input 2 (4-20mA)*)
			IWmeasurInput3 AT %IW2.48.3: UINT:=0;
				(*measuring input 3 (4-20mA)*)
			IWmeasurInput4 AT %IW2.48.4: UINT:=0;
				(*measuring input 4 (4-20mA)*)
			IWmeasurInput5 AT %IW2.48.5: UINT:=0;
				(*measuring input 5 (4-20mA)*)
			IWmeasurInput6 AT %IW2.48.6: UINT:=0;
				(*measuring input 6 (4-20mA)*)
			IWmeasurInput7 AT %IW2.48.7: UINT:=0;
				(*measuring input 7 (4-20mA)*)
			IWmeasurInput8 AT %IW2.48.8: UINT:=0;
				(*measuring input 8 (4-20mA)*)
			IWmeasurInput9 AT %IW2.48.9: UINT:=0;
				(*measuring input 9 (4-20mA)*)
			IWmeasurInput10 AT %IW2.48.10: UINT:=0;
				(*measuring input 10 (4-20mA)*)
			IWmeasurInput11 AT %IW2.48.11: UINT:=0;
				(*measuring input 11 (4-20mA)*)
			IWmeasurInput12 AT %IW2.48.12: UINT:=0;
				(*measuring input 12 (4-20mA)*)
			IWmeasurInput13 AT %IW2.48.13: UINT:=0;
				(*measuring input 13 (0-20mA)*)
			IWmeasurInput14 AT %IW2.48.14: UINT:=0;
				(*measuring input 14 (0-20mA)*)
			IWmeasurInput15 AT %IW2.48.15: UINT:=0;
				(*measuring input 15 (0-20mA)*)
			IWmeasurInput16 AT %IW2.48.16: UINT:=0;
				(*measuring input 16 (0-20mA)*)
			IDadCounterHg1 AT %ID2.49.1: DINT:=0;
				(*additional counter rope lenght hg1*)
			IDadCounterHg2 AT %ID2.49.2: DINT:=0;
				(*additional counter rope lenght hg2*)
			IDcounterHg1 AT %ID2.57.1: DINT:=0;
				(*counter rope lenght hg1*)
			IDcounterHg2 AT %ID2.57.3: DINT:=0;
				(*counter rope lenght hg2*)
			IDsgCounter AT %ID2.57.7: DINT:=0;
				(*counter slewing gear*)
			IDddCounter AT %ID2.58.1: DINT:=0;
				(*counter drilling drive*)
			IWengActSpeed AT %IW2.92.1: INT:=0;
				(*engine actual speed [rpm]*)
			IWengActTorque AT %IW2.92.2: INT:=0;
				(*engine actual torque [1/10 %]*)
			IWengMaxTorque AT %IW2.92.3: INT:=0;
				(*engine actual maximum torque [Nm]*)
			IWengDrivePedal AT %IW2.92.4: INT:=0;
				(*not used (engine drive pedal)*)
			IWengBattVoltage AT %IW2.92.5: INT:=0;
				(*engine battery voltage [1/5 V]*)
			IWengChaAirTemp AT %IW2.92.6: INT:=0;
				(*engine charge air temperature [°C]*)
			IWengCoolWatTemp AT %IW2.92.7: INT:=0;
				(*engine cooling water temperature [°C]*)
			IWhyrdOilTemp AT %IW2.92.8: INT:=0;
				(*engine hydraulic oil temperature [°C]*)
			IWengLubOilPress AT %IW2.92.9: INT:=0;
				(*engine lub oil pressure [1/100 bar]*)
			IWengChaAirPress AT %IW2.92.10: INT:=0;
				(*engine charge air pressure [1/100 bar]*)
			IWengFuelConsump AT %IW2.92.11: INT:=0;
				(*engine fuel consumption [µ liter, since last scan ]*)
			IWengLubOilCont AT %IW2.92.12: INT:=0;
				(*engine lub oil content [%]*)
			IWengOutdoorTemp AT %IW2.92.13: INT:=0;
				(*engine outdoor temperature [°C]*)
			QTXsgMomReg AT %QX1.73.1: BOOL:=FALSE;
				(*enable slewing gear moment regulator*)
			QTXsgSpeedLevel AT %QX1.73.2: BOOL:=FALSE;
				(*enable slewing gear speed level*)
			QTXlgSpeedLevel AT %QX1.73.3: BOOL:=FALSE;
				(*enable luffing gear speed level*)
			QTXaddVolCtrl AT %QX1.73.6: BOOL:=FALSE;
				(*enable additional hydraulic volume control *)
			QTXfreefallOper AT %QX1.73.7: BOOL:=FALSE;
				(*enable freefall operation *)
			QTXhg1FastSpeed AT %QX1.73.8: BOOL:=FALSE;
				(*enable hg1 fast speed operation *)
			QTXhg2FastSpeed AT %QX1.73.9: BOOL:=FALSE;
				(*enable hg2 fast speed operation *)
			QTXwinStopValue AT %QX1.73.12: BOOL:=FALSE;
				(*enable winch pre stop value*)
			QTXgrabCtrl AT %QX1.73.13: BOOL:=FALSE;
				(*enable grab control/winch synchronisation*)
			QTXwinchSynch AT %QX1.73.13: BOOL:=FALSE;
				(*enable grab control/winch synchronisation*)
			QTXspecLiftOp AT %QX1.73.14: BOOL:=FALSE;
				(*enable special lift operation *)
			QTXaddPowCtrl AT %QX1.73.18: BOOL:=FALSE;
				(*enable additional hydraulic power control *)
			QTXlg2Winch AT %QX1.73.19: BOOL:=FALSE;
				(*enable lg2 (auxiliary) winch *)
			QTXaddWinch AT %QX1.73.20: BOOL:=FALSE;
				(*enable additional/passenger winch *)
			QTXpassWinch AT %QX1.73.20: BOOL:=FALSE;
				(*enable additional/passenger winch *)
			QTXderrWinch AT %QX1.73.21: BOOL:=FALSE;
				(*enable derrick winch *)
			QTXslackRopValue AT %QX1.73.24: BOOL:=FALSE;
				(*enable slack rope value*)
			QTXstabWinchUp AT %QX1.73.25: BOOL:=FALSE;
				(*enable stabilization winch on (up) *)
			QTXstabWinchDn AT %QX1.73.26: BOOL:=FALSE;
				(*enable stabilization winch down*)
			QTXrcChangeCtrl AT %QX1.73.28: BOOL:=FALSE;
				(*enable change remote control *)
			QTXpaFilterReg AT %QX1.73.29: BOOL:=FALSE;
				(*enable particulate filter regeneration*)
			QTXengReqStop AT %QX1.73.30: BOOL:=FALSE;
				(*enable requested engine stop *)
			QTXaddHydr AT %QX1.73.31: BOOL:=FALSE;
				(*enable additional hydraulic (oscillator) *)
			QTXmagUnitGen AT %QX1.73.32: BOOL:=FALSE;
				(*enable magnetic unit generator/add. oil supply  *)
			QTXaddOilSupply AT %QX1.73.32: BOOL:=FALSE;
				(*enable magnetic unit generator/add. oil supply  *)
			QTXhammer AT %QX1.73.37: BOOL:=FALSE;
				(*enable hammer/vibrator on*)
			QTXvibrator AT %QX1.73.37: BOOL:=FALSE;
				(*enable hammer/vibrator on*)
			QTXclampClose AT %QX1.73.38: BOOL:=FALSE;
				(*enable clamping jaw close*)
			QTXexDriveOut AT %QX1.73.39: BOOL:=FALSE;
				(*enable excenter drive out*)
			QTXaFrameCylOut AT %QX1.73.41: BOOL:=FALSE;
				(*enable a frame cylinder out (rising)*)
			QTXcylOpera AT %QX1.73.42: BOOL:=FALSE;
				(*enable cylinder operation*)
			QTXclampOpen AT %QX1.73.44: BOOL:=FALSE;
				(*enable clamping jaw open*)
			QTXexDriveIn AT %QX1.73.45: BOOL:=FALSE;
				(*enable excenter drive in*)
			QTXaFrameCylIn AT %QX1.73.47: BOOL:=FALSE;
				(*enable a frame cylinder in (lowering)*)
			QTXhoistCyl AT %QX1.73.48: BOOL:=FALSE;
				(*enable hoisting cylinder*)
			QTXlimSwBridged AT %QX1.73.49: BOOL:=FALSE;
				(*enable limit switch bridged*)
			QTXlmlBridged AT %QX1.73.50: BOOL:=FALSE;
				(*enable lml bridged*)
			QTXkeybX23Res1 AT %QX1.73.55: BOOL:=FALSE;
				(*keyboard X23 reserve 1*)
			QTXkeybX23BLight AT %QX1.73.56: BOOL:=FALSE;
				(*keyboard X23 backlight on/off (0=on; 1= off) *)
			QTXautoHoseWinch AT %QX1.74.1: BOOL:=FALSE;
				(*enable automatic hose winch *)
			QTXgrabAutoMiddl AT %QX1.74.2: BOOL:=FALSE;
				(*enable grab automatic middle position*)
			QTXkeybX22Led3 AT %QX1.74.3: BOOL:=FALSE;
				(*keyboard X22 LED 3*)
			QTXkeybX22Led4 AT %QX1.74.4: BOOL:=FALSE;
				(*keyboard X22 LED 4*)
			QTXkeybX22Led5 AT %QX1.74.5: BOOL:=FALSE;
				(*keyboard X22 LED 5*)
			QTXkeybX22Led6 AT %QX1.74.6: BOOL:=FALSE;
				(*keyboard X22 LED 6*)
			QTXkeybX22Led7 AT %QX1.74.7: BOOL:=FALSE;
				(*keyboard X22 LED 7*)
			QTXkeybX22Led8 AT %QX1.74.8: BOOL:=FALSE;
				(*keyboard X22 LED 8*)
			QTXkeybX22Led9 AT %QX1.74.9: BOOL:=FALSE;
				(*keyboard X22 LED 9*)
			QTXkeybX22Led10 AT %QX1.74.10: BOOL:=FALSE;
				(*keyboard X22 LED 10*)
			QTXkeybX22Led11 AT %QX1.74.11: BOOL:=FALSE;
				(*keyboard X22 LED 11*)
			QTXkeybX22Led12 AT %QX1.74.12: BOOL:=FALSE;
				(*keyboard X22 LED 12*)
			QTXleHoseWinchUp AT %QX1.74.13: BOOL:=FALSE;
				(*preselection left hose winch up*)
			QTXriHoseWinchUp AT %QX1.74.14: BOOL:=FALSE;
				(*preselection right hose winch up*)
			QTXcableWinchUp AT %QX1.74.15: BOOL:=FALSE;
				(*preselection cable winch up*)
			QTXkeybX22Led16 AT %QX1.74.16: BOOL:=FALSE;
				(*keyboard X22 LED 16*)
			QTXkeybX22Led17 AT %QX1.74.17: BOOL:=FALSE;
				(*keyboard X22 LED 17*)
			QTXkeybX22Led18 AT %QX1.74.18: BOOL:=FALSE;
				(*keyboard X22 LED 18*)
			QTXleHoseWinchDn AT %QX1.74.19: BOOL:=FALSE;
				(*preselection left hose winch down*)
			QTXriHoseWinchDn AT %QX1.74.20: BOOL:=FALSE;
				(*preselection right hose winch down*)
			QTXcableWinchDn AT %QX1.74.21: BOOL:=FALSE;
				(*preselection cable winch down*)
			QTXkeybX22Led22 AT %QX1.74.22: BOOL:=FALSE;
				(*keyboard X22 LED 22*)
			QTXkeybX22Led23 AT %QX1.74.23: BOOL:=FALSE;
				(*keyboard X22 LED 23*)
			QTXkeybX22Led24 AT %QX1.74.24: BOOL:=FALSE;
				(*keyboard X22 LED 24*)
			QTXgrabAdj1Out AT %QX1.74.25: BOOL:=FALSE;
				(*enable grab adjustment 1 out*)
			QTXgrabAdj2Out AT %QX1.74.26: BOOL:=FALSE;
				(*enable grab adjustment 2 out*)
			QTXkeybX22Led27 AT %QX1.74.27: BOOL:=FALSE;
				(*keyboard X22 LED 27*)
			QTXkeybX22Led28 AT %QX1.74.28: BOOL:=FALSE;
				(*keyboard X22 LED 28*)
			QTXkeybX22Led29 AT %QX1.74.29: BOOL:=FALSE;
				(*keyboard X22 LED 29*)
			QTXkeybX22Led30 AT %QX1.74.30: BOOL:=FALSE;
				(*keyboard X22 LED 30*)
			QTXgrabAdj1In AT %QX1.74.31: BOOL:=FALSE;
				(*enable grab adjustment 1 In*)
			QTXgrabAdj2In AT %QX1.74.32: BOOL:=FALSE;
				(*enable grab adjustment 2 In*)
			QTXkeybX22Led33 AT %QX1.74.33: BOOL:=FALSE;
				(*keyboard X22 LED 33*)
			QTXkeybX22Led34 AT %QX1.74.34: BOOL:=FALSE;
				(*keyboard X22 LED 34*)
			QTXkeybX22Led35 AT %QX1.74.35: BOOL:=FALSE;
				(*keyboard X22 LED 35*)
			QTXkeybX22Led36 AT %QX1.74.36: BOOL:=FALSE;
				(*keyboard X22 LED 36*)
			QTXkeybX22Led37 AT %QX1.74.37: BOOL:=FALSE;
				(*keyboard X22 LED 37*)
			QTXkeybX22Led38 AT %QX1.74.38: BOOL:=FALSE;
				(*keyboard X22 LED 38*)
			QTXkeybX22Led39 AT %QX1.74.39: BOOL:=FALSE;
				(*keyboard X22 LED 39*)
			QTXkeybX22Led40 AT %QX1.74.40: BOOL:=FALSE;
				(*keyboard X22 LED 40*)
			QTXkeybX22Led41 AT %QX1.74.41: BOOL:=FALSE;
				(*keyboard X22 LED 41*)
			QTXkeybX22Led42 AT %QX1.74.42: BOOL:=FALSE;
				(*keyboard X22 LED 42*)
			QTXkeybX22Led43 AT %QX1.74.43: BOOL:=FALSE;
				(*keyboard X22 LED 43*)
			QTXkeybX22Led44 AT %QX1.74.44: BOOL:=FALSE;
				(*keyboard X22 LED 44*)
			QTXkeybX22Led45 AT %QX1.74.45: BOOL:=FALSE;
				(*keyboard X22 LED 45*)
			QTXkeybX22Led46 AT %QX1.74.46: BOOL:=FALSE;
				(*keyboard X22 LED 46*)
			QTXkeybX22Led47 AT %QX1.74.47: BOOL:=FALSE;
				(*keyboard X22 LED 47*)
			QTXkeybX22Led48 AT %QX1.74.48: BOOL:=FALSE;
				(*keyboard X22 LED 48*)
			QTXkeybX22Led49 AT %QX1.74.49: BOOL:=FALSE;
				(*keyboard X22 LED 49*)
			QTXkeybX22Led50 AT %QX1.74.50: BOOL:=FALSE;
				(*keyboard X22 LED 50*)
			QTXkeybX22Led51 AT %QX1.74.51: BOOL:=FALSE;
				(*keyboard X22 LED 51*)
			QTXkeybX22Led52 AT %QX1.74.52: BOOL:=FALSE;
				(*keyboard X22 LED 52*)
			QTXkeybX22Led53 AT %QX1.74.53: BOOL:=FALSE;
				(*keyboard X22 LED 53*)
			QTXkeybX22Led54 AT %QX1.74.54: BOOL:=FALSE;
				(*keyboard X22 LED 54*)
			QTXkeybX22Res1 AT %QX1.74.55: BOOL:=FALSE;
				(*keyboard X22 reserve 1*)
			QTXkeybX22BLight AT %QX1.74.56: BOOL:=FALSE;
				(*keyboard X22 backlight on/off (0=on; 1= off) *)
			QTXx25LeCursLeDn AT %QX1.75.1: BOOL:=FALSE;
				(*keyboard X25 left cursor, left/down*)
			QTXkeybX25Led2 AT %QX1.75.2: BOOL:=FALSE;
				(*keyboard X25 LED 2*)
			QTXx25LeCursRiUp AT %QX1.75.3: BOOL:=FALSE;
				(*keyboard X25 left cursor,  right/up *)
			QTXkeybX25Led4 AT %QX1.75.4: BOOL:=FALSE;
				(*keyboard X25 LED 4*)
			QTXkeybX25Led5 AT %QX1.75.5: BOOL:=FALSE;
				(*keyboard X25 LED 5*)
			QTXmoorPressCtrl AT %QX1.75.6: BOOL:=FALSE;
				(*enable mooring pressure control *)
			QTXkeybX25Led7 AT %QX1.75.7: BOOL:=FALSE;
				(*keyboard X25 LED 7*)
			QTXkeybX25Led8 AT %QX1.75.8: BOOL:=FALSE;
				(*keyboard X25 LED 8*)
			QTXleadHiAdWinch AT %QX1.75.9: BOOL:=FALSE;
				(*enable leader hight adjustment winch *)
			QTXkeybX25Led10 AT %QX1.75.10: BOOL:=FALSE;
				(*keyboard X25 LED 10*)
			QTXkeybX25Led11 AT %QX1.75.11: BOOL:=FALSE;
				(*keyboard X25 LED 11*)
			QTXkeybX25Led12 AT %QX1.75.12: BOOL:=FALSE;
				(*keyboard X25 LED 12*)
			QTXkeybX25Led13 AT %QX1.75.13: BOOL:=FALSE;
				(*keyboard X25 LED 13*)
			QTXz17leadFun AT %QX1.75.14: BOOL:=FALSE;
				(*enable Z17 leader function *)
			QTXz6leadFun AT %QX1.75.15: BOOL:=FALSE;
				(*enable Z6 leader function*)
			QTXkeybX25Led16 AT %QX1.75.16: BOOL:=FALSE;
				(*keyboard X25 LED 16*)
			QTXkeybX25Led17 AT %QX1.75.17: BOOL:=FALSE;
				(*keyboard X25 LED 17*)
			QTXmoorSpeedCtrl AT %QX1.75.18: BOOL:=FALSE;
				(*enable mooring speed control *)
			QTXleadMooring AT %QX1.75.19: BOOL:=FALSE;
				(*enable leader mooring*)
			QTXz3leadFun AT %QX1.75.20: BOOL:=FALSE;
				(*enable Z3 leader function*)
			QTXkeybX25Led21 AT %QX1.75.21: BOOL:=FALSE;
				(*keyboard X25 LED 21*)
			QTXkeybX25Led22 AT %QX1.75.22: BOOL:=FALSE;
				(*keyboard X25 LED 22*)
			QTXkeybX25Led23 AT %QX1.75.23: BOOL:=FALSE;
				(*keyboard X25 LED 23*)
			QTXkeybX25Led24 AT %QX1.75.24: BOOL:=FALSE;
				(*keyboard X25 LED 24*)
			QTXleadAutoInc AT %QX1.75.25: BOOL:=FALSE;
				(*enable leader automatic inclination *)
			QTXkeybX25Led26 AT %QX1.75.26: BOOL:=FALSE;
				(*keyboard X25 LED 26*)
			QTXkeybX25Led27 AT %QX1.75.27: BOOL:=FALSE;
				(*keyboard X25 LED 27*)
			QTXkeybX25Led28 AT %QX1.75.28: BOOL:=FALSE;
				(*keyboard X25 LED 28*)
			QTXkeybX25Led29 AT %QX1.75.29: BOOL:=FALSE;
				(*keyboard X25 LED 29*)
			QTXkeybX25Led30 AT %QX1.75.30: BOOL:=FALSE;
				(*keyboard X25 LED 30*)
			QTXkeybX25Led31 AT %QX1.75.31: BOOL:=FALSE;
				(*keyboard X25 LED 31*)
			QTXkeybX25Led32 AT %QX1.75.32: BOOL:=FALSE;
				(*keyboard X25 LED 32*)
			QTXz4leadFun AT %QX1.75.33: BOOL:=FALSE;
				(*enable Z4 leader function*)
			QTXkeybX25Led34 AT %QX1.75.34: BOOL:=FALSE;
				(*keyboard X25 LED 34*)
			QTXkeybX25Led35 AT %QX1.75.35: BOOL:=FALSE;
				(*keyboard X25 LED 35*)
			QTXkeybX25Led36 AT %QX1.75.36: BOOL:=FALSE;
				(*keyboard X25 LED 36*)
			QTXkeybX25Led37 AT %QX1.75.37: BOOL:=FALSE;
				(*keyboard X25 LED 37*)
			QTXpileGuideFun AT %QX1.75.38: BOOL:=FALSE;
				(*enable pile guide leader function*)
			QTXz2leadFun AT %QX1.75.39: BOOL:=FALSE;
				(*enable Z2 leader function*)
			QTXkeybX25Led40 AT %QX1.75.40: BOOL:=FALSE;
				(*keyboard X25 LED 40*)
			QTXkeybX25Led41 AT %QX1.75.41: BOOL:=FALSE;
				(*keyboard X25 LED 41*)
			QTXkeybX25Led42 AT %QX1.75.42: BOOL:=FALSE;
				(*keyboard X25 LED 42*)
			QTXkeybX25Led43 AT %QX1.75.43: BOOL:=FALSE;
				(*keyboard X25 LED 43*)
			QTXkeybX25Led44 AT %QX1.75.44: BOOL:=FALSE;
				(*keyboard X25 LED 44*)
			QTXkeybX25Led45 AT %QX1.75.45: BOOL:=FALSE;
				(*keyboard X25 LED 45*)
			QTXkeybX25Led46 AT %QX1.75.46: BOOL:=FALSE;
				(*keyboard X25 LED 46*)
			QTXkeybX25Led47 AT %QX1.75.47: BOOL:=FALSE;
				(*keyboard X25 LED 47*)
			QTXkeybX25Led48 AT %QX1.75.48: BOOL:=FALSE;
				(*keyboard X25 LED 48*)
			QTXx25RiCursClDn AT %QX1.75.49: BOOL:=FALSE;
				(*keyboard X25 right cursor, close/down*)
			QTXkeybX25Led50 AT %QX1.75.50: BOOL:=FALSE;
				(*keyboard X25 LED 50*)
			QTXx25RiCursOpUp AT %QX1.75.51: BOOL:=FALSE;
				(*keyboard X25 right cursor, open/up*)
			QTXkeybX25Led52 AT %QX1.75.52: BOOL:=FALSE;
				(*keyboard X25 LED 52*)
			QTXkeybX25Led53 AT %QX1.75.53: BOOL:=FALSE;
				(*keyboard X25 LED 53*)
			QTXkeybX25Led54 AT %QX1.75.54: BOOL:=FALSE;
				(*keyboard X25 LED 54*)
			QTXkeybX25Res1 AT %QX1.75.55: BOOL:=FALSE;
				(*keyboard X25 reserve 1*)
			QTXkeybX25BLight AT %QX1.75.56: BOOL:=FALSE;
				(*keyboard X25 backlight on/off (0=on; 1= off) *)
			QXrcCraneSelBit1 AT %QX1.109.1: BOOL:=FALSE;
				(*remote control crane select bit 1*)
			QXrcCraneSelBit2 AT %QX1.109.2: BOOL:=FALSE;
				(*remote control crane select bit 2*)
			QXrcCraneSelBit3 AT %QX1.109.3: BOOL:=FALSE;
				(*remote control crane select bit 3*)
			QXrcCraneSelBit4 AT %QX1.109.4: BOOL:=FALSE;
				(*remote control crane select bit 4*)
			QXrcBuzzerType1 AT %QX1.109.5: BOOL:=FALSE;
				(*remote control buzzer type 1*)
			QXrcBuzzerType2 AT %QX1.109.6: BOOL:=FALSE;
				(*remote control buzzer type 2*)
			QXrcBuzzerType3 AT %QX1.109.7: BOOL:=FALSE;
				(*remote control buzzer type 3*)
			QXrcBuzzerType4 AT %QX1.109.8: BOOL:=FALSE;
				(*remote control buzzer type 4*)
			QXrcWindSpeed AT %QX1.109.10: BOOL:=FALSE;
				(*remote control symbol wind speed*)
			QXrcEngineRunnin AT %QX1.109.12: BOOL:=FALSE;
				(*remote control symbol engine running*)
			QXrcArrowSymUp AT %QX1.109.13: BOOL:=FALSE;
				(*remote control symbol arrow up*)
			QXrcArrowSymDown AT %QX1.109.14: BOOL:=FALSE;
				(*remote control symbol arrow down*)
			QXrcArrowSymLeft AT %QX1.109.15: BOOL:=FALSE;
				(*remote control symbol arrow left*)
			QXrcArrowSymRigh AT %QX1.109.16: BOOL:=FALSE;
				(*remote control symbol arrow right*)
			QXrcStopSymbol AT %QX1.109.26: BOOL:=FALSE;
				(*remote control symbol STOP*)
			QXrcUtilBackward AT %QX1.109.27: BOOL:=FALSE;
				(*remote control utilization backwards bar*)
			QWriJoyAna1Vibr AT %QW1.66.1: INT:=0;
				(*right joystick analog signal vibrator 1*)
			QWriJoyAna2Vibr AT %QW1.66.2: INT:=0;
				(*right joystick analog signal vibrator 2*)
			QWleJoyAna1Vibr AT %QW1.68.1: INT:=0;
				(*left joystick analog signal vibrator 1*)
			QWleJoyAna2Vibr AT %QW1.68.2: INT:=0;
				(*left joystick analog signal vibrator 2*)
			QDimmoOutput1 AT %QD1.107.1: DINT:=0;
				(*IMMO output 1*)
			QDimmoOutput2 AT %QD1.107.2: DINT:=0;
				(*IMMO output 2*)
			QWrcStatusSym1 AT %QW1.113.1: INT:=0;
				(*remote control symbol status 1*)
			QWrcStatusSym2 AT %QW1.113.2: INT:=0;
				(*remote control symbol status 2*)
			QWrcStatusSym3 AT %QW1.113.3: INT:=0;
				(*remote control symbol status 3*)
			QWrcStatusSym4 AT %QW1.113.4: INT:=0;
				(*remote control symbol status 4*)
			QWrcStatusSym5 AT %QW1.113.5: INT:=0;
				(*remote control symbol status 5*)
			QWrcActualLoad AT %QW1.113.6: INT:=0;
				(*remote control actual load*)
			QWrcMaximumLoad AT %QW1.113.7: INT:=0;
				(*remote control maximum load*)
			QWrcLoadRadius AT %QW1.113.8: INT:=0;
				(*remote control load radius*)
			QWrcUtilization AT %QW1.113.9: INT:=0;
				(*remote control utilization*)
			QWrcWindSpeed AT %QW1.113.10: INT:=0;
				(*remote control wind speed*)
			QWrcHeadHight AT %QW1.113.11: INT:=0;
				(*remote control head hight*)
			QWrcUtilizationB AT %QW1.113.12: INT:=0;
				(*remote control utilization backwards*)
			QWrcVibrFrequenc AT %QW1.113.13: INT:=0;
				(*remote control vibrator frequency*)
			QWrcEngSpe_ClaPr AT %QW1.113.14: INT:=0;
				(*remote control engine speed / clamp pressure*)
			QWrcRopeLe_Pres1 AT %QW1.113.15: INT:=0;
				(*remote control rope lenght / pressure pumpe 1*)
			QWrcFuelCo_Pres2 AT %QW1.113.16: INT:=0;
				(*remote control fuel content / pressure pumpe 2*)
			QIX2_009_1 AT %IX2.9.1: BOOL:=FALSE;
				(*feedback*)
			QIX2_009_2 AT %IX2.9.2: BOOL:=FALSE;
				(*feedback*)
			QIX2_009_3 AT %IX2.9.3: BOOL:=FALSE;
				(*feedback*)
			QIX2_009_4 AT %IX2.9.4: BOOL:=FALSE;
				(*feedback*)
			QIX2_009_5 AT %IX2.9.5: BOOL:=FALSE;
				(*feedback*)
			QIX2_009_6 AT %IX2.9.6: BOOL:=FALSE;
				(*feedback*)
			QIX2_009_7 AT %IX2.9.7: BOOL:=FALSE;
				(*feedback / security check*)
			QIXsecurFeedBack AT %IX2.9.7: BOOL:=FALSE;
				(*feedback / security check*)
			QIX2_009_8 AT %IX2.9.8: BOOL:=FALSE;
				(*feedback*)
			QIX2_009_9 AT %IX2.9.9: BOOL:=FALSE;
				(*feedback*)
			QIX2_009_10 AT %IX2.9.10: BOOL:=FALSE;
				(*feedback*)
			QIX2_009_11 AT %IX2.9.11: BOOL:=FALSE;
				(*feedback*)
			QIX2_009_12 AT %IX2.9.12: BOOL:=FALSE;
				(*feedback*)
			QIX2_009_13 AT %IX2.9.13: BOOL:=FALSE;
				(*feedback*)
			QIX2_009_14 AT %IX2.9.14: BOOL:=FALSE;
				(*feedback*)
			QIX2_009_15 AT %IX2.9.15: BOOL:=FALSE;
				(*feedback*)
			QIX2_009_16 AT %IX2.9.16: BOOL:=FALSE;
				(*feedback*)
			QIX2_009_17 AT %IX2.9.17: BOOL:=FALSE;
				(*feedback*)
			QIX2_009_18 AT %IX2.9.18: BOOL:=FALSE;
				(*feedback*)
			QIX2_009_19 AT %IX2.9.19: BOOL:=FALSE;
				(*feedback*)
			QIX2_009_20 AT %IX2.9.20: BOOL:=FALSE;
				(*feedback*)
			QIX2_009_21 AT %IX2.9.21: BOOL:=FALSE;
				(*feedback*)
			QIX2_009_22 AT %IX2.9.22: BOOL:=FALSE;
				(*feedback*)
			QIX2_009_23 AT %IX2.9.23: BOOL:=FALSE;
				(*feedback*)
			QIX2_009_24 AT %IX2.9.24: BOOL:=FALSE;
				(*feedback*)
			QIX2_009_25 AT %IX2.9.25: BOOL:=FALSE;
				(*feedback*)
			QIX2_009_26 AT %IX2.9.26: BOOL:=FALSE;
				(*feedback*)
			QIX2_009_27 AT %IX2.9.27: BOOL:=FALSE;
				(*feedback*)
			QIX2_009_28 AT %IX2.9.28: BOOL:=FALSE;
				(*feedback*)
			QIX2_009_29 AT %IX2.9.29: BOOL:=FALSE;
				(*feedback*)
			QIX2_009_30 AT %IX2.9.30: BOOL:=FALSE;
				(*feedback*)
			QIX2_009_31 AT %IX2.9.31: BOOL:=FALSE;
				(*feedback*)
			QIX2_009_32 AT %IX2.9.32: BOOL:=FALSE;
				(*feedback*)
			QXhg1BrakeNormal AT %QX2.9.1: BOOL:=FALSE;
				(*HG 1 brake normal speed operation*)
			QXhg1Clutch AT %QX2.9.2: BOOL:=FALSE;
				(*HG 1 clutch*)
			QXhg2BrakeNormal AT %QX2.9.3: BOOL:=FALSE;
				(*HG 2 brake normal speed operation*)
			QXhg2Clutch AT %QX2.9.4: BOOL:=FALSE;
				(*HG 2 clutch*)
			QXlgBrake AT %QX2.9.5: BOOL:=FALSE;
				(*LG brake*)
			QXsgBrake AT %QX2.9.6: BOOL:=FALSE;
				(*SG brake*)
			QXlg2Brake AT %QX2.9.7: BOOL:=FALSE;
				(*LG 2 brake*)
			QXaddHydrSwiOver AT %QX2.9.8: BOOL:=FALSE;
				(*add hydraulics switch over*)
			QXstabWinFreef AT %QX2.9.9: BOOL:=FALSE;
				(*stabilization winch freefall*)
			QXadwBrake AT %QX2.9.10: BOOL:=FALSE;
				(*add winch brake / personal winch brake*)
			QXaddPersWinBrak AT %QX2.9.10: BOOL:=FALSE;
				(*add winch brake / personal winch brake*)
			QXhg1BrakeFastSp AT %QX2.9.11: BOOL:=FALSE;
				(*HG 1 brake fast speed operation*)
			QXhg2BrakeFastSp AT %QX2.9.12: BOOL:=FALSE;
				(*HG 2 brake fast speed operation*)
			QXreleasHoistCyl AT %QX2.9.13: BOOL:=FALSE;
				(*release hoisting cylinder*)
			QXaFrameCylDown AT %QX2.9.14: BOOL:=FALSE;
				(*a-frame cylinder in*)
			QXhg1_2connectio AT %QX2.9.15: BOOL:=FALSE;
				(*connection hg 1 & 2*)
			QXconBrakePedals AT %QX2.9.16: BOOL:=FALSE;
				(*connect brake pedals hg1 + hg2*)
			QXrelClampJaw AT %QX2.9.17: BOOL:=FALSE;
				(*release clamping jaw*)
			QXgeneratorOn AT %QX2.9.19: BOOL:=FALSE;
				(*add. generator/oil supply on *)
			QXaddOilSupply AT %QX2.9.19: BOOL:=FALSE;
				(*add. generator/oil supply on *)
			QXclampJawClose AT %QX2.9.20: BOOL:=FALSE;
				(*clamping jaw vibrator close*)
			QXrelClampHighPr AT %QX2.9.21: BOOL:=FALSE;
				(*release clamp pump high pressure (not used) *)
			QXlg2PressLimitH AT %QX2.9.22: BOOL:=FALSE;
				(*press. limit lg2, aux winch 2, hoist cyl, mode4, leader aux winch*)
			QXreleasCylOpera AT %QX2.9.23: BOOL:=FALSE;
				(*release cylinder operation*)
			QXaFrameCylUp AT %QX2.9.24: BOOL:=FALSE;
				(*a-frame cylinder out*)
			QXlmlLightGreen AT %QX2.9.25: BOOL:=FALSE;
				(*lml light green*)
			QXlmlLightYellow AT %QX2.9.26: BOOL:=FALSE;
				(*lml light yellow*)
			QXlmlLightRed AT %QX2.9.27: BOOL:=FALSE;
				(*lml light red*)
			QXlmlSounder AT %QX2.9.28: BOOL:=FALSE;
				(*sounder LML Stop warning or bridged*)
			QXadRCswitchTG AT %QX2.9.29: BOOL:=FALSE;
				(*remote control switch travelling gear control cabine / rc*)
			QXflashingLight AT %QX2.9.30: BOOL:=FALSE;
				(*flashing light*)
			QXsgTrimot AT %QX2.9.31: BOOL:=FALSE;
				(*slewing gear trimot*)
			QXmovementWarnin AT %QX2.9.32: BOOL:=FALSE;
				(*movement warning acoustical*)
			QIX2_010_1 AT %IX2.10.1: BOOL:=FALSE;
				(*feedback*)
			QIX2_010_2 AT %IX2.10.2: BOOL:=FALSE;
				(*feedback*)
			QIX2_010_3 AT %IX2.10.3: BOOL:=FALSE;
				(*feedback*)
			QIX2_010_4 AT %IX2.10.4: BOOL:=FALSE;
				(*feedback*)
			QIX2_010_5 AT %IX2.10.5: BOOL:=FALSE;
				(*feedback*)
			QIX2_010_6 AT %IX2.10.6: BOOL:=FALSE;
				(*feedback*)
			QIX2_010_7 AT %IX2.10.7: BOOL:=FALSE;
				(*feedback*)
			QIX2_010_8 AT %IX2.10.8: BOOL:=FALSE;
				(*feedback*)
			QIX2_010_9 AT %IX2.10.9: BOOL:=FALSE;
				(*feedback*)
			QIX2_010_10 AT %IX2.10.10: BOOL:=FALSE;
				(*feedback*)
			QIX2_010_11 AT %IX2.10.11: BOOL:=FALSE;
				(*feedback*)
			QIX2_010_12 AT %IX2.10.12: BOOL:=FALSE;
				(*feedback*)
			QIX2_010_13 AT %IX2.10.13: BOOL:=FALSE;
				(*feedback*)
			QIX2_010_14 AT %IX2.10.14: BOOL:=FALSE;
				(*feedback*)
			QIX2_010_15 AT %IX2.10.15: BOOL:=FALSE;
				(*feedback*)
			QIX2_010_16 AT %IX2.10.16: BOOL:=FALSE;
				(*feedback*)
			QIX2_010_17 AT %IX2.10.17: BOOL:=FALSE;
				(*feedback*)
			QIX2_010_18 AT %IX2.10.18: BOOL:=FALSE;
				(*feedback*)
			QIX2_010_19 AT %IX2.10.19: BOOL:=FALSE;
				(*feedback*)
			QIX2_010_20 AT %IX2.10.20: BOOL:=FALSE;
				(*feedback*)
			QIX2_010_21 AT %IX2.10.21: BOOL:=FALSE;
				(*feedback*)
			QIX2_010_22 AT %IX2.10.22: BOOL:=FALSE;
				(*feedback*)
			QIX2_010_23 AT %IX2.10.23: BOOL:=FALSE;
				(*feedback*)
			QIX2_010_24 AT %IX2.10.24: BOOL:=FALSE;
				(*feedback*)
			QIX2_010_25 AT %IX2.10.25: BOOL:=FALSE;
				(*feedback*)
			QIX2_010_26 AT %IX2.10.26: BOOL:=FALSE;
				(*feedback*)
			QIX2_010_27 AT %IX2.10.27: BOOL:=FALSE;
				(*feedback*)
			QIX2_010_28 AT %IX2.10.28: BOOL:=FALSE;
				(*feedback*)
			QIX2_010_29 AT %IX2.10.29: BOOL:=FALSE;
				(*feedback*)
			QIX2_010_30 AT %IX2.10.30: BOOL:=FALSE;
				(*feedback*)
			QIX2_010_31 AT %IX2.10.31: BOOL:=FALSE;
				(*feedback*)
			QIX2_010_32 AT %IX2.10.32: BOOL:=FALSE;
				(*feedback*)
			QXadMagnetOn AT %QX2.10.1: BOOL:=FALSE;
				(*magnetise (on/off)/dd trimot/brake left hose winch/grab adj. S1 front/back*)
			QXddTrimot AT %QX2.10.1: BOOL:=FALSE;
				(*magnetise (on/off)/dd trimot/brake left hose winch/grab adj. S1 front/back*)
			QXhoseBrakeLeft AT %QX2.10.1: BOOL:=FALSE;
				(*magnetise (on/off)/dd trimot/brake left hose winch/grab adj. S1 front/back*)
			QXgrabAdjustS1 AT %QX2.10.1: BOOL:=FALSE;
				(*magnetise (on/off)/dd trimot/brake left hose winch/grab adj. S1 front/back*)
			QXadMagnetOff AT %QX2.10.2: BOOL:=FALSE;
				(*magnetise off/dd gear box/brake right hose winch/grab adj. S2 front/back*)
			QXddGearBox AT %QX2.10.2: BOOL:=FALSE;
				(*magnetise off/dd gear box/brake right hose winch/grab adj. S2 front/back*)
			QXhoseBrakeRight AT %QX2.10.2: BOOL:=FALSE;
				(*magnetise off/dd gear box/brake right hose winch/grab adj. S2 front/back*)
			QXgrabAdjustS2 AT %QX2.10.2: BOOL:=FALSE;
				(*magnetise off/dd gear box/brake right hose winch/grab adj. S2 front/back*)
			QXcableWinBrake AT %QX2.10.3: BOOL:=FALSE;
				(*brake cable winch/LE grab adj. S3 front/back*)
			QXgrabAdjustS3 AT %QX2.10.3: BOOL:=FALSE;
				(*brake cable winch/LE grab adj. S3 front/back*)
			QXgrabOpen AT %QX2.10.4: BOOL:=FALSE;
				(*add. grab valve open*)
			QXgrabClose AT %QX2.10.5: BOOL:=FALSE;
				(*add. grab close*)
			QXreleaseAddPump AT %QX2.10.6: BOOL:=FALSE;
				(*add. pump/ leader valves/grab valves/pass.trans.winch*)
			QXexcentDriveIn AT %QX2.10.7: BOOL:=FALSE;
				(*excentric drive in*)
			QXexcentDriveOut AT %QX2.10.8: BOOL:=FALSE;
				(*excentric drive out *)
			QXhoseDrumBrakLe AT %QX2.10.9: BOOL:=FALSE;
				(*brake left hose winch LE*)
			QXhoseDrumBrakRi AT %QX2.10.10: BOOL:=FALSE;
				(*brake right hose winch LE*)
			QXrelBrakePress AT %QX2.10.11: BOOL:=FALSE;
				(*release brake pressure*)
			QXgrabAdjustS4 AT %QX2.10.12: BOOL:=FALSE;
				(*LE grab adj. S4 left/right*)
			QXcableDrumLower AT %QX2.10.13: BOOL:=FALSE;
				(*cable drum lowering/passenger winch lowering*)
			QXadPasWinchLow AT %QX2.10.13: BOOL:=FALSE;
				(*cable drum lowering/passenger winch lowering*)
			QXcableDrumLift AT %QX2.10.14: BOOL:=FALSE;
				(*cable drum lifting/passenger winch lifting*)
			QXadPasWinchLift AT %QX2.10.14: BOOL:=FALSE;
				(*cable drum lifting/passenger winch lifting*)
			QXgrabAdjustS5 AT %QX2.10.15: BOOL:=FALSE;
				(*LE grab adj. S5 left/right*)
			QXgrabAdjustS6 AT %QX2.10.16: BOOL:=FALSE;
				(*LE grab adj.S6 left/right*)
			QX4T_Y90 AT %QX2.10.20: BOOL:=FALSE;
				(*release Z3 cylinder/grab slewing*)
			QX4T_Y19 AT %QX2.10.21: BOOL:=FALSE;
				(*release Z6 cylinder/grap adjust.*)
			QX4T_Y23 AT %QX2.10.22: BOOL:=FALSE;
				(*release Z4 cyl/hose adj.winch/grab adj.S6/right/left grab adj.*)
			QX4T_Y25 AT %QX2.10.23: BOOL:=FALSE;
				(*release Z17 cylinder*)
			QX4T_Y24 AT %QX2.10.24: BOOL:=FALSE;
				(*release pile guide cylinder*)
			QXctValve AT %QX2.10.25: BOOL:=FALSE;
				(*sea state wave compensation valve (CT valve)*)
			QXrelVibHamDirec AT %QX2.10.27: BOOL:=FALSE;
				(*release vibrator/hammer direct at pump*)
			QXclampJawOpen AT %QX2.10.28: BOOL:=FALSE;
				(*clamping jaw vibrator open*)
			QXdestruConsTens AT %QX2.10.29: BOOL:=FALSE;
				(*ad constant tension at destruction operation*)
			QXgrabSlewLeft AT %QX2.10.30: BOOL:=FALSE;
				(*LE grab slewing left*)
			QXgrabSlewRight AT %QX2.10.31: BOOL:=FALSE;
				(*LE grab slewing right*)
			QXretFlowVibrHam AT %QX2.10.32: BOOL:=FALSE;
				(*add: return flow valve vibrator/hammer*)
			QBpowSupply_LI AT %QB2.13.1: BYTE:=0;
				(*power supply ignition delayed LI*)
			QBpowSupply_LD1 AT %QB2.13.2: BYTE:=0;
				(*power supply engine running LD+*)
			QBpowSupply_LD2 AT %QB2.13.3: BYTE:=0;
				(*power supply engine running LD+*)
			QBpowSupply_LED AT %QB2.13.4: BYTE:=0;
				(*power supply engine running and entry switch closed LED+*)
			QIB2_013_1 AT %IB2.13.1: BYTE:=0;
				(*feedback modul 13 output 1*)
			QIB2_013_2 AT %IB2.13.2: BYTE:=0;
				(*feedback modul 13 output 2*)
			QIB2_013_3 AT %IB2.13.3: BYTE:=0;
				(*feedback modul 13 output 3*)
			QIB2_013_4 AT %IB2.13.4: BYTE:=0;
				(*feedback modul 13 output 4*)
			QBpowSupply_LD3 AT %QB2.14.1: BYTE:=0;
				(*power supply engine running LD+*)
			QIB2_014_1 AT %IB2.14.1: BYTE:=0;
				(*feedback modul 14 output 1*)
			QIB2_014_2 AT %IB2.14.2: BYTE:=0;
				(*feedback modul 14 output 2*)
			QIB2_014_3 AT %IB2.14.3: BYTE:=0;
				(*feedback modul 14 output 3*)
			QIB2_014_4 AT %IB2.14.4: BYTE:=0;
				(*feedback modul 14 output 4*)
			QIB2_015_1 AT %IB2.15.1: BYTE:=0;
				(*feedback modul 15 output 1*)
			QIB2_015_2 AT %IB2.15.2: BYTE:=0;
				(*feedback modul 15 output 2*)
			QIB2_015_3 AT %IB2.15.3: BYTE:=0;
				(*feedback modul 15 output 3*)
			QIB2_015_4 AT %IB2.15.4: BYTE:=0;
				(*feedback modul 15 output 4*)
			QXengStart AT %QX2.93.1: BOOL:=FALSE;
				(*engine start*)
			QXengSetFuInZero AT %QX2.93.2: BOOL:=FALSE;
				(*not used (engine set fuel injection to zero)*)
			QXengEnableEngin AT %QX2.93.3: BOOL:=FALSE;
				(*engine enable engine*)
			QXengRelDrivePed AT %QX2.93.4: BOOL:=FALSE;
				(*not used (engine release drive pedal)*)
			QXengSetExhBrake AT %QX2.93.6: BOOL:=FALSE;
				(*not used (engine set exhaust brake)*)
			QXengBloExhBrake AT %QX2.93.7: BOOL:=FALSE;
				(*not used (engine block exhaust brake)*)
			QXengCANfanSpeed AT %QX2.93.8: BOOL:=FALSE;
				(*engine fan speed only by CAN*)
			QXengOutputDO3 AT %QX2.93.9: BOOL:=FALSE;
				(*not used (engine set output DO3)*)
			QXengOutputDO4 AT %QX2.93.10: BOOL:=FALSE;
				(*not used (engine set output DO4)*)
			QXengRegulatType AT %QX2.93.13: BOOL:=FALSE;
				(*not used (engine regulator type)*)
			QXengOperatMode AT %QX2.93.14: BOOL:=FALSE;
				(*not used (engine operation mode)*)
			QXengDemMinEngSp AT %QX2.93.15: BOOL:=FALSE;
				(*engine demand minimum engine speed*)
			QXengDemMaxEngSp AT %QX2.93.16: BOOL:=FALSE;
				(*engine demand maximum engine speed*)
			QWengDpfEnabReg AT %QW2.94.1: INT:=0;
				(*engine DPF enable regeneration*)
			QWengDpfStartReg AT %QW2.94.2: INT:=0;
				(*engine DPF start regeneration*)
			QWengDpfServReg AT %QW2.94.3: INT:=0;
				(*engine DPF start service regeneration (purge HC docer)*)
			QIW2_017_1 AT %IW2.17.1: UINT:=0;
				(*feedback / security check*)
			QIW2_017_2 AT %IW2.17.2: UINT:=0;
				(*feedback*)
			QIW2_017_3 AT %IW2.17.3: UINT:=0;
				(*feedback*)
			QIW2_017_4 AT %IW2.17.4: UINT:=0;
				(*feedback*)
			QIW2_017_5 AT %IW2.17.5: UINT:=0;
				(*feedback*)
			QIW2_017_6 AT %IW2.17.6: UINT:=0;
				(*feedback*)
			QIW2_017_7 AT %IW2.17.7: UINT:=0;
				(*feedback*)
			QIW2_017_8 AT %IW2.17.8: UINT:=0;
				(*feedback*)
			QIW2_017_9 AT %IW2.17.9: UINT:=0;
				(*feedback*)
			QIW2_017_10 AT %IW2.17.10: UINT:=0;
				(*feedback*)
			QIW2_017_11 AT %IW2.17.11: UINT:=0;
				(*feedback*)
			QIW2_017_12 AT %IW2.17.12: UINT:=0;
				(*feedback*)
			QIW2_017_13 AT %IW2.17.13: UINT:=0;
				(*feedback*)
			QIW2_017_14 AT %IW2.17.14: UINT:=0;
				(*feedback*)
			QIW2_017_15 AT %IW2.17.15: UINT:=0;
				(*feedback*)
			QIW2_017_16 AT %IW2.17.16: UINT:=0;
				(*feedback*)
			QWhg1Lifting AT %QW2.17.1: UINT:=0;
				(*HG 1 pump lifting*)
			QWhg1Lowering AT %QW2.17.2: UINT:=0;
				(*HG 1 pump lowering*)
			QWhg2Lifting AT %QW2.17.3: UINT:=0;
				(*HG 2 pump lifting*)
			QWhg2Lowering AT %QW2.17.4: UINT:=0;
				(*HG 2 pump lowering*)
			QWsgRight AT %QW2.17.5: UINT:=0;
				(*SG pump 1 right*)
			QWsgLeft AT %QW2.17.6: UINT:=0;
				(*SG pump 1 left*)
			QWludv1_2CutOff AT %QW2.17.7: UINT:=0;
				(*cut off ludv pump 1 and 2*)
			QWtgControlValve AT %QW2.17.8: UINT:=0;
				(*travelling gear control valve*)
			QWlgLifting AT %QW2.17.9: UINT:=0;
				(*LG lifting*)
			QWlgLowering AT %QW2.17.10: UINT:=0;
				(*LG lowering*)
			QWlg2Lifting AT %QW2.17.11: UINT:=0;
				(*LG 2 lifting*)
			QWlg2Lowering AT %QW2.17.12: UINT:=0;
				(*LG 2 lowering*)
			QWludv1 AT %QW2.17.13: UINT:=0;
				(*LUDV pump 1*)
			QWludv2 AT %QW2.17.14: UINT:=0;
				(*LUDV pump 2*)
			QWoilCoFanSpeed AT %QW2.17.15: UINT:=0;
				(*fan speed oil cooler *)
			QWpContLowPowLim AT %QW2.17.16: UINT:=0;
				(*lower power limitation pressure control *)
			QIW2_018_1 AT %IW2.18.1: UINT:=0;
				(*feedback*)
			QIW2_018_2 AT %IW2.18.2: UINT:=0;
				(*feedback*)
			QIW2_018_3 AT %IW2.18.3: UINT:=0;
				(*feedback*)
			QIW2_018_4 AT %IW2.18.4: UINT:=0;
				(*feedback*)
			QIW2_018_5 AT %IW2.18.5: UINT:=0;
				(*feedback*)
			QIW2_018_6 AT %IW2.18.6: UINT:=0;
				(*feedback*)
			QIW2_018_7 AT %IW2.18.7: UINT:=0;
				(*feedback*)
			QIW2_018_8 AT %IW2.18.8: UINT:=0;
				(*feedback*)
			QIW2_018_9 AT %IW2.18.9: UINT:=0;
				(*feedback*)
			QIW2_018_10 AT %IW2.18.10: UINT:=0;
				(*feedback*)
			QIW2_018_11 AT %IW2.18.11: UINT:=0;
				(*feedback*)
			QIW2_018_12 AT %IW2.18.12: UINT:=0;
				(*feedback*)
			QIW2_018_13 AT %IW2.18.13: UINT:=0;
				(*feedback*)
			QIW2_018_14 AT %IW2.18.14: UINT:=0;
				(*feedback*)
			QIW2_018_15 AT %IW2.18.15: UINT:=0;
				(*feedback*)
			QIW2_018_16 AT %IW2.18.16: UINT:=0;
				(*feedback*)
			QWhg1Trimot AT %QW2.18.1: UINT:=0;
				(*HG 1 pump trimot*)
			QWhg2Trimot AT %QW2.18.2: UINT:=0;
				(*HG 2 pump trimot*)
			QW4T_Y30 AT %QW2.18.3: UINT:=0;
				(*stabilization winch/add. hose winch lifting CC*)
			QW4T_Y31 AT %QW2.18.4: UINT:=0;
				(*stabilization winch/add. hose winch lowering CC*)
			QW4T_Y8 AT %QW2.18.5: UINT:=0;
				(*stabilization winch/add. hose winch  p-contr. CC*)
			QWludvPressCont AT %QW2.18.6: UINT:=0;
				(*ludv pump pressure control *)
			QWhg1PressContro AT %QW2.18.7: UINT:=0;
				(*HG 1 pressure control *)
			QWhg2PressContro AT %QW2.18.8: UINT:=0;
				(*HG 2 pressure control*)
			QWhgDynGrouComp AT %QW2.18.11: UINT:=0;
				(*HG 1 dynamic ground compaction*)
			QW4V_Y31 AT %QW2.18.12: UINT:=0;
				(*P2 grab close/drill.dr.left*)
			QW4V_Y30 AT %QW2.18.13: UINT:=0;
				(*P2 hammer/vibrator/grab open/drill.dr.right*)
			QWgrabPressContr AT %QW2.18.14: UINT:=0;
				(*P1 grab close/drill.dr.left/LUDV pump3*)
			QWludv3 AT %QW2.18.15: UINT:=0;
				(*P1 grab close/drill.dr.left/LUDV pump3*)
			QW4V_Y33 AT %QW2.18.15: UINT:=0;
				(*P1 grab close/drill.dr.left/LUDV pump3*)
			QW4V_Y32 AT %QW2.18.16: UINT:=0;
				(*P1 hammer/vibrator/grab open/drill.dr.right/LUDV pump4*)
			QWludv4 AT %QW2.18.16: UINT:=0;
				(*P1 hammer/vibrator/grab open/drill.dr.right/LUDV pump4*)
			QIW2_019_1 AT %IW2.19.1: UINT:=0;
				(*feedback*)
			QIW2_019_2 AT %IW2.19.2: UINT:=0;
				(*feedback*)
			QIW2_019_3 AT %IW2.19.3: UINT:=0;
				(*feedback*)
			QIW2_019_4 AT %IW2.19.4: UINT:=0;
				(*feedback*)
			QIW2_019_5 AT %IW2.19.5: UINT:=0;
				(*feedback*)
			QIW2_019_6 AT %IW2.19.6: UINT:=0;
				(*feedback*)
			QIW2_019_7 AT %IW2.19.7: UINT:=0;
				(*feedback*)
			QIW2_019_8 AT %IW2.19.8: UINT:=0;
				(*feedback*)
			QIW2_019_9 AT %IW2.19.9: UINT:=0;
				(*feedback*)
			QIW2_019_10 AT %IW2.19.10: UINT:=0;
				(*feedback*)
			QIW2_019_11 AT %IW2.19.11: UINT:=0;
				(*feedback*)
			QIW2_019_12 AT %IW2.19.12: UINT:=0;
				(*feedback*)
			QIW2_019_13 AT %IW2.19.13: UINT:=0;
				(*feedback*)
			QIW2_019_14 AT %IW2.19.14: UINT:=0;
				(*feedback*)
			QIW2_019_15 AT %IW2.19.15: UINT:=0;
				(*feedback*)
			QIW2_019_16 AT %IW2.19.16: UINT:=0;
				(*feedback*)
			QW4T_Y33 AT %QW2.19.1: UINT:=0;
				(*Z2/grab lock/right grab adj.out; hose/stab.winch lift OC*)
			QW4T_Y32 AT %QW2.19.2: UINT:=0;
				(*Z2/grab lock/right grab adj.in; hose/stab.winch lower OC*)
			QW4T_Y20 AT %QW2.19.3: UINT:=0;
				(*Z4/ hose adj.winch/left grab adj.out*)
			QW4T_Y21 AT %QW2.19.4: UINT:=0;
				(*Z4/ hose adj.winch/left grab adj.in*)
			QW4T_Y16 AT %QW2.19.5: UINT:=0;
				(*Z6 cylinder left/ grap adj. out*)
			QW4T_Y17 AT %QW2.19.6: UINT:=0;
				(*Z6 cylinder right/ grap adj. in*)
			QW4T_Y27 AT %QW2.19.7: UINT:=0;
				(*Z17 cylinder in*)
			QW4T_Y26 AT %QW2.19.8: UINT:=0;
				(*Z17 cylinder out*)
			QW4T_Y92 AT %QW2.19.9: UINT:=0;
				(*Z3 cylinder/grab slewing right*)
			QW4T_Y91 AT %QW2.19.10: UINT:=0;
				(*Z3 cylinder/grab slewing left*)
			QW4T_Y28 AT %QW2.19.11: UINT:=0;
				(*pile guide cylinder close*)
			QW4T_Y29 AT %QW2.19.12: UINT:=0;
				(*pile guide cylinder open*)
			QW4T_Y39 AT %QW2.19.13: UINT:=0;
				(*Z2/grab lock/right grab adj/hose/stab.winch p-cont OC*)
			QWengRatedSpeed AT %QW2.92.1: INT:=0;
				(*engine PLD speed [rpm]*)
			QWengMaxTorque AT %QW2.92.2: INT:=0;
				(*engine PLD maximum torque [Nm]*)
			QWengFanSpeed AT %QW2.92.3: INT:=0;
				(*engine PLD fan speed [mA]*)
			IXec109_01 AT %IX3.109.1: BOOL:=FALSE;
				(*external control master modul 109 *)
			IXec109_02 AT %IX3.109.2: BOOL:=FALSE;
				(*external control master modul 109*)
			IXec109_03 AT %IX3.109.3: BOOL:=FALSE;
				(*external control master modul 109*)
			IXec109_04 AT %IX3.109.4: BOOL:=FALSE;
				(*external control master modul 109*)
			IXec109_05 AT %IX3.109.5: BOOL:=FALSE;
				(*external control master modul 109*)
			IXec109_06 AT %IX3.109.6: BOOL:=FALSE;
				(*external control master modul 109*)
			IXec109_07 AT %IX3.109.7: BOOL:=FALSE;
				(*external control master modul 109*)
			IXec109_08 AT %IX3.109.8: BOOL:=FALSE;
				(*external control master modul 109*)
			IXec109_09 AT %IX3.109.9: BOOL:=FALSE;
				(*external control master modul 109*)
			IXec109_10 AT %IX3.109.10: BOOL:=FALSE;
				(*external control master modul 109*)
			IXec109_11 AT %IX3.109.11: BOOL:=FALSE;
				(*external control master modul 109*)
			IXec109_12 AT %IX3.109.12: BOOL:=FALSE;
				(*external control master modul 109*)
			IXec109_13 AT %IX3.109.13: BOOL:=FALSE;
				(*external control master modul 109*)
			IXec109_14 AT %IX3.109.14: BOOL:=FALSE;
				(*external control master modul 109*)
			IXec109_15 AT %IX3.109.15: BOOL:=FALSE;
				(*external control master modul 109*)
			IXec109_16 AT %IX3.109.16: BOOL:=FALSE;
				(*external control master modul 109*)
			IXec109_17 AT %IX3.109.17: BOOL:=FALSE;
				(*external control master modul 109*)
			IXec109_18 AT %IX3.109.18: BOOL:=FALSE;
				(*external control master modul 109*)
			IXec109_19 AT %IX3.109.19: BOOL:=FALSE;
				(*external control master modul 109*)
			IXec109_20 AT %IX3.109.20: BOOL:=FALSE;
				(*external control master modul 109*)
			IXec109_21 AT %IX3.109.21: BOOL:=FALSE;
				(*external control master modul 109*)
			IXec109_22 AT %IX3.109.22: BOOL:=FALSE;
				(*external control master modul 109*)
			IXec109_23 AT %IX3.109.23: BOOL:=FALSE;
				(*external control master modul 109*)
			IXec109_24 AT %IX3.109.24: BOOL:=FALSE;
				(*external control master modul 109*)
			IXec109_25 AT %IX3.109.25: BOOL:=FALSE;
				(*external control master modul 109*)
			IXec109_26 AT %IX3.109.26: BOOL:=FALSE;
				(*external control master modul 109*)
			IXec109_27 AT %IX3.109.27: BOOL:=FALSE;
				(*external control master modul 109*)
			IXec109_28 AT %IX3.109.28: BOOL:=FALSE;
				(*external control master modul 109*)
			IXec109_29 AT %IX3.109.29: BOOL:=FALSE;
				(*external control master modul 109*)
			IXec109_30 AT %IX3.109.30: BOOL:=FALSE;
				(*external control master modul 109*)
			IXec109_31 AT %IX3.109.31: BOOL:=FALSE;
				(*external control master modul 109*)
			IXec109_32 AT %IX3.109.32: BOOL:=FALSE;
				(*external control master modul 109*)
			IXec109_33 AT %IX3.109.33: BOOL:=FALSE;
				(*external control master modul 109*)
			IXec109_34 AT %IX3.109.34: BOOL:=FALSE;
				(*external control master modul 109*)
			IXec109_35 AT %IX3.109.35: BOOL:=FALSE;
				(*external control master modul 109*)
			IXec109_36 AT %IX3.109.36: BOOL:=FALSE;
				(*external control master modul 109*)
			IXec109_37 AT %IX3.109.37: BOOL:=FALSE;
				(*external control master modul 109*)
			IXec109_38 AT %IX3.109.38: BOOL:=FALSE;
				(*external control master modul 109*)
			IXec109_39 AT %IX3.109.39: BOOL:=FALSE;
				(*external control master modul 109*)
			IXec109_40 AT %IX3.109.40: BOOL:=FALSE;
				(*external control master modul 109*)
			IXec109_41 AT %IX3.109.41: BOOL:=FALSE;
				(*external control master modul 109*)
			IXec109_42 AT %IX3.109.42: BOOL:=FALSE;
				(*external control master modul 109*)
			IXec109_43 AT %IX3.109.43: BOOL:=FALSE;
				(*external control master modul 109*)
			IXec109_44 AT %IX3.109.44: BOOL:=FALSE;
				(*external control master modul 109*)
			IXec109_45 AT %IX3.109.45: BOOL:=FALSE;
				(*external control master modul 109*)
			IXec109_46 AT %IX3.109.46: BOOL:=FALSE;
				(*external control master modul 109*)
			IXec109_47 AT %IX3.109.47: BOOL:=FALSE;
				(*external control master modul 109*)
			IXec109_48 AT %IX3.109.48: BOOL:=FALSE;
				(*external control master modul 109*)
			IXec109_49 AT %IX3.109.49: BOOL:=FALSE;
				(*external control master modul 109*)
			IXec109_50 AT %IX3.109.50: BOOL:=FALSE;
				(*external control master modul 109*)
			IXec109_51 AT %IX3.109.51: BOOL:=FALSE;
				(*external control master modul 109*)
			IXec109_52 AT %IX3.109.52: BOOL:=FALSE;
				(*external control master modul 109*)
			IXec109_53 AT %IX3.109.53: BOOL:=FALSE;
				(*external control master modul 109*)
			IXec109_54 AT %IX3.109.54: BOOL:=FALSE;
				(*external control master modul 109*)
			IXec109_55 AT %IX3.109.55: BOOL:=FALSE;
				(*external control master modul 109*)
			IXec109_56 AT %IX3.109.56: BOOL:=FALSE;
				(*external control master modul 109*)
			IXec109_57 AT %IX3.109.57: BOOL:=FALSE;
				(*external control master modul 109*)
			IXec109_58 AT %IX3.109.58: BOOL:=FALSE;
				(*external control master modul 109*)
			IXec109_59 AT %IX3.109.59: BOOL:=FALSE;
				(*external control master modul 109*)
			IXec109_60 AT %IX3.109.60: BOOL:=FALSE;
				(*external control master modul 109*)
			IXec109_61 AT %IX3.109.61: BOOL:=FALSE;
				(*external control master modul 109*)
			IXec109_62 AT %IX3.109.62: BOOL:=FALSE;
				(*external control master modul 109*)
			IXec109_63 AT %IX3.109.63: BOOL:=FALSE;
				(*external control master modul 109*)
			IXec109_64 AT %IX3.109.64: BOOL:=FALSE;
				(*external control master modul 109*)
			IXec110_01 AT %IX3.110.1: BOOL:=FALSE;
				(*external control master modul 110 *)
			IXec110_02 AT %IX3.110.2: BOOL:=FALSE;
				(*external control master modul 110*)
			IXec110_03 AT %IX3.110.3: BOOL:=FALSE;
				(*external control master modul 110*)
			IXec110_04 AT %IX3.110.4: BOOL:=FALSE;
				(*external control master modul 110*)
			IXec110_05 AT %IX3.110.5: BOOL:=FALSE;
				(*external control master modul 110*)
			IXec110_06 AT %IX3.110.6: BOOL:=FALSE;
				(*external control master modul 110*)
			IXec110_07 AT %IX3.110.7: BOOL:=FALSE;
				(*external control master modul 110*)
			IXec110_08 AT %IX3.110.8: BOOL:=FALSE;
				(*external control master modul 110*)
			IXec110_09 AT %IX3.110.9: BOOL:=FALSE;
				(*external control master modul 110*)
			IXec110_10 AT %IX3.110.10: BOOL:=FALSE;
				(*external control master modul 110*)
			IXec110_11 AT %IX3.110.11: BOOL:=FALSE;
				(*external control master modul 110*)
			IXec110_12 AT %IX3.110.12: BOOL:=FALSE;
				(*external control master modul 110*)
			IXec110_13 AT %IX3.110.13: BOOL:=FALSE;
				(*external control master modul 110*)
			IXec110_14 AT %IX3.110.14: BOOL:=FALSE;
				(*external control master modul 110*)
			IXec110_15 AT %IX3.110.15: BOOL:=FALSE;
				(*external control master modul 110*)
			IXec110_16 AT %IX3.110.16: BOOL:=FALSE;
				(*external control master modul 110*)
			IXec110_17 AT %IX3.110.17: BOOL:=FALSE;
				(*external control master modul 110*)
			IXec110_18 AT %IX3.110.18: BOOL:=FALSE;
				(*external control master modul 110*)
			IXec110_19 AT %IX3.110.19: BOOL:=FALSE;
				(*external control master modul 110*)
			IXec110_20 AT %IX3.110.20: BOOL:=FALSE;
				(*external control master modul 110*)
			IXec110_21 AT %IX3.110.21: BOOL:=FALSE;
				(*external control master modul 110*)
			IXec110_22 AT %IX3.110.22: BOOL:=FALSE;
				(*external control master modul 110*)
			IXec110_23 AT %IX3.110.23: BOOL:=FALSE;
				(*external control master modul 110*)
			IXec110_24 AT %IX3.110.24: BOOL:=FALSE;
				(*external control master modul 110*)
			IXec110_25 AT %IX3.110.25: BOOL:=FALSE;
				(*external control master modul 110*)
			IXec110_26 AT %IX3.110.26: BOOL:=FALSE;
				(*external control master modul 110*)
			IXec110_27 AT %IX3.110.27: BOOL:=FALSE;
				(*external control master modul 110*)
			IXec110_28 AT %IX3.110.28: BOOL:=FALSE;
				(*external control master modul 110*)
			IXec110_29 AT %IX3.110.29: BOOL:=FALSE;
				(*external control master modul 110*)
			IXec110_30 AT %IX3.110.30: BOOL:=FALSE;
				(*external control master modul 110*)
			IXec110_31 AT %IX3.110.31: BOOL:=FALSE;
				(*external control master modul 110*)
			IXec110_32 AT %IX3.110.32: BOOL:=FALSE;
				(*external control master modul 110*)
			IXec110_33 AT %IX3.110.33: BOOL:=FALSE;
				(*external control master modul 110*)
			IXec110_34 AT %IX3.110.34: BOOL:=FALSE;
				(*external control master modul 110*)
			IXec110_35 AT %IX3.110.35: BOOL:=FALSE;
				(*external control master modul 110*)
			IXec110_36 AT %IX3.110.36: BOOL:=FALSE;
				(*external control master modul 110*)
			IXec110_37 AT %IX3.110.37: BOOL:=FALSE;
				(*external control master modul 110*)
			IXec110_38 AT %IX3.110.38: BOOL:=FALSE;
				(*external control master modul 110*)
			IXec110_39 AT %IX3.110.39: BOOL:=FALSE;
				(*external control master modul 110*)
			IXec110_40 AT %IX3.110.40: BOOL:=FALSE;
				(*external control master modul 110*)
			IXec110_41 AT %IX3.110.41: BOOL:=FALSE;
				(*external control master modul 110*)
			IXec110_42 AT %IX3.110.42: BOOL:=FALSE;
				(*external control master modul 110*)
			IXec110_43 AT %IX3.110.43: BOOL:=FALSE;
				(*external control master modul 110*)
			IXec110_44 AT %IX3.110.44: BOOL:=FALSE;
				(*external control master modul 110*)
			IXec110_45 AT %IX3.110.45: BOOL:=FALSE;
				(*external control master modul 110*)
			IXec110_46 AT %IX3.110.46: BOOL:=FALSE;
				(*external control master modul 110*)
			IXec110_47 AT %IX3.110.47: BOOL:=FALSE;
				(*external control master modul 110*)
			IXec110_48 AT %IX3.110.48: BOOL:=FALSE;
				(*external control master modul 110*)
			IXec110_49 AT %IX3.110.49: BOOL:=FALSE;
				(*external control master modul 110*)
			IXec110_50 AT %IX3.110.50: BOOL:=FALSE;
				(*external control master modul 110*)
			IXec110_51 AT %IX3.110.51: BOOL:=FALSE;
				(*external control master modul 110*)
			IXec110_52 AT %IX3.110.52: BOOL:=FALSE;
				(*external control master modul 110*)
			IXec110_53 AT %IX3.110.53: BOOL:=FALSE;
				(*external control master modul 110*)
			IXec110_54 AT %IX3.110.54: BOOL:=FALSE;
				(*external control master modul 110*)
			IXec110_55 AT %IX3.110.55: BOOL:=FALSE;
				(*external control master modul 110*)
			IXec110_56 AT %IX3.110.56: BOOL:=FALSE;
				(*external control master modul 110*)
			IXec110_57 AT %IX3.110.57: BOOL:=FALSE;
				(*external control master modul 110*)
			IXec110_58 AT %IX3.110.58: BOOL:=FALSE;
				(*external control master modul 110*)
			IXec110_59 AT %IX3.110.59: BOOL:=FALSE;
				(*external control master modul 110*)
			IXec110_60 AT %IX3.110.60: BOOL:=FALSE;
				(*external control master modul 110*)
			IXec110_61 AT %IX3.110.61: BOOL:=FALSE;
				(*external control master modul 110*)
			IXec110_62 AT %IX3.110.62: BOOL:=FALSE;
				(*external control master modul 110*)
			IXec110_63 AT %IX3.110.63: BOOL:=FALSE;
				(*external control master modul 110*)
			IXec110_64 AT %IX3.110.64: BOOL:=FALSE;
				(*external control master modul 110*)
			IXec111_01 AT %IX3.111.1: BOOL:=FALSE;
				(*external control master modul 111 *)
			IXec111_02 AT %IX3.111.2: BOOL:=FALSE;
				(*external control master modul 111*)
			IXec111_03 AT %IX3.111.3: BOOL:=FALSE;
				(*external control master modul 111*)
			IXec111_04 AT %IX3.111.4: BOOL:=FALSE;
				(*external control master modul 111*)
			IXec111_05 AT %IX3.111.5: BOOL:=FALSE;
				(*external control master modul 111*)
			IXec111_06 AT %IX3.111.6: BOOL:=FALSE;
				(*external control master modul 111*)
			IXec111_07 AT %IX3.111.7: BOOL:=FALSE;
				(*external control master modul 111*)
			IXec111_08 AT %IX3.111.8: BOOL:=FALSE;
				(*external control master modul 111*)
			IXec111_09 AT %IX3.111.9: BOOL:=FALSE;
				(*external control master modul 111*)
			IXec111_10 AT %IX3.111.10: BOOL:=FALSE;
				(*external control master modul 111*)
			IXec111_11 AT %IX3.111.11: BOOL:=FALSE;
				(*external control master modul 111*)
			IXec111_12 AT %IX3.111.12: BOOL:=FALSE;
				(*external control master modul 111*)
			IXec111_13 AT %IX3.111.13: BOOL:=FALSE;
				(*external control master modul 111*)
			IXec111_14 AT %IX3.111.14: BOOL:=FALSE;
				(*external control master modul 111*)
			IXec111_15 AT %IX3.111.15: BOOL:=FALSE;
				(*external control master modul 111*)
			IXec111_16 AT %IX3.111.16: BOOL:=FALSE;
				(*external control master modul 111*)
			IXec111_17 AT %IX3.111.17: BOOL:=FALSE;
				(*external control master modul 111*)
			IXec111_18 AT %IX3.111.18: BOOL:=FALSE;
				(*external control master modul 111*)
			IXec111_19 AT %IX3.111.19: BOOL:=FALSE;
				(*external control master modul 111*)
			IXec111_20 AT %IX3.111.20: BOOL:=FALSE;
				(*external control master modul 111*)
			IXec111_21 AT %IX3.111.21: BOOL:=FALSE;
				(*external control master modul 111*)
			IXec111_22 AT %IX3.111.22: BOOL:=FALSE;
				(*external control master modul 111*)
			IXec111_23 AT %IX3.111.23: BOOL:=FALSE;
				(*external control master modul 111*)
			IXec111_24 AT %IX3.111.24: BOOL:=FALSE;
				(*external control master modul 111*)
			IXec111_25 AT %IX3.111.25: BOOL:=FALSE;
				(*external control master modul 111*)
			IXec111_26 AT %IX3.111.26: BOOL:=FALSE;
				(*external control master modul 111*)
			IXec111_27 AT %IX3.111.27: BOOL:=FALSE;
				(*external control master modul 111*)
			IXec111_28 AT %IX3.111.28: BOOL:=FALSE;
				(*external control master modul 111*)
			IXec111_29 AT %IX3.111.29: BOOL:=FALSE;
				(*external control master modul 111*)
			IXec111_30 AT %IX3.111.30: BOOL:=FALSE;
				(*external control master modul 111*)
			IXec111_31 AT %IX3.111.31: BOOL:=FALSE;
				(*external control master modul 111*)
			IXec111_32 AT %IX3.111.32: BOOL:=FALSE;
				(*external control master modul 111*)
			IXec111_33 AT %IX3.111.33: BOOL:=FALSE;
				(*external control master modul 111*)
			IXec111_34 AT %IX3.111.34: BOOL:=FALSE;
				(*external control master modul 111*)
			IXec111_35 AT %IX3.111.35: BOOL:=FALSE;
				(*external control master modul 111*)
			IXec111_36 AT %IX3.111.36: BOOL:=FALSE;
				(*external control master modul 111*)
			IXec111_37 AT %IX3.111.37: BOOL:=FALSE;
				(*external control master modul 111*)
			IXec111_38 AT %IX3.111.38: BOOL:=FALSE;
				(*external control master modul 111*)
			IXec111_39 AT %IX3.111.39: BOOL:=FALSE;
				(*external control master modul 111*)
			IXec111_40 AT %IX3.111.40: BOOL:=FALSE;
				(*external control master modul 111*)
			IXec111_41 AT %IX3.111.41: BOOL:=FALSE;
				(*external control master modul 111*)
			IXec111_42 AT %IX3.111.42: BOOL:=FALSE;
				(*external control master modul 111*)
			IXec111_43 AT %IX3.111.43: BOOL:=FALSE;
				(*external control master modul 111*)
			IXec111_44 AT %IX3.111.44: BOOL:=FALSE;
				(*external control master modul 111*)
			IXec111_45 AT %IX3.111.45: BOOL:=FALSE;
				(*external control master modul 111*)
			IXec111_46 AT %IX3.111.46: BOOL:=FALSE;
				(*external control master modul 111*)
			IXec111_47 AT %IX3.111.47: BOOL:=FALSE;
				(*external control master modul 111*)
			IXec111_48 AT %IX3.111.48: BOOL:=FALSE;
				(*external control master modul 111*)
			IXec111_49 AT %IX3.111.49: BOOL:=FALSE;
				(*external control master modul 111*)
			IXec111_50 AT %IX3.111.50: BOOL:=FALSE;
				(*external control master modul 111*)
			IXec111_51 AT %IX3.111.51: BOOL:=FALSE;
				(*external control master modul 111*)
			IXec111_52 AT %IX3.111.52: BOOL:=FALSE;
				(*external control master modul 111*)
			IXec111_53 AT %IX3.111.53: BOOL:=FALSE;
				(*external control master modul 111*)
			IXec111_54 AT %IX3.111.54: BOOL:=FALSE;
				(*external control master modul 111*)
			IXec111_55 AT %IX3.111.55: BOOL:=FALSE;
				(*external control master modul 111*)
			IXec111_56 AT %IX3.111.56: BOOL:=FALSE;
				(*external control master modul 111*)
			IXec111_57 AT %IX3.111.57: BOOL:=FALSE;
				(*external control master modul 111*)
			IXec111_58 AT %IX3.111.58: BOOL:=FALSE;
				(*external control master modul 111*)
			IXec111_59 AT %IX3.111.59: BOOL:=FALSE;
				(*external control master modul 111*)
			IXec111_60 AT %IX3.111.60: BOOL:=FALSE;
				(*external control master modul 111*)
			IXec111_61 AT %IX3.111.61: BOOL:=FALSE;
				(*external control master modul 111*)
			IXec111_62 AT %IX3.111.62: BOOL:=FALSE;
				(*external control master modul 111*)
			IXec111_63 AT %IX3.111.63: BOOL:=FALSE;
				(*external control master modul 111*)
			IXec111_64 AT %IX3.111.64: BOOL:=FALSE;
				(*external control master modul 111*)
			IWec113_01 AT %IW3.113.1: INT:=0;
				(*external control master modul 113*)
			IWec113_02 AT %IW3.113.2: INT:=0;
				(*external control master modul 113*)
			IWec113_03 AT %IW3.113.3: INT:=0;
				(*external control master modul 113*)
			IWec113_04 AT %IW3.113.4: INT:=0;
				(*external control master modul 113*)
			IWec113_05 AT %IW3.113.5: INT:=0;
				(*external control master modul 113*)
			IWec113_06 AT %IW3.113.6: INT:=0;
				(*external control master modul 113*)
			IWec113_07 AT %IW3.113.7: INT:=0;
				(*external control master modul 113*)
			IWec113_08 AT %IW3.113.8: INT:=0;
				(*external control master modul 113*)
			IWec113_09 AT %IW3.113.9: INT:=0;
				(*external control master modul 113*)
			IWec113_10 AT %IW3.113.10: INT:=0;
				(*external control master modul 113*)
			IWec113_11 AT %IW3.113.11: INT:=0;
				(*external control master modul 113*)
			IWec113_12 AT %IW3.113.12: INT:=0;
				(*external control master modul 113*)
			IWec113_13 AT %IW3.113.13: INT:=0;
				(*external control master modul 113*)
			IWec113_14 AT %IW3.113.14: INT:=0;
				(*external control master modul 113*)
			IWec113_15 AT %IW3.113.15: INT:=0;
				(*external control master modul 113*)
			IWec113_16 AT %IW3.113.16: INT:=0;
				(*external control master modul 113*)
			IWec114_01 AT %IW3.114.1: UINT:=0;
				(*external control master modul 114*)
			IWec114_02 AT %IW3.114.2: UINT:=0;
				(*external control master modul 114*)
			IWec114_03 AT %IW3.114.3: UINT:=0;
				(*external control master modul 114*)
			IWec114_04 AT %IW3.114.4: UINT:=0;
				(*external control master modul 114*)
			IWec114_05 AT %IW3.114.5: UINT:=0;
				(*external control master modul 114*)
			IWec114_06 AT %IW3.114.6: UINT:=0;
				(*external control master modul 114*)
			IWec114_07 AT %IW3.114.7: UINT:=0;
				(*external control master modul 114*)
			IWec114_08 AT %IW3.114.8: UINT:=0;
				(*external control master modul 114*)
			IWec114_09 AT %IW3.114.9: UINT:=0;
				(*external control master modul 114*)
			IWec114_10 AT %IW3.114.10: UINT:=0;
				(*external control master modul 114*)
			IWec114_11 AT %IW3.114.11: UINT:=0;
				(*external control master modul 114*)
			IWec114_12 AT %IW3.114.12: UINT:=0;
				(*external control master modul 114*)
			IWec114_13 AT %IW3.114.13: UINT:=0;
				(*external control master modul 114*)
			IWec114_14 AT %IW3.114.14: UINT:=0;
				(*external control master modul 114*)
			IWec114_15 AT %IW3.114.15: UINT:=0;
				(*external control master modul 114*)
			IWec114_16 AT %IW3.114.16: UINT:=0;
				(*external control master modul 114*)
			IWec115_01 AT %IW3.115.1: UINT:=0;
				(*external control master modul 115*)
			IWec115_02 AT %IW3.115.2: UINT:=0;
				(*external control master modul 115*)
			IWec115_03 AT %IW3.115.3: UINT:=0;
				(*external control master modul 115*)
			IWec115_04 AT %IW3.115.4: UINT:=0;
				(*external control master modul 115*)
			IWec115_05 AT %IW3.115.5: UINT:=0;
				(*external control master modul 115*)
			IWec115_06 AT %IW3.115.6: UINT:=0;
				(*external control master modul 115*)
			IWec115_07 AT %IW3.115.7: UINT:=0;
				(*external control master modul 115*)
			IWec115_08 AT %IW3.115.8: UINT:=0;
				(*external control master modul 115*)
			IWec115_09 AT %IW3.115.9: UINT:=0;
				(*external control master modul 115*)
			IWec115_10 AT %IW3.115.10: UINT:=0;
				(*external control master modul 115*)
			IWec115_11 AT %IW3.115.11: UINT:=0;
				(*external control master modul 115*)
			IWec115_12 AT %IW3.115.12: UINT:=0;
				(*external control master modul 115*)
			IWec115_13 AT %IW3.115.13: UINT:=0;
				(*external control master modul 115*)
			IWec115_14 AT %IW3.115.14: UINT:=0;
				(*external control master modul 115*)
			IWec115_15 AT %IW3.115.15: UINT:=0;
				(*external control master modul 115*)
			IWec115_16 AT %IW3.115.16: UINT:=0;
				(*external control master modul 115*)
			IWec116_01 AT %IW3.116.1: UINT:=0;
				(*external control master modul 116*)
			IWec116_02 AT %IW3.116.2: UINT:=0;
				(*external control master modul 116*)
			IWec116_03 AT %IW3.116.3: UINT:=0;
				(*external control master modul 116*)
			IWec116_04 AT %IW3.116.4: UINT:=0;
				(*external control master modul 116*)
			IWec116_05 AT %IW3.116.5: UINT:=0;
				(*external control master modul 116*)
			IWec116_06 AT %IW3.116.6: UINT:=0;
				(*external control master modul 116*)
			IWec116_07 AT %IW3.116.7: UINT:=0;
				(*external control master modul 116*)
			IWec116_08 AT %IW3.116.8: UINT:=0;
				(*external control master modul 116*)
			IWec116_09 AT %IW3.116.9: UINT:=0;
				(*external control master modul 116*)
			IWec116_10 AT %IW3.116.10: UINT:=0;
				(*external control master modul 116*)
			IWec116_11 AT %IW3.116.11: UINT:=0;
				(*external control master modul 116*)
			IWec116_12 AT %IW3.116.12: UINT:=0;
				(*external control master modul 116*)
			IWec116_13 AT %IW3.116.13: UINT:=0;
				(*external control master modul 116*)
			IWec116_14 AT %IW3.116.14: UINT:=0;
				(*external control master modul 116*)
			IWec116_15 AT %IW3.116.15: UINT:=0;
				(*external control master modul 116*)
			IWec116_16 AT %IW3.116.16: UINT:=0;
				(*external control master modul 116*)
			IDec124_01 AT %ID3.124.1: DINT:=0;
				(*external control master modul 124*)
			IDec124_02 AT %ID3.124.2: DINT:=0;
				(*external control master modul 124*)
			IDec124_03 AT %ID3.124.3: DINT:=0;
				(*external control master modul 124*)
			IDec124_04 AT %ID3.124.4: DINT:=0;
				(*external control master modul 124*)
			IDec124_05 AT %ID3.124.5: DINT:=0;
				(*external control master modul 124*)
			IDec124_06 AT %ID3.124.6: DINT:=0;
				(*external control master modul 124*)
			IDec124_07 AT %ID3.124.7: DINT:=0;
				(*external control master modul 124*)
			IDec124_08 AT %ID3.124.8: DINT:=0;
				(*external control master modul 124*)
			QXec109_01 AT %QX3.109.1: BOOL:=FALSE;
				(*external control master modul 109*)
			QXec109_02 AT %QX3.109.2: BOOL:=FALSE;
				(*external control master modul 109*)
			QXec109_03 AT %QX3.109.3: BOOL:=FALSE;
				(*external control master modul 109*)
			QXec109_04 AT %QX3.109.4: BOOL:=FALSE;
				(*external control master modul 109*)
			QXec109_05 AT %QX3.109.5: BOOL:=FALSE;
				(*external control master modul 109*)
			QXec109_06 AT %QX3.109.6: BOOL:=FALSE;
				(*external control master modul 109*)
			QXec109_07 AT %QX3.109.7: BOOL:=FALSE;
				(*external control master modul 109*)
			QXec109_08 AT %QX3.109.8: BOOL:=FALSE;
				(*external control master modul 109*)
			QXec109_09 AT %QX3.109.9: BOOL:=FALSE;
				(*external control master modul 109*)
			QXec109_10 AT %QX3.109.10: BOOL:=FALSE;
				(*external control master modul 109*)
			QXec109_11 AT %QX3.109.11: BOOL:=FALSE;
				(*external control master modul 109*)
			QXec109_12 AT %QX3.109.12: BOOL:=FALSE;
				(*external control master modul 109*)
			QXec109_13 AT %QX3.109.13: BOOL:=FALSE;
				(*external control master modul 109*)
			QXec109_14 AT %QX3.109.14: BOOL:=FALSE;
				(*external control master modul 109*)
			QXec109_15 AT %QX3.109.15: BOOL:=FALSE;
				(*external control master modul 109*)
			QXec109_16 AT %QX3.109.16: BOOL:=FALSE;
				(*external control master modul 109*)
			QXec109_17 AT %QX3.109.17: BOOL:=FALSE;
				(*external control master modul 109*)
			QXec109_18 AT %QX3.109.18: BOOL:=FALSE;
				(*external control master modul 109*)
			QXec109_19 AT %QX3.109.19: BOOL:=FALSE;
				(*external control master modul 109*)
			QXec109_20 AT %QX3.109.20: BOOL:=FALSE;
				(*external control master modul 109*)
			QXec109_21 AT %QX3.109.21: BOOL:=FALSE;
				(*external control master modul 109*)
			QXec109_22 AT %QX3.109.22: BOOL:=FALSE;
				(*external control master modul 109*)
			QXec109_23 AT %QX3.109.23: BOOL:=FALSE;
				(*external control master modul 109*)
			QXec109_24 AT %QX3.109.24: BOOL:=FALSE;
				(*external control master modul 109*)
			QXec109_25 AT %QX3.109.25: BOOL:=FALSE;
				(*external control master modul 109*)
			QXec109_26 AT %QX3.109.26: BOOL:=FALSE;
				(*external control master modul 109*)
			QXec109_27 AT %QX3.109.27: BOOL:=FALSE;
				(*external control master modul 109*)
			QXec109_28 AT %QX3.109.28: BOOL:=FALSE;
				(*external control master modul 109*)
			QXec109_29 AT %QX3.109.29: BOOL:=FALSE;
				(*external control master modul 109*)
			QXec109_30 AT %QX3.109.30: BOOL:=FALSE;
				(*external control master modul 109*)
			QXec109_31 AT %QX3.109.31: BOOL:=FALSE;
				(*external control master modul 109*)
			QXec109_32 AT %QX3.109.32: BOOL:=FALSE;
				(*external control master modul 109*)
			QXec109_33 AT %QX3.109.33: BOOL:=FALSE;
				(*external control master modul 109*)
			QXec109_34 AT %QX3.109.34: BOOL:=FALSE;
				(*external control master modul 109*)
			QXec109_35 AT %QX3.109.35: BOOL:=FALSE;
				(*external control master modul 109*)
			QXec109_36 AT %QX3.109.36: BOOL:=FALSE;
				(*external control master modul 109*)
			QXec109_37 AT %QX3.109.37: BOOL:=FALSE;
				(*external control master modul 109*)
			QXec109_38 AT %QX3.109.38: BOOL:=FALSE;
				(*external control master modul 109*)
			QXec109_39 AT %QX3.109.39: BOOL:=FALSE;
				(*external control master modul 109*)
			QXec109_40 AT %QX3.109.40: BOOL:=FALSE;
				(*external control master modul 109*)
			QXec109_41 AT %QX3.109.41: BOOL:=FALSE;
				(*external control master modul 109*)
			QXec109_42 AT %QX3.109.42: BOOL:=FALSE;
				(*external control master modul 109*)
			QXec109_43 AT %QX3.109.43: BOOL:=FALSE;
				(*external control master modul 109*)
			QXec109_44 AT %QX3.109.44: BOOL:=FALSE;
				(*external control master modul 109*)
			QXec109_45 AT %QX3.109.45: BOOL:=FALSE;
				(*external control master modul 109*)
			QXec109_46 AT %QX3.109.46: BOOL:=FALSE;
				(*external control master modul 109*)
			QXec109_47 AT %QX3.109.47: BOOL:=FALSE;
				(*external control master modul 109*)
			QXec109_48 AT %QX3.109.48: BOOL:=FALSE;
				(*external control master modul 109*)
			QXec109_49 AT %QX3.109.49: BOOL:=FALSE;
				(*external control master modul 109*)
			QXec109_50 AT %QX3.109.50: BOOL:=FALSE;
				(*external control master modul 109*)
			QXec109_51 AT %QX3.109.51: BOOL:=FALSE;
				(*external control master modul 109*)
			QXec109_52 AT %QX3.109.52: BOOL:=FALSE;
				(*external control master modul 109*)
			QXec109_53 AT %QX3.109.53: BOOL:=FALSE;
				(*external control master modul 109*)
			QXec109_54 AT %QX3.109.54: BOOL:=FALSE;
				(*external control master modul 109*)
			QXec109_55 AT %QX3.109.55: BOOL:=FALSE;
				(*external control master modul 109*)
			QXec109_56 AT %QX3.109.56: BOOL:=FALSE;
				(*external control master modul 109*)
			QXec109_57 AT %QX3.109.57: BOOL:=FALSE;
				(*external control master modul 109*)
			QXec109_58 AT %QX3.109.58: BOOL:=FALSE;
				(*external control master modul 109*)
			QXec109_59 AT %QX3.109.59: BOOL:=FALSE;
				(*external control master modul 109*)
			QXec109_60 AT %QX3.109.60: BOOL:=FALSE;
				(*external control master modul 109*)
			QXec109_61 AT %QX3.109.61: BOOL:=FALSE;
				(*external control master modul 109*)
			QXec109_62 AT %QX3.109.62: BOOL:=FALSE;
				(*external control master modul 109*)
			QXec109_63 AT %QX3.109.63: BOOL:=FALSE;
				(*external control master modul 109*)
			QXec109_64 AT %QX3.109.64: BOOL:=FALSE;
				(*external control master modul 109*)
			QXec110_01 AT %QX3.110.1: BOOL:=FALSE;
				(*external control master modul 110*)
			QXec110_02 AT %QX3.110.2: BOOL:=FALSE;
				(*external control master modul 110*)
			QXec110_03 AT %QX3.110.3: BOOL:=FALSE;
				(*external control master modul 110*)
			QXec110_04 AT %QX3.110.4: BOOL:=FALSE;
				(*external control master modul 110*)
			QXec110_05 AT %QX3.110.5: BOOL:=FALSE;
				(*external control master modul 110*)
			QXec110_06 AT %QX3.110.6: BOOL:=FALSE;
				(*external control master modul 110*)
			QXec110_07 AT %QX3.110.7: BOOL:=FALSE;
				(*external control master modul 110*)
			QXec110_08 AT %QX3.110.8: BOOL:=FALSE;
				(*external control master modul 110*)
			QXec110_09 AT %QX3.110.9: BOOL:=FALSE;
				(*external control master modul 110*)
			QXec110_10 AT %QX3.110.10: BOOL:=FALSE;
				(*external control master modul 110*)
			QXec110_11 AT %QX3.110.11: BOOL:=FALSE;
				(*external control master modul 110*)
			QXec110_12 AT %QX3.110.12: BOOL:=FALSE;
				(*external control master modul 110*)
			QXec110_13 AT %QX3.110.13: BOOL:=FALSE;
				(*external control master modul 110*)
			QXec110_14 AT %QX3.110.14: BOOL:=FALSE;
				(*external control master modul 110*)
			QXec110_15 AT %QX3.110.15: BOOL:=FALSE;
				(*external control master modul 110*)
			QXec110_16 AT %QX3.110.16: BOOL:=FALSE;
				(*external control master modul 110*)
			QXec110_17 AT %QX3.110.17: BOOL:=FALSE;
				(*external control master modul 110*)
			QXec110_18 AT %QX3.110.18: BOOL:=FALSE;
				(*external control master modul 110*)
			QXec110_19 AT %QX3.110.19: BOOL:=FALSE;
				(*external control master modul 110*)
			QXec110_20 AT %QX3.110.20: BOOL:=FALSE;
				(*external control master modul 110*)
			QXec110_21 AT %QX3.110.21: BOOL:=FALSE;
				(*external control master modul 110*)
			QXec110_22 AT %QX3.110.22: BOOL:=FALSE;
				(*external control master modul 110*)
			QXec110_23 AT %QX3.110.23: BOOL:=FALSE;
				(*external control master modul 110*)
			QXec110_24 AT %QX3.110.24: BOOL:=FALSE;
				(*external control master modul 110*)
			QXec110_25 AT %QX3.110.25: BOOL:=FALSE;
				(*external control master modul 110*)
			QXec110_26 AT %QX3.110.26: BOOL:=FALSE;
				(*external control master modul 110*)
			QXec110_27 AT %QX3.110.27: BOOL:=FALSE;
				(*external control master modul 110*)
			QXec110_28 AT %QX3.110.28: BOOL:=FALSE;
				(*external control master modul 110*)
			QXec110_29 AT %QX3.110.29: BOOL:=FALSE;
				(*external control master modul 110*)
			QXec110_30 AT %QX3.110.30: BOOL:=FALSE;
				(*external control master modul 110*)
			QXec110_31 AT %QX3.110.31: BOOL:=FALSE;
				(*external control master modul 110*)
			QXec110_32 AT %QX3.110.32: BOOL:=FALSE;
				(*external control master modul 110*)
			QXec110_33 AT %QX3.110.33: BOOL:=FALSE;
				(*external control master modul 110*)
			QXec110_34 AT %QX3.110.34: BOOL:=FALSE;
				(*external control master modul 110*)
			QXec110_35 AT %QX3.110.35: BOOL:=FALSE;
				(*external control master modul 110*)
			QXec110_36 AT %QX3.110.36: BOOL:=FALSE;
				(*external control master modul 110*)
			QXec110_37 AT %QX3.110.37: BOOL:=FALSE;
				(*external control master modul 110*)
			QXec110_38 AT %QX3.110.38: BOOL:=FALSE;
				(*external control master modul 110*)
			QXec110_39 AT %QX3.110.39: BOOL:=FALSE;
				(*external control master modul 110*)
			QXec110_40 AT %QX3.110.40: BOOL:=FALSE;
				(*external control master modul 110*)
			QXec110_41 AT %QX3.110.41: BOOL:=FALSE;
				(*external control master modul 110*)
			QXec110_42 AT %QX3.110.42: BOOL:=FALSE;
				(*external control master modul 110*)
			QXec110_43 AT %QX3.110.43: BOOL:=FALSE;
				(*external control master modul 110*)
			QXec110_44 AT %QX3.110.44: BOOL:=FALSE;
				(*external control master modul 110*)
			QXec110_45 AT %QX3.110.45: BOOL:=FALSE;
				(*external control master modul 110*)
			QXec110_46 AT %QX3.110.46: BOOL:=FALSE;
				(*external control master modul 110*)
			QXec110_47 AT %QX3.110.47: BOOL:=FALSE;
				(*external control master modul 110*)
			QXec110_48 AT %QX3.110.48: BOOL:=FALSE;
				(*external control master modul 110*)
			QXec110_49 AT %QX3.110.49: BOOL:=FALSE;
				(*external control master modul 110*)
			QXec110_50 AT %QX3.110.50: BOOL:=FALSE;
				(*external control master modul 110*)
			QXec110_51 AT %QX3.110.51: BOOL:=FALSE;
				(*external control master modul 110*)
			QXec110_52 AT %QX3.110.52: BOOL:=FALSE;
				(*external control master modul 110*)
			QXec110_53 AT %QX3.110.53: BOOL:=FALSE;
				(*external control master modul 110*)
			QXec110_54 AT %QX3.110.54: BOOL:=FALSE;
				(*external control master modul 110*)
			QXec110_55 AT %QX3.110.55: BOOL:=FALSE;
				(*external control master modul 110*)
			QXec110_56 AT %QX3.110.56: BOOL:=FALSE;
				(*external control master modul 110*)
			QXec110_57 AT %QX3.110.57: BOOL:=FALSE;
				(*external control master modul 110*)
			QXec110_58 AT %QX3.110.58: BOOL:=FALSE;
				(*external control master modul 110*)
			QXec110_59 AT %QX3.110.59: BOOL:=FALSE;
				(*external control master modul 110*)
			QXec110_60 AT %QX3.110.60: BOOL:=FALSE;
				(*external control master modul 110*)
			QXec110_61 AT %QX3.110.61: BOOL:=FALSE;
				(*external control master modul 110*)
			QXec110_62 AT %QX3.110.62: BOOL:=FALSE;
				(*external control master modul 110*)
			QXec110_63 AT %QX3.110.63: BOOL:=FALSE;
				(*external control master modul 110*)
			QXec110_64 AT %QX3.110.64: BOOL:=FALSE;
				(*external control master modul 110*)
			QXec111_01 AT %QX3.111.1: BOOL:=FALSE;
				(*external control master modul 111*)
			QXec111_02 AT %QX3.111.2: BOOL:=FALSE;
				(*external control master modul 111*)
			QXec111_03 AT %QX3.111.3: BOOL:=FALSE;
				(*external control master modul 111*)
			QXec111_04 AT %QX3.111.4: BOOL:=FALSE;
				(*external control master modul 111*)
			QXec111_05 AT %QX3.111.5: BOOL:=FALSE;
				(*external control master modul 111*)
			QXec111_06 AT %QX3.111.6: BOOL:=FALSE;
				(*external control master modul 111*)
			QXec111_07 AT %QX3.111.7: BOOL:=FALSE;
				(*external control master modul 111*)
			QXec111_08 AT %QX3.111.8: BOOL:=FALSE;
				(*external control master modul 111*)
			QXec111_09 AT %QX3.111.9: BOOL:=FALSE;
				(*external control master modul 111*)
			QXec111_10 AT %QX3.111.10: BOOL:=FALSE;
				(*external control master modul 111*)
			QXec111_11 AT %QX3.111.11: BOOL:=FALSE;
				(*external control master modul 111*)
			QXec111_12 AT %QX3.111.12: BOOL:=FALSE;
				(*external control master modul 111*)
			QXec111_13 AT %QX3.111.13: BOOL:=FALSE;
				(*external control master modul 111*)
			QXec111_14 AT %QX3.111.14: BOOL:=FALSE;
				(*external control master modul 111*)
			QXec111_15 AT %QX3.111.15: BOOL:=FALSE;
				(*external control master modul 111*)
			QXec111_16 AT %QX3.111.16: BOOL:=FALSE;
				(*external control master modul 111*)
			QXec111_17 AT %QX3.111.17: BOOL:=FALSE;
				(*external control master modul 111*)
			QXec111_18 AT %QX3.111.18: BOOL:=FALSE;
				(*external control master modul 111*)
			QXec111_19 AT %QX3.111.19: BOOL:=FALSE;
				(*external control master modul 111*)
			QXec111_20 AT %QX3.111.20: BOOL:=FALSE;
				(*external control master modul 111*)
			QXec111_21 AT %QX3.111.21: BOOL:=FALSE;
				(*external control master modul 111*)
			QXec111_22 AT %QX3.111.22: BOOL:=FALSE;
				(*external control master modul 111*)
			QXec111_23 AT %QX3.111.23: BOOL:=FALSE;
				(*external control master modul 111*)
			QXec111_24 AT %QX3.111.24: BOOL:=FALSE;
				(*external control master modul 111*)
			QXec111_25 AT %QX3.111.25: BOOL:=FALSE;
				(*external control master modul 111*)
			QXec111_26 AT %QX3.111.26: BOOL:=FALSE;
				(*external control master modul 111*)
			QXec111_27 AT %QX3.111.27: BOOL:=FALSE;
				(*external control master modul 111*)
			QXec111_28 AT %QX3.111.28: BOOL:=FALSE;
				(*external control master modul 111*)
			QXec111_29 AT %QX3.111.29: BOOL:=FALSE;
				(*external control master modul 111*)
			QXec111_30 AT %QX3.111.30: BOOL:=FALSE;
				(*external control master modul 111*)
			QXec111_31 AT %QX3.111.31: BOOL:=FALSE;
				(*external control master modul 111*)
			QXec111_32 AT %QX3.111.32: BOOL:=FALSE;
				(*external control master modul 111*)
			QXec111_33 AT %QX3.111.33: BOOL:=FALSE;
				(*external control master modul 111*)
			QXec111_34 AT %QX3.111.34: BOOL:=FALSE;
				(*external control master modul 111*)
			QXec111_35 AT %QX3.111.35: BOOL:=FALSE;
				(*external control master modul 111*)
			QXec111_36 AT %QX3.111.36: BOOL:=FALSE;
				(*external control master modul 111*)
			QXec111_37 AT %QX3.111.37: BOOL:=FALSE;
				(*external control master modul 111*)
			QXec111_38 AT %QX3.111.38: BOOL:=FALSE;
				(*external control master modul 111*)
			QXec111_39 AT %QX3.111.39: BOOL:=FALSE;
				(*external control master modul 111*)
			QXec111_40 AT %QX3.111.40: BOOL:=FALSE;
				(*external control master modul 111*)
			QXec111_41 AT %QX3.111.41: BOOL:=FALSE;
				(*external control master modul 111*)
			QXec111_42 AT %QX3.111.42: BOOL:=FALSE;
				(*external control master modul 111*)
			QXec111_43 AT %QX3.111.43: BOOL:=FALSE;
				(*external control master modul 111*)
			QXec111_44 AT %QX3.111.44: BOOL:=FALSE;
				(*external control master modul 111*)
			QXec111_45 AT %QX3.111.45: BOOL:=FALSE;
				(*external control master modul 111*)
			QXec111_46 AT %QX3.111.46: BOOL:=FALSE;
				(*external control master modul 111*)
			QXec111_47 AT %QX3.111.47: BOOL:=FALSE;
				(*external control master modul 111*)
			QXec111_48 AT %QX3.111.48: BOOL:=FALSE;
				(*external control master modul 111*)
			QXec111_49 AT %QX3.111.49: BOOL:=FALSE;
				(*external control master modul 111*)
			QXec111_50 AT %QX3.111.50: BOOL:=FALSE;
				(*external control master modul 111*)
			QXec111_51 AT %QX3.111.51: BOOL:=FALSE;
				(*external control master modul 111*)
			QXec111_52 AT %QX3.111.52: BOOL:=FALSE;
				(*external control master modul 111*)
			QXec111_53 AT %QX3.111.53: BOOL:=FALSE;
				(*external control master modul 111*)
			QXec111_54 AT %QX3.111.54: BOOL:=FALSE;
				(*external control master modul 111*)
			QXec111_55 AT %QX3.111.55: BOOL:=FALSE;
				(*external control master modul 111*)
			QXec111_56 AT %QX3.111.56: BOOL:=FALSE;
				(*external control master modul 111*)
			QXec111_57 AT %QX3.111.57: BOOL:=FALSE;
				(*external control master modul 111*)
			QXec111_58 AT %QX3.111.58: BOOL:=FALSE;
				(*external control master modul 111*)
			QXec111_59 AT %QX3.111.59: BOOL:=FALSE;
				(*external control master modul 111*)
			QXec111_60 AT %QX3.111.60: BOOL:=FALSE;
				(*external control master modul 111*)
			QXec111_61 AT %QX3.111.61: BOOL:=FALSE;
				(*external control master modul 111*)
			QXec111_62 AT %QX3.111.62: BOOL:=FALSE;
				(*external control master modul 111*)
			QXec111_63 AT %QX3.111.63: BOOL:=FALSE;
				(*external control master modul 111*)
			QXec111_64 AT %QX3.111.64: BOOL:=FALSE;
				(*external control master modul 111*)
			QWec113_01 AT %QW3.113.1: INT:=0;
				(*external control master modul 113*)
			QWec113_02 AT %QW3.113.2: INT:=0;
				(*external control master modul 113*)
			QWec113_03 AT %QW3.113.3: INT:=0;
				(*external control master modul 113*)
			QWec113_04 AT %QW3.113.4: INT:=0;
				(*external control master modul 113*)
			QWec113_05 AT %QW3.113.5: INT:=0;
				(*external control master modul 113*)
			QWec113_06 AT %QW3.113.6: INT:=0;
				(*external control master modul 113*)
			QWec113_07 AT %QW3.113.7: INT:=0;
				(*external control master modul 113*)
			QWec113_08 AT %QW3.113.8: INT:=0;
				(*external control master modul 113*)
			QWec113_09 AT %QW3.113.9: INT:=0;
				(*external control master modul 113*)
			QWec113_10 AT %QW3.113.10: INT:=0;
				(*external control master modul 113*)
			QWec113_11 AT %QW3.113.11: INT:=0;
				(*external control master modul 113*)
			QWec113_12 AT %QW3.113.12: INT:=0;
				(*external control master modul 113*)
			QWec113_13 AT %QW3.113.13: INT:=0;
				(*external control master modul 113*)
			QWec113_14 AT %QW3.113.14: INT:=0;
				(*external control master modul 113*)
			QWec113_15 AT %QW3.113.15: INT:=0;
				(*external control master modul 113*)
			QWec113_16 AT %QW3.113.16: INT:=0;
				(*external control master modul 113*)
			QWec114_01 AT %QW3.114.1: UINT:=0;
				(*external control master modul 114*)
			QWec114_02 AT %QW3.114.2: UINT:=0;
				(*external control master modul 114*)
			QWec114_03 AT %QW3.114.3: UINT:=0;
				(*external control master modul 114*)
			QWec114_04 AT %QW3.114.4: UINT:=0;
				(*external control master modul 114*)
			QWec114_05 AT %QW3.114.5: UINT:=0;
				(*external control master modul 114*)
			QWec114_06 AT %QW3.114.6: UINT:=0;
				(*external control master modul 114*)
			QWec114_07 AT %QW3.114.7: UINT:=0;
				(*external control master modul 114*)
			QWec114_08 AT %QW3.114.8: UINT:=0;
				(*external control master modul 114*)
			QWec114_09 AT %QW3.114.9: UINT:=0;
				(*external control master modul 114*)
			QWec114_10 AT %QW3.114.10: UINT:=0;
				(*external control master modul 114*)
			QWec114_11 AT %QW3.114.11: UINT:=0;
				(*external control master modul 114*)
			QWec114_12 AT %QW3.114.12: UINT:=0;
				(*external control master modul 114*)
			QWec114_13 AT %QW3.114.13: UINT:=0;
				(*external control master modul 114*)
			QWec114_14 AT %QW3.114.14: UINT:=0;
				(*external control master modul 114*)
			QWec114_15 AT %QW3.114.15: UINT:=0;
				(*external control master modul 114*)
			QWec114_16 AT %QW3.114.16: UINT:=0;
				(*external control master modul 114*)
			QWec115_01 AT %QW3.115.1: UINT:=0;
				(*external control master modul 115*)
			QWec115_02 AT %QW3.115.2: UINT:=0;
				(*external control master modul 115*)
			QWec115_03 AT %QW3.115.3: UINT:=0;
				(*external control master modul 115*)
			QWec115_04 AT %QW3.115.4: UINT:=0;
				(*external control master modul 115*)
			QWec115_05 AT %QW3.115.5: UINT:=0;
				(*external control master modul 115*)
			QWec115_06 AT %QW3.115.6: UINT:=0;
				(*external control master modul 115*)
			QWec115_07 AT %QW3.115.7: UINT:=0;
				(*external control master modul 115*)
			QWec115_08 AT %QW3.115.8: UINT:=0;
				(*external control master modul 115*)
			QWec115_09 AT %QW3.115.9: UINT:=0;
				(*external control master modul 115*)
			QWec115_10 AT %QW3.115.10: UINT:=0;
				(*external control master modul 115*)
			QWec115_11 AT %QW3.115.11: UINT:=0;
				(*external control master modul 115*)
			QWec115_12 AT %QW3.115.12: UINT:=0;
				(*external control master modul 115*)
			QWec115_13 AT %QW3.115.13: UINT:=0;
				(*external control master modul 115*)
			QWec115_14 AT %QW3.115.14: UINT:=0;
				(*external control master modul 115*)
			QWec115_15 AT %QW3.115.15: UINT:=0;
				(*external control master modul 115*)
			QWec115_16 AT %QW3.115.16: UINT:=0;
				(*external control master modul 115*)
			QWec116_01 AT %QW3.116.1: INT:=0;
				(*external control master modul 116*)
			QWec116_02 AT %QW3.116.2: INT:=0;
				(*external control master modul 116*)
			QWec116_03 AT %QW3.116.3: INT:=0;
				(*external control master modul 116*)
			QWec116_04 AT %QW3.116.4: INT:=0;
				(*external control master modul 116*)
			QWec116_05 AT %QW3.116.5: INT:=0;
				(*external control master modul 116*)
			QWec116_06 AT %QW3.116.6: INT:=0;
				(*external control master modul 116*)
			QWec116_07 AT %QW3.116.7: INT:=0;
				(*external control master modul 116*)
			QWec116_08 AT %QW3.116.8: INT:=0;
				(*external control master modul 116*)
			QWec116_09 AT %QW3.116.9: INT:=0;
				(*external control master modul 116*)
			QWec116_10 AT %QW3.116.10: INT:=0;
				(*external control master modul 116*)
			QWec116_11 AT %QW3.116.11: INT:=0;
				(*external control master modul 116*)
			QWec116_12 AT %QW3.116.12: INT:=0;
				(*external control master modul 116*)
			QWec116_13 AT %QW3.116.13: INT:=0;
				(*external control master modul 116*)
			QWec116_14 AT %QW3.116.14: INT:=0;
				(*external control master modul 116*)
			QWec116_15 AT %QW3.116.15: INT:=0;
				(*external control master modul 116*)
			QWec116_16 AT %QW3.116.16: INT:=0;
				(*external control master modul 116*)
			QDec124_01 AT %QD3.124.1: DINT:=0;
				(*external control master modul 124*)
			QDec124_02 AT %QD3.124.2: DINT:=0;
				(*external control master modul 124*)
			QDec124_03 AT %QD3.124.3: DINT:=0;
				(*external control master modul 124*)
			QDec124_04 AT %QD3.124.4: DINT:=0;
				(*external control master modul 124*)
			QDec124_05 AT %QD3.124.5: DINT:=0;
				(*external control master modul 124*)
			QDec124_06 AT %QD3.124.6: DINT:=0;
				(*external control master modul 124*)
			QDec124_07 AT %QD3.124.7: DINT:=0;
				(*external control master modul 124*)
			QDec124_08 AT %QD3.124.8: DINT:=0;
				(*external control master modul 124*)
			IXlgUppLimDerrAO: BOOL:=FALSE;
				(*upper limit sw. assembly operating position for derrick*)
			IXlgUppLimDerrOp: BOOL:=FALSE;
				(*upper limit sw. operating position derrick opening switch*)
			IXderrLowerLimOk: BOOL:=FALSE;
				(*derrick winch lower limit switch*)
			IXlgUppLimDerrCl: BOOL:=FALSE;
				(*derrick lg upper limit switch normal operating position for derrick *)
			IWderrBallSenLe: UINT:=0;
				(*derrick ballast load sensor left*)
			IWderrLoadSenLe: UINT:=0;
				(*derrick load sensor left*)
			IWderrLoadSenRi: UINT:=0;
				(*derrick load sensor right*)
			IWderrBallSenRi: UINT:=0;
				(*derrick ballast load sensor right*)
			IWforceTranLeft1: UINT:=0;
				(*force transmitter left 1*)
			IWforceTranLeft2: UINT:=0;
				(*force transmitter left 2*)
			IWforceTranRigh1: UINT:=0;
				(*force transmitter right 1*)
			IWforceTranRigh2: UINT:=0;
				(*force transmitter right 2*)
			QXderrickWiBrake: BOOL:=FALSE;
				(*derrick winch brake*)
			QXhgWinSynConVal: BOOL:=FALSE;
				(*do not set anywhere*)
			MXhg1AnalSigPos AT %MX1.1: BOOL:=FALSE;
				(*hg1 analog signal positiv*)
			MXhg1AnalSigNeg AT %MX1.2: BOOL:=FALSE;
				(*hg1 analog signal negativ*)
			MXhg2AnalSigPos AT %MX1.3: BOOL:=FALSE;
				(*hg2 analog signal positiv*)
			MXhg2AnalSigNeg AT %MX1.4: BOOL:=FALSE;
				(*hg2 analog signal negativ*)
			MXlgAnalSigPos AT %MX1.5: BOOL:=FALSE;
				(*lg analog signal positiv*)
			MXlgAnalSigNeg AT %MX1.6: BOOL:=FALSE;
				(*lg analog signal negativ*)
			MXsgAnalSigPos AT %MX1.7: BOOL:=FALSE;
				(*sg analog signal positiv*)
			MXsgAnalSigNeg AT %MX1.8: BOOL:=FALSE;
				(*sg analog signal negativ*)
			MXwarnHydrOilTem AT %MX1.9: BOOL:=FALSE;
				(*hydraulic oil temperature warning*)
			MXengSpeedStore AT %MX1.10: BOOL:=FALSE;
				(*store present engine speed*)
			MXhg1ErrPressInd AT %MX1.11: BOOL:=FALSE;
				(*hg 1 error system pressure indicator*)
			MXhg2ErrPressInd AT %MX1.12: BOOL:=FALSE;
				(*hg 2 error system pressure indicator*)
			MXlg2AnalSigPos AT %MX1.13: BOOL:=FALSE;
				(*lg 2 analog signal positiv*)
			MXlg2AnalSigNeg AT %MX1.14: BOOL:=FALSE;
				(*lg 2 analog signal negativ*)
			MXminEngineSpeed AT %MX1.15: BOOL:=FALSE;
				(*minimum engine speed reached*)
			MXstopAllFunctio AT %MX1.16: BOOL:=FALSE;
				(*stop all excavator functions*)
			MXflashSignal AT %MX1.17: BOOL:=FALSE;
				(*flash signal [1,66 Hz]*)
			MXglobStopEngine AT %MX1.18: BOOL:=FALSE;
				(*global stop engine*)
			MXlmlBridged AT %MX1.19: BOOL:=FALSE;
				(*lml bridged*)
			MXsetEngRunRel AT %MX1.20: BOOL:=FALSE;
				(*set engine running relais (output) for modul test*)
			MXadHg1LoweLimit AT %MX1.21: BOOL:=FALSE;
				(*lower limit switch for HG 1*)
			MXadHg2LoweLimit AT %MX1.22: BOOL:=FALSE;
				(*lower limit switch for HG 2*)
			MXhg1LockFastSpe AT %MX1.23: BOOL:=FALSE;
				(*hg 1 lock fast speed*)
			MXhg2LockFastSpe AT %MX1.24: BOOL:=FALSE;
				(*hg 2 lock fast speed*)
			MXad1Working AT %MX1.25: BOOL:=FALSE;
				(*additional device 1 working*)
			MXad2Working AT %MX1.26: BOOL:=FALSE;
				(*additional device 2 working*)
			MXad3Working AT %MX1.27: BOOL:=FALSE;
				(*additional device 3 working*)
			MXhg1ExtAnalSign AT %MX1.28: BOOL:=FALSE;
				(*HG 1 other, external analog signal*)
			MXhg1LocStopInt AT %MX1.29: BOOL:=FALSE;
				(*HG 1 local stop integrated*)
			MXhg1LocStopRapU AT %MX1.30: BOOL:=FALSE;
				(*HG 1 local stop rapid lifting*)
			MXhg1LocStopRapD AT %MX1.31: BOOL:=FALSE;
				(*HG 1 local stop rapid lowering*)
			MXhg1GlobStopUp AT %MX1.32: BOOL:=FALSE;
				(*HG 1 global stop rapid up*)
			MXhg1GlobStopDow AT %MX1.33: BOOL:=FALSE;
				(*HG 1 global stop rapid down*)
			MXhg1WinchStand AT %MX1.34: BOOL:=FALSE;
				(*HG 1 winch standing still*)
			MXhg1PumpInZero AT %MX1.35: BOOL:=FALSE;
				(*HG 1 pump in zero*)
			MXhg1EnPowStage AT %MX1.36: BOOL:=FALSE;
				(*HG 1 enable power stage lifting or lowering*)
			MXhg1EnablTrimot AT %MX1.37: BOOL:=FALSE;
				(*HG 1 enable trimot*)
			MXhg1pselFreefal AT %MX1.38: BOOL:=FALSE;
				(*HG 1 preselected freefall*)
			MXhg1ExtControl AT %MX1.39: BOOL:=FALSE;
				(*HG 1 external enable to all outputs*)
			MXhg1LockClutch AT %MX1.40: BOOL:=FALSE;
				(*HG 1 global lock clutch*)
			MXhg2ExtAnalSign AT %MX1.42: BOOL:=FALSE;
				(*HG 2 other, external analog signal*)
			MXhg2LocStopInt AT %MX1.43: BOOL:=FALSE;
				(*HG 2 local stop integrated*)
			MXhg2LocStopRapU AT %MX1.44: BOOL:=FALSE;
				(*HG 2 local stop rapid lifting*)
			MXhg2LocStopRapD AT %MX1.45: BOOL:=FALSE;
				(*HG 2 local stop rapid lowering*)
			MXhg2GlobStopUp AT %MX1.46: BOOL:=FALSE;
				(*HG 2 global stop rapid up*)
			MXhg2GlobStopDow AT %MX1.47: BOOL:=FALSE;
				(*HG 2 global stop rapid down*)
			MXhg2WinchStand AT %MX1.48: BOOL:=FALSE;
				(*HG 2 winch standing still*)
			MXhg2PumpInZero AT %MX1.49: BOOL:=FALSE;
				(*HG 2 pump in zero*)
			MXhg2EnPowStage AT %MX1.50: BOOL:=FALSE;
				(*HG 2 enable power stage lifting or lowering*)
			MXhg2EnablTrimot AT %MX1.51: BOOL:=FALSE;
				(*HG 2 enable trimot*)
			MXhg2pselFreefal AT %MX1.52: BOOL:=FALSE;
				(*HG 2 preselected freefall*)
			MXhg2ExtControl AT %MX1.53: BOOL:=FALSE;
				(*HG 2 external enable to all outputs*)
			MXhg2LockClutch AT %MX1.54: BOOL:=FALSE;
				(*HG 2 global lock clutch*)
			MXlockFreefall AT %MX1.56: BOOL:=FALSE;
				(*lock freefall*)
			MXadwExtAnalSign AT %MX1.57: BOOL:=FALSE;
				(*additional winch external analog signal*)
			MXlgLocStopRapU AT %MX1.58: BOOL:=FALSE;
				(*LG local stop rapid lifting*)
			MXlgLocStopRapD AT %MX1.59: BOOL:=FALSE;
				(*LG local stop rapid lowering*)
			MXlgStopByLg2 AT %MX1.60: BOOL:=FALSE;
				(*lg stop by lg 2*)
			MXlgEnPowStage AT %MX1.61: BOOL:=FALSE;
				(*LG enable power stage lifting or lowering*)
			MXlg2LocalStopUp AT %MX1.63: BOOL:=FALSE;
				(*LG 2 local stop lifting*)
			MXlg2LocalStopDn AT %MX1.64: BOOL:=FALSE;
				(*LG 2 local stop lowering*)
			MXlg2EnPowStage AT %MX1.65: BOOL:=FALSE;
				(*LG 2 enable power stage lifting or lowering*)
			MXsgLocalStopRi AT %MX1.66: BOOL:=FALSE;
				(*SG local stop right*)
			MXsgLocalStopLe AT %MX1.67: BOOL:=FALSE;
				(*SG global stop left*)
			MXsgGlobalStopRi AT %MX1.68: BOOL:=FALSE;
				(*SG global stop right*)
			MXsgGlobalStopLe AT %MX1.69: BOOL:=FALSE;
				(*SG global stop left*)
			MXsgEnPowStage AT %MX1.70: BOOL:=FALSE;
				(*SG enable power stage right or left*)
			MXsgExtControl AT %MX1.71: BOOL:=FALSE;
				(*SG external enable to all outputs*)
			MXsgErrPressIndi AT %MX1.72: BOOL:=FALSE;
				(*SG error pressure indicator*)
			MXmomRegEnabled AT %MX1.73: BOOL:=FALSE;
				(*SG moment regulator enabled*)
			MXsgSpeed1 AT %MX1.74: BOOL:=FALSE;
				(*SG speed 1*)
			MXsgSpeed2 AT %MX1.75: BOOL:=FALSE;
				(*SG speed 2*)
			MXsgSpeed3 AT %MX1.76: BOOL:=FALSE;
				(*SG speed 3*)
			MXsgErrorJoyst AT %MX1.77: BOOL:=FALSE;
				(*SG error joystick*)
			MXlgUpAngleStop AT %MX1.78: BOOL:=FALSE;
				(*LG up stop by angle*)
			MXlgDnAngleStop AT %MX1.79: BOOL:=FALSE;
				(*LG down stop by angle*)
			MXengineStopped AT %MX1.80: BOOL:=FALSE;
				(*engine stoped by engine electronic*)
			MXaddHydrActive AT %MX1.81: BOOL:=FALSE;
				(*addittional hydraulics active*)
			MXludv1ExtAnaSig AT %MX1.82: BOOL:=FALSE;
				(*LUDV pump 1 other, external analog signal*)
			MXludv2ExtAnaSig AT %MX1.83: BOOL:=FALSE;
				(*LUDV pump 2 other, external analog signal*)
			MXlmlDeactive AT %MX1.84: BOOL:=FALSE;
				(*lml deactivated*)
			MXlmlWarning AT %MX1.85: BOOL:=FALSE;
				(*lml warning*)
			MXlmlStop AT %MX1.86: BOOL:=FALSE;
				(*lml stop*)
			MXlmlStopBackwar AT %MX1.87: BOOL:=FALSE;
				(*lml stop backwards*)
			MXlmlStopScreen AT %MX1.88: BOOL:=FALSE;
				(*lml stop symbol on screen*)
			MXlmlStopScrBack AT %MX1.89: BOOL:=FALSE;
				(*lml stop symbol backwards on screen*)
			MXlmlCalculating AT %MX1.90: BOOL:=FALSE;
				(*lml is claculating with new adjustments*)
			MXlmlSensorError AT %MX1.91: BOOL:=FALSE;
				(*lml sensor error*)
			MXlmlProgError AT %MX1.92: BOOL:=FALSE;
				(*lml program error*)
			MXlmlPressSenErr AT %MX1.94: BOOL:=FALSE;
				(*lml pressure sensor error fall back support luffing jib*)
			MXaFrameSensorEr AT %MX1.95: BOOL:=FALSE;
				(*a frame load sensor error*)
			MXanglSenErrBoom AT %MX1.96: BOOL:=FALSE;
				(*angle sensor error main boom*)
			MXlmlDerrickEnab AT %MX1.97: BOOL:=FALSE;
				(*lml derrick enabled*)
			MXassemblyOperat AT %MX1.98: BOOL:=FALSE;
				(*assembly operation*)
			MXresRopeLenHg1 AT %MX1.99: BOOL:=FALSE;
				(*reset rope lenght hg 1*)
			MXresRopeLenHg2 AT %MX1.100: BOOL:=FALSE;
				(*reset rope lenght hg 2*)
			MXchangeLayer1_2 AT %MX1.101: BOOL:=FALSE;
				(*set change layer 1 to 2*)
			MXchangeLayer3_4 AT %MX1.102: BOOL:=FALSE;
				(*set change layer 3 to 4*)
			MXchangeLayer5_6 AT %MX1.103: BOOL:=FALSE;
				(*set change layer 5 to 6*)
			MXhg1EnChangeLay AT %MX1.104: BOOL:=FALSE;
				(*enable hg 1 change layer*)
			MXhg2EnChangeLay AT %MX1.105: BOOL:=FALSE;
				(*enable hg 2 change layer*)
			MXhg1WinchLift AT %MX1.106: BOOL:=FALSE;
				(*hg1 winch is lifting*)
			MXhg1WinchLower AT %MX1.107: BOOL:=FALSE;
				(*hg2 winch is lowering*)
			MXhg2WinchLift AT %MX1.108: BOOL:=FALSE;
				(*hg1 winch is lifting*)
			MXhg2WinchLower AT %MX1.109: BOOL:=FALSE;
				(*hg2 winch is lowering*)
			MXlgGlobalStopUp AT %MX1.110: BOOL:=FALSE;
				(*lg global stop up*)
			MXlgGlobalStopDn AT %MX1.111: BOOL:=FALSE;
				(*lg global stop down*)
			MXadwActive AT %MX1.112: BOOL:=FALSE;
				(*additional winch active *)
			MXaxwActive AT %MX1.113: BOOL:=FALSE;
				(*auxiliary winch active*)
			MXadwUpLimOk AT %MX1.114: BOOL:=FALSE;
				(*additional winch: upper limit switch o.k.*)
			MXadwLoLimOk AT %MX1.115: BOOL:=FALSE;
				(*additional winch: lower limit switch o.k.*)
			MXaxwUpLimOk AT %MX1.116: BOOL:=FALSE;
				(*auxiliary winch:  upper limit switch o.k.*)
			MXaxwLoLimOk AT %MX1.117: BOOL:=FALSE;
				(*auxiliary winch: lower limit switch o.k.*)
			MXlgSpeed1 AT %MX1.118: BOOL:=FALSE;
				(*LG speed 1*)
			MXlgSpeed2 AT %MX1.119: BOOL:=FALSE;
				(*LG speed 2*)
			MXlgSpeed3 AT %MX1.120: BOOL:=FALSE;
				(*LG speed 3*)
			MXlgStopUpByFlap AT %MX1.121: BOOL:=FALSE;
				(*lg2 flap is not working (defect)*)
			MXlgStopDnByFlap AT %MX1.122: BOOL:=FALSE;
				(*lg2 fall back support luffing jib is in flap*)
			MXextResRopeHg1 AT %MX1.123: BOOL:=FALSE;
				(*external reset rope lenght hg1*)
			MXextResRopeHg2 AT %MX1.124: BOOL:=FALSE;
				(*external reset rope lenght hg2*)
			MXadStopHg1Up AT %MX1.125: BOOL:=FALSE;
				(*additional device stop hg1 lifting*)
			MXadStopHg2Up AT %MX1.126: BOOL:=FALSE;
				(*additional device stop hg2 lifting*)
			MXderrickActive AT %MX1.127: BOOL:=FALSE;
				(*derrick winch active*)
			MXfloaCouWeigAct AT %MX1.128: BOOL:=FALSE;
				(*floating counterweight active*)
			MXlgStopByDerric AT %MX1.129: BOOL:=FALSE;
				(*lg stop by derrick winch*)
			MXsgStopByDerric AT %MX1.130: BOOL:=FALSE;
				(*sg stop by derrick winch*)
			MXderrAnaSigPos AT %MX1.131: BOOL:=FALSE;
				(*derrick winch analog signal positiv*)
			MXderrAnaSigNeg AT %MX1.132: BOOL:=FALSE;
				(*derrick winch analog signal negativ*)
			MXderrLocalStopU AT %MX1.133: BOOL:=FALSE;
				(*derrick winch local stop up*)
			MXderrLocalStopD AT %MX1.134: BOOL:=FALSE;
				(*derrick winch local stop down*)
			MXderrGlobStopUp AT %MX1.135: BOOL:=FALSE;
				(*derrick winch global stop up*)
			MXderrGlobStopDn AT %MX1.136: BOOL:=FALSE;
				(*derrick winch global stop down*)
			MXhg1LockTrimot AT %MX1.138: BOOL:=FALSE;
				(*hg1 lock trimot*)
			MXhg2LockTrimot AT %MX1.139: BOOL:=FALSE;
				(*hg2 lock trimot*)
			MXadStopHg1Dn AT %MX1.140: BOOL:=FALSE;
				(*additional device stop hg1 lowering*)
			MXadStopHg2Dn AT %MX1.141: BOOL:=FALSE;
				(*additional device stop hg2 lowering*)
			MXriJoyVibr1Ext AT %MX1.142: BOOL:=FALSE;
				(*right joystick vibrator 1 external analog signal*)
			MXriJoyVibr2Ext AT %MX1.143: BOOL:=FALSE;
				(*right joystick vibrator 2 external analog signal*)
			MXleJoyVibr1Ext AT %MX1.144: BOOL:=FALSE;
				(*left joystick vibrator 1 external analog signal*)
			MXleJoyVibr2Ext AT %MX1.145: BOOL:=FALSE;
				(*left joystick vibrator 2 external analog signal*)
			MXlimitSwBridged AT %MX1.146: BOOL:=FALSE;
				(*X23 limit switches bridged for assembly operation*)
			MXadOilHeatAct AT %MX1.147: BOOL:=FALSE;
				(*additional device oil heating active*)
			MXlg2GlobalStopU AT %MX1.148: BOOL:=FALSE;
				(*luffing gear 2 global stop up*)
			MXlg2GlobalStopD AT %MX1.149: BOOL:=FALSE;
				(*luffing gear 2 global stop down*)
			MXlg2UpAngleStop AT %MX1.150: BOOL:=FALSE;
				(*luffing gear 2 stop up by angle*)
			MXlg2DnAngleStop AT %MX1.151: BOOL:=FALSE;
				(*luffing gear 2 stop down by angle*)
			MXoutputError AT %MX1.152: BOOL:=FALSE;
				(*output modul error*)
			MXforcedNeutral AT %MX1.153: BOOL:=FALSE;
				(*force neutral engine speed*)
			MXwindSpeedAct AT %MX1.154: BOOL:=FALSE;
				(*wind speed sensor present*)
			MXsgStopByLg2 AT %MX1.156: BOOL:=FALSE;
				(*sg stop by lg 2*)
			MXlmlFixedJibEna AT %MX1.157: BOOL:=FALSE;
				(*lml fixed  jib enabled*)
			MXadWinSynWork AT %MX1.158: BOOL:=FALSE;
				(*ad winch synchronize working*)
			MXadGrabCoWork AT %MX1.159: BOOL:=FALSE;
				(*ad grab control working*)
			MXlgMoveDerrick AT %MX1.160: BOOL:=FALSE;
				(*ad derrick: moving derrick preselected*)
			MXsgExtAnalSign AT %MX1.161: BOOL:=FALSE;
				(*slewing gear other, external analog signal*)
			MXsgSymStopRight AT %MX1.162: BOOL:=FALSE;
				(*symbol sg stop by sg limitation right*)
			MXsgSymStopLeft AT %MX1.163: BOOL:=FALSE;
				(*symbol sg stop by sg limitation left*)
			MXlmlStop110Perc AT %MX1.164: BOOL:=FALSE;
				(*lml stop and utilization over 110% (forward or backward)*)
			MXlg2ExtAnalSign AT %MX1.165: BOOL:=FALSE;
				(*LG2 other, external analog signal*)
			MXenabHyGrabOper AT %MX1.166: BOOL:=FALSE;
				(*enable hydr.Grab operation*)
			MXenablVibOperat AT %MX1.167: BOOL:=FALSE;
				(*enable vibrator operation*)
			MXenablHamOperat AT %MX1.168: BOOL:=FALSE;
				(*enable hammer operation*)
			MXludvExtPresSig AT %MX1.169: BOOL:=FALSE;
				(*LUDV pump other external pressure signal*)
			MXexDrWorking AT %MX1.170: BOOL:=FALSE;
				(*excentric drive working*)
			MXclampWorking AT %MX1.171: BOOL:=FALSE;
				(*clamping jaw working*)
			MXclampIsClosed AT %MX1.172: BOOL:=FALSE;
				(*clamping jaw clamp is closed*)
			MXpreClamClosJoy AT %MX1.173: BOOL:=FALSE;
				(*preselection clamp close with joystick button*)
			MXpreVibratorOn AT %MX1.174: BOOL:=FALSE;
				(*preselection vibrator on *)
			MXpreHam_VibJoy AT %MX1.175: BOOL:=FALSE;
				(*preselection vibrator/hammer with joystick*)
			MXvibratWorking AT %MX1.176: BOOL:=FALSE;
				(*vibrator working*)
			MXhammerWorking AT %MX1.177: BOOL:=FALSE;
				(*hammer working*)
			MXpreHammerOn AT %MX1.178: BOOL:=FALSE;
				(*preselection hammer on *)
			MXreleasHoistCyl AT %MX1.179: BOOL:=FALSE;
				(*release hoisting cylinder  driven  by lg2*)
			MXhg1UpLimBridge AT %MX1.180: BOOL:=FALSE;
				(*upper limit switch brigde hoisting gear 1*)
			MXhg1LoLimBridge AT %MX1.181: BOOL:=FALSE;
				(*lower limit switch brigde hoisting gear 1*)
			MXhg2UpLimBridge AT %MX1.182: BOOL:=FALSE;
				(*upper limit switch brigde hoisting gear 2*)
			MXhg2LoLimBridge AT %MX1.183: BOOL:=FALSE;
				(*lower limit switch brigde hoisting gear 2*)
			MXhg1ExitProg AT %MX1.184: BOOL:=FALSE;
				(*HG 1 exit programm*)
			MXhg2ExitProg AT %MX1.185: BOOL:=FALSE;
				(*HG 2 exit programm*)
			MXdrillFreefPres AT %MX1.186: BOOL:=FALSE;
				(*preselection freefall drilling mode*)
			MXsgBrakeExterna AT %MX1.189: BOOL:=FALSE;
				(*set sg brake from external*)
			MXSecurityCheck AT %MX1.190: BOOL:=FALSE;
				(*security check aktive*)
			MXadHydAdToLudv1 AT %MX1.191: BOOL:=FALSE;
				(*added sig. to add.hyd.sig. LUDV pu1*)
			MXadHydAdToLudv2 AT %MX1.192: BOOL:=FALSE;
				(*added sig. to add.hyd.sig. LUDV pu2*)
			MXsgLockMomReg AT %MX1.193: BOOL:=FALSE;
				(*sg lock sg moment regulator*)
			MXderrickPossib AT %MX1.194: BOOL:=FALSE;
				(*lift crane: derrick is possible*)
			MXad1Hg1LockClut AT %MX1.195: BOOL:=FALSE;
				(*add.1 HG 1 global lock clutch*)
			MXad2Hg1LockClut AT %MX1.196: BOOL:=FALSE;
				(*add.2 HG 1 global lock clutch*)
			MXad1Hg2LockClut AT %MX1.197: BOOL:=FALSE;
				(*add.1 HG 2 global lock clutch*)
			MXad2Hg2LockClut AT %MX1.198: BOOL:=FALSE;
				(*add.2 HG 2 global lock clutch*)
			MXdgcBlockLml AT %MX1.199: BOOL:=FALSE;
				(*dgc block lml*)
			MXLiftCrane AT %MX1.200: BOOL:=FALSE;
				(*crawler crane is lift crane type*)
			MXlmlSounder AT %MX1.201: BOOL:=FALSE;
				(*sounder lml stop*)
			MXrcLmlSounder AT %MX1.202: BOOL:=FALSE;
				(*remote control lml sounder*)
			MXauxwin3Active AT %MX1.203: BOOL:=FALSE;
				(*auxiliary winch 3 active*)
			MXludv3ExtAnaSig AT %MX1.204: BOOL:=FALSE;
				(*LUDV3 external analog signal*)
			MXdgcResRopeHg1 AT %MX1.205: BOOL:=FALSE;
				(*external reset rope length measuring hg1 by DGC*)
			MXdgcResRopeHg2 AT %MX1.206: BOOL:=FALSE;
				(*external reset rope length measuring hg2 by DGC*)
			MXlmlExitProg AT %MX1.207: BOOL:=FALSE;
				(*exit lml programm*)
			MXhdrOilTemError AT %MX1.208: BOOL:=FALSE;
				(*error hydr. oil temperature sensor*)
			MXlg2UpperLimOk AT %MX1.209: BOOL:=FALSE;
				(*LG 2 upper limit switch o.k.*)
			MXadDynGCPresel AT %MX1.210: BOOL:=FALSE;
				(*ad dynamic ground compaction preselected*)
			MXlgAFraLowLimOk AT %MX1.211: BOOL:=FALSE;
				(*additional lower limit switch LG / A-frame o.k.*)
			MXexitAddHydr AT %MX1.212: BOOL:=FALSE;
				(*additional hydraulic exit programm*)
			MXexitStabWinch AT %MX1.213: BOOL:=FALSE;
				(*ad stabilization winch exit programm*)
			MXexitDynGndComp AT %MX1.214: BOOL:=FALSE;
				(*ad dyn. ground comp. exit programm*)
			MXexitPolypGrab AT %MX1.215: BOOL:=FALSE;
				(*ad polyp grab exit programm*)
			MXjoyEngSpeStore AT %MX1.217: BOOL:=FALSE;
				(*engine speed store*)
			MXjoyEngSpeedUp AT %MX1.218: BOOL:=FALSE;
				(*engine speed adjust up*)
			MXjoyEngSpeedDn AT %MX1.219: BOOL:=FALSE;
				(*engine speed adjust down *)
			MXjoyBridgeFastS AT %MX1.220: BOOL:=FALSE;
				(*bridge fast speed on joystick*)
			MXjoyDgcPresel AT %MX1.221: BOOL:=FALSE;
				(*ad dyn. ground comp. preselection on joystick*)
			MXjoyWinchSyn AT %MX1.222: BOOL:=FALSE;
				(*ad winch synchronization preselection on joystick*)
			MXjoyGrapCont AT %MX1.223: BOOL:=FALSE;
				(*ad grap control preselection on joystick*)
			MXjoyLowerCont AT %MX1.224: BOOL:=FALSE;
				(*ad lower control preselection on joystick*)
			MXjoyStabWiFreeF AT %MX1.225: BOOL:=FALSE;
				(*ad stabilization winch freefall on joystick*)
			MXjoyStabWiFullP AT %MX1.226: BOOL:=FALSE;
				(*ad stabilization winch full pull on joystick*)
			MXjoySgFreeTurn AT %MX1.227: BOOL:=FALSE;
				(*sg free turn preselection on joystick*)
			MXjoyLgChange AT %MX1.228: BOOL:=FALSE;
				(*change luffing gear on joystick*)
			MXjoyHyGrabPre AT %MX1.229: BOOL:=FALSE;
				(*ad hydraulic grab preselection on joystick*)
			MXdgcActiveHg1 AT %MX1.230: BOOL:=FALSE;
				(*ad dynamic ground compaction hg1 active*)
			MXdgcActiveHg2 AT %MX1.231: BOOL:=FALSE;
				(*ad dynamic ground compaction hg2 active*)
			MXdgcHg1GtPoToRo AT %MX1.232: BOOL:=FALSE;
				(*ad dynamic ground compaction hg1 get pounder to Rope*)
			MXdgcHg2GtPoToRo AT %MX1.233: BOOL:=FALSE;
				(*ad dynamic ground compaction hg2 get pounder to Rope*)
			MXdgcHg1PouOnRop AT %MX1.234: BOOL:=FALSE;
				(*ad dynamic ground compaction hg1 pounder is on the Rope*)
			MXdgcHg2PouOnRop AT %MX1.235: BOOL:=FALSE;
				(*ad dynamic ground compaction hg2 pounder is on the Rope*)
			MXdgcHg1SlipFall AT %MX1.236: BOOL:=FALSE;
				(*ad dynamic ground compaction hg1 slipping fall*)
			MXdgcHg2SlipFall AT %MX1.237: BOOL:=FALSE;
				(*ad dynamic ground compaction hg2 slipping fall*)
			MXdgcHg1FreeFall AT %MX1.238: BOOL:=FALSE;
				(*ad dynamic ground compaction hg1 free fall*)
			MXdgcHg2FreeFall AT %MX1.239: BOOL:=FALSE;
				(*ad dynamic ground compaction hg2 free fall*)
			MXdgcHg1SlowDown AT %MX1.240: BOOL:=FALSE;
				(*ad dynamic ground compaction hg1 slow down fall*)
			MXdgcHg2SlowDown AT %MX1.241: BOOL:=FALSE;
				(*ad dynamic ground compaction hg2 slow down fall*)
			MXhg1ClutchExt AT %MX1.242: BOOL:=FALSE;
				(*ad dgc hg1 clutch external control*)
			MXhg2ClutchExt AT %MX1.243: BOOL:=FALSE;
				(*ad dgc hg2 clutch external control*)
			MXad1LockFreefal AT %MX1.244: BOOL:=FALSE;
				(*ad 1 lock freefall*)
			MXad2LockFreefal AT %MX1.245: BOOL:=FALSE;
				(*ad 2 lock freefall*)
			MXad3LockFreefal AT %MX1.246: BOOL:=FALSE;
				(*ad 3 lock freefall*)
			MXhg1EnabFastSpe AT %MX1.247: BOOL:=FALSE;
				(*enable fast speed operation hg1*)
			MXhg2EnabFastSpe AT %MX1.248: BOOL:=FALSE;
				(*enable fast speed operation hg2*)
			MXdgcAutomStart AT %MX1.249: BOOL:=FALSE;
				(*ad dynamic ground compaction automatic start*)
			MXpolypGrabPres AT %MX1.250: BOOL:=FALSE;
				(*ad polyp grab preselected*)
			MXenabGrabPresel AT %MX1.251: BOOL:=FALSE;
				(*ad polyp grab enable preselected*)
			MXgrabGlobalStop AT %MX1.252: BOOL:=FALSE;
				(*ad global stop polyp grab*)
			MXgrabSigClose AT %MX1.253: BOOL:=FALSE;
				(*ad grab close*)
			MXgrabSigOpen AT %MX1.254: BOOL:=FALSE;
				(*ad grab open*)
			MXhydrGrabActive AT %MX1.255: BOOL:=FALSE;
				(*ad hydr. grab is active*)
			MXpolyGrabActive AT %MX1.256: BOOL:=FALSE;
				(*ad polyp grab is active*)
			MXlmlHSMode AT %MX1.257: BOOL:=FALSE;
				(*lml excavator mode*)
			MXresetPointNr AT %MX1.258: BOOL:=FALSE;
				(*pde dgc reset point number*)
			MXlmlBlockHg1 AT %MX1.259: BOOL:=FALSE;
				(*lml block hg1 by load location 2 and lml mode 3*)
			MXboomWithFlap AT %MX1.260: BOOL:=FALSE;
				(*boom head with flap is mounted *)
			MXlmlStarted AT %MX1.261: BOOL:=FALSE;
				(*lml started (asynchron task was calculated one time)*)
			MXpresHangLeader AT %MX1.262: BOOL:=FALSE;
				(*add. preselection hanging leader*)
			MXenabHangLeader AT %MX1.263: BOOL:=FALSE;
				(*add. enable hanging leader*)
			MXx25KeybMounted AT %MX1.264: BOOL:=FALSE;
				(*X25 keyboard mounted*)
			MXleaderInZero AT %MX1.265: BOOL:=FALSE;
				(*leader in zero position*)
			MXpresLeaderZero AT %MX1.266: BOOL:=FALSE;
				(*preselection set leader to zero*)
			MXsetLeaderZero AT %MX1.267: BOOL:=FALSE;
				(*enable set leader to zero*)
			MXsetCursorOn AT %MX1.268: BOOL:=FALSE;
				(*set cursor graph. window on*)
			MXleaderStopBack AT %MX1.269: BOOL:=FALSE;
				(*leader stop backward*)
			MXz6LocStopOut AT %MX1.270: BOOL:=FALSE;
				(*Z6 local stop out (left)*)
			MXz6LocStopIn AT %MX1.271: BOOL:=FALSE;
				(*Z6 local stop in (right)*)
			MXz6OutPresel AT %MX1.272: BOOL:=FALSE;
				(*Z6 cylinder preselect out (left)*)
			MXz6InPresel AT %MX1.273: BOOL:=FALSE;
				(*Z6 cylinder preselect in (right)*)
			MXz6GlobalStop AT %MX1.274: BOOL:=FALSE;
				(*Z6 cylinder global stop*)
			MXz2LocStopOut AT %MX1.275: BOOL:=FALSE;
				(*Z2 local stop out*)
			MXz2LocStopIn AT %MX1.276: BOOL:=FALSE;
				(*Z2 local stop in *)
			MXz2OutPresel AT %MX1.277: BOOL:=FALSE;
				(*Z2 cyl. preselect out*)
			MXz2InPresel AT %MX1.278: BOOL:=FALSE;
				(*Z2 cyl. preselect in*)
			MXz2GlobalStop AT %MX1.279: BOOL:=FALSE;
				(*Z2 cylinder global stop*)
			MXz4LocStopOut AT %MX1.280: BOOL:=FALSE;
				(*Z4 local stop out*)
			MXz4LocStopIn AT %MX1.281: BOOL:=FALSE;
				(*Z4 local stop in *)
			MXz4OutPresel AT %MX1.282: BOOL:=FALSE;
				(*Z4 cyl. preselect out*)
			MXz4InPresel AT %MX1.283: BOOL:=FALSE;
				(*Z4 cyl. preselect in*)
			MXz4GlobalStop AT %MX1.284: BOOL:=FALSE;
				(*Z4 cylinder global stop*)
			MXz3LocStopOut AT %MX1.285: BOOL:=FALSE;
				(*Z3 local stop out*)
			MXz3LocStopIn AT %MX1.286: BOOL:=FALSE;
				(*Z3 local stop in *)
			MXz3OutPresel AT %MX1.287: BOOL:=FALSE;
				(*Z3 cyl. preselect out*)
			MXz3InPresel AT %MX1.288: BOOL:=FALSE;
				(*Z3 cyl. preselect in*)
			MXz3GlobalStop AT %MX1.289: BOOL:=FALSE;
				(*Z3 cylinder global stop*)
			MXz17LocStopIn AT %MX1.290: BOOL:=FALSE;
				(*Z17 local stop in *)
			MXz17LocStopOut AT %MX1.291: BOOL:=FALSE;
				(*Z17 local stop out*)
			MXz17OutPresel AT %MX1.292: BOOL:=FALSE;
				(*Z17 cyl. preselect out*)
			MXz17InPresel AT %MX1.293: BOOL:=FALSE;
				(*Z17 cyl. preselect in*)
			MXz17GlobalStop AT %MX1.294: BOOL:=FALSE;
				(*Z17 cylinder global stop*)
			MXplGuiLocStopIn AT %MX1.295: BOOL:=FALSE;
				(*pile guide cylinder local stop in*)
			MXplGuiLocStopOu AT %MX1.296: BOOL:=FALSE;
				(*pile guide cylinder local stop out*)
			MXplGuiOutPresel AT %MX1.297: BOOL:=FALSE;
				(*pile guide cylinder preselect out*)
			MXplGuidInPresel AT %MX1.298: BOOL:=FALSE;
				(*pile guide cylinder preselect in*)
			MXplGuidGlobStop AT %MX1.299: BOOL:=FALSE;
				(*pile guide cylinder global stop*)
			MXlgStopByLead AT %MX1.300: BOOL:=FALSE;
				(*lg stop by leader adjustment*)
			MXlg2StopByLead AT %MX1.301: BOOL:=FALSE;
				(*lg2 stop by leader adjustment*)
			MXsgStopByLead AT %MX1.302: BOOL:=FALSE;
				(*sg stop by leader adjustment*)
			MXhg2StopByLead AT %MX1.303: BOOL:=FALSE;
				(*hg2 stop by leader adjustment*)
			MXjoyLeadAdjust1 AT %MX1.304: BOOL:=FALSE;
				(*leader adjustment 1 on joystick*)
			MXjoyLeadAdjust2 AT %MX1.305: BOOL:=FALSE;
				(*leader adjustment 2 on joystick*)
			MXleadAdjust1Y AT %MX1.306: BOOL:=FALSE;
				(*leader adjustment 1 Y direction*)
			MXleadAdjust2Y AT %MX1.307: BOOL:=FALSE;
				(*leader adjustment 2 Y direction*)
			MXleadAdjust1X AT %MX1.308: BOOL:=FALSE;
				(*leader adjustment 1 X direction*)
			MXleadAdjust2X AT %MX1.309: BOOL:=FALSE;
				(*leader adjustment 2 X direction*)
			MXleadAdj1Ypos AT %MX1.310: BOOL:=FALSE;
				(*leader adjustment 1 Y direction positiv*)
			MXleadAdj1Yneg AT %MX1.311: BOOL:=FALSE;
				(*leader adjustment 1 Y direction negativ*)
			MXleadAdj2Ypos AT %MX1.312: BOOL:=FALSE;
				(*leader adjustment 2 Y direction positiv*)
			MXleadAdj2Yneg AT %MX1.313: BOOL:=FALSE;
				(*leader adjustment 2 Y direction negativ*)
			MXleadAdj1Xpos AT %MX1.314: BOOL:=FALSE;
				(*leader adjustment 1 X direction positiv*)
			MXleadAdj1Xneg AT %MX1.315: BOOL:=FALSE;
				(*leader adjustment 1 X direction negativ*)
			MXleadAdj2Xpos AT %MX1.316: BOOL:=FALSE;
				(*leader adjustment 2 X direction positiv*)
			MXleadAdj2Xneg AT %MX1.317: BOOL:=FALSE;
				(*leader adjustment 2 X direction negativ*)
			MXpdeDgcHg1Activ AT %MX1.318: BOOL:=FALSE;
				(*pde dgc hg1 active*)
			MXpdeDgcHg2Activ AT %MX1.319: BOOL:=FALSE;
				(*pde dgc hg2 active*)
			MXpdeStart AT %MX1.320: BOOL:=FALSE;
				(*pde start*)
			MXpdeStop AT %MX1.321: BOOL:=FALSE;
				(*pde stop*)
			MXpdeTrigger1 AT %MX1.322: BOOL:=FALSE;
				(*pde trigger 1*)
			MXpdeDgcActive AT %MX1.323: BOOL:=FALSE;
				(*pde dgc activated*)
			MXpdeResRopeHg2 AT %MX1.324: BOOL:=FALSE;
				(*external reset rope length measuring hg2 by PDE*)
			MXpdeSetStart AT %MX1.325: BOOL:=FALSE;
				(*pde set start*)
			MXpdeSetStop AT %MX1.326: BOOL:=FALSE;
				(*pde set stop*)
			MXpdeConnection AT %MX1.327: BOOL:=TRUE;
				(*pde connection Master Slave*)
			MXpdeIgnoreCycle AT %MX1.328: BOOL:=FALSE;
				(*pde hydr. grab ignore cycle*)
			MXpdeResRopeHg1 AT %MX1.329: BOOL:=FALSE;
				(*external reset rope length measuring hg1 by PDE*)
			MXgrabContrByX23 AT %MX1.330: BOOL:=FALSE;
				(*grab control by X23 switch preselect*)
			MXconcCrushPres AT %MX1.331: BOOL:=FALSE;
				(*ad concrete crusher preselected*)
			MXjoyGrabSlewPre AT %MX1.332: BOOL:=FALSE;
				(*add. preselection polyp grab/conc. crusher slewing on Joystick *)
			MXgrEnJoySigSlew AT %MX1.333: BOOL:=FALSE;
				(*add. enable polyp grab/conc. crusher slewing*)
			MXpassWinchPres AT %MX1.334: BOOL:=FALSE;
				(*preselection passenger winch *)
			MXpassWinchActiv AT %MX1.335: BOOL:=FALSE;
				(*passenger winch active*)
			MXpwGlobalStopUp AT %MX1.336: BOOL:=FALSE;
				(*passenger winch global stop up*)
			MXpwGlobalStopDn AT %MX1.337: BOOL:=FALSE;
				(*passenger winch global stop down*)
			MXpwAnalSigPos AT %MX1.338: BOOL:=FALSE;
				(*passenger winch anlog signal positive*)
			MXpwAnalSigNeg AT %MX1.339: BOOL:=FALSE;
				(*passenger winch anlog signal negativ*)
			MXpwExtAnalSign AT %MX1.340: BOOL:=FALSE;
				(*passenger winch external signal*)
			MXpwSlackRopeOk AT %MX1.341: BOOL:=FALSE;
				(*passenger winch slack rope o.k.*)
			MXlmlLoadOnJib AT %MX1.342: BOOL:=FALSE;
				(*lml load location on fixed or luffing jib head*)
			MXjoystickInZero AT %MX1.343: BOOL:=FALSE;
				(*joystick in zero position (no control signal is active)*)
			MXlmlTypeANSI AT %MX1.344: BOOL:=FALSE;
				(*lml load limits are calculated according to ANSI*)
			MXNotUsed345 AT %MX1.345: BOOL:=FALSE;
			MXlmlStopLgUp AT %MX1.346: BOOL:=FALSE;
				(*lml stop lg up*)
			MXlmlStopLgDn AT %MX1.347: BOOL:=FALSE;
				(*lml stop lg down*)
			MXlmlDeadlockAct AT %MX1.348: BOOL:=FALSE;
				(*lml 2010 rigging is activated*)
			MXdgcNewPoint AT %MX1.350: BOOL:=FALSE;
				(*add. dgc new compaction point*)
			MXcylOperatWork AT %MX1.351: BOOL:=FALSE;
				(*enable cylinder operation working*)
			MXgrabEnaPowStag AT %MX1.352: BOOL:=FALSE;
				(*enable power stage hydr. grab*)
			MXludvSectActiv AT %MX1.353: BOOL:=FALSE;
				(*ludv section is active*)
			MXhydrGrab1Sect AT %MX1.354: BOOL:=FALSE;
				(*hydr. grab with only 1 ludv section*)
			MXadSBHydrGrab AT %MX1.355: BOOL:=FALSE;
				(*add. soletanche bachy hydraulic grab control*)
			MXadSMHydrGrab AT %MX1.356: BOOL:=FALSE;
				(*add. soilmec hydraulic grab control*)
			MXadLEHydrGrab AT %MX1.357: BOOL:=FALSE;
				(*add. leffer hydraulic grab control*)
			MXlmlStopDeactiv AT %MX1.358: BOOL:=FALSE;
				(*lml stop deactivated by an additional device *)
			MXengStarterActi AT %MX1.359: BOOL:=FALSE;
				(*engine starter activated*)
			MXad3Hg1LockClut AT %MX1.360: BOOL:=FALSE;
				(*add.3 HG 1 global lock clutch*)
			MXad3Hg2LockClut AT %MX1.361: BOOL:=FALSE;
				(*add.3 HG 2 global lock clutch*)
			MXdgcPointFinish AT %MX1.362: BOOL:=FALSE;
				(*add. dgc compaction point finished*)
			MXlmlDataTimeout AT %MX1.363: BOOL:=FALSE;
				(*lml timeout data update*)
			MXlmlDataTimeAct AT %MX1.364: BOOL:=FALSE;
				(*lml timeout data update active*)
			MXlmlSysRunning AT %MX1.365: BOOL:=FALSE;
				(*lml system running*)
			MXaFrameCylPrese AT %MX1.367: BOOL:=FALSE;
				(*a frame cylinder preselcted*)
			MXrelAFrameCyl AT %MX1.368: BOOL:=FALSE;
				(*a frame cylinder released*)
			MXhgSet2ndPump AT %MX1.369: BOOL:=FALSE;
				(*hg set 2nd hg pump*)
			MXlowPoOilCoApar AT %MX1.370: BOOL:=FALSE;
				(*separat lowering power regulation valve and oil cooler drive*)
			MXremContPresel AT %MX1.371: BOOL:=FALSE;
				(*remote control preselected by X12 Button*)
			MXrcModuleActive AT %MX1.372: BOOL:=FALSE;
				(*remote control module activated*)
			MXremContActive AT %MX1.373: BOOL:=FALSE;
				(*remote control activated*)
			MXremContRadioOk AT %MX1.374: BOOL:=FALSE;
				(*remote control radio connection ok*)
			MXrcCanTimeout AT %MX1.375: BOOL:=FALSE;
				(*remote control CAN timeout*)
			MXrcStopAllFunct AT %MX1.376: BOOL:=FALSE;
				(*remote control stop all functions*)
			MXrcHoldValues AT %MX1.377: BOOL:=FALSE;
				(*remote control hold values while radio  interference*)
			MXrcStartEngine AT %MX1.378: BOOL:=FALSE;
				(*remote control start engine*)
			MXrcStopEngine AT %MX1.379: BOOL:=FALSE;
				(*remote control stop engine*)
			MXrcLockFreeTurn AT %MX1.380: BOOL:=FALSE;
				(*remote control lock sg free turn*)
			MXrcBridgeLml AT %MX1.381: BOOL:=FALSE;
				(*remote control bridge lml*)
			MXrcLudvMachine AT %MX1.383: BOOL:=FALSE;
				(*remote control machine type is ludv (open hydraulic circuit)*)
			MXrcChangeContro AT %MX1.384: BOOL:=FALSE;
				(*remote control switching control rc / cabine*)
			MXrcAdBlockRemCo AT %MX1.385: BOOL:=FALSE;
				(*remote control ad block remote control operation*)
			MXswitTravelGear AT %MX1.386: BOOL:=FALSE;
				(*travelling gear is activated*)
			MXjoyPolyGrOpen AT %MX1.387: BOOL:=FALSE;
				(*ad polyp grab open digital*)
			MXjoyPolyGrClose AT %MX1.388: BOOL:=FALSE;
				(*ad polyp grab close digital*)
			MXjoyDdGearBox AT %MX1.389: BOOL:=FALSE;
				(*joy stick presel gear box drilling drive*)
			MXjoyDrillDrPre AT %MX1.390: BOOL:=FALSE;
				(*joy stick preselection drilling drive*)
			MXenabDdPresel AT %MX1.391: BOOL:=FALSE;
				(*enable drilling drive preselected*)
			MXjoyDestrConTen AT %MX1.392: BOOL:=FALSE;
				(*add. preselection destruction constant tension (clutch)*)
			MXhg1LedFastWin AT %MX1.393: BOOL:=FALSE;
				(*enable led fast winch operation hg1*)
			MXhg2LedFastWin AT %MX1.394: BOOL:=FALSE;
				(*enable led fast winch operation hg2*)
			MXhg1ErrorJoyst AT %MX1.397: BOOL:=FALSE;
				(*hg 1 joystick error*)
			MXhg2ErrorJoyst AT %MX1.398: BOOL:=FALSE;
				(*hg 2 joystick error*)
			MXlgErrorJoyst AT %MX1.399: BOOL:=FALSE;
				(*lg joystick error*)
			MXlmlLoadMainBom AT %MX1.400: BOOL:=FALSE;
				(*lml load location on main boom and luffing jib mounted*)
			MXcouCarActive AT %MX1.401: BOOL:=FALSE;
				(*counterweight carrier active*)
			MXlgUpStopFaBaSu AT %MX1.402: BOOL:=FALSE;
				(*lg up stop by fall back support angle and limit switsch*)
			MXlmlBlockCrawle AT %MX1.403: BOOL:=FALSE;
				(*lml blocked crawlers active*)
			MXlmlStopByBCraw AT %MX1.404: BOOL:=FALSE;
				(*lml stop by blocked crawler, slewing gear not in position*)
			MXlmlBlockHg2 AT %MX1.405: BOOL:=FALSE;
				(*lml block hg1 by load location 2 and lml mode 3*)
			MXlmlMidfall AT %MX1.406: BOOL:=FALSE;
				(*lml Midfall*)
			MXlmlErrGeometri AT %MX1.407: BOOL:=FALSE;
				(*lml error geometrical sensors*)
			MXlmlErrLoaCalc AT %MX1.408: BOOL:=FALSE;
				(*lml error geometrical sensors load calculation*)
			MXlmlOperating AT %MX1.409: BOOL:=FALSE;
				(*lml operating (not blocked)*)
			MXlmlErrAngPivPi AT %MX1.410: BOOL:=FALSE;
				(*lml error angle sensor pivot piece main boom*)
			MXlmlKmlHptRed AT %MX1.411: BOOL:=FALSE;
				(*lml with redundant kml at main boom*)
			MXfuelContWarnin AT %MX1.412: BOOL:=FALSE;
				(*fuel content too low warning*)
			MXscOneLimitSw AT %MX1.413: BOOL:=FALSE;
				(*screen: one or more limit switch symbols are active*)
			MXscMoreLimitSw AT %MX1.414: BOOL:=FALSE;
				(*screen: more limit switch symbols are active*)
			MXbbActivatByLml AT %MX1.416: BOOL:=FALSE;
				(*blackbox activated by lml (changes 2010)*)
			MXengStopReq AT %MX1.417: BOOL:=FALSE;
				(*engine stop required*)
			MXanyFunctActive AT %MX1.418: BOOL:=FALSE;
				(*any function active, ludv stopp*)
			MXpreHigEngSpeed AT %MX1.419: BOOL:=FALSE;
				(*preselect high engine speed*)
			MXengModPLDactiv AT %MX1.420: BOOL:=FALSE;
				(*engine modul PLD activ*)
			MXengModDC5activ AT %MX1.421: BOOL:=FALSE;
				(*engine modul DC5 activ*)
			MXengMinEngSpEna AT %MX1.422: BOOL:=FALSE;
				(*engine min engine enable*)
			MXjoyMagUnitOn AT %MX1.423: BOOL:=FALSE;
				(*joystick button magnet on*)
			MXjoyMagUnitOff AT %MX1.424: BOOL:=FALSE;
				(*joystick button magnet off*)
			MXenabMagnetUnit AT %MX1.425: BOOL:=FALSE;
				(*enable add. magnetic unit*)
			MXexitAddMagUnit AT %MX1.426: BOOL:=FALSE;
				(*exit add. magnetic unit*)
			MXexitHydrGrab AT %MX1.427: BOOL:=FALSE;
				(*exit add. hydraulic grab (concrete crusher)*)
			MXlowPowLimitAct AT %MX1.428: BOOL:=FALSE;
				(*lower power limitation active*)
			MXpresCylOpera AT %MX1.429: BOOL:=FALSE;
				(*preselection cylinder operation valve*)
			MXhamExitProgram AT %MX1.430: BOOL:=FALSE;
				(*hammer exit programm*)
			MXvibExitProgram AT %MX1.431: BOOL:=FALSE;
				(*vibrator exit programm*)
			MXclampAutoClose AT %MX1.432: BOOL:=FALSE;
				(*clamping jaw automatic close*)
			MXenabDgcOperat AT %MX1.433: BOOL:=FALSE;
				(*add. dynamic ground compaction enable*)
			MXenabMainOperat AT %MX1.434: BOOL:=FALSE;
				(*main operation enable*)
			MXnewModeSelect AT %MX1.435: BOOL:=FALSE;
				(*new mode is selected*)
			MXlmlErrLoaCaDer AT %MX1.436: BOOL:=FALSE;
				(*lml error sensors load calculation derrick*)
			MXlmlSingleScale AT %MX1.437: BOOL:=FALSE;
				(*lml single scale sensors (not redundant)*)
			MXexitHangLeader AT %MX1.439: BOOL:=FALSE;
				(*exit hanging leader programm *)
			MXenabPolyGrabOp AT %MX1.440: BOOL:=FALSE;
				(*enable polyp grab operation*)
			MXrelFanByOilTem AT %MX1.441: BOOL:=FALSE;
				(*release fan speed control by oil temperature*)
			MXaddMagUnitPre AT %MX1.442: BOOL:=FALSE;
				(*add. magnetic unit preselected*)
			MXhgFastSpeed AT %MX1.443: BOOL:=FALSE;
				(*HG 1 and 2 fast speed operation preselected*)
			MXhg1LedFastSpe AT %MX1.444: BOOL:=FALSE;
				(*enable led fast speed operation hg1*)
			MXhg2LedFastSpe AT %MX1.445: BOOL:=FALSE;
				(*enable led fast speed operation hg2*)
			MXextPressLimLg2 AT %MX1.446: BOOL:=FALSE;
				(*ext. press limit LG2*)
			MXenabDragliOper AT %MX1.447: BOOL:=FALSE;
				(*enable dragline operation*)
			MXexitLEHydrGrab AT %MX1.450: BOOL:=FALSE;
				(*exit add. Leffer hydraulic grab *)
			MXjoyLEHyGrabPre AT %MX1.451: BOOL:=FALSE;
				(*joystick release leffer hydr. grap open/close*)
			MXhg1SlacRoStopD AT %MX1.452: BOOL:=FALSE;
				(*add. hydr. grab slack hg1 rope stop down*)
			MXhg2SlacRoStopD AT %MX1.453: BOOL:=FALSE;
				(*add. hydr. grab slack hg2 rope stop down*)
			MXpreSlackRopPro AT %MX1.454: BOOL:=FALSE;
				(*preselection slack rope protection *)
			MXpreSlackRoPres AT %MX1.455: BOOL:=FALSE;
				(*prese. slack rope protection pressure control*)
			MXpreSlackRoLml AT %MX1.456: BOOL:=FALSE;
				(*prese. slack rope protection LML control*)
			MXpumpRedRopSlac AT %MX1.457: BOOL:=FALSE;
				(*reduction of the pump at slack rope *)
			MXpreMooringGrab AT %MX1.458: BOOL:=FALSE;
				(*preselection grap mooring control*)
			MXpresGrabZero AT %MX1.459: BOOL:=FALSE;
				(*preselection grap zero*)
			MXsetGrabZero AT %MX1.460: BOOL:=FALSE;
				(*set grap zero*)
			MXgrabRecorvalid AT %MX1.461: BOOL:=FALSE;
				(*grap PDE record valid*)
			MXgrabMooStopHg1 AT %MX1.462: BOOL:=FALSE;
				(*stop hoisting gear 1 at grap mooring start*)
			MXgrabMooStopHg2 AT %MX1.463: BOOL:=FALSE;
				(*stop hoisting gear 2 at grap mooring start*)
			MXJoyGrabMovBaRi AT %MX1.464: BOOL:=FALSE;
				(*LeJoyTopRi grap move back or right*)
			MXJoyGrabMovFoLe AT %MX1.465: BOOL:=FALSE;
				(*LeJoyFronTopRi grap move forward*)
			MXJoyPreSlewLeRi AT %MX1.466: BOOL:=FALSE;
				(*LeJoyFronTopRi preselection grab slewing or incline le/ri *)
			MXjoyGrabSlewLe AT %MX1.467: BOOL:=FALSE;
				(*add. hydr. grab slewing left at joy stick button*)
			MXjoyGrabSlewRi AT %MX1.468: BOOL:=FALSE;
				(*add. hydr. grab slewing right at joy stick button*)
			MXgrabKeybMount AT %MX1.469: BOOL:=FALSE;
				(*add. grab keybords mounted*)
			MXLEhyGrabPresel AT %MX1.470: BOOL:=FALSE;
				(*Leffer: hydr. grab preselect*)
			MXpumpRedSlacRop AT %MX1.471: BOOL:=FALSE;
				(*pump reduction at slack rope limitation*)
			MXjoyGrMoorFreef AT %MX1.472: BOOL:=FALSE;
				(*ad. grab mooring freefall on joystick*)
			MXenabAutHoseWin AT %MX1.473: BOOL:=FALSE;
				(*add. hydraulic grab automatic hose winch*)
			MXpdeDataToPrint AT %MX1.474: BOOL:=FALSE;
				(*printer mode*)
			MXpdeDataToGraph AT %MX1.475: BOOL:=FALSE;
				(*graphic mode*)
			MXpdeGetInitOk AT %MX1.476: BOOL:=FALSE;
				(*get initialised O.K. from PDE*)
			MXexitSSHydrGrab AT %MX1.477: BOOL:=FALSE;
				(*exit add. SM/SB hydraulic grab *)
			MXSShyGrabPresel AT %MX1.478: BOOL:=FALSE;
				(*SM/SB: hydr. grab preselect*)
			MXjoySSGrabOpCl AT %MX1.479: BOOL:=FALSE;
				(*SM/SB: hydr. grab joystick open / close*)
			MXjoyHyGrabTurnR AT %MX1.481: BOOL:=FALSE;
				(*hydr. grab joystick turn right*)
			MXjoyHyGrabTurnL AT %MX1.482: BOOL:=FALSE;
				(*hydr. grab joystick turn left*)
			MXpdeGetBreak AT %MX1.483: BOOL:=FALSE;
				(*get break from pde*)
			MXpreLowEngSpeed AT %MX1.484: BOOL:=FALSE;
				(*preselect low engine speed*)
			MXemergOperat AT %MX1.487: BOOL:=FALSE;
				(*emergency operation*)
			MXhgLowerContAct AT %MX1.489: BOOL:=FALSE;
				(*hg lowering control active*)
			MXhg1StopLimLift AT %MX1.490: BOOL:=FALSE;
				(*hg1 stop lifting by hg hight limitation*)
			MXhg1StopLimLowe AT %MX1.491: BOOL:=FALSE;
				(*hg1 stop lowering by hg hight limitation*)
			MXhg2StopLimLift AT %MX1.492: BOOL:=FALSE;
				(*hg2 stop lifting by hg hight limitation*)
			MXhg2StopLimLowe AT %MX1.493: BOOL:=FALSE;
				(*hg2 stop lowering by hg hight limitation*)
			MXhg1SymStopLift AT %MX1.494: BOOL:=FALSE;
				(*hg1 symbol stop lifting hg hight limitation*)
			MXhg1SymStopLowe AT %MX1.495: BOOL:=FALSE;
				(*hg1 symbol stop lowering hg hight limitation*)
			MXhg2SymStopLift AT %MX1.496: BOOL:=FALSE;
				(*hg2 symbol stop lifting hg hight limitation*)
			MXhg2SymStopLowe AT %MX1.497: BOOL:=FALSE;
				(*hg2 symbol stop lowering hg hight limitation*)
			MXhgHightLimAct AT %MX1.498: BOOL:=FALSE;
				(*hg hight limitation activ*)
			MXradLimVisActiv AT %MX1.499: BOOL:=FALSE;
				(*radius limitation activ*)
			MXhg1WinchMove AT %MX1.500: BOOL:=FALSE;
				(*hg1 winch is moving*)
			MXhg2WinchMove AT %MX1.501: BOOL:=FALSE;
				(*hg2 winch is moving*)
			MXangleSenAnaErr AT %MX1.502: BOOL:=FALSE;
				(*sg analog angle sensor error*)
			MXsgAngSenError AT %MX1.503: BOOL:=FALSE;
				(*sg angle sensor error*)
			MXsgAngSenDiff AT %MX1.504: BOOL:=FALSE;
				(*sg angle sensor difference*)
			MXpwEnPowStage AT %MX1.505: BOOL:=FALSE;
				(*pw enable power stage*)
			MXexDrPreJoy AT %MX1.506: BOOL:=FALSE;
				(*preselection excetric drive with joy stick*)
			MXjoyExcentDrIn AT %MX1.507: BOOL:=FALSE;
				(*excetric drive in with joy stick*)
			MXjoyExcentDrOut AT %MX1.508: BOOL:=FALSE;
				(*excetric drive out with joy stick*)
			MXenabKelGrabOpe AT %MX1.509: BOOL:=FALSE;
				(*enable add. kelly grab operation*)
			MXenabHyGrabHose AT %MX1.510: BOOL:=FALSE;
				(*enable add. hydr. grab with hose winch *)
			MXexitKelHyGrab AT %MX1.511: BOOL:=FALSE;
				(*exit add. kelly grab operation*)
			MXKelHyGrabPre AT %MX1.512: BOOL:=FALSE;
				(*add. kelly grab operation preselect*)
			MXenablDrillOper AT %MX1.513: BOOL:=FALSE;
				(*enable drilling drive operation*)
			MXddAnalSigPos AT %MX1.514: BOOL:=FALSE;
				(*drilling drive analog signal positiv*)
			MXddAnalSigNeg AT %MX1.515: BOOL:=FALSE;
				(*drilling drive analog signal negativ*)
			MXddEnabPowStage AT %MX1.516: BOOL:=FALSE;
				(*drilling drive enable power stage left/right*)
			MXddPumpInZero AT %MX1.517: BOOL:=FALSE;
				(*drilling drive in zero pos.*)
			MXddExtAnalSign AT %MX1.518: BOOL:=FALSE;
				(*drilling drive external signal*)
			MXddGlobalStop AT %MX1.519: BOOL:=FALSE;
				(*drilling drive global stop*)
			MXddPresGearBox AT %MX1.520: BOOL:=FALSE;
				(*drilling drive preselect gear box *)
			MXddShak_fawFast AT %MX1.521: BOOL:=FALSE;
				(*drilling drive shaking left/right, feed act.winch fast speed*)
			MXddExitProgram AT %MX1.522: BOOL:=FALSE;
				(*drilling drive exit programm*)
			MXddEnabShakDril AT %MX1.523: BOOL:=FALSE;
				(*enable shaking drilling drive*)
			MXddShakWorking AT %MX1.524: BOOL:=FALSE;
				(*drilling drive shaking left/right working*)
			MXrelLeaderPump AT %MX1.525: BOOL:=FALSE;
				(*release pump for leader valves*)
			MXrelPassTwiPump AT %MX1.526: BOOL:=FALSE;
				(*release pump for passenger transportation winch*)
			MXrelGrabValves AT %MX1.527: BOOL:=FALSE;
				(*release pumpe for grab valves*)
			MXsetMooringEnab AT %MX1.528: BOOL:=FALSE;
				(*set enable mooring for cyl. adjust.*)
			MXwarnSuppCrane AT %MX1.529: BOOL:=FALSE;
				(*warning supplementary crane needed*)
			MXlmlValidTLT AT %MX1.530: BOOL:=FALSE;
				(*lml actual position is in a valid load chart*)
			MXlmlNotErrectab AT %MX1.531: BOOL:=FALSE;
				(*lml actual configuration is not errectable*)
			MXengChargingOFF AT %MX1.533: BOOL:=FALSE;
				(*engine PLD battery charging*)
			MXenablMilOperat AT %MX1.534: BOOL:=FALSE;
				(*enable milling operation*)
			MXresetErrPage1 AT %MX1.535: BOOL:=FALSE;
				(*reset buzzer on main page*)
			CXadMilOperat AT %MX1.536: BOOL:=FALSE;
				(*used for autoecex.frc*)
			MXhg1JoySigLock AT %MX1.540: BOOL:=FALSE;
				(*hg1 joy stick signal locked for other function*)
			MXhg2JoySigLock AT %MX1.541: BOOL:=FALSE;
				(*hg2 joy stick signal locked for other function*)
			MXleaderMounted AT %MX1.542: BOOL:=FALSE;
				(*leader mounted*)
			MXadMoorExitProg AT %MX1.543: BOOL:=FALSE;
				(*exit additional mooring program*)
			MXadMooringEnabl AT %MX1.544: BOOL:=FALSE;
				(*addditional mooring enable*)
			MXadMooringActiv AT %MX1.545: BOOL:=FALSE;
				(*mooring activ*)
			MXmoorPreFeedAct AT %MX1.546: BOOL:=FALSE;
				(*preselection mooring feed action*)
			MXmoorEnaFeedAct AT %MX1.547: BOOL:=FALSE;
				(*enable mooring feed action*)
			MXmoorExtAnalSig AT %MX1.548: BOOL:=FALSE;
				(*extern analog signal mooring*)
			MXmoorAnaSigNeg AT %MX1.549: BOOL:=FALSE;
				(*mooring analog signal negativ*)
			MXmoorAnaSigPos AT %MX1.550: BOOL:=FALSE;
				(*mooring analog signal positiv*)
			MXmoorLocStopInt AT %MX1.551: BOOL:=FALSE;
				(*mooring local stop integrated*)
			MXmoorLoStopRapU AT %MX1.552: BOOL:=FALSE;
				(*mooring local stop rapid lifting*)
			MXmoorLoStopRapD AT %MX1.553: BOOL:=FALSE;
				(*mooring local stop rapid lowering*)
			MXmoorPumpInZero AT %MX1.554: BOOL:=FALSE;
				(*mooring pump in zero*)
			MXmoorEnPowStage AT %MX1.555: BOOL:=FALSE;
				(*mooring enable power stage lifting or lowering*)
			MXmoorEnabTrimot AT %MX1.556: BOOL:=FALSE;
				(*mooring enable trimot*)
			MXmoorPreJoySig AT %MX1.557: BOOL:=FALSE;
				(*ad. mooring presel. joy stick signal*)
			MXmoorExtPCont AT %MX1.558: BOOL:=FALSE;
				(*enable mooring extern pressure signal*)
			MXmoorStorAnaSig AT %MX1.559: BOOL:=FALSE;
				(*mooring store analog signal*)
			MXmoorExtResSto AT %MX1.560: BOOL:=FALSE;
				(*mooring extern reset store analog signal*)
			MXhg1ExtSigPcont AT %MX1.561: BOOL:=FALSE;
				(*hg1 external pressure control signal*)
			MXhg2ExtSigPcont AT %MX1.562: BOOL:=FALSE;
				(*hg2 external pressure control signal*)
			MXmoorUpLimBridg AT %MX1.563: BOOL:=FALSE;
				(*upper limit switch brigde mooring*)
			MXmoorLoLimBridg AT %MX1.564: BOOL:=FALSE;
				(*lower limit switch brigde mooring*)
			MXjoyStoreAnaSig AT %MX1.565: BOOL:=FALSE;
				(*store analog signal right joy stick*)
			MXhg1MooringLift AT %MX1.567: BOOL:=FALSE;
				(*hg1 mooring lifting (constant tension)*)
			MXhg2MooringLift AT %MX1.568: BOOL:=FALSE;
				(*hg2 mooring lifting (constant tension)*)
			MXspFaSpeLockHg1 AT %MX1.569: BOOL:=FALSE;
				(*ad fast speed 1 winch 2 pumps lock hg1*)
			MXspFaSpeLockHg2 AT %MX1.570: BOOL:=FALSE;
				(*ad fast speed 1 winch 2 pumps lock hg1*)
			MXslidTabStopUp AT %MX1.571: BOOL:=FALSE;
				(*stop sliding table up when crashes with pivot piece *)
			MXslidTablePrese AT %MX1.572: BOOL:=FALSE;
				(*preselection leader high adjusting winch*)
			MXslidTablAutoUp AT %MX1.573: BOOL:=FALSE;
				(*sliding table automatic up when table changes angle *)
			MXslidTablAutEna AT %MX1.574: BOOL:=FALSE;
				(*add. angle indication sliding table enable*)
			MXadSlidTabLiSwi AT %MX1.575: BOOL:=FALSE;
				(*add. limit switch sliding table (pievote piece)*)
			MXhangingLeader AT %MX1.576: BOOL:=FALSE;
				(*hanging leader active*)
			MXleadHighWinPre AT %MX1.577: BOOL:=FALSE;
				(*preselection leader high adjusting winch*)
			MXadSetLg2AuxWin AT %MX1.578: BOOL:=FALSE;
				(*ad set lg2 as auxiliary winch*)
			MXjoyAutomPresel AT %MX1.580: BOOL:=FALSE;
				(*ad automatic preselection on joystick*)
			MXjoyFloaCouWei AT %MX1.581: BOOL:=FALSE;
				(*adfloating counterweight cylinder preselection on joystick*)
			MXjoyPolyGrapPre AT %MX1.582: BOOL:=FALSE;
				(*ad polyp grap preselection on joystick*)
			MXengRequireStop AT %MX1.583: BOOL:=FALSE;
				(*engine required motor stop *)
			MXengSetWarnErr AT %MX1.584: BOOL:=FALSE;
				(*engine set warning Error*)
			MXhgSpecialLift AT %MX1.585: BOOL:=FALSE;
				(*hg special sensitive lifting function active*)
			MXlmlSounderAct AT %MX1.586: BOOL:=FALSE;
				(*lml sounder activ*)
			MXenabRemAccess AT %MX1.590: BOOL:=TRUE;
				(*enable remote access by modem*)
			MXremAccessState AT %MX1.591: BOOL:=FALSE;
				(*actual state of remote access by modem*)
			MXservSetAckn AT %MX1.592: BOOL:=FALSE;
				(*service set ackowledge*)
			MXservSetWarnBef AT %MX1.593: BOOL:=FALSE;
				(*service set warning before service time*)
			MXservSetWarnAft AT %MX1.594: BOOL:=FALSE;
				(*service set warning after service time*)
			MXservSetNotAckn AT %MX1.595: BOOL:=FALSE;
				(*service set not ackowledge*)
			MXforceIgnoreEDC AT %MX1.600: BOOL:=FALSE;
				(*force ignore EDC*)
			MXecM109Timeout AT %MX1.601: BOOL:=FALSE;
				(*external control module 109 timeout*)
			MXecM110Timeout AT %MX1.602: BOOL:=FALSE;
				(*external control module 110 timeout*)
			MXecM111Timeout AT %MX1.603: BOOL:=FALSE;
				(*external control module 111 timeout*)
			MXecM112Timeout AT %MX1.604: BOOL:=FALSE;
				(*external control module 112 timeout*)
			MXecM113Timeout AT %MX1.605: BOOL:=FALSE;
				(*external control module 113 timeout*)
			MXecM114Timeout AT %MX1.606: BOOL:=FALSE;
				(*external control module 114 timeout*)
			MXecM115Timeout AT %MX1.607: BOOL:=FALSE;
				(*external control module 115 timeout*)
			MXecM116Timeout AT %MX1.608: BOOL:=FALSE;
				(*external control module 116 timeout*)
			MXecM117Timeout AT %MX1.609: BOOL:=FALSE;
				(*external control module 117 timeout*)
			MXecM118Timeout AT %MX1.610: BOOL:=FALSE;
				(*external control module 118 timeout*)
			MXecM119Timeout AT %MX1.611: BOOL:=FALSE;
				(*external control module 119 timeout*)
			MXecM120Timeout AT %MX1.612: BOOL:=FALSE;
				(*external control module 120 timeout*)
			MXecM121Timeout AT %MX1.613: BOOL:=FALSE;
				(*external control module 121 timeout*)
			MXecM122Timeout AT %MX1.614: BOOL:=FALSE;
				(*external control module 122 timeout*)
			MXecM123Timeout AT %MX1.615: BOOL:=FALSE;
				(*external control module 123 timeout*)
			MXecM124Timeout AT %MX1.616: BOOL:=FALSE;
				(*external control module 109 timeout*)
			MXecM109isActive AT %MX1.617: BOOL:=FALSE;
				(*external control module 109 is active*)
			MXecM110isActive AT %MX1.618: BOOL:=FALSE;
				(*external control module 110 is active*)
			MXecM111isActive AT %MX1.619: BOOL:=FALSE;
				(*external control module 111 is active*)
			MXecM112isActive AT %MX1.620: BOOL:=FALSE;
				(*external control module 112  is active*)
			MXecM113isActive AT %MX1.621: BOOL:=FALSE;
				(*external control module 113 is active*)
			MXecM114isActive AT %MX1.622: BOOL:=FALSE;
				(*external control module 114 is active*)
			MXecM115isActive AT %MX1.623: BOOL:=FALSE;
				(*external control module 115 is active*)
			MXecM116isActive AT %MX1.624: BOOL:=FALSE;
				(*external control module 116 is active*)
			MXecM117isActive AT %MX1.625: BOOL:=FALSE;
				(*external control module 117 is active*)
			MXecM118isActive AT %MX1.626: BOOL:=FALSE;
				(*external control module 118 is active*)
			MXecM119isActive AT %MX1.627: BOOL:=FALSE;
				(*external control module 119 is active*)
			MXecM120isActive AT %MX1.628: BOOL:=FALSE;
				(*external control module 120 is active*)
			MXecM121isActive AT %MX1.629: BOOL:=FALSE;
				(*external control module 121 is active*)
			MXecM122isActive AT %MX1.630: BOOL:=FALSE;
				(*external control module 122 is active*)
			MXecM123isActive AT %MX1.631: BOOL:=FALSE;
				(*external control module 123 is active*)
			MXecM124isActive AT %MX1.632: BOOL:=FALSE;
				(*external control module 124 is active*)
			MXecModulsActive AT %MX1.633: BOOL:=FALSE;
				(*external control module are active*)
			MXecComTimeout AT %MX1.634: BOOL:=FALSE;
				(*external control communication timeout*)
			MXecOutputTransm AT %MX1.635: BOOL:=FALSE;
				(*external control output transmit*)
			MXecWatchdogBit AT %MX1.636: BOOL:=FALSE;
				(*external control watchdog bit*)
			MXecWatchdogFB AT %MX1.637: BOOL:=FALSE;
				(*external control watchdog feedback*)
			MXecWatchdogErr AT %MX1.638: BOOL:=FALSE;
				(*external control watchdog error*)
			MXecSgStopRi AT %MX1.639: BOOL:=FALSE;
				(*external control stop slewing gear right*)
			MXecSgStopLe AT %MX1.640: BOOL:=FALSE;
				(*external control stop slewing gear left*)
			MXecLGStopUp AT %MX1.641: BOOL:=FALSE;
				(*external control stop luffing gear lifting*)
			MXecLGStopDn AT %MX1.642: BOOL:=FALSE;
				(*external control stop luffing gear lowering*)
			MXecSgStpFreTurn AT %MX1.643: BOOL:=FALSE;
				(*external control stop slewing gear-free turn*)
			MXecTGStop AT %MX1.644: BOOL:=FALSE;
				(*external control stop travelling gear *)
			MXecHG1StopUp AT %MX1.645: BOOL:=FALSE;
				(*external control stop hoisting gear 1 lifting*)
			MXecHG1StopDn AT %MX1.646: BOOL:=FALSE;
				(*external control stop hoisting gear 1 lowering*)
			MXecHG2StopUp AT %MX1.647: BOOL:=FALSE;
				(*external control stop hoisting gear 2 lifting*)
			MXecHG2StopDn AT %MX1.648: BOOL:=FALSE;
				(*external control stop hoisting gear 2 lowering*)
			MXecAuxWinStopUp AT %MX1.649: BOOL:=FALSE;
				(*external control stop auxiliary winch lifting*)
			MXecAuxWinStopDn AT %MX1.650: BOOL:=FALSE;
				(*external control stop auxiliary winch lowering*)
			MXecAddWinStopUp AT %MX1.651: BOOL:=FALSE;
				(*external control stop additional winch lifting*)
			MXecAddWinStopDn AT %MX1.652: BOOL:=FALSE;
				(*external control stop additional winch lowering*)
			MXecRelLeadPump AT %MX1.653: BOOL:=FALSE;
				(*external control release leader pump*)
			MXecHg1extAnaSig AT %MX1.654: BOOL:=FALSE;
				(*external control pres.ext.cont. analog signal Hg1*)
			MXecHg2extAnaSig AT %MX1.655: BOOL:=FALSE;
				(*external control pres.ext.cont. analog signal Hg2*)
			MXecHg1preFastSp AT %MX1.656: BOOL:=FALSE;
				(*external control pres.ext.cont. fast speed Hg1 *)
			MXecHg2preFastSp AT %MX1.657: BOOL:=FALSE;
				(*external control pres.ext.cont. fast speed Hg2*)
			MXecHydWinchSyn AT %MX1.658: BOOL:=FALSE;
				(*external control pres.ext.cont. hydr.winch synch.*)
			MXecLmlStop AT %MX1.659: BOOL:=FALSE;
				(*external control LML-Stop*)
			MXecEnabExtOpMod AT %MX1.660: BOOL:=FALSE;
				(*external control enable operation mode*)
			MXecHg1RelExtCon AT %MX1.661: BOOL:=FALSE;
				(*external control release hg1*)
			MXecHg2RelExtCon AT %MX1.662: BOOL:=FALSE;
				(*external control release hg2*)
			MXecPreHigEngSp AT %MX1.663: BOOL:=FALSE;
				(*external control pres. high engine speed*)
			MXecConnectBit AT %MX1.664: BOOL:=FALSE;
				(*external control connection bit*)
			MXecLudvCutOff AT %MX1.665: BOOL:=FALSE;
				(*external control ludv cut off valve  *)
			MXecRelAddPump AT %MX1.666: BOOL:=FALSE;
				(*external control release add pump *)
			MXecRiJoyAna1Vib AT %MX1.667: BOOL:=FALSE;
				(*external control release right joyst. vibr.sig.1*)
			MXecRiJoyAna2Vib AT %MX1.668: BOOL:=FALSE;
				(*external control release right joyst. vibr.sig.2*)
			MXecLeJoyAna1Vib AT %MX1.669: BOOL:=FALSE;
				(*external control release left joyst. vibr.sig.1*)
			MXecLeJoyAna2Vib AT %MX1.670: BOOL:=FALSE;
				(*external control release left joyst. vibr.sig.2*)
			MXecHg1ExitProg AT %MX1.671: BOOL:=FALSE;
				(*external control presel. exit hg1 programm*)
			MXecHg2ExitProg AT %MX1.672: BOOL:=FALSE;
				(*external control presel. exit hg2 programm*)
			MXecConnectErr AT %MX1.673: BOOL:=FALSE;
				(*external control connection error *)
			MXhg1SpeedRedAct AT %MX1.680: BOOL:=FALSE;
				(*hg1 speed reduction is active*)
			MXhg2SpeedRedAct AT %MX1.681: BOOL:=FALSE;
				(*hg2 speed reduction is active*)
			MXlmlRedAllFunct AT %MX1.682: BOOL:=FALSE;
				(*lml reduces all functions*)
			MXlmlRedLoaIncFu AT %MX1.683: BOOL:=FALSE;
				(*lml reduces all load increasing functions*)
			MXhg1EnaExitProg AT %MX1.684: BOOL:=FALSE;
				(*enable exit hg1 programm*)
			MXhg2EnaExitProg AT %MX1.685: BOOL:=FALSE;
				(*enable exit hg2 programm*)
			MXstopFunLmlConf AT %MX1.686: BOOL:=FALSE;
				(*stop all function, wrong lml configuration*)
			MXsafetyProgSAF AT %MX1.687: BOOL:=FALSE;
				(*safety program stop all function*)
			MXsafetyProgPRA AT %MX1.688: BOOL:=FALSE;
				(*safety program power reduction active*)
			MXmachWiGearBox AT %MX1.689: BOOL:=FALSE;
				(*machine with gear box*)
			MXmachWiClosHydr AT %MX1.690: BOOL:=FALSE;
				(*machine with closed hydraulic circuits*)
			MXspeLifLockTrim AT %MX1.691: BOOL:=FALSE;
				(*special lifting function lock hg trimot*)
			MXspeLifLockFaSp AT %MX1.692: BOOL:=FALSE;
				(*special lifting function lock hg fast speed*)
			MXlockSpeFastSpe AT %MX1.693: BOOL:=FALSE;
				(*hg lock special fast speed one winch on two pumps*)
			MXhydrOilContWar AT %MX1.694: BOOL:=FALSE;
				(*hydraulic oil tank content warning*)
			MXhydrOilContErr AT %MX1.695: BOOL:=FALSE;
				(*hydraulic oil tank content error*)
			MXhydrOilContHig AT %MX1.696: BOOL:=FALSE;
				(*hydraulic oil tank content to high*)
			MXhydrOilLeakage AT %MX1.697: BOOL:=FALSE;
				(*hydraulic oil tank content leakage*)
			MXhydrOilShOffOk AT %MX1.698: BOOL:=FALSE;
				(*hydraulic oil tank shut off device OK*)
			MXresetFuelCon AT %MX1.699: BOOL:=FALSE;
				(*reset fuel consumption*)
			MXnot_used_700 AT %MX1.700: BOOL:=FALSE;
				(*not used*)
			MXresetOpHour AT %MX1.701: BOOL:=FALSE;
				(*reset operational hours*)
			MXreturnFiltWarn AT %MX1.702: BOOL:=FALSE;
				(*return flow filter warning*)
			MXfeedFiltWarn AT %MX1.703: BOOL:=FALSE;
				(*feed pressure filter warning*)
			MXwalLgMin AT %MX1.705: BOOL:=FALSE;
				(*wal stop lg minimum radius*)
			MXwalLgMax AT %MX1.706: BOOL:=FALSE;
				(*wal stop lg maximum radius*)
			MXwalLg2Min AT %MX1.707: BOOL:=FALSE;
				(*wal stop lg2 minimum radius*)
			MXwalLg2Max AT %MX1.708: BOOL:=FALSE;
				(*wal stop lg2 maximum radius*)
			MXwalSgLeft AT %MX1.709: BOOL:=FALSE;
				(*wal symbol stop sg left*)
			MXwalSgRight AT %MX1.710: BOOL:=FALSE;
				(*wal symbol stop sg right*)
			MXwalSgStopLeft AT %MX1.711: BOOL:=FALSE;
				(*wal stop sg left*)
			MXwalSgStopRight AT %MX1.712: BOOL:=FALSE;
				(*wal stop sg right*)
			MXwalCheckSgSen AT %MX1.713: BOOL:=FALSE;
				(*wal check sg angle sensor*)
			MXstopByRadLimMb AT %MX1.714: BOOL:=FALSE;
				(*stop main boom down by radius limitaion*)
			MXstopByHigLimMb AT %MX1.715: BOOL:=FALSE;
				(*stop main boom up by hight limitaion*)
			MXstopByRadLimLj AT %MX1.716: BOOL:=FALSE;
				(*stop luffing jib down by radius limitaion*)
			MXstopByHigLimLj AT %MX1.717: BOOL:=FALSE;
				(*stop luffing jib up by hight limitaion*)
			MXhg1FaSpe2ndPum AT %MX1.718: BOOL:=FALSE;
				(*hg 1 fast speed by second pump (2 pumps 1 winch)*)
			MXhg2FaSpe2ndPum AT %MX1.719: BOOL:=FALSE;
				(*hg 2 fast speed by second pump (2 pumps 1 winch)*)
			MXhg1FaSpe2ndBra AT %MX1.720: BOOL:=FALSE;
				(*hg 1 fast speed by second brake (gear)*)
			MXhg2FaSpe2ndBra AT %MX1.721: BOOL:=FALSE;
				(*hg 2 fast speed by second brake (gear)*)
			MXz6EnJoySig AT %MX1.723: BOOL:=FALSE;
				(*Z6 enable joystick signal*)
			MXz3EnJoySig AT %MX1.724: BOOL:=FALSE;
				(*Z3 enable jostick signal*)
			MXz4EnJoySig AT %MX1.725: BOOL:=FALSE;
				(*Z4 enable joystick signal*)
			MXz2EnJoySig AT %MX1.726: BOOL:=FALSE;
				(*Z2 enable joystick signal*)
			MXlg2EnJoySigSG AT %MX1.727: BOOL:=FALSE;
				(*lg2 enable joystick signal (sg joystick)*)
			MXlg2EnJoySigLG AT %MX1.728: BOOL:=FALSE;
				(*lg2 enable joystick signal (lg joystick)*)
			MXlg2EnJoySigHG2 AT %MX1.729: BOOL:=FALSE;
				(*lg2 enable joystick signal (hg2 joystick)*)
			MXz6PreJoySig AT %MX1.730: BOOL:=FALSE;
				(*Z6 preselect joystick signal*)
			MXz3PreJoySig AT %MX1.731: BOOL:=FALSE;
				(*Z3 preselect jostick signal*)
			MXz4PreJoySig AT %MX1.732: BOOL:=FALSE;
				(*Z4 preselect joystick signal*)
			MXz2PreJoySig AT %MX1.733: BOOL:=FALSE;
				(*Z2 preselect joystick signal*)
			MXlg2PreJoySigSG AT %MX1.734: BOOL:=FALSE;
				(*lg2 preselect joystick signal (sg joystick)*)
			MXlg2PreJoySigLG AT %MX1.735: BOOL:=FALSE;
				(*lg2 preselect joystick signal (lg joystick)*)
			MXlg2PreJoySiHG2 AT %MX1.736: BOOL:=FALSE;
				(*lg2 preselect joystick signal (hg2 joystick)*)
			MXddPreJoySig AT %MX1.737: BOOL:=FALSE;
				(*drilling drive preselect joystick signal*)
			MXlgJoySigLock AT %MX1.738: BOOL:=FALSE;
				(*lg joy stick signal locked for other function*)
			MXsgJoySigLock AT %MX1.739: BOOL:=FALSE;
				(*sg joy stick signal locked for other function*)
			MXgrabEnJoySig AT %MX1.740: BOOL:=FALSE;
				(*grab enable joystick signal *)
			MXddEnJoySig AT %MX1.741: BOOL:=FALSE;
				(*drilling drive enable joystick signal *)
			MXmoorEnJoySig AT %MX1.742: BOOL:=FALSE;
				(*mooring enable joystick signal *)
			MXderrEnJoySigSG AT %MX1.743: BOOL:=FALSE;
				(*derrick enable joystick signal (sg joystick)*)
			MXderrEnJoySigLG AT %MX1.744: BOOL:=FALSE;
				(*derrick enable joystick signal (lg joystick)*)
			MXderrEnJoySiHG2 AT %MX1.745: BOOL:=FALSE;
				(*derrick enable joystick signal (hg2 joystick)*)
			MXlg2PumpZero AT %MX1.746: BOOL:=FALSE;
				(*lg2 pump in zero*)
			MXjoyGrabAssembl AT %MX1.747: BOOL:=FALSE;
				(*hydr. grab joystick grab assembly*)
			MXLEgrabSlew AT %MX1.748: BOOL:=FALSE;
				(*enable Leffer grab slewing *)
			MXpreGrabSlew AT %MX1.749: BOOL:=FALSE;
				(*preselection  polyp grab/conc. crusher slewing*)
			MXlidec1 AT %MX1.750: BOOL:=FALSE;
				(*EDC is LIDEC 1 or compatibel*)
			MXnot_used_751 AT %MX1.751: BOOL:=FALSE;
				(*not used*)
			MXnot_used_752 AT %MX1.752: BOOL:=FALSE;
				(*not used*)
			MXengDefWarn AT %MX1.753: BOOL:=FALSE;
				(*engine DEF content warning*)
			MXengDefError AT %MX1.754: BOOL:=FALSE;
				(*engine DEF content error*)
			MXdpfHEST AT %MX1.755: BOOL:=FALSE;
				(*engine DPF high exhaust temperature by active regeneration*)
			MXdpfWarn AT %MX1.756: BOOL:=FALSE;
				(*engine DPF warning*)
			MXdpfError AT %MX1.757: BOOL:=FALSE;
				(*engine DPF error*)
			MXdpfInitPossib AT %MX1.758: BOOL:=FALSE;
				(*engine DPF manual initialisation possible*)
			MXdpfDisabPossib AT %MX1.759: BOOL:=FALSE;
				(*engine DPF manual disabling possible*)
			MXdpfRegInitiat AT %MX1.760: BOOL:=FALSE;
				(*engine DPF regeneration initiated*)
			MXdpfRegDisable AT %MX1.761: BOOL:=FALSE;
				(*engine DPF regeneration disabled*)
			MXengAgnStopFunc AT %MX1.762: BOOL:=FALSE;
				(*engine DPF regeneration stops all function*)
			MXengRequireRep AT %MX1.763: BOOL:=FALSE;
				(*engine required motor reparation*)
			MXpwEnJoySig AT %MX1.764: BOOL:=FALSE;
				(*passenger winch enable joystick signal *)
			MXpwUpLimOk AT %MX1.765: BOOL:=FALSE;
				(*passenger winch: upper limit switch o.k.*)
			MXpwLoLimOk AT %MX1.766: BOOL:=FALSE;
				(*passenger winch: lower limit switch o.k.*)
			MX600barPreTrans AT %MX1.767: BOOL:=FALSE;
				(*600bar pressure transmitter used*)
			MX600barPreTraSG AT %MX1.768: BOOL:=FALSE;
				(*600bar pressure transmitter used at slewing gear*)
			MXfuelContWarn AT %MX1.769: BOOL:=FALSE;
				(*fuel content too low warning*)
			MXfuelContError AT %MX1.770: BOOL:=FALSE;
				(*fuel content too low error*)
			MXwindSpeedWarn AT %MX1.771: BOOL:=FALSE;
				(*wind speed high warning*)
			MXwindSpeedError AT %MX1.772: BOOL:=FALSE;
				(*wind speed high error*)
			MXz6anaSigOut AT %MX1.773: BOOL:=FALSE;
				(*Z6 analog signal positiv*)
			MXz6anaSigIn AT %MX1.774: BOOL:=FALSE;
				(*Z6 analog signal negativ*)
			MXz6ExtAnalSign AT %MX1.775: BOOL:=FALSE;
				(*Z6 external analog Signal*)
			MXz6PumpInZero AT %MX1.776: BOOL:=FALSE;
				(*Z6 cyl. valve in zero*)
			MXz6NotActiv AT %MX1.777: BOOL:=FALSE;
				(*Z6 not activ*)
			MXz6EnabPowStage AT %MX1.778: BOOL:=FALSE;
				(*Z6 enable power stage*)
			MXz4anaSigOut AT %MX1.779: BOOL:=FALSE;
				(*Z4 analog signal positiv*)
			MXz4anaSigIn AT %MX1.780: BOOL:=FALSE;
				(*Z4 analog signal negativ*)
			MXz4ExtAnalSign AT %MX1.781: BOOL:=FALSE;
				(*Z4 external analog Signal*)
			MXz4PumpInZero AT %MX1.782: BOOL:=FALSE;
				(*Z4 cyl. valve in zero*)
			MXz4NotActiv AT %MX1.783: BOOL:=FALSE;
				(*Z4 not activ*)
			MXz4EnabPowStage AT %MX1.784: BOOL:=FALSE;
				(*Z4 enable power stage*)
			MXz2anaSigOut AT %MX1.785: BOOL:=FALSE;
				(*Z2 analog signal positiv*)
			MXz2anaSigIn AT %MX1.786: BOOL:=FALSE;
				(*Z2 analog signal negativ*)
			MXz2ExtAnalSign AT %MX1.787: BOOL:=FALSE;
				(*Z2 external analog Signal*)
			MXz2PumpInZero AT %MX1.788: BOOL:=FALSE;
				(*Z2 cyl. valve in zero*)
			MXz2NotActiv AT %MX1.789: BOOL:=FALSE;
				(*Z2 not activ*)
			MXz2EnabPowStage AT %MX1.790: BOOL:=FALSE;
				(*Z2 enable power stage*)
			MXz3anaSigOut AT %MX1.791: BOOL:=FALSE;
				(*Z3 analog signal positiv*)
			MXz3anaSigIn AT %MX1.792: BOOL:=FALSE;
				(*Z3 analog signal negativ*)
			MXz3ExtAnalSign AT %MX1.793: BOOL:=FALSE;
				(*Z3 external analog Signal*)
			MXz3PumpInZero AT %MX1.794: BOOL:=FALSE;
				(*Z3 cyl. valve in zero*)
			MXz3NotActiv AT %MX1.795: BOOL:=FALSE;
				(*Z3 not activ*)
			MXz3EnabPowStage AT %MX1.796: BOOL:=FALSE;
				(*Z3 enable power stage*)
			MXz17anaSigOut AT %MX1.797: BOOL:=FALSE;
				(*Z17 analog signal positiv*)
			MXz17anaSigIn AT %MX1.798: BOOL:=FALSE;
				(*Z17 analog signal negativ*)
			MXz17PumpInZero AT %MX1.799: BOOL:=FALSE;
				(*Z17 cyl. valve in zero*)
			MXz17NotActiv AT %MX1.800: BOOL:=FALSE;
				(*Z17 not activ*)
			MXz17EnabPowStag AT %MX1.801: BOOL:=FALSE;
				(*Z17 enable power stage*)
			MXplGuiAnaSigOut AT %MX1.802: BOOL:=FALSE;
				(*pile guide cyl. analog signal positiv*)
			MXplGuiAnaSigIn AT %MX1.803: BOOL:=FALSE;
				(*pile guide cyl. analog signal negativ*)
			MXplGuiPumpIn0 AT %MX1.804: BOOL:=FALSE;
				(*pile guide cyl. valve in zero*)
			MXplGuiEnabPowSt AT %MX1.805: BOOL:=FALSE;
				(*pile guide cyl. enable power stage*)
			MXbbActiveSymbol AT %MX1.807: BOOL:=FALSE;
				(*blackbox show active recording symbol*)
			MXbbInitSymbol AT %MX1.808: BOOL:=FALSE;
				(*blackbox show initializing symbol*)
			MXbbErrorSymbol AT %MX1.809: BOOL:=FALSE;
				(*blackbox show error symbol*)
			MXlmlMainRedEnab AT %MX1.812: BOOL:=FALSE;
				(*lml main boom reduction enabled*)
			MXlmlLoadMainMid AT %MX1.813: BOOL:=FALSE;
				(*lml load location on main boom or Midfall and luffing jib mounted*)
			MXsgSetToZero AT %MX1.814: BOOL:=FALSE;
				(*sg set angle to zero degree*)
			MXsgSetSynchInc AT %MX1.815: BOOL:=FALSE;
				(*sg set incremental sensor synchron to analog sensor *)
			MXtgGlobalStop AT %MX1.816: BOOL:=FALSE;
				(*tg global stop *)
			MXstopLudvPumps AT %MX1.817: BOOL:=FALSE;
				(*stop ludv pumps *)
			MXadBAHydrGrab AT %MX1.818: BOOL:=FALSE;
				(*enable bauer hydraulik grab operation*)
			MXadBAMilOperat AT %MX1.819: BOOL:=FALSE;
				(*enable bauer mill grab operation*)
			MXstopModulError AT %MX1.820: BOOL:=FALSE;
				(*set stop in case of module error*)
			MXpreGrabAdjust AT %MX1.821: BOOL:=FALSE;
				(*preselection grab adjustment *)
			MXgrAdPreJoySig AT %MX1.822: BOOL:=FALSE;
				(*preselection joy stick signal grab adjustment *)
			MXgrAdEnJoySig AT %MX1.823: BOOL:=FALSE;
				(*enable joy stick signal grab adjustment *)
			MXgrabStopLg AT %MX1.824: BOOL:=FALSE;
				(*grab operation stopp Luffing gear*)
			MXgrabPreJoySig AT %MX1.825: BOOL:=FALSE;
				(*preselection joy stick signal grab*)
			MXacModulIsActiv AT %MX1.827: BOOL:=FALSE;
				(*ac IMMO Module is active*)
			MXacCheckOk AT %MX1.828: BOOL:=FALSE;
				(*ac check of ignition key ompleted*)
			MXacReleasMachin AT %MX1.829: BOOL:=FALSE;
				(*ac releases machine*)
			MXacKeyIsMaster AT %MX1.830: BOOL:=FALSE;
				(*ac actual key is master*)
			MXhgByLudvSectio AT %MX1.832: BOOL:=FALSE;
				(*hg driven by LUDV section*)
			MXsgByLudvSectio AT %MX1.833: BOOL:=FALSE;
				(*sg driven by LUDV section*)
			MXwinSynLockTrim AT %MX1.834: BOOL:=FALSE;
				(*winch synchronisation lock trimot*)
			MXdgcLockHg1Trim AT %MX1.835: BOOL:=FALSE;
				(*dyn. ground comp. lock trimot hg1*)
			MXdgcLockHg2Trim AT %MX1.836: BOOL:=FALSE;
				(*dyn. ground comp. lock trimot hg1*)
			MXsetZeroTravelG AT %MX1.837: BOOL:=FALSE;
				(*set zero position travelling gear*)
			MXdpfRegManActiv AT %MX1.838: BOOL:=FALSE;
				(*engine DPF manual regeneration activated*)
			MXdpfRegBlocked AT %MX1.839: BOOL:=FALSE;
				(*engine DPF regeneration disabled*)
			MXlgPreLockSig AT %MX1.840: BOOL:=FALSE;
				(*lg preselection lock signal *)
			MXhg2PreLockSig AT %MX1.841: BOOL:=FALSE;
				(*hg2 preselection lock signal *)
			MXhg1PreLockSig AT %MX1.842: BOOL:=FALSE;
				(*hg1 preselection lock signal *)
			MXsgPreLockSig AT %MX1.843: BOOL:=FALSE;
				(*sg preselection lock signal *)
			MXinclShutOff AT %MX1.844: BOOL:=FALSE;
				(*crane inclination shut off*)
			MXinclShutOffScr AT %MX1.845: BOOL:=FALSE;
				(*crane inclination shut off screen*)
			MXslowFlashSig AT %MX1.846: BOOL:=FALSE;
				(*flash signal [0,83 Hz]*)
			MXextLmlSounder AT %MX1.847: BOOL:=FALSE;
				(*external control lml sounder*)
			MXinclShutPreScr AT %MX1.848: BOOL:=FALSE;
				(*crane inclination prewarning shut off screen*)
			MXsmallSuperstr AT %MX1.849: BOOL:=FALSE;
				(*machine type small superstructure*)
			MXluffingCylinde AT %MX1.850: BOOL:=FALSE;
				(*machine type luffing cylinder instead of a-frame*)
			MXhoCylPreJoySig AT %MX1.851: BOOL:=FALSE;
				(*hoisting cylinder preselect joystick signal*)
			MXhoCylEnJoySig AT %MX1.852: BOOL:=FALSE;
				(*hoisting cylinder enable joystick signal*)
			MXaxwPreJoySigLG AT %MX1.853: BOOL:=FALSE;
				(*aux.winch preselect joystick signal (lg joystick)*)
			MXaxwEnJoySigLG AT %MX1.855: BOOL:=FALSE;
				(*aux.winch enable joystick signal (lg joystick)*)
			MXaxwPreJoySiHG2 AT %MX1.856: BOOL:=FALSE;
				(*aux.winch preselect joystick signal (hg2 joystick)*)
			MXaxwEnJoySigHG2 AT %MX1.857: BOOL:=FALSE;
				(*aux.winch enable joystick signal (hg2 joystick)*)
			MXaxwAnalSigPos AT %MX1.858: BOOL:=FALSE;
				(*aux winch analog signal positiv*)
			MXaxwAnalSigNeg AT %MX1.859: BOOL:=FALSE;
				(*aux winch analog signal negativ*)
			MXhocAnalSigPos AT %MX1.860: BOOL:=FALSE;
				(*hoisting cylinder analog signal positiv*)
			MXhocAnalSigNeg AT %MX1.861: BOOL:=FALSE;
				(*hoisting cylinder analog signal negativ*)
			MXaxwGlobalStopU AT %MX1.862: BOOL:=FALSE;
				(*aux. winch global stop up*)
			MXaxwGlobalStopD AT %MX1.863: BOOL:=FALSE;
				(*aux. winch global stop down*)
			MXadwPreJoySig AT %MX1.864: BOOL:=FALSE;
				(*add.winch preselect joystick signal (lg joystick)*)
			MXadwEnJoySig AT %MX1.865: BOOL:=FALSE;
				(*add.winch enable joystick signal (lg joystick)*)
			MXadwAnalSigPos AT %MX1.866: BOOL:=FALSE;
				(*add winch analog signal positiv*)
			MXadwAnalSigNeg AT %MX1.867: BOOL:=FALSE;
				(*add winch analog signal negativ*)
			MXadwGlobalStopU AT %MX1.868: BOOL:=FALSE;
				(*add. winch global stop up*)
			MXadwGlobalStopD AT %MX1.869: BOOL:=FALSE;
				(*add. winch global stop down*)
			MXaxwEnPowStage AT %MX1.870: BOOL:=FALSE;
				(*aux winch enable power stage*)
			MXhocEnPowStage AT %MX1.871: BOOL:=FALSE;
				(*hoisting cylinder enable power stage*)
			MXadwEnPowStage AT %MX1.872: BOOL:=FALSE;
				(*add winch enable power stage*)
			MX1LudvWorkSect AT %MX1.873: BOOL:=FALSE;
				(*only one ludv working section *)
			MXuseLudvPump3 AT %MX1.874: BOOL:=FALSE;
				(*use ludv pump P3*)
			MXuseLudvPump4 AT %MX1.875: BOOL:=FALSE;
				(*use ludv pump P4*)
			MXmachWiTrimot AT %MX1.876: BOOL:=FALSE;
				(*machine with electrical trimot *)
			MXstabWinchOC AT %MX1.877: BOOL:=FALSE;
				(*stab winch with open circuit*)
			MXludv4ExtAnaSig AT %MX1.878: BOOL:=FALSE;
				(*LUDV pump 4 other, external analog signal*)
			MXretarderSecAct AT %MX1.879: BOOL:=FALSE;
				(*retarder section active*)
			MXextLudvSecAct AT %MX1.880: BOOL:=FALSE;
				(*external LUDV section active*)
			MXpresAddOilSupp AT %MX1.881: BOOL:=FALSE;
				(*add. hydr. oil supply preselected*)
			MXexitAddOilSupp AT %MX1.882: BOOL:=FALSE;
				(*exit add. hydr. oil supply*)
			MXenabAddOilSupp AT %MX1.883: BOOL:=FALSE;
				(*enable additional oil supply *)
			MXludvSecP1activ AT %MX1.884: BOOL:=FALSE;
				(*ludv working section P1 active*)
			MXludvSecP2activ AT %MX1.885: BOOL:=FALSE;
				(*ludv working section P2 active*)
			MXengMinIdleSpd AT %MX1.886: BOOL:=FALSE;
				(*speed up to minimum idle speed*)
			MXsgAngSenPresen AT %MX1.887: BOOL:=FALSE;
				(*sg angle sensor present*)
			MXgrabCtrlPres AT %MX1.888: BOOL:=FALSE;
				(*grab control preselected *)
			MXwinSynPres AT %MX1.889: BOOL:=FALSE;
				(*winch synchronization preselected*)
			MXmdeStBk1BW1 AT %MX1.890: BOOL:=FALSE;
				(*mde status brake 1 boom winch 1*)
			MXmdeStBk1W1 AT %MX1.891: BOOL:=FALSE;
				(*mde status brake 1 winch 1*)
			MXmdeStBk2W1 AT %MX1.892: BOOL:=FALSE;
				(*mde status brake 2 winch 1*)
			MXmdeStBk1W2 AT %MX1.893: BOOL:=FALSE;
				(*mde status brake 1 winch 2*)
			MXmdeStBk2W2 AT %MX1.894: BOOL:=FALSE;
				(*mde status brake 2 winch 2*)
			MXmdeStBk1SS1 AT %MX1.895: BOOL:=FALSE;
				(*mde status brake 1 slewing system 1*)
			MXPuPu1Enable AT %MX1.901: BOOL:=FALSE;
				(*FE operational mode*)
			MXPuPu2Enable AT %MX1.902: BOOL:=FALSE;
				(*FE operational mode*)
			MXddEnaSobBaOp AT %MX1.903: BOOL:=FALSE;
				(*FE operational mode*)
			MXddEnaSobBatOp AT %MX1.904: BOOL:=FALSE;
				(*FE operational mode*)
			MXddEnaVdwOperat AT %MX1.905: BOOL:=FALSE;
				(*FE operational mode*)
			MXenSmOperat AT %MX1.906: BOOL:=FALSE;
				(*FE operational mode*)
			MXddEnaKellyBaOp AT %MX1.907: BOOL:=FALSE;
				(*FE operational mode*)
			MXddEnKellyBatOp AT %MX1.908: BOOL:=FALSE;
				(*FE operational mode*)
			MXenRsvOperMode AT %MX1.909: BOOL:=FALSE;
				(*FE operational mode*)
			MXenDsmOperMode AT %MX1.910: BOOL:=FALSE;
				(*FE operational mode*)
			MWnot_used_1 AT %MW1.1: INT:=0;
				(*not used*)
			MWhydrGrabPress AT %MW1.2: UINT:=0;
				(*ad hydr. grab pressure [bar]*)
			MWludvExtPresSig AT %MW1.3: UINT:=0;
				(*LUDV pump external pressure signal in %*)
			MWludvExtPreCont AT %MW1.4: UINT:=0;
				(*LUDV pump external pressure signal in mA*)
			MWecHg1extAnaSig AT %MW1.5: INT:=0;
				(*external control analog signal Hg1*)
			MWecHg2extAnaSig AT %MW1.6: INT:=0;
				(*external control analog signal Hg2*)
			MWecRiJoyAna1Vib AT %MW1.8: INT:=0;
				(*ext. cont. vibr. right joystick sig. 1*)
			MWecRiJoyAna2Vib AT %MW1.9: INT:=0;
				(*ext. cont. vibr. right joystick sig. 2*)
			MWecLeJoyAna1Vib AT %MW1.10: INT:=0;
				(*ext. cont. vibr. left joystick sig. 1*)
			MWecLeJoyAna2Vib AT %MW1.11: INT:=0;
				(*ext. cont. vibr. left joystick sig. 2*)
			MWmaInfFuel AT %MW1.12: INT:=0;
				(*LiDAT fuel content*)
			MWhg1Lifting AT %MW1.13: UINT:=0;
				(*HG 1 pump lifting*)
			MWhg1Lowering AT %MW1.14: UINT:=0;
				(*HG 1 pump lowering *)
			MWhg2Lifting AT %MW1.15: UINT:=0;
				(*HG 2 pump lifting*)
			MWhg2Lowering AT %MW1.16: UINT:=0;
				(*HG 2 pump lowering *)
			MWmdeIfVolPu1W1 AT %MW1.17: INT:=0;
				(*MDE: volume pump 1 winch 1 [cm³]*)
			MWmdeIfVolPu2W1 AT %MW1.18: INT:=0;
				(*MDE: volume pump 2 winch 1 [cm³]*)
			MWmdeIfVolPu1W2 AT %MW1.19: INT:=0;
				(*MDE: volume pump 1 winch 2 [cm³]*)
			MWmdeIfVolPu2W2 AT %MW1.20: INT:=0;
				(*MDE: volume pump 2 winch 2 [cm³]*)
			MWmdeIfVolPu1SS1 AT %MW1.21: INT:=0;
				(*MDE: volume pump 1 slewing system 1 [cm³]*)
			MWmdeIfPwDiEn1 AT %MW1.22: INT:=0;
				(*MDE: power diesel engine 1 [kW]*)
			MDdeltaTime AT %MD1.1: REAL:=0.001;
				(*time to the last scan in sec.*)
			MDcoolWaterTemp AT %MD1.2: REAL:=0.0;
				(*cooling water temperature in °C*)
			MDlubOilPressure AT %MD1.3: REAL:=0.0;
				(*lub oil pressure in bar*)
			MDpresenEngSpeed AT %MD1.4: REAL:=0.0;
				(*present engine speed in rpm*)
			MDchargeAirPress AT %MD1.5: REAL:=0.0;
				(*charge air pressure in bar*)
			MDratedEngSpeed AT %MD1.6: REAL:=0.0;
				(*rated engine speed in rpm*)
			MDengSpeedValue AT %MD1.7: REAL:=0.0;
				(*engine speed value in % (output)*)
			MDpowerLimReduct AT %MD1.8: REAL:=0.0;
				(*maximum engine power regulator reduction to x [%]*)
			MDhg1JoySignal AT %MD1.9: REAL:=0.0;
				(*HG 1 joystick signal in +/- [%]*)
			MDhg1SystemPress AT %MD1.10: REAL:=0.0;
				(*HG 1 system pressure in bar*)
			MDhg1ExtAnalSign AT %MD1.11: REAL:=0.0;
				(*HG 1 external analog signal in [%]*)
			MDhg1PumpSignal AT %MD1.12: REAL:=0.0;
				(*HG 1 analog signal pump in [%]*)
			MDhg1TrimotSigna AT %MD1.13: REAL:=0.0;
				(*HG 1 analog signal trimot in [%]*)
			MDhg2JoySignal AT %MD1.14: REAL:=0.0;
				(*HG 2 joystick signal in +/-[%]*)
			MDhg2SystemPress AT %MD1.15: REAL:=0.0;
				(*HG 2 system pressure in bar*)
			MDhg2ExtAnalSign AT %MD1.16: REAL:=0.0;
				(*HG 2 external analog signal in [%]*)
			MDhg2PumpSignal AT %MD1.17: REAL:=0.0;
				(*HG 2 analog signal pump in [%]*)
			MDhg2TrimotSigna AT %MD1.18: REAL:=0.0;
				(*HG 2 analog signal trimot in [%]*)
			MDlgJoySignal AT %MD1.19: REAL:=0.0;
				(*LG joystick signal in +/-[%]*)
			MDadwExtAnalSign AT %MD1.20: REAL:=0.0;
				(*additional winch external analog signal in [%]*)
			MDlgPumpSignal AT %MD1.21: REAL:=0.0;
				(*LG analog signal pump in [%]*)
			MDlg2PumpSignal AT %MD1.22: REAL:=0.0;
				(*LG 2 analog signal pump in [%]*)
			MDsgJoySignal AT %MD1.23: REAL:=0.0;
				(*SG joystick signal in +/-[%]*)
			MDsgPumpSignal AT %MD1.24: REAL:=0.0;
				(*SG analog signal pump in [%]*)
			MDsgSysPressRi AT %MD1.25: REAL:=0.0;
				(*SG system pressure right in bar*)
			MDsgSysPressLe AT %MD1.26: REAL:=0.0;
				(*SG system pressure left in bar*)
			MDludv1ExtAnaSig AT %MD1.27: REAL:=0.0;
				(*LUDV pump 1 external analog signal in %*)
			MDludv2ExtAnaSig AT %MD1.28: REAL:=0.0;
				(*LUDV pump 2 external analog signal in %*)
			MDlmlMode AT %MD1.29: REAL:=0.0;
				(*lml mode*)
			MDlmlUtilization AT %MD1.30: REAL:=0.0;
				(*lml utilization in %*)
			MDlmlUtilBackwar AT %MD1.31: REAL:=0.0;
				(*lml utilization backwards (derrick)*)
			MDlmlLoadBoom AT %MD1.32: REAL:=0.0;
				(*lml load main boom in to*)
			MDlmlLoadLuffJib AT %MD1.33: REAL:=0.0;
				(*lml load luffing jib in to*)
			MDlmlAngleBoom AT %MD1.34: REAL:=0.0;
				(*lml angle main boom in °*)
			MDlmlAngleLufJib AT %MD1.35: REAL:=0.0;
				(*lml angle luffing jib in °*)
			MDlmlAngleDerr AT %MD1.36: REAL:=0.0;
				(*lml angle derrick in °*)
			MDlmlMaxLoad1 AT %MD1.37: REAL:=0.0;
				(*lml maximum load main boom in to*)
			MDlmlMaxLoad2 AT %MD1.38: REAL:=0.0;
				(*lml maximum load luffing jib in to*)
			MDlmlRadiusMBoom AT %MD1.39: REAL:=0.0;
				(*lml load radius main boom in m*)
			MDlmlRadiusLJib AT %MD1.40: REAL:=0.0;
				(*lml load radius luffing jib in m*)
			MDlmlMaxHight1 AT %MD1.41: REAL:=0.0;
				(*lml maximum hight  main boom in m*)
			MDlmlMaxHight2 AT %MD1.42: REAL:=0.0;
				(*lml maximum hight  luffing jib in m*)
			MDlmlReevingBoom AT %MD1.43: REAL:=0.0;
				(*lml reeving main boom*)
			MDlmlReevingLuJi AT %MD1.44: REAL:=0.0;
				(*lml reeving luffing jib*)
			MDropeLenghtHg1 AT %MD1.45: REAL:=0.0;
				(*rope lenght hg 1 in m*)
			MDropeLenghtHg2 AT %MD1.46: REAL:=0.0;
				(*rope lenght hg 2 in m*)
			MDhg1RopeSpeed AT %MD1.47: REAL:=0.0;
				(*hg 1 rope speed in  m/min*)
			MDhg2RopeSpeed AT %MD1.48: REAL:=0.0;
				(*hg 2 rope speed in  m/min*)
			MDhg1RopeLenWin AT %MD1.49: REAL:=0.0;
				(*rope lenght hg 1 on the winch in m*)
			MDhg2RopeLenWin AT %MD1.50: REAL:=0.0;
				(*rope lenght hg 2 on the winch in m*)
			MDadHyLudv1Press AT %MD1.51: REAL:=0.0;
				(*additional hydraulics ludv pump 1 pressure in bar*)
			MDadHyLudv2Press AT %MD1.52: REAL:=0.0;
				(*additional hydraulics ludv pump 2 pressure in bar*)
			MDhydrOilTemp AT %MD1.53: REAL:=0.0;
				(*hydraulic oil temperature in °C*)
			MDbatteryVoltage AT %MD1.54: REAL:=0.0;
				(*battery voltage in V*)
			MDadGrouPre0Grd AT %MD1.55: REAL:=0.0;
				(*ad ground pressure 0 degrees*)
			MDadGrouPre45Grd AT %MD1.56: REAL:=0.0;
				(*ad ground pressure 45 degrees*)
			MDadGrouPre90Grd AT %MD1.57: REAL:=0.0;
				(*ad ground pressure 90 degrees*)
			MDhg1LowRegLimSi AT %MD1.58: REAL:=0.0;
				(*hg 1 lowering regulation limitation signal*)
			MDhg2LowRegLimSi AT %MD1.59: REAL:=0.0;
				(*hg 2 lowering regulation limitation signal*)
			MDaFrameLoadSens AT %MD1.60: REAL:=0.0;
				(*a frame load sensor in kN*)
			MDlmlLoadSenDerr AT %MD1.61: REAL:=0.0;
				(*load sensor derrick in kN*)
			MDengExploitatio AT %MD1.62: REAL:=0.0;
				(*diesel engine exploitation in %*)
			MDsgPressDiff AT %MD1.63: REAL:=0.0;
				(*sg pressure difference in bar*)
			MDpresStabLufJib AT %MD1.64: REAL:=0.0;
				(*luffing jib fall back support pressure (stabilisation)*)
			MDriJoyVibr1Ext AT %MD1.65: REAL:=0.0;
				(*right joystick vibrator 1 external analog signal*)
			MDriJoyVibr2Ext AT %MD1.66: REAL:=0.0;
				(*right joystick vibrator 2 external analog signal*)
			MDleJoyVibr1Ext AT %MD1.67: REAL:=0.0;
				(*left joystick vibrator 1 external analog signal*)
			MDleJoyVibr2Ext AT %MD1.68: REAL:=0.0;
				(*left joystick vibrator 2 external analog signal*)
			MDderrPumpSignal AT %MD1.69: REAL:=0.0;
				(*derrick winch analog signal*)
			MDmodeOfOperatio AT %MD1.70: REAL:=0.0;
				(*mode of operation*)
			MDlmlFloaCouWei AT %MD1.71: REAL:=0.0;
				(*lml floating counter weight in to*)
			MDloadSenBoom AT %MD1.72: REAL:=0.0;
				(*load sensor main boom in kN*)
			MDloadSenLuffJib AT %MD1.73: REAL:=0.0;
				(*load sensor luffing jib in kN*)
			MDlg2ExtAnalSign AT %MD1.74: REAL:=0.0;
				(*LG2 external analog signal in [%]*)
			MDvibClampPress AT %MD1.75: REAL:=0.0;
				(*ad vibrator clamping pressure*)
			MDvibSysPress AT %MD1.76: REAL:=0.0;
				(*ad vibrator system pressure*)
			MDludvExtPresSig AT %MD1.77: REAL:=0.0;
				(*LUDV pump external pressure signal in %*)
			MDvibrFrequency AT %MD1.78: REAL:=0.0;
				(*ad vibrator frequency*)
			MDvibrAmplitude AT %MD1.79: REAL:=0.0;
				(*ad vibrator amplitude*)
			MDsgAngle AT %MD1.80: REAL:=0.0;
				(*sg angle in degree*)
			MDsgExtAnalSign AT %MD1.81: REAL:=0.0;
				(*slewing gear extern joystick signal in +/-[%]*)
			MDsgAngleExact AT %MD1.82: REAL:=0.0;
				(*sg angle in degree*)
			MDhg1AnalogSig AT %MD1.83: REAL:=0.0;
				(*analog signal joy stick hg1*)
			MDhg2AnalogSig AT %MD1.84: REAL:=0.0;
				(*analog signal joy stick hg2*)
			MDleadAngleX AT %MD1.85: REAL:=0.0;
				(*hanging leader angle x*)
			MDleadAngleY AT %MD1.86: REAL:=0.0;
				(*hanging leader angle y*)
			MDadHydAdToLudv1 AT %MD1.87: REAL:=0.0;
				(*added signal to add. hydr. signal for LUDV pu1*)
			MDadHydAdToLudv2 AT %MD1.88: REAL:=0.0;
				(*added signal to add. hydr. signal for LUDV pu2*)
			MDhamSysPress AT %MD1.89: REAL:=0.0;
				(*hammer system pressure*)
			MDwindSpeed AT %MD1.90: REAL:=0.0;
				(*actual wind speed [m/s]*)
			MDhg1RopeLenRela AT %MD1.91: REAL:=0.0;
				(*hg1 rope length winch - boom head*)
			MDhg2RopeLenRela AT %MD1.92: REAL:=0.0;
				(*hg2 rope length winch - boom head*)
			MDmaxAngleMainBo AT %MD1.93: REAL:=0.0;
				(*lml maximum angle main boom*)
			MDlmlStopSgLeft AT %MD1.94: REAL:=0.0;
				(*lml blocked crawlers stop sg left*)
			MDlmlStopSgRight AT %MD1.95: REAL:=0.0;
				(*lml blocked crawlers stop sg right*)
			MDlmlCounterWeig AT %MD1.96: REAL:=0.0;
				(*lml counter weight in tons*)
			MDlenBallastCyli AT %MD1.97: REAL:=0.0;
				(*length of the ballast cylinder counter weigth*)
			MDscRopeLenHg1 AT %MD1.98: REAL:=0.0;
				(*screen indication rope lenght hg1*)
			MDscRopeLenHg2 AT %MD1.99: REAL:=0.0;
				(*screen indication rope lenght hg2*)
			MDfuelCont AT %MD1.100: REAL:=0.00;
				(*fuel content [%]*)
			MDfuelConAbs_LpH AT %MD1.101: REAL:=0.0;
				(*engine fuel consumption absolut [l/h]*)
			MDfuelConRel_LpH AT %MD1.102: REAL:=0.0;
				(*engine fuel consumption sinde reset [l/h] (relative)*)
			MDhydrOilContWar AT %MD1.103: REAL:=0.0;
				(*hydraulic oil content warning [%]*)
			MDhydrOilContErr AT %MD1.104: REAL:=0.0;
				(*hydraulic oil content error [%]*)
			MDhydrOilContHig AT %MD1.105: REAL:=0.0;
				(*hydraulic oil content to high [%]*)
			MDengPowerMax AT %MD1.119: REAL:=0.0;
				(*engine maximum power [kW]*)
			MDengPowerAct AT %MD1.120: REAL:=0.0;
				(*engine actual power [kW]*)
			MDengRatMinSpeed AT %MD1.121: REAL:=0.0;
				(*engine rated minimum speed [rpm]*)
			MDengTorqueAct AT %MD1.122: REAL:=0.0;
				(*engine actual torque [Nm]*)
			MDengTorqueMax AT %MD1.123: REAL:=0.0;
				(*engine maximum torque [Nm]*)
			MDfuelConsumptio AT %MD1.124: UDINT:=0;
				(*engine actual fuel consumption [l/scan] not filtered*)
			MDfuelConsum_lph AT %MD1.125: REAL:=0.0;
				(*engine actual fuel consumption [l/h] not filtered*)
			MDengMinSpeed AT %MD1.126: REAL:=0.0;
				(*engine minimum speed*)
			MDengMaxSpeed AT %MD1.127: REAL:=0.0;
				(*engine maximum speed*)
			MDengRatSpeedPer AT %MD1.128: REAL:=0.0;
				(*engine rated engine speed in percent [%]*)
			MDturnJoySignal AT %MD1.129: REAL:=0.0;
				(*remote control turn joystick signal in +/-[%]*)
			MDfiltRegEngSpee AT %MD1.131: REAL:=0.0;
				(*particle filter regeneration engine speed [rpm]*)
			MDfiltRegEngSpeP AT %MD1.132: REAL:=0.0;
				(*particle filter regeneration engine speed [%]*)
			MDfiltRegValvSig AT %MD1.133: REAL:=0.0;
				(*particle filter regeneration valve signal [%]*)
			MDfiltRegRemTime AT %MD1.134: REAL:=0.0;
				(*particle filter regeneration remaining time [s]*)
			MDlmlSpeedRed_Hg AT %MD1.135: REAL:=0.0;
				(*lml speed reduction value HG (lml changes 2010: spped reduction for electronical controlled crane functions)*)
			MDlmlOffsetRod AT %MD1.136: REAL:=0.0;
				(*lml offset middle sg / main boom [m]*)
			MDlgIntTime AT %MD1.137: REAL:=0.0;
				(*luffing gear 1 integrator time down*)
			MDlg2IntTime AT %MD1.138: REAL:=0.0;
				(*luffing gear 2 integrator time down*)
			MDlmlOffsetGndHp AT %MD1.139: REAL:=0.0;
				(*lml offset ground / main boom [m]*)
			MDlmlAngBoomDown AT %MD1.141: REAL:=0.0;
				(*lower angle of the main boom*)
			MDlmlAngLuJiDown AT %MD1.142: REAL:=0.0;
				(*lower angle of the luffing jib*)
			MDpdeGetMode AT %MD1.145: DINT:=0;
				(*pde get mode from pde*)
			MDpdeDepth AT %MD1.146: REAL:=0.0;
				(*pde depth*)
			MDdgcBeats AT %MD1.151: REAL:=0.0;
				(*ad dynamic ground compaction actual beats*)
			MDdgcCompaction AT %MD1.152: REAL:=0.0;
				(*ad dynamic ground compaction actual compaction*)
			MDdgcHg1RelHight AT %MD1.153: REAL:=0.0;
				(*ad dynamic ground compaction hg1 realtive hight*)
			MDdgcHg2RelHight AT %MD1.154: REAL:=0.0;
				(*ad dynamic ground compaction hg2 realtive hight*)
			MDdgcHg1CluPress AT %MD1.155: REAL:=0.0;
				(*ad dynamic ground compaction hg1 clutch pressure actual*)
			MDdgcHg2CluPress AT %MD1.156: REAL:=0.0;
				(*ad dynamic ground compaction hg2 clutch pressure actual*)
			MDdgcHgCluchSig AT %MD1.157: REAL:=0.0;
				(*ad dynamic ground compaction hg clutch analog signal*)
			MDdgcHg2CluchSig AT %MD1.158: REAL:=0.0;
				(*ad dynamic ground compaction hg2 clutch analog signal*)
			MD1_159 AT %MD1.159: REAL:=0.0;
			MDludv3ExtAnaSig AT %MD1.160: REAL:=0.0;
				(*LUDV3 external analog signal*)
			MDpdeDgcCycNr AT %MD1.161: REAL:=0.0;
				(*pde dgc number of cycle*)
			MDpdeDgcHight AT %MD1.162: REAL:=0.0;
				(*pde dgc hoisting hight*)
			MDpdeDgcHightPre AT %MD1.163: REAL:=0.0;
				(*pde dgc hoisting hight preset*)
			MDpdeDgcSlowDPre AT %MD1.164: REAL:=0.0;
				(*pde dgc slow down length preset*)
			MDpdeDgcCycPre AT %MD1.165: REAL:=0.0;
				(*pde dgc cycles preset*)
			MDpdeDgcCycDone AT %MD1.166: REAL:=0.0;
				(*pde total cycles done*)
			MDpdeDgcCompPre AT %MD1.167: REAL:=0.0;
				(*pde dgc compaction preset*)
			MDpdeDgcCompDone AT %MD1.168: REAL:=0.0;
				(*pde total compaction done*)
			MDpdeDgcHg1Speed AT %MD1.169: REAL:=0.0;
				(*pde dgc hg1 maximum speed*)
			MDpdeDgcHg2Speed AT %MD1.170: REAL:=0.0;
				(*pde dgc hg2 maximum speed*)
			MDpdeDgcComp AT %MD1.171: REAL:=0.0;
				(*pde dgc compaction [m]*)
			MDpdeDgcCycTime AT %MD1.172: REAL:=0.0;
				(*pde dgc cycle time*)
			MDpdeDgcPTRoTime AT %MD1.173: REAL:=0.0;
				(*pde dgc pounder to rope time*)
			MDpdeDgcLiftTime AT %MD1.174: REAL:=0.0;
				(*pde dgc lifting time*)
			MDpdeDgcTime AT %MD1.175: TOD:=TOD#00:00:00;
				(*pde dgc time*)
			MDpdeDgcDate AT %MD1.176: DATE:=D#1970-01-01;
				(*pde dgc date*)
			MDpdeDgcHightFt AT %MD1.177: REAL:=0.0;
				(*pde dgc hoisting hight [ft]*)
			MDpdeDgcCompFt AT %MD1.178: REAL:=0.0;
				(*pde dgc compaction [ft]*)
			MDpdeDgcSlowDoFt AT %MD1.179: REAL:=0.0;
				(*pde dgc slow down length preset [ft]*)
			MDgrabSysPress AT %MD1.180: REAL:=0.0;
				(*hydraulic grab system pressure in bar*)
			MD181 AT %MD1.181: REAL:=0.0;
			MDdgcCompactiFt AT %MD1.182: REAL:=0.0;
				(*ad. dyn. ground compaction [feed]*)
			MDpdeDgcGivHigFt AT %MD1.183: REAL:=0.0;
				(*ad. dyn. ground compaction given hight for pde [feed]*)
			MDpdeDgcHg1SpeFt AT %MD1.184: REAL:=0.0;
				(*pde dgc hg1 maximum speed [ft/min]*)
			MDpdeDgcHg2SpeFt AT %MD1.185: REAL:=0.0;
				(*pde dgc hg2 maximum speed [ft/min]*)
			MDpdeDgcCoDoneFt AT %MD1.186: REAL:=0.0;
				(*pde total compaction [ft] done*)
			MDpdeDgcTotaBeat AT %MD1.187: REAL:=0.0;
				(*pde total beats of compaction*)
			MDpdeWholeTime AT %MD1.188: REAL:=0.0;
				(*pde whole time of cycle*)
			MDkeybx25Poti1 AT %MD1.189: REAL:=0.0;
				(*Keyboard X25 Poti1*)
			MDkeybx25Poti2 AT %MD1.190: REAL:=0.0;
				(*Keyboard X25 Poti2*)
			MDkeybx25Poti3 AT %MD1.191: REAL:=0.0;
				(*Keyboard X25 Poti3*)
			MDkeybx25Poti4 AT %MD1.192: REAL:=0.0;
				(*Keyboard X25 Poti4*)
			MDpwPumpSignal AT %MD1.193: REAL:=0.0;
				(*passenger winch pump signal *)
			MDsuperstrAngAbs AT %MD1.194: REAL:=0.0;
				(*superstructure angle absolut [°]*)
			MDsuperstAngSenX AT %MD1.195: REAL:=0.0;
				(*superstructure angle sensor X [°]*)
			MDsuperstAngSenY AT %MD1.196: REAL:=0.0;
				(*superstructure angle sensor Y [°]*)
			MDgpsLatitude AT %MD1.197: REAL:=0.0;
				(*gps coordinates latitude in degree, positive is north, negative is south*)
			MDgpsLongitude AT %MD1.198: REAL:=0.0;
				(*gps coordinates longitude in degree, positive is east, negative is west*)
			MDgpsAltitude AT %MD1.199: REAL:=0.0;
				(*gps coordinates altitude in m*)
			MDmdePwDiEn1 AT %MD1.201: REAL:=0.0;
				(*mde power diesel engine 1 [kW]*)
			MDmdeCoFuelEn1 AT %MD1.202: REAL:=0.0;
				(*mde engine fuel consumption [l/h]*)
			MDmdeExDiEn1 AT %MD1.203: REAL:=0.0;
				(*mde engine exploitation diesel engine 1 [%]*)
			MDmdeSpWind AT %MD1.203: REAL:=0.0;
				(*mde wind speed *)
			MDmdeOperatMode AT %MD1.205: REAL:=0.0;
				(*mde operation mode*)
			MDmdeRvDiEn1 AT %MD1.206: REAL:=0.0;
				(*MDE: revolutions diesel eingine 1 [rpm]*)
			MDmdeTqDiEn1 AT %MD1.207: REAL:=0.0;
				(*MDE: torque diesel engine 1 [Nm]*)
			MDmdePrChAirEn1 AT %MD1.208: REAL:=0.0;
				(*MDE: charge air pressure diesel engine 1 [bar]*)
			MDmdeTmChAirEn1 AT %MD1.209: REAL:=0.0;
				(*MDE: charge air temperature diesel engine 1 [°C]*)
			MDmdeTmCoWaEn1 AT %MD1.210: REAL:=0.0;
				(*MDE: cooling water temperature diesel engine 1 [°C]*)
			MDmdePrLbOilEn1 AT %MD1.211: REAL:=0.0;
				(*MDE: lub oil pressure diesel engine [bar]*)
			MDmdeVoBat1 AT %MD1.213: REAL:=0.0;
				(*MDE: voltage battery 1 [V]*)
			MDmdeSgLxJs1 AT %MD1.214: REAL:=0.0;
				(*MDE: signal x-direction left joystick 1 [%]*)
			MDmdeSgLyJs1 AT %MD1.215: REAL:=0.0;
				(*MDE: signal y-direction left joystick 1 [%]*)
			MDmdeSgRxJs1 AT %MD1.216: REAL:=0.0;
				(*MDE: signal x-direction right joystick 1 [%]*)
			MDmdeSgRyJs1 AT %MD1.217: REAL:=0.0;
				(*MDE: signal y-direction right joystick 1 [%]*)
			MDmdeRvEn AT %MD1.218: REAL:=0.0;
				(*MDE: revolutions engine [rpm]*)
			MDmdeUtHS1 AT %MD1.219: REAL:=0.0;
				(*MDE:utilisation hoisting system 1 [%]*)
			MDmdeOm1 AT %MD1.221: REAL:=0.0;
				(*MDE: operation mode 1*)
			MDmdeRvPu1W1 AT %MD1.222: REAL:=0.0;
				(*MDE: revolutions pump 1 winch 1 [rpm]*)
			MDmdeRvPu2W1 AT %MD1.223: REAL:=0.0;
				(*MDE: revolutions pump 2 winch 1 [rpm]*)
			MDmdePrPu1W1 AT %MD1.224: REAL:=0.0;
				(*MDE: pressure pump 1 winch 1 [bar]*)
			MDmdePrPu2W1 AT %MD1.225: REAL:=0.0;
				(*MDE: pressure pump 2 winch 1 [bar]*)
			MDmdePvPu1W1 AT %MD1.226: REAL:=0.0;
				(*MDE: pivoting range pump 1 winch 1 [%]*)
			MDmdePvPu2W1 AT %MD1.227: REAL:=0.0;
				(*MDE: pivoting range pump 2 winch 1 [%]*)
			MDmdePwPu1W1 AT %MD1.228: REAL:=0.0;
				(*MDE: power pump 1 winch 1 [kW]*)
			MDmdePwPu2W1 AT %MD1.229: REAL:=0.0;
				(*MDE: power pump 2 winch 1 [kW]*)
			MDmdeRvPu1W2 AT %MD1.230: REAL:=0.0;
				(*MDE: revolutions pump 1 winch 2 [rpm]*)
			MDmdeRvPu2W2 AT %MD1.231: REAL:=0.0;
				(*MDE: revolutions pump 2 winch 2 [rpm]*)
			MDmdePrPu1W2 AT %MD1.232: REAL:=0.0;
				(*MDE: pressure pump 1 winch 2 [bar]*)
			MDmdePrPu2W2 AT %MD1.233: REAL:=0.0;
				(*MDE: pressure pump 2 winch 2 [bar]*)
			MDmdePvPu1W2 AT %MD1.234: REAL:=0.0;
				(*MDE: pivoting range pump 1 winch 2 [%]*)
			MDmdePvPu2W2 AT %MD1.235: REAL:=0.0;
				(*MDE: pivoting range pump 2 winch 2 [%]*)
			MDmdePwPu1W2 AT %MD1.236: REAL:=0.0;
				(*MDE: power pump 1 winch 2 [kW]*)
			MDmdePwPu2W2 AT %MD1.237: REAL:=0.0;
				(*MDE: power pump 2 winch 2 [kW]*)
			MDmdeRvPu1SS1 AT %MD1.238: REAL:=0.0;
				(*MDE: revolutions pump 1 slewing system 1 [rpm]*)
			MDmdePrPu1SS1 AT %MD1.239: REAL:=0.0;
				(*MDE: pressure pump 1 slewing system 1 [bar]*)
			MDmdePvPu1SS1 AT %MD1.240: REAL:=0.0;
				(*MDE: pivoting range pump 1 slewing system 1 [%]*)
			MDmdePwPu1SS1 AT %MD1.241: REAL:=0.0;
				(*MDE: power pump 1 slewing system 1 [kW]*)
			MDmdeTmHOilTa1 AT %MD1.242: REAL:=0.0;
				(*MDE: temperature hydraulic oil tank 1 [°C]*)
			MDmdeUtOm AT %MD1.244: REAL:=0.0;
				(*MDE: utilisation operation mode [%]*)
			MDmdeRvW1 AT %MD1.245: REAL:=0.0;
				(*MDE: revolutions winch 1 [rpm]*)
			MDmdeTqG1W1 AT %MD1.246: REAL:=0.0;
				(*MDE: input torque gear 1 winch 1 [Nm]*)
			MDmdeRvW2 AT %MD1.247: REAL:=0.0;
				(*MDE: revolutions winch 2 [rpm]*)
			MDmdeTqG1W2 AT %MD1.248: REAL:=0.0;
				(*MDE: input torque gear 1 winch 2 [Nm]*)
			MDmdeFcAnRod AT %MD1.249: REAL:=0.0;
				(*MDE: force anchoring rod [kN]*)
			MDmdeHgGeRaDG1 AT %MD1.250: REAL:=0.0;
				(*gear ratio of gear box 1, hoisting winch *)
			MDmdeSgGeRaDG1 AT %MD1.251: REAL:=0.0;
				(*gear ratio of gear box 1, slewing gear*)
			MDmdeTmOut1 AT %MD1.252: REAL:=0.0;
				(*mde outside temperature 1 [°C]*)
			MDmdeFcRoW1 AT %MD1.253: REAL:=0.0;
				(*mde rope force winch 1 [kN]*)
			MDmdeSpRoW1 AT %MD1.254: REAL:=0.0;
				(*mde rope speed winch 1 [m/min]*)
			MDmdeFcRoW2 AT %MD1.255: REAL:=0.0;
				(*mde rope force winch 2 [kN]*)
			MDmdeSpRoW2 AT %MD1.256: REAL:=0.0;
				(*mde rope speed winch 2 [m/min]*)
			MDmdeAnSS1 AT %MD1.257: REAL:=0.0;
				(*mde angle slewing system 1 [°]*)
			MDmdePrSS1 AT %MD1.258: REAL:=0.0;
				(*mde pressure difference slewing system 1 [bar]*)
			MDmdeOm2 AT %MD1.259: REAL:=0.0;
				(*mde operation mode 2*)
			MDmdeLdHS1 AT %MD1.260: REAL:=0.0;
				(*mde load hoisting system 1 [to]*)
			MDmdeRdHS1 AT %MD1.261: REAL:=0.0;
				(*mde radius hoisting system 1 [m]*)
			MDhptLoadSensLe AT %MD1.266: REAL:=0.0;
				(*load sensor LEFT main boom - a frame in [kN]*)
			MDhptLoadSensRi AT %MD1.267: REAL:=0.0;
				(*load sensor RIGHT main boom - a frame in [kN]*)
			MDsupersSgOffset AT %MD1.268: REAL:=0.0;
				(*superstructure - sg Offset*)
			MDccLmlMinRadius AT %MD1.269: REAL:=0.0;
				(*counterweight carrier minimum radius*)
			MDccLmlMaxRadius AT %MD1.270: REAL:=0.0;
				(*counterweight carrier maximum radius*)
			MDccMaxForMinRad AT %MD1.271: REAL:=0.0;
				(*counterweight carrier maximum force superstructure at minimum radius*)
			MDccMaxForMaxRad AT %MD1.272: REAL:=0.0;
				(*counterweight carrier maximum force superstructure at maximum radius*)
			MDddSysPress AT %MD1.273: REAL:=0.0;
				(*drilling drive system pressure*)
			MDddRpm AT %MD1.274: REAL:=0.0;
				(*rpm drilling drive*)
			MDddJoySignal AT %MD1.275: REAL:=0.0;
				(*drilling drive analog signal joystick +/-[%]*)
			MDddExtAnalSign AT %MD1.276: REAL:=0.0;
				(*drilling drive external analog signal*)
			MDchargeAirTemp AT %MD1.277: REAL:=0.0;
				(*mde charge air temperature [°C]*)
			MDslackRopThresh AT %MD1.278: REAL:=0.0;
				(*ad slack rope limit: Threshold in to*)
			MDx23Poti1Moorin AT %MD1.279: REAL:=0.0;
				(*add. grab mooring, free fall limit*)
			MDmooringAnalSig AT %MD1.280: REAL:=0.0;
				(*mooring analog signal*)
			MDmoorExtAnalSig AT %MD1.281: REAL:=0.0;
				(*extern analog signal mooring*)
			MDmoorPumpSignal AT %MD1.282: REAL:=0.0;
				(*mooring pump signal*)
			MDmoorTrimotSign AT %MD1.283: REAL:=0.0;
				(*mooring trimot signal*)
			MDmoorExtPCont AT %MD1.284: REAL:=0.0;
				(*mooring extern pressure control signal*)
			MDhg1ExtSigPcont AT %MD1.285: REAL:=0.0;
				(*hg1 external analog signal pressure control*)
			MDhg2ExtSigPcont AT %MD1.286: REAL:=0.0;
				(*hg2 external analog signal pressure control*)
			MDslidTableAngel AT %MD1.287: REAL:=0.0;
				(*hanging leader sliding table angle*)
			MDlmlLenMainBoom AT %MD1.288: REAL:=0.0;
				(*lml length main boom [m]*)
			MDlmlLenJib AT %MD1.289: REAL:=0.0;
				(*lml length jib [m]*)
			MDSrvMachStdRemT AT %MD1.290: REAL:=0.0;
				(*LiDAT operation hours to next service*)
			MDmaInfOpTime AT %MD1.291: REAL:=0.0;
				(*LiDAT operation hours engine*)
			MRservHourToNext AT %MD1.292: REAL:=0.0;
				(*service hours until next service*)
			MDdefCont AT %MD1.293: REAL:=0.0;
				(*DEF content [%]*)
			MDlubOilCont AT %MD1.294: REAL:=0.0;
				(*lub oil content [%]*)
			MDoutdoorTemp AT %MD1.295: REAL:=0.0;
				(*outdoor termperature [°C]*)
			MRdpfTime AT %MD1.296: REAL:=0.0;
				(*engine DPF left regeneration time*)
			MDdpfMinEngTorqu AT %MD1.297: REAL:=0.0;
				(*particle filter regeneration minimum engine torque [Nm]*)
			MD1_298 AT %MD1.298: REAL:=0.0;
			MD1_299 AT %MD1.299: REAL:=0.0;
			MDcCDistanceAbso AT %MD1.300: REAL:=0.0;
				(*counterweight carrier distance absolut*)
			MDwheKitDistOut AT %MD1.301: REAL:=0.0;
				(*counterweight carrier distance outer wheel kit to the middle of the carrier*)
			MDwheKitDistIn AT %MD1.302: REAL:=0.0;
				(*counterweight carrier distance inner wheel kit to the middle of the carrier*)
			MDlmlSpeedReduct AT %MD1.303: REAL:=0.0;
				(*lml speed reduction value (lml changes 2010: spped reduction for electronical controlled crane functions)*)
			MDhgSpeedReduct AT %MD1.304: REAL:=0.0;
				(*hg speed reduction factor*)
			MRwalMaxRadius AT %MD1.305: REAL:=0.00;
				(*wal maximum radius of the machine*)
			MRwalLi1Int1AngM AT %MD1.306: REAL:=0.00;
				(*wal main boom sg angle border line 1 intersection 1 max radius*)
			MRwalLi1Int2AngM AT %MD1.307: REAL:=0.00;
				(*wal main boom sg angle border line 1  intersection 2 max radius*)
			MRwalLi2Int1AngM AT %MD1.308: REAL:=0.00;
				(*wal main boom sg angle border line 2  intersection 1 max radius*)
			MRwalLi2Int2AngM AT %MD1.309: REAL:=0.00;
				(*wal main boom sg angle border line 2  intersection 2 max radius*)
			MRwalLi1Int1AngJ AT %MD1.310: REAL:=0.00;
				(*wal luffing jib sg angle border line 1  intersection 1 max radius*)
			MRwalLi1Int2AngJ AT %MD1.311: REAL:=0.00;
				(*wal luffing jib sg angle border line 1  intersection 2  max radius*)
			MRwalLi2Int1AngJ AT %MD1.312: REAL:=0.00;
				(*wal luffing jib sg angle border line 2  intersection 1 max radius*)
			MRwalLi2Int2AngJ AT %MD1.313: REAL:=0.00;
				(*wal luffing jib sg angle border line 2  intersection 2 max radius*)
			MRwalStDisMaBoLg AT %MD1.314: REAL:=0.0;
				(*wal main boom horizontal stop distance by luffing gear*)
			MRwalStDisJibLg2 AT %MD1.315: REAL:=0.0;
				(*wal luffing jib horizontal stop distance by luffing gear 2*)
			MRwalStopAngSlew AT %MD1.316: REAL:=0.0;
				(*wal stop angle by slewing gear*)
			MRwaLDistToStop AT %MD1.317: REAL:=0.0;
				(*wal distance to collision stop*)
			MDsgAngleByAna AT %MD1.318: REAL:=0.0;
				(*sg angle in degree by analog sensor*)
			MDsgAngleByInc AT %MD1.319: REAL:=0.0;
				(*sg angle in degree by incremental sensor*)
			MDsgAngleSensor AT %MD1.320: REAL:=0.0;
				(*sg angle in degree ba analog sensor without offset*)
			MRleJoyYSymNr AT %MD1.331: REAL:=0.0;
				(*left joystick symbol number Y direction *)
			MRleJoyXSymNr AT %MD1.332: REAL:=0.0;
				(*left joystick symbol number X direction *)
			MRriJoyYSymNr AT %MD1.333: REAL:=0.0;
				(*right joystick symbol number Y direction *)
			MRriJoyXSymNr AT %MD1.334: REAL:=0.0;
				(*right joystick symbol number X direction *)
			MDstabWPumpSigCC AT %MD1.341: REAL:=0.0;
				(*stabilization winch pump signal (closed circuit) *)
			MDstabWPumpSigOC AT %MD1.342: REAL:=0.0;
				(*stabilization winch pump signal (open circuit) *)
			MDstabWPresSigCC AT %MD1.343: REAL:=0.0;
				(*stabilization winch pressure signal (closed circuit) *)
			MDstabWPresSigOC AT %MD1.344: REAL:=0.0;
				(*stabilization winch pressure signal (open circuit) *)
			MDhoWiPumpSigCC AT %MD1.345: REAL:=0.0;
				(*hose winch pump signal (closed circuit) *)
			MDhoWiPumpSigOC AT %MD1.346: REAL:=0.0;
				(*hose winch pump signal (open circuit) *)
			MDhoWiPresSigCC AT %MD1.347: REAL:=0.0;
				(*hose winch pressure signal (closed circuit) *)
			MDhoWiPresSigOC AT %MD1.348: REAL:=0.0;
				(*hose winch pressure signal (open circuit) *)
			MDdgcRopeLenHG1 AT %MD1.350: REAL:=0.0;
				(*dgc redundant rope length measuring HG1*)
			MDdgcRopeLenHG2 AT %MD1.351: REAL:=0.0;
				(*dgc redundant rope length measuring HG2*)
			MDdgcAdRopLenHG1 AT %MD1.352: REAL:=0.0;
				(*dgc additional redundant rope length measuring HG1*)
			MDdgcAdRopLenHG2 AT %MD1.353: REAL:=0.0;
				(*dgc additional redundant rope length measuring HG2*)
			MDdgcRlmDiffHg1 AT %MD1.354: REAL:=0.0;
				(*dgc redundant rope length measuring difference HG1*)
			MDdgcRlmDiffHg2 AT %MD1.355: REAL:=0.0;
				(*dgc redundant rope length measuring difference HG2*)
			MDdgcRlmDiffHg AT %MD1.356: REAL:=0.0;
				(*dgc rope length measuring difference HG1&HG2*)
			MDgrabDeviationX AT %MD1.357: REAL:=0.0;
				(*grab deviation in X *)
			MDgrabDeviationY AT %MD1.358: REAL:=0.0;
				(*grab deviation in Y*)
			MDgrabInclinatiX AT %MD1.359: REAL:=0.0;
				(*grab inclination in X*)
			MDgrabInclinatiY AT %MD1.360: REAL:=0.0;
				(*grab inclination in Y*)
			MDz3CursorSign AT %MD1.400: REAL:=0.0;
				(*Z3 analog signal cursor +/-[%]*)
			MDz3JoySignal AT %MD1.401: REAL:=0.0;
				(*Z3 analog signal joystick +/-[%]*)
			MDz3PumpSignal AT %MD1.402: REAL:=0.0;
				(*Z3 analog pump signal*)
			MDz2CursorSign AT %MD1.403: REAL:=0.0;
				(*Z2 analog signal cursor +/-[%]*)
			MDz2JoySignal AT %MD1.404: REAL:=0.0;
				(*Z2 analog signal joystick +/-[%]*)
			MDz2PumpSignal AT %MD1.405: REAL:=0.0;
				(*Z2 analog pump signal*)
			MDz4CursorSign AT %MD1.406: REAL:=0.0;
				(*Z4 analog signal cursor +/-[%]*)
			MDz4JoySignal AT %MD1.407: REAL:=0.0;
				(*Z4 analog signal joystick +/-[%]*)
			MDz4PumpSignal AT %MD1.408: REAL:=0.0;
				(*Z4 analog pump signal*)
			MDz6CursorSign AT %MD1.409: REAL:=0.0;
				(*Z6 analog signal cursor +/-[%]*)
			MDz6JoySignal AT %MD1.410: REAL:=0.0;
				(*Z6 analog signal joystick +/-[%]*)
			MDz6PumpSignal AT %MD1.411: REAL:=0.0;
				(*Z6 analog pump signal*)
			MDddPumpSignal AT %MD1.412: REAL:=0.0;
				(*drilling drive pump analog signal*)
			MDlg2JoySigSG AT %MD1.413: REAL:=0.0;
				(*lg2 analog signal joystick sg +/-[%]*)
			MDgrJoySigSlew AT %MD1.414: REAL:=0.0;
				(*grab slewing analog signal joystick +/-[%]*)
			MDhg1PreJoySig AT %MD1.415: REAL:=0.0;
				(*HG 1 joystick signal  before MUX +/- [%]*)
			MDhg2PreJoySig AT %MD1.416: REAL:=0.0;
				(*HG 2 joystick signal before MUX +/-[%]*)
			MDlgPreJoySig AT %MD1.417: REAL:=0.0;
				(*LG joystick signal before MUX +/-[%]*)
			MDsgPreJoySig AT %MD1.418: REAL:=0.0;
				(*SG joystick signal before MUX +/-[%]*)
			MDlg2JoySigLG AT %MD1.419: REAL:=0.0;
				(*lg2 analog signal joystick lg +/-[%]*)
			MDlg2JoySigHG2 AT %MD1.420: REAL:=0.0;
				(*lg2 analog signal joystick hg2 +/-[%]*)
			MDgrabJoySignal AT %MD1.421: REAL:=0.0;
				(*grab analog signal joystick +/-[%]*)
			MDmoorJoySignal AT %MD1.422: REAL:=0.0;
				(*mooring analog signal joystick +/-[%]*)
			MDhydrTankCont AT %MD1.423: REAL:=0.0;
				(*hydraulic tank content [%]*)
			MDgrabPumpSignal AT %MD1.424: REAL:=0.0;
				(*hydraulic grab pump analog signal*)
			MDlmlSpeedRed_Lg AT %MD1.425: REAL:=0.0;
				(*lml speed reduction value LG (lml changes 2010)*)
			MDlmlSpeedRed_Sg AT %MD1.426: REAL:=0.0;
				(*lml speed reduction value SG (lml changes 2010)*)
			MDlmlSpeedRed_Tg AT %MD1.427: REAL:=0.0;
				(*lml speed reduction value TG (lml changes 2010)*)
			MDpwJoySignal AT %MD1.428: REAL:=0.0;
				(*passenger winch joy stick signal*)
			MDz6ExtAnalSign AT %MD1.429: REAL:=0.0;
				(*Z6 external analog signal +/-[%]*)
			MDz4ExtAnalSign AT %MD1.430: REAL:=0.0;
				(*Z4 external analog signal +/-[%]*)
			MDz2ExtAnalSign AT %MD1.431: REAL:=0.0;
				(*Z2 external analog signal +/-[%]*)
			MDz3ExtAnalSign AT %MD1.432: REAL:=0.0;
				(*Z3 external analog signal +/-[%]*)
			MDz17PumpSignal AT %MD1.433: REAL:=0.0;
				(*Z17 analog pump signal*)
			MDz17CursorSign AT %MD1.434: REAL:=0.0;
				(*Z17 analog signal cursor +/-[%]*)
			MDplGuiCursorSig AT %MD1.435: REAL:=0.0;
				(*pile guide cylidner analog signal cursor +/-[%]*)
			MDplGuiPumpSig AT %MD1.436: REAL:=0.0;
				(*pile guide cylidner analog pump signal*)
			MDgrabAdPuSig AT %MD1.437: REAL:=0.0;
				(*grab adjustment pump signal*)
			MDgrAdJoySignal AT %MD1.438: REAL:=0.0;
				(*grab adjustment joystick signal*)
			MDgrSlewPuSig AT %MD1.439: REAL:=0.0;
				(*grab slewing pump signal (joystick controlled) *)
			MDgrLockCylPuSig AT %MD1.440: REAL:=0.0;
				(*grab lock cylinder pump signal*)
			MDgrHoAdCylPuSig AT %MD1.441: REAL:=0.0;
				(*grab hose adjust cylinder pump signal*)
			MDgrSlewPuSigB AT %MD1.442: REAL:=0.0;
				(*grab slewing pump signal (button controlled) *)
			MDgrAd1PumpSig AT %MD1.443: REAL:=0.0;
				(*grab adjustment1 pump signal *)
			MDgrAd2PumpSig AT %MD1.444: REAL:=0.0;
				(*grab adjustment2 pump signal *)
			MDgrHoWiPressSig AT %MD1.445: REAL:=0.0;
				(*gab hose winch pressure signal *)
			MDgrHoWiPumpSig AT %MD1.446: REAL:=0.0;
				(*gab hose winch pump signal *)
			MDwheelKitAngle1 AT %MD1.447: REAL:=0.0;
			MDwheelKitAngle2 AT %MD1.448: REAL:=0.0;
			MDwheelKitAngle3 AT %MD1.449: REAL:=0.0;
			MDwheelKitAngle4 AT %MD1.450: REAL:=0.0;
			MDfloaCouWeiSign AT %MD1.451: REAL:=0.0;
				(*floating counterweight analog signal*)
			MRccOperatMode AT %MD1.452: REAL:=0.0;
				(*CC operational mode*)
			MDhoCylJoySignal AT %MD1.453: REAL:=0.0;
				(*hoisting cylinder analog signal joystick +/-[%]*)
			MDaxwJoySigLG AT %MD1.454: REAL:=0.0;
				(*aux. winch analog signal joystick lg +/-[%]*)
			MDaxwJoySigHG2 AT %MD1.455: REAL:=0.0;
				(*aux. winch analog signal joystick hg2 +/-[%]*)
			MDaxwPumpSignal AT %MD1.456: REAL:=0.0;
				(*aux. winch analog signal pump in [%]*)
			MDadwJoySig AT %MD1.457: REAL:=0.0;
				(*add. winch analog signal joystick hg2 +/-[%]*)
			MDadwPumpSignal AT %MD1.458: REAL:=0.0;
				(*add. winch analog signal pump in [%]*)
			MDhocPumpSignal AT %MD1.457: REAL:=0.0;
				(*hoisting cylinder analog signal pump in [%]*)
			MDz2PressSignal AT %MD1.458: REAL:=0.0;
				(*Z2 pressure signal [%]*)
			MDgrLockCylPrSig AT %MD1.458: REAL:=0.0;
				(*grab lock cylinder pressure signal [%]*)
			MDludv4ExtAnaSig AT %MD1.459: REAL:=0.0;
				(*LUDV pump 4 external analog signal in %*)
			MDhamPump1Signal AT %MD1.460: REAL:=0.0;
				(*hammer analog signal pump 1 [%]*)
			MDhamPump2Signal AT %MD1.461: REAL:=0.0;
				(*hammer analog signal pump 2 [%]*)
			MDvibPump1Signal AT %MD1.462: REAL:=0.0;
				(*vibrator analog signal pump 1 [%]*)
			MDvibPump2Signal AT %MD1.463: REAL:=0.0;
				(*vibrator analog signal pump 2 [%]*)
			MDgrbPump1Signal AT %MD1.464: REAL:=0.0;
				(*grab analog signal pump 1 [%]*)
			MDgrbPump2Signal AT %MD1.465: REAL:=0.0;
				(*grab analog signal pump 2 [%]*)
			MDddPump1Signal AT %MD1.466: REAL:=0.0;
				(*grab analog signal pump 1 [%]*)
			MDddPump2Signal AT %MD1.467: REAL:=0.0;
				(*grab analog signal pump 2 [%]*)
			MDdebug1 AT %MD1.900: DINT:=0;
				(*old counts*)
			MDdebug2 AT %MD1.902: REAL:=0.0;
				(*frequency*)
			MDdebug3 AT %MD1.903: REAL:=0.0;
				(*speed*)
			MDdebug4 AT %MD1.904: REAL:=0.0;
				(*debug4*)
			MDscaledInput1 AT %MD1.1001: REAL:=0.0;
				(*scaled measuring input 1*)
			MDscaledInput2 AT %MD1.1002: REAL:=0.0;
				(*scaled measuring input 2*)
			MDscaledInput3 AT %MD1.1003: REAL:=0.0;
				(*scaled measuring input 3*)
			MDscaledInput4 AT %MD1.1004: REAL:=0.0;
				(*scaled measuring input 4*)
			MDscaledInput5 AT %MD1.1005: REAL:=0.0;
				(*scaled measuring input 5*)
			MDscaledInput6 AT %MD1.1006: REAL:=0.0;
				(*scaled measuring input 6*)
			MDscaledInput7 AT %MD1.1007: REAL:=0.0;
				(*scaled measuring input 7*)
			MDscaledInput8 AT %MD1.1008: REAL:=0.0;
				(*scaled measuring input 8*)
			MDscaledInput9 AT %MD1.1009: REAL:=0.0;
				(*scaled measuring input 9*)
			MDscaledInput10 AT %MD1.1010: REAL:=0.0;
				(*scaled measuring input 10*)
			MDscaledInput11 AT %MD1.1011: REAL:=0.0;
				(*scaled measuring input 11*)
			MDscaledInput12 AT %MD1.1012: REAL:=0.0;
				(*scaled measuring input 12*)
			MDscaledInput13 AT %MD1.1013: REAL:=0.0;
				(*scaled measuring input 13*)
			MDscaledInput14 AT %MD1.1014: REAL:=0.0;
				(*scaled measuring input 14*)
			MDscaledInput15 AT %MD1.1015: REAL:=0.0;
				(*scaled measuring input 15*)
			MDscaledInput16 AT %MD1.1016: REAL:=0.0;
				(*scaled measuring input 16*)
		END_VAR
		VAR_GLOBAL CONSTANT RETAIN
			CX2TJoystick AT %MX2.1: BOOL:=FALSE;
				(*enable double T joystick*)
			CXadGroundPress AT %MX2.2: BOOL:=FALSE;
				(*additional device ground pressure*)
			CX3 AT %MX2.3: BOOL:=FALSE;
			CXhgFastSpeed AT %MX2.4: BOOL:=FALSE;
				(*HG 1 and 2 normal fast speed operation (gear box) *)
			CXsgMomRegulator AT %MX2.5: BOOL:=FALSE;
				(*SG moment regulator enabled*)
			CX6 AT %MX2.6: BOOL:=FALSE;
			CX7 AT %MX2.7: BOOL:=FALSE;
			CXadHgLowerCont AT %MX2.8: BOOL:=FALSE;
				(*additional device lowering control for HG*)
			CXadHg1LoweLimit AT %MX2.9: BOOL:=FALSE;
				(*additional device lower limit switch for HG 1*)
			CXadHg2LoweLimit AT %MX2.10: BOOL:=FALSE;
				(*additional device lower limit switch for HG 2*)
			CX11 AT %MX2.11: BOOL:=FALSE;
			CXwindSpeedSenso AT %MX2.12: BOOL:=FALSE;
				(*wind speed sensor present*)
			CXwalPresel AT %MX2.13: BOOL:=FALSE;
				(*ad work area limitation active*)
			CXhg1RopeLenMeas AT %MX2.14: BOOL:=FALSE;
				(*rope lenght measuring hg 1*)
			CXhg2RopeLenMeas AT %MX2.15: BOOL:=FALSE;
				(*rope lenght measuring hg 2*)
			CXaddHydraulics AT %MX2.16: BOOL:=FALSE;
				(*additional hydraulics*)
			CXaFrameErectCyl AT %MX2.17: BOOL:=FALSE;
				(*additional device a frame erection cylinder (only HS8070) *)
			CXconTensWinch AT %MX2.18: BOOL:=FALSE;
				(*constant tension winch (fixed const tension, lowering)*)
			CXadLgLoweLimit AT %MX2.19: BOOL:=FALSE;
				(*additional device lower limit switch for LG*)
			CX20 AT %MX2.20: BOOL:=FALSE;
			CX21 AT %MX2.21: BOOL:=FALSE;
			CX22 AT %MX2.22: BOOL:=FALSE;
			CXadWinchSynchro AT %MX2.23: BOOL:=FALSE;
				(*add device winch synchronization*)
			CXtgWarning AT %MX2.24: BOOL:=FALSE;
				(*enable travelling gear warning*)
			CXsgWarning AT %MX2.25: BOOL:=FALSE;
				(*enable slewing gear warning*)
			CXsgMomReJoyLock AT %MX2.26: BOOL:=FALSE;
				(*sg moment regulator by joystick button locked or not locked*)
			CXlmlNotRedundan AT %MX2.27: BOOL:=FALSE;
				(*additional: lml not redundant*)
			CXjoystVibrHg1 AT %MX2.28: BOOL:=FALSE;
				(*enable joystick vibrator hg 1*)
			CXjoystVibrHg2 AT %MX2.29: BOOL:=FALSE;
				(*enable joystick vibrator hg 2*)
			CXjoystVibrLg AT %MX2.30: BOOL:=FALSE;
				(*enable joystick vibrator lg*)
			CXjoystVibrSg AT %MX2.31: BOOL:=FALSE;
				(*enable joystick vibrator sg*)
			CXadDynGrouComp AT %MX2.32: BOOL:=FALSE;
				(*additional device dynamic ground compaction*)
			CXdgcSlipFallOff AT %MX2.33: BOOL:=FALSE;
				(*ad dgc: lock slipping fall in the beginning of the fall*)
			CX34 AT %MX2.34: BOOL:=FALSE;
			CXaddWinch AT %MX2.35: BOOL:=FALSE;
				(*additional: additional winch *)
			CXauxWinch AT %MX2.36: BOOL:=FALSE;
				(*additional: auxilliary winch *)
			CXsuperstAngSens AT %MX2.37: BOOL:=FALSE;
				(*superstructure angle indication*)
			CXadGrabControl AT %MX2.38: BOOL:=FALSE;
				(*additional device grab control*)
			CXremoteControl AT %MX2.39: BOOL:=FALSE;
				(*ad radio remote control*)
			CXrcSwitchContro AT %MX2.40: BOOL:=FALSE;
				(*radio remote control release switch control rc / cabine*)
			CXadSBHydrGrab AT %MX2.41: BOOL:=FALSE;
				(*add. soletanche bachy hydraulic grab control*)
			CXadSMHydrGrab AT %MX2.42: BOOL:=FALSE;
				(*add. soilmec hydraulic grab control*)
			CXadLEHydrGrab AT %MX2.43: BOOL:=FALSE;
				(*add. leffer hydraulic grab control*)
			CXadBAHydrGrab AT %MX2.44: BOOL:=FALSE;
				(*add. bauer hydraulic grab control*)
			CXdgcBlockLml AT %MX2.45: BOOL:=FALSE;
				(*dgc block lml (on the dgc page)*)
			CXhydrGrab1Sect AT %MX2.46: BOOL:=FALSE;
				(*hydr. grab with only 1 ludv section*)
			CXadHydrGrab AT %MX2.47: BOOL:=FALSE;
				(*ad hydraulic grab control without hose winch*)
			CXadVibOperat AT %MX2.48: BOOL:=FALSE;
				(*additional device vibrator operation*)
			CXadHamOperat AT %MX2.49: BOOL:=FALSE;
				(*additional device hammer operation *)
			CXadVibFreqMeas AT %MX2.50: BOOL:=FALSE;
				(*add.vibrator frequency measuring equipment*)
			CXadHoistingCyl AT %MX2.51: BOOL:=FALSE;
				(*add. device hoisting cylinder*)
			CXauxWithHg2Joy AT %MX2.52: BOOL:=FALSE;
				(*using hg2 joystick for auxilliary winch*)
			CXjoystVibrAux AT %MX2.53: BOOL:=FALSE;
				(*enable joystick vibrator auxiliary winch*)
			CXhg1Preselect AT %MX2.54: BOOL:=FALSE;
				(*HG 1 is preselected (installed)*)
			CXhg2Preselect AT %MX2.55: BOOL:=FALSE;
				(*HG 2 is preselected (installed)*)
			CX56 AT %MX2.56: BOOL:=FALSE;
			CXwinSynchByX23 AT %MX2.57: BOOL:=FALSE;
				(*additional device winch synchronization by X23 keyboard button (locked)*)
			CXrcRelAssemOper AT %MX2.58: BOOL:=FALSE;
				(*remote control release assembly operation*)
			CXgrabContrByX23 AT %MX2.59: BOOL:=FALSE;
				(*add. grab control preselect by X23*)
			CXadBAMilOperat AT %MX2.60: BOOL:=FALSE;
				(*add. device bauer milling operation*)
			CXadPassWinch AT %MX2.61: BOOL:=FALSE;
				(*additional: preselection passenger  winch *)
			CXadChangeJoysti AT %MX2.62: BOOL:=FALSE;
				(*add. change joystick hg1 and hg2*)
			CXhgSpecialLift AT %MX2.63: BOOL:=FALSE;
				(*ad hg special sensitive lifting function*)
			CXhamVibDirect AT %MX2.64: BOOL:=FALSE;
				(*add. vibrator/hammer direct on pump *)
			CX65 AT %MX2.65: BOOL:=FALSE;
			CXanaStabWinch AT %MX2.66: BOOL:=FALSE;
				(*additional stabilzation winch (analog hoisting, analog const tension, freefall)*)
			CXsgWithTrimot AT %MX2.67: BOOL:=FALSE;
				(*slewing gear with trimot*)
			CX68 AT %MX2.68: BOOL:=FALSE;
			CXadMagneticUnit AT %MX2.69: BOOL:=FALSE;
				(*add device magnetic unit*)
			CXadHangLeader AT %MX2.70: BOOL:=FALSE;
				(*add. device hanging leader*)
			CXleadAngleIndic AT %MX2.71: BOOL:=FALSE;
				(*add. leader angle indication*)
			CXpileGuideCyl AT %MX2.72: BOOL:=FALSE;
				(*add. pile guide cylinder (leader) *)
			CXleadSlewCylZ3 AT %MX2.73: BOOL:=FALSE;
				(*add. leader slewing cylinder Z3*)
			CXleadGallCylZ17 AT %MX2.74: BOOL:=FALSE;
				(*add. gallows cylinder Z17*)
			CXslackRopePress AT %MX2.75: BOOL:=FALSE;
				(*slack rope control by pressure limit hoisting gear*)
			CXslackRopeLml AT %MX2.76: BOOL:=FALSE;
				(*slack rope control by lml limit luffing gear*)
			CXadHgHightLimit AT %MX2.77: BOOL:=FALSE;
				(*ad hoisting gear hight limitation *)
			CXadRopLenCorrec AT %MX2.78: BOOL:=FALSE;
				(*rope length correction of the main boom movement*)
			CX79 AT %MX2.79: BOOL:=FALSE;
			CX80 AT %MX2.80: BOOL:=FALSE;
			CXexDrOnJoyStick AT %MX2.81: BOOL:=FALSE;
				(*excentric drive on joy stick *)
			CXadKellyHydGrab AT %MX2.82: BOOL:=FALSE;
				(*add. device hydraulic kelly grab operation*)
			CXadHydrGrabHose AT %MX2.83: BOOL:=FALSE;
				(*add. device hydraulic grab with hose winch*)
			CXdestruConsTens AT %MX2.84: BOOL:=FALSE;
				(*add. constant tension at destruction operation*)
			CXadDrillOperat AT %MX2.85: BOOL:=FALSE;
				(*additional device drilling drive operation *)
			CXpolyGrabDigOCl AT %MX2.86: BOOL:=FALSE;
				(*poly grab digital open/close (no slewing possible)*)
			CXautoSlideTable AT %MX2.87: BOOL:=FALSE;
				(*add. automatic sliding table for leader inclination *)
			CXslidTabLimSwit AT %MX2.88: BOOL:=FALSE;
				(*add. limit switch sliding table (pievote piece)*)
			CXadInclSwOffDev AT %MX2.89: BOOL:=FALSE;
				(*add. inclination switch off device*)
			CXadCouCarrier AT %MX2.90: BOOL:=FALSE;
				(*counterweight carrier*)
			CXadDragliOpMode AT %MX2.91: BOOL:=FALSE;
				(*add. dragline operation mode*)
			CXadExtOperMode AT %MX2.92: BOOL:=FALSE;
				(*additional external operation mode*)
			CXecBaudrateDire AT %MX2.93: BOOL:=FALSE;
				(*external control start with adjusted baudrate directly*)
			CXlrMooringPrese AT %MX2.95: BOOL:=FALSE;
				(*mooring for leader operation preselect*)
			CXaddHydrOilSupp AT %MX2.96: BOOL:=FALSE;
				(*additional hydraulic oil supply ludv pump*)
			CXaccessControl AT %MX2.101: BOOL:=FALSE;
				(*access control activated*)
			CXoperatLock AT %MX2.102: BOOL:=FALSE;
				(*operation lock system activated*)
			CWhg1minCurPumUp AT %MW2.1: UINT:=0;
				(*HG 1 minimum current pump up*)
			CWhg1minCurPumDn AT %MW2.2: UINT:=0;
				(*HG 1 minimum current pump down*)
			CWhg1maxCurPumUp AT %MW2.3: UINT:=0;
				(*HG 1 maximum current pump up*)
			CWhg1maxCurPumDn AT %MW2.4: UINT:=0;
				(*HG 1 maximum current pump down*)
			CWhg1minCurTrimo AT %MW2.5: UINT:=0;
				(*HG 1 minimum current trimot*)
			CWhg1maxCurTrimo AT %MW2.6: UINT:=0;
				(*HG 1 maximum current trimot*)
			CW2_7 AT %MW2.7: UINT:=0;
				(*not used*)
			CWhg2minCurPumUp AT %MW2.8: UINT:=0;
				(*HG 2 minimum current pump up*)
			CWhg2minCurPumDn AT %MW2.9: UINT:=0;
				(*HG 2 minimum current pump down*)
			CWhg2maxCurPumUp AT %MW2.10: UINT:=0;
				(*HG 2 maximum current pump up*)
			CWhg2maxCurPumDn AT %MW2.11: UINT:=0;
				(*HG 2 maximum current pump down*)
			CWhg2minCurTrimo AT %MW2.12: UINT:=0;
				(*HG 2 minimum current trimot*)
			CWhg2maxCurTrimo AT %MW2.13: UINT:=0;
				(*HG 2 maximum current trimot*)
			CW2_14 AT %MW2.14: UINT:=0;
				(*not used*)
			CWlgminCurPumUp AT %MW2.15: UINT:=0;
				(*LG minimum current pump up*)
			CWlgminCurPumDn AT %MW2.16: UINT:=0;
				(*LG minimum current pump down*)
			CWlgmaxCurPumUp AT %MW2.17: UINT:=0;
				(*LG maximum current pump up*)
			CWlgmaxCurPumDn AT %MW2.18: UINT:=0;
				(*LG maximum current pump down*)
			CWlg2minCurPumUp AT %MW2.19: UINT:=0;
				(*LG 2 minimum current pump up*)
			CWlg2minCurPumDn AT %MW2.20: UINT:=0;
				(*LG 2 minimum current pump down*)
			CWlg2maxCurPumUp AT %MW2.21: UINT:=0;
				(*LG 2 maximum current pump up*)
			CWlg2maxCurPumDn AT %MW2.22: UINT:=0;
				(*LG 2 maximum current pump down*)
			CWsgminCurPumRi AT %MW2.23: UINT:=0;
				(*SG minimum current pump right*)
			CWsgminCurPumLe AT %MW2.24: UINT:=0;
				(*SG minimum current pump left*)
			CWsgmaxCurPumRi AT %MW2.25: UINT:=0;
				(*SG maximum current pump right*)
			CWsgmaxCurPumLe AT %MW2.26: UINT:=0;
				(*SG maximum current pump left*)
			CWludv1MinCurPum AT %MW2.27: UINT:=0;
				(*LUDV 1 minimum current pump*)
			CWludv1MaxCurPum AT %MW2.28: UINT:=0;
				(*LUDV 1 maximum current pump*)
			CWludv2MinCurPum AT %MW2.29: UINT:=0;
				(*LUDV 2 minimum current pump*)
			CWludv2MaxCurPum AT %MW2.30: UINT:=0;
				(*LUDV 2 maximum current pump*)
			CWfanDrMinCurPum AT %MW2.31: UINT:=0;
				(*fan drive min. current valve*)
			CWfanDrMaxCurPum AT %MW2.32: UINT:=0;
				(*fan drive max. current valve*)
			CWpContMaxCPowLi AT %MW2.33: UINT:=0;
				(*power limit. maximum current pressure control valve *)
			CWpContMinCPowLi AT %MW2.34: UINT:=0;
				(*power limit. minimum current pressure control valve *)
			CWadHyMinCurSec1 AT %MW2.35: UINT:=0;
				(*additional hydraulics minimum current section 1*)
			CWadHyMinCurSec2 AT %MW2.36: UINT:=0;
				(*additional hydraulics minimum current section 2*)
			CWadHyMaxCurSec1 AT %MW2.37: UINT:=0;
				(*additional hydraulics maximum current section 1*)
			CWadHyMaxCurSec2 AT %MW2.38: UINT:=0;
				(*additional hydraulics maximum current section 2*)
			CW2_39 AT %MW2.39: UINT:=0;
			CW2_40 AT %MW2.40: UINT:=0;
			CW4T_Y30MinCur AT %MW2.41: UINT:=0;
				(*4T-Y30 min. current valve*)
			CW4T_Y30MaxCur AT %MW2.42: UINT:=0;
				(*4T-Y30 max. current valve*)
			CW4T_Y31MinCur AT %MW2.43: UINT:=0;
				(*4T-Y31 min. current valve*)
			CW4T_Y31MaxCur AT %MW2.44: UINT:=0;
				(*4T-Y31 max. current valve*)
			CW4T_Y8MinCur AT %MW2.45: UINT:=0;
				(*4T-Y8 min. current valve*)
			CW4T_Y8MaxCur AT %MW2.46: UINT:=0;
				(*4T-Y8 max. current valve*)
			CWdgcMinCurrClu AT %MW2.47: UINT:=0;
				(*ad dynamic ground compaction min. current clutch valve*)
			CWdgcMaxCurrClu AT %MW2.48: UINT:=0;
				(*ad dynamic ground compaction max. current clutch valve*)
			CWludvPreContMin AT %MW2.49: UINT:=0;
				(*ludv pump pressure control min. current*)
			CWludvPreContMax AT %MW2.50: UINT:=0;
				(*ludv pump pressure control max. current*)
			CWp1MinCurValveA AT %MW2.51: UINT:=0;
				(*p1 ludv section min.current (A side)*)
			CWp1MaxCurValveA AT %MW2.52: UINT:=0;
				(*p1 ludv section max.current (A side)*)
			CWp1MinCurValveB AT %MW2.53: UINT:=0;
				(*p1 ludv section min.current (B side) main*)
			CWp1MaxCurValveB AT %MW2.54: UINT:=0;
				(*p1 ludv section max.current (B side) main*)
			CWp2MinCurValveA AT %MW2.55: UINT:=0;
				(*p2 ludv section min.current (A side)*)
			CWp2MaxCurValveA AT %MW2.56: UINT:=0;
				(*p2 ludv section max.current (A side)*)
			CWp2MinCurValveB AT %MW2.57: UINT:=0;
				(*p2 ludv section min.current (B side) main*)
			CWp2MaxCurValveB AT %MW2.58: UINT:=0;
				(*p2 ludv section max.current (B side) main*)
			CWgrabPresMaxClo AT %MW2.59: UINT:=0;
				(*max. current pressure control grab close*)
			CWgrabPresMaxOpe AT %MW2.60: UINT:=0;
				(*max. current pressure control grab open*)
			CWgrabPresMinCur AT %MW2.61: UINT:=0;
				(*min. current pressure control grab open / close*)
			CWgrabCloStoPres AT %MW2.62: UINT:=0;
				(*grab close pressure [bar]*)
			CWgrabOpeStoPres AT %MW2.63: UINT:=0;
				(*grab open pressure [bar]*)
			CW64 AT %MW2.64: UINT:=0;
			CW65 AT %MW2.65: UINT:=0;
			CWminCurTgCtrVlv AT %MW2.66: UINT:=0;
				(*minimum current travelling gear control valve*)
			CWmaxCurTgCtrVlv AT %MW2.67: UINT:=0;
				(*maximum current travelling gear control valve*)
			CWminCurCOffLudv AT %MW2.68: UINT:=0;
				(*cut off ludv pumps min. current*)
			CWmaxCurCOffLudv AT %MW2.69: UINT:=0;
				(*cut off ludv pumps max. current*)
			CWp1PumpMaxValue AT %MW2.70: UINT:=0;
				(*p1 pump max. value [l/min]*)
			CWp1Pump50liter AT %MW2.71: UINT:=0;
				(*p1 pump current for 50l/min*)
			CWp1Pump100liter AT %MW2.72: UINT:=0;
				(*p1 pump current for 100l/min*)
			CWp1Pump150liter AT %MW2.73: UINT:=0;
				(*p1 pump current for 150l/min*)
			CWp1Pump200liter AT %MW2.74: UINT:=0;
				(*p1 pump current for 200l/min*)
			CWp1Pump250liter AT %MW2.75: UINT:=0;
				(*p1 pump current for 250l/min*)
			CWp1Pump300liter AT %MW2.76: UINT:=0;
				(*p1 pump current for 300l/min*)
			CWp1Pump350liter AT %MW2.77: UINT:=0;
				(*p1 pump current for 350l/min*)
			CWp1Pump400liter AT %MW2.78: UINT:=0;
				(*p1 pump current for 400l/min*)
			CWp1Pump450liter AT %MW2.79: UINT:=0;
				(*p1 pump current for 450l/min*)
			CWp1Pump500liter AT %MW2.80: UINT:=0;
				(*p1 pump current for 500l/min*)
			CWp2PumpMaxValue AT %MW2.81: UINT:=0;
				(*p2 pump max. value [l/min]*)
			CWp2Pump50liter AT %MW2.82: UINT:=0;
				(*p2 pump current for 50l/min*)
			CWp2Pump100liter AT %MW2.83: UINT:=0;
				(*p2 pump current for 100l/min*)
			CWp2Pump150liter AT %MW2.84: UINT:=0;
				(*p2 pump current for 150l/min*)
			CWp2Pump200liter AT %MW2.85: UINT:=0;
				(*p2 pump current for 200l/min*)
			CWp2Pump250liter AT %MW2.86: UINT:=0;
				(*p2 pump current for 250l/min*)
			CWp2Pump300liter AT %MW2.87: UINT:=0;
				(*p2 pump current for 300l/min*)
			CWp2Pump350liter AT %MW2.88: UINT:=0;
				(*p2 pump current for 350l/min*)
			CWp2Pump400liter AT %MW2.89: UINT:=0;
				(*p2 pump current for 400l/min*)
			CWp2Pump450liter AT %MW2.90: UINT:=0;
				(*p2 pump current for 450l/min*)
			CWp2Pump500liter AT %MW2.91: UINT:=0;
				(*p2 pump current for 500l/min*)
			CWludv3MinCurPum AT %MW2.92: UINT:=0;
				(*LUDV 3 minimum current pump*)
			CWludv3MaxCurPum AT %MW2.93: UINT:=0;
				(*LUDV 3 maximum current pump*)
			CWludv4MinCurPum AT %MW2.94: UINT:=0;
				(*LUDV 4 minimum current pump*)
			CWludv4MaxCurPum AT %MW2.95: UINT:=0;
				(*LUDV 4 maximum current pump*)
			CW96 AT %MW2.96: UINT:=0;
			CW97 AT %MW2.97: UINT:=0;
			CW98 AT %MW2.98: UINT:=0;
			CW99 AT %MW2.99: UINT:=0;
			CWp1MaxValue AT %MW2.100: UINT:=0;
				(*p1 ludv section max. value [l/min]*)
			CWp1cur50liter AT %MW2.101: UINT:=0;
				(*p1 ludv section current for 50l/min*)
			CWp1cur100liter AT %MW2.102: UINT:=0;
				(*p1 ludv section current for 100l/min*)
			CWp1cur150liter AT %MW2.103: UINT:=0;
				(*p1 ludv section current for 150l/min*)
			CWp1cur200liter AT %MW2.104: UINT:=0;
				(*p1 ludv section current for 200l/min*)
			CWp1cur250liter AT %MW2.105: UINT:=0;
				(*p1 ludv section current for 250l/min*)
			CWp1cur300liter AT %MW2.106: UINT:=0;
				(*p1 ludv section current for 300l/min*)
			CWp2MaxValue AT %MW2.107: UINT:=0;
				(*p2 ludv section max. value [l/min]*)
			CWp2cur50liter AT %MW2.108: UINT:=0;
				(*p2 ludv section current for 50l/min*)
			CWp2cur100liter AT %MW2.109: UINT:=0;
				(*p2 ludv section current for 100l/min*)
			CWp2cur150liter AT %MW2.110: UINT:=0;
				(*p2 ludv section current for 150l/min*)
			CWp2cur200liter AT %MW2.111: UINT:=0;
				(*p2 ludv section current for 200l/min*)
			CWp2cur250liter AT %MW2.112: UINT:=0;
				(*p2 ludv section current for 250l/min*)
			CWp2cur300liter AT %MW2.113: UINT:=0;
				(*p2 ludv section current for 300l/min*)
			CWpConLudvMaxVal AT %MW2.114: UINT:=0;
				(*ludv pressure control max. value [bar]*)
			CWpConLudv50bar AT %MW2.115: UINT:=0;
				(*ludv pressure control current for 50bar*)
			CWpConLudv100bar AT %MW2.116: UINT:=0;
				(*ludv pressure control current for 100bar*)
			CWpConLudv150bar AT %MW2.117: UINT:=0;
				(*ludv pressure control current for 150bar*)
			CWpConLudv200bar AT %MW2.118: UINT:=0;
				(*ludv pressure control current for 200bar*)
			CWpConLudv250bar AT %MW2.119: UINT:=0;
				(*ludv pressure control current for 250bar*)
			CWpConLudv300bar AT %MW2.120: UINT:=0;
				(*ludv pressure control current for 300bar*)
			CWludvPressure AT %MW2.121: UINT:=0;
				(*ludv pump pressure [bar]*)
			CW122 AT %MW2.122: UINT:=0;
			CW123 AT %MW2.123: UINT:=0;
			CW124 AT %MW2.124: UINT:=0;
			CW125 AT %MW2.125: UINT:=0;
			CW126 AT %MW2.126: UINT:=0;
			CW127 AT %MW2.127: UINT:=0;
			CW128 AT %MW2.128: UINT:=0;
			CW129 AT %MW2.129: UINT:=0;
			CW130 AT %MW2.130: UINT:=0;
			CW131 AT %MW2.131: UINT:=0;
			CW132 AT %MW2.132: UINT:=0;
			CW133 AT %MW2.133: UINT:=0;
			CW134 AT %MW2.134: UINT:=0;
			CWLEgrabPresLiOC AT %MW2.135: UINT:=0;
				(*Leffer: grab open/close pressure limit*)
			CWLEgrabPresMaCu AT %MW2.136: UINT:=0;
				(*Leffer: max. current pres. control grab open / close*)
			CWLEgrabPresMiCu AT %MW2.137: UINT:=0;
				(*Leffer: min. current pres. control grab open / close*)
			CWSBhoseWinManCu AT %MW2.138: UINT:=0;
				(*Soletanche: output current hose winch manuell [mA]*)
			CWSBhoseWinAutCu AT %MW2.139: UINT:=0;
				(*Soletanche: output current hose winch auto lift [mA]*)
			CWSMhoseWinManCu AT %MW2.140: UINT:=0;
				(*Soilmec: output current hose winch manuell [mA]*)
			CWSMhoseWinAutCu AT %MW2.141: UINT:=0;
				(*Soilmec: output current hose winch auto lift [mA]*)
			CWSBhosePresLoCu AT %MW2.142: UINT:=0;
				(*Soletanche: output current low pres. hose pump [mA]*)
			CWSBhosePresHiCu AT %MW2.143: UINT:=0;
				(*Soletanche: output current high pres. hose pump [mA]*)
			CWSMhosePresLoCu AT %MW2.144: UINT:=0;
				(*Soilmec: output current low pres. hose pump [mA]*)
			CWSMhosePresHiCu AT %MW2.145: UINT:=0;
				(*Soilmec: output current high pres. hose pump [mA]*)
			CW146 AT %MW2.146: UINT:=0;
			CW147 AT %MW2.147: UINT:=0;
			CW148 AT %MW2.148: UINT:=0;
			CW149 AT %MW2.149: UINT:=0;
			CW150 AT %MW2.150: UINT:=0;
			CW151 AT %MW2.151: UINT:=0;
			CW152 AT %MW2.152: UINT:=0;
			CW153 AT %MW2.153: UINT:=0;
			CW154 AT %MW2.154: UINT:=0;
			CW155 AT %MW2.155: UINT:=0;
			CWKeGrabPreMaxOp AT %MW2.156: UINT:=0;
				(*add. kelly grab: max. current press. control open*)
			CWKeGrabPreMaxCl AT %MW2.157: UINT:=0;
				(*add. kelly grab: max. current press. control close*)
			CWKeGrabPreMinCu AT %MW2.158: UINT:=0;
				(*add. kelly grab: min. curr. press. control open/close*)
			CW159 AT %MW2.159: UINT:=0;
			CW160 AT %MW2.160: UINT:=0;
			CW161 AT %MW2.161: UINT:=0;
			CW162 AT %MW2.162: UINT:=0;
			CW163 AT %MW2.163: UINT:=0;
			CW164 AT %MW2.164: UINT:=0;
			CW165 AT %MW2.165: UINT:=0;
			CW166 AT %MW2.166: UINT:=0;
			CWmoorTreSet2Gnd AT %MW2.167: UINT:=0;
				(*treshold mooring vibrator or driller set to ground*)
			CWhg1minCurPcont AT %MW2.168: UINT:=0;
				(*hg1 minimum current pressure control*)
			CWhg1maxCurPcont AT %MW2.169: UINT:=0;
				(*hg1 maximum current pressure control*)
			CWhg2minCurPcont AT %MW2.170: UINT:=0;
				(*hg2 minimum current pressure control*)
			CWhg2maxCurPcont AT %MW2.171: UINT:=0;
				(*hg2 maximum current pressure control*)
			CWecMaxBaudRate AT %MW2.172: UINT:=0;
				(*external control maximum baudrate*)
			CWecRXspareTime AT %MW2.173: UINT:=0;
				(*external control RX spare time [ms]*)
			CW174 AT %MW2.174: UINT:=0;
			CW175 AT %MW2.175: UINT:=0;
			CW176 AT %MW2.176: UINT:=0;
			CW177 AT %MW2.177: UINT:=0;
			CW178 AT %MW2.178: UINT:=0;
			CW179 AT %MW2.179: UINT:=0;
			CW4T_Y16MinCur AT %MW2.180: UINT:=0;
				(*4T-Y16 min. current valve*)
			CW4T_Y16MaxCur AT %MW2.181: UINT:=0;
				(*4T-Y16  max. current valve*)
			CW4T_Y17MinCur AT %MW2.182: UINT:=0;
				(*4T-Y17 min. current valve *)
			CW4T_Y17MaxCur AT %MW2.183: UINT:=0;
				(*4T-Y17  max. current valve*)
			CW4T_Y20MinCur AT %MW2.184: UINT:=0;
				(*4T-Y20 min. current valve*)
			CW4T_Y20MaxCur AT %MW2.185: UINT:=0;
				(*4T-Y20 max. current valve*)
			CW4T_Y21MinCur AT %MW2.186: UINT:=0;
				(*4T-Y21 min. current valve*)
			CW4T_Y21MaxCur AT %MW2.187: UINT:=0;
				(*4T-Y21  max. current valve*)
			CW4T_Y32MinCur AT %MW2.188: UINT:=0;
				(*4T-Y32 min. current valve*)
			CW4T_Y32MaxCur AT %MW2.189: UINT:=0;
				(*4T-Y32 max. current valve*)
			CW4T_Y33MinCur AT %MW2.190: UINT:=0;
				(*4T-Y33 min. current valve*)
			CW4T_Y33MaxCur AT %MW2.191: UINT:=0;
				(*4T-Y33 max. current valve*)
			CW4T_Y91MinCur AT %MW2.192: UINT:=0;
				(*4T-Y91 min. current valve*)
			CW4T_Y91MaxCur AT %MW2.193: UINT:=0;
				(*4T-Y91  max. current valve*)
			CW4T_Y92MinCur AT %MW2.194: UINT:=0;
				(*4T-Y92 min. current valve*)
			CW4T_Y92MaxCur AT %MW2.195: UINT:=0;
				(*4T-Y92 max. current valve*)
			CW4T_Y26MinCur AT %MW2.196: UINT:=0;
				(*4T-Y26 min. current valve*)
			CW4T_Y26MaxCur AT %MW2.197: UINT:=0;
				(*4T-Y26  max. current valve*)
			CW4T_Y27MinCur AT %MW2.198: UINT:=0;
				(*4T-Y27 min. current valve*)
			CW4T_Y27MaxCur AT %MW2.199: UINT:=0;
				(*4T-Y27 max. current valve*)
			CW4T_Y28MinCur AT %MW2.200: UINT:=0;
				(*4T-Y28 min. current valve*)
			CW4T_Y28MaxCur AT %MW2.201: UINT:=0;
				(*4T-Y28  max. current valve*)
			CW4T_Y29MinCur AT %MW2.202: UINT:=0;
				(*4T-Y29 min. current valve*)
			CW4T_Y29MaxCur AT %MW2.203: UINT:=0;
				(*4T-Y29 max. current valve*)
			CW4T_Y39MinCur AT %MW2.204: UINT:=0;
				(*4T-Y39 min. current valve*)
			CW4T_Y39MaxCur AT %MW2.205: UINT:=0;
				(*4T-Y39 max. current valve*)
			CDmachinSerialNr AT %MD2.1: UDINT:=0;
				(*serial number of machine*)
			CDlmlOnlineCnf AT %MD2.2: UDINT:=0;
				(*online lml configuration*)
			CDmachinSpecType AT %MD2.3: REAL:=0.0;
				(*specific type of the machine*)
			CDmaxPower_p_fac AT %MD2.4: REAL:=0.0;
				(*maximum engine power regulator p-factor [0.0 - x.x]*)
			CDmaxPow_i_facUp AT %MD2.5: REAL:=0.0;
				(*maximum engine power regulator i-factor up [0.0 - x.x]*)
			CDmaxPow_i_facDn AT %MD2.6: REAL:=0.0;
				(*maximum engine power regulator i-factor down [0.0 - x.x]*)
			CDmaxPower_d_fac AT %MD2.7: REAL:=0.0;
				(*maximum engine power regulator d-factor [0.0 - x.x]*)
			CDengMinIdleSpd AT %MD2.8: REAL:=0.0;
				(*engine minimum engine speed [rpm]*)
			CDhg1LeakOilSign AT %MD2.9: REAL:=0.0;
				(*HG 1 leakoil compensation Signal in [%]*)
			CDhg1IntTimeUp AT %MD2.10: REAL:=0.0;
				(*HG 1 integrator time rising signal*)
			CDhg1IntTimeDn AT %MD2.11: REAL:=0.0;
				(*HG 1 integrator time falling signal*)
			CDhg1MaxPressFSp AT %MD2.12: REAL:=0.0;
				(*HG 1 maximum pressure for normal fast speed operation*)
			CDhg2LeakOilSign AT %MD2.13: REAL:=0.0;
				(*HG 2 leakoil compensation Signal in [%]*)
			CDhg2IntTimeUp AT %MD2.14: REAL:=0.0;
				(*HG 2 integrator time rising signal*)
			CDhg2IntTimeDn AT %MD2.15: REAL:=0.0;
				(*HG 2 integrator time down falling signal*)
			CDhg2MaxPressFSp AT %MD2.16: REAL:=0.0;
				(*HG 2 maximum pressure for normal fast speed operation*)
			CD17 AT %MD2.17: REAL:=0.0;
			CDsgIntTimeUp AT %MD2.18: REAL:=0.0;
				(*SG integrator time up*)
			CDsgIntTimeDn AT %MD2.19: REAL:=0.0;
				(*SG integrator time down*)
			CDsgMaxPressDiff AT %MD2.20: REAL:=0.0;
				(*SG maximum pressure difference for moment regulator*)
			CDmomReg_p_fac AT %MD2.21: REAL:=0.0;
				(*moment regulator regulator p-factor [0.0 - x.x]*)
			CDmomReg_i_fac AT %MD2.22: REAL:=0.0;
				(*moment regulator regulator i-factor [0.0 - x.x]*)
			CDmomReg_d_fac AT %MD2.23: REAL:=0.0;
				(*moment regulator regulator d-factor [0.0 - x.x]*)
			CDsgBrakeTime AT %MD2.24: REAL:=0.0;
				(*sg brake close time*)
			CDminPresRFST3LJ AT %MD2.25: REAL:=0.0;
				(*minimum pressure of the fall back support of the luffing jib*)
			CD26 AT %MD2.26: REAL:=0.0;
			CDlmlLuJPreDevia AT %MD2.27: REAL:=0.0;
				(*lml maximum deviation of the luffin jib pressure sensors in bar*)
			CDlowLimSignal AT %MD2.28: REAL:=0.0;
				(*lower limitation regulator analog signal 270bar*)
			CDhgMaxWinchSp AT %MD2.29: REAL:=0.0;
				(*hg hight limitation max. winch speed [m/min]*)
			CD30 AT %MD2.30: REAL:=0.0;
			CDservInterval AT %MD2.31: REAL:=0.0;
				(*service interval hours*)
			CDservAcknBef AT %MD2.32: REAL:=0.0;
				(*service hours warning before interval*)
			CDservAcknAfter AT %MD2.33: REAL:=0.0;
				(*service hours warning after interval*)
			CDlmlReductSigHg AT %MD2.34: REAL:=0.0;
				(*lml reduction of the hg analog signal for 15% winch speed hoisting winches*)
			CDlmlReductSigLg AT %MD2.35: REAL:=0.0;
				(*lml reduction of the lg analog signal for 15% winch speed luffing winches*)
			CDlmlReductSigSg AT %MD2.36: REAL:=0.0;
				(*lml reduction of the sg analog signal for 15% slewing gearspeed*)
			CDlmlReductSigTg AT %MD2.37: REAL:=0.0;
				(*lml reduction of the tg control pressure for 25% travelling gear speed*)
			CDhg1GearRatio AT %MD2.38: REAL:=0.0;
				(*hg 1 gear ratio from the winch to the incrementalsensor*)
			CDhg1ImpIncSen AT %MD2.39: REAL:=0.0;
				(*hg 1 impulses per rotation of the incrementalsenor*)
			CDhg1RopeDiamete AT %MD2.40: REAL:=0.0;
				(*hg 1 rope lenght measuring: diameter of the rope*)
			CDhg1Layer1Diame AT %MD2.41: REAL:=0.0;
				(*hg1 rope lenght meas: diameter 1st layer middle of the rope*)
			CD2_42 AT %MD2.42: REAL:=0.0;
				(*not used*)
			CD2_43 AT %MD2.43: REAL:=0.0;
				(*not used*)
			CD2_44 AT %MD2.44: REAL:=0.0;
				(*not used*)
			CD2_45 AT %MD2.45: REAL:=0.0;
				(*not used*)
			CD2_46 AT %MD2.46: REAL:=0.0;
				(*not used*)
			CDhg2GearRatio AT %MD2.47: REAL:=0.0;
				(*hg 2 gear ratio from the winch to the incrementalsensor*)
			CDhg2ImpIncSen AT %MD2.48: REAL:=0.0;
				(*hg 2 impulses per rotation of the incrementalsesor*)
			CDhg2RopeDiamete AT %MD2.49: REAL:=0.0;
				(*hg 2 rope lenght measuring: diameter of the rope*)
			CDhg2Layer1Diame AT %MD2.50: REAL:=0.0;
				(*hg2 rope lenght meas.:diameter 1 st layer middle of the rope*)
			CD51 AT %MD2.51: REAL:=0.0;
				(*not used*)
			CD52 AT %MD2.52: REAL:=0.0;
				(*not used*)
			CD53 AT %MD2.53: REAL:=0.0;
				(*not used*)
			CDsgLeakoilSig AT %MD2.54: REAL:=0.0;
				(*sg leakoil compensation signal [%]*)
			CDleadThreshBack AT %MD2.55: REAL:=0.0;
				(*ad leader fall back threshold in tones*)
			CDhg1ImpLayJu1_2 AT %MD2.56: DINT:=0;
				(*hg 1 impulses to layer change 1 to 2*)
			CDhg1ImpLayJu2_3 AT %MD2.57: DINT:=0;
				(*hg 1 impulses to layer change 2 to 3*)
			CDhg1ImpLayJu3_4 AT %MD2.58: DINT:=0;
				(*hg 1 impulses to layer change 3 to 4*)
			CDhg1ImpLayJu4_5 AT %MD2.59: DINT:=0;
				(*hg 1 impulses to layer change 4 to 5*)
			CDhg1ImpLayJu5_6 AT %MD2.60: DINT:=0;
				(*hg 1 impulses to layer change 5 to 6*)
			CDhg1ImpLayJu6_7 AT %MD2.61: DINT:=0;
				(*hg 1 impulses to layer change 6 to 7*)
			CDhg2ImpLayJu1_2 AT %MD2.62: DINT:=0;
				(*hg 2 impulses to layer change 1 to 2*)
			CDhg2ImpLayJu2_3 AT %MD2.63: DINT:=0;
				(*hg 2 impulses to layer change 2 to 3*)
			CDhg2ImpLayJu3_4 AT %MD2.64: DINT:=0;
				(*hg 2 impulses to layer change 3 to 4*)
			CDhg2ImpLayJu4_5 AT %MD2.65: DINT:=0;
				(*hg 2 impulses to layer change 4 to 5*)
			CDhg2ImpLayJu5_6 AT %MD2.66: DINT:=0;
				(*hg 2 impulses to layer change 5 to 6*)
			CDhg2ImpLayJu6_7 AT %MD2.67: DINT:=0;
				(*hg 2 impulses to layer change 6 to 7*)
			CDludv1MaxAnalSi AT %MD2.68: REAL:=0.0;
				(*ludv pump 1 maximum analog signal in %*)
			CDludv2MaxAnalSi AT %MD2.69: REAL:=0.0;
				(*ludv pump 2 maximum analog signal in %*)
			CDaddHydMaxPower AT %MD2.70: REAL:=0.0;
				(*add. hydr.maximum power in % of theo.max. power*)
			CDaddHydrPotiLim AT %MD2.71: REAL:=0.0;
				(*additional hydraulic poti x23 limitation*)
			CDadwIntTimeUp AT %MD2.72: REAL:=0.0;
				(*additional winch integrator time up*)
			CDadwIntTimeDn AT %MD2.73: REAL:=0.0;
				(*additional winch integrator time down*)
			CDengSpPumpRed AT %MD2.74: REAL:=0.0;
				(*engine speed for pump reduction [U/min]*)
			CDdgcHgSlipClut AT %MD2.75: REAL:=0.0;
				(*dgc, analog signal for slipping clutch hg*)
			CDwinchWait AT %MD2.76: REAL:=0.0;
				(*dgc, acceptable winch difference at waiting periode [cm]*)
			CDdgcHgPresPoOnR AT %MD2.77: REAL:=0.0;
				(*dgc, hg pressure for pounder on the rope*)
			CDdgcHgPresPORFS AT %MD2.78: REAL:=0.0;
				(*dgc, fast speed hg pressure for pounder on the rope*)
			CDstabWinMaxPoti AT %MD2.79: REAL:=0.0;
				(*ad stabilisation winch maximum signal joystick poti [%]*)
			CDadOilHeatTemp AT %MD2.80: REAL:=0.0;
				(*ad oil heating temperature start heating*)
			CD81 AT %MD2.81: REAL:=0.0;
			CDadwLimitation AT %MD2.82: REAL:=0.0;
				(*additional winch limitation*)
			CDaxwIntTimeUp AT %MD2.83: REAL:=0.0;
				(*auxiliary winch integrator time up*)
			CDaxwIntTimeDn AT %MD2.84: REAL:=0.0;
				(*auxiliary winch integrator time down*)
			CDludvIntegrTime AT %MD2.85: REAL:=0.0;
				(*ludv pumps integration time up and down*)
			CDgrabIntTimeUp AT %MD2.86: REAL:=0.0;
				(*ad grab integrator rising time*)
			CDgrabIntTimeDn AT %MD2.87: REAL:=0.0;
				(*ad grab integrator falling time*)
			CDvibIntTimeUp AT %MD2.88: REAL:=0.0;
				(*vibrator integrator time rising signal*)
			CDvibIntTimeDn AT %MD2.89: REAL:=0.0;
				(*vibrator integrator time falling signal*)
			CDmaxPowVibrator AT %MD2.90: REAL:=0.0;
				(*maximum power of vibrator [kW]*)
			CDresPowVibrator AT %MD2.91: REAL:=0.0;
				(*reserved power of vibrator [kW]*)
			CDhamIntTimeUp AT %MD2.92: REAL:=0.0;
				(*hammer integrator time rising signal*)
			CDhamIntTimeDn AT %MD2.93: REAL:=0.0;
				(*hammer integrator time falling signal*)
			CDludvLeakOilSig AT %MD2.94: REAL:=0.0;
				(*ludv leakoil or pressure comp. signal*)
			CDgrabPresLimOpe AT %MD2.95: REAL:=0.0;
				(*grab open  threshold pressure limit*)
			CDgrabFilterTime AT %MD2.96: REAL:=0.0;
				(*add. grab: delay time pressure limit open/close *)
			CDgrabPresIntUp AT %MD2.97: REAL:=0.0;
				(*grab open integrated signal LUDV*)
			CDgrabPresLimClo AT %MD2.98: REAL:=0.0;
				(*grab close threshold pressure limit*)
			CDhg1ImpAdCount AT %MD2.99: REAL:=0.0;
				(*hg 1 impulses per rotation of additional counter*)
			CDhg2ImpAdCount AT %MD2.100: REAL:=0.0;
				(*hg 2 impulses per rotation of additional counter*)
			CDgenMinEngSpeed AT %MD2.101: REAL:=0.0;
				(*generator minimum engine speed [rpm]*)
			CDgrSlewLimitSig AT %MD2.102: REAL:=0.0;
				(*grab slewing limitation signal*)
			CDgrAd1LimitSig AT %MD2.103: REAL:=0.0;
				(*grab adjustment 1 limitation signal *)
			CDgrAd2LimitSig AT %MD2.104: REAL:=0.0;
				(*grab adjustment 2 limitation signal *)
			CDgrHoWiAutLiSig AT %MD2.105: REAL:=0.0;
				(*grab hose winch automatic limitation signal*)
			CDgrHoWiManLiSig AT %MD2.106: REAL:=0.0;
				(*grab hose winch manual limitation signal*)
			CDgrHoWiLoPreSig AT %MD2.107: REAL:=0.0;
				(*grab hose winch low pressure signal *)
			CDgrHoWiHiPreSig AT %MD2.108: REAL:=0.0;
				(*grab hose winch high pressure signal *)
			CDinclSwOffRange AT %MD2.109: REAL:=0.0;
				(*threshold of crane inclination switch off device [°]*)
			CDLEgrabAutMidTi AT %MD2.110: REAL:=0.0;
				(*Leffer: timer grab automatic midle position*)
			CDLEgrabMooPumSi AT %MD2.111: REAL:=0.0;
				(*Leffer: joystick signal hg pump at grab mooring works*)
			CDLEgrabMooTriSi AT %MD2.112: REAL:=0.0;
				(*Leffer: trimot signal hg pump at grab mooring works*)
			CDLEignorePhiTop AT %MD2.113: REAL:=0.0;
				(*Leffer: ignore, from top, the grab inclination*)
			CDLEignorePhiBot AT %MD2.114: REAL:=0.0;
				(*Leffer: ignore, from bootom the grab inclination*)
			CDLEgrabIncXscal AT %MD2.115: REAL:=0.0;
				(*Leffer: scale faktor X grab inclination grap [X°]*)
			CDLEgrabIncYscal AT %MD2.116: REAL:=0.0;
				(*Leffer: scale faktor Y grab inclination grap [Y°]*)
			CDLEgrabSitUpPre AT %MD2.117: REAL:=0.0;
				(*Leffer: system pressure hoisting gear, grab sits up*)
			CDLEslackRoPumSi AT %MD2.118: REAL:=0.0;
				(*joy stick signal hg pump at slack rope works*)
			CDscaleSlaRopTre AT %MD2.119: REAL:=0.0;
				(*scale slack rope treshhold*)
			CDscaleFreFalLim AT %MD2.120: REAL:=0.0;
				(*scale mooring free fall limitation*)
			CDdelayRelGrab AT %MD2.121: REAL:=0.0;
				(*SM/SB grab: delay time release grab open/close*)
			CDddIntTimeUp AT %MD2.122: REAL:=0.0;
				(*drilling drive integrator time rising signal*)
			CDddIntTimeDn AT %MD2.123: REAL:=0.0;
				(*drilling drive integrator time falling signal*)
			CDddGearRatio AT %MD2.124: REAL:=0.0;
				(*gear ratio drilling drive Kelly/SOB  [imp/turn of drilling drive)]*)
			CDddPowFastSpeed AT %MD2.125: REAL:=0.0;
				(*drilling drive maximum power at fast speed [kW]*)
			CDddAverageFact AT %MD2.126: REAL:=0.0;
				(*average factor speed calculation drilling drive*)
			CDddPowLowSpeed AT %MD2.127: REAL:=0.0;
				(*drilling drive maximum power at fast speed [kW]*)
			CDgrabAdLimitSig AT %MD2.128: REAL:=0.0;
				(*grab adjustment limitation signal*)
			CDgrLockLimitSig AT %MD2.129: REAL:=0.0;
				(*grab lock cylinder limitation signal*)
			CDgrSlewAnaSigSB AT %MD2.130: REAL:=0.0;
				(*SB grab: grap slewing analog signal *)
			CDgrSlewAnaSigSM AT %MD2.131: REAL:=0.0;
				(*SM grab: grap slewing analog signal *)
			CDgrSlewTimeUp AT %MD2.132: REAL:=0.0;
				(*SB/SM grab: slewing integrator time rising signal*)
			CDgrSlewTimeDn AT %MD2.133: REAL:=0.0;
				(*SB/SM grab: slewing integrator time falling signal*)
			CDKeGrabIntTimUp AT %MD2.134: REAL:=0.0;
				(*add. kelly grab integrator rising time*)
			CDKeGrabIntTimDn AT %MD2.135: REAL:=0.0;
				(*add. kelly grab integrator falling time*)
			CDKeGrabPresLiCl AT %MD2.136: REAL:=0.0;
				(*add. kelly grab close threshold pressure limit*)
			CDKeGrabPresLiOp AT %MD2.137: REAL:=0.0;
				(*add. kelly grab open  threshold pressure limit*)
			CDKeGrabFiltTime AT %MD2.138: REAL:=0.0;
				(*add. kelly grab: delay time press. limit open/close *)
			CDKeGrabPreIntUp AT %MD2.139: REAL:=0.0;
				(*add. kelly grab integrator rising time*)
			CDgrHoAdLimitSig AT %MD2.140: REAL:=0.0;
				(*grab hose adjust cylinder limitation signal*)
			CDhg1MinTenPcont AT %MD2.141: REAL:=0.0;
				(*hg1 minimum tension pressure control*)
			CDhg2MinTenPcont AT %MD2.142: REAL:=0.0;
				(*hg2 minimum tension pressure control*)
			CDpumpCutIntCls AT %MD2.143: REAL:=0.0;
				(*LUDV pump cut off integrator closing time*)
			CDpumpCutIntBrk AT %MD2.144: REAL:=0.0;
				(*LUDV pump cut off integrator breaking time*)
			CDangSlidTabOffs AT %MD2.145: REAL:=0.0;
				(*sliding table angle offset*)
			CDslidTablAngInt AT %MD2.146: REAL:=0.0;
				(*sliding table angle filter int. time up/down hanging leader*)
			CDslidTablAngLim AT %MD2.147: REAL:=0.0;
				(*sliding table angle limit hi-low for automatic hanging leader*)
			CDslidTablAngSca AT %MD2.148: REAL:=0.0;
				(*sliding table angle scale, hanging leader*)
			CDslidTablAngWin AT %MD2.149: REAL:=0.0;
				(*sliding table angle filter window value, hanging leader*)
			CDslidTablAngHys AT %MD2.150: REAL:=0.0;
				(*sliding table angle hysteria window value, hanging leader*)
			CDLEHoWiLoPreSig AT %MD2.151: REAL:=0.0;
				(*Leffer: grab hose winch low pressure signal [%]*)
			CDLEHoWiHiPreSig AT %MD2.152: REAL:=0.0;
				(*Leffer: grab hose winch high pressure signal [%]*)
			CDLEHoWinAutSig AT %MD2.153: REAL:=0.0;
				(*Leffer: grab hose winch automatic limitation signal [%]*)
			CDLEhoWinManSigB AT %MD2.154: REAL:=0.0;
				(*Leffer: grab hose winch (both) manual limitation signal [%]*)
			CDLEhoWinManSigS AT %MD2.155: REAL:=0.0;
				(*Leffer: grab hose winch (single) manual limitation signal [%]*)
			CD156 AT %MD2.156: REAL:=0.0;
			CDKeAd1LimitSig AT %MD2.157: REAL:=0.0;
				(*kelly grab adjustment 1 limitation signal *)
			CDKeAd2LimitSig AT %MD2.158: REAL:=0.0;
				(*kelly grab adjustment 2 limitation signal *)
			CDKeSlewAnaSig AT %MD2.159: REAL:=0.0;
				(*Kelly grab: grap slewing analog signal *)
			CDz17limitOut AT %MD2.160: REAL:=0.0;
				(*Z17 limitation out/left*)
			CDz17limitIn AT %MD2.161: REAL:=0.0;
				(*Z17 limitation in/right*)
			CDz17limitManual AT %MD2.162: REAL:=0.0;
				(*Z17 limitation manual*)
			CDplGuiLimitOut AT %MD2.163: REAL:=0.0;
				(*pile guide limitation out*)
			CDplGuiLimitIn AT %MD2.164: REAL:=0.0;
				(*pile guide limitation in*)
			CDplGuiLimitMan AT %MD2.165: REAL:=0.0;
				(*pile guide limitation manual*)
			CD166 AT %MD2.166: REAL:=0.0;
			CD167 AT %MD2.167: REAL:=0.0;
			CDz2PresSigOut AT %MD2.168: REAL:=0.0;
				(*Z2 pressure signal out [%]*)
			CDz2PresSigIn AT %MD2.169: REAL:=0.0;
				(*Z2 pressure signal in [%]*)
			CDz6IntTimeUp AT %MD2.170: REAL:=0.0;
				(*Z6 left integrator time rising signal (% per s)*)
			CDz6IntTimeDn AT %MD2.171: REAL:=0.0;
				(*Z6 left integrator time falling signal (% per s)*)
			CDz6limitOut AT %MD2.172: REAL:=0.0;
				(*Z6 limitation out/left*)
			CDz6limitIn AT %MD2.173: REAL:=0.0;
				(*Z6 limitation in/right*)
			CDz6limitManual AT %MD2.174: REAL:=0.0;
				(*Z6 limitation manual*)
			CDz4IntTimeDn AT %MD2.175: REAL:=0.0;
				(*Z4 left integrator time falling signal (% per s)*)
			CDz4IntTimeUp AT %MD2.176: REAL:=0.0;
				(*Z4 left integrator time rising signal (% per s)*)
			CDz4limitOut AT %MD2.177: REAL:=0.0;
				(*Z4 limitation out*)
			CDz4limitIn AT %MD2.178: REAL:=0.0;
				(*Z4 limitation in*)
			CDz4limitManual AT %MD2.179: REAL:=0.0;
				(*Z4 limitation manual*)
			CDz2IntTimeDn AT %MD2.180: REAL:=0.0;
				(*Z2 left integrator time falling signal (% per s)*)
			CDz2IntTimeUp AT %MD2.181: REAL:=0.0;
				(*Z2 left integrator time rising signal (% per s)*)
			CDz2limitOut AT %MD2.182: REAL:=0.0;
				(*Z2 limitation out*)
			CDz2limitIn AT %MD2.183: REAL:=0.0;
				(*Z2 limitation in*)
			CDz2limitManual AT %MD2.184: REAL:=0.0;
				(*Z2 limitation manual*)
			CDz3IntTimeDn AT %MD2.185: REAL:=0.0;
				(*Z3 left integrator time falling signal (% per s)*)
			CDz3IntTimeUp AT %MD2.186: REAL:=0.0;
				(*Z3 left integrator time rising signal (% per s)*)
			CDz3limitOut AT %MD2.187: REAL:=0.0;
				(*Z3 limitation out/left*)
			CDz3limitIn AT %MD2.188: REAL:=0.0;
				(*Z3 limitation in/right*)
			CDz3limitManual AT %MD2.189: REAL:=0.0;
				(*Z3 limitation manual*)
			CDgrLockCPSigOut AT %MD2.190: REAL:=0.0;
				(*grab lock cyl. pressure signal out [%]*)
			CDgrLockCPSigIn AT %MD2.191: REAL:=0.0;
				(*grab lock cyl. pressure signal in [%]*)
			CDstabWiSigLift AT %MD2.192: REAL:=0.0;
				(*stabilization winch signal lifting [%]*)
			CDstabWiSigLow AT %MD2.193: REAL:=0.0;
				(*stabilization winch signal lowering [%]*)
			CDstabWiPresSig AT %MD2.194: REAL:=0.0;
				(*stabilization winch pressure signal [%]*)
			CDKeHoWiManPuSig AT %MD2.195: REAL:=0.0;
				(*kelly grab: hose winch manual pump signal [%]*)
			CDKeHoWiAutPuSig AT %MD2.196: REAL:=0.0;
				(*kelly grab: hose winch automatic pump signal [%]*)
			CDKeHoWiLoPresSi AT %MD2.197: REAL:=0.0;
				(*kelly grab: hose winch low pressure signal [%]*)
			CDKeHoWiHiPresSi AT %MD2.198: REAL:=0.0;
				(*kelly grab: hose winch high pressure signal [%]*)
			CDhgSpeLiftMaxSi AT %MD2.201: REAL:=0.0;
				(*ad hg special lift maximum analog signal*)
			CDsgmidStopSpe AT %MD2.202: REAL:=0.0;
				(*sg middle stop speed calulation depending on max speed*)
			CDSBhoWiManPuSi AT %MD2.203: REAL:=0.0;
				(*Soletanche grab: hose winch manual pump signal [%]*)
			CDSBhoWiAutPuSi AT %MD2.204: REAL:=0.0;
				(*Soletanche grab: hose winch automatic pump signal [%]*)
			CDSMhoWiManPuSi AT %MD2.205: REAL:=0.0;
				(*Soilmec grab: hose winch manual pump signal [%]*)
			CDSMhoWiAutPuSi AT %MD2.206: REAL:=0.0;
				(*Soilmec grab: hose winch automatic pump signal [%]*)
			CDSBhoWiLoPresSi AT %MD2.207: REAL:=0.0;
				(*Soletanche: hose winch low pressure signal [%]*)
			CDSBhoWiHiPresSi AT %MD2.208: REAL:=0.0;
				(*Soletanche: hose winch high pressure signal [%]*)
			CDSMhoWiLoPresSi AT %MD2.209: REAL:=0.0;
				(*Soilmec: hose winch low pressure signal [%]*)
			CDSMhoWiHiPresSi AT %MD2.210: REAL:=0.0;
				(*Soilmec: hose winch high pressure signal [%]*)
			CDscaleInput1 AT %MD2.1001: REAL:=0.0;
				(*scale measuring input 1*)
			CDscaleInput2 AT %MD2.1002: REAL:=0.0;
				(*scale measuring input 2*)
			CDscaleInput3 AT %MD2.1003: REAL:=0.0;
				(*scale measuring input 3*)
			CDscaleInput4 AT %MD2.1004: REAL:=0.0;
				(*scale measuring input 4*)
			CDscaleInput5 AT %MD2.1005: REAL:=0.0;
				(*scale measuring input 5*)
			CDscaleInput6 AT %MD2.1006: REAL:=0.0;
				(*scale measuring input 6*)
			CDscaleInput7 AT %MD2.1007: REAL:=0.0;
				(*scale measuring input 7*)
			CDscaleInput8 AT %MD2.1008: REAL:=0.0;
				(*scale measuring input 8*)
			CDscaleInput9 AT %MD2.1009: REAL:=0.0;
				(*scale measuring input 9*)
			CDscaleInput10 AT %MD2.1010: REAL:=0.0;
				(*scale measuring input 10*)
			CDscaleInput11 AT %MD2.1011: REAL:=0.0;
				(*scale measuring input 11*)
			CDscaleInput12 AT %MD2.1012: REAL:=0.0;
				(*scale measuring input 12*)
			CDscaleInput13 AT %MD2.1013: REAL:=0.0;
				(*scale measuring input 13*)
			CDscaleInput14 AT %MD2.1014: REAL:=0.0;
				(*scale measuring input 14*)
			CDscaleInput15 AT %MD2.1015: REAL:=0.0;
				(*scale measuring input 15*)
			CDscaleInput16 AT %MD2.1016: REAL:=0.0;
				(*scale measuring input 16*)
		END_VAR
		VAR_GLOBAL RETAIN
			MX2TJoystick AT %MX3.1: BOOL:=FALSE;
				(*enable double T joystick*)
			MXadOneWinFastSp AT %MX3.2: BOOL:=FALSE;
				(*fast speed operation with one winch and two pumps*)
			MXadHgLowerCont AT %MX3.4: BOOL:=FALSE;
				(*additional device lowering control for HG*)
			MXaddHydrPresel AT %MX3.5: BOOL:=FALSE;
				(*ad additional hydraulics preselected*)
			MXhg1RopeLenMeas AT %MX3.6: BOOL:=FALSE;
				(*rope lenght measuring hg 1 enabled*)
			MXhg2RopeLenMeas AT %MX3.7: BOOL:=FALSE;
				(*rope lenght measuring hg 2 enabled*)
			MXstabWinchPrese AT %MX3.8: BOOL:=FALSE;
				(*additional stabilization winch (analog const tension, freefall)*)
			MXconTenWinPrese AT %MX3.9: BOOL:=FALSE;
				(*additional winch (fixed const tension, lowering)*)
			MXaddWinchFreefa AT %MX3.10: BOOL:=FALSE;
				(*additional winch (fixed const tension, freefall)*)
			MXlg2Active AT %MX3.11: BOOL:=FALSE;
				(*LG 2 active*)
			MXlmlLuffJibEnab AT %MX3.12: BOOL:=FALSE;
				(*lml luffing jib enabled*)
			MXtaraMainBoom AT %MX3.13: BOOL:=FALSE;
				(*tara main boom*)
			MXtaraLuffJib AT %MX3.14: BOOL:=FALSE;
				(*tara luffing jib*)
			MXhg1Preselect AT %MX3.15: BOOL:=FALSE;
				(*hg1  preselected*)
			MXhg2Preselect AT %MX3.16: BOOL:=FALSE;
				(*hg2  preselected*)
			MXsgLimitation AT %MX3.17: BOOL:=FALSE;
				(*sg limitaion enabled*)
			MXhg1FastWinch AT %MX3.18: BOOL:=FALSE;
				(*HG 1 fast winch operation (2nd pump) *)
			MXhg2FastWinch AT %MX3.19: BOOL:=FALSE;
				(*HG 2 fast winch operation (2nd pump) *)
			MXlmlFix_LuffJib AT %MX3.20: BOOL:=FALSE;
				(*lml fixed or luffing jib enabled*)
			MXmod57SetActive AT %MX3.21: BOOL:=FALSE;
				(*set modul 57 active*)
			MXmod57SetCritic AT %MX3.22: BOOL:=FALSE;
				(*set modul 57 critical*)
			MXmod18SetActive AT %MX3.23: BOOL:=FALSE;
				(*set modul 18 active*)
			MXmod18SetCritic AT %MX3.24: BOOL:=FALSE;
				(*set modul 18 critical*)
			MXmod10SetActive AT %MX3.25: BOOL:=FALSE;
				(*set modul 10 active*)
			MXmod10SetCritic AT %MX3.26: BOOL:=FALSE;
				(*set modul 10 critical*)
			MXmod34SetActive AT %MX3.27: BOOL:=FALSE;
				(*set modul 34 active*)
			MXmod34SetCritic AT %MX3.28: BOOL:=FALSE;
				(*set modul 34 critical*)
			MXmod19SetActive AT %MX3.29: BOOL:=FALSE;
				(*set modul 19 active*)
			MXmod19SetCritic AT %MX3.30: BOOL:=FALSE;
				(*set modul 19 critical*)
			MXmod43SetActive AT %MX3.31: BOOL:=FALSE;
				(*set modul 43 active*)
			MXmod43SetCritic AT %MX3.32: BOOL:=FALSE;
				(*set modul 43 critical*)
			MXkeybX25SetAct AT %MX3.33: BOOL:=FALSE;
				(*set keyboard X25 active*)
			MXkeybX22SetAct AT %MX3.34: BOOL:=FALSE;
				(*set keyboard X22 active*)
			MXkeybX22SetCrit AT %MX3.35: BOOL:=FALSE;
				(*set keyboard X22 critical*)
			MXmod107SetCriti AT %MX3.36: BOOL:=FALSE;
				(*set immo module 107 critical*)
			MXmod14SetActive AT %MX3.37: BOOL:=FALSE;
				(*set modul 14 active*)
			MXmod14SetCritic AT %MX3.38: BOOL:=FALSE;
				(*set modul 14 critical*)
			MXwinchSynchrX23 AT %MX3.40: BOOL:=FALSE;
				(*winch synchronisation by X23*)
			MXwalSlewAct AT %MX3.50: BOOL:=FALSE;
				(*wal sg limitation activated*)
			MXwalRadMaBoAct AT %MX3.51: BOOL:=FALSE;
				(*wal radius limitation main boom activated*)
			MXwalRadLJibAct AT %MX3.52: BOOL:=FALSE;
				(*wal radius limitation luffing jib activated*)
			MXwalHigMaBoAct AT %MX3.53: BOOL:=FALSE;
				(*wal hight limitation main boom activated*)
			MXwalHigLJibAct AT %MX3.54: BOOL:=FALSE;
				(*wal hight limitation luffing jib activated*)
			MXwalLinMaBoAct AT %MX3.55: BOOL:=FALSE;
				(*wal line limitation main boom activated*)
			MXwalLinLuJiAct AT %MX3.56: BOOL:=FALSE;
				(*wal line limitation luffing jib activated*)
			MXwalSecMaBoAct AT %MX3.57: BOOL:=FALSE;
				(*wal sector limitation main boom activated*)
			MXwalSecLuJiAct AT %MX3.58: BOOL:=FALSE;
				(*wal sector limitation luffing jib activated*)
			MXlmlRiggingAct AT %MX3.59: BOOL:=FALSE;
				(*lml 2010 rigging is activated*)
			MXlrMooringPrese AT %MX3.60: BOOL:=FALSE;
				(*mooring for leader operation preselect*)
			MXenExtOperMode AT %MX3.61: BOOL:=FALSE;
				(*enable external operation mode*)
			MXleaderOper AT %MX3.62: BOOL:=FALSE;
				(*leader operation active*)
			MXserviceWarnBef AT %MX3.63: BOOL:=FALSE;
				(*service warning before service time*)
			MXserviceWarnAft AT %MX3.64: BOOL:=FALSE;
				(*service warning after service time*)
			MXserviceAckn AT %MX3.65: BOOL:=FALSE;
				(*service acknowledged*)
			MXserviceNotAckn AT %MX3.66: BOOL:=FALSE;
				(*service not acknowledged*)
			MXaccessControl AT %MX3.67: BOOL:=FALSE;
				(*access control activated*)
			MXoperatLock AT %MX3.68: BOOL:=FALSE;
				(*operation lock system activated*)
			MXchUnitDistance AT %MX3.69: BOOL:=FALSE;
				(*change unit for distance*)
			MXchUnitLoad AT %MX3.70: BOOL:=FALSE;
				(*change unit for load*)
			MXchUnitPress AT %MX3.71: BOOL:=FALSE;
				(*change unit for pressure*)
			MXchUnitTemp AT %MX3.72: BOOL:=FALSE;
				(*change unit for temperature*)
			MXchUnitVolume AT %MX3.73: BOOL:=FALSE;
				(*change unit for volume*)
			MXchUnitSpeed AT %MX3.74: BOOL:=FALSE;
				(*change unit for speed*)
			MXtranspOper AT %MX3.75: BOOL:=FALSE;
				(*transportation operation mode active*)
			MXcoucarOper AT %MX3.76: BOOL:=FALSE;
				(*counterweight carrier operation mode active*)
			MXlmlTypeDutyCyc AT %MX3.77: BOOL:=FALSE;
				(*lml type is duty cycle machine*)
			MXlockHg1 AT %MX3.78: BOOL:=FALSE;
				(*lock hg1*)
			MXlockHg2 AT %MX3.79: BOOL:=FALSE;
				(*lock hg2*)
			MXlockLg AT %MX3.80: BOOL:=FALSE;
				(*lock luffing gear*)
			MXlockSg AT %MX3.81: BOOL:=FALSE;
				(*lock slewing gear*)
			MXlockTg AT %MX3.82: BOOL:=FALSE;
				(*lock travelling gear*)
			MXmod49SetActive AT %MX3.83: BOOL:=FALSE;
				(*set modul 49 active*)
			MXmod58SetActive AT %MX3.84: BOOL:=FALSE;
				(*set modul 58 active*)
			MXsgSpeed1Memory AT %MX3.101: BOOL:=FALSE;
				(*sg speed 1 memory*)
			MXsgSpeed2Memory AT %MX3.102: BOOL:=FALSE;
				(*sg speed 2 memory*)
			MXsgSpeed3Memory AT %MX3.103: BOOL:=FALSE;
				(*sg speed 3 memory*)
			MXlgSpeed1Memory AT %MX3.104: BOOL:=FALSE;
				(*lg speed 1 memory*)
			MXlgSpeed2Memory AT %MX3.105: BOOL:=FALSE;
				(*lg speed 2 memory*)
			MXlgSpeed3Memory AT %MX3.106: BOOL:=FALSE;
				(*lg speed 3 memory*)
			MXdgcPdeStart AT %MX3.107: BOOL:=FALSE;
				(*ad. dgc pde start*)
			MXactiveCycle AT %MX3.110: BOOL:=FALSE;
				(*grab pde active cycle*)
			MXIgnoreCurCycle AT %MX3.111: BOOL:=FALSE;
				(*??*)
			MXallCyclTabUsed AT %MX3.112: BOOL:=FALSE;
				(*??*)
			MXlgLockDragline AT %MX3.113: BOOL:=FALSE;
				(*luffing gear locked at dragline operation *)
			MXmachSerialOk AT %MX3.199: BOOL:=FALSE;
				(*machine serial is activated*)
			MXmachTypeOk AT %MX3.200: BOOL:=FALSE;
				(*machine type is activated*)
			MXmachTypeLB16 AT %MX3.201: BOOL:=FALSE;
				(*machine type LB16 activated*)
			MXmachTypeLB20 AT %MX3.202: BOOL:=FALSE;
				(*machine type LB20 activated*)
			MXmachTypeLB24 AT %MX3.203: BOOL:=FALSE;
				(*machine type LB24 activated*)
			MXmachTypeLB28 AT %MX3.204: BOOL:=FALSE;
				(*machine type LB28 activated*)
			MXmachTypeLB36 AT %MX3.205: BOOL:=FALSE;
				(*machine type LB36 activated*)
			MXmachTypeLRB125 AT %MX3.211: BOOL:=FALSE;
				(*machine type LRB125 activated*)
			MXmachTypeLRB155 AT %MX3.212: BOOL:=FALSE;
				(*machine type LRB155 activated*)
			MXmachTypeLRB255 AT %MX3.213: BOOL:=FALSE;
				(*machine type LRB255 activated*)
			MXmachTypeLR1100 AT %MX3.221: BOOL:=FALSE;
				(*machine type LR1100 activated*)
			MXmachTypeLR1130 AT %MX3.222: BOOL:=FALSE;
				(*machine type LR1130 activated*)
			MXmachTypeLR1160 AT %MX3.223: BOOL:=FALSE;
				(*machine type LR1160 activated*)
			MXmachTypeLR1200 AT %MX3.224: BOOL:=FALSE;
				(*machine type LR1200 activated*)
			MXmachTypeLR1280 AT %MX3.225: BOOL:=FALSE;
				(*machine type LR1280 activated*)
			MXmachTypeLR1300 AT %MX3.226: BOOL:=FALSE;
				(*machine type LR1300 activated*)
			MXmachTypeHS825 AT %MX3.331: BOOL:=FALSE;
				(*machine type HS825 activated*)
			MXmachTypeHS835 AT %MX3.332: BOOL:=FALSE;
				(*machine type HS835 activated*)
			MXmachTypeHS845 AT %MX3.333: BOOL:=FALSE;
				(*machine type HS845 activated*)
			MXmachTypeHS855 AT %MX3.334: BOOL:=FALSE;
				(*machine type HS855 activated*)
			MXmachTypeHS875 AT %MX3.335: BOOL:=FALSE;
				(*machine type HS875 activated*)
			MXmachTypeHS885 AT %MX3.336: BOOL:=FALSE;
				(*machine type HS885 activated*)
			MXmachTypeHS895 AT %MX3.337: BOOL:=FALSE;
				(*machine type HS895 activated*)
			MXmachTypeHS8030 AT %MX3.340: BOOL:=FALSE;
				(*machine type HS8030 activated*)
			MXmachTypeHS8040 AT %MX3.341: BOOL:=FALSE;
				(*machine type HS8040 activated*)
			MXmachTypeHS8050 AT %MX3.342: BOOL:=FALSE;
				(*machine type HS8050 activated*)
			MXmachTypeHS8070 AT %MX3.343: BOOL:=FALSE;
				(*machine type HS8070 activated*)
			MXmachTypeHS8100 AT %MX3.344: BOOL:=FALSE;
				(*machine type HS8100 activated*)
			MXmachTypeHS8120 AT %MX3.345: BOOL:=FALSE;
				(*machine type HS8120 activated*)
			MXmachTypeHS8160 AT %MX3.346: BOOL:=FALSE;
				(*machine type HS8160 activated*)
			MXmachTypeHS8200 AT %MX3.347: BOOL:=FALSE;
				(*machine type HS8200 activated*)
			MWfirstScrPage AT %MW3.1: UINT:=0;
				(*first screen page*)
			MWvibStoreVolume AT %MW3.2: UINT:=0;
				(*stored vibrator volume p1 + p2*)
			MWhamStoreVolume AT %MW3.3: UINT:=0;
				(*stored hammer volume p1 + p2*)
			MWvibStorePress AT %MW3.4: UINT:=0;
				(*stored vibrator pressure p1 + p2*)
			MWhamStorePress AT %MW3.5: UINT:=0;
				(*stored hammer pressure p1 + p2*)
			MWvibClampClosed AT %MW3.6: UINT:=0;
				(*vibrator threshold clamping jaw closed*)
			MWexcentAutoTime AT %MW3.7: UINT:=0;
				(*excenter automatik time drive in *)
			MWpdePrinterMode AT %MW3.8: UINT:=0;
				(*pde printer mode*)
			MWpdeGraphicMode AT %MW3.9: UINT:=0;
				(*pde printer mode*)
			MWscaleExtHamSig AT %MW3.10: UINT:=0;
				(*scale extern Hammersignal*)
			MWgrabStoVolOpen AT %MW3.11: UINT:=0;
				(*stored grap volume open*)
			MWgrabStoVolClos AT %MW3.12: UINT:=0;
				(*stored grap volume close*)
			MWgrabStoPreOpen AT %MW3.13: UINT:=0;
				(*stored grap pressure open [bar]*)
			MWgrabStoPreClos AT %MW3.14: UINT:=0;
				(*stored grap pressure close [bar]*)
			MWnot_used_3_15 AT %MW3.15: UINT:=0;
				(*not used*)
			MWstorActualMode AT %MW3.16: UINT:=0;
				(*stored actual mode*)
			MWddStoreVolume AT %MW3.17: UINT:=0;
				(*stored drilling drive volume p1 + p2*)
			MWddStorePress AT %MW3.18: UINT:=0;
				(*stored drilling drive pressure p1 + p2*)
			MDhg1PressMemory AT %MD3.1: REAL:=0.0;
				(*HG 1 pressure memory*)
			MDhg2PressMemory AT %MD3.2: REAL:=0.0;
				(*HG 2 pressure memory*)
			MDboomHookLoad AT %MD3.3: REAL:=0.0;
				(*main boom hook load*)
			MDlufJibHookLoad AT %MD3.4: REAL:=0.0;
				(*luffing jib hook load*)
			MDhg1ImpulsValue AT %MD3.5: DINT:=0;
				(*present counter value hg1 (impulses)*)
			MDhg2ImpulsValue AT %MD3.6: DINT:=0;
				(*present counter value hg2 (impulses)*)
			MDropLenTaraHg1 AT %MD3.7: REAL:=0.0;
				(*hg 1 tara rope lenght*)
			MDropLenTaraHg2 AT %MD3.8: REAL:=0.0;
				(*hg 2 tara rope lenght*)
			MDhg1CircumfLay1 AT %MD3.9: REAL:=0.0;
				(*hg 1 rlm: circumf. of the layer 1 in the middle of the rope*)
			MDhg1CircumfLay2 AT %MD3.10: REAL:=0.0;
				(*hg 1 rlm: circumf. of the layer 2 in the middle of the rope*)
			MDhg1CircumfLay3 AT %MD3.11: REAL:=0.0;
				(*hg 1 rlm: circumf. of the layer 3 in the middle of the rope*)
			MDhg1CircumfLay4 AT %MD3.12: REAL:=0.0;
				(*hg 1 rlm: circumf. of the layer 4 in the middle of the rope*)
			MDhg1CircumfLay5 AT %MD3.13: REAL:=0.0;
				(*hg 1 rlm: circumf. of the layer 5 in the middle of the rope*)
			MDhg1CircumfLay6 AT %MD3.14: REAL:=0.0;
				(*hg 1 rlm: circumf. of the layer 6 in the middle of the rope*)
			MDhg1CircumfLay7 AT %MD3.15: REAL:=0.0;
				(*hg 1 rlm: circumf. of the layer 7 in the middle of the rope*)
			MDhg2CircumfLay1 AT %MD3.16: REAL:=0.0;
				(*hg 2 rlm: circumf. of the layer 1 in the middle of the rope*)
			MDhg2CircumfLay2 AT %MD3.17: REAL:=0.0;
				(*hg 2 rlm: circumf. of the layer 2 in the middle of the rope*)
			MDhg2CircumfLay3 AT %MD3.18: REAL:=0.0;
				(*hg 2 rlm: circumf. of the layer 3 in the middle of the rope*)
			MDhg2CircumfLay4 AT %MD3.19: REAL:=0.0;
				(*hg 2 rlm: circumf. of the layer 4 in the middle of the rope*)
			MDhg2CircumfLay5 AT %MD3.20: REAL:=0.0;
				(*hg 2 rlm: circumf. of the layer 5 in the middle of the rope*)
			MDhg2CircumfLay6 AT %MD3.21: REAL:=0.0;
				(*hg 2 rlm: circumf. of the layer 6 in the middle of the rope*)
			MDhg2CircumfLay7 AT %MD3.22: REAL:=0.0;
				(*hg 2 rlm: circumf. of the layer 7 in the middle of the rope*)
			MDradiusLimit AT %MD3.23: REAL:=0.0;
				(*radius limitation in m*)
			MDhightLimit AT %MD3.24: REAL:=0.0;
				(*hight limitation in m*)
			MDsgLimitRight AT %MD3.25: REAL:=0.0;
				(*sg limit right angle in degree*)
			MDsgLimitLeft AT %MD3.26: REAL:=0.0;
				(*sg limit left angle in degree*)
			MDhg1Reeving AT %MD3.27: REAL:=0.0;
				(*hg1 reeving*)
			MDhg2Reeving AT %MD3.28: REAL:=0.0;
				(*h2 reeving*)
			MDoffsetXaxis AT %MD3.29: REAL:=0.0;
				(*offset leader x axis*)
			MDoffsetYaxis AT %MD3.30: REAL:=0.0;
				(*offset leader y axis*)
			MDfuelConsumSiRe AT %MD3.31: REAL:=0.0;
				(*engine fuel consumption since reset [l]*)
			MDhgHightLimitUp AT %MD3.32: REAL:=0.0;
				(*hg hight limitation Up [m]*)
			MDhgHightLimitDn AT %MD3.33: REAL:=0.0;
				(*hg hight limitation Down [m]*)
			MDhg1RopeLenOff AT %MD3.34: REAL:=0.0;
				(*hg1 rope length winch  - boom offset*)
			MDhg2RopeLenOff AT %MD3.35: REAL:=0.0;
				(*hg1 rope length winch  - boom offset*)
			MDfuelConAbs_Lit AT %MD3.36: UDINT:=0;
				(*engine fuel consumption absolut [l]*)
			MDfuelConRel_Lit AT %MD3.37: UDINT:=0;
				(*engine fuel consumption sinde reset [l] (relative)*)
			MDfuelConSumDecA AT %MD3.38: UDINT:=0;
				(*LiDAT fuel consumption decimal absolut [ul]*)
			MDfuelConSumDecR AT %MD3.39: UDINT:=0;
				(*LiDAT fuel consumption decimal relativ [ul]*)
			MDfuelConAbsHour AT %MD3.40: REAL:=0.0;
				(*engine fuel consumption absolut hours since recording [h]*)
			MDfuelConRelHour AT %MD3.41: REAL:=0.0;
				(*engine fuel consumption relative hours since recording [h]*)
			MDhg1OperatHour AT %MD3.51: REAL:=0.0;
				(*operation hours hoisting gear 1*)
			MDhg2OperatHour AT %MD3.52: REAL:=0.0;
				(*operation hours hoisting gear 2*)
			MDlgOperatHour AT %MD3.53: REAL:=0.0;
				(*operation hours luffing gear (main boom)*)
			MDlg2OperatHour AT %MD3.54: REAL:=0.0;
				(*operation hours luffing gear 2 (luffin jib)*)
			MDlg3OperatHour AT %MD3.55: REAL:=0.0;
				(*operation hours derrick winch*)
			MDsgOperatHour AT %MD3.56: REAL:=0.0;
				(*operation hours slewing gear*)
			MDtgOperatHour AT %MD3.57: REAL:=0.0;
				(*operation hours travelling gear*)
			MDengOperatHour AT %MD3.58: REAL:=0.0;
				(*operation hours diesel engine*)
			MDadhOperHour AT %MD3.59: REAL:=0.0;
				(*operation hours additional hydraulic *)
			MDgrbOperHour AT %MD3.60: REAL:=0.0;
				(*operation hours hydraulic grab*)
			MDddOperHour AT %MD3.61: REAL:=0.0;
				(*operation hours drilling drive*)
			MDvibOperHour AT %MD3.62: REAL:=0.0;
				(*operation hours vibrator*)
			MDhamOperHour AT %MD3.63: REAL:=0.0;
				(*operation hours hammer*)
			MDsgAngeOffset AT %MD3.79: REAL:=0.0;
				(*sg angle offset analog angle sensor*)
			MDsgCountValue AT %MD3.80: DINT:=0;
				(*present counter value slewing gea*)
			MRservHourNext AT %MD3.81: REAL:=0.0;
				(*service hours next service*)
			MRservLastAckn AT %MD3.82: REAL:=0.0;
				(*service: hours at last service acknowledge*)
			MD_3_90 AT %MD3.90: REAL:=0.0;
				(*blocked *)
			MDmaFuelConsSum AT %MD3.91: UDINT:=0;
				(*LiDAT fuel consumption absolut [l]*)
			MDfuelConsSumDec AT %MD3.92: UDINT:=0;
				(*LiDAT fuel consumption decimal [ul]*)
			MDlmlScaLoadBoom AT %MD3.100: REAL:=0.0;
				(*lml scale load sensors main boom*)
			MDradiusLimitMaB AT %MD3.101: REAL:=0.0;
				(*radius limitation main boom [m]*)
			MDhightLimitMaB AT %MD3.102: REAL:=0.0;
				(*hight limitation main boom [m]*)
			MDradiusLimitJib AT %MD3.103: REAL:=0.0;
				(*radius limitation luffing Jib [m]*)
			MDhightLimitJib AT %MD3.104: REAL:=0.0;
				(*hight limitation luffing Jib [m]*)
			MDhg1OperHourRel AT %MD3.105: REAL:=0.0;
				(*operation hours hoisting gear 1 relative*)
			MDhg2OperHourRel AT %MD3.106: REAL:=0.0;
				(*operation hours hoisting gear 2 relative*)
			MDlgOperHourRel AT %MD3.107: REAL:=0.0;
				(*operation hours luffing gear (main boom) relative*)
			MDlg2OperHourRel AT %MD3.108: REAL:=0.0;
				(*operation hours luffing gear 2 (luffin jib) relative*)
			MDlg3OperHourRel AT %MD3.109: REAL:=0.0;
				(*operation hours derrick winch relative*)
			MDsgOperHourRel AT %MD3.110: REAL:=0.0;
				(*operation hours slewing gear relative*)
			MDtgOperHourRel AT %MD3.111: REAL:=0.0;
				(*operation hours travelling gear relative*)
			MDengOperHourRel AT %MD3.112: REAL:=0.0;
				(*operation hours diesel engine relative*)
			MDadhOperHourRel AT %MD3.113: REAL:=0.0;
				(*operation hours additional hydraulic relative*)
			MDgrbOperHourRel AT %MD3.114: REAL:=0.0;
				(*operation hours hydraulic grab relative*)
			MDddOperHourRel AT %MD3.115: REAL:=0.0;
				(*operation hours drilling drive relative*)
			MDvibOperHourRel AT %MD3.116: REAL:=0.0;
				(*operation hours vibrator relative*)
			MDhamOperHourRel AT %MD3.117: REAL:=0.0;
				(*operation hours hammer relative*)
			MDpdeDgcPointNr AT %MD3.150: REAL:=0.0;
				(*pde dgc number of compaction point*)
			MDdgcGivenBeats AT %MD3.151: REAL:=0.0;
				(*ad dynamic ground compaction given beats*)
			MDdgcGivenCompac AT %MD3.152: REAL:=0.0;
				(*ad dynamic ground compaction given compaction*)
			MDdgcGivenHight AT %MD3.153: REAL:=0.0;
				(*ad dynamic ground compaction given hoisting hight*)
			MDdgcGivSlowDown AT %MD3.154: REAL:=0.0;
				(*ad dynamic ground compaction given slown down lenght*)
			MDdgcGivenCompFt AT %MD3.155: REAL:=0.0;
				(*ad dyn. ground comp. given compaction [feed]*)
			MDdgcGivenHighFt AT %MD3.156: REAL:=0.0;
				(*ad dyn. ground comp. given hoisting hight [feed]*)
			MDdgcGivSlowDoFt AT %MD3.157: REAL:=0.0;
				(*ad dyn. ground comp. given slown down lenght [feed]*)
			MDpdeSetMode AT %MD3.158: DINT:=0;
				(*set mode on pde*)
			MDdgcTotalBeats AT %MD3.159: REAL:=0.0;
				(*ad dgc total beats*)
			MDdgctLegalBeats AT %MD3.160: REAL:=0.0;
				(*ad dgc legal beats*)
			MDgrabOffsetXaxi AT %MD3.170: REAL:=0.0;
				(*offset grab X axis*)
			MDgrabOffsetYaxi AT %MD3.171: REAL:=0.0;
				(*offset grab Y axis*)
			MDhg1LastRopeLen AT %MD3.172: REAL:=0.0;
				(*add. grab last rope length hg1*)
			MDdepthSlotMax AT %MD3.173: REAL:=0.0;
				(*maximal depth of the slot*)
			MDdepthCurCycle AT %MD3.174: REAL:=0.0;
				(*??*)
			MDcurCycleTab AT %MD3.175: UDINT:=0;
				(*??*)
			MDIndexCurCycTab AT %MD3.176: UDINT:=0;
				(*??*)
			MRwalLine1P1RadM AT %MD3.201: REAL:=0.0;
				(*wal line 1 point 1 radius main boom*)
			MRwalLine1P1AngM AT %MD3.202: REAL:=0.0;
				(*wal line 1 point 1 angle main boom*)
			MRwalLine1P2RadM AT %MD3.203: REAL:=0.0;
				(*wal line 1 point 2 radius main boom*)
			MRwalLine1P2AngM AT %MD3.204: REAL:=0.0;
				(*wal line 1 point 2 angle main boom*)
			MRwalLine2P1RadM AT %MD3.205: REAL:=0.0;
				(*wal line 2 point 1 radius main boom*)
			MRwalLine2P1AngM AT %MD3.206: REAL:=0.0;
				(*wal line 2 point 1 angle main boom*)
			MRwalLine2P2RadM AT %MD3.207: REAL:=0.0;
				(*wal line 2 point 2 radius main boom*)
			MRwalLine2P2AngM AT %MD3.208: REAL:=0.0;
				(*wal line 2 point 2 angle main boom*)
			MRwalLine1P1RadJ AT %MD3.209: REAL:=0.0;
				(*wal line 1 point 1 radius luffing jib*)
			MRwalLine1P1AngJ AT %MD3.210: REAL:=0.0;
				(*wal line 1 point 1 angle luffing jib*)
			MRwalLine1P2RadJ AT %MD3.211: REAL:=0.0;
				(*wal line 1 point 2 radius luffing jib*)
			MRwalLine1P2AngJ AT %MD3.212: REAL:=0.0;
				(*wal line 1 point 2 angle luffing jib*)
			MRwalLine2P1RadJ AT %MD3.213: REAL:=0.0;
				(*wal line 2 point 1 radius luffing jib*)
			MRwalLine2P1AngJ AT %MD3.214: REAL:=0.0;
				(*wal line 2 point 1 angle luffing jib*)
			MRwalLine2P2RadJ AT %MD3.215: REAL:=0.0;
				(*wal line 2 point 2 radius luffing jib*)
			MRwalLine2P2AngJ AT %MD3.216: REAL:=0.0;
				(*wal line 2 point 2 angle luffing jib*)
			MRwalSect1P1RadM AT %MD3.217: REAL:=0.0;
				(*wal sector 1 point 1 radius main boom*)
			MRwalSect1P1AngM AT %MD3.218: REAL:=0.0;
				(*wal sector 1 point 1 angle main boom*)
			MRwalSect1P2RadM AT %MD3.219: REAL:=0.0;
				(*wal sector 1 point 2 radius main boom*)
			MRwalSect1P2AngM AT %MD3.220: REAL:=0.0;
				(*wal sector 1 point 2 angle main boom*)
			MRwalSect1P3RadM AT %MD3.221: REAL:=0.0;
				(*wal sector 1 point 3 radius main boom*)
			MRwalSect1P3AngM AT %MD3.222: REAL:=0.0;
				(*wal sector 1 point 3 angle main boom*)
			MRwalSect1P1RadJ AT %MD3.223: REAL:=0.0;
				(*wal sector 1 point 1 radius luffing jib*)
			MRwalSect1P1AngJ AT %MD3.224: REAL:=0.0;
				(*wal sector 1 point 1 angle luffing jib*)
			MRwalSect1P2RadJ AT %MD3.225: REAL:=0.0;
				(*wal sector 1 point 2 radius luffing jib*)
			MRwalSect1P2AngJ AT %MD3.226: REAL:=0.0;
				(*wal sector 1 point 2 angle luffing jib*)
			MRwalSect1P3RadJ AT %MD3.227: REAL:=0.0;
				(*wal sector 1 point 3 radius luffing jib*)
			MRwalSect1P3AngJ AT %MD3.228: REAL:=0.0;
				(*wal sector 1 point 3 angle luffing jib*)
			MRvib1Volume AT %MD3.301: REAL:=0.0;
				(*vibrator 1 volume*)
			MRvib1Press AT %MD3.302: REAL:=0.0;
				(*vibrator 1 pressure*)
			MRvib1ClampPress AT %MD3.303: REAL:=0.0;
				(*vibrator 1 clamp pressure*)
			MRvib1ExcTime AT %MD3.304: REAL:=0.0;
				(*vibrator 1 excentric adjust time*)
			MRham1Volume AT %MD3.311: REAL:=0.0;
				(*hammer 1 volume*)
			MRham1Press AT %MD3.312: REAL:=0.0;
				(*hammer 1 pressure*)
			MRdrill1Volume AT %MD3.321: REAL:=0.0;
				(*drill 1 volume*)
			MRdrill1Press AT %MD3.322: REAL:=0.0;
				(*drill 1 pressure*)
			MRgrab1VolOpen AT %MD3.331: REAL:=0.0;
				(*grab 1 volume open*)
			MRgrab1VolClose AT %MD3.332: REAL:=0.0;
				(*grab 1 volume close*)
			MRgrab1PresOpen AT %MD3.333: REAL:=0.0;
				(*grab 1 pressure open*)
			MRgrab1PresClose AT %MD3.334: REAL:=0.0;
				(*grab 1 pressure close*)
			MDacKeySeriaLast AT %MD3.400: UDINT:=0;
				(*AC serial of the last ignition key*)
			MXacLeaNextKey: BOOL:=FALSE;
				(*AC learn next key*)
			MXacLeaNextKeyMa: BOOL:=FALSE;
				(*AC learn next key as Master*)
			MXacDelNextKey: BOOL:=FALSE;
				(*AC delete next key*)
			MXacWasActivated: BOOL:=FALSE;
				(*AC was activated*)
		END_VAR
		VAR_GLOBAL
			MDacKeyIndex: UDINT:=0;
				(*AC index of the actual ignition key*)
			MDacKeySerial: UDINT:=0;
				(*AC serial of the actual ignition key*)
			SXMresetOpHour AT %MX4.1: BOOL:=FALSE;
				(* operational hours RESET *)
			SXMresetFuelCons AT %MX4.2: BOOL:=FALSE;
				(* reset fuel consumption *)
			SXMhg1ResRopLen AT %MX4.3: BOOL:=FALSE;
				(* hg1 reset rope length *)
			SXMhg2ResRopLen AT %MX4.4: BOOL:=FALSE;
				(* hg2 reset rope length *)
			SXMhg1ChanLay1_2 AT %MX4.5: BOOL:=FALSE;
				(* hg1 change layer 1 - 2 *)
			SXMhg2ChanLay1_2 AT %MX4.6: BOOL:=FALSE;
				(* hg2 change layer 1 - 2 *)
			SXMhg1ChanLay3_4 AT %MX4.7: BOOL:=FALSE;
				(* hg1 change layer 3 - 4 *)
			SXMhg2ChanLay3_4 AT %MX4.8: BOOL:=FALSE;
				(* hg2 change layer 3 - 4 *)
			SXMhg1ChanLay5_6 AT %MX4.9: BOOL:=FALSE;
				(* hg1 change layer 5 - 6 *)
			SXMhg2ChanLay5_6 AT %MX4.10: BOOL:=FALSE;
				(* hg2 change layer 5 - 6 *)
			SXMlmlTaraActLoa AT %MX4.11: BOOL:=FALSE;
				(* lml tara actual load *)
			SXMbuzzStatAckn AT %MX4.12: BOOL:=FALSE;
				(* buzzer on status line acknowledged *)
			SXMbuzzMainAckn AT %MX4.13: BOOL:=FALSE;
				(* buzzer on main page acknowledged *)
			SXMbuzzPowerAckn AT %MX4.14: BOOL:=FALSE;
				(* buzzer on powerpack page acknowledged *)
			SXMoneBeep AT %MX4.15: BOOL:=FALSE;
				(*set one beep*)
			SXMwalHigMaBoAct AT %MX4.16: BOOL:=FALSE;
			SXMwalHigLJibAct AT %MX4.17: BOOL:=FALSE;
			SXMwalRadMaBoAct AT %MX4.18: BOOL:=FALSE;
			SXMwalRadLJibAct AT %MX4.19: BOOL:=FALSE;
			SXMwalSlewAct AT %MX4.20: BOOL:=FALSE;
			SXMwalLinMaBoAct AT %MX4.21: BOOL:=FALSE;
			SXMwalLinLJibAct AT %MX4.22: BOOL:=FALSE;
			SXMwalSecMaBoAct AT %MX4.23: BOOL:=FALSE;
			SXMwalSecLJibAct AT %MX4.24: BOOL:=FALSE;
			SXMwalSetMiRaMaB AT %MX4.25: BOOL:=FALSE;
			SXMwalSetMiRaLuJ AT %MX4.26: BOOL:=FALSE;
			SXMwalSetMaRaMaB AT %MX4.27: BOOL:=FALSE;
			SXMwalSetMaRaLuJ AT %MX4.28: BOOL:=FALSE;
			SXMwalSetSgLeft AT %MX4.29: BOOL:=FALSE;
			SXMwalSetSgRight AT %MX4.30: BOOL:=FALSE;
			SXMwalSetLin1P1M AT %MX4.31: BOOL:=FALSE;
			SXMwalSetLin1P2M AT %MX4.32: BOOL:=FALSE;
			SXMwalSetLin2P1M AT %MX4.33: BOOL:=FALSE;
			SXMwalSetLin2P2M AT %MX4.34: BOOL:=FALSE;
			SXMwalSetLin1P1J AT %MX4.35: BOOL:=FALSE;
			SXMwalSetLin1P2J AT %MX4.36: BOOL:=FALSE;
			SXMwalSetLin2P1J AT %MX4.37: BOOL:=FALSE;
			SXMwalSetLin2P2J AT %MX4.38: BOOL:=FALSE;
			SXMwalSetSec1P1M AT %MX4.39: BOOL:=FALSE;
			SXMwalSetSec1P2M AT %MX4.40: BOOL:=FALSE;
			SXMwalSetSec1P3M AT %MX4.41: BOOL:=FALSE;
			SXMwalSetSec1P1J AT %MX4.42: BOOL:=FALSE;
			SXMwalSetSec1P2J AT %MX4.43: BOOL:=FALSE;
			SXMwalSetSec1P3J AT %MX4.45: BOOL:=FALSE;
			SXMservButtAckn AT %MX4.46: BOOL:=FALSE;
				(*service acknowledge button *)
			SXMnewModeAckn AT %MX4.47: BOOL:=FALSE;
				(* new mode acknowledged*)
			SXMpreLeaderZero AT %MX4.48: BOOL:=FALSE;
				(* preselection set leader to zero position*)
			SXMsetLeaderZero AT %MX4.49: BOOL:=FALSE;
				(* set leader to zero position*)
			SXMsetLeaderPos AT %MX4.50: BOOL:=FALSE;
				(* set leader rated position *)
			SXMdpfRegInitiat AT %MX4.51: BOOL:=FALSE;
				(*diesel particel filter regeneration initiated*)
			SXMdpfRegDisable AT %MX4.52: BOOL:=FALSE;
				(*diesel particel filter regeneration disabled*)
			SXMsetLeaderOper AT %MX4.53: BOOL:=FALSE;
				(*set leader operation *)
			SXMacKeyNameChan AT %MX4.54: BOOL:=FALSE;
				(*Name des aktuellen Schlüsseles wurde geändert*)
			SXMsgSetToZero AT %MX4.55: BOOL:=FALSE;
				(*sg set angle to zero degree*)
			SXMsgSetSynchInc AT %MX4.56: BOOL:=FALSE;
				(*sg set incremental sensor to angle sensor angle*)
			SXMchUnitDistanc AT %MX4.57: BOOL:=FALSE;
				(*change unit for distance*)
			SXMchUnitLoad AT %MX4.58: BOOL:=FALSE;
				(*change unit for load*)
			SXMchUnitPress AT %MX4.59: BOOL:=FALSE;
				(*change unit for pressure*)
			SXMchUnitTemp AT %MX4.60: BOOL:=FALSE;
				(*change unit for temperature*)
			SXMchUnitVolume AT %MX4.61: BOOL:=FALSE;
				(*change unit for volume*)
			SXMchUnitSpeed AT %MX4.62: BOOL:=FALSE;
				(*change unit for speed*)
			SXMsetTranspOper AT %MX4.63: BOOL:=FALSE;
				(*set transportation operation mode*)
			SXMsetCoucarOper AT %MX4.64: BOOL:=FALSE;
				(*set counterweight carrier operation mode*)
			SXMenabRemAccess AT %MX4.65: BOOL:=FALSE;
				(*enable remote access*)
			SXMleadSetToZero AT %MX4.66: BOOL:=FALSE;
				(*set leader inclination to zero*)
			SXMleTaSetToZero AT %MX4.67: BOOL:=FALSE;
				(*set leader target to zero*)
			SXMlockHg1 AT %MX4.68: BOOL:=FALSE;
				(*lock hg1*)
			SXMlockHg2 AT %MX4.69: BOOL:=FALSE;
				(*lock hg2*)
			SXMlockLg AT %MX4.70: BOOL:=FALSE;
				(*lock luffing gear*)
			SXMlockSg AT %MX4.71: BOOL:=FALSE;
				(*lock slewing gear*)
			SXMlockTg AT %MX4.72: BOOL:=FALSE;
				(*lock travelling gear*)
			WXMservButtAckn AT %MX4.500: BOOL:=FALSE;
				(*wizard acknowledge button *)
			SRMpreNewMode AT %MD4.1: REAL:=0.00;
				(* preselected new Mode*)
			SRMhg1Reeving AT %MD4.2: REAL:=0.00;
				(* hg1 reeving *)
			SRMhg2Reeving AT %MD4.3: REAL:=0.00;
				(* hg2 reeving *)
			SRMdgcLiftHight AT %MD4.4: REAL:=0.0;
				(*dgc: lifting hight adjusted*)
			SRMdgcBeats AT %MD4.5: REAL:=0.0;
				(*dgc: beats adjusted*)
			SRMdgcCompaction AT %MD4.6: REAL:=0.0;
				(*dgc: compaction adjusted*)
			SRMdgcSlowDoHigh AT %MD4.7: REAL:=0.0;
				(*dgc: slow down hight adjusted*)
			SRMratedCursXinc AT %MD4.8: REAL:=0.0;
				(* rated cursor X inclination*)
			SRMratedCursYinc AT %MD4.9: REAL:=0.0;
				(* rated cursor Y inclination*)
			SRMequipVolume1 AT %MD4.10: REAL:=0.0;
				(*equipment volume 1*)
			SRMequipPress1 AT %MD4.11: REAL:=0.0;
				(*equipment pressure 1*)
			SRMequipVolume2 AT %MD4.12: REAL:=0.0;
				(*equipment volume 2*)
			SRMequipPress2 AT %MD4.13: REAL:=0.0;
				(*equipment pressure 2*)
			SRMvibExcTime AT %MD4.14: REAL:=0.0;
				(*vibrator excentric adjust time*)
			SRMgrabVolOpen AT %MD4.15: REAL:=0.0;
				(*grab volume open*)
			SRMgrabVolClose AT %MD4.16: REAL:=0.0;
				(*grab volume close*)
			SRMgrabPresOpen AT %MD4.17: REAL:=0.0;
				(*grab pressure open*)
			SRMgrabPresClose AT %MD4.18: REAL:=0.0;
				(*grab pressure close*)
			SRMleadTargetX AT %MD4.19: REAL:=0.0;
				(*leader target inclination X*)
			SRMleadTargetY AT %MD4.20: REAL:=0.0;
				(*leader target inclination Y*)
			SRcurrentMode: REAL:=-1.10;
				(* actual selected mode *)
			SXhydrOilShutOff: BOOL:=FALSE;
				(* hydraulic oil shut off ball valve not opened *)
			SXgearOilTempErr: BOOL:=FALSE;
				(* gear oil temperature error *)
			SXfeedPressLow: BOOL:=FALSE;
				(* feed pressure low *)
			SXfeedPresLowHg1: BOOL:=FALSE;
				(* feed pressure hg1 low *)
			SXfeedPresLowHg2: BOOL:=FALSE;
				(* feed pressure hg2 low *)
			SXfeedPressFilt: BOOL:=FALSE;
				(* feed pressure filter warning *)
			SXhydrOilRetFilt: BOOL:=FALSE;
				(* hydraulic oil return flow filter warning *)
			SXdpfActive: BOOL:=FALSE;
				(* diesel particle filter active *)
			SXdpfError: BOOL:=FALSE;
				(* diesel particle filter error *)
			SXdpfWarn: BOOL:=FALSE;
				(* diesel particle filter warning *)
			SXdpfRegManActiv: BOOL:=FALSE;
				(*diesel particle filter regeneration manual initiated*)
			SXdefError: BOOL:=FALSE;
				(*DEF error *)
			SXdefWarn: BOOL:=FALSE;
				(*DEF warning *)
			SXmilError: BOOL:=FALSE;
				(*engine MIL error*)
			SXmilWarn: BOOL:=FALSE;
				(*engine MIL warning*)
			SXcoolWaterContW: BOOL:=FALSE;
				(* cooling water content warning*)
			SXcoolWaterContE: BOOL:=FALSE;
				(* cooling water content error *)
			SXhydrOilCoLoErr: BOOL:=FALSE;
				(* hydraulic oil content low error *)
			SXhydrOilCoLoWar: BOOL:=FALSE;
				(* hydraulic oil content low warning*)
			SXhydrOilCoHiErr: BOOL:=FALSE;
				(* hydraulic oil content high error*)
			SXhydrOilCoHiWar: BOOL:=FALSE;
				(* hydraulic oil content high warning*)
			SXhydrOilLeakage: BOOL:=FALSE;
				(* hydraulic oil leakage*)
			SXengOilCoLowErr: BOOL:=FALSE;
				(*engine lub oil content low error*)
			SXengOilCoLowWar: BOOL:=FALSE;
				(*engine lub oil content low warning*)
			SXengOilCoHigErr: BOOL:=FALSE;
				(*engine lub oil content high error*)
			SXengOilCoHigWar: BOOL:=FALSE;
				(*engine lub oil content high warning*)
			SXengOilContAct: BOOL:=FALSE;
				(*engine lub oil content is active*)
			SXairFilterWarn: BOOL:=FALSE;
				(* air filter warning*)
			SXairFilterError: BOOL:=FALSE;
				(* air filter error *)
			SXwaterInFuel: BOOL:=FALSE;
				(* water in fuel *)
			SXfuelPressError: BOOL:=FALSE;
				(* fuel pressure error *)
			SXfuelPressWarn: BOOL:=FALSE;
				(* fuel pressure warning *)
			SXfuelTempError: BOOL:=FALSE;
				(* fuel temperature error *)
			SXfuelTempWarn: BOOL:=FALSE;
				(* fuel temperature warning *)
			SXengHightLimit: BOOL:=FALSE;
				(* engine power limitation by hight *)
			SXengPowerLimit: BOOL:=FALSE;
				(* engine power limitation *)
			SXchargeControl: BOOL:=FALSE;
				(* battery charge control *)
			SXpreHeatStart: BOOL:=FALSE;
				(* pre heating ready for engine start *)
			SXpreHeatActive: BOOL:=FALSE;
				(* pre heating is active *)
			SXpostHeatActive: BOOL:=FALSE;
				(*post heating is active *)
			SXfuelContError: BOOL:=FALSE;
				(* fuel content error *)
			SXfuelContWarn: BOOL:=FALSE;
				(* fuel content warning *)
			SXengSpeedError: BOOL:=FALSE;
				(* engine speed error *)
			SXengSpeedWarn: BOOL:=FALSE;
				(* engine speed warning *)
			SXlubOilPressErr: BOOL:=FALSE;
				(* lub oil pressure error *)
			SXlubOilPressWar: BOOL:=FALSE;
				(* lub oil pressure warning *)
			SXhydrOilTempErr: BOOL:=FALSE;
				(* hydraulic oil temperature error *)
			SXhydrOilTempWar: BOOL:=FALSE;
				(* hydraulic oil temperature warning *)
			SXchargeAirTempE: BOOL:=FALSE;
				(* charge air temperature error *)
			SXchargeAirTempW: BOOL:=FALSE;
				(* charge air temperature warning *)
			SXcoolWaterTempE: BOOL:=FALSE;
				(* coolant temperature error *)
			SXcoolWaterTempW: BOOL:=FALSE;
				(* coolant temperature warning *)
			SXhydrOilHeating: BOOL:=FALSE;
				(* hydraulic oil heating is active*)
			SXdpfRegDisabled: BOOL:=FALSE;
				(* diesel particle filter regeneration disabled*)
			SXdpfInitPossib: BOOL:=FALSE;
				(*diesel particle filter regeneration initiation possible*)
			SXdpfDisabPossib: BOOL:=FALSE;
				(*diesel particle filter regeneration disabling possible*)
			SXlidec1: BOOL:=FALSE;
				(*EDC is LIDEC 1 or compatibel*)
			SRoutdoorTemp: REAL:=0.00;
				(* outdoor temperature *)
			SRfuelCont: REAL:=0.00;
				(* fuel content *)
			SRbatteryVoltage: REAL:=0.00;
				(* battery voltage *)
			SRlubOilPress: REAL:=0.00;
				(* lub oil pressure *)
			SRchargeAirPress: REAL:=0.00;
				(* charge ais presuure *)
			SRchargeAirTemp: REAL:=0.00;
				(* charge air temperature *)
			SRhydrOilTemp: REAL:=0.00;
				(* hydraulic oil temperature *)
			SRcoolWaterTemp: REAL:=0.00;
				(* coolant temperature *)
			SRactualTorque: REAL:=0.00;
				(* engine actual torque *)
			SRengineSpeed: REAL:=0.00;
				(* engine speed *)
			SRdpfTime: REAL:=0.00;
				(*diesel particel filter time left*)
			SRdefCont: REAL:=0.00;
				(*DEF content *)
			SRlubOilCont: REAL:=0.00;
				(*lub oil content *)
			SRpageAtStart: REAL:=0.00;
				(* first screen page at start *)
			SXengReqStop: BOOL:=FALSE;
				(* engine requires stop *)
			SXengReqRep: BOOL:=FALSE;
				(* engine requires repair *)
			SXlmlWarnSym: BOOL:=FALSE;
				(* lml warning symbol *)
			SXlmlStopSym: BOOL:=FALSE;
				(* lml stop symbol *)
			SXlmlWarnBuzz: BOOL:=FALSE;
				(* lml warning buzzer *)
			SXlmlStopBuzz: BOOL:=FALSE;
				(* lml stop buzzer *)
			SXlmlBridged: BOOL:=FALSE;
				(* lml bridged *)
			SXassemblyOperat: BOOL:=FALSE;
				(* assembly operation activated *)
			SXemergOperat: BOOL:=FALSE;
				(* emergency operation activated *)
			SRlgSpeed: REAL:=0.00;
				(* luffing gear speed selection *)
			SRsgSpeed: REAL:=0.00;
				(* slewing gear speed selection *)
			SXrcChangeContro: BOOL:=FALSE;
				(* remote control change control *)
			SXrcActive: BOOL:=FALSE;
				(* remote control active *)
			SXrcRadioOk: BOOL:=FALSE;
				(* remote control radio signal ok *)
			SXhgFreeFallWarn: BOOL:=FALSE;
				(* hg freefall warning *)
			SXrcContChanged: BOOL:=FALSE;
				(* remote control control was changed *)
			SXhgFreefUnsec: BOOL:=FALSE;
				(* hg unsecured freefall preselected *)
			SXhgFreefPresel: BOOL:=FALSE;
				(* hg freefall preselected *)
			SXneedSuppCrane: BOOL:=FALSE;
				(* supply crane needed *)
			SXwinchSync: BOOL:=FALSE;
				(* winch synchronisation active *)
			SXhg1ClutchOpen: BOOL:=FALSE;
				(* hg 1 clutch is open *)
			SXhg2ClutchOpen: BOOL:=FALSE;
				(* hg 2 clutch is open *)
			SXhg1FastSpeed: BOOL:=FALSE;
				(* hg 1 fast speed *)
			SXhg2FastSpeed: BOOL:=FALSE;
				(* hg 2 fast speed *)
			SXspecHoistFunc: BOOL:=FALSE;
				(* special sensitive hoisting function *)
			SRsymNrJoyLeX: REAL:=0.00;
				(*symbol number display joystick left X*)
			SRsymNrJoyLeY: REAL:=0.00;
				(*symbol number display joystick left Y*)
			SRsymNrJoyRiX: REAL:=0.00;
				(*symbol number display joystick right X*)
			SRsymNrJoyRiY: REAL:=0.00;
				(*symbol number display joystick right Y*)
			SX2TjoystAct: BOOL:=FALSE;
				(*2-T joystick enabled*)
			SXflCouWeiCylAct: BOOL:=FALSE;
				(* floating counterweight cylinder active *)
			SRlimitSwiNumb: REAL:=0.00;
				(* limit switch number *)
			SXlmlMainBoom: BOOL:=FALSE;
				(* lml main boom *)
			SXlmlMainReduct: BOOL:=FALSE;
				(*lml main boom reduction*)
			SXlmlFixedJib: BOOL:=FALSE;
				(* lml fixed Jib *)
			SXlmlLuffJib: BOOL:=FALSE;
				(* lml luffing Jib *)
			SXlmlFixLufJib: BOOL:=FALSE;
				(* lml fixed or luffing Jib *)
			SXlmlLoLocMaMiWJ: BOOL:=FALSE;
				(* lml load location main boom od Midfall with mounted jib *)
			SXlmlMidfall: BOOL:=FALSE;
				(* lml midfall *)
			SXlmlDerrick: BOOL:=FALSE;
				(* lml derrick *)
			SXlmlCouCar: BOOL:=FALSE;
				(* lml counterweight carrier *)
			SXlmlOkAngPivPie: BOOL:=FALSE;
				(* lml angle sensor pivot piece OK*)
			SXlmlOkGeometric: BOOL:=FALSE;
				(* lml geometrical calculation OK*)
			SXlmlOkLoadCalc: BOOL:=FALSE;
				(* lml load calculation OK*)
			SXlmlOkLoaCalcDe: BOOL:=FALSE;
				(* lml load derrick calculation OK*)
			SRlmlUtilization: REAL:=0.00;
				(* lml utlization *)
			SRlmlUtilBack: REAL:=0.00;
				(* lml utlization backwards *)
			SRlmlActLoad: REAL:=0.00;
				(* lml actual load (charge) *)
			SRlmlMaxLoad: REAL:=0.00;
				(* lml maximum load *)
			SRlmlActHookLoad: REAL:=0.00;
				(* lml actual hook load *)
			SRlmlActCompLoad: REAL:=0.00;
				(* lml actual complete load *)
			SRlmlJibLoadOLL: REAL:=0.00;
				(* lml actual jib load at other load location *)
			SRlmlActLoadRad: REAL:=0.00;
				(* lml actual load radius *)
			SRlmlActHeadHig: REAL:=0.00;
				(* lml actual head hight *)
			SRlmlBoomAngle: REAL:=0.00;
				(* lml main boom angle *)
			SRlmlJibAngle: REAL:=0.00;
				(* lml jib angle *)
			SRlmlCouCarLoad: REAL:=0.00;
				(* lml counterweight carrier load *)
			SRlmlCouCarRad: REAL:=0.00;
				(* lml counterweight carrier radius *)
			SRmachineType: REAL:=0.0;
				(*machine type superstructure*)
			SXophEngRun: BOOL:=FALSE;
				(* operational hours engine running *)
			SXophHg1Run: BOOL:=FALSE;
				(* operational hours hg1 running *)
			SXophHg2Run: BOOL:=FALSE;
				(* operational hours hg2 running *)
			SXophLg1Run: BOOL:=FALSE;
				(* operational hours lg1 running *)
			SXophLg2Run: BOOL:=FALSE;
				(* operational hours lg2 running *)
			SXophLg3Run: BOOL:=FALSE;
				(* operational hours lg3 running *)
			SXophSgRun: BOOL:=FALSE;
				(* operational hours sg running *)
			SXophTgRun: BOOL:=FALSE;
				(* operational hours tg running *)
			SXophAdhRun: BOOL:=FALSE;
				(*operation hours additional hydraulic running *)
			SXophOpModeRun: BOOL:=FALSE;
				(*operation hours actual operational mode running *)
			SXophLg2Act: BOOL:=FALSE;
				(*operation hour of lg2 active*)
			SXophAuxAct: BOOL:=FALSE;
				(*operation hour of auxiliary winch active*)
			SXophLg3Act: BOOL:=FALSE;
				(*operation hour of lg3 active*)
			SXophAdhAct: BOOL:=FALSE;
				(*operation hour of additional hydraulic active*)
			SRophEngAbs: REAL:=0.00;
				(* operational hours engine absolut *)
			SRophHg1Abs: REAL:=0.00;
				(* operational hours hg1 absolut *)
			SRophHg2Abs: REAL:=0.00;
				(* operational hours hg2 absolut *)
			SRophLg1Abs: REAL:=0.00;
				(* operational hours lg1 absolut *)
			SRophLg2Abs: REAL:=0.00;
				(* operational hours lg2 absolut *)
			SRophLg3Abs: REAL:=0.00;
				(* operational hours lg3 absolut *)
			SRophSgAbs: REAL:=0.00;
				(* operational hours sg absolut *)
			SRophTgAbs: REAL:=0.00;
				(* operational hours tg absolut *)
			SRophAdhAbs: REAL:=0.0;
				(*operation hours additional hydraulic *)
			SRophOpModeAbs: REAL:=0.0;
				(*operation hours actual operational mode*)
			SRophEngRel: REAL:=0.00;
				(* operational hours engine relative *)
			SRophHg1Rel: REAL:=0.00;
				(* operational hours hg1 relative *)
			SRophHg2Rel: REAL:=0.00;
				(* operational hours hg2 relative *)
			SRophLg1Rel: REAL:=0.00;
				(* operational hours lg1 relative *)
			SRophLg2Rel: REAL:=0.00;
				(* operational hours lg2 relative *)
			SRophLg3Rel: REAL:=0.00;
				(* operational hours lg3 relative *)
			SRophSgRel: REAL:=0.00;
				(* operational hours sg relative *)
			SRophTgRel: REAL:=0.00;
				(* operational hours tg relative *)
			SRophAdhRel: REAL:=0.0;
				(*operation hours additional hydraulic relative*)
			SRophOpModeRel: REAL:=0.0;
				(*operation hours actual operational  relative*)
			SRfuelConsPhAbs: REAL:=0.00;
				(* fuel consumption per hour absolut *)
			SRfuelConsPhRel: REAL:=0.00;
				(* fuel consumption per hour relative *)
			SRfuelConsRel: REAL:=0.00;
				(* fuel consumption relative *)
			SRfuelConsAbs: REAL:=0.00;
				(* fuel consumption absolut *)
			SRhg1RopeLength: REAL:=0.00;
				(* hg1 rope length *)
			SRhg2RopeLength: REAL:=0.00;
				(* hg2 rope length *)
			SRhg1RopeSpeed: REAL:=0.0;
				(* hg1 rope speed*)
			SRhg2RopeSpeed: REAL:=0.0;
				(* hg1 rope speed*)
			SXhg1Lift: BOOL:=FALSE;
				(* hg1 lifting *)
			SXhg1Lower: BOOL:=FALSE;
				(* hg1 lower *)
			SXhg2Lift: BOOL:=FALSE;
				(* hg2 lift *)
			SXhg2Lower: BOOL:=FALSE;
				(* hg2 lower *)
			SXhg1RopeLenMeas: BOOL:=FALSE;
				(* hg1 rope length measuring preselected *)
			SXhg2RopeLenMeas: BOOL:=FALSE;
				(* hg2 rope length measuring preselected *)
			SXelectricWarnin: BOOL:=FALSE;
				(* electrical warning *)
			SXelectricError: BOOL:=FALSE;
				(* electrical error *)
			SRwindSpeed: REAL:=0.00;
				(* wind speed [m/s] *)
			SXwindSpeedWarn: BOOL:=FALSE;
				(* wind speed warning *)
			SXwindSpeedAct: BOOL:=FALSE;
				(* wind speed active *)
			SXwindSpeedError: BOOL:=FALSE;
				(* wind speed error *)
			SXlmlPage: BOOL:=FALSE;
				(* lml page*)
			SXlmlLoadTared: BOOL:=FALSE;
				(* lml load tared *)
			SXlmlCantBack: BOOL:=FALSE;
				(* lml cant back *)
			SXgroundPress: BOOL:=FALSE;
				(*ground pressure device activated*)
			SXgrouPressValid: BOOL:=FALSE;
				(*ground pressure values valid*)
			SRgroundPress0: REAL:=0.0;
				(*ground pressure at 0 degrere*)
			SRgroundPress45: REAL:=0.0;
				(*ground pressure at 45 degrere*)
			SRgroundPress90: REAL:=0.0;
				(*ground pressure at 90 degrere*)
			SXwalPresel: BOOL:=FALSE;
				(*work area limitation preselected *)
			SXwalLgMin: BOOL:=FALSE;
				(*work area limitation lg minimum*)
			SXwalLgMax: BOOL:=FALSE;
				(*work area limitation lg maximum*)
			SXwalLg2Min: BOOL:=FALSE;
				(*work area limitation lg2 minimum*)
			SXwalLg2Max: BOOL:=FALSE;
				(*work area limitation lg2 maximum*)
			SXwalSgLeft: BOOL:=FALSE;
				(*work area limitation sg left*)
			SXwalSgRight: BOOL:=FALSE;
				(*work area limitation sg right*)
			SRwalDistToStop: REAL:=0.0;
				(*work area limitation distance to stop*)
			SRactRadMaBo: REAL:=0.00;
				(* actual Radius main boom [m] *)
			SRactRadJib: REAL:=0.00;
				(* actual Radius main boom [m] *)
			SRwalMaxRadMaBo: REAL:=0.00;
				(* maximum Radius main boom [m] *)
			SRwalMaxRadJib: REAL:=0.00;
				(* maximum Radius jib [m] *)
			SRwalMaxRadius: REAL:=0.00;
				(* maximumRadius Jib [m] *)
			SRwalMinRadMaBo: REAL:=0.00;
				(* minimum Radius main boom [m] *)
			SRwalMinRadJib: REAL:=0.00;
				(* minimum Radius jib [m] *)
			SRwalSlewRight: REAL:=0.00;
				(* wal slewing limit angle right [°] *)
			SRwalSlewLeft: REAL:=0.00;
				(* wal slewing limit angle left [°] *)
			SRwalLi1Int1AngM: REAL:=0.00;
				(*wal main boom sg angle border line 1 intersection 1 max radius*)
			SRwalLi1Int2AngM: REAL:=0.00;
				(*wal main boom sg angle border line 1  intersection 2 max radius*)
			SRwalLi2Int1AngM: REAL:=0.00;
				(*wal main boom sg angle border line 2  intersection 1 max radius*)
			SRwalLi2Int2AngM: REAL:=0.00;
				(*wal main boom sg angle border line 2  intersection 2 max radius*)
			SRwalLi1Int1AngJ: REAL:=0.00;
				(*wal luffing jib sg angle border line 1  intersection 1 max radius*)
			SRwalLi1Int2AngJ: REAL:=0.00;
				(*wal luffing jib sg angle border line 1  intersection 2  max radius*)
			SRwalLi2Int1AngJ: REAL:=0.00;
				(*wal luffing jib sg angle border line 2  intersection 1 max radius*)
			SRwalLi2Int2AngJ: REAL:=0.00;
				(*wal luffing jib sg angle border line 2  intersection 2 max radius*)
			SRwalSect1P1RadM: REAL:=0.00;
				(*wal main boom radius sector 1 point 1*)
			SRwalSect1P1AngM: REAL:=0.00;
				(*wal main boom sg angle sector 1 point 1*)
			SRwalSect1P2RadM: REAL:=0.00;
				(*wal main boom radius sector 1 point 2*)
			SRwalSect1P2AngM: REAL:=0.00;
				(*wal main boom sg angle sector 1 point 2*)
			SRwalSect1P3RadM: REAL:=0.00;
				(*wal main boom radius sector 1 point 3*)
			SRwalSect1P3AngM: REAL:=0.00;
				(*wal main boom sg angle sector 1 point 3*)
			SRwalSect1P1RadJ: REAL:=0.00;
				(*wal luffing jib radius sector 1 point 1*)
			SRwalSect1P1AngJ: REAL:=0.00;
				(*wal luffing jib sg angle sector 1 point 1*)
			SRwalSect1P2RadJ: REAL:=0.00;
				(*wal luffing jib radius sector 1 point 2*)
			SRwalSect1P2AngJ: REAL:=0.00;
				(*wal luffing jib sg angle sector 1 point 2*)
			SRwalSect1P3RadJ: REAL:=0.00;
				(*wal luffing jib radius sector 1 point 3*)
			SRwalSect1P3AngJ: REAL:=0.00;
				(*wal luffing jib sg angle sector 1 point 3*)
			SXblackboxActive: BOOL:=FALSE;
				(*blackbox active recording*)
			SXblackboxInit: BOOL:=FALSE;
				(*blackbox initializing*)
			SXblackboxError: BOOL:=FALSE;
				(*blackbox error*)
			SXacAcActive: BOOL:=FALSE;
				(*AC active*)
			SXacOlActive: BOOL:=FALSE;
				(*AC operation lock system active*)
			SXacActKeyValid: BOOL:=FALSE;
				(*AC actual ignition key is valid*)
			SXacActKeyMaster: BOOL:=FALSE;
				(*AC actual ignition key is master*)
			SXacKeyMatched: BOOL:=FALSE;
				(*AC actual ignition key is kown by IMMO*)
			SDacNumberOfKeys: DINT:=0;
				(*AC number of kown keys*)
			SDacActKeyPrio: DINT:=0;
				(*AC priority of the actual ignition key*)
			SXserviceWarning: BOOL:=FALSE;
				(*service warning*)
			SXserviceNotAckn: BOOL:=FALSE;
				(*service was not confirmed in time*)
			SRservLastAckn: REAL:=0.0;
				(*service operating hours at last service*)
			SRservNextAckn: REAL:=0.0;
				(*service operating hours at next service*)
			SRservInterval: REAL:=0.0;
				(*service interval hours*)
			SRservAcknBef: REAL:=0.0;
				(*service acknowledge hours before*)
			SXpreMainOp: BOOL:=FALSE;
				(*preselection main operation*)
			SXpreVibOp: BOOL:=FALSE;
				(*preselection vibrator operation*)
			SXpreHamOp: BOOL:=FALSE;
				(*preselection hammer operation*)
			SXpreDgcOp: BOOL:=FALSE;
				(*preselection dynamic ground compaction*)
			SXpreGrabOp: BOOL:=FALSE;
				(*preselection hydraulic grab operation*)
			SXlePreGrabOp: BOOL:=FALSE;
				(*preselection leffer grab operation*)
			SXsbPreGrabOp: BOOL:=FALSE;
				(*preselection soletanche bachy grab operation*)
			SXsmPreGrabOp: BOOL:=FALSE;
				(*preselection soilmec grab operation*)
			SXpreGrabHoseOp: BOOL:=FALSE;
				(*preselection hydraulic grab with hose winch*)
			SXpreKelGrapOp: BOOL:=FALSE;
				(*preselection kelly grab operation*)
			SXpreDrillOp: BOOL:=FALSE;
				(*preselection drilling operation*)
			SXpreExtContOp: BOOL:=FALSE;
				(*preselection external control operation*)
			SXacknNewMode: BOOL:=FALSE;
				(*acknoledge new mode*)
			SXclampOpen: BOOL:=FALSE;
				(*clamping jaw open *)
			SXhg1MoorActiv: BOOL:=FALSE;
				(*hg 1 mooring active*)
			SXhg2MoorActiv: BOOL:=FALSE;
				(*hg 2 mooring active*)
			SXhg1LockFastSpe: BOOL:=FALSE;
				(*hg1 lock fast speed *)
			SXhg2LockFastSpe: BOOL:=FALSE;
				(*hg2 lock fast speed *)
			SXpreLeaderOpera: BOOL:=FALSE;
				(*preselection leader operation *)
			SXleaderOperAct: BOOL:=FALSE;
				(*leader operation active*)
			SXactivateBeep: BOOL:=FALSE;
				(*activate beeper*)
			SXadSettings: BOOL:=FALSE;
				(*additional device settings activated*)
			SXsgAngleSenPres: BOOL:=FALSE;
				(*sg angle sensor is present*)
			SXsgAngleSenDiff: BOOL:=FALSE;
				(*sg angle sensor difference*)
			SRsgAngleAnalog: REAL:=0.0;
				(*sg angle analog sensor*)
			SRsgAngleIncr: REAL:=0.0;
				(*sg angle incremental sensor*)
			SRsgAngleAnaOffs: REAL:=0.0;
				(*sg angle offset in degree of analog sensor*)
			SRequPressure1: REAL:=0.0;
				(*equipment pressure 1*)
			SRequPressure2: REAL:=0.0;
				(*equipment pressure 1*)
			SXvibHamMeasAct: BOOL:=FALSE;
				(*vibrator/hammer measuring activated*)
			SRvibHamFrequ: REAL:=0.0;
				(*vibrator/hammer frequency*)
			SRvibAmpHamEner: REAL:=0.0;
				(*vibrator amplitude / hammer energy*)
			SRddSpeed: REAL:=0.0;
				(*drilling drive speed*)
			SRgrabType: REAL:=0.0;
				(*grab:type*)
			SRgrabMooring: REAL:=0.0;
				(*grab: mooring*)
			SRsgSuperstrAng: REAL:=0.00;
				(*sg superstructure angle [°] *)
			SXsuperstrAngle: BOOL:=FALSE;
				(*ad superstructure angle x/y*)
			SRsuperstrAngleX: REAL:=0.0;
				(*ad superstructure angle X*)
			SRsuperstrAngleY: REAL:=0.0;
				(*ad superstructure angle Y*)
			SRsuperstrAngAbs: REAL:=0.0;
				(*ad superstructure angle absolut*)
			SRgrabInclX: REAL:=0.0;
				(*grab: inclination X*)
			SRgrabInclY: REAL:=0.0;
				(*grab: inclination Y*)
			SRgrabInclAbs: REAL:=0.0;
				(*grab: inclination absolut*)
			SRleadInclX: REAL:=0.0;
				(*leader inclination X*)
			SRleadInclY: REAL:=0.0;
				(*leader inclination Y*)
			SRleadInclAbs: REAL:=0.0;
				(*leader inclination absolut*)
			SRleadTargetAbs: REAL:=0.0;
				(*leader target inclination absolut*)
			SRcaoPressure1: REAL:=0.0;
				(*casing oszillator pressure 1*)
			SRcaoPressure2: REAL:=0.0;
				(*casing oszillator pressure 2*)
			SXequPress2Activ: BOOL:=FALSE;
				(*dgc automatic active*)
			SXdgcAutomActive: BOOL:=FALSE;
				(*dgc automatic active*)
			SXcaoActive: BOOL:=FALSE;
				(*casing oszillator active*)
			SXvibClampWarn: BOOL:=FALSE;
				(*vibrator clamp warning*)
			SXddFastSpeed: BOOL:=FALSE;
				(*drilling drive fast speed*)
			SRgrabOpen: REAL:=0.0;
				(*grab: open position [%]*)
			SXgrabHoseActive: BOOL:=FALSE;
				(*grab: hose reel active*)
			SRdgcLiftHight: REAL:=0.0;
				(*dgc:actual lifting hight*)
			SRdgcBeats: REAL:=0.0;
				(*dgc: actual beats*)
			SRdgcCompaction: REAL:=0.0;
				(*dgc: actual compaction*)
			SXpreDraglineOp: BOOL:=FALSE;
				(*preselection dragline operation mode*)
			SXpreCoucarOper: BOOL:=FALSE;
				(*preselection counterweight carrier operation mode*)
			SXpreTranspOper: BOOL:=FALSE;
				(*preselection transportation operation mode*)
			SXtranspOperAct: BOOL:=FALSE;
				(*transportation operation mode active*)
			SXcoucarOperAct: BOOL:=FALSE;
				(*counterweight carrier operation mode active*)
			SXexDrPreJoy: BOOL:=FALSE;
				(*excenter drive with joy stick *)
			SXinclShutOff: BOOL:=FALSE;
				(*crane inclination shutt off*)
			SXinclShutOffPre: BOOL:=FALSE;
				(*crane inclination shutt off prewarning*)
			SXremAccessState: BOOL:=FALSE;
				(*actual remote access*)
			SXhg1Locked: BOOL:=FALSE;
				(*hg1 locked*)
			SXhg2Locked: BOOL:=FALSE;
				(*hg2 locked *)
			SXlgLocked: BOOL:=FALSE;
				(*luffing gear locked *)
			SXsgLocked: BOOL:=FALSE;
				(*slewing gear locked *)
			SXtgLocked: BOOL:=FALSE;
				(*travelling gear locked *)
		END_VAR

		TASK
			Task0(SINGLE:=FALSE, INTERVAL:=T#25ms, PRIORITY:=31)
		TASK
			Task1(SINGLE:=FALSE, INTERVAL:=T#200ms, PRIORITY:=31)
		TASK
			Task2(SINGLE:=TRUE, INTERVAL:=0, PRIORITY:=31)

		PROGRAM GPinitV020 WITH Task0: scProgramType
			(*this POU has to be the first one*)
		PROGRAM SPsafetyProgV010 WITH Task0: scProgramType
		PROGRAM GPgeneralV630 WITH Task0: scProgramType
		PROGRAM ADaddHydrV100 WITH Task0: scProgramType
		PROGRAM ADdynGrouComV050 WITH Task0: scProgramType
		PROGRAM ADlowerContrV030 WITH Task0: scProgramType
		PROGRAM ADhg1RopeMeaV030 WITH Task0: scProgramType
		PROGRAM ADhg2RopeMeaV030 WITH Task0: scProgramType
		PROGRAM ADlmlProgSynV170 WITH Task0: scProgramType
		PROGRAM ADmooringV070 WITH Task0: scProgramType
		PROGRAM ENprogV114 WITH Task0: scProgramType
		PROGRAM GPcanJoystV110 WITH Task0: scProgramType
		PROGRAM HG1progV180 WITH Task0: scProgramType
		PROGRAM HG1progV190 WITH Task0: scProgramType
		PROGRAM HG2progV180 WITH Task0: scProgramType
		PROGRAM HG2progV190 WITH Task0: scProgramType
		PROGRAM LGprogV090 WITH Task0: scProgramType
		PROGRAM LUDVprogV110 WITH Task0: scProgramType
		PROGRAM SGprogV150 WITH Task0: scProgramType
		PROGRAM LG2progV150 WITH Task0: scProgramType
		PROGRAM ADstabWinchV050 WITH Task0: scProgramType
		PROGRAM GPoperatHourV110 WITH Task0: scProgramType
		PROGRAM ADwinchSynchV060 WITH Task0: scProgramType
		PROGRAM ADgrabContV050 WITH Task0: scProgramType
		PROGRAM ADhydrGrapV170 WITH Task0: scProgramType
		PROGRAM ADhydrGrapV190 WITH Task0: scProgramType
		PROGRAM ADhydrGrapV210 WITH Task0: scProgramType
		PROGRAM ADvibratorV280 WITH Task0: scProgramType
		PROGRAM ADhammerV170 WITH Task0: scProgramType
		PROGRAM DMdrillDriveV170 WITH Task0: scProgramType
		PROGRAM GPhydrOilV010 WITH Task0: scProgramType
		PROGRAM ADserviceBoxV011 WITH Task0: scProgramType
		PROGRAM ADpassWinchV030 WITH Task0: scProgramType
		PROGRAM ADmagnetUnitV020 WITH Task0: scProgramType
		PROGRAM SCprogV550 WITH Task0: scProgramType
		PROGRAM GPmdeProgV130 WITH Task0: scProgramType
		PROGRAM ADremoteContV020 WITH Task0: scProgramType
		PROGRAM ADinterMasX1V060 WITH Task0: scProgramType
		PROGRAM ADinterMasX3V050 WITH Task0: scProgramType
		PROGRAM ADinterMasW1V050 WITH Task0: scProgramType
		PROGRAM ADinterMasD1V020 WITH Task0: scProgramType
		PROGRAM GPlidatV030 WITH Task0: scProgramType
		PROGRAM SCserviceV030 WITH Task0: scProgramType
		PROGRAM ADhangLeadV030 WITH Task0: scProgramType
		PROGRAM ADoutValveV010 WITH Task0: scProgramType
		PROGRAM GPgeoProgV010 WITH Task0: scProgramType
		PROGRAM TGprogV020 WITH Task0: scProgramType
		PROGRAM GPblackboxV020 WITH Task0: scProgramType
		PROGRAM ADcustomProgV030 WITH Task0: scProgramType
		PROGRAM ADlmlProgAsyV050 WITH Task1: scProgramType
		PROGRAM ADlmlProgIniV050 WITH Task2: scProgramType

	END_RESOURCE
END_CONFIGURATION

