%?class llspepar
%?version 00095

%?library llgensym
(llgensym.ps) run
%?library llbasic
(llbasic.ps) run
%?library llspesym
(llspesym.ps) run
%?library lllng
(lllng.ps) run

%?partdef spMachine001
%?fn	spMachine001
%?brief	Anzeige Gerät mit allen LMB Modes
%?bbox	0 0 479 479
/spMachine001 {
	/idTypeSuperstr exch def	%?brief 1=LR / 2=HS klein / 3=Wippzylinder statt A-Bock %?use INP %?type DINT %?dflt 1
	/idPartNumGreen exch def	%?brief 0=keine Farbe / 1 = GG / 2= HPT / 3= NDL / 4=Derrick %?use INP %?type DINT %?dflt 0
	/ixMainBoomRed exch def	%?brief draw main boom + red %?use INP %?type BOOL %?dflt false
	/ixMainBoom exch def	%?brief draw main boom %?use INP %?type BOOL %?dflt true
	/ixFixedJib exch def	%?brief draw fixed jib %?use INP %?type BOOL %?dflt false
	/ixWindJib exch def	%?brief draw fixed wind park jib %?use INP %?type BOOL %?dflt false
	/ixLuffingJib exch def	%?brief draw luffing jib %?use INP %?type BOOL %?dflt false
	/ixFlyJib exch def	%?brief draw fly jib %?use INP %?type BOOL %?dflt false
	/ixDerrick exch def	%?brief draw derrick %?use INP %?type BOOL %?dflt true
	/ixCouCar exch def	%?brief draw counterweight carrier %?use INP %?type BOOL %?dflt false
%?manual_beg
	/L_AngleMainBoom 0 def	%?brief berechneter Hauptauslegerwinkel %?use LOC %?type REAL %?dflt  0.00
	/LDline1X 0 def
	/LDline2X 0 def
	/LDline1Y 0 def
	/LDline2Y 0 def
	/LDline3X 0 def
	/LDline3Y 0 def

	% Hauptausleger festlegen
	ixMainBoom	{ /L_AngleMainBoom -60 store } if
	ixMainBoomRed	{ /L_AngleMainBoom -60 store } if
	ixLuffingJib { /L_AngleMainBoom -80 store } if
	ixFixedJib { /L_AngleMainBoom -64 store } if
	ixWindJib { /L_AngleMainBoom -57 store } if

	matrix currentmatrix_nlw 
	currentcolor 

	% Grundgerät
	320 80 translate 
	currentcolor 
	idPartNumGreen 1 eq { Green } if 
	idTypeSuperstr 1 le { ssMachinePart001 } if
	idTypeSuperstr 2 eq idTypeSuperstr 3 eq or {
		matrix currentmatrix_nlw 
		-5 -5 translate
		1.7 1.7 scale_nlw
		ssMachinePart018
		setmatrix_nlw
	} if
	setcolor
	% Position speichern für EZW Einscherung Grundgerät
	64 32 transform /LDline1Y exch store /LDline1X exch store
	68 32 transform /LDline2Y exch store /LDline2X exch store

	% Ballastwagen (kann auch ohne Derrick gezeichnet werden)
	ixCouCar true eq {	
		ssMachinePart010 
	} if

	% A-Bock 1
	idTypeSuperstr 3 ne {
		idTypeSuperstr 2 ne {
			matrix currentmatrix_nlw 
			26 23 translate 
			ixDerrick { -98 } { L_AngleMainBoom } ifelse
			rotate 
			ssMachinePart003 
			% EZW Einscherung A-Bock
			-25 52 moveto
			LDline1X LDline1Y itransform lineto
			-28 58 moveto
			LDline2X LDline2Y itransform lineto
			% Position speichern für Abspannung zum Hauptausleger
			-30 57 transform /LDline3Y exch store /LDline3X exch store
			setmatrix_nlw 
		} { 
			% A-Bock des HS klein wird nicht gedreht
			matrix currentmatrix_nlw 
			-5 -5 translate 
			1.7 1.7 scale_nlw
			ssMachinePart019
			% Position speichern für Abspannung zum Hauptausleger
			39 50 transform /LDline3Y exch store /LDline3X exch store
			setmatrix_nlw 
		} ifelse
	} { 
		ssMachinePart020 
	} ifelse
	% Derrick
	ixDerrick {	
		matrix currentmatrix_nlw 
		26 23 translate 
		-118 rotate 
		currentcolor 
		idPartNumGreen 4 eq { Green } if 
		ssMachinePart006 
		setcolor
		% Position speichern für Abspannung zum Hauptausleger
		-200 -2 transform /LDline3Y exch store /LDline3X exch store
		setmatrix_nlw 
		ixCouCar {	
			120 168 moveto
			114 23 lineto
			120 168 moveto
			125 23 lineto
		} {
			ssMachinePart009 
		} ifelse
	} if 

	% Hauptausleger
	ixMainBoom ixMainBoomRed not and ixFixedJib not and ixLuffingJib not and ixWindJib not and {	
		matrix currentmatrix_nlw 
		18 18 translate 
		L_AngleMainBoom rotate 
		currentcolor 
		idPartNumGreen 2 eq { Green } if 
		ssMachinePart002 
		setcolor
		% Abspannung Ausleger
		idTypeSuperstr 3 ne {
			-330 5 moveto
			LDline3X LDline3Y itransform lineto
		} if 
		setmatrix_nlw 
	} if 

	% Hauptausleger + Reduzierung
	ixMainBoomRed ixFixedJib not and ixLuffingJib not and ixWindJib not and {	
		matrix currentmatrix_nlw 
		18 18 translate 
		L_AngleMainBoom rotate 
		currentcolor 
		idPartNumGreen 2 eq { Green } if 
		ssMachinePart013 
		setcolor
		% Abspannung Ausleger
		idTypeSuperstr 3 ne {
			-330 5 moveto
			LDline3X LDline3Y itransform lineto
		} if 
		setmatrix_nlw 
	} if 

% Achtung Reihenfolge der Partaufrufe beachten wegen dem Setzen der lokalen Merker
	
	matrix currentmatrix_nlw 
	% Hauptausleger bei Wippspitze oder fixer Nadel
	ixFixedJib ixLuffingJib or {	
		18 18 translate 
		L_AngleMainBoom rotate 
		currentcolor 
		idPartNumGreen 2 eq { Green } if 
		ssMachinePart005 
		% Abspannung Ausleger
		idTypeSuperstr 3 ne {
			-240 5 moveto
			LDline3X LDline3Y itransform lineto
		} if 
		setcolor
	} if 
	% fixe Nadel
	ixFixedJib {	
		matrix currentmatrix_nlw 
		% Anfangspunkt Abspannung
		-200 7 transform /LDline3Y exch store /LDline3X exch store				% ACHTUNG hier werden die Merker vom Grundgerät wiederverwendet
		-252 -6 translate 
		30 rotate 
		currentcolor 
		idPartNumGreen 3 eq { Green } if 
		ssMachinePart004 
		setcolor
		% Abspannung Nadel
		1 26 moveto
		LDline3X LDline3Y itransform lineto
		setmatrix_nlw 
	} if 
	% Wippspitze
	ixLuffingJib {	
		matrix currentmatrix_nlw 
		matrix currentmatrix_nlw 
		-37 6 moveto -242 55 lineto stroke 		% Abspanung A-Bock 2 in derselben Matrix wie den Hauptausleger zeichnen
		-252 -5 translate
		ssMachinePart007
		setmatrix_nlw 
		% Anfangspunkt EZW Einscherung A-Bock 2 - 3
		-244 55 transform /LDline1Y exch store /LDline1X exch store				% ACHTUNG hier werden die Merker vom Grundgerät wiederverwendet
		-243 59 transform /LDline2Y exch store /LDline2X exch store				% ACHTUNG hier werden die Merker vom Grundgerät wiederverwendet
		-252 -6 translate 
		60 rotate 
		currentcolor 
		idPartNumGreen 3 eq { Green } if 
		ssMachinePart008 
		setcolor
		% EZW Einscherung A-Bock 2 - 3
		-5 61 moveto
		LDline1X LDline1Y itransform lineto
		-6 65 moveto
		LDline2X LDline2Y itransform lineto
		setmatrix_nlw 
	} if 
	setmatrix_nlw 

	% Hauptausleger bei Windspitze
	ixWindJib {	
		matrix currentmatrix_nlw 
		18 18 translate 
		L_AngleMainBoom rotate 
		currentcolor 
		idPartNumGreen 2 eq { Green } if 
		ssMachinePart002 
		setcolor
		% Abspannung Ausleger
		idTypeSuperstr 3 ne {
			-330 5 moveto
			LDline3X LDline3Y itransform lineto
		} if 
		% Anfangspunkt Abspannung
		-300 7 transform /LDline3Y exch store /LDline3X exch store				% ACHTUNG hier werden die Merker vom Grundgerät wiederverwendet
		-350 -6 translate 
		30 rotate 
		currentcolor 
		idPartNumGreen 3 eq { Green } if 
		ssMachinePart021 
		setcolor
		% Abspannung Nadel
		1 26 moveto
		LDline3X LDline3Y itransform lineto
		setmatrix_nlw 
	} if 

	setcolor 
	setmatrix_nlw 
%?manual_end
	
} def
%?partend

%?partdef spMachine002
%?fn	spMachine002
%?brief	Anzeige Gerät im Transportmodus
%?bbox	0 0 479 319
/spMachine002 {
	/ixShowLeader exch def	%?brief leader shown %?use INP %?type BOOL %?dflt false
	matrix currentmatrix_nlw 
	currentcolor 
	160 0 translate 
	0 rotate 
	1 1 scale 
	ssMachinePart014 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	160 0 translate 
	0 rotate 
	1 1 scale 
	ssMachinePart015 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	160 0 translate 
	0 rotate 
	1 1 scale 
	ssMachinePart016 
	setcolor 
	setmatrix_nlw 
	ixShowLeader true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		160 0 translate 
		0 rotate 
		1 1 scale 
		ssMachinePart017 
		setcolor 
		setmatrix_nlw 
	} if 120 5 moveto 
	471 5 lineto 
	stroke 
} def
%?partend

%?partdef spMachine003
%?fn	spMachine003
%?brief	Anzeige Gerät mit Hauptausleger
%?bbox	0 0 319 399
/spMachine003 {
	/idTypeSuperstr exch def	%?brief 1=LR / 2=HS klein / 3=Wippzylinder statt A-Bock %?use INP %?type DINT %?dflt 1
	/ixLeaderPos exch def	%?brief draw main boom position for leader %?use INP %?type BOOL %?dflt false
	/ixDummy1 exch def	%?brief dummy input 1 %?use INP %?type BOOL %?dflt true
%?manual_beg
% /ixLeaderPos true store
	/L_AngleMainBoom 0 def	%?brief berechneter Hauptauslegerwinkel %?use LOC %?type REAL %?dflt  0.00
	/L_ScaleMaBoLen 1 def	%?brief Skalierungsfaktor Hauptauslegerlänge %?use LOC %?type REAL %?dflt  1.00
	/LDline1X 0 def
	/LDline2X 0 def
	/LDline1Y 0 def
	/LDline2Y 0 def
	/LDline3X 0 def
	/LDline3Y 0 def

	% Hauptausleger festlegen (mit oder ohne Mäkler)
	ixLeaderPos	{
		/L_AngleMainBoom -67.5 store 
	} { 
		/L_AngleMainBoom -54.5 store
		/L_ScaleMaBoLen 1.06 store 
	} ifelse

	matrix currentmatrix_nlw 
	currentcolor 

	% Grundgerät
	240 0 translate 
	idTypeSuperstr 1 le { ssMachinePart001 } if
	idTypeSuperstr 2 eq idTypeSuperstr 3 eq or {
		matrix currentmatrix_nlw 
		-5 -5 translate
		1.7 1.7 scale_nlw
		ssMachinePart018
		setmatrix_nlw
	} if
	% EZW Einscherung Grundgerät
	64 32 transform /LDline1Y exch store /LDline1X exch store
	68 32 transform /LDline2Y exch store /LDline2X exch store

	% A-Bock 1
	idTypeSuperstr 3 ne {
		idTypeSuperstr 2 ne {
			matrix currentmatrix_nlw 
			26 23 translate 
			L_AngleMainBoom rotate 
			ssMachinePart003 
			% EZW Einscherung A-Bock
			-25 52 moveto
			LDline1X LDline1Y itransform lineto
			-28 58 moveto
			LDline2X LDline2Y itransform lineto
			% Abspannung zum Hauptausleger
			-30 57 transform /LDline3Y exch store /LDline3X exch store
			setmatrix_nlw 
		} { 
			% A-Bock des HS klein wird nicht gedreht
			matrix currentmatrix_nlw 
			-5 -5 translate 
			1.7 1.7 scale_nlw
			ssMachinePart019
			% Position speichern für Abspannung zum Hauptausleger
			39 50 transform /LDline3Y exch store /LDline3X exch store
			setmatrix_nlw 
		} ifelse
	} { 
		ssMachinePart020 
	} ifelse

	% Hauptausleger
	matrix currentmatrix_nlw 
	18 18 translate
	L_AngleMainBoom rotate 
	L_ScaleMaBoLen 1 scale
	ssMachinePart002 
	% Abspannung Ausleger
	idTypeSuperstr 3 ne {
		-330 5 moveto
		LDline3X LDline3Y itransform lineto
	} if 
	setmatrix_nlw 

	setcolor 
	setmatrix_nlw 
%?manual_end
	
} def
%?partend

%?partdef spEngine001
%?fn	spEngine001
%?brief	Aggregatüberwachung analog
%?bbox	0 0 959 479
/spEngine001 {
	/ixTimeFormat12h exch def	%?brief 12h AM/PM time format selected %?use INP %?type BOOL %?dflt false
	/idDateFormat exch def	%?brief actual selected date format %?use INP %?type DINT %?dflt 1
	/ixLidec1 exch def	%?brief EDC is lidec1 (compatibel) %?use INP %?type BOOL %?dflt false
	/ixDefError exch def	%?brief DEF error %?use INP %?type BOOL %?dflt false
	/ixDefWarn exch def	%?brief DEF warning %?use INP %?type BOOL %?dflt false
	/ixLubOilContLowError exch def	%?brief lub oil content low error %?use INP %?type BOOL %?dflt false
	/ixLubOilContLowWarn exch def	%?brief lub oil content loww warning %?use INP %?type BOOL %?dflt false
	/ixLubOilContHighError exch def	%?brief lub oil content high error %?use INP %?type BOOL %?dflt false
	/ixLubOilContHighWarn exch def	%?brief lub oil content high warning %?use INP %?type BOOL %?dflt false
	/ixLubOilContActive exch def	%?brief lub oil content active %?use INP %?type BOOL %?dflt false
	/ixAirFilterError exch def	%?brief air filter error %?use INP %?type BOOL %?dflt false
	/ixAirFilterWarn exch def	%?brief air filter warning %?use INP %?type BOOL %?dflt false
	/ixWaterInFuel exch def	%?brief water in fuel %?use INP %?type BOOL %?dflt false
	/ixFuelPressError exch def	%?brief fuel pressure error %?use INP %?type BOOL %?dflt false
	/ixFuelPressWarn exch def	%?brief fuel pressure warning %?use INP %?type BOOL %?dflt false
	/ixFuelTempError exch def	%?brief fuel temperature error %?use INP %?type BOOL %?dflt false
	/ixFuelTempWarn exch def	%?brief fuel temperature warning %?use INP %?type BOOL %?dflt false
	/ixEngHightLimit exch def	%?brief engine power limitation by hight %?use INP %?type BOOL %?dflt false
	/ixEngPowerLimit exch def	%?brief engine power limitation %?use INP %?type BOOL %?dflt false
	/ixChargeControl exch def	%?brief battery charge control %?use INP %?type BOOL %?dflt false
	/ixFuelContError exch def	%?brief fuel content error %?use INP %?type BOOL %?dflt false
	/ixFuelContWarn exch def	%?brief fuel content warning %?use INP %?type BOOL %?dflt false
	/ixEngineSpeedError exch def	%?brief Dieselmotordrehzahl Error %?use INP %?type BOOL %?dflt false
	/ixEngineSpeedWarn exch def	%?brief Dieselmotordrehzahl Warnung %?use INP %?type BOOL %?dflt false
	/ixLubOilPressError exch def	%?brief Schmieröldruck Error %?use INP %?type BOOL %?dflt false
	/ixLubOilPressWarn exch def	%?brief Schmieröldruck Warnung %?use INP %?type BOOL %?dflt false
	/ixHydrOilHeating exch def	%?brief Hydrauliköl Heizung ist aktiv %?use INP %?type BOOL %?dflt false
	/ixHydrOilTempError exch def	%?brief Hydrauliköltemperatur Error %?use INP %?type BOOL %?dflt false
	/ixHydrOilTempWarn exch def	%?brief Hydrauliköltemperatur Warnung %?use INP %?type BOOL %?dflt false
	/ixChargeAirTempError exch def	%?brief Ladelufttemperatur Error %?use INP %?type BOOL %?dflt false
	/ixChargeAirTempWarn exch def	%?brief Ladelufttemperatur Warnung %?use INP %?type BOOL %?dflt false
	/ixCoolWaterTempError exch def	%?brief Kühlwassertemperatur Error %?use INP %?type BOOL %?dflt false
	/ixCoolWaterTempWarn exch def	%?brief Kühlwassertemperatur Warnung %?use INP %?type BOOL %?dflt false
	/irOutdoorTemp exch def	%?brief outdoor temperature %?use INP %?type REAL %?dflt    0.00
	/irLubOilCont exch def	%?brief Schmierölfüllstand %?use INP %?type REAL %?dflt    0.00
	/irFuelCont exch def	%?brief Kraftstofftankinhalt %?use INP %?type REAL %?dflt    0.00
	/irDefCont exch def	%?brief Harnstofftankinhalt %?use INP %?type REAL %?dflt    0.00
	/irBatteryVoltage exch def	%?brief Batteriespannung %?use INP %?type REAL %?dflt    0.00
	/irLubOilPress exch def	%?brief Schmieröldruck %?use INP %?type REAL %?dflt    0.00
	/irChargeAirPress exch def	%?brief Ladeluftdruck %?use INP %?type REAL %?dflt    0.00
	/irChargeAirTemp exch def	%?brief Ladelufttemperatur %?use INP %?type REAL %?dflt    0.00
	/irHydrOilTemp exch def	%?brief Hydrauliköltemperatur %?use INP %?type REAL %?dflt    0.00
	/irCoolWaterTemp exch def	%?brief Kühlwassertemperatur %?use INP %?type REAL %?dflt    0.00
	/irActualTorque exch def	%?brief Dieselmotor aktuelles Drehmoment %?use INP %?type REAL %?dflt    0.00
	/irEngineSpeed exch def	%?brief Dieselmotordrehzahl %?use INP %?type REAL %?dflt    0.00
	/LRimpChargeAirPress 0 def	%?brief imperial unit charge air pressure %?use LOC %?type REAL %?dflt    0.00
	/LRimpLubOilPress 0 def	%?brief imperial unit lub oil pressure %?use LOC %?type REAL %?dflt    0.00
	/LRimpChargeAirTemp 0 def	%?brief imperial unit charge air temperature %?use LOC %?type REAL %?dflt    0.00
	/LRimpCoolWatTemp 0 def	%?brief imperial unit cooling water temperature %?use LOC %?type REAL %?dflt    0.00
	/LRimpHydrOilTemp 0 def	%?brief imperial unit hydraulic oil temperature %?use LOC %?type REAL %?dflt    0.00
	matrix currentmatrix_nlw 
	currentcolor 
	0 0 translate 
	0 rotate 
	1 1 scale 
	irHydrOilTemp 
	calc_F 
	/LRimpHydrOilTemp exch store 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	0 0 translate 
	0 rotate 
	1 1 scale 
	irCoolWaterTemp 
	calc_F 
	/LRimpCoolWatTemp exch store 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	0 0 translate 
	0 rotate 
	1 1 scale 
	irChargeAirTemp 
	calc_F 
	/LRimpChargeAirTemp exch store 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	0 0 translate 
	0 rotate 
	1 1 scale 
	irLubOilPress 
	calc_psi 
	/LRimpLubOilPress exch store 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	0 0 translate 
	0 rotate 
	1 1 scale 
	irChargeAirPress 
	calc_psi 
	/LRimpChargeAirPress exch store 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	285 270 translate 
	0 rotate 
	1 1 scale 
	ixTimeFormat12h true false 
	FSbigFatFont 
	baClock005 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	130 330 translate 
	0 rotate 
	0.87 0.87 scale 
	ixEngineSpeedError ixEngineSpeedWarn false false (gsEngine001) 
	baSwitchSymbolColor004 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	158 248 translate 
	0 rotate 
	0.87 0.87 scale 
	gsEngine021 
	setcolor 
	setmatrix_nlw 
	%?term_beg
	
	ixHydrOilTempError ixHydrOilTempWarn or 
	ixHydrOilHeating not or 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		265 355 translate 
		0 rotate 
		0.87 0.87 scale 
		ixHydrOilTempError ixHydrOilTempWarn false false (gsHydraulic005) 
		baSwitchSymbolColor004 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	ixHydrOilTempError not 
	ixHydrOilTempWarn not and 
	ixHydrOilHeating and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 260 345 translate 
		0 rotate 
		1 1 scale 
		gsHydraulic024 
		setcolor 
		setmatrix_nlw 
	} if 
	matrix currentmatrix_nlw 
	currentcolor 
	442 175 translate 
	0 rotate 
	1 1 scale 
	ixLubOilPressError ixLubOilPressWarn false false (gsEngine006) 
	baSwitchSymbolColor004 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	445 355 translate 
	0 rotate 
	0.87 0.87 scale 
	ixCoolWaterTempError ixCoolWaterTempWarn false false (gsEngine003) 
	baSwitchSymbolColor004 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	265 110 translate 
	0 rotate 
	0.87 0.87 scale 
	ixChargeControl false false false (gsEngine004) 
	baSwitchSymbolColor004 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	625 355 translate 
	0 rotate 
	0.87 0.87 scale 
	ixChargeAirTempError ixChargeAirTempWarn false false (gsEngine005) 
	baSwitchSymbolColor004 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	625 105 translate 
	0 rotate 
	0.87 0.87 scale 
	gsEngine008 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	190 295 translate 
	0 rotate 
	1 1 scale 
	irEngineSpeed 110 () 700 2200 700 2100 6 6 4 18 false 5.60 3 
	FSmidFont 0 0 225 -145 150 180 false 0 
	baRoundDisplay003 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	187 318 translate 
	0 rotate 
	1 1 scale 
	irActualTorque 60 () 0 100 0 100 6 3 2 16 false 5 2 0 0 0 225 90 0 100 false 0 
	baRoundDisplay003 
	setcolor 
	setmatrix_nlw 
	MXchangeUnitTemp true ne {	
		matrix currentmatrix_nlw 
		currentcolor 
		299 390 translate 
		0 rotate 
		1 1 scale 
		irHydrOilTemp 40 (Â°C) -40 100 -20 85 6 2 4 16 false 7 2 0 0 0 225 -270 55 80 false 0 
		baRoundDisplay003 
		setcolor 
		setmatrix_nlw 
	} if 
	MXchangeUnitTemp true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		300 390 translate 
		0 rotate 
		1 1 scale 
		LRimpHydrOilTemp 40 (Â°F) -40 200 -20 180 6 2 4 16 false 6 2 0 0 0 225 -270 55 80 false 0 
		baRoundDisplay003 
		setcolor 
		setmatrix_nlw 
	} if 
	MXchangeUnitPress true ne {	
		matrix currentmatrix_nlw 
		currentcolor 
		483 212 translate 
		0 rotate 
		1 1 scale 
		irLubOilPress 40 (bar) 0 10 0 10 6 0 0 16 false 5 2 0 0 0 225 -270 60 80 false 0 
		baRoundDisplay003 
		setcolor 
		setmatrix_nlw 
	} if 
	MXchangeUnitPress true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		483 212 translate 
		0 rotate 
		1 1 scale 
		LRimpLubOilPress 40 (psi) 0 150 0 150 6 0 0 16 false 4 2 0 0 0 225 -270 60 80 false 0 
		baRoundDisplay003 
		setcolor 
		setmatrix_nlw 
	} if 
	ixLidec1 ixLubOilContActive and {	
		matrix currentmatrix_nlw 
		currentcolor 
		480 155 translate 
		0 rotate 
		1 1 scale 
		irLubOilCont 65 () -25 125 0 100 6 4 4 16 false 6 1 0 0 0 225 90 -1 100 false 0 
		baRoundDisplay003 
		setcolor 
		setmatrix_nlw 
	} if 
	MXchangeUnitTemp true ne {	
		matrix currentmatrix_nlw 
		currentcolor 
		480 390 translate 
		0 rotate 
		1 1 scale 
		irCoolWaterTemp 40 (Â°C) 60 120 60 105 6 2 4 16 false 6 2 0 0 0 225 -270 55 80 false 0 
		baRoundDisplay003 
		setcolor 
		setmatrix_nlw 
	} if 
	MXchangeUnitTemp true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		480 390 translate 
		0 rotate 
		1 1 scale 
		LRimpCoolWatTemp 40 (Â°F) 140 240 140 220 6 2 4 16 false 5 2 0 0 0 225 -270 55 80 false 0 
		baRoundDisplay003 
		setcolor 
		setmatrix_nlw 
	} if 
	matrix currentmatrix_nlw 
	currentcolor 
	299 140 translate 
	0 rotate 
	1 1 scale 
	irBatteryVoltage 40 (Volt) 15 36 21 30 6 3 4 16 false 7 2 0 2 0 225 -270 60 80 false 0 
	baRoundDisplay003 
	setcolor 
	setmatrix_nlw 
	MXchangeUnitTemp true ne {	
		matrix currentmatrix_nlw 
		currentcolor 
		660 390 translate 
		0 rotate 
		1 1 scale 
		irChargeAirTemp 40 (Â°C) 0 100 0 75 6 0 4 16 false 5 2 0 0 0 225 -270 55 80 false 0 
		baRoundDisplay003 
		setcolor 
		setmatrix_nlw 
	} if 
	MXchangeUnitTemp true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		660 390 translate 
		0 rotate 
		1 1 scale 
		LRimpChargeAirTemp 40 (Â°F) 30 210 30 170 6 0 4 16 false 6 2 0 0 0 225 -270 55 80 false 0 
		baRoundDisplay003 
		setcolor 
		setmatrix_nlw 
	} if 
	MXchangeUnitPress true ne {	
		matrix currentmatrix_nlw 
		currentcolor 
		660 140 translate 
		0 rotate 
		1 1 scale 
		irChargeAirPress 40 (bar) 0 5 0 5 6 0 0 16 false 5 2 0 0 0 225 -270 0 80 false 0 
		baRoundDisplay003 
		setcolor 
		setmatrix_nlw 
	} if 
	MXchangeUnitPress true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		660 140 translate 
		0 rotate 
		1 1 scale 
		LRimpChargeAirPress 40 (psi) 0 75 0 75 6 0 0 16 false 5 2 0 0 0 225 -270 0 80 false 0 
		baRoundDisplay003 
		setcolor 
		setmatrix_nlw 
	} if 
	ixLidec1 true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		751 259 translate 
		0 rotate 
		0.72 0.72 scale 
		ixDefError ixDefWarn false false (gsAgn005) 
		baSwitchSymbolColor004 
		setcolor 
		setmatrix_nlw 
	} if 
	ixLidec1 true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		780 318 translate 
		0 rotate 
		1 1 scale 
		irDefCont 60 () 0 100 10 20 3 4 6 16 false 5 2 0 0 0 225 90 0 100 false 0 
		baRoundDisplay003 
		setcolor 
		setmatrix_nlw 
	} if 
	matrix currentmatrix_nlw 
	currentcolor 
	770 295 translate 
	0 rotate 
	1 1 scale 
	irFuelCont 110 () 0 100 5 15 3 4 6 18 false 5 2 5 7 0 -45 145 150 180 false 0 
	baRoundDisplay003 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	770 330 translate 
	0 rotate 
	0.87 0.87 scale 
	ixFuelContError ixFuelContWarn false false (gsEngine002) 
	baSwitchSymbolColor004 
	setcolor 
	setmatrix_nlw 
	%?term_beg
	
	ixLubOilContHighError not 
	ixLubOilContHighWarn not and 
	ixLidec1 and 
	ixLubOilContActive and 
	ixLubOilContLowError ixLubOilContLowWarn or or 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		447 79 translate 
		0 rotate 
		0.87 0.87 scale 
		ixLubOilContLowError ixLubOilContLowWarn false false (gsEngine037) 
		baSwitchSymbolColor004 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	ixLubOilContHighError ixLubOilContHighWarn or 
	ixLubOilContLowError not and 
	ixLubOilContLowWarn not and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		447 79 translate 
		0 rotate 
		0.87 0.87 scale 
		ixLubOilContHighError ixLubOilContHighWarn false false (gsEngine038) 
		baSwitchSymbolColor004 
		setcolor 
		setmatrix_nlw 
	} if 
	ixAirFilterError ixAirFilterWarn or {	
		matrix currentmatrix_nlw 
		currentcolor 
		720 0 translate 
		0 rotate 
		1 1 scale 
		ixAirFilterError ixAirFilterWarn false false (gsEngine013) 
		baSwitchSymbolColor004 
		setcolor 
		setmatrix_nlw 
	} if 
	ixFuelPressError ixFuelPressWarn or {	
		matrix currentmatrix_nlw 
		currentcolor 
		800 80 translate 
		0 rotate 
		1 1 scale 
		ixFuelPressError ixFuelPressWarn false false (gsEngine054) 
		baSwitchSymbolColor004 
		setcolor 
		setmatrix_nlw 
	} if 
	ixWaterInFuel true eq {	
		ixWaterInFuel true eq {	
			true setflash 
		} if 
		matrix currentmatrix_nlw 
		currentcolor 
		Red 880 0 translate 
		0 rotate 
		1 1 scale 
		gsEngine015 
		setcolor 
		setmatrix_nlw 
		false setflash 
	} if 
	ixFuelTempError ixFuelTempWarn or {	
		matrix currentmatrix_nlw 
		currentcolor 
		880 80 translate 
		0 rotate 
		1 1 scale 
		ixFuelTempError ixFuelTempWarn false false (gsEngine026) 
		baSwitchSymbolColor004 
		setcolor 
		setmatrix_nlw 
	} if 
	matrix currentmatrix_nlw 
	currentcolor 
	140 320 translate 
	0 rotate 
	0.70 0.70 scale 
	irEngineSpeed 4 () (rpm) false false false false 
	FSfatFont 0 
	baValueText001 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	190 200 translate 
	0 rotate 
	0.60 0.60 scale 
	irActualTorque 3 () (%) false false false false 
	FSfatFont 0 
	baValueText001 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	301 345 translate 
	0 rotate 
	0.60 0.60 scale 
	irHydrOilTemp 3 40 false false 0 
	FSfatFont true 
	baValue005 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	485 164 translate 
	0 rotate 
	0.60 0.60 scale 
	irLubOilPress 2.10 30 false false 0 
	FSfatFont true 
	baValue005 
	setcolor 
	setmatrix_nlw 
	ixLidec1 ixLubOilContActive and {	
		matrix currentmatrix_nlw 
		currentcolor 
		487 37 translate 
		0 rotate 
		0.60 0.60 scale 
		irLubOilCont 3 () (%) false false false false 
		FSfatFont 0 
		baValueText001 
		setcolor 
		setmatrix_nlw 
	} if 
	matrix currentmatrix_nlw 
	currentcolor 
	481 345 translate 
	0 rotate 
	0.60 0.60 scale 
	irCoolWaterTemp 3 40 false false 0 
	FSfatFont true 
	baValue005 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	304 90 translate 
	0 rotate 
	0.60 0.60 scale 
	irBatteryVoltage 2 () (Volt) false false false false 
	FSfatFont 0 
	baValueText001 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	660 345 translate 
	0 rotate 
	0.60 0.60 scale 
	irChargeAirTemp 2 40 false false 0 
	FSfatFont true 
	baValue005 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	660 90 translate 
	0 rotate 
	0.60 0.60 scale 
	irChargeAirPress 1.10 30 false false 0 
	FSfatFont true 
	baValue005 
	setcolor 
	setmatrix_nlw 
	ixLidec1 true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		790 200 translate 
		0 rotate 
		0.60 0.60 scale 
		irDefCont 3 () (%) false false false false 
		FSfatFont 0 
		baValueText001 
		setcolor 
		setmatrix_nlw 
	} if 
	matrix currentmatrix_nlw 
	currentcolor 
	850 320 translate 
	0 rotate 
	0.70 0.70 scale 
	irFuelCont 3 () (%) false false false false 
	FSfatFont 0 
	baValueText001 
	setcolor 
	setmatrix_nlw 
	ixEngHightLimit ixEngPowerLimit or {	
		matrix currentmatrix_nlw 
		currentcolor 
		80 80 translate 
		0 rotate 
		1 1 scale 
		false 
		ixEngPowerLimit false false (gsEngine058) 
		baSwitchSymbolColor004 
		setcolor 
		setmatrix_nlw 
	} if 
	ixLidec1 true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		610 230 translate 
		0 rotate 
		0.87 0.87 scale 
		gsGeneral066 
		setcolor 
		setmatrix_nlw 
	} if 
	ixLidec1 true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		628 285 translate 
		0 rotate 
		1 1 scale 
		irOutdoorTemp 2 false false 
		FSfatFont 1 
		baValueTemp001 
		setcolor 
		setmatrix_nlw 
	} if 
	matrix currentmatrix_nlw 
	currentcolor 
	339 247 translate 
	0 rotate 
	1 1 scale 
	idDateFormat FSstdFont 
	baDate003 
	setcolor 
	setmatrix_nlw 
	ixLidec1 ixLubOilContActive and {	
		matrix currentmatrix_nlw 
		currentcolor 
		420 55 translate 
		0 rotate 
		1 1 scale 
		(MIN) 
		FSminiFont 0 
		baText001 
		setcolor 
		setmatrix_nlw 
	} if 
	ixLidec1 ixLubOilContActive and {	
		matrix currentmatrix_nlw 
		currentcolor 
		540 55 translate 
		0 rotate 
		1 1 scale 
		(MAX) 
		FSminiFont 0 
		baText001 
		setcolor 
		setmatrix_nlw 
	} if 
} def
%?partend

%?partdef spEngine002
%?fn	spEngine002
%?brief	Abgasnachbehandlung
%?bbox	0 0 239 79
/spEngine002 {
	/ixDefError exch def	%?brief DEF error %?use INP %?type BOOL %?dflt false
	/ixDefWarn exch def	%?brief DEF warning %?use INP %?type BOOL %?dflt false
	/ixMilError exch def	%?brief MIL error %?use INP %?type BOOL %?dflt false
	/ixMilWarn exch def	%?brief MIL warning %?use INP %?type BOOL %?dflt false
	/ixDpfError exch def	%?brief diesel particle filter error %?use INP %?type BOOL %?dflt false
	/ixDpfWarn exch def	%?brief diesel particle filter warning %?use INP %?type BOOL %?dflt false
	/ixDpfActive exch def	%?brief diesel particle filter active %?use INP %?type BOOL %?dflt false
	/ixDpfRegDisabled exch def	%?brief diesel particle filter regeneration disabled %?use INP %?type BOOL %?dflt false
	/irDpfTime exch def	%?brief diesel particle filter left time %?use INP %?type REAL %?dflt    0.00
	ixMilError ixMilWarn or {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		ixMilError ixMilWarn false false (gsAgn004) 
		baSwitchSymbolColor004 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	ixDpfError ixDpfWarn or 
	ixDpfActive not and 
	ixDpfRegDisabled not and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		80 0 translate 
		0 rotate 
		1 1 scale 
		ixDpfError ixDpfWarn false false (gsAgn002) 
		baSwitchSymbolColor004 
		setcolor 
		setmatrix_nlw 
	} if 
	ixDpfActive ixDpfRegDisabled not and {	
		matrix currentmatrix_nlw 
		currentcolor 
		80 0 translate 
		0 rotate 
		1 1 scale 
		gsAgn001 
		setcolor 
		setmatrix_nlw 
	} if 
	ixDpfActive true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		140 15 translate 
		0 rotate 
		1 1 scale 
		irDpfTime 3 () (min) false false false false 
		FSstdFont 5 
		baValueText001 
		setcolor 
		setmatrix_nlw 
	} if 
	ixDpfRegDisabled true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		80 0 translate 
		0 rotate 
		1 1 scale 
		ixDpfError ixDpfWarn false false (gsAgn003) 
		baSwitchSymbolColor004 
		setcolor 
		setmatrix_nlw 
	} if 
	ixDefError ixDefWarn or {	
		matrix currentmatrix_nlw 
		currentcolor 
		160 0 translate 
		0 rotate 
		1 1 scale 
		ixDefError ixDefWarn false false (gsAgn005) 
		baSwitchSymbolColor004 
		setcolor 
		setmatrix_nlw 
	} if 
} def
%?partend

%?partdef spEngine003
%?fn	spEngine003
%?brief	Aggregatüberwachung klein
%?bbox	0 0 239 239
/spEngine003 {
	/ixEcoModeActive exch def	%?brief ECOMode ist aktiviert %?use INP %?type BOOL %?dflt false
	/irEngineTorque exch def	%?brief engine torque %?use INP %?type REAL %?dflt    0.00
	/ixHydrOilHeating exch def	%?brief Hydraulikölheizung ist aktiv %?use INP %?type BOOL %?dflt false
	/ixPostHeatActive exch def	%?brief pre heating is active after engine started %?use INP %?type BOOL %?dflt false
	/ixPreHeatStart exch def	%?brief pre heating ready for engine start %?use INP %?type BOOL %?dflt false
	/ixPreHeatActive exch def	%?brief pre heating is active %?use INP %?type BOOL %?dflt false
	/ixChargeControl exch def	%?brief battery charge control %?use INP %?type BOOL %?dflt false
	/ixFuelContError exch def	%?brief fuel content error %?use INP %?type BOOL %?dflt false
	/ixFuelContWarn exch def	%?brief fuel content warning %?use INP %?type BOOL %?dflt false
	/irFuelContent exch def	%?brief fuel content %?use INP %?type REAL %?dflt    0.00
	/ixEngSpeedError exch def	%?brief engine speed error %?use INP %?type BOOL %?dflt false
	/ixEngSpeedWarn exch def	%?brief engine speed warning %?use INP %?type BOOL %?dflt false
	/irEngineSpeed exch def	%?brief engine speed %?use INP %?type REAL %?dflt    0.00
	matrix currentmatrix_nlw 
	currentcolor 
	0 80 translate 
	0 rotate 
	1 1 scale 
	irFuelContent (%) 0 100 false true false true 
	ixFuelContWarn ixFuelContError 110 110 15 5 5 15 120 true false 0 false 0 0 false 1 
	baBar006 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	80 80 translate 
	0 rotate 
	1 1 scale 
	irEngineSpeed (rpm) 700 2200 false true false false 
	ixEngSpeedWarn ixEngSpeedError 2100 2200 0 0 5 15 120 true false 0 false 0 0 false 1 
	baBar006 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	160 80 translate 
	0 rotate 
	1 1 scale 
	irEngineTorque (% Nm) 0 100 false false false false false false 100 100 0 0 5 15 120 true false 0 false 0 0 false 1 
	baBar006 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	0 0 translate 
	0 rotate 
	1 1 scale 
	ixFuelContError ixFuelContWarn false false (gsEngine052) 
	baSwitchSymbolColor004 
	setcolor 
	setmatrix_nlw 
	ixChargeControl true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		Red 80 0 translate 
		0 rotate 
		1 1 scale 
		gsEngine004 
		setcolor 
		setmatrix_nlw 
	} if 
	ixChargeControl not 
	ixHydrOilHeating not and {	
		matrix currentmatrix_nlw 
		currentcolor 
		88 10 translate 
		0 rotate 
		0.80 0.80 scale 
		ixEngSpeedError ixEngSpeedWarn false false (gsEngine001) 
		baSwitchSymbolColor004 
		setcolor 
		setmatrix_nlw 
	} if 
	ixPreHeatActive true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		Yellow 160 0 translate 
		0 rotate 
		1 1 scale 
		gsEngine009 
		setcolor 
		setmatrix_nlw 
	} if 
	ixPreHeatStart true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 160 0 translate 
		0 rotate 
		1 1 scale 
		gsEngine023 
		setcolor 
		setmatrix_nlw 
	} if 
	ixPostHeatActive true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		160 0 translate 
		0 rotate 
		1 1 scale 
		gsEngine009 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	ixPreHeatActive not 
	ixPreHeatStart not and 
	ixPostHeatActive not and 
	ixEcoModeActive not and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		160 0 translate 
		0 rotate 
		1 1 scale 
		gsEngine021 
		setcolor 
		setmatrix_nlw 
	} if 
	ixHydrOilHeating ixChargeControl not and {	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 80 0 translate 
		0 rotate 
		1 1 scale 
		gsHydraulic024 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	ixEcoModeActive ixPreHeatActive not and 
	ixPreHeatStart not and 
	ixPostHeatActive not and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		170 10 translate 
		0 rotate 
		0.75 0.75 scale 
		ssGeneral065 
		setcolor 
		setmatrix_nlw 
	} if 
} def
%?partend

%?partdef spEngine004
%?fn	spEngine004
%?brief	Dieselverbrauchsanzeige in l/h digital
%?bbox	0 0 159 79
/spEngine004 {
	/irFuelConsAverage exch def	%?brief average fuel consuption since reset %?use INP %?type REAL %?dflt    0.00
	/irFuelConsActual exch def	%?brief actual fuel consumption %?use INP %?type REAL %?dflt    0.00
	matrix currentmatrix_nlw 
	currentcolor 
	0 0 translate 
	0 rotate 
	1 1 scale 
	gsEngine049 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	120 50 translate 
	0 rotate 
	1 1 scale 
	irFuelConsActual 3 false false 
	FSmidFont 1 
	baValueFlow002 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	125 20 translate 
	0 rotate 
	1 1 scale 
	irFuelConsAverage 3 false false 
	FSstdFont 1 
	baValueFlow002 
	setcolor 
	setmatrix_nlw 
} def
%?partend

%?partdef spEngine005
%?fn	spEngine005
%?brief	Dieselverbrauchsanzeige absolut in liter
%?bbox	0 0 159 79
/spEngine005 {
	/irFuelConsAbsolut exch def	%?brief absolut fuel consumption %?use INP %?type REAL %?dflt    0.00
	/irFuelConsReset exch def	%?brief fuel consuption since reset %?use INP %?type REAL %?dflt    0.00
	matrix currentmatrix_nlw 
	currentcolor 
	135 20 translate 
	0 rotate 
	1 1 scale 
	irFuelConsReset 6 false false 
	FSstdFont 1 
	baValueVolume001 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	0 0 translate 
	0 rotate 
	1 1 scale 
	gsEngine049 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	135 50 translate 
	0 rotate 
	1 1 scale 
	irFuelConsAbsolut 6 false false 
	FSmidFont 1 
	baValueVolume001 
	setcolor 
	setmatrix_nlw 
} def
%?partend

%?partdef spWinch001
%?fn	spWinch001
%?brief	Seillängenmessung
%?bbox	0 0 239 79
/spWinch001 {
	/ixWinchLower exch def	%?brief Winde dreht senken %?use INP %?type BOOL %?dflt false
	/ixWinchLift exch def	%?brief Winde dreht heben %?use INP %?type BOOL %?dflt false
	/idWinchNr exch def	%?brief Windenidentifikation %?use INP %?type REAL %?dflt    0.00
	/irRopeLength exch def	%?brief Seillänge %?use INP %?type REAL %?dflt    0.00
	matrix currentmatrix_nlw 
	currentcolor 
	145 10 translate 
	0 rotate 
	1.33 1.32 scale 
	irRopeLength 3.20 false false 
	FSbigFont 1 
	baValueDist001 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	35 21 translate 
	0 rotate 
	1 1 scale 
	idWinchNr 1 false false 
	FSfatFont 
	baValue004 
	setcolor 
	setmatrix_nlw 
	ixWinchLift true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		125 20 translate 
		0 rotate 
		1 1 scale 
		ssGeneral015 
		setcolor 
		setmatrix_nlw 
	} if 
	ixWinchLower true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		205 100 translate 
		180 rotate 
		1 1 scale 
		ssGeneral015 
		setcolor 
		setmatrix_nlw 
	} if 
	matrix currentmatrix_nlw 
	currentcolor 
	-5 10 translate 
	0 rotate 
	1 1 scale 
	gsWinch001 
	setcolor 
	setmatrix_nlw 
} def
%?partend

%?partdef spWinch002
%?fn	spWinch002
%?brief	Seillängenmessung mit Einscherungsanzeige
%?bbox	0 0 239 79
/spWinch002 {
	/ixWinchLower exch def	%?brief Winde dreht senken %?use INP %?type BOOL %?dflt false
	/ixWinchLift exch def	%?brief Winde dreht heben %?use INP %?type BOOL %?dflt false
	/idWinchNr exch def	%?brief Windenidentifikation %?use INP %?type REAL %?dflt    0.00
	/idReeving exch def	%?brief Einscherung %?use INP %?type REAL %?dflt    0.00
	/irRopeLength exch def	%?brief Seillänge %?use INP %?type REAL %?dflt    0.00
	matrix currentmatrix_nlw 
	currentcolor 
	145 10 translate 
	0 rotate 
	1 1 scale 
	irRopeLength 3.20 false false 
	FSbigFatFont 1 
	baValueDist001 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	0 0 translate 
	0 rotate 
	1 1 scale 
	ssGeneral014 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	87 61 translate 
	0 rotate 
	1 1 scale 
	idReeving 2 false false 
	FSstdFont 
	baValue004 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	35 60 translate 
	0 rotate 
	1 1 scale 
	idWinchNr 1 false false 
	FSfatFont 
	baValue004 
	setcolor 
	setmatrix_nlw 
	ixWinchLift true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		125 20 translate 
		0 rotate 
		1 1 scale 
		ssGeneral015 
		setcolor 
		setmatrix_nlw 
	} if 
	ixWinchLower true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		205 100 translate 
		180 rotate 
		1 1 scale 
		ssGeneral015 
		setcolor 
		setmatrix_nlw 
	} if 
} def
%?partend

%?partdef spWinch003
%?fn	spWinch003
%?brief	Seillängenmessung mit Seilgeschwindigkeit
%?bbox	0 0 239 79
/spWinch003 {
	/ixWinchLower exch def	%?brief Winde dreht senken %?use INP %?type BOOL %?dflt false
	/ixWinchLift exch def	%?brief Winde dreht heben %?use INP %?type BOOL %?dflt false
	/idWinchNr exch def	%?brief Windenidentifikation %?use INP %?type REAL %?dflt    0.00
	/irRopeSpeed exch def	%?brief Seilgeschwindigkeit %?use INP %?type REAL %?dflt    0.00
	/irRopeLength exch def	%?brief Seillänge %?use INP %?type REAL %?dflt    0.00
	matrix currentmatrix_nlw 
	currentcolor 
	145 10 translate 
	0 rotate 
	1 1 scale 
	irRopeLength 3.20 false false 
	FSbigFatFont 1 
	baValueDist001 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	35 21 translate 
	0 rotate 
	1 1 scale 
	idWinchNr 1 false false 
	FSfatFont 
	baValue004 
	setcolor 
	setmatrix_nlw 
	ixWinchLift true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		45 20 translate 
		0 rotate 
		1 1 scale 
		ssGeneral015 
		setcolor 
		setmatrix_nlw 
	} if 
	ixWinchLower true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		125 100 translate 
		180 rotate 
		1 1 scale 
		ssGeneral015 
		setcolor 
		setmatrix_nlw 
	} if 
	matrix currentmatrix_nlw 
	currentcolor 
	-5 10 translate 
	0 rotate 
	1 1 scale 
	gsWinch001 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	150 53 translate 
	0 rotate 
	1 1 scale 
	irRopeSpeed 3.20 false false 
	FSmidFont 1 
	baValueSpeed003 
	setcolor 
	setmatrix_nlw 
} def
%?partend

%?partdef spHour001
%?fn	spHour001
%?brief	Betriebsstundenanzeige
%?bbox	0 0 159 79
/spHour001 {
	/isSymbolName exch def	%?brief name of the symbol-part which has to be displayed %?use INP %?type STRI %?dflt gsGeneral001
	/irHourRel exch def	%?brief houres since last Reset %?use INP %?type REAL %?dflt    0.00
	/irHourAbs exch def	%?brief houres since first Start %?use INP %?type REAL %?dflt    0.00
	/ixRunning exch def	%?brief hourmeter is running %?use INP %?type BOOL %?dflt false
	matrix currentmatrix_nlw 
	currentcolor 
	140 50 translate 
	0 rotate 
	1 1 scale 
	irHourAbs 5 () (h) false false false false 
	FSmidFont 9 
	baValueText001 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	140 20 translate 
	0 rotate 
	1 1 scale 
	irHourRel 5 () (h) false false false false 
	FSstdFont 9 
	baValueText001 
	setcolor 
	setmatrix_nlw 
%?manual_beg
	0 0 moveto 
	isSymbolName cvx exec 
	ixRunning {
		matrix currentmatrix_nlw 
		currentcolor 
		85 25 translate 
		1 1 scale 
		3 setlinewidth_nlw
		matrix currentmatrix_nlw 
		MRrotate neg rotate
		8 0 moveto
		setmatrix_nlw 
		0 0 8 MRrotate neg dup 60 sub arc 
		1 setlinewidth
		setcolor 
		setmatrix_nlw 
	} if
%?manual_end
	
} def
%?partend

%?partdef spHour002
%?fn	spHour002
%?brief	Betriebsstundenanzeige mit zwei verschiedenen Symbolen
%?bbox	0 0 159 79
/spHour002 {
	/isSymbolName1 exch def	%?brief name of the symbol-part which has to be displayed %?use INP %?type STRI %?dflt gsGeneral001
	/isSymbolName2 exch def	%?brief name of the symbol-part which has to be displayed %?use INP %?type STRI %?dflt gsGeneral001
	/ixSymbol2Active exch def	%?brief symbol 2 is active %?use INP %?type BOOL %?dflt false
	/irHourRel exch def	%?brief houres since last Reset %?use INP %?type REAL %?dflt    0.00
	/irHourAbs exch def	%?brief houres since first Start %?use INP %?type REAL %?dflt    0.00
	/ixRunning exch def	%?brief hourmeter is running %?use INP %?type BOOL %?dflt false
	matrix currentmatrix_nlw 
	currentcolor 
	140 50 translate 
	0 rotate 
	1 1 scale 
	irHourAbs 5 () (h) false false false false 
	FSmidFont 9 
	baValueText001 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	140 20 translate 
	0 rotate 
	1 1 scale 
	irHourRel 5 () (h) false false false false 
	FSstdFont 9 
	baValueText001 
	setcolor 
	setmatrix_nlw 
%?manual_beg
	0 0 moveto 
	ixSymbol2Active {
		isSymbolName2 cvx exec 
	} {
		isSymbolName1 cvx exec 
	} ifelse
	ixRunning {
		matrix currentmatrix_nlw 
		currentcolor 
		85 25 translate 
		1 1 scale 
		3 setlinewidth_nlw
		matrix currentmatrix_nlw 
		MRrotate neg rotate
		8 0 moveto
		setmatrix_nlw 
		0 0 8 MRrotate neg dup 60 sub arc 
		1 setlinewidth
		setcolor 
		setmatrix_nlw 
	} if
%?manual_end
	
} def
%?partend


%?partdef spHour003
%?fn	spHour003
%?brief	Betriebsstundenanzeige Betriebsarten HS
%?bbox	0 0 159 79
/spHour003 {
	/irOperatMode exch def	%?brief number of the operational mode %?use INP %?type REAL %?dflt    0.00
	/irHourRel exch def	%?brief houres since last Reset %?use INP %?type REAL %?dflt    0.00
	/irHourAbs exch def	%?brief houres since first Start %?use INP %?type REAL %?dflt    0.00
	/ixRunning exch def	%?brief hourmeter is running %?use INP %?type BOOL %?dflt false
	%?term_beg
	
	irOperatMode 3 ge 
	irOperatMode 11 le and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		140 50 translate 
		0 rotate 
		1 1 scale 
		irHourAbs 5 () (h) false false false false 
		FSmidFont 9 
		baValueText001 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	irOperatMode 3 ge 
	irOperatMode 11 le and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		140 20 translate 
		0 rotate 
		1 1 scale 
		irHourRel 5 () (h) false false false false 
		FSstdFont 9 
		baValueText001 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	irOperatMode 5 ge 
	irOperatMode 10 le and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		ssGrab001 
		setcolor 
		setmatrix_nlw 
	} if 
	irOperatMode 3 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		ssGeneral036 
		setcolor 
		setmatrix_nlw 
	} if 
	irOperatMode 4 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		ssGeneral037 
		setcolor 
		setmatrix_nlw 
	} if 
	irOperatMode 11 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		ssDrill002 
		setcolor 
		setmatrix_nlw 
	} if 
%?manual_beg
	ixRunning {
		matrix currentmatrix_nlw 
		currentcolor 
		85 25 translate 
		1 1 scale 
		3 setlinewidth_nlw
		matrix currentmatrix_nlw 
		MRrotate neg rotate
		8 0 moveto
		setmatrix_nlw 
		0 0 8 MRrotate neg dup 60 sub arc 
		1 setlinewidth
		setcolor 
		setmatrix_nlw 
	} if
%?manual_end
} def
%?partend

%?partdef spStatus001
%?fn	spStatus001
%?brief	remote control status
%?bbox	0 0 79 79
/spStatus001 {
	/ixRcRadioSigOk exch def	%?brief remote control: radio signal is ok %?use INP %?type BOOL %?dflt false
	/ixRcContChanges exch def	%?brief remote control: control is changing %?use INP %?type BOOL %?dflt false
	/ixRcContChanged exch def	%?brief remote control: control changed to cabin %?use INP %?type BOOL %?dflt false
	ixRcRadioSigOk true eq {	
		ixRcContChanges true eq {	
			true setflash 
		} if 
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		gsGeneral013 
		setcolor 
		setmatrix_nlw 
		false setflash 
	} if 
	ixRcRadioSigOk true ne {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		gsGeneral072 
		setcolor 
		setmatrix_nlw 
	} if 
	ixRcContChanged ixRcRadioSigOk and {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		gsGeneral018 
		setcolor 
		setmatrix_nlw 
	} if 
} def
%?partend

%?partdef spEngine006
%?fn	spEngine006
%?brief	feed pressure symbols
%?bbox	0 0 79 79
/spEngine006 {
	/ixFeedPresLowHg2 exch def	%?brief feed pressure low hg2 %?use INP %?type BOOL %?dflt false
	/ixFeedPresLowHg1 exch def	%?brief feed pressure low hg1 %?use INP %?type BOOL %?dflt false
	/ixFeedPressLow exch def	%?brief feed pressure low %?use INP %?type BOOL %?dflt false
	%?term_beg
	
	ixFeedPresLowHg1 ixFeedPresLowHg2 not and 
	ixFeedPressLow not and 
	%?term_end
	{	
		ixFeedPresLowHg1 true eq {	
			true setflash 
		} if 
		matrix currentmatrix_nlw 
		currentcolor 
		Red 0 0 translate 
		0 rotate 
		1 1 scale 
		ssEngine001 
		setcolor 
		setmatrix_nlw 
		false setflash 
	} if 
	%?term_beg
	
	ixFeedPresLowHg2 ixFeedPresLowHg1 not and 
	ixFeedPressLow not and 
	%?term_end
	{	
		ixFeedPresLowHg2 true eq {	
			true setflash 
		} if 
		matrix currentmatrix_nlw 
		currentcolor 
		Red 0 0 translate 
		0 rotate 
		1 1 scale 
		ssEngine002 
		setcolor 
		setmatrix_nlw 
		false setflash 
	} if 
	%?term_beg
	
	ixFeedPresLowHg1 ixFeedPresLowHg2 and 
	ixFeedPressLow or 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		true setflash 
		Red 0 0 translate 
		0 rotate 
		1 1 scale 
		gsHydraulic003 
		setcolor 
		setmatrix_nlw 
		false setflash 
	} if 
} def
%?partend


%?partdef spStatus002
%?fn	spStatus002
%?brief	Meisterschalterbelegung
%?bbox	0 0 79 79
/spStatus002 {
	/irActiveNumber exch def	%?brief joystick activated symbol number %?use INP %?type REAL %?dflt    0.00
	irActiveNumber 1 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		ssGeneral047 
		setcolor 
		setmatrix_nlw 
	} if 
	irActiveNumber 2 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		ssGeneral048 
		setcolor 
		setmatrix_nlw 
	} if 
	irActiveNumber 3 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		ssGeneral001 
		setcolor 
		setmatrix_nlw 
	} if 
	irActiveNumber 4 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		ssGeneral002 
		setcolor 
		setmatrix_nlw 
	} if 
	irActiveNumber 5 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		ssGeneral003 
		setcolor 
		setmatrix_nlw 
	} if 
	irActiveNumber 6 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		ssWinch012 
		setcolor 
		setmatrix_nlw 
	} if 
	irActiveNumber 7 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		ssWinch013 
		setcolor 
		setmatrix_nlw 
	} if 
	irActiveNumber 8 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		gsHook004 
		setcolor 
		setmatrix_nlw 
	} if 
	irActiveNumber 9 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		gsWinch008 
		setcolor 
		setmatrix_nlw 
	} if 
	irActiveNumber 10 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		ssWinch007 
		setcolor 
		setmatrix_nlw 
	} if 
	irActiveNumber 11 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		ssGeneral006 
		setcolor 
		setmatrix_nlw 
	} if 
	irActiveNumber 12 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		ssGeneral007 
		setcolor 
		setmatrix_nlw 
	} if 
	irActiveNumber 13 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		ssGeneral008 
		setcolor 
		setmatrix_nlw 
	} if 
	irActiveNumber 14 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		ssGrab001 
		setcolor 
		setmatrix_nlw 
	} if 
	irActiveNumber 15 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		ssGrab003 
		setcolor 
		setmatrix_nlw 
	} if 
	irActiveNumber 16 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		ssLeader007 
		setcolor 
		setmatrix_nlw 
	} if 
	irActiveNumber 17 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		80 0 translate 
		90 rotate 
		1 1 scale 
		ssLeader007 
		setcolor 
		setmatrix_nlw 
	} if 
	irActiveNumber 18 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		ssLeader008 
		setcolor 
		setmatrix_nlw 
	} if 
	irActiveNumber 19 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		ssLeader005 
		setcolor 
		setmatrix_nlw 
	} if 
	irActiveNumber 20 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		ssGeneral042 
		setcolor 
		setmatrix_nlw 
	} if 
	irActiveNumber 21 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		ssGeneral043 
		setcolor 
		setmatrix_nlw 
	} if 
	irActiveNumber 22 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		ssGeneral044 
		setcolor 
		setmatrix_nlw 
	} if 
	irActiveNumber 23 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		ssGeneral045 
		setcolor 
		setmatrix_nlw 
	} if 
	irActiveNumber 24 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		ssLeader009 
		setcolor 
		setmatrix_nlw 
	} if 
	irActiveNumber 25 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		ssGeneral046 
		setcolor 
		setmatrix_nlw 
	} if 
	irActiveNumber 26 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		gsWinch007 
		setcolor 
		setmatrix_nlw 
	} if 
	irActiveNumber 27 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		ssLeader006 
		setcolor 
		setmatrix_nlw 
	} if 
	irActiveNumber 28 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		ssWinch006 
		setcolor 
		setmatrix_nlw 
	} if 
	irActiveNumber 29 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		ssGeneral052 
		setcolor 
		setmatrix_nlw 
	} if 
	irActiveNumber 30 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		ssGeneral051 
		setcolor 
		setmatrix_nlw 
	} if 
	irActiveNumber 31 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		ssLeader010 
		setcolor 
		setmatrix_nlw 
	} if 
	irActiveNumber 32 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		ssLeader011 
		setcolor 
		setmatrix_nlw 
	} if 
	irActiveNumber 33 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		ssLeader012 
		setcolor 
		setmatrix_nlw 
	} if 
	irActiveNumber 34 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		ssLeader013 
		setcolor 
		setmatrix_nlw 
	} if 
	irActiveNumber 35 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		ssLeader014 
		setcolor 
		setmatrix_nlw 
	} if 
	irActiveNumber 36 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		ssLeader015 
		setcolor 
		setmatrix_nlw 
	} if 
	irActiveNumber 37 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		ssGeneral066 
		setcolor 
		setmatrix_nlw 
	} if 
	irActiveNumber 38 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		ssGeneral067 
		setcolor 
		setmatrix_nlw 
	} if 
	irActiveNumber 39 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		ssLeader017 
		setcolor 
		setmatrix_nlw 
	} if 
	irActiveNumber 40 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		ssLeader018 
		setcolor 
		setmatrix_nlw 
	} if 
} def
%?partend

%?partdef spStatus003
%?fn	spStatus003
%?brief	Endschaltersymbole
%?bbox	0 0 79 79
/spStatus003 {
	/irActiveNumber exch def	%?brief limit switch activated symbol number %?use INP %?type REAL %?dflt    0.00
	irActiveNumber 1 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		gsLimit001 
		setcolor 
		setmatrix_nlw 
	} if 
	irActiveNumber 2 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		gsLimit004 
		setcolor 
		setmatrix_nlw 
	} if 
	irActiveNumber 3 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		gsLimit005 
		setcolor 
		setmatrix_nlw 
	} if 
	irActiveNumber 4 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		gsLimit006 
		setcolor 
		setmatrix_nlw 
	} if 
	irActiveNumber 5 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		gsLimit007 
		setcolor 
		setmatrix_nlw 
	} if 
	irActiveNumber 6 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		gsLimit008 
		setcolor 
		setmatrix_nlw 
	} if 
	irActiveNumber 7 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		gsLimit009 
		setcolor 
		setmatrix_nlw 
	} if 
	irActiveNumber 8 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		gsLimit010 
		setcolor 
		setmatrix_nlw 
	} if 
	irActiveNumber 9 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		gsLimit011 
		setcolor 
		setmatrix_nlw 
	} if 
	irActiveNumber 10 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		gsLimit022 
		setcolor 
		setmatrix_nlw 
	} if 
	irActiveNumber 11 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		gsLimit023 
		setcolor 
		setmatrix_nlw 
	} if 
	irActiveNumber 12 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		gsLimit024 
		setcolor 
		setmatrix_nlw 
	} if 
	irActiveNumber 13 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		gsLimit025 
		setcolor 
		setmatrix_nlw 
	} if 
	irActiveNumber 14 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		ssLimit010 
		setcolor 
		setmatrix_nlw 
	} if 
	irActiveNumber 15 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		ssLimit011 
		setcolor 
		setmatrix_nlw 
	} if 
	irActiveNumber 16 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		ssLimit001 
		setcolor 
		setmatrix_nlw 
	} if 
	irActiveNumber 17 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		ssLimit002 
		setcolor 
		setmatrix_nlw 
	} if 
	irActiveNumber 18 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		ssLimit005 
		setcolor 
		setmatrix_nlw 
	} if 
	irActiveNumber 19 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		ssLimit006 
		setcolor 
		setmatrix_nlw 
	} if 
	irActiveNumber 20 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		ssLimit003 
		setcolor 
		setmatrix_nlw 
	} if 
	irActiveNumber 21 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		ssLimit007 
		setcolor 
		setmatrix_nlw 
	} if 
	irActiveNumber 22 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		ssLimit008 
		setcolor 
		setmatrix_nlw 
	} if 
	irActiveNumber 23 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		ssLimit009 
		setcolor 
		setmatrix_nlw 
	} if 
	irActiveNumber 24 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		gsLimit002 
		setcolor 
		setmatrix_nlw 
	} if 
	irActiveNumber 25 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		ssLimit021 
		setcolor 
		setmatrix_nlw 
	} if 
	irActiveNumber 26 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		ssLimit022 
		setcolor 
		setmatrix_nlw 
	} if 
	irActiveNumber 27 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		ssLimit031 
		setcolor 
		setmatrix_nlw 
	} if 
	irActiveNumber 28 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		gsLimit017 
		setcolor 
		setmatrix_nlw 
	} if 
	irActiveNumber 29 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		gsLimit018 
		setcolor 
		setmatrix_nlw 
	} if 
	irActiveNumber 30 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		gsHook003 
		setcolor 
		setmatrix_nlw 
	} if 
	irActiveNumber 31 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		ssWinch008 
		setcolor 
		setmatrix_nlw 
	} if 
} def
%?partend

%?partdef spWinch011
%?fn	spWinch011
%?brief	Seillängenmessung Einstellungen
%?bbox	0 0 479 79
/spWinch011 {
	/idWinchNr exch def	%?brief Windenidentifikation %?use INP %?type REAL %?dflt    0.00
	/irRopeLength exch def	%?brief Seillänge %?use INP %?type REAL %?dflt    0.00
	matrix currentmatrix_nlw 
	currentcolor 
	305 60 translate 
	0 rotate 
	1 1 scale 
	(2) 
	FSfatFont 0 
	baText001 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	305 20 translate 
	0 rotate 
	1 1 scale 
	(1) 
	FSfatFont 0 
	baText001 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	385 60 translate 
	0 rotate 
	1 1 scale 
	(4) 
	FSfatFont 0 
	baText001 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	385 20 translate 
	0 rotate 
	1 1 scale 
	(3) 
	FSfatFont 0 
	baText001 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	465 60 translate 
	0 rotate 
	1 1 scale 
	(6) 
	FSfatFont 0 
	baText001 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	465 20 translate 
	0 rotate 
	1 1 scale 
	(5) 
	FSfatFont 0 
	baText001 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	164 0 translate 
	0 rotate 
	1 1 scale 
	gsGeneral076 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	230 0 translate 
	0 rotate 
	1 1 scale 
	ssGeneral013 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	310 0 translate 
	0 rotate 
	1 1 scale 
	ssGeneral013 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	390 0 translate 
	0 rotate 
	1 1 scale 
	ssGeneral013 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	115 35 translate 
	0 rotate 
	1 1 scale 
	irRopeLength 3.20 false false 
	FSmidFont 1 
	baValueDist001 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	-2 0 translate 
	0 rotate 
	1 1 scale 
	ssWinch014 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	41 41 translate 
	0 rotate 
	1 1 scale 
	idWinchNr 1 false false 
	FSfatFont 
	baValue004 
	setcolor 
	setmatrix_nlw 
} def
%?partend

%?partdef spWind001
%?fn	spWind001
%?brief	Windgeschwindigkeit
%?bbox	0 0 159 79
/spWind001 {
	/ixWindSpeedError exch def	%?brief Windgeschwindigkeit zu hoch Sicherheitsschwelle %?use INP %?type BOOL %?dflt false
	/ixWindSpeedWarn exch def	%?brief Windgeschwindigkeit zu hoch Warnung %?use INP %?type BOOL %?dflt false
	/irWindSpeed exch def	%?brief Windgeschwindigkeit in m/s %?use INP %?type REAL %?dflt    0.00
	matrix currentmatrix_nlw 
	currentcolor 
	10 10 translate 
	0 rotate 
	0.75 0.75 scale 
	ixWindSpeedError ixWindSpeedWarn false false (gsWind001) 
	baSwitchSymbolColor004 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	110 20 translate 
	0 rotate 
	1 1 scale 
	irWindSpeed 2 
	ixWindSpeedWarn ixWindSpeedError FSmidFont 1 
	baValueSpeed001 
	setcolor 
	setmatrix_nlw 
} def
%?partend

%?partdef spInclinat001
%?fn	spInclinat001
%?brief	Neigungsanzeige
%?bbox	0 0 239 319
/spInclinat001 {
	/irMaxYn exch def	%?brief maximaler negativer Y-Wert %?use INP %?type REAL %?dflt  -20.00
	/irMaxXn exch def	%?brief maximaler negativer X-Wert %?use INP %?type REAL %?dflt   -5.00
	/irMaxYp exch def	%?brief maximaler positiver Y-Wert %?use INP %?type REAL %?dflt   10.00
	/irMaxXp exch def	%?brief maximaler positiver X-Wert %?use INP %?type REAL %?dflt    5.00
	/irYaddRatedIncl exch def	%?brief Y-position des zusätzlichen Soll-Cursor %?use INP %?type REAL %?dflt    0.00
	/irXaddRatedIncl exch def	%?brief X-position des zusätzlichen Soll-Cursor %?use INP %?type REAL %?dflt    0.00
	/irYratedIncl exch def	%?brief Y-position des Soll-Cursor %?use INP %?type REAL %?dflt    0.00
	/irXratedIncl exch def	%?brief X-position des Soll-Cursor %?use INP %?type REAL %?dflt    0.00
	/irYinclination exch def	%?brief Y-position des Ist-Cursor %?use INP %?type REAL %?dflt    0.00
	/irXinclination exch def	%?brief X-position des Ist-Cursor %?use INP %?type REAL %?dflt    0.00
	/idCursorForm3 exch def	%?brief 3. Cursor-form: 0 nicht aktiv, 1 quadrat, 2 kreuz, 3 kreis (Farbe bsp: 11 grüne %?use INP %?type DINT %?dflt 2
	/idCursorForm2 exch def	%?brief 2. Cursor-form: 0 nicht aktiv, 1 quadrat, 2 kreuz, 3 kreis (Farbe bsp: 41 rotes %?use INP %?type DINT %?dflt 1
	/idCursorForm1 exch def	%?brief 1. Cursor-form: 0 nicht aktiv, 1 quadrat, 2 kreuz, 3 kreis (Farbe bsp: 71 dunke %?use INP %?type DINT %?dflt 0
	matrix currentmatrix_nlw 
	currentcolor 
	0 0 translate 
	0 rotate 
	1 1 scale 
	idCursorForm3 idCursorForm2 idCursorForm1 
	irXaddRatedIncl irYaddRatedIncl irXratedIncl irYratedIncl 
	irXinclination irYinclination 3 4 
	irMaxXp irMaxYp irMaxXn 
	irMaxYn 
	baCursorfield001 
	setcolor 
	setmatrix_nlw 
	%?term_beg
	
	irXinclination irMaxXn 20 div ge 
	irXinclination irMaxXp 1.25 div le and 
	irYinclination irMaxYn 1.11 div le and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		102 5 translate 
		0 rotate 
		0.70 0.70 scale 
		irYinclination 2.10 (Â°) false false 
		FSfatFont 1 
		baValue002 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	irXinclination irMaxXn 20 div lt 
	irXinclination irMaxXp 1.25 div gt or 
	irYinclination irMaxYn 1.11 div gt or 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		130 5 translate 
		0 rotate 
		0.70 0.70 scale 
		irYinclination 2.10 (Â°) false false 
		FSfatFont 1 
		baValue003 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	irYinclination irMaxYn 30 div ge 
	irYinclination irMaxYp 3 div le and 
	irXinclination irMaxXp 1.75 div ge and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		237 178 translate 
		0 rotate 
		0.70 0.70 scale 
		irXinclination 2.10 (Â°) false false 
		FSfatFont 1 
		baValue002 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	irYinclination irMaxYn 30 div lt 
	irYinclination irMaxYp 3 div gt or 
	irXinclination irMaxXp 1.75 div lt or 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		237 221 translate 
		0 rotate 
		0.70 0.70 scale 
		irXinclination 2.10 (Â°) false false 
		FSfatFont 1 
		baValue002 
		setcolor 
		setmatrix_nlw 
	} if 
} def
%?partend

%?partdef spInclinat002
%?fn	spInclinat002
%?brief	Neigungsanzeige mit Raumwinkelanzeige
%?bbox	0 0 159 239
/spInclinat002 {
	/ixShowAbsAng exch def	%?brief anzeige absoluter Winkel %?use INP %?type BOOL %?dflt false
	/irMaxYn exch def	%?brief maximaler negativer Y-Wert %?use INP %?type REAL %?dflt  -15.00
	/irMaxXn exch def	%?brief maximaler negativer X-Wert %?use INP %?type REAL %?dflt   -5.00
	/irMaxYp exch def	%?brief maximaler positiver Y-Wert %?use INP %?type REAL %?dflt   15.00
	/irMaxXp exch def	%?brief maximaler positiver X-Wert %?use INP %?type REAL %?dflt    5.00
	/irYratedIncl exch def	%?brief Y-position des Soll-Cursor %?use INP %?type REAL %?dflt    0.00
	/irXratedIncl exch def	%?brief X-position des Soll-Cursor %?use INP %?type REAL %?dflt    0.00
	/irAbsInclination exch def	%?brief absolute position des Ist-Cursor %?use INP %?type REAL %?dflt    0.00
	/irYinclination exch def	%?brief Y-position des Ist-Cursor %?use INP %?type REAL %?dflt    0.00
	/irXinclination exch def	%?brief X-position des Ist-Cursor %?use INP %?type REAL %?dflt    0.00
	/idCursorForm2 exch def	%?brief 2. Cursor-form: 0 nicht aktiv, 1 quadrat, 2 kreuz, 3 kreis %?use INP %?type DINT %?dflt 1
	/idCursorForm1 exch def	%?brief 1. Cursor-form: 0 nicht aktiv, 1 quadrat, 2 kreuz, 3 kreis %?use INP %?type DINT %?dflt 2
	matrix currentmatrix_nlw 
	currentcolor 
	0 0 translate 
	0 rotate 
	1 1 scale 
	idCursorForm1 idCursorForm2 0 
	irXinclination irYinclination irXratedIncl 
	irYratedIncl 0 0 2 3 
	irMaxXp irMaxYp irMaxXn 
	irMaxYn 
	baCursorfield001 
	setcolor 
	setmatrix_nlw 
%?manual_beg
	ixShowAbsAng {
		matrix currentmatrix_nlw 
		currentcolor 
		irXinclination irMaxXp 4 div gt irYinclination irMaxYn 4 div lt and {
			5 5 translate
			irAbsInclination 2.10 (Â°) false false 
			FSmidFont 1 
			baValue003 
		} { 
			MDsymbolGrid 2 mul 0 translate
			-3 5 translate
			irAbsInclination 2.10 (Â°) false false 
			FSmidFont 1 
			baValue002 
		} ifelse
		setcolor 
		setmatrix_nlw 
	} if
%?manual_end
	
} def
%?partend

%?partdef spInclinat003
%?fn	spInclinat003
%?brief	Neigungsanzeige für Oberwagenneigung
%?bbox	0 0 159 159
/spInclinat003 {
	/irMaxAngle exch def	%?brief maximaler Winkelwert %?use INP %?type REAL %?dflt    5.00
	/ixShowAbsAng exch def	%?brief anzeige absoluter Winkel %?use INP %?type BOOL %?dflt false
	/irAbsInclination exch def	%?brief absolute position des Ist-Cursor %?use INP %?type REAL %?dflt    0.00
	/irYinclination exch def	%?brief Y-Neigung %?use INP %?type REAL %?dflt    0.00
	/irXinclination exch def	%?brief X-Neigung %?use INP %?type REAL %?dflt    0.00
	matrix currentmatrix_nlw 
	currentcolor 
	0 0 translate 
	0 rotate 
	1 1 scale 
	2 0 0 
	irXinclination irYinclination 0 0 0 0 2 2 
	irMaxAngle irMaxAngle irMaxAngle neg 
	irMaxAngle neg 
	baCursorfield001 
	setcolor 
	setmatrix_nlw 
%?manual_beg
	irYinclination irMaxAngle 8 div neg gt irYinclination irMaxAngle 3 div lt and irXinclination irMaxAngle 2 div gt and { 
		matrix currentmatrix_nlw 
		currentcolor 
		10 85 translate 
		0 rotate 
		1 1 scale 
		irXinclination 2.10 (Â°) false false 
		FSstdFont 1 
		baValue003 
		setcolor 
		setmatrix_nlw 
	} {	
		matrix currentmatrix_nlw 
		currentcolor 
		157 85 translate 
		0 rotate 
		1 1 scale 
		irXinclination 2.10 (Â°) false false 
		FSstdFont 1 
		baValue002 
		setcolor 
		setmatrix_nlw 
	} ifelse 
	irXinclination irMaxAngle 8 div neg gt irXinclination irMaxAngle 2 div lt and irYinclination irMaxAngle 1.5 div neg lt and { 
		matrix currentmatrix_nlw 
		currentcolor 
		90 140 translate 
		0 rotate 
		1 1 scale 
		irYinclination 2.10 (Â°) false false 
		FSstdFont 1 
		baValue003 
		setcolor 
		setmatrix_nlw 
	} { 
		matrix currentmatrix_nlw 
		currentcolor 
		90 5 translate 
		0 rotate 
		1 1 scale 
		irYinclination 2.10 (Â°) false false 
		FSstdFont 1 
		baValue003 
		setcolor 
		setmatrix_nlw 
	} ifelse 
	ixShowAbsAng { 
		irXinclination irMaxAngle 2 div neg lt irYinclination irMaxAngle 1.5 div gt and {
			matrix currentmatrix_nlw 
			currentcolor 
			10 5 translate 
			0 0 moveto 
			irAbsInclination 2.10 (Â°) false false 
			FSminiFont 1 
			baValue003 
			setcolor 
			setmatrix_nlw 
		} { 
			matrix currentmatrix_nlw 
			currentcolor 
			10 140 translate 
			0 0 moveto 
			irAbsInclination 2.10 (Â°) false false 
			FSminiFont 1 
			baValue003 
			setcolor 
			setmatrix_nlw 
		} ifelse
	} if
%?manual_end
	
} def
%?partend

%?partdef spWinch004
%?fn	spWinch004
%?brief	Seillängenmessung mit Seilgeschwindigkeit und PDE-Tiefe
%?bbox	0 0 159 99
/spWinch004 {
	/ixRopeSpeedWarn exch def	%?brief Warnung Seilgeschwindigkeit (blinken) %?use INP %?type BOOL %?dflt false
	/ixWinchLower exch def	%?brief Winde dreht senken %?use INP %?type BOOL %?dflt false
	/ixWinchLift exch def	%?brief Winde dreht heben %?use INP %?type BOOL %?dflt false
	/ixPdeLengthAct exch def	%?brief PDE Seillänge aktiv %?use INP %?type BOOL %?dflt false 
	/irRopeSpeed exch def	%?brief Seilgeschwindigkeit %?use INP %?type REAL %?dflt    0.00
	/irRopeLength exch def	%?brief Seillänge %?use INP %?type REAL %?dflt    0.00
	/irPdeRopeLength exch def	%?brief PDE Seillänge %?use INP %?type REAL %?dflt    0.00
	matrix currentmatrix_nlw 
	currentcolor 
	70 27 translate 
	0 rotate 
	1 1 scale 
	irRopeLength 2.20 false false 
	FSbigFatFont 1 
	baValueDist001 
	setcolor 
	setmatrix_nlw 
	ixWinchLift true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		-8 44 translate 
		0 rotate 
		0.75 0.75 scale 
		ssGeneral015 
		setcolor 
		setmatrix_nlw 
	} if 
	ixWinchLower true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		52 104 translate 
		180 rotate 
		0.75 0.75 scale 
		ssGeneral015 
		setcolor 
		setmatrix_nlw 
	} if 
	ixRopeSpeedWarn true eq {	
		true setflash 
	} if 
	matrix currentmatrix_nlw 
	currentcolor 
	81 67 translate 
	0 rotate 
	0.80 0.80 scale 
	irRopeSpeed 3.20 false false 
	FSfatFont 0.80 
	baValueSpeed003 
	setcolor 
	setmatrix_nlw 
	false setflash 
	ixPdeLengthAct true eq {
	matrix currentmatrix_nlw 
	currentcolor 
	126 7 translate 
	0 rotate 
	1 1 scale 
	irPdeRopeLength 2.20 false false 
	FSstdFont 1 
	baValueDist001 
	setcolor 
	setmatrix_nlw 
	} if
} def
%?partend

%?partdef spEngine007
%?fn	spEngine007
%?brief	Aggregatüberwachung klein
%?bbox	0 0 159 239
/spEngine007 {
	/irEngineTorque exch def	%?brief engine torque %?use INP %?type REAL %?dflt    0.00
	/ixChargeControl exch def	%?brief battery charge control %?use INP %?type BOOL %?dflt false
	/ixAGNerror exch def	%?brief engine exhaust aftertreatment error %?use INP %?type BOOL %?dflt false
	/ixAGNwarn exch def	%?brief engine exhaust aftertreatment warning %?use INP %?type BOOL %?dflt false
	/ixDPFactive exch def	%?brief diesel particle filter active %?use INP %?type BOOL %?dflt false
	/ixDPFerror exch def	%?brief diesel particle filter error %?use INP %?type BOOL %?dflt false
	/ixDPFwarn exch def	%?brief diesel particle filter warning %?use INP %?type BOOL %?dflt false
	/ixDPFregDisabled exch def	%?brief diesel particle filter regeneration disabled %?use INP %?type BOOL %?dflt false
	/irDPFtime exch def	%?brief diesel particle filter left time %?use INP %?type REAL %?dflt    0.00
	/ixPostHeatActive exch def	%?brief pre heating is active after engine started %?use INP %?type BOOL %?dflt false
	/ixPreHeatStart exch def	%?brief pre heating ready for engine start %?use INP %?type BOOL %?dflt false
	/ixPreHeatActive exch def	%?brief pre heating is active %?use INP %?type BOOL %?dflt false
	/ixFuelContError exch def	%?brief fuel content error %?use INP %?type BOOL %?dflt false
	/ixFuelContWarn exch def	%?brief fuel content warning %?use INP %?type BOOL %?dflt false
	/ixEngSpeedError exch def	%?brief engine speed error %?use INP %?type BOOL %?dflt false
	/ixEngSpeedWarn exch def	%?brief engine speed warning %?use INP %?type BOOL %?dflt false
	/irEngineSpeed exch def	%?brief engine speed %?use INP %?type REAL %?dflt    0.00
	matrix currentmatrix_nlw 
	currentcolor 
	0 80 translate 
	0 rotate 
	1 1 scale 
	irEngineSpeed (rpm) 700 2200 false true false false 
	ixEngSpeedWarn ixEngSpeedError 2100 2200 0 0 5 15 120 true false 0 false 0 0 false 1 
	baBar006 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	80 80 translate 
	0 rotate 
	1 1 scale 
	irEngineTorque () 0 100 false false false false false false 100 100 0 0 5 15 120 true false 0 false 0 0 false 1 
	baBar006 
	setcolor 
	setmatrix_nlw 
	ixFuelContWarn ixFuelContError or {	
		matrix currentmatrix_nlw 
		currentcolor 
		5 10 translate 
		0 rotate 
		0.80 0.80 scale 
		ixFuelContError ixFuelContWarn false false (gsEngine002) 
		baSwitchSymbolColor004 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	ixPreHeatActive ixAGNwarn not and 
	ixAGNerror not and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		Yellow 80 0 translate 
		0 rotate 
		1 1 scale 
		gsEngine009 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	ixPreHeatStart ixAGNwarn not and 
	ixAGNerror not and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 80 0 translate 
		0 rotate 
		1 1 scale 
		gsEngine023 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	ixPostHeatActive ixAGNwarn not and 
	ixAGNerror not and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		80 0 translate 
		0 rotate 
		1 1 scale 
		gsEngine009 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	ixDPFwarn ixDPFerror or 
	ixAGNwarn not and 
	ixAGNerror not and 
	ixDPFactive not and 
	ixDPFregDisabled not and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		80 0 translate 
		0 rotate 
		1 1 scale 
		ixDPFerror ixDPFwarn false false (gsAgn002) 
		baSwitchSymbolColor004 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	ixDPFactive ixAGNwarn not and 
	ixAGNerror not and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		80 0 translate 
		0 rotate 
		1 1 scale 
		gsAgn001 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	ixDPFactive ixAGNwarn not and 
	ixAGNerror not and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		155 13 translate 
		0 rotate 
		1 1 scale 
		irDPFtime 3 () (min) false false false false 
		FSminiFont 5 
		baValueText001 
		setcolor 
		setmatrix_nlw 
	} if 
	ixAGNwarn ixAGNerror or {	
		matrix currentmatrix_nlw 
		currentcolor 
		80 0 translate 
		0 rotate 
		1 1 scale 
		ixAGNerror ixAGNwarn false false (gsAgn004) 
		baSwitchSymbolColor004 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	ixDPFregDisabled ixAGNwarn not and 
	ixAGNerror not and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		80 0 translate 
		0 rotate 
		1 1 scale 
		gsAgn003 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	ixFuelContError not 
	ixFuelContWarn not and 
	ixChargeControl not and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		10 10 translate 
		0 rotate 
		0.80 0.80 scale 
		ixEngSpeedError ixEngSpeedWarn false false (gsEngine001) 
		baSwitchSymbolColor004 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	ixChargeControl ixFuelContError not and 
	ixFuelContWarn not and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		Red 0 0 translate 
		0 rotate 
		1 1 scale 
		gsEngine004 
		setcolor 
		setmatrix_nlw 
	} if 
	matrix currentmatrix_nlw 
	currentcolor 
	113 220 translate 
	0 rotate 
	1 1 scale 
	80 false false 
	FSstdFont 1 0 
	baUnit001 
	setcolor 
	setmatrix_nlw 
	88 220 moveto 
	StdFont (%) 
	show_utf8 
} def
%?partend

%?partdef spStatus004
%?fn	spStatus004
%?brief	Endschaltersymbole LB/LRB
%?bbox	0 0 79 79
/spStatus004 {
	/irActiveNumber exch def	%?brief limit switch activated symbol number %?use INP %?type REAL %?dflt    0.00
	irActiveNumber 1 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		gsLimit001 
		setcolor 
		setmatrix_nlw 
	} if 
	irActiveNumber 2 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		gsLimit004 
		setcolor 
		setmatrix_nlw 
	} if 
	irActiveNumber 3 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		gsLimit005 
		setcolor 
		setmatrix_nlw 
	} if 
	irActiveNumber 4 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		gsLimit006 
		setcolor 
		setmatrix_nlw 
	} if 
	irActiveNumber 5 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		gsLimit007 
		setcolor 
		setmatrix_nlw 
	} if 
	irActiveNumber 6 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		ssLimit012 
		setcolor 
		setmatrix_nlw 
	} if 
	irActiveNumber 7 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		ssLimit013 
		setcolor 
		setmatrix_nlw 
	} if 
	irActiveNumber 8 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		ssLimit014 
		setcolor 
		setmatrix_nlw 
	} if 
	irActiveNumber 9 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		ssLimit015 
		setcolor 
		setmatrix_nlw 
	} if 
	irActiveNumber 10 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		ssLimit010 
		setcolor 
		setmatrix_nlw 
	} if 
	irActiveNumber 11 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		ssLimit011 
		setcolor 
		setmatrix_nlw 
	} if 
	irActiveNumber 12 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		ssLimit016 
		setcolor 
		setmatrix_nlw 
	} if 
	irActiveNumber 13 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		ssLimit017 
		setcolor 
		setmatrix_nlw 
	} if 
	irActiveNumber 14 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		ssLimit018 
		setcolor 
		setmatrix_nlw 
	} if 
	irActiveNumber 15 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		ssLimit019 
		setcolor 
		setmatrix_nlw 
	} if 
	irActiveNumber 16 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		ssLimit020 
		setcolor 
		setmatrix_nlw 
	} if 
	irActiveNumber 17 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		ssLimit021 
		setcolor 
		setmatrix_nlw 
	} if 
	irActiveNumber 18 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		ssLimit022 
		setcolor 
		setmatrix_nlw 
	} if 
	irActiveNumber 19 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		ssLimit023 
		setcolor 
		setmatrix_nlw 
	} if 
	irActiveNumber 20 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		ssLimit024 
		setcolor 
		setmatrix_nlw 
	} if 
	irActiveNumber 21 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		ssGeneral019 
		setcolor 
		setmatrix_nlw 
	} if 
	irActiveNumber 22 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		ssGeneral020 
		setcolor 
		setmatrix_nlw 
	} if 
	irActiveNumber 23 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		ssWinch005 
		setcolor 
		setmatrix_nlw 
	} if 
	irActiveNumber 24 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		ssLimit025 
		setcolor 
		setmatrix_nlw 
	} if 
	irActiveNumber 25 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		gsHook003 
		setcolor 
		setmatrix_nlw 
	} if 
	irActiveNumber 26 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		ssLimit032 
		setcolor 
		setmatrix_nlw 
	} if 
	irActiveNumber 27 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		ssLimit033 
		setcolor 
		setmatrix_nlw 
	} if 
	irActiveNumber 28 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		ssLimit034 
		setcolor 
		setmatrix_nlw 
	} if 
	irActiveNumber 29 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		ssLimit035 
		setcolor 
		setmatrix_nlw 
	} if 
	irActiveNumber 30 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		ssLimit036 
		setcolor 
		setmatrix_nlw 
	} if 
	irActiveNumber 31 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		ssLimit037 
		setcolor 
		setmatrix_nlw 
	} if 
	irActiveNumber 32 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		ssLimit038 
		setcolor 
		setmatrix_nlw 
	} if 
	irActiveNumber 33 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		gsGeneral009 
		setcolor 
		setmatrix_nlw 
	} if 
	irActiveNumber 34 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		ssGeneral068 
		setcolor 
		setmatrix_nlw 
	} if 
	irActiveNumber 35 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		ssGeneral053 
		setcolor 
		setmatrix_nlw 
	} if 
	irActiveNumber 36 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		gsLimit018 
		setcolor 
		setmatrix_nlw 
	} if 
	irActiveNumber 37 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		gsLimit017 
		setcolor 
		setmatrix_nlw 
	} if 
	irActiveNumber 38 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		ssWinch015 
		setcolor 
		setmatrix_nlw 
	} if 
} def
%?partend

%?partdef spWal001
%?fn	spWal001
%?brief	Arbeitsbereichsbegrenzung Anzeige Ausleger
%?bbox	-160 -160 159 159
/spWal001 {
	/ixBigVersion exch def	%?brief als große Anzeige einblenden %?use INP %?type BOOL %?dflt false
	/ixLuffJibActive exch def	%?brief Wippspitze anzeigen %?use INP %?type BOOL %?dflt false
	/ixJibPresel exch def	%?brief Nadel vorgewählt %?use INP %?type BOOL %?dflt false
	/irSlewAngle exch def	%?brief Drehwerkswinkel %?use INP %?type REAL %?dflt    0.00
	/irJibRadius exch def	%?brief Auslegerradius Wippspitze [m] %?use INP %?type REAL %?dflt   10.00
	/irMainRadius exch def	%?brief Auslegerradius Hauptausleger [m] %?use INP %?type REAL %?dflt   20.00
	/irMaxRadius exch def	%?brief maximum radius [m] %?use INP %?type REAL %?dflt   30.00
%?manual_beg
	% Ausleger zeichnen									% Bereich des Auslegers
	ixBigVersion { /L_MaxRadPx 230 def } { /L_MaxRadPx 135 def } ifelse			% maximum Radius in Pixel (140 -5(äusserer Rand) -15(Oberwagen (Abstand von innen (vom Drehmittelpunkt))))
	/L_scaleY 1 def										% Skalierung des Auslegers
	irMaxRadius 0 eq {
		/irMaxRadius 1 store
		/irMainRadius 1 store
		/irJibRadius 1 store
	} if
	/L_CalcPx L_MaxRadPx irMaxRadius div def			% Umrechnungsverhältnis m - pixel
	
	matrix currentmatrix
	irMainRadius irMaxRadius gt { /L_scaleY L_MaxRadPx 80 div store } { /L_scaleY irMainRadius L_CalcPx mul 80 div store } ifelse
	currentcolor
	ixLuffJibActive { LightGrey } if
	1 L_scaleY scale									% Nachfolgend gezeichneten Ausleger in die aktuell darzustellende Länge skalieren
	-5 0 moveto 										% Der Ausleger beginnt bei 0 und ist 80 lang
	-5 75 lineto 
	stroke 
	-5 75 moveto 
	0 80 lineto 
	stroke 
	0 80 moveto 
	5 75 lineto 
	stroke 
	5 75 moveto 
	5 0 lineto 
	stroke 
	5 5 moveto 
	-5 15 lineto 
	stroke 
	-5 15 moveto 
	5 25 lineto 
	stroke 
	5 25 moveto 
	-5 35 lineto 
	stroke 
	-5 35 moveto 
	5 45 lineto 
	stroke 
	5 45 moveto 
	-5 55 lineto 
	stroke 
	-5 55 moveto 
	5 65 lineto 
	stroke 
	5 65 moveto 
	-5 75 lineto 
	stroke 
	5 75 moveto 
	-5 75 lineto 
	stroke
	setcolor
	% Radius als Zahl einblenden
	ixLuffJibActive not {
		10 75 moveto						% Punkt im skalierten Koordinatensystem setzen
		setmatrix
		matrix currentmatrix
		currentpoint translate				% Punkt aus dem vorigen skalierten Koordinatensystem übernehmen ins nicht skalierte System
		irMainRadius 3 () 10 false false false false FSstdFont 2 0 baValueText002
	} if
	setmatrix

	ixJibPresel {											% Nadel zeichnen
		matrix currentmatrix
		1 irMainRadius L_CalcPx mul moveto
		setmatrix
		matrix currentmatrix
		irJibRadius irMaxRadius gt { /L_scaleY L_MaxRadPx irMainRadius L_CalcPx mul sub 55 div store } { /L_scaleY irJibRadius irMainRadius sub L_CalcPx mul 55 div store } ifelse
		currentcolor
		ixLuffJibActive not { LightGrey } if
		currentpoint translate								% aktuellen Punkt für die Nadel ermitteln und Koordinatensystem dorthin setzen

		1 L_scaleY scale									% Nachfolgend gezeichneten Ausleger in die aktuell darzustellende Länge skalieren
		-5 0 moveto 
		-5 50 lineto 
		stroke 
		-5 50 moveto 
		0 55 lineto 
		stroke 
		0 55 moveto 
		5 50 lineto 
		stroke 
		5 50 moveto 
		5 00 lineto 
		stroke 
		-5 00 moveto 
		5 10 lineto 
		stroke 
		5 10 moveto 
		-5 20 lineto 
		stroke 
		-5 20 moveto 
		5 30 lineto 
		stroke 
		5 30 moveto 
		-5 40 lineto 
		stroke 
		-5 40 moveto 
		5 50 lineto 
		stroke 
		-5 50 moveto 
		5 50 lineto 
		stroke 
		setcolor
		% Radius als Zahl einblenden
		ixLuffJibActive {
			10 50 moveto						% Punkt im skalierten Koordinatensystem setzen
			setmatrix
			matrix currentmatrix
			currentpoint translate				% Punkt aus dem vorigen skalierten Koordinatensystem übernehmen ins nicht skalierte System
			irJibRadius 3 () 10 false false false false FSstdFont 2 0 baValueText002
		} if
		setmatrix
	} if

	% Im Anschluß wird der Oberwagen gezeichnet
%?manual_end
	currentcolor 
	Invisible 
	%?plinebeg
	
	newpath 
	-10 20 moveto 
	-5 20 lineto 
	-5 15 lineto 
	10 15 lineto 
	10 -15 lineto 
	17 -15 lineto 
	17 -34 lineto 
	-17 -34 lineto 
	-17 -15 lineto 
	-10 -15 lineto 
	-10 20 lineto 
	eofill 
	%?plineend
	
	setcolor 
	%?plinebeg
	-10 20 moveto 
	-5 20 lineto 
	-5 15 lineto 
	10 15 lineto 
	10 -15 lineto 
	17 -15 lineto 
	17 -34 lineto 
	-17 -34 lineto 
	-17 -15 lineto 
	-10 -15 lineto 
	-10 20 lineto 
	stroke 
	%?plineend
	-5 15 moveto 
	-5 10 lineto 
	stroke 
	-5 10 moveto 
	-10 10 lineto 
	stroke 
	-5 10 moveto 
	-5 -15 lineto 
	stroke 
	-10 -15 moveto 
	10 -15 lineto 
	stroke 
	5 -15 moveto 
	5 15 lineto 
	stroke 
	matrix currentmatrix_nlw 
	currentcolor 
	15 -30 translate 
	0 rotate 
	1 1 scale 
	irSlewAngle 3 () 70 false false false false 
	FSstdFont 7 0 
	baValueText002 
	setcolor 
	setmatrix_nlw 
} def
%?partend

%?partdef spWal002
%?fn	spWal002
%?brief	Arbeitsbereichsbegrenzung Anzeige Begrenzungen: Ausladung, Höhe und Drehwerk
%?bbox	-160 -160 159 159
/spWal002 {
	/ixBigVersion exch def	%?brief als große Anzeige einblenden %?use INP %?type BOOL %?dflt false
	/irMaxRadAbs exch def	%?brief maximum radius luffing jib [m] %?use INP %?type REAL %?dflt    0.00
	/irMaxRadius exch def	%?brief maximum radius [m] %?use INP %?type REAL %?dflt    0.00
	/irMinRadius exch def	%?brief minimum radius [m] %?use INP %?type REAL %?dflt    0.00
	/irSlewLimitLeft exch def	%?brief Drehwerksbegrenzung Winkel links %?use INP %?type REAL %?dflt    0.00
	/irSlewLimitRight exch def	%?brief Drehwerksbegrenzung Winkel rechts %?use INP %?type REAL %?dflt    0.00
	/ixLuffJibActive exch def	%?brief Wippspitze anzeigen %?use INP %?type BOOL %?dflt    false
	/ixJibPresel exch def	%?brief Nadel vorgewählt %?use INP %?type BOOL %?dflt    false
	/ixSlewLimitAct exch def	%?brief Drehwerksbegrenzung aktiv %?use INP %?type BOOL %?dflt false
	/ixHightLimitAct exch def	%?brief Kopfhöhenbegrenzung aktiv %?use INP %?type BOOL %?dflt false
	/ixRadiusLimitAct exch def	%?brief Ausladungsbegrenzung aktiv %?use INP %?type BOOL %?dflt false
%?manual_beg
	ixBigVersion { /L_MaxRadPx 230 def } { /L_MaxRadPx 135 def } ifelse			% maximum Radius in Pixel (140 -5(äusserer Rand) -15(Oberwagen (Abstand von innnen (vom Drehmittelpunkt))))
	irMinRadius 0 eq {	/irMinRadius 1 store } if
	irMaxRadius 0 eq {	/irMaxRadius 1 store } if		% Division durch 0 abfangen
	irMaxRadAbs 0 eq {	/irMaxRadAbs 1 store } if		% Division durch 0 abfangen

	/L_CalcPx L_MaxRadPx irMaxRadAbs div def			% Umrechnungsverhältnis m - pixel

	ixRadiusLimitAct ixLuffJibActive not and {
		/L_MaxRadius irMaxRadius L_CalcPx mul def
	} {
		/L_MaxRadius L_MaxRadPx def
	} ifelse
	/L_MinRadius irMinRadius L_CalcPx mul def

	currentcolor
	Grey

	% Äusserste Radiusbegrenzung zeichnen (äusserster Kreis wird immer gezeichnet)
	5 setlinewidth_nlw
	L_MaxRadPx 2 add 0 moveto
	0 0 L_MaxRadPx 2 add 0 360 arc 
	1 setlinewidth_nlw

	ixHightLimitAct {
		L_MinRadius L_MaxRadius gt {
			/L_MinRadius L_MaxRadius store
		} if
		L_MinRadius 0 moveto
		newpath
		0 0 L_MinRadius 0 360 arc 
		eofill
	} {
		L_MinRadius L_MaxRadius gt {
			/L_MinRadius L_MaxRadius store
		} if
		L_MinRadius 0 moveto
		0 0 L_MinRadius 0 360 arc 
	} ifelse
	ixSlewLimitAct {
		matrix currentmatrix
		0 0 moveto
		newpath
		0 0 L_MaxRadPx 3 add irSlewLimitLeft neg 90 add irSlewLimitRight neg 90 add arc			% Den Winkel negieren, da das Koordinatensystem des Gerätes entgegengesetzt dem von PostScript dreht! Hier 90° addieren, da die 0° Linie auf der Y-Achse des Koordinatensystems liegt
		eofill
		0 0 lineto
		setmatrix
	} {
		matrix currentmatrix
		0 0 moveto
		0 0 L_MaxRadPx 3 add irSlewLimitLeft neg 90 add irSlewLimitRight neg 90 add arc			% Den Winkel negieren, da das Koordinatensystem des Gerätes entgegengesetzt dem von PostScript dreht! Hier 90° addieren, da die 0° Linie auf der Y-Achse des Koordinatensystems liegt
		0 0 lineto
		setmatrix
	} ifelse
	setcolor
%?manual_end
	
	matrix currentmatrix_nlw 
	currentcolor 
	-40 -40 translate 
	0 rotate 
	1 1 scale 
	ssWal004 
	setcolor 
	setmatrix_nlw 
	0 0 moveto 
	0 25 lineto 
	stroke 
	0 25 moveto 
	-2 22 lineto 
	stroke 
	0 25 moveto 
	2 22 lineto 
	stroke 
} def
%?partend

%?partdef spWal003
%?fn	spWal003
%?brief	Arbeitsbereichsbegrenzung Anzeige Begrenzungen: Kantenbegrenzung
%?bbox	-160 -160 159 159
/spWal003 {
	/ixBigVersion exch def	%?brief als große Anzeige einblenden %?use INP %?type BOOL %?dflt false
	/ixAdjusAct exch def	%?brief Einstellung/Einlernen aktiv %?use INP %?type BOOL %?dflt false
	/ixLineLimitAct exch def	%?brief Kantenbegrenzung aktiv %?use INP %?type BOOL %?dflt false
	/irLine2Point2Ang exch def	%?brief Begrenzungslinie 2 Winkel Punkt 2 %?use INP %?type REAL %?dflt    0.00
	/irLine2Point1Ang exch def	%?brief Begrenzungslinie 2 Winkel Punkt 1 %?use INP %?type REAL %?dflt    0.00
	/irLine1Point2Ang exch def	%?brief Begrenzungslinie 1 Winkel Punkt 2 %?use INP %?type REAL %?dflt    0.00
	/irLine1Point1Ang exch def	%?brief Begrenzungslinie 1 Winkel Punkt 1 %?use INP %?type REAL %?dflt    0.00
%?manual_beg
	/L_clockwise false def
	/L_phi 0.0 def
	ixBigVersion { /L_MaxRadPx 230 def } { /L_MaxRadPx 135 def } ifelse			% maximum Radius in Pixel (140 -5(äusserer Rand) -15(Oberwagen (Abstand von innnen (vom Drehmittelpunkt))))
	/L_radius L_MaxRadPx 3 add def						% etwas weiter draussen zeichnen, damit sich der Kreisbogen mit der max. Radius Begrezung überschneidet und keine spalten gezeichnet werden
	
	% Winkel aus dem Koordinatensystem des Gerätes in das Koordinatensystem von PostScript ändern
	/irLine2Point2Ang irLine2Point2Ang neg 90 add store
	/irLine2Point1Ang irLine2Point1Ang neg 90 add store
	/irLine1Point2Ang irLine1Point2Ang neg 90 add store
	/irLine1Point1Ang irLine1Point1Ang neg 90 add store

	currentcolor
	Grey

	matrix currentmatrix
	/L_phi irLine1Point1Ang irLine1Point2Ang sub store
	L_phi 0 lt L_phi -180 gt and L_phi 180 gt or { /L_clockwise true store } { /L_clockwise false store } ifelse
	irLine1Point1Ang rotate
	L_radius 0 moveto
	setmatrix
	matrix currentmatrix
	irLine1Point2Ang rotate
	ixLineLimitAct {
		L_clockwise {
			newpath
			0 0 L_radius 0 L_phi arcn
			eofill
		} {
			newpath
			0 0 L_radius 0 L_phi arc
			eofill
		} ifelse
	} { 
		ixAdjusAct { Orange } if
		L_radius 0 lineto
	} ifelse
	setmatrix

	matrix currentmatrix
	/L_phi irLine2Point1Ang irLine2Point2Ang sub store
	L_phi 0 lt L_phi -180 gt and L_phi 180 gt or { /L_clockwise true store } { /L_clockwise false store } ifelse
	irLine2Point1Ang rotate
	L_radius 0 moveto
	setmatrix
	matrix currentmatrix
	irLine2Point2Ang rotate
	ixLineLimitAct {
		L_clockwise {
			newpath
			0 0 L_radius 0 L_phi arcn
			eofill
		} {
			newpath
			0 0 L_radius 0 L_phi arc
			eofill
		} ifelse
	} { 
		ixAdjusAct { LightBlue } if
		L_radius 0 lineto
	} ifelse
	setmatrix

	setcolor
%?manual_end
	
} def
%?partend

%?partdef spWal004
%?fn	spWal004
%?brief	Arbeitsbereichsbegrenzung Anzeige Begrenzungen: Sektorbegrenzung über drei Punkte
%?bbox	-160 -160 159 159
/spWal004 {
	/ixBigVersion exch def	%?brief als große Anzeige einblenden %?use INP %?type BOOL %?dflt false
	/ixAdjusAct exch def	%?brief Einstellung/Einlernen aktiv %?use INP %?type BOOL %?dflt false
	/ixSectLimitAct exch def	%?brief Sektorbegrenzung aktiv %?use INP %?type BOOL %?dflt false
	/irPoint1Radius exch def	%?brief Sektor Punkt 1 Radius %?use INP %?type REAL %?dflt    0.00
	/irPoint1Angle exch def	%?brief Sektor Punkt 1 Winkel %?use INP %?type REAL %?dflt    0.00
	/irPoint2Radius exch def	%?brief Sektor Punkt 2 Radius %?use INP %?type REAL %?dflt    0.00
	/irPoint2Angle exch def	%?brief Sektor Punkt 2 Winkel %?use INP %?type REAL %?dflt    0.00
	/irPoint3Radius exch def	%?brief Sektor Punkt 3 Radius %?use INP %?type REAL %?dflt    0.00
	/irPoint3Angle exch def	%?brief Sektor Punkt 3 Winkel %?use INP %?type REAL %?dflt    0.00
	/irMaxRadius exch def	%?brief maximum radius [m] %?use INP %?type REAL %?dflt    0.00
%?manual_beg
	irPoint1Radius irMaxRadius le irPoint2Radius irMaxRadius le irPoint3Radius irMaxRadius le and and {

		/L_phi 0.0 def
	
		ixBigVersion { /L_MaxRadPx 230 def } { /L_MaxRadPx 135 def } ifelse			% maximum Radius in Pixel (140 -5(äusserer Rand) -15(Oberwagen (Abstand von innnen (vom Drehmittelpunkt))))
		/L_radius L_MaxRadPx 3 add def						% etwas weiter draussen zeichnen, damit sich der Kreisbogen mit der max. Radius Begrezung überschneidet und keine spalten gezeichnet werden
		irMaxRadius 0 eq { /irMaxRadius 1 store } if		% Division durch 0 abfangen
		/L_CalcPx L_MaxRadPx irMaxRadius div def			% Umrechnungsverhältnis m - pixel
		
		% Winkel aus dem Koordinatensystem des Gerätes in das Koordinatensystem von PostScript ändern
		irPoint1Angle neg 90 add dup 0 lt { 360 add } if
		/irPoint1Angle exch store
		irPoint2Angle neg 90 add dup 0 lt { 360 add } if
		/irPoint2Angle exch store
		irPoint3Angle neg 90 add dup 0 lt { 360 add } if
		/irPoint3Angle exch store
	
		/L_Point1Dist irPoint1Radius L_CalcPx mul def
		/L_Point2Dist irPoint2Radius L_CalcPx mul def
		/L_Point3Dist irPoint3Radius L_CalcPx mul def
	
		currentcolor
		Grey
	
		% ACHTUNG: Hier herrscht das Koordinatensystem vom POSTSCRIPT (nicht jenes des Gerätes)
		ixSectLimitAct {
			% Der Kreissektor der drei Punkte wird unter zweimal gefüllt. Das Füllen in einem Schritt ist sehr kompliziert, da die drei Punkte irgendwie im System liegen können (Das ermittelt, in welche Richtung der abschliessende ARC gezeichnet werden muß ist zu aufwendig)
			matrix currentmatrix
			irPoint2Angle irPoint1Angle gt {
				newpath
				matrix currentmatrix
				irPoint1Angle rotate						% Drehung auf Winkel des Punkt 1
				L_radius 0 moveto							% maximaler Radius beim Winkel Punkt 1
				L_Point1Dist 0 lineto						% Punkt 1
				setmatrix
				irPoint2Angle rotate						% Drehung auf Winkel Punkt 2 (von erneut Null weg damit sich kein Rundungsfehler der Drehung addiert)
				L_Point2Dist 0 lineto						% Punkt 2
				L_radius 0 lineto							% maximaler Radius beim Winkel Punkt 2
				% Abschliessenden Kreis zeichnen
				/L_phi irPoint2Angle irPoint1Angle sub store
				L_phi 180 gt {
					0 0 L_radius 0 360 L_phi sub arc
				} {
					0 0 L_radius 0 L_phi neg arcn
				} ifelse
				eofill
			} {
				newpath
				matrix currentmatrix
				irPoint2Angle rotate						% Drehung auf Winkel des Punkt 2
				L_radius 0 moveto							% maximaler Radius beim Winkel Punkt 2
				L_Point2Dist 0 lineto						% Punkt 2
				setmatrix
				irPoint1Angle rotate						% Drehung auf Winkel Punkt 1 (von erneut Null weg damit sich kein Rundungsfehler der Drehung addiert)
				L_Point1Dist 0 lineto						% Punkt 1
				L_radius 0 lineto							% maximaler Radius beim Winkel Punkt 1
				/L_phi irPoint1Angle irPoint2Angle sub store
				L_phi 180 gt {
					0 0 L_radius 0 360 L_phi sub arc
				} {
					0 0 L_radius 0 L_phi neg arcn
				} ifelse
				eofill
			} ifelse
			setmatrix
			matrix currentmatrix
			irPoint3Angle irPoint2Angle gt {
				newpath
				matrix currentmatrix
				irPoint2Angle rotate						% Drehung auf Winkel des Punkt 2
				L_radius 0 moveto							% maximaler Radius beim Winkel Punkt 2
				L_Point2Dist 0 lineto						% Punkt 2
				setmatrix
				irPoint3Angle rotate						% Drehung auf Winkel Punkt 3 (von erneut Null weg damit sich kein Rundungsfehler der Drehung addiert)
				L_Point3Dist 0 lineto						% Punkt 3
				L_radius 0 lineto							% maximaler Radius beim Winkel Punkt 3
				% Abschliessenden Kreis zeichnen
				/L_phi irPoint3Angle irPoint2Angle sub store
				L_phi 180 gt {
					0 0 L_radius 0 360 L_phi sub arc
				} {
					0 0 L_radius 0 L_phi neg arcn
				} ifelse
				eofill
			} {
				newpath
				matrix currentmatrix
				irPoint3Angle rotate						% Drehung auf Winkel des Punkt 3
				L_radius 0 moveto							% maximaler Radius beim Winkel Punkt 3
				L_Point3Dist 0 lineto						% Punkt 3
				setmatrix
				irPoint2Angle rotate						% Drehung auf Winkel Punkt 2 (von erneut Null weg damit sich kein Rundungsfehler der Drehung addiert)
				L_Point2Dist 0 lineto						% Punkt 2
				L_radius 0 lineto							% maximaler Radius beim Winkel Punkt 2
				/L_phi irPoint2Angle irPoint3Angle sub store
				L_phi 180 gt {
					0 0 L_radius 0 360 L_phi sub arc
				} {
					0 0 L_radius 0 L_phi neg arcn
				} ifelse
				eofill
			} ifelse
			setmatrix
		} {
			currentcolor
			matrix currentmatrix
			irPoint1Angle rotate
			L_radius 0 moveto
			L_Point1Dist 0 lineto
			stroke
			setmatrix
			ixAdjusAct { Orange } if
			matrix currentmatrix
			irPoint2Angle rotate
			L_Point2Dist 0 lineto
			stroke
			setmatrix
			ixAdjusAct { LightBlue } if
			matrix currentmatrix
			irPoint3Angle rotate
			L_Point3Dist 0 lineto
			Grey
			L_radius 0 lineto
			stroke
			setmatrix
			setcolor
		} ifelse
	
		setcolor
	
	} if
%?manual_end
	
} def
%?partend

%?partdef spMachine101
%?fn	spMachine101
%?brief	Bewegliche Anzeige des Gerätes seitlich: LB ohne Anbaugerät
%?bbox	0 0 319 479
/spMachine101 {
	/ixLrhBoomKinem exch def	%?brief LRH boom kinematics %?use INP %?type BOOL %?dflt false
	/ixTriaWithHoldArm exch def	%?brief triangual kinematic with holding arm %?use INP %?type BOOL %?dflt false
	/ixParaWithHoldArm exch def	%?brief paralell kinematic with holding arm %?use INP %?type BOOL %?dflt false
	/ixShowNoRear exch def	%?brief show the small crawler (no rear) %?use INP %?type BOOL %?dflt false
	/irDummy exch def	%?brief dummy input %?use INP %?type REAL %?dflt    0.00
	/irLeaderAngle exch def	%?brief Y angle of the leader [°] %?use INP %?type REAL %?dflt    0.00
	ixLrhBoomKinem false eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		80 0 translate 
		0 rotate 
		1 1 scale 
		ssMachinePart101 
		setcolor 
		setmatrix_nlw 
	} if 
	ixShowNoRear not 
	ixLrhBoomKinem not and {	
		matrix currentmatrix_nlw 
		currentcolor 
		160 0 translate 
		0 rotate 
		1 1 scale 
		ssMachinePart102 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	ixParaWithHoldArm not 
	ixTriaWithHoldArm not and 
	ixLrhBoomKinem not and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		131 38 translate 
		0 rotate 
		1 1 scale 
		ssMachinePart104 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	ixParaWithHoldArm not 
	ixTriaWithHoldArm not and 
	ixLrhBoomKinem not and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		103 127 translate 
		irLeaderAngle 
		rotate 
		1 1 scale 
		ssMachinePart103 
		setcolor 
		setmatrix_nlw 
	} if 
%?manual_beg
	matrix currentmatrix_nlw 
	ixParaWithHoldArm true eq {
		115 122 translate			% LRB 125: Drehpunkt des Mäklers setzten (muss im Part immer 0 0 sein)
	} {
		ixTriaWithHoldArm true eq {
			115 85 translate 			% LRB 155
		} {
			ixLrhBoomKinem true eq {
				96 241 translate			% LRH
			} {				
				103 127 translate 			% LB
			} ifelse
		} ifelse
	} ifelse
	irLeaderAngle 
	rotate 
	ixParaWithHoldArm true eq {
		5 89 transform				% LRB 125: Zielpunkt des Zylinders zwischen Parallelogramm und gedrehtem Mäkler am Mäkler seztzen (oberer Bolzpunkt)
	} {
		ixTriaWithHoldArm true eq {
			4 105 transform				% LRB 155
		} {
		ixLrhBoomKinem true eq {
				-1 -147 transform			% LRH
			} {
				-5 90 transform				% LB
			} ifelse
		} ifelse
	} ifelse
	/Ly exch def
	/Lx exch def
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	131 38 translate 			% Koordinatensystem, in dem das Paralleleogramm gesetzt wurde herstellen
	ixParaWithHoldArm true eq {
		9 77 translate				% LRB 125: Koordinatensystem auf den Bolzenpunkt des Zylinders am Parallelogramm (unten) setzen
	} {
		ixTriaWithHoldArm true eq {
			24 24 translate				% LRB 155	
		} {
			ixLrhBoomKinem true eq {
				-19 -7 translate				% LRH				
			} {	
				5 85 translate				% LB
			} ifelse
		} ifelse
	} ifelse
	Lx Ly itransform			% Punkt des Zylinders am Mäkler ins aktuelle Koordinatensystem holen
	exch atan					% Winkel des Zylinders zwischen Parallelogramm und gedrehtem Mäkler herausrechnen
	rotate						% Koordinatensystem in Richtung des Zylinders drehen
	Lx Ly itransform			% Punkt des Zylinders am Mäkler ins aktuelle Koordinatensystem holen
	pop							% X Koordinate wird nicht benötigt
	/Llen exch abs def			% A Koordinate für die Zylinderlänge übernehmen
	% Zylinder Kolbenstange zeichnen
	ixTriaWithHoldArm true eq {
		0 2 moveto
		Llen 2 lineto
	} {		
		59 1 moveto
		Llen 1 lineto 
	} ifelse
	Llen 1 lineto 
	stroke
	ixTriaWithHoldArm true eq {
		0 -2 moveto
		Llen -1 lineto
	} {		
		59 -1 moveto
		Llen -1 lineto 
	} ifelse
	 
	stroke
	ixTriaWithHoldArm false eq {
		% Zylinder Gehäuse zeichnen
		4 3 moveto 
		59 3 lineto 
		stroke 
		59 3 moveto 
		59 -3 lineto 
		stroke 
		59 -3 moveto 
		4 -3 lineto 
		stroke 
		4 -3 moveto 
		4 3 lineto 
		stroke 
		4 1 moveto 
		-4 4 -4 -4 4 -1 curveto 
		stroke 
	 
	} if 
	setmatrix_nlw 
%?manual_end

	ixParaWithHoldArm ixTriaWithHoldArm not and {	
		matrix currentmatrix_nlw 
		currentcolor 
		131 38 translate 
		0 rotate 
		1 1 scale 
		ssMachinePart121 
		setcolor 
		setmatrix_nlw 
	} if 
	ixParaWithHoldArm ixTriaWithHoldArm not and {	
		matrix currentmatrix_nlw 
		currentcolor 
		115 122 translate 
		irLeaderAngle 
		rotate 
		1 1 scale 
		ssMachinePart122 
		setcolor 
		setmatrix_nlw 
	} if 
	ixParaWithHoldArm not 
	ixTriaWithHoldArm and {	
		matrix currentmatrix_nlw 
		currentcolor 
		115 85 translate 
		irLeaderAngle 
		rotate 
		1 1 scale 
		ssMachinePart124 
		setcolor 
		setmatrix_nlw 
	} if 
	ixParaWithHoldArm not 
	ixTriaWithHoldArm and {	
		matrix currentmatrix_nlw 
		currentcolor 
		126 38 translate 
		0 rotate 
		1 1 scale 
		ssMachinePart125 
		setcolor 
		setmatrix_nlw 
	} if 
	ixLrhBoomKinem true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		92 0 translate 
		0 rotate 
		0.93 0.93 scale 
		ssMachinePart101 
		setcolor 
		setmatrix_nlw 
	} if 
	ixLrhBoomKinem true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		96 245 translate 
		irLeaderAngle 
		rotate 
		1 1 scale 
		ssMachinePart126 
		setcolor 
		setmatrix_nlw 
	} if 
	ixLrhBoomKinem true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		134 37 translate 
		0 rotate 
		1 1 scale 
		ssMachinePart127 
		setcolor 
		setmatrix_nlw 
	} if 
} def
%?partend

%?partdef spMachine102
%?fn	spMachine102
%?brief	Bewegliche Anzeige des Gerätes von hinten
%?bbox	0 0 159 479
/spMachine102 {
	/irDummy exch def	%?brief dummy input %?use INP %?type REAL %?dflt    0.00
	/irLeaderAngle exch def	%?brief X angle of the leader [°] %?use INP %?type REAL %?dflt    0.00
	matrix currentmatrix_nlw 
	currentcolor 
	82 115 translate 
	irLeaderAngle neg 
	rotate 
	1 1 scale 
	ssMachinePart105 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	40 0 translate 
	0 rotate 
	1 1 scale 
	ssMachinePart109 
	setcolor 
	setmatrix_nlw 
%?manual_beg
	% linker Zylinder zeichnen
	matrix currentmatrix_nlw 
	82 115 translate 
	irLeaderAngle neg 
	rotate 
	-7 95 transform				% Zielpunkt des Zylinders zwischen Parallelogramm und gedrehtem Mäkler am Mäkler seztzen
	/Ly exch def
	/Lx exch def
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	40 0 translate 				% Koordinatensystem, in dem das Paralleleogramm gesetzt wurde herstellen
	29 111 translate			% Koordinatensystem auf den Bolzenpunkt des Zalinders am parallelogramm setzen
	Lx Ly itransform			% Punkt des Zylinders am Mäkler ins aktuelle Koordinatensystem holen
	exch atan					% Winkel des Zylinders zwischen Parallelogramm und gedrehtem Mäkler herausrechnen
	rotate						% Koordinatensystem in Richtung des Zylinders drehen
	Lx Ly itransform			% Punkt des Zylinders am Mäkler ins aktuelle Koordinatensystem holen
	pop							% X Koordinate wird nicht benötigt
	/Llen exch abs def			% A Koordinate für die Zylinderlänge übernehmen
	% Zylinder Kolbenstange zeichnen
	currentcolor
	Invisible
	3 setlinewidth_nlw
	59 0 moveto
	Llen 2 sub 0 lineto 
	1 setlinewidth_nlw
	setcolor
	59 1 moveto
	Llen 1 lineto 
	stroke
	59 -1 moveto
	Llen -1 lineto 
	stroke
	% Zylinder Gehäuse zeichnen
	4 1 moveto 
	0 1 lineto 
	stroke 
	4 -1 moveto 
	0 -1 lineto 
	stroke 
	currentcolor
	Invisible
	%?plinebeg
	newpath
	4 3 moveto 
	59 3 lineto 
	59 -3 lineto 
	4 -3 lineto 
	4 3 lineto 
	eofill 
	%?plineend
	setcolor
	%?plinebeg
	4 3 moveto 
	59 3 lineto 
	59 -3 lineto 
	4 -3 lineto 
	4 3 lineto 
	stroke 
	%?plineend
	setmatrix_nlw 

	% rechter Zylinder zeichnen
	matrix currentmatrix_nlw 
	82 115 translate 
	irLeaderAngle neg 
	rotate 
	7 95 transform				% Zielpunkt des Zylinders zwischen Parallelogramm und gedrehtem Mäkler am Mäkler seztzen
	/Ly exch def
	/Lx exch def
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	40 0 translate 				% Koordinatensystem, in dem das Paralleleogramm gesetzt wurde herstellen
	55 111 translate			% Koordinatensystem auf den Bolzenpunkt des Zalinders am parallelogramm setzen
	Lx Ly itransform			% Punkt des Zylinders am Mäkler ins aktuelle Koordinatensystem holen
	exch atan					% Winkel des Zylinders zwischen Parallelogramm und gedrehtem Mäkler herausrechnen
	rotate						% Koordinatensystem in Richtung des Zylinders drehen
	Lx Ly itransform			% Punkt des Zylinders am Mäkler ins aktuelle Koordinatensystem holen
	pop							% X Koordinate wird nicht benötigt
	/Llen exch abs def			% A Koordinate für die Zylinderlänge übernehmen
	% Zylinder Kolbenstange zeichnen
	currentcolor
	Invisible
	3 setlinewidth_nlw
	59 0 moveto
	Llen 2 sub 0 lineto 
	1 setlinewidth_nlw
	setcolor
	59 1 moveto
	Llen 1 lineto 
	stroke
	59 -1 moveto
	Llen -1 lineto 
	stroke
	% Zylinder Gehäuse zeichnen
	4 1 moveto 
	0 1 lineto 
	stroke 
	4 -1 moveto 
	0 -1 lineto 
	stroke 
	currentcolor
	Invisible
	%?plinebeg
	newpath
	4 3 moveto 
	59 3 lineto 
	59 -3 lineto 
	4 -3 lineto 
	4 3 lineto 
	eofill 
	%?plineend
	setcolor
	%?plinebeg
	4 3 moveto 
	59 3 lineto 
	59 -3 lineto 
	4 -3 lineto 
	4 3 lineto 
	stroke 
	%?plineend
	setmatrix_nlw 
%?manual_end
	
} def
%?partend

%?partdef spGeneral001
%?fn	spGeneral001
%?brief	Kriechgang/Schnellgang
%?bbox	0 0 79 79
/spGeneral001 {
	/ixSlow exch def	%?brief langsam %?use INP %?type BOOL %?dflt false
	3 setlinewidth_nlw 
	40 77 moveto 
	30 67 lineto 
	stroke 
	30 67 moveto 
	35 67 lineto 
	stroke 
	40 77 moveto 
	50 67 lineto 
	stroke 
	50 67 moveto 
	44 67 lineto 
	stroke 
	44 67 moveto 
	44 60 lineto 
	stroke 
	40 2 moveto 
	50 12 lineto 
	stroke 
	50 12 moveto 
	45 12 lineto 
	stroke 
	45 12 moveto 
	45 21 lineto 
	stroke 
	40 2 moveto 
	30 12 lineto 
	stroke 
	30 12 moveto 
	35 12 lineto 
	stroke 
	35 12 moveto 
	35 21 lineto 
	stroke 
	35 67 moveto 
	35 62 lineto 
	stroke 
	1 setlinewidth_nlw 
	ixSlow false eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		19 20 translate 
		0 rotate 
		0.50 0.50 scale 
		gsDrive007 
		setcolor 
		setmatrix_nlw 
	} if 
	ixSlow true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		5 5 translate 
		0 rotate 
		0.87 0.87 scale 
		gsDrive006 
		setcolor 
		setmatrix_nlw 
	} if 
} def
%?partend


%?partdef spHydraulic001
%?fn	spHydraulic001
%?brief	Aggregatüberwachung klein
%?bbox	0 0 79 239
/spHydraulic001 {
	/irPumpPressure exch def	%?brief Pumpendruck %?use INP %?type REAL %?dflt    0.00
	/ixHydrOilHeating exch def	%?brief Hydraulikölheizung ist aktiv %?use INP %?type BOOL %?dflt false
	/LRpumpPressurePsi 0 def	%?brief Pumpendruck %?use LOC %?type REAL %?dflt    0.00
	matrix currentmatrix_nlw 
	currentcolor 
	0 0 translate 
	0 rotate 
	1 1 scale 
	irPumpPressure 
	calc_psi 
	/LRpumpPressurePsi exch store 
	setcolor 
	setmatrix_nlw 
	MXchangeUnitPress false eq {	
	matrix currentmatrix_nlw 
	currentcolor 
	0 80 translate 
	0 rotate 
	1 1 scale 
	irPumpPressure (bar) 0 400 false true false false false false 380 400 0 0 4 15 120 true false 0 false 0 0 false 1 
	baBar006 
	setcolor 
	setmatrix_nlw 
	} if 
	MXchangeUnitPress true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 80 translate 
		0 rotate 
		1 1 scale 
		LRpumpPressurePsi (psi) 0 6000 false true false false false false 380 400 0 0 6 15 120 true false 0 false 0 0 false 1 
		baBar006 
		setcolor 
		setmatrix_nlw 
	} if 
	ixHydrOilHeating not {	
	matrix currentmatrix_nlw 
	currentcolor 
	0 0 translate 
	0 rotate 
	1 1 scale 
	gsHydraulic010 
	setcolor 
	setmatrix_nlw 
	} if 
	ixHydrOilHeating {	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 0 0 translate 
		0 rotate 
		1 1 scale 
		gsHydraulic024 
		setcolor 
		setmatrix_nlw 
	} if 
} def
%?partend

%?partdef spLml001
%?fn	spLml001
%?brief	Bodendruckanzeige Werte für 3 fixe Winkel
%?bbox	0 0 159 119
/spLml001 {
	/ixImperialUnit exch def	%?brief imperial units selected %?use INP %?type BOOL %?dflt false
	/irGroundPres90 exch def	%?brief ground pressure at 90 degree %?use INP %?type REAL %?dflt    0.00
	/irGroundPres45 exch def	%?brief ground pressure at 45 degree %?use INP %?type REAL %?dflt    0.00
	/irGroundPres0 exch def	%?brief ground pressure at 0 degree %?use INP %?type REAL %?dflt    0.00
	matrix currentmatrix_nlw 
	currentcolor 
	LightGrey 94 6 translate 
	0 rotate 
	0.75 0.75 scale 
	ssGeneral012 
	setcolor 
	setmatrix_nlw 
	ixImperialUnit false eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		63 12 translate 
		0 rotate 
		1 1 scale 
		(bar) 
		FSmidFont 9 
		baText001 
		setcolor 
		setmatrix_nlw 
	} if 
	ixImperialUnit true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		63 11 translate 
		0 rotate 
		1 1 scale 
		(psi) 
		FSbigFont 9 
		baText001 
		setcolor 
		setmatrix_nlw 
	} if 
	matrix currentmatrix_nlw 
	currentcolor 
	120 91 translate 
	0 rotate 
	1 1 scale 
	irGroundPres0 3.10 30 false false 9 
	FSbigFont false 
	baValue005 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	53 67 translate 
	0 rotate 
	1 1 scale 
	irGroundPres45 3.10 30 false false 9 
	FSbigFont false 
	baValue005 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	53 34 translate 
	0 rotate 
	1 1 scale 
	irGroundPres90 3.10 30 false false 9 
	FSbigFont false 
	baValue005 
	setcolor 
	setmatrix_nlw 
	124 39 moveto 
	124 79 lineto 
	stroke 
	121 36 moveto 
	81 36 lineto 
	stroke 
	87 73 moveto 
	97 70 lineto 
	stroke 
	87 73 moveto 
	90 63 lineto 
	stroke 
	91 31 moveto 
	81 36 lineto 
	stroke 
	81 36 moveto 
	91 41 lineto 
	stroke 
	119 69 moveto 
	124 79 lineto 
	stroke 
	129 69 moveto 
	124 79 lineto 
	stroke 
	122 38 moveto 
	87 73 lineto 
	stroke 
	2 2 156 116 rectstroke 
} def
%?partend

%?partdef spWal005
%?fn	spWal005
%?brief	Arbeitsbereichsbegrenzung Anzeige Stop incl. Entfernung
%?bbox	0 0 159 159
/spWal005 {
	/ixSlewingLimRight exch def	%?brief slewing limitation right %?use INP %?type BOOL %?dflt false
	/ixSlewingLimLeft exch def	%?brief slewing limitation left %?use INP %?type BOOL %?dflt false
	/ixRadiusLimLuJi exch def	%?brief radius limitation luffing jib %?use INP %?type BOOL %?dflt false
	/ixHightLimLuJi exch def	%?brief hight limitation luffing jib %?use INP %?type BOOL %?dflt false
	/ixRadiusLimMaBo exch def	%?brief radius limitation main boom %?use INP %?type BOOL %?dflt false
	/ixHightLimMaBo exch def	%?brief hight limitation main boom %?use INP %?type BOOL %?dflt false
	/irDistToStop exch def	%?brief distance to stop %?use INP %?type REAL %?dflt    0.00
	/LXdistInvers 0 def	%?brief distance to stop inverted 5 to 0 %?use LOC %?type REAL %?dflt    0.00
%?manual_beg
	5 irDistToStop sub
	dup 0 lt { pop 0 } if
	/LXdistInvers exch store
%?manual_end
	
	ixSlewingLimLeft not 
	ixSlewingLimRight not and {	
		matrix currentmatrix_nlw 
		currentcolor 
		LightGrey 0 80 translate 
		0 rotate 
		1 1 scale 
		gsLimit021 
		setcolor 
		setmatrix_nlw 
	} if 
	ixSlewingLimRight ixSlewingLimLeft or {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 80 translate 
		0 rotate 
		1 1 scale 
		ssWal003 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	ixHightLimMaBo ixHightLimLuJi or 
	ixRadiusLimMaBo not and 
	ixRadiusLimLuJi not and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		80 0 translate 
		0 rotate 
		1 1 scale 
		ssWal001 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	ixRadiusLimMaBo ixRadiusLimLuJi or 
	ixHightLimMaBo not and 
	ixHightLimLuJi not and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		80 0 translate 
		0 rotate 
		1 1 scale 
		ssWal002 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	ixHightLimMaBo ixHightLimLuJi or 
	ixRadiusLimMaBo ixRadiusLimLuJi or and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		80 0 translate 
		0 rotate 
		1 1 scale 
		gsLimit001 
		setcolor 
		setmatrix_nlw 
	} if 
	matrix currentmatrix_nlw 
	currentcolor 
	130 150 translate 
	0 rotate 
	1 1 scale 
	(stop) 
	FSstdFont 0 
	baText001 
	setcolor 
	setmatrix_nlw 
	135 85 moveto 
	135 140 lineto 
	stroke 
	135 140 moveto 
	130 125 lineto 
	stroke 
	135 140 moveto 
	140 125 lineto 
	stroke 
	matrix currentmatrix_nlw 
	currentcolor 
	100 85 translate 
	0 rotate 
	1 1 scale 
	LXdistInvers 0 5 4 5 20 55 true true false false true 0 
	baBar005 
	setcolor 
	setmatrix_nlw 
} def
%?partend

%?partdef spWinch012
%?fn	spWinch012
%?brief	Seillängenmessung Einstellungen Kellywinde
%?bbox	0 0 319 79
/spWinch012 {
	/irRopeLength exch def	%?brief Seillänge %?use INP %?type REAL %?dflt    0.00
	matrix currentmatrix_nlw 
	currentcolor 
	305 60 translate 
	0 rotate 
	1 1 scale 
	(2) 
	FSfatFont 0 
	baText001 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	305 20 translate 
	0 rotate 
	1 1 scale 
	(1) 
	FSfatFont 0 
	baText001 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	164 0 translate 
	0 rotate 
	1 1 scale 
	gsGeneral076 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	230 0 translate 
	0 rotate 
	1 1 scale 
	ssGeneral013 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	115 35 translate 
	0 rotate 
	1 1 scale 
	irRopeLength 3.20 false false 
	FSmidFont 1 
	baValueDist001 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	30 13 translate 
	0 rotate 
	0.87 0.87 scale 
	gsWinch001 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	-7 2 translate 
	0 rotate 
	0.50 0.50 scale 
	ssMachinePart107 
	setcolor 
	setmatrix_nlw 
	15 40 moveto 
	22 40 lineto 
	stroke 
	15 40 moveto 
	15 67 lineto 
	stroke 
	22 40 moveto 
	22 67 lineto 
	stroke 
	24 67 moveto 
	13 67 lineto 
	stroke 
	13 67 moveto 
	13 76 lineto 
	stroke 
	24 67 moveto 
	24 76 lineto 
	stroke 
} def
%?partend

%?partdef spWinch013
%?fn	spWinch013
%?brief	Seillängenmessung Einstellungen Vorschub
%?bbox	0 0 239 79
/spWinch013 {
	/irRopeLength exch def	%?brief Seillänge %?use INP %?type REAL %?dflt    0.00
	matrix currentmatrix_nlw 
	currentcolor 
	164 0 translate 
	0 rotate 
	1 1 scale 
	gsGeneral076 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	115 35 translate 
	0 rotate 
	1 1 scale 
	irRopeLength 3.20 false false 
	FSmidFont 1 
	baValueDist001 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	30 13 translate 
	0 rotate 
	0.87 0.87 scale 
	gsWinch001 
	setcolor 
	setmatrix_nlw 
	3 setlinewidth_nlw 
	33 70 moveto 
	33 10 lineto 
	stroke 
	15 61 moveto 
	15 70 lineto 
	stroke 
	15 15 moveto 
	15 10 lineto 
	stroke 
	1 setlinewidth_nlw 
	9 60 moveto 
	9 16 lineto 
	stroke 
	27.60 66 moveto 
	24 66 3.60 0 360 arc 
	stroke 
	27.60 40 moveto 
	24 40 3.60 0 360 arc 
	stroke 
	27.60 15 moveto 
	24 15 3.60 0 360 arc 
	stroke 
	9 60 moveto 
	18 60 lineto 
	stroke 
	18 60 moveto 
	18 52 lineto 
	stroke 
	18 52 moveto 
	14 48 lineto 
	stroke 
	18 25 moveto 
	18 16 lineto 
	stroke 
	18 16 moveto 
	9 16 lineto 
	stroke 
	14 29 moveto 
	18 25 lineto 
	stroke 
	14 48 moveto 
	14 29 lineto 
	stroke 
	15 49 moveto 
	15 28 lineto 
	stroke 
} def
%?partend

%?partdef spStatus005
%?fn	spStatus005
%?brief	Endschaltersymbole SPIE Fräse
%?bbox	0 0 79 79
/spStatus005 {
	/irActiveNumber exch def	%?brief limit switch activated symbol number %?use INP %?type REAL %?dflt    0.00
	irActiveNumber 1 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		gsLimit001 
		setcolor 
		setmatrix_nlw 
	} if 
	irActiveNumber 2 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		ssLimit028 
		setcolor 
		setmatrix_nlw 
	} if 
	irActiveNumber 3 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		ssLimit030 
		setcolor 
		setmatrix_nlw 
	} if 
	irActiveNumber 4 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		ssLimit031 
		setcolor 
		setmatrix_nlw 
	} if 
} def
%?partend

%?partdef spGeneral003
%?fn	spGeneral003
%?brief	Drehwerk Winkelgeberabgleich
%?bbox	0 0 159 79
/spGeneral003 {
	/irAngAnalog exch def	%?brief analoger Winkel %?use INP %?type REAL %?dflt    0.00
	/irAngIncr exch def	%?brief increment Winkel %?use INP %?type REAL %?dflt    0.00
	/ixAngError exch def	%?brief Winkelabweichung %?use INP %?type BOOL %?dflt false
	matrix currentmatrix_nlw 
	currentcolor 
	105 45 translate 
	0 rotate 
	1 1 scale 
	irAngAnalog 3.10 (Â°) false false 
	FSmidFont 1 
	baValue001 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	105 15 translate 
	0 rotate 
	1 1 scale 
	irAngIncr 3.10 (Â°) false 
	ixAngError FSmidFont 1 
	baValue001 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	-5 -10 translate 
	0 rotate 
	1 1 scale 
	ssGeneral048 
	setcolor 
	setmatrix_nlw 
	35 30 moveto 
	35 75 lineto 
	stroke 
	35 30 moveto 
	40 35 lineto 
	stroke 
	45 40 moveto 
	50 45 lineto 
	stroke 
	55 50 moveto 
	60 55 lineto 
	stroke 
	65 60 moveto 
	70 65 lineto 
	stroke 
	35 70 moveto 
	35 30 40 90 45 arcn 
	stroke 
	63 58 moveto 
	58 68 lineto 
	stroke 
	63 58 moveto 
	51 61 lineto 
	stroke 
	130 45 moveto 
	140 45 lineto 
	stroke 
	140 45 moveto 
	155 60 lineto 
	stroke 
	130 20 moveto 
	135 20 lineto 
	stroke 
	135 20 moveto 
	135 25 lineto 
	stroke 
	135 25 moveto 
	140 25 lineto 
	stroke 
	140 25 moveto 
	140 20 lineto 
	stroke 
	140 20 moveto 
	145 20 lineto 
	stroke 
	145 20 moveto 
	145 25 lineto 
	stroke 
	145 25 moveto 
	150 25 lineto 
	stroke 
	150 25 moveto 
	150 20 lineto 
	stroke 
	150 20 moveto 
	155 20 lineto 
	stroke 
} def
%?partend

%?partdef spGeneral004
%?fn	spGeneral004
%?brief	Drehwerk Winkelabgleich Offset
%?bbox	0 0 159 79
/spGeneral004 {
	/irAngAnalog exch def	%?brief analoger Winkel %?use INP %?type REAL %?dflt    0.00
	/irAngOffset exch def	%?brief offset Winkel %?use INP %?type REAL %?dflt    0.00
	matrix currentmatrix_nlw 
	currentcolor 
	125 10 translate 
	0 rotate 
	1 1 scale 
	irAngAnalog 3.10 (Â°) false false 
	FSfatFont 1 
	baValue001 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	120 60 translate 
	0 rotate 
	1 1 scale 
	irAngOffset 3.10 (Â°) false false 
	FSmidFont 1 
	baValue001 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	-5 -10 translate 
	0 rotate 
	1 1 scale 
	ssGeneral048 
	setcolor 
	setmatrix_nlw 
	35 30 moveto 
	35 75 lineto 
	stroke 
	35 30 moveto 
	40 35 lineto 
	stroke 
	45 40 moveto 
	50 45 lineto 
	stroke 
	55 50 moveto 
	60 55 lineto 
	stroke 
	65 60 moveto 
	70 65 lineto 
	stroke 
	35 70 moveto 
	35 30 40 90 45 arcn 
	stroke 
	45 72 moveto 
	35 70 lineto 
	stroke 
	43 66 moveto 
	35 70 lineto 
	stroke 
	70 39 moveto 
	MidFont (offset) 
	show_utf8 
} def
%?partend

%?partdef spGeneral005
%?fn	spGeneral005
%?brief	Service system: graphische Anzeige der Servicestunden
%?bbox	0 0 479 119
/spGeneral005 {
	/idBarLength exch def	%?brief length of the bar [pixel] %?use INP %?type DINT %?dflt 400
	/idBarWide exch def	%?brief width of the bar [pixel] %?use INP %?type DINT %?dflt 25
	/irAcknBef exch def	%?brief Zeitbereich Service Bestätigung vor Servicezeitpunkt %?use INP %?type REAL %?dflt  100.00
	/irInterval exch def	%?brief Zeitbereich Service Intervallstunden %?use INP %?type REAL %?dflt  500.00
	/irLastService exch def	%?brief Stunden letzter service %?use INP %?type REAL %?dflt  500.00
	/irNextService exch def	%?brief Stunden nächster service %?use INP %?type REAL %?dflt 1000.00
	/irOperatHour exch def	%?brief aktuelle Betriebsstunden %?use INP %?type REAL %?dflt  750.00
	/ixServError exch def	%?brief Service wurde nicht bestätigt %?use INP %?type BOOL %?dflt false
	/ixServWarn exch def	%?brief Service muß durchgeführt werden %?use INP %?type BOOL %?dflt false
%?manual_beg
	/LS_helps () def
	/LRmaxHour irInterval irAcknBef 2 mul add def
	LRmaxHour 0 eq { /LRmaxHour idBarLength store } if								% maximal anzuzeigende Stunden des Balkens
	/LRbarLen idBarLength LRmaxHour div irOperatHour irNextService irInterval sub sub irAcknBef add mul def		% aktuelle Balkenlänge
	LRbarLen 0 lt { /LRbarLen 0 store } if
	LRbarLen idBarLength gt { /LRbarLen idBarLength store } if
	/LRlastLen idBarLength LRmaxHour div irAcknBef mul def							% Position des letzten regulären Service
	/LRbefLen idBarLength LRmaxHour div irInterval mul def							% Position des beginns des quittierungsbereiches bevor nächstem Service
	/LRackLen idBarLength LRmaxHour div irInterval irAcknBef add mul def			% Position des nächsten Service
	/LRackPoint idBarLength LRmaxHour div irLastService irNextService irInterval sub sub irAcknBef add mul def		% Position der tatsächlichen letzten Servicequittierung
	LRackPoint 0 lt { /LRackPoint 0 store } if
	/LRhourToServ irNextService irOperatHour sub def
	matrix currentmatrix_nlw 
	20 40 translate
	currentcolor 
	% Balken zeichnen
	Green
	ixServWarn { Yellow } if
	ixServError { Red } if
	0 5 LRbarLen idBarWide rectfill 
	stroke 
	setcolor 
	0 5 idBarLength idBarWide rectstroke
	% numerische Skalierung einblenden
	matrix currentmatrix_nlw 
	LRlastLen 5 moveto
	LRlastLen -5 lineto
	stroke
	LRlastLen -10 translate
	irNextService irInterval sub 5 () (h) false false false false 
	FSstdFont 4 
	baValueText001 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	LRackLen 5 moveto
	LRackLen -5 lineto
	stroke
	LRackLen 5 add -10 translate
	irNextService 5 () (h) false false false false 
	FSstdFont 4 
	baValueText001 
	setmatrix_nlw 
	% Betriebsstunden einblenden
	matrix currentmatrix_nlw 
	LRbarLen 5 add idBarWide 2 div 5 add translate 		%Positionierung mittig hinter dem Balken
	matrix currentmatrix_nlw 
	currentcolor
	Invisible
	FSstdFont selectFont
	0 0
	irOperatHour LS_helps 0 ncvs (h) strcat strwh		% Größe der Schriftfläche ermitteln um den Hintergrund zu überdecken (fals über den Balkenrand hinausgeschrieben wird)
	4 add
	dup 0 exch 2 div neg translate				% Position für den Hintergund versetzen
	rectfill
	stroke
	setcolor
	setmatrix_nlw 
	irOperatHour 5 () (h) false false false false 
	FSstdFont 2 
	baValueText001 
	setmatrix_nlw 
	% Stunden des letzten Service einblenden
	LRackPoint 30 moveto
	LRackPoint 40 lineto
	stroke
	LRackPoint 30 moveto
	LRackPoint 3 sub 37 lineto
	stroke
	LRackPoint 30 moveto
	LRackPoint 3 add 37 lineto
	stroke
	matrix currentmatrix_nlw 
	LRackPoint 45 translate 
	irLastService 5 () (h) false false false false 
	FSstdFont 8 
	baValueText001 
	setmatrix_nlw 
	% Stunden bis Service einblenden
	LRackLen 30 moveto
	LRackLen 45 lineto
	stroke
	LRhourToServ 0 ge {
		LRackLen 35 moveto
		LRackLen 30 sub 35 lineto
		stroke
		LRackLen 35 moveto
		LRackLen 7 sub 38 lineto
		stroke
		LRackLen 35 moveto
		LRackLen 7 sub 32 lineto
		stroke
		matrix currentmatrix_nlw 
		LRackLen 5 sub 45 translate 
		LRhourToServ 5 () (h) false false false false 
		FSstdFont 7 
		baValueText001 
		setmatrix_nlw 
	} {
		LRackLen 35 moveto
		LRackLen 30 add 35 lineto
		stroke
		LRackLen 35 moveto
		LRackLen 7 add 38 lineto
		stroke
		LRackLen 35 moveto
		LRackLen 7 add 32 lineto
		stroke
		matrix currentmatrix_nlw 
		LRackLen 5 add 45 translate 
		LRhourToServ 5 () (h) false false false false 
		FSstdFont 1 
		baValueText001 
		setmatrix_nlw 
	} ifelse
	setmatrix_nlw 
%?manual_end 
	
} def
%?partend


%?partdef spStatus006
%?fn	spStatus006
%?brief	Windenstatus
%?bbox	0 0 79 79
/spStatus006 {
	/idWinchNr exch def	%?brief Windenidentification %?use INP %?type REAL %?dflt    0.00
	/ixHgMoringActive exch def	%?brief hoisting gear mooring active %?use INP %?type BOOL %?dflt false
	/ixHgClutchOpen exch def	%?brief hoisting gear clutch open %?use INP %?type BOOL %?dflt false
	/ixHgLockFastSpeed exch def	%?brief lock hoisting gear fast speed %?use INP %?type BOOL %?dflt false
	/ixHgFastSpeed exch def	%?brief hoisting gear fast speed %?use INP %?type BOOL %?dflt false
	ixHgClutchOpen true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		ssWinch001 
		setcolor 
		setmatrix_nlw 
	} if 
	ixHgFastSpeed true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		ssWinch003 
		setcolor 
		setmatrix_nlw 
	} if 
	ixHgLockFastSpeed true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		ssWinch009 
		setcolor 
		setmatrix_nlw 
	} if 
	ixHgMoringActive true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		ssWinch011 
		setcolor 
		setmatrix_nlw 
	} if 
	matrix currentmatrix_nlw 
	currentcolor 
	68 27 translate 
	0 rotate 
	1 1 scale 
	idWinchNr 1 false false 
	FSbigFatFont 
	baValue004 
	setcolor 
	setmatrix_nlw 
} def
%?partend

%?partdef spWinch005
%?fn	spWinch005
%?brief	Seillängenmessung mit Einscherungsanzeige und Seilgeschwindigkeit
%?bbox	0 0 239 79
/spWinch005 {
	/MEM_TimeAtStart_00 exch def	%?brief  %?use STATIC %?type DINT
	/MEM_active_00_00 exch def	%?brief  %?use STATIC %?type BOOL
	/ixShowRopeSpeed exch def	%?brief Vorwahl Seilgeschwindigkeit anzeigen %?use INP %?type BOOL %?dflt false
	/ixWinchLower exch def	%?brief Winde dreht senken %?use INP %?type BOOL %?dflt false
	/ixWinchLift exch def	%?brief Winde dreht heben %?use INP %?type BOOL %?dflt false
	/idWinchNr exch def	%?brief Windenidentifikation %?use INP %?type REAL %?dflt    0.00
	/idReeving exch def	%?brief Einscherung %?use INP %?type REAL %?dflt    0.00
	/irRopeLength exch def	%?brief Seillänge %?use INP %?type REAL %?dflt    0.00
	/irRopeSpeed exch def	%?brief Seilgeschwindigkeit %?use INP %?type REAL %?dflt    0.00
	/qxResetRopeLen false def	%?brief Reset Seillänge %?use OUT %?type BOOL %?dflt false
	matrix currentmatrix_nlw 
	currentcolor 
	0 0 translate 
	0 rotate 
	3 1 scale 
	1 
	MEM_TimeAtStart_00 MEM_active_00_00 
	baTouchButton012 
	/MEM_TimeAtStart_00 exch store 
	/MEM_active_00_00 exch store {	
		/qxResetRopeLen true store 
	} if 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	92 46 translate 
	0 rotate 
	0.80 0.80 scale 
	irRopeLength 3.20 false false 
	FSbigFatFont 1 
	baValueDist001 
	setcolor 
	setmatrix_nlw 
	ixShowRopeSpeed true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		65 15 translate 
		0 rotate 
		1 1 scale 
		irRopeSpeed 3 false false 
		FSmidFont 1 
		baValueSpeed003 
		setcolor 
		setmatrix_nlw 
	} if 
	matrix currentmatrix_nlw 
	currentcolor 
	196 20 translate 
	0 rotate 
	1 1 scale 
	idReeving 2 false false 
	FSbigFont 
	baValue004 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	LightGrey 172 13 translate 
	0 rotate 
	0.75 0.75 scale 
	ssWinch010 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	LightGrey 205 53 translate 
	0 rotate 
	0.75 0.75 scale 
	idWinchNr 1 false false 
	FSfatFont 
	baValue004 
	setcolor 
	setmatrix_nlw 
	ixWinchLift true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		110 -20 translate 
		0 rotate 
		1 1 scale 
		ssGeneral015 
		setcolor 
		setmatrix_nlw 
	} if 
	ixWinchLower true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		189 60 translate 
		180 rotate 
		1 1 scale 
		ssGeneral015 
		setcolor 
		setmatrix_nlw 
	} if 
	qxResetRopeLen MEM_TimeAtStart_00 MEM_active_00_00 
} def
%?partend

%?partdef spWind002
%?fn	spWind002
%?brief	Windgeschwindigkeit
%?bbox	0 0 119 59
/spWind002 {
	/ixWindSpeedError exch def	%?brief Windgeschwindigkeit zu hoch Sicherheitsschwelle %?use INP %?type BOOL %?dflt false
	/ixWindSpeedWarn exch def	%?brief Windgeschwindigkeit zu hoch Warnung %?use INP %?type BOOL %?dflt false
	/irWindSpeed exch def	%?brief Windgeschwindigkeit in m/s %?use INP %?type REAL %?dflt    0.00
	matrix currentmatrix_nlw 
	currentcolor 
	70 5 translate 
	0 rotate 
	0.62 0.62 scale 
	ixWindSpeedError ixWindSpeedWarn false false (gsWind001) 
	baSwitchSymbolColor004 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	54 18 translate 
	0 rotate 
	0.70 0.70 scale 
	irWindSpeed 2 
	ixWindSpeedWarn ixWindSpeedError FSfatFont 0.75 
	baValueSpeed001 
	setcolor 
	setmatrix_nlw 
} def
%?partend

%?partdef spEquipment001
%?fn	spEquipment001
%?brief	Rüttler mit Frequenzanzeige und Amplitude
%?bbox	-160 -230 79 89
/spEquipment001 {
	/ixMeasuring exch def	%?brief measuring active %?use INP %?type BOOL %?dflt false
	/irAmplitude exch def	%?brief Amplitude [mm] %?use INP %?type REAL %?dflt    0.00
	/irFrequency exch def	%?brief Frequenz [Hz] %?use INP %?type REAL %?dflt    0.00
	matrix currentmatrix_nlw 
	currentcolor 
	0 0 translate 
	0 rotate 
	1 1 scale 
	ssEquipment001 
	setcolor 
	setmatrix_nlw 
	ixMeasuring true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		-60 40 translate 
		0 rotate 
		1 1 scale 
		irFrequency 2 false false 
		FSmidFont 
		baValue004 
		setcolor 
		setmatrix_nlw 
	} if 
	ixMeasuring true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		-30 40 translate 
		0 rotate 
		1 1 scale 
		(Hz) 
		FSmidFont 0 
		baText001 
		setcolor 
		setmatrix_nlw 
	} if 0 0 moveto 
	0 80 lineto 
	stroke 
	matrix currentmatrix_nlw 
	currentcolor 
	-120 20 translate 
	0 rotate 
	0.50 0.50 scale 
	ssGeneral034 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	-120 -20 translate 
	0 rotate 
	0.50 0.50 scale 
	ssGeneral035 
	setcolor 
	setmatrix_nlw 
	ixMeasuring true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		-60 -10 translate 
		0 rotate 
		1 1 scale 
		irAmplitude FSmidFont 0.70 true 1.10 false false 
		baValueDist008 
		setcolor 
		setmatrix_nlw 
	} if 
} def
%?partend

%?partdef spEquipment002
%?fn	spEquipment002
%?brief	Hammer mit Schlagzähler
%?bbox	-360 -230 119 89
/spEquipment002 {
	/ixMeasuring exch def	%?brief measuring active %?use INP %?type BOOL %?dflt false
	/irEnergy exch def	%?brief Energie [kNm] %?use INP %?type REAL %?dflt    0.00
	/irBeatsPerMin exch def	%?brief Schläge pro Minute %?use INP %?type REAL %?dflt    0.00
	/LRenergyImp 0 def	%?brief energy in imperial unit %?use LOC %?type REAL %?dflt    0.00
	matrix currentmatrix_nlw 
	currentcolor 
	0 0 translate 
	0 rotate 
	1 1 scale 
	irEnergy (Nm) (ft.lbs) 
	calc_imperial 
	/LRenergyImp exch store 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	0 0 translate 
	0 rotate 
	1 1 scale 
	ssEquipment002 
	setcolor 
	setmatrix_nlw 
	0 0 moveto 
	0 80 lineto 
	stroke 
	ixMeasuring true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		-60 -10 translate 
		0 rotate 
		1 1 scale 
		irBeatsPerMin 2 () (/min) false false false false 
		FSmidFont 0 
		baValueText001 
		setcolor 
		setmatrix_nlw 
	} if 
	ixMeasuring true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		-90 5 translate 
		0 rotate 
		0.50 0.50 scale 
		gsGeneral053 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	MXchangeUnitDist not 
	MXchangeUnitLoad not and 
	ixMeasuring and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		-40 -160 translate 
		90 rotate 
		1 1 scale 
		irEnergy () 0 120 false false true false false false 380 400 20 10 4 15 250 true false -90 true 0 
		FSstdFont false 1 
		baBar006 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	MXchangeUnitDist not 
	MXchangeUnitLoad not and 
	ixMeasuring and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		-340 -120 translate 
		0 rotate 
		1 1 scale 
		(kNm) 
		FSstdFont 0 
		baText001 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	MXchangeUnitDist MXchangeUnitLoad or 
	ixMeasuring and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		-40 -160 translate 
		90 rotate 
		1 1 scale 
		LRenergyImp () 0 100 false false true false false false 380 400 20 10 4 15 250 true false -90 true 0 
		FSstdFont false 1 
		baBar006 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	MXchangeUnitDist MXchangeUnitLoad or 
	ixMeasuring and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		-340 -120 translate 
		0 rotate 
		1 1 scale 
		(ft.lbs) 
		FSstdFont 0 
		baText001 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	MXchangeUnitDist MXchangeUnitLoad or 
	ixMeasuring and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		-307 -143 translate 
		0 rotate 
		1 1 scale 
		((lbs*1000)) 
		FSminiFont 0 
		baText001 
		setcolor 
		setmatrix_nlw 
	} if 
	ixMeasuring true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		-331 -99 translate 
		0 rotate 
		1 1 scale 
		irEnergy 3 80 false false 0 
		FSmidFont false 
		baValue005 
		setcolor 
		setmatrix_nlw 
	} if 
} def
%?partend


%?partdef spEquipment003
%?fn	spEquipment003
%?brief	Bohrer mit Anzeige der Drehgeschwindigkeit
%?bbox	-160 -230 79 169
/spEquipment003 {
	/ixFastSpeed exch def	%?brief Schnellgang aktiviert %?use INP %?type BOOL %?dflt false
	/irRotation exch def	%?brief Umdrehungsgeschwindigkeit [rpm] %?use INP %?type REAL %?dflt    0.00
	matrix currentmatrix_nlw 
	currentcolor 
	1 8 translate 
	0 rotate 
	1 1 scale 
	ssEquipment003 
	setcolor 
	setmatrix_nlw 
	0 8 moveto 
	0 90 lineto 
	stroke 
	ixFastSpeed true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		-160 10 translate 
		0 rotate 
		0.75 0.75 scale 
		gsDrive007 
		setcolor 
		setmatrix_nlw 
	} if 
	matrix currentmatrix_nlw 
	currentcolor 
	-65 12 translate 
	0 rotate 
	1 1 scale 
	irRotation 2.10 (rpm) false false 
	FSmidFont 1 
	baValue001 
	setcolor 
	setmatrix_nlw 
} def
%?partend

%?partdef spEquipment004
%?fn	spEquipment004
%?brief	Greifer mit Anzeige geöffnet/geschlossen
%?bbox	-80 -230 79 89
/spEquipment004 {
	/ixDummy exch def	%?brief dummy input %?use INP %?type BOOL %?dflt false
	/idGrabType exch def	%?brief Greifer Typ: 1=Schlitzwand, 2=Zweischalen, 3=Poly, 4=Brunnen, 5=Kelly %?use INP %?type DINT %?dflt 1
	/irGrabOpen exch def	%?brief Greifer geöffnet [proz] %?use INP %?type REAL %?dflt  100.00
	/LRcylPos 0 def	%?brief cylinder Position %?use LOC %?type REAL %?dflt    0.00
	/LXkelly false def	%?brief Kellygreifer %?use LOC %?type BOOL %?dflt false
	/LXwellGrab false def	%?brief Brunnengreifer %?use LOC %?type BOOL %?dflt false
	/LXpolyp false def	%?brief Polygreifer %?use LOC %?type BOOL %?dflt false
	/LXclampShell false def	%?brief Schalengreifer %?use LOC %?type BOOL %?dflt false
	/LXdiaphWall false def	%?brief Schlitzwandgreifer %?use LOC %?type BOOL %?dflt false
	/LRangleLeft 0 def	%?brief opening angle left %?use LOC %?type REAL %?dflt    0.00
	/LRangleRight 0 def	%?brief opening angle right %?use LOC %?type REAL %?dflt    0.00
	/LRmidPos 1 def	%?brief opening middle %?use LOC %?type REAL %?dflt    1.00
%?manual_beg
	/LRcylPos irGrabOpen 0.25 mul store 
	/LRangleRight irGrabOpen 0.9 mul store
	LXwellGrab { /LRangleLeft LRangleLeft 2 div store } if
	/LRangleLeft LRangleRight neg store
	/LRmidPos 1 irGrabOpen 140 div sub store
%?manual_end
	
	idGrabType 1 eq {	
		true 
		FUN_SET_VAR_BOOL 
		/LXdiaphWall exch store 
	} if 
	idGrabType 2 eq {	
		true 
		FUN_SET_VAR_BOOL 
		/LXclampShell exch store 
	} if 
	idGrabType 3 eq {	
		true 
		FUN_SET_VAR_BOOL 
		/LXpolyp exch store 
	} if 
	idGrabType 4 eq {	
		true 
		FUN_SET_VAR_BOOL 
		/LXwellGrab exch store 
	} if 
	idGrabType 5 eq {	
		true 
		FUN_SET_VAR_BOOL 
		/LXkelly exch store 
	} if 
	LXdiaphWall true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		ssEquipment004 
		setcolor 
		setmatrix_nlw 
	} if 
	LXkelly true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 80 translate 
		0 rotate 
		1 1 scale 
		ssEquipment021 
		setcolor 
		setmatrix_nlw 
	} if 
	LXdiaphWall LXkelly or {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 
		LRcylPos 
		translate 
		0 rotate 
		1 1 scale 
		ssEquipment005 
		setcolor 
		setmatrix_nlw 
	} if 
	LXdiaphWall LXkelly or {	
		matrix currentmatrix_nlw 
		currentcolor 
		3 -140 translate 
		LRangleRight 
		rotate 
		1.50 1.50 scale_nlw 
		ssEquipment006 
		setcolor 
		setmatrix_nlw 
	} if 
	LXdiaphWall LXkelly or {	
		matrix currentmatrix_nlw 
		currentcolor 
		-3 -140 translate 
		LRangleLeft 
		rotate 
		-1.50 1.50 scale_nlw 
		ssEquipment006 
		setcolor 
		setmatrix_nlw 
	} if 
	LXclampShell true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		ssEquipment007 
		setcolor 
		setmatrix_nlw 
	} if 
	LXclampShell true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		40 -96 translate 
		LRangleRight 
		rotate 
		1 1 scale 
		ssEquipment008 
		setcolor 
		setmatrix_nlw 
	} if 
	LXclampShell true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		-40 -96 translate 
		LRangleLeft 
		rotate 
		1 1 scale 
		ssEquipment008 
		setcolor 
		setmatrix_nlw 
	} if 
	LXpolyp true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		ssEquipment009 
		setcolor 
		setmatrix_nlw 
	} if 
	LXpolyp true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		19 -35 translate 
		LRangleRight 
		rotate 
		1 1 scale_nlw 
		ssEquipment010 
		setcolor 
		setmatrix_nlw 
	} if 
	LXpolyp true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		-19 -35 translate 
		LRangleLeft 
		rotate 
		-1 1 scale_nlw 
		ssEquipment010 
		setcolor 
		setmatrix_nlw 
	} if 
	LXpolyp true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 -32 translate 
		0 rotate 
		1 
		LRmidPos 
		scale_nlw 
		ssEquipment022 
		setcolor 
		setmatrix_nlw 
	} if 
	LXwellGrab true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		ssEquipment011 
		setcolor 
		setmatrix_nlw 
	} if 
	LXwellGrab true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		14 -134 translate 
		LRangleRight 
		rotate 
		1 1 scale 
		ssEquipment012 
		setcolor 
		setmatrix_nlw 
	} if 
	LXwellGrab true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		-14 -134 translate 
		LRangleLeft 
		rotate 
		1 1 scale 
		ssEquipment012 
		setcolor 
		setmatrix_nlw 
	} if 0 0 moveto 
	0 80 lineto 
	stroke 
} def
%?partend

%?partdef spEquipment005
%?fn	spEquipment005
%?brief	Betonbeisser mit Anzeige geöffnet/geschlossen
%?bbox	-80 -230 79 89
/spEquipment005 {
	/ixDummy exch def	%?brief dummy input %?use INP %?type BOOL %?dflt false
	/irGrabOpen exch def	%?brief Greifer geöffnet [%] %?use INP %?type REAL %?dflt 100.0
	/LRangleLeft 0 def	%?brief opening angle left %?use LOC %?type REAL %?dflt    0.00
	/LRangleRight 0 def	%?brief opening angle right %?use LOC %?type REAL %?dflt    0.00
%?manual_beg
	/LRangleRight irGrabOpen 0.5 mul store
	/LRangleLeft LRangleRight neg store
%?manual_end
	0 0 moveto 
	0 80 lineto 
	stroke 
	matrix currentmatrix_nlw 
	currentcolor 
	0 0 translate 
	0 rotate 
	1 1 scale 
	ssEquipment013 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	5 -77 translate 
	LRangleRight 
	rotate 
	1 1 scale 
	ssEquipment014 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	-5 -77 translate 
	LRangleLeft 
	rotate 
	-1 1 scale 
	ssEquipment014 
	setcolor 
	setmatrix_nlw 
} def
%?partend

%?partdef spEquipment006
%?fn	spEquipment006
%?brief	Rammgewicht oder Meissel
%?bbox	-80 -230 239 169
/spEquipment006 {
	/irDummy exch def	%?brief dummy input %?use INP %?type REAL %?dflt    0.00
	/ixChisel exch def	%?brief Meissel %?use INP %?type BOOL %?dflt false
	ixChisel not 
	true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		160 80 translate 
		0 rotate 
		1 1 scale 
		ssEquipment015 
		setcolor 
		setmatrix_nlw 
	} if 
	ixChisel true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		160 80 translate 
		0 rotate 
		1 1 scale 
		ssEquipment020 
		setcolor 
		setmatrix_nlw 
	} if 160 80 moveto 
	160 160 lineto 
	stroke 
	matrix currentmatrix_nlw 
	currentcolor 
	160 -150 translate 
	0 rotate 
	1 1 scale 
	ssEquipment019 
	setcolor 
	setmatrix_nlw 
} def
%?partend


%?partdef spEquipment007
%?fn	spEquipment007
%?brief	Schleppschaufel
%?bbox	-240 -160 399 159
/spEquipment007 {
	matrix currentmatrix_nlw 
	currentcolor 
	124 -22 translate 
	0 rotate 
	1 1 scale 
	ssEquipment018 
	setcolor 
	setmatrix_nlw 
	330 -130 moveto 
	210 -90 lineto 
	stroke 
	120 156 moveto 
	120 -10 lineto 
	stroke 
} def
%?partend

%?partdef spEquipment008
%?fn	spEquipment008
%?brief	Schlitzwandgreifer mit Anzeige geöffnet/geschlossen und Greifer gedreht (vorne/hinten)
%?bbox	-80 -230 79 89
/spEquipment008 {
	/MEM_StartTime exch def	%?brief Start time %?use STATIC %?type REAL
	/MEM_active_01 exch def	%?brief  %?use STATIC %?type BOOL
	/MEM_active_00 exch def	%?brief  %?use STATIC %?type BOOL
	/ixDummy exch def	%?brief dummy input %?use INP %?type BOOL %?dflt false
	/ixGrabTurned exch def	%?brief Greifer gedreht %?use INP %?type BOOL %?dflt false
	/irGrabOpen exch def	%?brief Greifer geöffnet [proz] %?use INP %?type REAL %?dflt  100.00
	/LRcylPos 0 def	%?brief cylinder Position %?use LOC %?type REAL %?dflt    0.00
	/LRangleLeft 0 def	%?brief opening angle left %?use LOC %?type REAL %?dflt    0.00
	/LRangleRight 0 def	%?brief opening angle right %?use LOC %?type REAL %?dflt    0.00
	/LRmidPos 1 def	%?brief opening middle %?use LOC %?type REAL %?dflt    1.00
	/LRturnPos 1 def	%?brief grab turning around %?use LOC %?type REAL %?dflt    1.00
	/LXgrabTurnOn 1 def	%?brief grab turning rising trigger %?use LOC %?type BOOL %?dflt false
	/LXgrabTurnOff 1 def	%?brief grab turning falling trigger %?use LOC %?type BOOL %?dflt false
	matrix currentmatrix_nlw 
	currentcolor 
	-40 -220 translate 
	0 rotate 
	1 1 scale 
	ixGrabTurned MEM_active_00 
	FUB_R_TRIG 
	/MEM_active_00 exch store 
	/LXgrabTurnOn exch store 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	-40 -220 translate 
	0 rotate 
	1 1 scale 
	ixGrabTurned MEM_active_01 
	FUB_F_TRIG 
	/MEM_active_01 exch store 
	/LXgrabTurnOff exch store 
	setcolor 
	setmatrix_nlw 
%?manual_beg
	/LRcylPos irGrabOpen 0.25 mul store 
	/LRangleRight irGrabOpen 0.9 mul store
	LXwellGrab { /LRangleLeft LRangleLeft 2 div store } if
	/LRangleLeft LRangleRight neg store
	/LRmidPos 1 irGrabOpen 140 div sub store
	LXgrabTurnOn LXgrabTurnOff or {
		/MEM_StartTime realtime store
	} if
	realtime MEM_StartTime sub 2000 le {												% Greifer wird gedreht
		realtime MEM_StartTime sub 2000 mod dup 1000 gt { 2000 exch sub } if 13 div		% 0 bis ca.75 in einer Sekunde, dann zurück
		/LRslide exch 100 div store
		/LRturnPos 1 LRslide sub store
	} {
		/LRturnPos 1 store
	} ifelse
	

	% ACHTUNG: SCALE über das gesamte Part !!!!!!!!!!!!!!!!!
	LRturnPos 1 scale			% Greifer wird zur Anzeige Greifer drehen im X zurückscaliert und dann wieder hoch

	realtime MEM_StartTime sub 1000 ge realtime MEM_StartTime sub 2000 le and ixGrabTurned and		% Greifer wird gedreht
	realtime MEM_StartTime sub 1000 le ixGrabTurned not and or										% Greifer wird zurückgedreht
	realtime MEM_StartTime sub 2000 gt ixGrabTurned and or {										% Greifer ist gedreht
		currentcolor
		Grey
		%?plinebeg
		
		newpath 
		-16 -12 moveto 
		-7 -12 lineto 
		-5 -14 lineto 
		5 -14 lineto 
		8 -12 lineto 
		16 -12 lineto 
		17 -15 lineto 
		17 -100 lineto 
		15 -104 lineto 
		15 -113 lineto 
		7 -122 lineto 
		5 -137 lineto 
		4 -140 lineto 
		-4 -141 lineto 
		-5 -138 lineto 
		-7 -122 lineto 
		-15 -114 lineto 
		-15 -105 lineto 
		-17 -100 lineto 
		-17 -15 lineto 
		-16 -12 lineto 
		eofill 
		%?plineend
		setcolor
	} if

%?manual_end
	
	matrix currentmatrix_nlw 
	currentcolor 
	0 0 translate 
	0 rotate 
	1 1 scale 
	ssEquipment004 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	0 
	LRcylPos 
	translate 
	0 rotate 
	1 1 scale 
	ssEquipment005 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	3 -140 translate 
	LRangleRight 
	rotate 
	1.50 1.50 scale_nlw 
	ssEquipment006 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	-3 -140 translate 
	LRangleLeft 
	rotate 
	-1.50 1.50 scale_nlw 
	ssEquipment006 
	setcolor 
	setmatrix_nlw 
	0 0 moveto 
	0 80 lineto 
	stroke 
	MEM_StartTime MEM_active_01 MEM_active_00 
} def
%?partend

%?partdef spAdjust001
%?fn	spAdjust001
%?brief	Einstellung 1 Anbaugerät (Litermenge und Druck)
%?bbox	0 0 639 119
/spAdjust001 {
	/MEM_Index_01 exch def	%?brief  %?use STATIC %?type DINT
	/MEM_Index_00 exch def	%?brief  %?use STATIC %?type DINT
	/isText2 exch def	%?brief Text 2 %?use INP %?type STRI %?dflt text2
	/isText1 exch def	%?brief Text 1 %?use INP %?type STRI %?dflt text1
	/irValue1 exch def	%?brief Eingabewert 1 %?use INP %?type REAL %?dflt    0.00
	/irValue2 exch def	%?brief Eingabewert 2 %?use INP %?type REAL %?dflt    0.00
	/qrValue1 0 def	%?brief Eingabewert 1 %?use OUT %?type REAL %?dflt    0.00
	/qrValue2 0 def	%?brief Eingabewert 2 %?use OUT %?type REAL %?dflt    0.00
	matrix currentmatrix_nlw 
	currentcolor 
	120 75 translate 
	0 rotate 
	1 1 scale 
	irValue1 true 4 0 999 
	FSmidFont 50 true 7 0 0 0 0 0 
	MEM_Index_00 
	baInpArea003 
	/MEM_Index_00 exch store 
	/qrValue1 exch store 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	120 20 translate 
	0 rotate 
	1 1 scale 
	irValue2 true 3 0 999 
	FSmidFont 30 true 7 0 0 0 0 0 
	MEM_Index_01 
	baInpArea003 
	/MEM_Index_01 exch store 
	/qrValue2 exch store 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	138 85 translate 
	0 rotate 
	1 1 scale 
	isText1 FSmidFont 1 
	baText001 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	138 30 translate 
	0 rotate 
	1 1 scale 
	isText2 FSmidFont 1 
	baText001 
	setcolor 
	setmatrix_nlw 
	qrValue1 qrValue2 MEM_Index_01 
	MEM_Index_00 
} def
%?partend

%?partdef spAdjust002
%?fn	spAdjust002
%?brief	Einstellung 2 Rüttler (Klemmzangendruck und Excenterzeit)
%?bbox	0 0 639 119
/spAdjust002 {
	/MEM_Index_01 exch def	%?brief  %?use STATIC %?type DINT
	/MEM_Index_00 exch def	%?brief  %?use STATIC %?type DINT
	/isText2 exch def	%?brief Text 2 %?use INP %?type STRI %?dflt text2
	/isText1 exch def	%?brief Text 1 %?use INP %?type STRI %?dflt text1
	/irValue1 exch def	%?brief Eingabewert 1 %?use INP %?type REAL %?dflt    0.00
	/irValue2 exch def	%?brief Eingabewert 2 %?use INP %?type REAL %?dflt    0.00
	/qrValue1 0 def	%?brief Eingabewert 1 %?use OUT %?type REAL %?dflt    0.00
	/qrValue2 0 def	%?brief Eingabewert 2 %?use OUT %?type REAL %?dflt    0.00
	matrix currentmatrix_nlw 
	currentcolor 
	100 75 translate 
	0 rotate 
	1 1 scale 
	irValue1 true 3 0 999 
	FSmidFont 30 true 7 0 0 0 0 0 
	MEM_Index_00 
	baInpArea003 
	/MEM_Index_00 exch store 
	/qrValue1 exch store 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	100 20 translate 
	0 rotate 
	1 1 scale 
	irValue2 true 3 0 999 
	FSmidFont 72 true 7 0 0 0 0 0 
	MEM_Index_01 
	baInpArea003 
	/MEM_Index_01 exch store 
	/qrValue2 exch store 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	118 85 translate 
	0 rotate 
	1 1 scale 
	isText1 FSmidFont 1 
	baText001 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	118 30 translate 
	0 rotate 
	1 1 scale 
	isText2 FSmidFont 1 
	baText001 
	setcolor 
	setmatrix_nlw 
	qrValue1 qrValue2 MEM_Index_01 
	MEM_Index_00 
} def
%?partend

%?partdef spAdjust003
%?fn	spAdjust003
%?brief	Einstellung 3 Hammer (Einstellung Rammgewicht bei Energiemessung)
%?bbox	0 0 639 119
/spAdjust003 {
	/MEM_Index_00 exch def	%?brief  %?use STATIC %?type DINT
	/isText1 exch def	%?brief Text 1 %?use INP %?type STRI %?dflt text1
	/irValue1 exch def	%?brief Eingabewert 1 %?use INP %?type REAL %?dflt    0.00
	/qrValue1 0 def	%?brief Eingabewert 1 %?use OUT %?type REAL %?dflt    0.00
	matrix currentmatrix_nlw 
	currentcolor 
	100 75 translate 
	0 rotate 
	1 1 scale 
	irValue1 true 2.2 0 45 
	FSmidFont 20 true 7 0 0 0 0 0 
	MEM_Index_00 
	baInpArea003 
	/MEM_Index_00 exch store 
	/qrValue1 exch store 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	118 85 translate 
	0 rotate 
	1 1 scale 
	isText1 FSmidFont 1 
	baText001 
	setcolor 
	setmatrix_nlw 
	qrValue1 MEM_Index_00 
} def
%?partend

%?partdef spStatus007
%?fn	spStatus007
%?brief	blackbox status
%?bbox	0 0 79 79
/spStatus007 {
	/MEM_startTime_00 exch def	%?brief  %?use STATIC %?type REAL
	/MEM_active_01 exch def	%?brief  %?use STATIC %?type BOOL
	/ixBbActive exch def	%?brief blackbox active recording %?use INP %?type BOOL %?dflt false
	/ixBbInit exch def	%?brief blackbox initializing %?use INP %?type BOOL %?dflt false
	/ixBbError exch def	%?brief blackbox error %?use INP %?type BOOL %?dflt false
	/LXInitOff false def	%?brief initializing Ok %?use LOC %?type BOOL %?dflt false
	ixBbActive true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		gsGeneral081 
		setcolor 
		setmatrix_nlw 
	} if 
	ixBbError true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		Red 0 0 translate 
		0 rotate 
		1 1 scale 
		gsGeneral082 
		setcolor 
		setmatrix_nlw 
	} if 
	ixBbInit ixBbError not and {	
		matrix currentmatrix_nlw 
		currentcolor 
		Yellow 0 0 translate 
		0 rotate 
		1 1 scale 
		gsGeneral093 
		setcolor 
		setmatrix_nlw 
	} if 
	matrix currentmatrix_nlw 
	currentcolor 
	0 0 translate 
	0 rotate 
	1 1 scale 
	ixBbInit 2 
	MEM_startTime_00 
	FUB_TOF 
	/MEM_startTime_00 exch store 
	/LXInitOff exch store 
	/_unused exch store 
	setcolor 
	setmatrix_nlw 
	MEM_startTime_00 MEM_active_01 
	%?term_beg
	
	ixBbInit not 
	LXInitOff and 
	ixBbError not and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 0 0 translate 
		0 rotate 
		1 1 scale 
		gsGeneral081 
		setcolor 
		setmatrix_nlw 
	} if 
} def
%?partend

%?partdef spGeneral002
%?fn	spGeneral002
%?brief	Zugangskontrolle Anzeige der Schlüsseldaten
%?bbox	0 0 879 199
/spGeneral002 {
	/idKeyCount exch def	%?brief Anzahl der angelernten Schlüssel %?use INP %?type DINT %?dflt 0
	/isSysPriority exch def	%?brief Priorität des Systems %?use INP %?type STRI %?dflt user
	/ixKeyIsMaster exch def	%?brief aktueller Schlüssel ist ein Master-Schlüssel %?use INP %?type REAL %?dflt    0.00
	/idKeyPriority exch def	%?brief Priorität des aktuellen Schlüssels %?use INP %?type DINT %?dflt 0
	/isKeyName exch def	%?brief Name des aktuellen Schlüssels %?use INP %?type STRI %?dflt unknown
	/ixOlActive exch def	%?brief operation lock system is active %?use INP %?type BOOL %?dflt false
	/ixAcActive exch def	%?brief access control is active %?use INP %?type BOOL %?dflt false
	/LSkeyPriority () def	%?brief key priority %?use LOC %?type STRI %?dflt 
	matrix currentmatrix_nlw 
	currentcolor 
	0 0 translate 
	0 rotate 
	1 1 scale 
	idKeyPriority 
	setPrioName 
	/LSkeyPriority exch store 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	240 160 translate 
	0 rotate 
	1 1 scale 
	isKeyName FSbigFatFont 2 
	baText001 
	setcolor 
	setmatrix_nlw 
	ixAcActive ixOlActive or {	
		matrix currentmatrix_nlw 
		currentcolor 
		180 115 translate 
		0 rotate 
		1 1 scale 
		LSkeyPriority FSmidFont 0 
		baText001 
		setcolor 
		setmatrix_nlw 
	} if 
	ixKeyIsMaster true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		180 90 translate 
		0 rotate 
		1 1 scale 
		(master) 
		FSfatFont 0 
		baText001 
		setcolor 
		setmatrix_nlw 
	} if 
	isSysPriority (user) ne {	
		matrix currentmatrix_nlw 
		currentcolor 
		210 45 translate 
		0 rotate 
		1 1 scale 
		isSysPriority FSfatFont 2 
		baText001 
		setcolor 
		setmatrix_nlw 
	} if 
	isSysPriority (user) ne {	
		matrix currentmatrix_nlw 
		currentcolor 
		140 10 translate 
		0 rotate 
		0.75 0.75 scale 
		gsGeneral059 
		setcolor 
		setmatrix_nlw 
	} if 
	matrix currentmatrix_nlw 
	currentcolor 
	115 160 translate 
	0 rotate 
	1 1 scale 
	idKeyCount 2 () (/50) false false false false 
	FSstdFont 2 
	baValueText001 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	140 120 translate 
	0 rotate 
	1 1 scale 
	gsGeneral102 
	setcolor 
	setmatrix_nlw 
	ixAcActive ixOlActive or {	
		matrix currentmatrix_nlw 
		currentcolor 
		Green 0 80 translate 
		0 rotate 
		1.50 1.50 scale 
		gsGeneral103 
		setcolor 
		setmatrix_nlw 
	} if 
} def
%?partend

%?partdef spLml002
%?fn	spLml002
%?brief	Lastanzeige TARA und Gesamtlast
%?bbox	0 0 159 79
/spLml002 {
	/ixImperialUnit exch def	%?brief imperial units selected %?use INP %?type BOOL %?dflt false
	/irLoadHook exch def	%?brief tared load (hook load) %?use INP %?type REAL %?dflt    0.00
	/irLoadAct exch def	%?brief actual load without hook %?use INP %?type REAL %?dflt    0.00
	/irLoadComp exch def	%?brief complete load %?use INP %?type REAL %?dflt    0.00
	matrix currentmatrix_nlw 
	currentcolor 
	0 0 translate 
	0 rotate 
	1 1 scale 
	gsGeneral077 
	setcolor 
	setmatrix_nlw 
	ixImperialUnit false eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		142 20 translate 
		0 rotate 
		1 1 scale 
		(t) 
		FSfatFont 9 
		baText001 
		setcolor 
		setmatrix_nlw 
	} if 
	ixImperialUnit true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		142 22 translate 
		0 rotate 
		1 1 scale 
		(kip) 
		FSmidFont 9 
		baText001 
		setcolor 
		setmatrix_nlw 
	} if 
	matrix currentmatrix_nlw 
	currentcolor 
	105 55 translate 
	0 rotate 
	1 1 scale 
	irLoadHook 3.10 20 false false 9 
	FSmidFont false 
	baValue005 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	105 33 translate 
	0 rotate 
	1 1 scale 
	irLoadAct 3.10 20 false false 9 
	FSmidFont false 
	baValue005 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	105 5 translate 
	0 rotate 
	1 1 scale 
	irLoadComp 3.10 20 false false 9 
	FSmidFont false 
	baValue005 
	setcolor 
	setmatrix_nlw 
	currentcolor 
	LightGrey 43 18 moveto 
	73 40 lineto 
	stroke 
	setcolor 
	125 26 moveto 
	80 26 lineto 
	stroke 
	currentcolor 
	LightGrey 72 65 moveto 
	48 62 lineto 
	stroke 
	setcolor 
} def
%?partend

%?partdef spHour004
%?fn	spHour004
%?brief	Betriebsstundenanzeige Betriebsarten FE
%?bbox	0 0 159 79
/spHour004 {
	/irOperatMode exch def	%?brief number of the operational mode %?use INP %?type REAL %?dflt    0.00
	/irHourRel exch def	%?brief houres since last Reset %?use INP %?type REAL %?dflt    0.00
	/irHourAbs exch def	%?brief houres since first Start %?use INP %?type REAL %?dflt    0.00
	/ixRunning exch def	%?brief hourmeter is running %?use INP %?type BOOL %?dflt false
	%?term_beg
	
	irOperatMode 2 ge 
	irOperatMode 11 le and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		140 50 translate 
		0 rotate 
		1 1 scale 
		irHourAbs 5 () (h) false false false false 
		FSmidFont 9 
		baValueText001 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	irOperatMode 2 ge 
	irOperatMode 11 le and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		140 20 translate 
		0 rotate 
		1 1 scale 
		irHourRel 5 () (h) false false false false 
		FSstdFont 9 
		baValueText001 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	irOperatMode 2 eq 
	irOperatMode 11 eq or 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		ssGeneral036 
		setcolor 
		setmatrix_nlw 
	} if 
	irOperatMode 3 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		ssGeneral037 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	irOperatMode 5 eq 
	irOperatMode 10 eq or 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		ssDrill002 
		setcolor 
		setmatrix_nlw 
	} if 
%?manual_beg
	ixRunning {
		matrix currentmatrix_nlw 
		currentcolor 
		85 25 translate 
		1 1 scale 
		3 setlinewidth_nlw
		matrix currentmatrix_nlw 
		MRrotate neg rotate
		8 0 moveto
		setmatrix_nlw 
		0 0 8 MRrotate neg dup 60 sub arc 
		1 setlinewidth
		setcolor 
		setmatrix_nlw 
	} if
%?manual_end
	
	irOperatMode 6 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		ssDrill003 
		setcolor 
		setmatrix_nlw 
	} if 
	irOperatMode 7 eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		ssDrill004 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	irOperatMode 8 eq 
	irOperatMode 9 eq or 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		ssDrill001 
		setcolor 
		setmatrix_nlw 
	} if 
} def
%?partend

%?partdef spCouCar001
%?fn	spCouCar001
%?brief	Ballastwagen Radsatzwinkel Offset
%?bbox	0 0 239 79
/spCouCar001 {
	/ixWarnWheKit4 exch def	%?brief warning wheel kit 4 %?use INP %?type BOOL %?dflt false
	/ixWarnWheKit3 exch def	%?brief warning wheel kit 3 %?use INP %?type BOOL %?dflt false
	/ixWarnWheKit2 exch def	%?brief warning wheel kit 2 %?use INP %?type BOOL %?dflt false
	/ixWarnWheKit1 exch def	%?brief warning wheel kit 1 %?use INP %?type BOOL %?dflt false
	/irWheKitAng4 exch def	%?brief Winkel Radsatz 4 %?use INP %?type REAL %?dflt    0.00
	/irWheKitAng3 exch def	%?brief Winkel Radsatz 3 %?use INP %?type REAL %?dflt    0.00
	/irWheKitAng2 exch def	%?brief Winkel Radsatz 2 %?use INP %?type REAL %?dflt    0.00
	/irWheKitAng1 exch def	%?brief Winkel Radsatz 1 %?use INP %?type REAL %?dflt    0.00
	/LRangle4 0 def	%?brief Radsatzwinkel 4 im PS Koordinatensystem %?use LOC %?type REAL %?dflt    0.00
	/LRangle3 0 def	%?brief Radsatzwinkel 3 im PS Koordinatensystem %?use LOC %?type REAL %?dflt    0.00
	/LRangle2 0 def	%?brief Radsatzwinkel 2 im PS Koordinatensystem %?use LOC %?type REAL %?dflt    0.00
	/LRangle1 0 def	%?brief Radsatzwinkel 1 im PS Koordinatensystem %?use LOC %?type REAL %?dflt    0.00
	matrix currentmatrix_nlw 
	currentcolor 
	0 0 translate 
	0 rotate 
	1 1 scale 
	90 
	irWheKitAng1 
	FUN_SUB 
	/LRangle1 exch store 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	80 0 translate 
	0 rotate 
	1 1 scale 
	90 
	irWheKitAng2 
	FUN_SUB 
	/LRangle2 exch store 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	160 0 translate 
	0 rotate 
	1 1 scale 
	90 
	irWheKitAng3 
	FUN_SUB 
	/LRangle3 exch store 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	240 0 translate 
	0 rotate 
	1 1 scale 
	90 
	irWheKitAng4 
	FUN_SUB 
	/LRangle4 exch store 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	52 10 translate 
	0 rotate 
	1 1 scale 
	irWheKitAng1 3 (Â°) false false 
	FSstdFont 1 
	baValue001 
	setcolor 
	setmatrix_nlw 
	40 70 moveto 
	ixWarnWheKit1 true eq {	
		true setflash 
	} if 
	matrix currentmatrix_nlw 
	currentcolor 
	40 45 translate 
	LRangle1 
	rotate 
	1 1 scale 
	ssCouCar007 
	setcolor 
	setmatrix_nlw 
	false setflash 
	matrix currentmatrix_nlw 
	currentcolor 
	112 10 translate 
	0 rotate 
	1 1 scale 
	irWheKitAng2 3 (Â°) false false 
	FSstdFont 1 
	baValue001 
	setcolor 
	setmatrix_nlw 
	120 70 moveto 
	ixWarnWheKit2 true eq {	
		true setflash 
	} if 
	matrix currentmatrix_nlw 
	currentcolor 
	100 45 translate 
	LRangle2 
	rotate 
	1 1 scale 
	ssCouCar007 
	setcolor 
	setmatrix_nlw 
	false setflash 
	matrix currentmatrix_nlw 
	currentcolor 
	172 10 translate 
	0 rotate 
	1 1 scale 
	irWheKitAng3 3 (Â°) false false 
	FSstdFont 1 
	baValue001 
	setcolor 
	setmatrix_nlw 
	200 70 moveto 
	ixWarnWheKit3 true eq {	
		true setflash 
	} if 
	matrix currentmatrix_nlw 
	currentcolor 
	160 45 translate 
	LRangle3 
	rotate 
	1 1 scale 
	ssCouCar007 
	setcolor 
	setmatrix_nlw 
	false setflash 
	matrix currentmatrix_nlw 
	currentcolor 
	232 10 translate 
	0 rotate 
	1 1 scale 
	irWheKitAng4 3 (Â°) false false 
	FSstdFont 1 
	baValue001 
	setcolor 
	setmatrix_nlw 
	280 70 moveto 
	ixWarnWheKit4 true eq {	
		true setflash 
	} if 
	matrix currentmatrix_nlw 
	currentcolor 
	220 45 translate 
	LRangle4 
	rotate 
	1 1 scale 
	ssCouCar007 
	setcolor 
	setmatrix_nlw 
	false setflash 
	5 55 moveto 
	FatFont (1) 
	show_utf8 
	65 55 moveto 
	FatFont (2) 
	show_utf8 
	125 55 moveto 
	FatFont (3) 
	show_utf8 
	185 55 moveto 
	FatFont (4) 
	show_utf8 
} def
%?partend

%?partdef spCouCar002
%?fn	spCouCar002
%?brief	Ballastwagen Radsatzwinkel Offset Einstellung
%?bbox	0 0 319 79
/spCouCar002 {
	/irWheKitAngOff4 exch def	%?brief offset Winkel Radsatz 4 %?use INP %?type REAL %?dflt    0.00
	/irWheKitAngOff3 exch def	%?brief offset Winkel Radsatz 3 %?use INP %?type REAL %?dflt    0.00
	/irWheKitAngOff2 exch def	%?brief offset Winkel Radsatz 2 %?use INP %?type REAL %?dflt    0.00
	/irWheKitAngOff1 exch def	%?brief offset Winkel Radsatz 1 %?use INP %?type REAL %?dflt    0.00
	/irWheKitAng4 exch def	%?brief Winkel Radsatz 4 %?use INP %?type REAL %?dflt    0.00
	/irWheKitAng3 exch def	%?brief Winkel Radsatz 3 %?use INP %?type REAL %?dflt    0.00
	/irWheKitAng2 exch def	%?brief Winkel Radsatz 2 %?use INP %?type REAL %?dflt    0.00
	/irWheKitAng1 exch def	%?brief Winkel Radsatz 1 %?use INP %?type REAL %?dflt    0.00
	/LRangle4 0 def	%?brief Radsatzwinkel 4 im PS Koordinatensystem %?use LOC %?type REAL %?dflt    0.00
	/LRangle3 0 def	%?brief Radsatzwinkel 3 im PS Koordinatensystem %?use LOC %?type REAL %?dflt    0.00
	/LRangle2 0 def	%?brief Radsatzwinkel 2 im PS Koordinatensystem %?use LOC %?type REAL %?dflt    0.00
	/LRangle1 0 def	%?brief Radsatzwinkel 1 im PS Koordinatensystem %?use LOC %?type REAL %?dflt    0.00
	matrix currentmatrix_nlw 
	currentcolor 
	0 0 translate 
	0 rotate 
	1 1 scale 
	90 
	irWheKitAng1 
	FUN_SUB 
	/LRangle1 exch store 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	80 0 translate 
	0 rotate 
	1 1 scale 
	90 
	irWheKitAng2 
	FUN_SUB 
	/LRangle2 exch store 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	160 0 translate 
	0 rotate 
	1 1 scale 
	90 
	irWheKitAng3 
	FUN_SUB 
	/LRangle3 exch store 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	240 0 translate 
	0 rotate 
	1 1 scale 
	90 
	irWheKitAng4 
	FUN_SUB 
	/LRangle4 exch store 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	42 3 translate 
	0 rotate 
	1 1 scale 
	irWheKitAng1 3.10 (Â°) false false 
	FSmidFont 1 
	baValue001 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	30 60 translate 
	0 rotate 
	1 1 scale 
	irWheKitAngOff1 3.10 (Â°) false false 
	FSminiFont 1 
	baValue001 
	setcolor 
	setmatrix_nlw 
	50 60 moveto 
	50 75 lineto 
	stroke 
	50 70 moveto 
	50 30 40 90 45 arcn 
	stroke 
	60 72 moveto 
	50 70 lineto 
	stroke 
	58 66 moveto 
	50 70 lineto 
	stroke 
	matrix currentmatrix_nlw 
	currentcolor 
	50 40 translate 
	LRangle1 
	rotate 
	1 1 scale 
	ssCouCar007 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	122 3 translate 
	0 rotate 
	1 1 scale 
	irWheKitAng2 3.10 (Â°) false false 
	FSmidFont 1 
	baValue001 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	110 60 translate 
	0 rotate 
	1 1 scale 
	irWheKitAngOff2 3.10 (Â°) false false 
	FSminiFont 1 
	baValue001 
	setcolor 
	setmatrix_nlw 
	130 60 moveto 
	130 75 lineto 
	stroke 
	130 70 moveto 
	130 30 40 90 45 arcn 
	stroke 
	140 72 moveto 
	130 70 lineto 
	stroke 
	138 66 moveto 
	130 70 lineto 
	stroke 
	matrix currentmatrix_nlw 
	currentcolor 
	130 40 translate 
	LRangle2 
	rotate 
	1 1 scale 
	ssCouCar007 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	202 3 translate 
	0 rotate 
	1 1 scale 
	irWheKitAng3 3.10 (Â°) false false 
	FSmidFont 1 
	baValue001 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	190 60 translate 
	0 rotate 
	1 1 scale 
	irWheKitAngOff3 3.10 (Â°) false false 
	FSminiFont 1 
	baValue001 
	setcolor 
	setmatrix_nlw 
	210 60 moveto 
	210 75 lineto 
	stroke 
	210 70 moveto 
	210 30 40 90 45 arcn 
	stroke 
	220 72 moveto 
	210 70 lineto 
	stroke 
	218 66 moveto 
	210 70 lineto 
	stroke 
	matrix currentmatrix_nlw 
	currentcolor 
	210 40 translate 
	LRangle3 
	rotate 
	1 1 scale 
	ssCouCar007 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	282 3 translate 
	0 rotate 
	1 1 scale 
	irWheKitAng4 3.10 (Â°) false false 
	FSmidFont 1 
	baValue001 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	270 60 translate 
	0 rotate 
	1 1 scale 
	irWheKitAngOff4 3.10 (Â°) false false 
	FSminiFont 1 
	baValue001 
	setcolor 
	setmatrix_nlw 
	290 60 moveto 
	290 75 lineto 
	stroke 
	290 70 moveto 
	290 30 40 90 45 arcn 
	stroke 
	300 72 moveto 
	290 70 lineto 
	stroke 
	298 66 moveto 
	290 70 lineto 
	stroke 
	matrix currentmatrix_nlw 
	currentcolor 
	290 40 translate 
	LRangle4 
	rotate 
	1 1 scale 
	ssCouCar007 
	setcolor 
	setmatrix_nlw 
	10 30 moveto 
	FatFont (1) 
	show_utf8 
	90 30 moveto 
	FatFont (2) 
	show_utf8 
	170 30 moveto 
	FatFont (3) 
	show_utf8 
	250 30 moveto 
	FatFont (4) 
	show_utf8 
} def
%?partend

%?partdef spWal006
%?fn	spWal006
%?brief	Arbeitsbereichsbegrenzung Anzeige Stop incl. Entfernung
%?bbox	0 0 79 399
/spWal006 {
	/ixSlewingLimRight exch def	%?brief slewing limitation right %?use INP %?type BOOL %?dflt false
	/ixSlewingLimLeft exch def	%?brief slewing limitation left %?use INP %?type BOOL %?dflt false
	/ixRadiusLimLuJi exch def	%?brief radius limitation luffing jib %?use INP %?type BOOL %?dflt false
	/ixHightLimLuJi exch def	%?brief hight limitation luffing jib %?use INP %?type BOOL %?dflt false
	/ixRadiusLimMaBo exch def	%?brief radius limitation main boom %?use INP %?type BOOL %?dflt false
	/ixHightLimMaBo exch def	%?brief hight limitation main boom %?use INP %?type BOOL %?dflt false
	/irDistToStop exch def	%?brief distance to stop %?use INP %?type REAL %?dflt    0.00
	/LRdistInvers 0 def	%?brief distance to stop inverted 5 to 0 %?use LOC %?type REAL %?dflt    0.00
%?manual_beg
	5 irDistToStop sub
	dup 0 lt { pop 0 } if
	/LRdistInvers exch store
%?manual_end
	
	matrix currentmatrix_nlw 
	currentcolor 
	40 305 translate 
	0 rotate 
	1 1 scale 
	(stop) 
	FSstdFont 0 
	baText001 
	setcolor 
	setmatrix_nlw 
	60 235 moveto 
	60 290 lineto 
	stroke 
	60 290 moveto 
	55 275 lineto 
	stroke 
	60 290 moveto 
	65 275 lineto 
	stroke 
	matrix currentmatrix_nlw 
	currentcolor 
	20 170 translate 
	0 rotate 
	1 1 scale 
	LRdistInvers 0 5 4 5 20 120 true true false false true 0 
	baBar005 
	setcolor 
	setmatrix_nlw 
	ixSlewingLimLeft true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		gsLimit017 
		setcolor 
		setmatrix_nlw 
	} if 
	ixSlewingLimRight true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		gsLimit018 
		setcolor 
		setmatrix_nlw 
	} if 
	ixHightLimMaBo ixRadiusLimMaBo not and {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 80 translate 
		0 rotate 
		1 1 scale 
		ssWal001 
		setcolor 
		setmatrix_nlw 
	} if 
	ixHightLimLuJi ixRadiusLimLuJi not and {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 320 translate 
		0 rotate 
		1 1 scale 
		ssWal001 
		setcolor 
		setmatrix_nlw 
	} if 
	ixRadiusLimMaBo true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 80 translate 
		0 rotate 
		1 1 scale 
		ssWal002 
		setcolor 
		setmatrix_nlw 
	} if 
	ixRadiusLimLuJi true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 320 translate 
		0 rotate 
		1 1 scale 
		ssWal002 
		setcolor 
		setmatrix_nlw 
	} if 1 1 79 399 rectstroke 
} def
%?partend

%?partdef spWal007
%?fn	spWal007
%?brief	Hubhöhenbegrenzung Anzeige Stop
%?bbox	0 0 79 79
/spWal007 {
	/ixHg1StopUp exch def	%?brief hg1 limitation lifting %?use INP %?type BOOL %?dflt false
	/ixHg1StopDn exch def	%?brief hg1 limitation lowering %?use INP %?type BOOL %?dflt false
	/ixHg2StopUp exch def	%?brief hg2 limitation lifting %?use INP %?type BOOL %?dflt false
	/ixHg2StopDn exch def	%?brief hg2 limitation lowering %?use INP %?type BOOL %?dflt false
	ixHg1StopUp ixHg2StopUp not and {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		ssWal014 
		setcolor 
		setmatrix_nlw 
	} if 
	ixHg1StopDn ixHg2StopDn not and {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		ssWal015 
		setcolor 
		setmatrix_nlw 
	} if 
	ixHg2StopUp ixHg1StopUp not and {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		ssWal016 
		setcolor 
		setmatrix_nlw 
	} if 
	ixHg2StopDn ixHg1StopDn not and {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		ssWal017 
		setcolor 
		setmatrix_nlw 
	} if 
	ixHg1StopUp ixHg2StopUp and {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		ssWal018 
		setcolor 
		setmatrix_nlw 
	} if 
	ixHg1StopDn ixHg2StopDn and {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		ssWal019 
		setcolor 
		setmatrix_nlw 
	} if 
} def
%?partend


%?partdef spGeneral006
%?fn	spGeneral006
%?brief	Zugangskontrolle Schlüssel nicht erkannt / löschen
%?bbox	0 0 79 79
/spGeneral006 {
	matrix currentmatrix_nlw 
	currentcolor 
	-10 40 translate 
	-45 rotate 
	1 1 scale 
	gsGeneral089 
	setcolor 
	setmatrix_nlw 
	9 setlinewidth_nlw 
	currentcolor 
	Invisible 10 10 moveto 
	70 70 lineto 
	stroke 
	3 setlinewidth_nlw 
	Red 10 10 moveto 
	70 70 lineto 
	stroke 
	setcolor 
	1 setlinewidth_nlw 
} def
%?partend

%?partdef spGeneral007
%?fn	spGeneral007
%?brief	Zugangskontrolle mehrere Schlüssel löschen
%?bbox	0 0 79 79
/spGeneral007 {
	matrix currentmatrix_nlw 
	currentcolor 
	0 0 translate 
	0 rotate 
	1 1 scale 
	gsGeneral100 
	setcolor 
	setmatrix_nlw 
	9 setlinewidth_nlw 
	currentcolor 
	Invisible 10 10 moveto 
	70 70 lineto 
	stroke 
	3 setlinewidth_nlw 
	Red 10 10 moveto 
	70 70 lineto 
	stroke 
	setcolor 
} def
%?partend

%?partdef spPactronic001
%?fn	spPactronic001
%?brief	Pactronic Speicherfüllstand klein
%?bbox	0 0 79 79
/spPactronic001 {
	/irPacRiLevel exch def	%?brief Speicherfüllstand rechts [proz] %?use INP %?type REAL %?dflt    0.00
	/irPacLeLevel exch def	%?brief Speicherfüllstand links [proz] %?use INP %?type REAL %?dflt    0.00
%?manual_beg
	/LR_PacLevelProz irPacRiLevel irPacLeLevel add 2 div def
	/LR_PacLevHight LR_PacLevelProz 0.4 mul def		% Umnormierung des Füllstandes auf die Höhe des Symboles
	/LR_offset1 LR_PacLevHight def
	/LR_offset2 LR_PacLevHight 10 add def
	/LR_offset3 LR_PacLevHight 2 sub def
	/LR_offset4 LR_PacLevHight 10 sub def
	/LR_offset5 LR_PacLevHight 3 add def
	matrix currentmatrix 
	24 19 translate 
	currentcolor 
	LR_PacLevelProz 10 le { DarkGrey } if
	LR_PacLevelProz 0 gt LR_PacLevelProz 5 le and { Red } if
	LR_PacLevelProz 5 gt { Green } if
	
	%?plinebeg
	
	newpath 
	0 LR_offset1 moveto 
	0 LR_offset2 30 LR_offset2 30 LR_offset1 curveto 
	30 0 lineto 
	30 -10 0 -10 0 0 curveto 
	eofill 
	%?plineend
	
	setcolor 
	0 LR_offset1 moveto 
	0 LR_offset2 30 LR_offset2 30 LR_offset1 curveto 
	stroke 
	30 LR_offset1 moveto 
	30 LR_offset4 0 LR_offset4 0 LR_offset1 curveto 
	stroke 
	24 LR_offset3 moveto 
	28 LR_offset5 22 LR_offset5 19 LR_offset5 curveto 
	stroke 
	6 LR_offset5 moveto 
	2 LR_offset3 8 LR_offset3 11 LR_offset3 curveto 
	stroke 
	setmatrix 
%?manual_end
	
	currentcolor 
	DarkGrey 
	%?plinebeg
	
	newpath 
	24 59 moveto 
	24 69 54 69 54 59 curveto 
	54 49 24 49 24 59 curveto 
	eofill 
	%?plineend
	
	setcolor 
	3 setlinewidth_nlw 
	24 19 moveto 
	24 9 54 9 54 19 curveto 
	stroke 
	24 19 moveto 
	24 59 lineto 
	stroke 
	54 20 moveto 
	54 59 lineto 
	stroke 
	24 59 moveto 
	24 69 54 69 54 59 curveto 
	stroke 
	54 59 moveto 
	54 49 24 49 24 59 curveto 
	stroke 
	1 setlinewidth_nlw 
	34 60 moveto 
	34 65 lineto 
	stroke 
	43 60 moveto 
	43 65 lineto 
	stroke 
	currentcolor 
	DarkGrey 
	%?plinebeg
	
	newpath 
	43 65 moveto 
	43 62 35 62 34 65 curveto 
	34 68 42 68 43 65 curveto 
	eofill 
	%?plineend
	
	setcolor 
	34 60 moveto 
	35 57 42 57 43 60 curveto 
	stroke 
	43 65 moveto 
	42 62 35 62 34 65 curveto 
	stroke 
	34 65 moveto 
	35 68 42 68 43 65 curveto 
	stroke 
} def
%?partend

%?partdef spPactronic002
%?fn	spPactronic002
%?brief	Pactronic Speicherfüllstand groß
%?bbox	0 0 79 239
/spPactronic002 {
	/irPacLevel exch def	%?brief Speicherfüllstand 0 %?use INP %?type REAL %?dflt    0.00
%?manual_beg
	/LR_PacLevel irPacLevel 2 mul def		% Umnormierung des Füllstandes auf die Höhe des Symboles
	matrix currentmatrix 
	20 20 translate 
	currentcolor 
	irPacLevel 10 le { DarkGrey } if
	irPacLevel 0 gt irPacLevel 5 le and { Red } if
	irPacLevel 5 gt { Green } if
	
	%?plinebeg
	
	newpath 
	0 0 moveto 
	0 -5 40 -5 40 0 curveto 
	40 LR_PacLevel lineto 
	0 LR_PacLevel lineto 
	0 0 lineto 
	eofill 
	%?plineend
	
	setcolor 
	setmatrix 
%?manual_end
	3 setlinewidth_nlw 
	20 20 moveto 
	20 15 60 15 60 20 curveto 
	stroke 
	20 20 moveto 
	20 220 lineto 
	stroke 
	60 20 moveto 
	60 220 lineto 
	stroke 
	20 220 moveto 
	20 225 60 225 60 220 curveto 
	stroke 
	1 setlinewidth_nlw 
} def
%?partend

%?partdef spPactronic003
%?fn	spPactronic003
%?brief	pipe flow (Flussrichtungsanzeige)
%?bbox	-40 -20 119 19
/spPactronic003 {
	/irScaleLen exch def	%?brief scale (1 = grid unit) %?use INP %?type REAL %?dflt    1.00
	/irFlow exch def	%?brief Flussrichtung und Geschwindigkeit %?use INP %?type REAL %?dflt    0.00
%?manual_beg
	/LR_LineLen 10 def
	/LR_Offset 0 def
	/LR_Len MDsymbolGrid irScaleLen mul def
	/LR_Num LR_Len LR_LineLen 3 mul div cvi 1 add def
	/LR_floSpeVal 100 irFlow abs 10 div cvi 10 mul 0.9 mul sub def
	3 setlinewidth_nlw 
	currentcolor 
	irFlow abs 1 ge {
		Grey
		0 0 moveto 
		LR_Len 0 lineto 
		stroke 
		Green 
		% Berechnung der Flussgeschwindigkeit: bei 100% Ansteuerung soll sich LDpos1 in 100ms um 30pxl verändern, bei 50% Ansteuerung soll sich LDpos1 in 200ms um 30pxl verändern
		realtime LR_floSpeVal 30 mul mod LR_floSpeVal div
		/LDpos1 exch def
		LR_Num {
			irFlow 0 ge {
				LDpos1 LR_Offset add dup LR_Len gt { pop LR_Len } if 0 moveto 
				LDpos1 LR_LineLen sub LR_Offset add dup 0 le { pop 0 } if dup LR_Len gt { pop LR_Len } if 0 lineto 
				stroke 
			} {
				LR_Len LDpos1 sub LR_Offset sub dup LR_Len gt { pop LR_Len } if dup 0 le { pop 0 } if 0 moveto 
				LR_Len LDpos1 sub LR_Offset sub LR_LineLen add dup LR_Len gt { pop LR_Len } if dup 0 le { pop 0 } if 0 lineto
				stroke 
			} ifelse
			/LR_Offset LR_Offset LR_LineLen 3 mul add store
		} repeat
	} {
		LightGrey
		0 0 moveto 
		LR_Len 0 lineto 
		stroke 
	} ifelse
	setcolor
	1 setlinewidth_nlw 
%?manual_end
	
} def
%?partend

%?partdef spPactronic004
%?fn	spPactronic004
%?brief	analoge Leistungsanzeige
%?bbox	0 0 79 79
/spPactronic004 {
	/ixShowVal exch def	%?brief show value %?use INP %?type BOOL %?dflt false
	/irActPower_proz exch def	%?brief maximale Leistung [ %?use INP %?type REAL %?dflt    0.00
	/irActPower_kW exch def	%?brief aktuelle Leistung [kW] %?use INP %?type REAL %?dflt    0.00
%?manual_beg
	/LR_Value 0.1 def
	irActPower_proz 0 ne	{
		/LR_Value irActPower_proz abs -3.60 mul store
		irActPower_proz abs 100 ge {
			/LR_Value -359 store
		} if
		matrix currentmatrix
		currentcolor
		Grey
		40 40 translate
		90 rotate
		0 0  moveto 
		newpath 
		0 0 30 0 LR_Value arcn
		eofill 
		setcolor
		setmatrix
	} if
%?manual_end	
	ixShowVal true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		40 40 translate 
		0 rotate 
		0.50 0.50 scale 
		irActPower_kW 3 73 false false 0 
		FSfatFont true 
		baValue005 
		setcolor 
		setmatrix_nlw 
	} if 
} def
%?partend

%?partdef spPactronic005
%?fn	spPactronic005
%?brief	feed pressure pactronic symbol
%?bbox	0 0 79 79
/spPactronic005 {
	matrix currentmatrix_nlw 
	currentcolor 
	0 30 translate 
	0 rotate 
	0.60 0.60 scale 
	ssHydraulic004 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	30 0 translate 
	0 rotate 
	0.60 0.60 scale 
	gsHydraulic003 
	setcolor 
	setmatrix_nlw 
} def
%?partend

%?partdef spLoadMeas001
%?fn	spLoadMeas001
%?brief	Lastmessungsanzeige Kellywinde, Hilfswinde
%?bbox	0 0 159 399
/spLoadMeas001 {
	/idKellyScaleNumb exch def	%?brief Anzahl der Skalierungsfelder Kellywinde %?use INP %?type DINT %?dflt 1
	/idAuxScaleNumb exch def	%?brief Anzahl der Skalierungsfelder Hilfswinde %?use INP %?type DINT %?dflt 1
	/ixKellyOverload exch def	%?brief Überlast Kellywinde %?use INP %?type BOOL %?dflt false
	/ixAuxOverload exch def	%?brief Überlast Hilfswinde %?use INP %?type BOOL %?dflt false
	/irKellyMaxLoad exch def	%?brief maximale Last Kellywinde %?use INP %?type REAL %?dflt    1.00
	/irAuxMaxLoad exch def	%?brief maximale Last Hilfswinde %?use INP %?type REAL %?dflt    1.00
	/irAuxLoad exch def	%?brief load auxillary winch %?use INP %?type REAL %?dflt    0.00
	/irKellyLoad exch def	%?brief load kelly winch %?use INP %?type REAL %?dflt    0.00
	/ixAuxLoadActive exch def	%?brief load measuring auxillary winch active %?use INP %?type BOOL %?dflt false
	/ixKellyLoadActive exch def	%?brief load measuring kelly winch active %?use INP %?type BOOL %?dflt false
	/ixLrhBoomKinem exch def	%?brief LRH boom kinematics (HG1/HG2) %?use INP %?type BOOL %?dflt false
	/LXauxLoadWarning false def	%?brief Warnung Last Hilfswinde %?use LOC %?type BOOL %?dflt false
	/LXkellyLoadWarning false def	%?brief Warnung Last Kellywinde %?use LOC %?type BOOL %?dflt false
	/LRauxMaxLoad 1 def	%?brief maximale Last Hilfswinde %?use LOC %?type REAL %?dflt    1.00
	/LRkellyMaxLoad 1 def	%?brief maximale Last Kellywinde %?use LOC %?type REAL %?dflt    1.00
	/LDauxScaleNumb 1 def	%?brief Anzahl der Skalierungsfelder Hilfswinde %?use LOC %?type DINT %?dflt 1
	/LDkellyScaleNumb 1 def	%?brief Anzahl der Skalierungsfelder Kellywinde %?use LOC %?type DINT %?dflt 1
	/LRkellyLoad 1 def	%?brief Last Kellywinde %?use LOC %?type REAL %?dflt    1.00
	/LRauxLoad 1 def	%?brief Last Kellywinde %?use LOC %?type REAL %?dflt    1.00
	/LRkellyMaxLoadScaled 1 def	%?brief maximale Last Kellywinde auto skaliert %?use LOC %?type REAL %?dflt    1.00
	/LRauxMaxLoadScaled 1 def	%?brief maximale Last Hilfswinde auto skaliert %?use LOC %?type REAL %?dflt    1.00
	/LRkellyLoad irKellyLoad store 
	/LRauxLoad irAuxLoad store 
	/LRkellyMaxLoad irKellyMaxLoad store 
	/LRauxMaxLoad irAuxMaxLoad store 
	MXchangeUnitLoad true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		irKellyLoad (kN) (kip) 
		calc_imperial 
		/LRkellyLoad exch store 
		setcolor 
		setmatrix_nlw 
	} if 
	MXchangeUnitLoad true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		irAuxLoad (kN) (kip) 
		calc_imperial 
		/LRauxLoad exch store 
		setcolor 
		setmatrix_nlw 
	} if 
	MXchangeUnitLoad true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		irKellyMaxLoad (kN) (kip) 
		calc_imperial 
		/LRkellyMaxLoad exch store 
		setcolor 
		setmatrix_nlw 
	} if 
	MXchangeUnitLoad true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		irAuxMaxLoad (kN) (kip) 
		calc_imperial 
		/LRauxMaxLoad exch store 
		setcolor 
		setmatrix_nlw 
	} if 
	matrix currentmatrix_nlw 
	currentcolor 
	0 0 translate 
	0 rotate 
	1 1 scale 
	LRkellyMaxLoad 
	AutoMaxScale 
	/LDkellyScaleNumb exch store 
	/LRkellyMaxLoadScaled exch store 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	0 0 translate 
	0 rotate 
	1 1 scale 
	LRauxMaxLoad 
	AutoMaxScale 
	/LDauxScaleNumb exch store 
	/LRauxMaxLoadScaled exch store 
	setcolor 
	setmatrix_nlw 
	irKellyLoad irKellyMaxLoad gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		true 
		FUN_SET_VAR_BOOL 
		/LXkellyLoadWarning exch store 
		setcolor 
		setmatrix_nlw 
	} if 
	irAuxLoad irAuxMaxLoad gt {	
		matrix currentmatrix_nlw 
		currentcolor 
		0 0 translate 
		0 rotate 
		1 1 scale 
		true 
		FUN_SET_VAR_BOOL 
		/LXauxLoadWarning exch store 
		setcolor 
		setmatrix_nlw 
	} if 
	ixAuxLoadActive true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		-10 22 translate 
		0 rotate 
		1 1 scale 
		LRauxLoad () 0 
		LRauxMaxLoadScaled false true true false false 
		ixAuxOverload LRauxMaxLoad 1000 20 10 
		LDauxScaleNumb 15 235 true false 0 true 0 
		FSstdFont false 1 
		baBar006 
		setcolor 
		setmatrix_nlw 
	} if 
	ixKellyLoadActive true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		83 23 translate 
		0 rotate 
		1 1 scale 
		LRkellyLoad () 0 
		LRkellyMaxLoadScaled false true true false false 
		ixKellyOverload LRkellyMaxLoad 10000 20 10 
		LDkellyScaleNumb 15 235 true false 0 false 0 
		FSstdFont false 1 
		baBar006 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	ixKellyLoadActive true eq 
	ixKellyLoadActive and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		89 305 translate 
		0 rotate 
		0.62 0.62 scale 
		gsGeneral077 
		setcolor 
		setmatrix_nlw 
	} if 
	ixAuxLoadActive ixLrhBoomKinem not and {	
		matrix currentmatrix_nlw 
		currentcolor 
		40 291 translate 
		0 rotate 
		0.60 0.60 scale 
		(AUX) 
		FSfatFont 0 
		baText001 
		setcolor 
		setmatrix_nlw 
	} if 
	ixAuxLoadActive ixLrhBoomKinem and {	
		matrix currentmatrix_nlw 
		currentcolor 
		40 291 translate 
		0 rotate 
		0.60 0.60 scale 
		(HG 1) 
		FSfatFont 0 
		baText001 
		setcolor 
		setmatrix_nlw 
	} if 
	ixKellyLoadActive ixLrhBoomKinem not and {	
		matrix currentmatrix_nlw 
		currentcolor 
		118 291 translate 
		0 rotate 
		0.60 0.60 scale 
		(KELLY) 
		FSfatFont 0 
		baText001 
		setcolor 
		setmatrix_nlw 
	} if 
	ixKellyLoadActive ixLrhBoomKinem and {	
		matrix currentmatrix_nlw 
		currentcolor 
		118 291 translate 
		0 rotate 
		0.60 0.60 scale 
		(HG 2) 
		FSfatFont 0 
		baText001 
		setcolor 
		setmatrix_nlw 
	} if 
	ixKellyLoadActive true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		152 5 translate 
		0 rotate 
		0.75 0.75 scale 
		irKellyLoad 3.10 25 false false 7 
		LXkellyLoadWarning ixKellyOverload FSfatFont true 0.70 
		baValue006 
		setcolor 
		setmatrix_nlw 
	} if 
	ixAuxLoadActive true eq {	
		matrix currentmatrix_nlw 
		currentcolor 
		77 310 translate 
		0 rotate 
		0.75 0.75 scale 
		irAuxLoad 3.10 25 false false 7 
		LXauxLoadWarning ixAuxOverload FSfatFont true 0.70 
		baValue006 
		setcolor 
		setmatrix_nlw 
	} if 
} def
%?partend

%?partdef spGeneral008
%?fn	spGeneral008
%?brief	Bolzen Ein-/Ausfahren
%?bbox	0 0 79 79
/spGeneral008 {
	/ixBoltIn exch def	%?brief Bolzen eingefahren %?use INP %?type BOOL %?dflt false
	/ixBoltOut exch def	%?brief Bolzen ausgefahren %?use INP %?type BOOL %?dflt false
	ixBoltOut ixBoltIn not and {	
		matrix currentmatrix_nlw 
		currentcolor 
		28 30 translate 
		0 rotate 
		1 1 scale 
		ssMachinePart123 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	ixBoltIn not 
	ixBoltOut not and 
	ixBoltIn ixBoltOut and or 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		22 30 translate 
		0 rotate 
		1 1 scale 
		ssMachinePart123 
		setcolor 
		setmatrix_nlw 
	} if 
	ixBoltIn ixBoltOut not and {	
		matrix currentmatrix_nlw 
		currentcolor 
		16 30 translate 
		0 rotate 
		1 1 scale 
		ssMachinePart123 
		setcolor 
		setmatrix_nlw 
	} if 19 36 moveto 
	33 36 lineto 
	stroke 
	19 36 moveto 
	19 44 lineto 
	stroke 
	19 44 moveto 
	33 44 lineto 
	stroke 
} def
%?partend

%?partdef spWal008
%?fn	spWal008
%?brief	Drehwerksbegrenzung mit grossem Gerät
%?bbox	-160 -160 159 159
/spWal008 {
	/irSlewLimitLeft exch def	%?brief Drehwerksbegrenzung Winkel links %?use INP %?type REAL %?dflt    0.00
	/irSlewLimitRight exch def	%?brief Drehwerksbegrenzung Winkel rechts %?use INP %?type REAL %?dflt    0.00
	/ixSlewLimitAct exch def	%?brief Drehwerksbegrenzung aktiv %?use INP %?type BOOL %?dflt false
%?manual_beg
	currentcolor
	Grey
	% Äusserste Radiusbegrenzung zeichnen (äusserster Kreis wird immer gezeichnet)
	5 setlinewidth_nlw
	150 2 add 0 moveto
	0 0 150 2 add 0 360 arc
	1 setlinewidth_nlw

	ixSlewLimitAct {
		matrix currentmatrix
		0 0 moveto
		newpath
		0 0 150 3 add irSlewLimitLeft neg 90 add irSlewLimitRight neg 90 add arc			% Den Winkel negieren, da das Koordinatensystem des Gerätes entgegengesetzt dem von PostScript dreht! Hier 90° addieren, da die 0° Linie auf der Y-Achse des Koordinatensystems liegt
		eofill
		0 0 lineto
		setmatrix
	} {
		matrix currentmatrix
		0 0 moveto
		0 0 150 3 add irSlewLimitLeft neg 90 add irSlewLimitRight neg 90 add arc			% Den Winkel negieren, da das Koordinatensystem des Gerätes entgegengesetzt dem von PostScript dreht! Hier 90° addieren, da die 0° Linie auf der Y-Achse des Koordinatensystems liegt
		0 0 lineto
		setmatrix
	} ifelse
	setcolor
%?manual_end
	1 setlinewidth_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	0 0 translate 
	0 rotate 
	1 1 scale 
	ssWal020 
	setcolor 
	setmatrix_nlw 
} def
%?partend

%?partdef spInclinat004
%?fn	spInclinat004
%?brief	Neigungsanzeige mit Absolutwinkel und Kreise
%?bbox	0 0 239 319
/spInclinat004 {
	/ixShowXYang exch def	%?brief Anzeige X und Y Winkel %?use INP %?type BOOL %?dflt false
	/ixShowAbsAng exch def	%?brief Anzeige Absoluter Winkel %?use INP %?type BOOL %?dflt false
	/irAbsAngle1 exch def	%?brief Absoluter Winkel des Ist-Cursor %?use INP %?type REAL %?dflt    0.00
	/irMaxY exch def	%?brief maximaler Y-Wert %?use INP %?type REAL %?dflt   27.30
	/irMaxX exch def	%?brief maximaler X-Wert %?use INP %?type REAL %?dflt   20.00
	/irYaddRatedIncl exch def	%?brief Y-position des zusätzlichen Soll-Cursor %?use INP %?type REAL %?dflt    0.00
	/irXaddRatedIncl exch def	%?brief X-position des zusätzlichen Soll-Cursor %?use INP %?type REAL %?dflt    0.00
	/irYratedIncl exch def	%?brief Y-position des Soll-Cursor %?use INP %?type REAL %?dflt    0.00
	/irXratedIncl exch def	%?brief X-position des Soll-Cursor %?use INP %?type REAL %?dflt    0.00
	/irYinclination exch def	%?brief Y-position des Ist-Cursor %?use INP %?type REAL %?dflt    0.00
	/irXinclination exch def	%?brief X-position des Ist-Cursor %?use INP %?type REAL %?dflt    0.00
	/idCursorForm3 exch def	%?brief 3. Cursor-form: 0 nicht aktiv, 1 quadrat, 2 kreuz, 3 kreis (Farbe bsp: 11 grüne %?use INP %?type DINT %?dflt 1
	/idCursorForm2 exch def	%?brief 2. Cursor-form: 0 nicht aktiv, 1 quadrat, 2 kreuz, 3 kreis (Farbe bsp: 41 rotes %?use INP %?type DINT %?dflt 1
	/idCursorForm1 exch def	%?brief 1. Cursor-form: 0 nicht aktiv, 1 quadrat, 2 kreuz, 3 kreis (Farbe bsp: 71 dunke %?use INP %?type DINT %?dflt 2
	/LRMaxY -25 def	%?brief maximaler negativer Y-Wert %?use LOC %?type REAL %?dflt  -25.00
	/LRMaxY -25 def	%?brief maximaler negativer Y-Wert %?use LOC %?type REAL %?dflt  -25.00
	/LRmaxY irMaxY neg store 
	/LRmaxX irMaxX neg store 
	currentcolor 
	LightGrey 228 160 moveto 
	120 160 108 0 360 arc 
	stroke 
	201 160 moveto 
	120 160 81 0 360 arc 
	stroke 
	174 160 moveto 
	120 160 54 0 360 arc 
	stroke 
	147 160 moveto 
	120 160 27 0 360 arc 
	stroke 
	setcolor 
	matrix currentmatrix_nlw 
	currentcolor 
	0 0 translate 
	0 rotate 
	1 1 scale 
	idCursorForm3 idCursorForm2 idCursorForm1 
	irXaddRatedIncl irYaddRatedIncl irXratedIncl irYratedIncl 
	irXinclination irYinclination 3 4 
	irMaxX irMaxY irMaxX neg 
	irMaxY neg 
	baCursorfield001 
	setcolor 
	setmatrix_nlw 
	%?term_beg
	
	irXinclination irMaxX 20 div neg ge 
	irXinclination irMaxX 1.25 div le and 
	irYinclination irMaxY 1.15 div neg le and 
	ixShowXYang and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		102 5 translate 
		0 rotate 
		0.70 0.70 scale 
		irYinclination 2.10 (Â°) false false 
		FSfatFont 1 
		baValue002 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	irXinclination irMaxX 20 div neg lt 
	irXinclination irMaxX 1.25 div gt or 
	irYinclination irMaxY 1.15 div neg gt or 
	ixShowXYang and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		130 5 translate 
		0 rotate 
		0.70 0.70 scale 
		irYinclination 2.10 (Â°) false false 
		FSfatFont 1 
		baValue003 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	irYinclination irMaxY 25 div neg ge 
	irYinclination irMaxY 4 div le and 
	irXinclination irMaxX 2 div ge and 
	ixShowXYang and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		237 126 translate 
		0 rotate 
		0.70 0.70 scale 
		irXinclination 2.10 (Â°) false false 
		FSfatFont 1 
		baValue002 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	irYinclination irMaxY 25 div neg lt 
	irYinclination irMaxY 4 div gt or 
	irXinclination irMaxX 2 div lt or 
	ixShowXYang and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		237 168 translate 
		0 rotate 
		0.70 0.70 scale 
		irXinclination 2.10 (Â°) false false 
		FSfatFont 1 
		baValue002 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	irXinclination irMaxX 2 div neg gt 
	irYinclination irMaxY 1.15 div lt or 
	ixShowAbsAng and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		8 300 translate 
		0 rotate 
		0.70 0.70 scale 
		irAbsAngle1 2.10 (Â°) false false 
		FSfatFont 1 
		baValue003 
		setcolor 
		setmatrix_nlw 
	} if 
	%?term_beg
	
	irXinclination irMaxX 2 div neg le 
	irYinclination irMaxY 1.15 div ge and 
	ixShowAbsAng and 
	%?term_end
	{	
		matrix currentmatrix_nlw 
		currentcolor 
		237 300 translate 
		0 rotate 
		0.70 0.70 scale 
		irAbsAngle1 2.10 (Â°) false false 
		FSfatFont 1 
		baValue002 
		setcolor 
		setmatrix_nlw 
	} if 
} def
%?partend

%?partdef spWinch014
%?fn	spWinch014
%?brief	Seillängenmessung Einstellungen 1 Lagensprung
%?bbox	0 0 319 79
/spWinch014 {
	/idWinchNr exch def	%?brief Windenidentifikation %?use INP %?type REAL %?dflt    0.00
	/irRopeLength exch def	%?brief Seillänge %?use INP %?type REAL %?dflt    0.00
	matrix currentmatrix_nlw 
	currentcolor 
	305 60 translate 
	0 rotate 
	1 1 scale 
	(2) 
	FSfatFont 0 
	baText001 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	305 20 translate 
	0 rotate 
	1 1 scale 
	(1) 
	FSfatFont 0 
	baText001 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	164 0 translate 
	0 rotate 
	1 1 scale 
	gsGeneral076 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	230 0 translate 
	0 rotate 
	1 1 scale 
	ssGeneral013 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	115 35 translate 
	0 rotate 
	1 1 scale 
	irRopeLength 3.20 false false 
	FSmidFont 1 
	baValueDist001 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	-2 0 translate 
	0 rotate 
	1 1 scale 
	ssWinch014 
	setcolor 
	setmatrix_nlw 
	matrix currentmatrix_nlw 
	currentcolor 
	41 41 translate 
	0 rotate 
	1 1 scale 
	idWinchNr 1 false false 
	FSfatFont 
	baValue004 
	setcolor 
	setmatrix_nlw 
} def
%?partend

